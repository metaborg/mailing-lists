From M.A.Akhter at student.tudelft.nl  Thu Sep  1 12:27:34 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 01 Sep 2011 10:27:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23268 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	jdbm jdbm/recman org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110901102734.D3A0F2B8020@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Sep  1 10:27:34 2011
New Revision: 23268
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23268&sc=1

Log:
added state management of the persistence manager. now , it can be checked whether underlying RecordManager is closed or not. Based on that cleaning up operation can be performed in case of Error and Exceptions.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/CacheRecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -153,7 +153,8 @@
     public abstract void close()
         throws IOException;
 
-
+    public boolean IsClosed();
+    
     /**
      * Empty cache. This may be usefull if you need to release memory.
      * 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -695,6 +695,13 @@
         }
     }
 
+    public boolean IsClosed()
+    {
+    	if ( _physFile == null ) 
+    		return true;
+    	
+    	return false;
+    }
 
 	public synchronized void clearCache() throws IOException {
 		//no cache		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/CacheRecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/CacheRecordManager.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/CacheRecordManager.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -549,6 +549,12 @@
 		commit();
 		_recman.defrag();		
 	}
-  
 
+
+	public boolean IsClosed() {
+		if ( _recman == null )
+			return true;
+		return false;
+	}
+ 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -21,4 +21,6 @@
 	public SpxCompilationUnitSymbolTable  spxCompilcationUnitTable();
 
 	public void commit() throws IOException;
+	
+	public boolean IsPersistenceManagerClosed();
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -22,12 +22,10 @@
 		return getTermFactory().makeConstructor(_scopeType, 0);
 	}
 
-
 	@Override public Scope getEnclosingScope() {
 		// TODO Auto-generated method stub
 		return null;
 	}
-
 	/* (non-Javadoc)
 	 * @see java.lang.Object#hashCode()
 	 */
@@ -39,7 +37,6 @@
 				+ ((_scopeType == null) ? 0 : _scopeType.hashCode());
 		return result;
 	}
-
 	/* (non-Javadoc)
 	 * @see java.lang.Object#equals(java.lang.Object)
 	 */
@@ -59,8 +56,6 @@
 			return false;
 		return true;
 	}
-
-	
 	/* (non-Javadoc)
 	 * @see java.lang.Object#toString()
 	 */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -46,7 +46,5 @@
 			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed. Error : "+ ex.getMessage());
 			return false;
 		}
-		
-	}
-
+	}	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -115,5 +115,11 @@
 		
 		return _spxUnitsTable;
 	}
+
+	public boolean IsPersistenceManagerClosed() {
+		
+		return _recordManager.IsClosed();
+		
+	}
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -93,54 +93,96 @@
 
 		boolean successStatement = false;
 		
-		SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 		try {
+			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 			idxFacade.indexCompilationUnit( spxCompilationUnitPath, spxCompilationUnitAST);
-			successStatement = true; // setting the flag to indicate the operation is successful
+			successStatement =  true; // setting the flag to indicate the operation is successful
 		}
-		catch (Exception ex)
-		{	
-			idxFacade.printError( "[SPX_Index_CompilationUnit failed] Error : "+ ex.getMessage()) ;	//logging exception.
+		catch(IllegalStateException e)
+		{
+			tryCleanupResources(projectName);
+			throw e;
 		}
+		catch(Error er)
+		{
+			tryCleanupResources(projectName);
+			throw er;
+		}	
 		return successStatement;
 	}
 
 	public IStrategoTerm getCompilationUnit(IStrategoString projectName,
-			IStrategoString spxCompilationUnitPath) {
-		
-		SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+			IStrategoString spxCompilationUnitPath) throws IllegalStateException{
 		
-		return idxFacade.getCompilationUnit(spxCompilationUnitPath);
+		try 
+		{
+			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+			
+			return idxFacade.getCompilationUnit(spxCompilationUnitPath);
+		}
+		catch(IllegalStateException e)
+		{
+			tryCleanupResources(projectName);
+			throw e;
+		}
+		catch(Error er)
+		{
+			tryCleanupResources(projectName);
+			throw er;
+		}	
 	}
 	
 	public boolean removeCompilationUnit(IStrategoString projectName,
-			IStrategoString spxCompilationUnitPath) {
+			IStrategoString spxCompilationUnitPath) throws IllegalStateException{
 		
 		boolean successStatement = false;
 		
-		SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+		
 		try {
+			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 			idxFacade.removeCompilationUnit(spxCompilationUnitPath);
+			
 			successStatement = true; // setting the flag to indicate the operation is successful
 		}
-		catch (Exception ex)
-		{	
-			idxFacade.printError( "[SPX_Index_removeCompilationUnit failed] Error : "+ ex.getMessage()) ;	//logging exception.
+		catch(IllegalStateException exception)
+		{
+			tryCleanupResources(projectName);
+			throw exception;
+		}
+		catch(Error er)
+		{
+			tryCleanupResources(projectName);
+			throw er;
 		}
 		return successStatement;
 	}
 	
 	/**
 	 * Saves the indexes of the project specified by the projectName
-	 * @param projectName Term representation of the projectName 
+	 * @param tvars Term representation of the projectName 
 	 * @return true if the operation is successful ; otherwise false.
 	 * @throws IOException 
 	 */
-	public boolean save(IStrategoTerm projectName) throws IllegalStateException, IOException
+	public boolean save(IStrategoTerm tvars) throws IllegalStateException, IOException
 	{
-		SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-		idxFacade.persistChanges();
-		return true;
+		boolean retValue = false; 
+		try
+		{
+			SpxSemanticIndexFacade idxFacade = getFacade(tvars);
+			idxFacade.persistChanges();
+			retValue = true;
+		}
+		catch(IllegalStateException e)
+		{
+			tryCleanupResources(tvars);
+			throw e;
+		}
+		catch(Error er)
+		{
+			tryCleanupResources(tvars);
+			throw er;
+		}
+		return retValue;
 	}
 	
 	public boolean close(IStrategoTerm projectName) throws IOException {
@@ -149,6 +191,19 @@
 		return true;
 	}
 	
+	private void tryCleanupResources( IStrategoTerm projectName){
+		
+		if ( _facadeRegistry.containsFacade(projectName))
+		{
+			SpxSemanticIndexFacade facade = _facadeRegistry.removeFacade(projectName);
+			try {
+				facade.close();
+			} catch (IOException e) {
+				facade.printError( "[SPXSemanticIndex] . Cleanup Failed due to following Error : "+ e.getMessage()) ;	//logging exception.
+			}
+		}	
+	}
+	
 	private SpxSemanticIndexFacade getFacade(IStrategoTerm projectName) {
 
 		SpxSemanticIndexFacade facade = _facadeRegistry.getFacade(projectName);
@@ -156,7 +211,6 @@
 		return facade;
 	}
 	
-	
 	private SpxSemanticIndexFacade removeFacade(IStrategoTerm projectName) {
 
 		SpxSemanticIndexFacade facade = _facadeRegistry.removeFacade(projectName);
@@ -170,4 +224,5 @@
 	}
 	
 	
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -176,8 +176,9 @@
 		_persistenceManager.commit();
 	}
 
+	
 	public void close() throws IOException {
-		_persistenceManager.commitAndClose();
-		
+		if (! _persistenceManager.IsPersistenceManagerClosed())
+			_persistenceManager.commitAndClose();
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Wed Aug 31 21:58:30 2011	(r23267)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Thu Sep  1 10:27:34 2011	(r23268)
@@ -6,6 +6,7 @@
 import java.util.HashMap;
 
 import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
@@ -63,4 +64,12 @@
 		return _registry.remove(key);
 	}
 	
+	
+	public boolean containsFacade(IStrategoTerm projectName)
+	{
+		String key = asJavaString(projectName);
+		
+		return _registry.containsKey(key);
+	}	
+	
 }
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Thu Sep  1 12:40:09 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 01 Sep 2011 10:40:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23269 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110901104009.763E27F800B@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Sep  1 10:40:09 2011
New Revision: 23269
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23269&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Thu Sep  1 10:27:34 2011	(r23268)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Thu Sep  1 10:40:09 2011	(r23269)
@@ -22,5 +22,5 @@
 
 	public void commit() throws IOException;
 	
-	public boolean IsPersistenceManagerClosed();
+	public boolean IsClosed();
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Thu Sep  1 10:27:34 2011	(r23268)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Thu Sep  1 10:40:09 2011	(r23269)
@@ -116,7 +116,7 @@
 		return _spxUnitsTable;
 	}
 
-	public boolean IsPersistenceManagerClosed() {
+	public boolean IsClosed() {
 		
 		return _recordManager.IsClosed();
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Sep  1 10:27:34 2011	(r23268)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Sep  1 10:40:09 2011	(r23269)
@@ -178,7 +178,9 @@
 
 	
 	public void close() throws IOException {
-		if (! _persistenceManager.IsPersistenceManagerClosed())
+		if (! isPersistenceManagerClosed())
 			_persistenceManager.commitAndClose();
 	}
+	
+	boolean isPersistenceManagerClosed() { return _persistenceManager.IsClosed();}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Thu Sep  1 10:27:34 2011	(r23268)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Thu Sep  1 10:40:09 2011	(r23269)
@@ -20,21 +20,30 @@
 	final HashMap<String, SpxSemanticIndexFacade> _registry = new HashMap<String, SpxSemanticIndexFacade>();
 	
 	/**
-	 * Initializes the SemanticIndexFactory
+	 * Initializes the SemanticIndexFactory if the registry does not contain any mapping of existing Facade, or it 
+	 * has facade object in the registry , but the underlying persistence manager is closed.
+	 * 
 	 * @param projectName
 	 * @param factory
 	 * @throws IOException
 	 */
 	public void add(IStrategoTerm projectName , ITermFactory factory , IOAgent agent) throws IOException
 	{	
-		String projectNameString = asJavaString(projectName);
+		SpxSemanticIndexFacade fac = null;
 		
-		if ( !_registry.containsKey(projectNameString))
+		if ( !containsFacade(projectName))
+			fac = new SpxSemanticIndexFacade(projectName, factory, agent);
+		else
 		{
-			SpxSemanticIndexFacade fac = new SpxSemanticIndexFacade(projectName, factory, agent);
-			
-			_registry.put(fac.getProjectNameString(), fac);
+			SpxSemanticIndexFacade f = _registry.get(projectName);
+			if(f.isPersistenceManagerClosed())
+			{
+				fac = new SpxSemanticIndexFacade(projectName, factory, agent);
+			}	
 		}
+		
+		if(fac != null)
+			_registry.put(fac.getProjectNameString(), fac);
 	}
 	
 	

From L.C.L.Kats at tudelft.nl  Thu Sep  1 16:48:39 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Sep 2011 14:48:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23270 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders
Message-ID: <20110901144839.36FF9108C00B@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Sep  1 14:48:38 2011
New Revision: 23270
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23270&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch	Thu Sep  1 10:40:09 2011	(r23269)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch	Thu Sep  1 14:48:38 2011	(r23270)
@@ -16,7 +16,7 @@
 </listAttribute>
 <stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
-<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.editors.spoofax"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.spoofax}/build.main.xml"/>

From L.C.L.Kats at tudelft.nl  Thu Sep  1 17:03:37 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Sep 2011 15:03:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23271 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: . META-INF
Message-ID: <20110901150337.EB9A67F8043@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Sep  1 15:03:37 2011
New Revision: 23271
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23271&sc=1

Log:
some project configuration tweaks that seem to be necessary to cleanly build org.strategoxt.imp.metatooling

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath	Thu Sep  1 14:48:38 2011	(r23270)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath	Thu Sep  1 15:03:37 2011	(r23271)
@@ -1,9 +1,8 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
+<?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="editor/java"/>
+	<classpathentry exported="true" kind="lib" path="include/spoofaxlang.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="editor/java"/>
 	<classpathentry kind="output" path="bin"/>
-	<classpathentry exported="true" kind="lib" path="include/spoofaxlang.jar" sourcepath="editor/java"/>
-</classpath>
\ No newline at end of file
+</classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project	Thu Sep  1 14:48:38 2011	(r23270)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project	Thu Sep  1 15:03:37 2011	(r23271)
@@ -1,37 +1,43 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
+<?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-      <name>org.strategoxt.imp.editors.spoofax</name>
-      <comment></comment>
-      <buildSpec>
-        <buildCommand>
-          <name>org.eclipse.jdt.core.javabuilder</name>
-          <arguments>
-          </arguments>
-        </buildCommand>
-        <buildCommand>
-            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
-            <triggers>full,incremental,</triggers>
-            <arguments>
-                <dictionary>
-                    <key>LaunchConfigHandle</key>
-                    <value>&lt;project&gt;/.externalToolBuilders/SpoofaxLang build.main.xml.launch</value>
-                </dictionary>
-            </arguments>
-        </buildCommand>
-        <buildCommand>
-          <name>org.eclipse.pde.ManifestBuilder</name>
-          <arguments>
-          </arguments>
-        </buildCommand>
-        <buildCommand>
-          <name>org.eclipse.pde.SchemaBuilder</name>
-          <arguments>
-          </arguments>
-        </buildCommand>
-      </buildSpec>
-      <natures>
-        <nature>org.eclipse.pde.PluginNature</nature>
-        <nature>org.eclipse.jdt.core.javanature</nature>
-      </natures>
-    </projectDescription>
\ No newline at end of file
+	<name>org.strategoxt.imp.editors.spoofax</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/org.eclipse.jdt.core.javabuilder.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/SpoofaxLang build.main.xml.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Thu Sep  1 14:48:38 2011	(r23270)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Thu Sep  1 15:03:37 2011	(r23271)
@@ -2,10 +2,9 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: SpoofaxLang Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.editors.spoofax; singleton:=true
-Bundle-Version: 1.0.0
-Bundle-Activator: org.strategoxt.imp.editors.spoofax.Activator
-Bundle-ClassPath: include/spoofaxlang.jar,
- .
+Bundle-Version: 1.0.0.qualifier
+Bundle-ClassPath: .,
+ include/spoofaxlang.jar
 Require-Bundle: org.eclipse.core.runtime,
   org.eclipse.core.resources,
   org.eclipse.imp.runtime,

From L.C.L.Kats at tudelft.nl  Thu Sep  1 17:04:26 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Sep 2011 15:04:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23272 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	unit-tests/templatelang
Message-ID: <20110901150426.6AE5A2B8036@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Sep  1 15:04:26 2011
New Revision: 23272
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23272&sc=1

Log:
removed unit tests from includes for now to fix a build problem

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Sep  1 15:03:37 2011	(r23271)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Sep  1 15:04:26 2011	(r23272)
@@ -34,9 +34,11 @@
 	utils/cache
 	common
   config
+  /*
 	unit-tests/-
 	unit-tests/templatelang/-
 	unit-tests/utils/-
+	*/
 imports
 	 editor/main
 	 codegen/main
@@ -68,6 +70,7 @@
       filename := <guarantee-extension(|"aterm")> path;
       result   := ast // we just return the input term
 
+/*
   run-templatelang-tests:
     (selected, position, ast, path, project-path) -> None()
     with
@@ -76,3 +79,4 @@
       test-templatelang-to-stratego;
       test-templatelang-desugar;
       test-sdf2conflicts
+*/
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.str	Thu Sep  1 15:03:37 2011	(r23271)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.str	Thu Sep  1 15:04:26 2011	(r23272)
@@ -44,13 +44,13 @@
         }
 
         test-placeholders =
-          <test'> ($[X.Y = <<<Z>>>],
+          <test2> ($[X.Y = <<<Z>>>],
             |[ prettyprint-X: Y(a) -> zz
-               with a' := <prettyprint-Z> a;
-                    zz := <concat-strings> [a'] ]|);
-          <test'> ($[X.Y = <<<this text is ignored : Z>>>],
+               with a2 := <prettyprint-Z> a;
+                    zz := <concat-strings> [a2] ]|);
+          <test2> ($[X.Y = <<<this text is ignored : Z>>>],
             |[ prettyprint-X: Y(a) -> zz
-               with a' := <prettyprint-Z> a;
+               with a2 := <prettyprint-Z> a;
                     zz := <concat-strings> [a'] ]|);
           // We got the hang of it; just test whether the varying part looks correct.
           <test'> ($[X.Y = <<<Z?>>>],

From L.C.L.Kats at tudelft.nl  Thu Sep  1 17:05:09 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Sep 2011 15:05:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23273 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang
Message-ID: <20110901150509.2E4F72B800C@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Sep  1 15:05:08 2011
New Revision: 23273
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23273&sc=1

Log:
reverted debugging changes

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.str	Thu Sep  1 15:04:26 2011	(r23272)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.str	Thu Sep  1 15:05:08 2011	(r23273)
@@ -44,13 +44,13 @@
         }
 
         test-placeholders =
-          <test2> ($[X.Y = <<<Z>>>],
+          <test'> ($[X.Y = <<<Z>>>],
             |[ prettyprint-X: Y(a) -> zz
-               with a2 := <prettyprint-Z> a;
-                    zz := <concat-strings> [a2] ]|);
-          <test2> ($[X.Y = <<<this text is ignored : Z>>>],
+               with a' := <prettyprint-Z> a;
+                    zz := <concat-strings> [a'] ]|);
+          <test'> ($[X.Y = <<<this text is ignored : Z>>>],
             |[ prettyprint-X: Y(a) -> zz
-               with a2 := <prettyprint-Z> a;
+               with a' := <prettyprint-Z> a;
                     zz := <concat-strings> [a'] ]|);
           // We got the hang of it; just test whether the varying part looks correct.
           <test'> ($[X.Y = <<<Z?>>>],

From L.C.L.Kats at tudelft.nl  Thu Sep  1 17:40:26 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Sep 2011 15:40:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23274 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org:
	eclipse/jdt/internal/junit/ui strategoxt/imp/testing
	strategoxt/imp/testing/model strategoxt/imp/t...
Message-ID: <20110901154026.ACFE92B8009@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Sep  1 15:40:26 2011
New Revision: 23274
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23274&sc=1

Log:
cleanup

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_refactoring_0_1.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -46,6 +46,7 @@
 		super(parent, SWT.NONE);
 
 		addControlListener(new ControlAdapter() {
+			@Override
 			public void controlResized(ControlEvent e) {
 				fColorBarWidth= scale(fCurrentTickCount);
 				redraw();
@@ -150,6 +151,7 @@
 		gc.fillRectangle(1, 1, fColorBarWidth, rect.height-2);
 	}
 
+	@Override
 	public Point computeSize(int wHint, int hHint, boolean changed) {
 		checkWidget();
 		Point size= new Point(DEFAULT_WIDTH, DEFAULT_HEIGHT);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -9,6 +9,7 @@
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
 import static org.spoofax.terms.Term.tryGetConstructor;
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.findTerm;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -48,9 +49,6 @@
 	
 	private static final int FRAGMENT_PARSE_TIMEOUT = 3000;
 	
-	private static final IStrategoConstructor FAILS_0 =
-		Environment.getTermFactory().makeConstructor("Fails", 0);
-	
 	private static final IStrategoConstructor FAILS_PARSING_0 =
 		Environment.getTermFactory().makeConstructor("FailsParsing", 0);
 	
@@ -63,6 +61,9 @@
 	private static final IStrategoConstructor QUOTEPART_1 =
 		Environment.getTermFactory().makeConstructor("QuotePart", 1);
 	
+	private static final IStrategoConstructor TOPSORT_1 =
+		Environment.getTermFactory().makeConstructor("TopSort", 1);
+	
 	private static final int EXCLUSIVE = 1;
 	
 	private final WeakValueHashMap<String, IStrategoTerm> failParseCache =
@@ -85,6 +86,8 @@
 			parser = getParser(descriptor, path, project);
 			failParseCache.clear();
 			successParseCache.clear();
+			IStrategoTerm start = findTerm(ast, TOPSORT_1.getName());
+			parser.setStartSymbol(start == null ? null : asJavaString(start));
 		}
 		setupRegions = getSetupRegions(ast);
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -3,8 +3,6 @@
 import java.util.Collection;
 import java.util.HashMap;
 
-import org.strategoxt.imp.testing.SpoofaxTestingParseController;
-
 public class TestsuiteRun {
 	private String name;
 	private String resource;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_refactoring_0_1.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_refactoring_0_1.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_refactoring_0_1.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -2,15 +2,14 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 import static org.spoofax.interpreter.core.Tools.termAt;
-import static org.spoofax.terms.Term.*;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.HybridInterpreter;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.TermReader;
 import org.strategoxt.imp.runtime.services.InputTermBuilder;
-import org.strategoxt.imp.runtime.services.StrategoReferenceResolver;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
@@ -33,8 +32,7 @@
 			current = InputTermBuilder.getMatchingNode(semNodes, current, false);
 			if(current == null) return null;
 		} catch (BadDescriptorException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			Environment.logException("Refactoring test failed", e);
 		}
 		HybridInterpreter runtime = HybridInterpreter.getInterpreter(context);
 		InputTermBuilder inputBuilder = new InputTermBuilder(runtime, analyzedAst);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -48,20 +48,15 @@
 			    result = parser.parse(input, "string");
 			}
 		} catch (BadDescriptorException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			Environment.logException("Could not parse testing string", e);
 		} catch (TokenExpectedException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			Environment.logException("Could not parse testing string", e);
 		} catch (BadTokenException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			Environment.logException("Could not parse testing string", e);
 		} catch (SGLRException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			Environment.logException("Could not parse testing string", e);
 		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			Environment.logException("Could not parse testing string", e);
 		}
 		
 		return result;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -4,10 +4,8 @@
 
 import java.lang.reflect.Method;
 
-import org.eclipse.jface.dialogs.InputDialog;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.IViewPart;
-import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoString;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -4,13 +4,10 @@
 
 import java.lang.reflect.Method;
 
-import org.eclipse.jface.dialogs.InputDialog;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.IViewPart;
-import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -2,11 +2,9 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
-import org.eclipse.jface.dialogs.InputDialog;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -4,12 +4,9 @@
 
 import java.lang.reflect.Method;
 
-import org.eclipse.jface.dialogs.InputDialog;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.IViewPart;
-import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
-import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java	Thu Sep  1 15:05:08 2011	(r23273)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java	Thu Sep  1 15:40:26 2011	(r23274)
@@ -22,7 +22,6 @@
 import org.eclipse.swt.widgets.TreeColumn;
 import org.eclipse.ui.forms.widgets.FormToolkit;
 import org.eclipse.ui.part.ViewPart;
-import org.omg.CORBA.Environment;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.testing.model.TestRun;
@@ -116,8 +115,7 @@
 						res = EditorIOAgent.getResource(f);
 						EditorState.asyncOpenEditor(Display.getDefault(), (IFile)res, offset, true);
 					} catch (FileNotFoundException e) {
-						// TODO Auto-generated catch block
-						e.printStackTrace();
+						org.strategoxt.imp.runtime.Environment.logException("File not found", e);
 					}
 				}
 			}
@@ -146,6 +144,7 @@
         pb.setMaximum(nrTests);
     }
     
+	@Override
 	public void dispose() {
         toolkit.dispose();
         super.dispose();

From L.C.L.Kats at tudelft.nl  Thu Sep  1 17:46:42 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Sep 2011 15:46:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23275 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing:
	editor/java/org/strategoxt/imp/testing trans
Message-ID: <20110901154642.1A5812B8009@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Sep  1 15:46:41 2011
New Revision: 23275
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23275&sc=1

Log:
an attempt at start symbol support

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Thu Sep  1 15:40:26 2011	(r23274)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Thu Sep  1 15:46:41 2011	(r23275)
@@ -86,9 +86,9 @@
 			parser = getParser(descriptor, path, project);
 			failParseCache.clear();
 			successParseCache.clear();
-			IStrategoTerm start = findTerm(ast, TOPSORT_1.getName());
-			parser.setStartSymbol(start == null ? null : asJavaString(start));
 		}
+		IStrategoTerm start = findTerm(ast, TOPSORT_1.getName());
+		parser.setStartSymbol(start == null ? null : asJavaString(start.getSubterm(0)));
 		setupRegions = getSetupRegions(ast);
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Sep  1 15:40:26 2011	(r23274)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Sep  1 15:46:41 2011	(r23275)
@@ -41,9 +41,6 @@
 
   check-note = fail
   
-  check-warning:
-    TopSort(s) -> (s, $[Start symbol filter not implemented; use a setup block instead])
-  
   check-error:
     Test(_, d, _, [_, _ | _]) -> (d, "Specify only one success condition)") // maybe in the future...
   

From L.C.L.Kats at tudelft.nl  Thu Sep  1 18:14:42 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Sep 2011 16:14:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23276 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading services
Message-ID: <20110901161442.722837F8023@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Sep  1 16:14:42 2011
New Revision: 23276
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23276&sc=1

Log:
fixed a case where not all candidate sorts would be detected for (syntactic) content completion

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Thu Sep  1 15:46:41 2011	(r23275)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Thu Sep  1 16:14:42 2011	(r23276)
@@ -62,7 +62,7 @@
 				refactorings = collectRefactorings(descriptor, (SGLRParseController) controller);
 				setRefactoringActions(editor, refactorings);
 			} catch (BadDescriptorException e) {
-				Environment.logException("Could not eagerly initialize the content proposal service", e);
+				Environment.logException("Could not eagerly initialize the refactoring service", e);
 			}
 		}
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Sep  1 15:46:41 2011	(r23275)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Sep  1 16:14:42 2011	(r23276)
@@ -74,7 +74,8 @@
 		boolean avoidReparse = completionFunction == null && templates.size() == 0;
 		IStrategoTerm ast = parser.parse(controller, selection, document, avoidReparse);
 		int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
-		Set<String> sorts = new AstSortInspector(ast).getSortsAtOffset(offset - prefixLength, offset);
+		Set<String> sorts = new AstSortInspector(ast).getSortsAtOffset(
+				offset - prefixLength, offset + COMPLETION_TOKEN.length() - 1);
 		if (parser.getCompletionNode() == null)
 			return getParseFailureProposals(controller, document, offset, sorts, viewer);
 

From L.C.L.Kats at tudelft.nl  Thu Sep  1 18:20:48 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Sep 2011 16:20:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23277 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
Message-ID: <20110901162048.8A846108C00B@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Sep  1 16:20:48 2011
New Revision: 23277
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23277&sc=1

Log:
catch Spoofax/416 exception

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Thu Sep  1 16:14:42 2011	(r23276)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Thu Sep  1 16:20:48 2011	(r23277)
@@ -63,6 +63,8 @@
 				setRefactoringActions(editor, refactorings);
 			} catch (BadDescriptorException e) {
 				Environment.logException("Could not eagerly initialize the refactoring service", e);
+			} catch (RuntimeException e) {
+				Environment.logException("Could not eagerly initialize the refactoring service", e);
 			}
 		}
 	}

From L.C.L.Kats at tudelft.nl  Thu Sep  1 18:42:36 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Sep 2011 16:42:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23278 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: syntax trans
Message-ID: <20110901164236.9D7FD108C01A@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Sep  1 16:42:36 2011
New Revision: 23278
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23278&sc=1

Log:
Tests now support a "parse to [[ ... ]]" condition

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Sep  1 16:20:48 2011	(r23277)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Sep  1 16:42:36 2011	(r23278)
@@ -84,6 +84,7 @@
 
     "parse" "to" "file" PathName -> Result {cons("file")}
     "parse" "to" ATerm   -> Result {cons("pattern")}
+    "parse" "to" Output   -> Result {cons("ParseOutput")}
 
     "fails" "parsing"    -> Result {cons("FailsParsing"), deprecated("Use 'parse fails' instead")}
     "succeeds" "parsing" -> Result {cons("SuccessParsing"), deprecated("Use 'parse succeeds' instead")}
@@ -104,6 +105,7 @@
     INT "fatal" "error" -> Result    {cons("Fatal")}
     INT "fatal" "errors"-> Result    {cons("Fatals")}
 
+
     "resolve" OptNumbered                     -> Result {cons("Resolve")}
     "resolve" Numbered "to" Numbered          -> Result {cons("ResolveTo")}
     "complete" OptNumbered                    -> Result {cons("Complete")}
@@ -142,6 +144,7 @@
             -> "resolves" {recover, reject}
             -> "=>" {recover, reject}
             -> "->" {recover, reject}
+            -> "/" {recover, reject}
 
   %% test Primitive refactoring test
   %% [[ module x entity X {} ]] refactoring rename at X input Y =>

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Sep  1 16:20:48 2011	(r23277)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Sep  1 16:42:36 2011	(r23278)
@@ -147,6 +147,15 @@
     ; not(<aterm-eq> (exploded, p))
 
   check-expectation(|ast, selections, messages) :
+    ParseOutput(_{^[output | _]}) -> $[Does not match pattern: [result]]
+    where
+      not(<eq> (ast, output))
+    with
+      result := <spt-pp-string> ast
+    <+
+      result := $[[<write-to-string> ast] instead of [<write-to-string> ast]]
+
+  check-expectation(|ast, selections, messages) :
     file(f) -> $[Does not match pattern: [<write-to-string> ast]]
     where
       exploded := <explode-aterm> ast

From M.A.Akhter at student.tudelft.nl  Fri Sep  2 00:09:32 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 01 Sep 2011 22:09:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23279 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110901220932.464E0108C004@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Sep  1 22:09:31 2011
New Revision: 23279
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23279&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitSymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitSymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitSymbolTable.java	Thu Sep  1 16:42:36 2011	(r23278)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitSymbolTable.java	Thu Sep  1 22:09:31 2011	(r23279)
@@ -17,9 +17,11 @@
 	
 	
 	/**
+	 * Creates a new instance of SymbolTable or loads existing SymbolTable with name specified  
+	 * in the following tableName argument.
 	 * 
-	 * @param tableName
-	 * @param manager
+	 * @param tableName name of the SymbolTable
+	 * @param manager an instance of IPersistenceManager
 	 */
 	public SpxCompilationUnitSymbolTable(String tableName , ISpxPersistenceManager manager)
 	{
@@ -28,8 +30,11 @@
 	}
 	
 	/**
-	 * @param info
-	 * @param compilationUnit
+	 * Defines a new symbol table entry. If the entry is already present in the symboltable, 
+	 * it updates the existing entry by invoking {@link #update(URI, IStrategoTerm)}. 
+	 * 
+	 * @param absPath URI representing the absolute path of the Compilation Unit.   
+	 * @param compilationUnit compilation unit AST represented by {@link IStrategoTerm}
 	 */
 	public void define(URI absPath , IStrategoTerm compilationUnitRTree)
 	{	
@@ -42,8 +47,10 @@
 	}
 	
 	/**
-	 * Adding the new CompilationUnit in this symbol table 
+	 * Adds the new CompilationUnit.
+	 * 
 	 * @param absPath
+	 * @param compilationUnitRTree
 	 */
 	private void add(URI absPath , IStrategoTerm compilationUnitRTree) 
 	{
@@ -58,7 +65,7 @@
 	
 	
 	/**
-	 * Updates an Existing Table Entry 
+	 * Updates existing symbol table entry. 
 	 * 
 	 * @param absPath
 	 * @param compilationUnitRTree
@@ -107,8 +114,4 @@
 		return _spxUnitStoreMap.get(retUnitData.getRecId());
 		
 	}
-	
-	
-	
-	
 }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Thu Sep  1 22:09:31 2011	(r23279)
@@ -0,0 +1,149 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.io.IOException;
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.List;
+
+import jdbm.PrimaryHashMap;
+import jdbm.SecondaryKeyExtractor;
+import jdbm.SecondaryTreeMap;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.terms.TermFactory;
+
+
+class SpxModuleLookupTable {
+
+	private final PrimaryHashMap<IStrategoList, ModuleDeclaration> _moduleLookupMap;
+	private final SecondaryTreeMap <String , IStrategoList , ModuleDeclaration> _uriMap;
+
+	/**
+	 * Instantiates a lookup table for the base constructs (e.g. , packages and modules)of  Spoofaxlang.
+	 *  
+	 * @param tableName name of the table 
+	 * @param manager an instance of {@link ISpxPersistenceManager}
+	 */
+	public SpxModuleLookupTable(String tableName , ISpxPersistenceManager manager)
+	{
+		assert tableName != null;
+		assert manager != null;
+		
+		_moduleLookupMap = manager.loadHashMap(tableName+ "._lookupModuleMap.idx");
+		
+		// readonly secondary view of the the lookup table . 
+		_uriMap = _moduleLookupMap.secondaryTreeMap(tableName+ "._urimap.idx", 
+				new SecondaryKeyExtractor<String, IStrategoList, ModuleDeclaration>() {
+
+			/**
+			 * Returns the Secondary key of the lookup table. 
+			 *   
+			 * @param key current primary key 
+			 * @param value value to be mapped using primary key
+			 * @return secondary key to map the value with . 
+			 */
+			public String extractSecondaryKey(IStrategoList key, ModuleDeclaration value) {
+				return value.resourceAbsPath;
+			}
+		}
+		);
+	}
+	
+	/**
+	 * Defines a new entry in this symbol table 
+	 * 
+	 * @param info
+	 * @param compilationUnit
+	 */
+	public void define(ModuleDeclaration decl)
+	{	
+		_moduleLookupMap.put(decl.getId(), decl);  
+	}
+	/**
+	 * Removes {@link BaseConstructDeclaration} from the lookup table mapped by the {@code id}
+	 * 
+	 * @param id {@link IStrategoList} representing qualified ID of the Construct
+	 * @return {@link BaseConstructDeclaration} mapped by {@code id}
+	 */
+	public ModuleDeclaration remove(IStrategoList id)
+	{
+		return _moduleLookupMap.remove(id);
+	}
+	/**
+	 * Returns {@link BaseConstructDeclaration} that is mapped by the specified {@code id} argument.
+	 * 
+	 * @param id
+	 * @return
+	 */
+	public ModuleDeclaration get(IStrategoList id) {
+		return _moduleLookupMap.get(id);
+	}
+	
+	/**
+	 * Returns ModuleDeclarations mapped by absPath
+	 * 
+	 * @param absUri
+	 * @return
+	 */
+	public Iterable<ModuleDeclaration> moduleDeclarationsByUri( String absUri)
+	{
+		List<ModuleDeclaration> ret = new ArrayList<ModuleDeclaration>();
+	
+		for ( IStrategoList l: _uriMap.get(absUri))
+			ret.add(_uriMap.getPrimaryValue(l));
+		
+		return ret;
+	}
+	
+	
+	/**
+	 * added only for the testing purpose.
+	 *  
+	 * @param args
+	 * @throws IOException
+	 */
+	public static void main(String[] args) throws IOException { 
+		//TODO :  add actual unit tests
+		//TODO :  add reference to JUnit  
+	 
+		
+		ISpxPersistenceManager manager = new SpxPersistenceManager( "test" , "c:/temp");
+		
+		SpxModuleLookupTable lookupTable = new SpxModuleLookupTable("lookup", manager);
+		
+		final TermFactory f = new TermFactory();
+		final String absPathString = "c:/temp/test.spx" ;
+		final String absPathString2 = "c:/temp/test2.spx" ;
+		//module declaration 
+		IStrategoList idm1 = f.makeList(f.makeString("test") , f.makeString("m1"));
+		ModuleDeclaration m1 = new ModuleDeclaration(absPathString, idm1);
+		
+		lookupTable.define(m1);
+		
+		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
+		ModuleDeclaration m2 = new ModuleDeclaration(absPathString, idm2);
+		
+		lookupTable.define(m2);
+		
+		IStrategoList idm3 = f.makeList(f.makeString("test") , f.makeString("m3"));
+		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3);
+		
+		lookupTable.define(m3);
+		
+		m2 = new ModuleDeclaration(absPathString2, idm2);
+		lookupTable.define(m2);
+	
+		
+		System.out.println("lookup for ID" + idm2 );
+		System.out.println("Result : " + lookupTable.get(idm2));
+		System.out.println();
+		
+		System.out.println("lookup for URI " + absPathString);
+		System.out.println("Result : " + lookupTable.moduleDeclarationsByUri(absPathString));
+		System.out.println();
+		
+		System.out.println("lookup for URI " + absPathString2);
+		System.out.println("Result : " + lookupTable.moduleDeclarationsByUri(absPathString2));
+		System.out.println();
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Thu Sep  1 22:09:31 2011	(r23279)
@@ -0,0 +1,152 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import jdbm.PrimaryHashMap;
+import jdbm.SecondaryKeyExtractor;
+import jdbm.SecondaryTreeMap;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.terms.TermFactory;
+
+/**
+ * @author Md. Adil Akhter
+ * Created On : Sep 1, 2011
+ */
+
+class SpxPackageLookupTable {
+
+	private final PrimaryHashMap<IStrategoList, PackageDeclaration> _packageLookupTable;
+	private final SecondaryTreeMap <String , IStrategoList , PackageDeclaration> _uriMap;
+
+	/**
+	 * Instantiates a lookup table for the base constructs (e.g. , packages and modules)of  Spoofaxlang.
+	 *  
+	 * @param tableName name of the table 
+	 * @param manager an instance of {@link ISpxPersistenceManager}
+	 */
+	public SpxPackageLookupTable(String tableName , ISpxPersistenceManager manager)
+	{
+		assert tableName != null;
+		assert manager != null;
+		
+		_packageLookupTable = manager.loadHashMap(tableName+ "._lookupPackageMap.idx");
+		
+		// readonly secondary view of the the lookup table . 
+		_uriMap = _packageLookupTable.secondaryTreeMapManyToOne(tableName+ "._urimap.idx", 
+				
+				new SecondaryKeyExtractor<Iterable<String>, IStrategoList, PackageDeclaration>() {
+					/**
+					 * Returns the Secondary key of the primary lookup table. 
+					 *   
+					 * @param key current primary key 
+					 * @param value value to be mapped using primary key
+					 * @return secondary key to map the value with . 
+					 */
+					public Iterable<String> extractSecondaryKey(IStrategoList key, PackageDeclaration value) {
+						return value.getAllFilePaths();
+					}
+			}
+		);
+	}
+	
+	
+	public void define( PackageDeclaration packageDeclaration )
+	{
+		assert packageDeclaration != null;
+		
+		_packageLookupTable.put( packageDeclaration.getId(), packageDeclaration);
+	}
+	
+	public boolean appendFilePath( IStrategoList key , String absPath )
+	{
+		assert key!= null & absPath != null ;
+		
+		PackageDeclaration decl  = _packageLookupTable.get(key);
+		
+		if ( decl != null)
+		{
+			decl.add(absPath);
+			this.define(decl);
+			return true;
+		}
+		
+		return false;
+	}
+	
+	public PackageDeclaration get(IStrategoList id) {
+		return _packageLookupTable.get(id);
+	}
+	
+	public PackageDeclaration remove(IStrategoList id)
+	{
+		return _packageLookupTable.remove(id);
+	}
+	
+	public Iterable<PackageDeclaration> packageDeclarationsByUri( String absUri)
+	{
+		List<PackageDeclaration> ret = new ArrayList<PackageDeclaration>();
+	
+		for ( IStrategoList l: _uriMap.get(absUri))
+			ret.add(_uriMap.getPrimaryValue(l));
+		
+		return ret;
+	}
+	
+	
+	/**
+	 * Only for testing purpose
+	 * @param args
+	 * @throws IOException 
+	 */
+	public static void main(String[] args) throws IOException {
+		ISpxPersistenceManager manager = new SpxPersistenceManager( "test" , "c:/temp");
+		
+		SpxPackageLookupTable lookupTable = new SpxPackageLookupTable("lookup", manager);
+		
+		final TermFactory f = new TermFactory();
+		final String absPathString1 = "c:/temp/test.spx" ;
+		final String absPathString2 = "c:/temp/test2.spx" ;
+		
+		//module declaration 
+		IStrategoList idp1 = f.makeList(f.makeString("test") , f.makeString("p1"));
+		PackageDeclaration p1 = new PackageDeclaration(absPathString2, idp1);
+		
+		lookupTable.define(p1);
+		
+		IStrategoList idp2 = f.makeList(f.makeString("test") , f.makeString("p2"));
+		PackageDeclaration  p2 = new PackageDeclaration(absPathString2, idp2);
+		p2.add(absPathString1);
+		
+		lookupTable.define(p2);
+		//saving and closing the persistence manager
+		manager.commitAndClose();
+		
+		
+		// loading the symbol table again
+		ISpxPersistenceManager manager1 = new SpxPersistenceManager( "test" , "c:/temp");
+		SpxPackageLookupTable  lookupTable1 = new SpxPackageLookupTable("lookup", manager1);
+		
+		System.out.println("lookup for ID" + idp2 );
+		System.out.println("Result : " + lookupTable1.get(idp2));
+		System.out.println();
+		
+		System.out.println("lookup for packages in the following URI : " + absPathString1);
+		System.out.println("Result : " + lookupTable1.packageDeclarationsByUri(absPathString1));
+		System.out.println();
+		
+		//update p1 with new uri . Will verify whether the changes are persisted  
+		lookupTable1.appendFilePath(idp2, absPathString2);
+		
+		System.out.println("lookup for ID . [Should return 2 URIs]" + idp2 );
+		System.out.println("Result : " + lookupTable1.get(idp2));
+		System.out.println();
+		
+		System.out.println("lookup for packages in the following URI : " + absPathString2);
+		System.out.println("Result : " + lookupTable1.packageDeclarationsByUri(absPathString2));
+		System.out.println();
+	}
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java	Thu Sep  1 16:42:36 2011	(r23278)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java	Thu Sep  1 22:09:31 2011	(r23279)
@@ -1,5 +1,11 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.io.Serializable;
+import java.net.URI;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
@@ -7,7 +13,6 @@
  * Created On : Aug 20, 2011
  */
 class SpxSemanticIndexEntry {
-
 	
 	private Scope _scope; 
 	
@@ -17,8 +22,7 @@
 	{
 		setScope(scope);
 	}
-	
-	
+
 	public Scope getScope() {
 		return _scope;
 	}
@@ -62,7 +66,6 @@
 		return result;
 	}
 
-
 	/* (non-Javadoc)
 	 * @see java.lang.Object#equals(java.lang.Object)
 	 */
@@ -90,7 +93,10 @@
 }
 
 
-
+/**
+ * @author Md. Adil Akhter
+ * Created On : Sep 1, 2011
+ */
 class SpxSemanticIndexKey extends SpxSemanticIndexEntry
 {	
 	public SpxSemanticIndexKey(Scope scope, IStrategoTerm key)
@@ -103,7 +109,6 @@
 		return getData(); 
 		
 	}
-	
 
 	/* (non-Javadoc)
 	 * @see java.lang.Object#toString()
@@ -118,6 +123,10 @@
 }
 
 
+/**
+ * @author Md. Adil Akhter
+ * Created On : Sep 1, 2011
+ */
 class SpxSemanticIndexSymbol extends SpxSemanticIndexEntry
 {
 	private final IStrategoTerm _key ;
@@ -130,7 +139,6 @@
 		setData(symbol);
 	}
 	
-	
 	/**
 	 * @return the _key
 	 */
@@ -138,15 +146,11 @@
 		return _key;
 	}
 
-	
 	public IStrategoTerm getValue()
 	{
 		return getData();
 	}
 
-
-	
-	
 	/* (non-Javadoc)
 	 * @see java.lang.Object#hashCode()
 	 */
@@ -158,7 +162,6 @@
 		return result;
 	}
 
-
 	/* (non-Javadoc)
 	 * @see java.lang.Object#equals(java.lang.Object)
 	 */
@@ -179,7 +182,6 @@
 		return true;
 	}
 
-
 	/* (non-Javadoc)
 	 * @see java.lang.Object#toString()
 	 */
@@ -191,7 +193,184 @@
 				"scope="  + getScope().toString() +
 				"]";
 	}
+}
+
+abstract class BaseConstructDeclaration implements Serializable
+{
+	private static final long serialVersionUID = 1055862481052307186L;
+	
+	protected static final int PackageType = 1;
+	protected static final int ModuleType = 2;
+	
+	final IStrategoList id;
+	
+	public BaseConstructDeclaration(IStrategoList uri) {
+		super();
+		this.id = uri;
+	}
 	
+	public IStrategoList getId()
+	{
+		//returns String representation of the BaseConstruct.
+		return id;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		BaseConstructDeclaration other = (BaseConstructDeclaration) obj;
+		if (id == null) {
+			if (other.id != null)
+				return false;
+		} else if (!id.match(other.id))
+			return false;
+		return true;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "BaseConstructDeclaration [id=" + id + "]";
+	}
+}
+
+class ModuleDeclaration extends BaseConstructDeclaration 
+{
+	private static final long serialVersionUID = -6249406731326662111L;
+	
+	final String resourceAbsPath; 
+	
+	public ModuleDeclaration(String resourceAbsPath, IStrategoList id) {
+		super(id);
+		
+		this.resourceAbsPath = resourceAbsPath;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "ModuleDeclaration [resourceAbsPath=" + resourceAbsPath
+				+ ", id=" + id + "]";
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime * result
+				+ ((resourceAbsPath == null) ? 0 : resourceAbsPath.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		ModuleDeclaration other = (ModuleDeclaration) obj;
+		if (resourceAbsPath == null) {
+			if (other.resourceAbsPath != null)
+				return false;
+		} else if (!resourceAbsPath.equals(other.resourceAbsPath))
+			return false;
+		return true;
+	}
+}
+
+class PackageDeclaration extends BaseConstructDeclaration
+{
+	private static final long serialVersionUID = -9081890582103567413L;
+	
+	final Set<String> resourceAbsPaths = new HashSet<String>();
+	
+	public PackageDeclaration(String resourceAbsPath, IStrategoList id) {
+		super(id);
+		
+		resourceAbsPaths.add(resourceAbsPath); 
+	}
+	
+	public  void add(String resAbsolutePath)
+	{
+		resourceAbsPaths.add(resAbsolutePath);
+	}
+	
+	public Set<String> getAllFilePaths()
+	{
+		 return resourceAbsPaths;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "PackageDeclaration [id=" + id + ", resourceAbsPaths=" + resourceAbsPaths + "]";
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime
+				* result
+				+ ((resourceAbsPaths == null) ? 0 : resourceAbsPaths.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		PackageDeclaration other = (PackageDeclaration) obj;
+		if (resourceAbsPaths == null) {
+			if (other.resourceAbsPaths != null)
+				return false;
+		} else if (!resourceAbsPaths.equals(other.resourceAbsPaths))
+			return false;
+		return true;
+	}
 }
 
 

From M.A.Akhter at student.tudelft.nl  Fri Sep  2 02:33:52 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 02 Sep 2011 00:33:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23280 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110902003352.9DF49108C004@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep  2 00:33:50 2011
New Revision: 23280
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23280&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java	Thu Sep  1 22:09:31 2011	(r23279)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java	Fri Sep  2 00:33:50 2011	(r23280)
@@ -5,7 +5,7 @@
 import java.net.URI;
 
 /**
- * Represent information regarding Spoofaxlang CompilationUnit 
+ * Contains information regarding Spoofaxlang CompilationUnit. 
  * 
  * @author Md. Adil Akhter
  * Created On : Aug 29, 2011
@@ -48,14 +48,12 @@
 	{
 		return new File(getAbsPath()).getAbsolutePath();
 	}
-	
 
 	void IncrementVersionNo()
 	{
 		_version = _version + 1;
 	}
 
-	
 	/**
 	 * Returns the Absolute Path of the given URI 
 	 * @param uri URI of the Resource. 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Thu Sep  1 22:09:31 2011	(r23279)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Fri Sep  2 00:33:50 2011	(r23280)
@@ -5,7 +5,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import jdbm.InverseHashView;
 import jdbm.PrimaryHashMap;
+import jdbm.SecondaryHashMap;
 import jdbm.SecondaryKeyExtractor;
 import jdbm.SecondaryTreeMap;
 
@@ -18,6 +20,9 @@
 	private final PrimaryHashMap<IStrategoList, ModuleDeclaration> _moduleLookupMap;
 	private final SecondaryTreeMap <String , IStrategoList , ModuleDeclaration> _uriMap;
 
+	private final SecondaryHashMap<IStrategoList, IStrategoList,ModuleDeclaration> _enclosingPackageIdReferences;
+	
+
 	/**
 	 * Instantiates a lookup table for the base constructs (e.g. , packages and modules)of  Spoofaxlang.
 	 *  
@@ -47,6 +52,23 @@
 			}
 		}
 		);
+		
+		
+		_enclosingPackageIdReferences = _moduleLookupMap.secondaryHashMap(tableName+ "._enclosingPackageIdReferences.idx", 
+				new SecondaryKeyExtractor<IStrategoList, IStrategoList, ModuleDeclaration>() {
+
+			/**
+			 * Returns the Secondary key of the lookup table. 
+			 *   
+			 * @param key current primary key 
+			 * @param value value to be mapped using primary key
+			 * @return secondary key to map the value with . 
+			 */
+			public IStrategoList extractSecondaryKey(IStrategoList key, ModuleDeclaration value) {
+				return value.enclosingPackageID;
+			}
+		}
+		);
 	}
 	
 	/**
@@ -57,7 +79,8 @@
 	 */
 	public void define(ModuleDeclaration decl)
 	{	
-		_moduleLookupMap.put(decl.getId(), decl);  
+		_moduleLookupMap.put(decl.getId(), decl);
+		
 	}
 	/**
 	 * Removes {@link BaseConstructDeclaration} from the lookup table mapped by the {@code id}
@@ -96,6 +119,16 @@
 	}
 	
 	
+	public Iterable<ModuleDeclaration> moduleDeclarationsByPackageId(IStrategoList packageID)
+	{
+		List<ModuleDeclaration> ret = new ArrayList<ModuleDeclaration>();
+	
+		for ( IStrategoList l: _enclosingPackageIdReferences.get(packageID))
+			ret.add(_enclosingPackageIdReferences.getPrimaryValue(l));
+		
+		return ret;
+	}
+	
 	/**
 	 * added only for the testing purpose.
 	 *  
@@ -114,23 +147,26 @@
 		final TermFactory f = new TermFactory();
 		final String absPathString = "c:/temp/test.spx" ;
 		final String absPathString2 = "c:/temp/test2.spx" ;
+		
+		IStrategoList pId = f.makeList(f.makeString("test"));
+		
 		//module declaration 
 		IStrategoList idm1 = f.makeList(f.makeString("test") , f.makeString("m1"));
-		ModuleDeclaration m1 = new ModuleDeclaration(absPathString, idm1);
+		ModuleDeclaration m1 = new ModuleDeclaration(absPathString, idm1,pId );
 		
 		lookupTable.define(m1);
 		
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
-		ModuleDeclaration m2 = new ModuleDeclaration(absPathString, idm2);
+		ModuleDeclaration m2 = new ModuleDeclaration(absPathString, idm2,pId );
 		
 		lookupTable.define(m2);
 		
 		IStrategoList idm3 = f.makeList(f.makeString("test") , f.makeString("m3"));
-		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3);
+		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
 		
 		lookupTable.define(m3);
 		
-		m2 = new ModuleDeclaration(absPathString2, idm2);
+		m2 = new ModuleDeclaration(absPathString2, idm2,pId );
 		lookupTable.define(m2);
 	
 		
@@ -145,5 +181,9 @@
 		System.out.println("lookup for URI " + absPathString2);
 		System.out.println("Result : " + lookupTable.moduleDeclarationsByUri(absPathString2));
 		System.out.println();
+		
+		System.out.println("lookup for PackageID " + pId);
+		System.out.println("Result : " + lookupTable.moduleDeclarationsByPackageId(pId));
+		System.out.println();
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java	Thu Sep  1 22:09:31 2011	(r23279)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java	Fri Sep  2 00:33:50 2011	(r23280)
@@ -261,10 +261,13 @@
 	
 	final String resourceAbsPath; 
 	
-	public ModuleDeclaration(String resourceAbsPath, IStrategoList id) {
+	final IStrategoList enclosingPackageID;
+	
+	public ModuleDeclaration(String resourceAbsPath, IStrategoList id , IStrategoList packageID) {
 		super(id);
 		
 		this.resourceAbsPath = resourceAbsPath;
+		this.enclosingPackageID = packageID;
 	}
 
 	/* (non-Javadoc)
@@ -272,8 +275,9 @@
 	 */
 	@Override
 	public String toString() {
-		return "ModuleDeclaration [resourceAbsPath=" + resourceAbsPath
-				+ ", id=" + id + "]";
+		return "ModuleDeclaration [ id= " + id 
+				+ ", packageId ="+ enclosingPackageID 
+				+ ", resourceAbsPath= " + resourceAbsPath+ "]";
 	}
 
 	/* (non-Javadoc)
@@ -285,6 +289,9 @@
 		int result = super.hashCode();
 		result = prime * result
 				+ ((resourceAbsPath == null) ? 0 : resourceAbsPath.hashCode());
+		
+		result = prime * result + ((enclosingPackageID == null) ? 0 : enclosingPackageID.hashCode());
+		
 		return result;
 	}
 
@@ -305,6 +312,13 @@
 				return false;
 		} else if (!resourceAbsPath.equals(other.resourceAbsPath))
 			return false;
+		
+		if (enclosingPackageID == null) {
+			if (other.enclosingPackageID!= null)
+				return false;
+		} else if (!enclosingPackageID.match(other.enclosingPackageID))
+			return false;
+		
 		return true;
 	}
 }
@@ -373,4 +387,3 @@
 	}
 }
 
-

From M.A.Akhter at student.tudelft.nl  Fri Sep  2 02:38:02 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 02 Sep 2011 00:38:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23281 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110902003802.D993FCC0CE@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep  2 00:38:02 2011
New Revision: 23281
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23281&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Scope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java	Fri Sep  2 00:33:50 2011	(r23280)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java	Fri Sep  2 00:38:02 2011	(r23281)
@@ -38,8 +38,7 @@
 	}
 	
 	public abstract IStrategoTerm getType(); 
-	
-	
+
 	/* 
 	 * Returns the enclosing scope of the current scope.
 	 * */
@@ -71,7 +70,7 @@
 			return false;
 		return true;
 	}
-
+	
 	/* Gets the URI of the current scope. Returns Null is scope is not associated with 
 	 * any URI.
 	 * 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java	Fri Sep  2 00:33:50 2011	(r23280)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java	Fri Sep  2 00:38:02 2011	(r23281)
@@ -19,6 +19,4 @@
 		
 		return getTermFactory().makeConstructor(_scopeType, 0);
 	}
-	
-	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java	Fri Sep  2 00:33:50 2011	(r23280)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java	Fri Sep  2 00:38:02 2011	(r23281)
@@ -17,9 +17,9 @@
 	private final String _scopeType = "Module" ;
 	
 	private URI _file; 
-	
 	/**
-	 * Instantiates ModuleScope 
+	 * Instantiates ModuleScope.  
+	 * 
 	 * @param id refers to the ID of the Scope
 	 * @param enclosingScope refers to the enclosing scope. It
 	 * provides a reference to the container of the current Scope.  
@@ -41,7 +41,7 @@
 	public IStrategoTerm getType() {
 		return getTermFactory().makeConstructor(_scopeType, 0);
 	}
-	
+
 	/* 
 	 * (non-Javadoc)
 	 * @see java.lang.Object#equals(java.lang.Object)
@@ -99,7 +99,4 @@
 				+",enclosingScope=" + _enclosingScope
 				+ ", _scopeType=" + _scopeType + ", _file=" + _file ;
 	}
-
-	
-	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Scope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Scope.java	Fri Sep  2 00:33:50 2011	(r23280)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Scope.java	Fri Sep  2 00:38:02 2011	(r23281)
@@ -7,6 +7,10 @@
 /*
  * This interface defines Scope for semantic index.
  * */
+/**
+ * @author Md. Adil Akhter
+ * Created On : Sep 1, 2011
+ */
 interface Scope 
 {
 	public IStrategoTerm getScopeId();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Fri Sep  2 00:33:50 2011	(r23280)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Fri Sep  2 00:38:02 2011	(r23281)
@@ -53,7 +53,6 @@
 		}
 		);
 		
-		
 		_enclosingPackageIdReferences = _moduleLookupMap.secondaryHashMap(tableName+ "._enclosingPackageIdReferences.idx", 
 				new SecondaryKeyExtractor<IStrategoList, IStrategoList, ModuleDeclaration>() {
 
@@ -102,6 +101,11 @@
 		return _moduleLookupMap.get(id);
 	}
 	
+	
+	public boolean containsModuleDeclaration(IStrategoList id)
+	{
+		return _moduleLookupMap.containsKey(id);
+	}
 	/**
 	 * Returns ModuleDeclarations mapped by absPath
 	 * 
@@ -129,6 +133,17 @@
 		return ret;
 	}
 	
+
+	public IStrategoList packageId(IStrategoList moduleId)
+	{
+		if( containsModuleDeclaration(moduleId))
+		{
+			return get(moduleId).enclosingPackageID;
+		}	
+		
+		return null;
+	}
+	
 	/**
 	 * added only for the testing purpose.
 	 *  

From tobivollebregt at gmail.com  Fri Sep  2 17:27:23 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 02 Sep 2011 15:27:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23282 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/editor
	org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing.test/trans org.strategoxt.imp.testing/...
Message-ID: <20110902152723.8CAF17F801C@mx1.tudelft.nl>

Author: tvo
Date: Fri Sep  2 15:27:23 2011
New Revision: 23282
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23282&sc=1

Log:
Testing language: experimental support for testing source-to-source transformations

syntax:
  target language XXX
  target start symbol YYY
  target setup [[ ... ]]

setup blocks are only prepended to test input;
target setup blocks are prepended to test output.

One remaining issue: the testing plugin does not pull any languages into the workspace,
so a file in the target language must have been opened for the language to be recognized...

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/source-to-source-tests.spt
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/TestingTesting-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/testingtesting.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/TestingTesting-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/TestingTesting-Builders.esv	Fri Sep  2 00:38:02 2011	(r23281)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/TestingTesting-Builders.esv	Fri Sep  2 15:27:23 2011	(r23282)
@@ -17,6 +17,7 @@
   observer                  : editor-analyze                                                                                   
                                                                                                                                
   builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
-  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)
+  builder                   : "Reverse entity names (for selection)" = reverse-entity-names (openeditor) (realtime) (source)
                                                                                                                                
   // on save: generate-java                                                                                                    
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/source-to-source-tests.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/source-to-source-tests.spt	Fri Sep  2 15:27:23 2011	(r23282)
@@ -0,0 +1,24 @@
+module source-to-source-tests
+
+language TestingTesting
+start symbol Start
+
+target language TestingTesting
+target start symbol Start
+
+setup is prepended to test input [[
+  module x
+  entity ABC {}
+]]
+
+target setup is prepended to test output [[
+  module x
+  entity CBA {}
+]]
+
+test reverse-entity-names [[
+  entity XYZ {}
+]]
+build reverse-entity-names to [[
+  entity ZYX {}
+]]

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/testingtesting.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/testingtesting.str	Fri Sep  2 00:38:02 2011	(r23281)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/testingtesting.str	Fri Sep  2 15:27:23 2011	(r23282)
@@ -60,3 +60,9 @@
       if !node => Type(COMPLETION(prefix)) then
         proposals := <all-keys-GetEntity>
       end
+
+  reverse-entity-names:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"generated.spt-test")> path;
+      result := <topdown(try(\Entity(name, props) -> Entity(<string-as-chars(reverse)> name, props)\))> selected

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Fri Sep  2 00:38:02 2011	(r23281)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Fri Sep  2 15:27:23 2011	(r23282)
@@ -54,18 +54,22 @@
 	
 	private static final IStrategoConstructor SETUP_3 =
 		Environment.getTermFactory().makeConstructor("Setup", 3);
-	
+
+	private static final IStrategoConstructor TARGET_SETUP_3 =
+		Environment.getTermFactory().makeConstructor("TargetSetup", 3);
+
 	private static final IStrategoConstructor OUTPUT_4 =
 		Environment.getTermFactory().makeConstructor("Output", 4);
 	
 	private static final IStrategoConstructor QUOTEPART_1 =
 		Environment.getTermFactory().makeConstructor("QuotePart", 1);
 	
-	private static final IStrategoConstructor TOPSORT_1 =
-		Environment.getTermFactory().makeConstructor("TopSort", 1);
-	
 	private static final int EXCLUSIVE = 1;
-	
+
+	private final IStrategoConstructor setup_3;
+
+	private final IStrategoConstructor topsort_1;
+
 	private final WeakValueHashMap<String, IStrategoTerm> failParseCache =
 		new WeakValueHashMap<String, IStrategoTerm>();
 	
@@ -80,6 +84,13 @@
 	
 	private boolean isLastSyntaxCorrect;
 
+	public FragmentParser(IStrategoConstructor setup_3, IStrategoConstructor topsort_1) {
+		assert setup_3.getArity() == 3;
+		assert topsort_1.getArity() == 1;
+		this.setup_3 = setup_3;
+		this.topsort_1 = topsort_1;
+	}
+
 	public void configure(Descriptor descriptor, IPath path, ISourceProject project, IStrategoTerm ast) {
 		if (parseCacheDescriptor != descriptor) {
 			parseCacheDescriptor = descriptor;
@@ -87,8 +98,11 @@
 			failParseCache.clear();
 			successParseCache.clear();
 		}
-		IStrategoTerm start = findTerm(ast, TOPSORT_1.getName());
-		parser.setStartSymbol(start == null ? null : asJavaString(start.getSubterm(0)));
+		if (parser != null) {
+			// parser may be null if language could not be loaded, see getParser
+			IStrategoTerm start = findTerm(ast, topsort_1.getName());
+			parser.setStartSymbol(start == null ? null : asJavaString(start.getSubterm(0)));
+		}
 		setupRegions = getSetupRegions(ast);
 	}
 	
@@ -233,7 +247,7 @@
 		final List<OffsetRegion> results = new ArrayList<OffsetRegion>();
 		new TermVisitor() {
 			public void preVisit(IStrategoTerm term) {
-				if (tryGetConstructor(term) == SETUP_3) {
+				if (tryGetConstructor(term) == setup_3) {
 					new TermVisitor() {
 						public final void preVisit(IStrategoTerm term) {
 							if (tryGetConstructor(term) == QUOTEPART_1) {
@@ -265,9 +279,11 @@
 	*/
 	
 	private boolean isSuccessExpected(IStrategoTerm fragment) {
-		if (tryGetConstructor(fragment) == OUTPUT_4) return true;
+		if (tryGetConstructor(fragment) == OUTPUT_4)
+			return true;
 		IStrategoAppl test = (IStrategoAppl) getParent(fragment);
-		if (test.getConstructor() == SETUP_3) return true;
+		if (test.getConstructor() == SETUP_3 || test.getConstructor() == TARGET_SETUP_3)
+			return true;
 		IStrategoList expectations = listAt(test, test.getSubtermCount() - 1);
 		for (IStrategoTerm expectation : StrategoListIterator.iterable(expectations)) {
 			IStrategoConstructor cons = tryGetConstructor(expectation);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Fri Sep  2 00:38:02 2011	(r23281)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Fri Sep  2 15:27:23 2011	(r23282)
@@ -1,7 +1,6 @@
 package org.strategoxt.imp.testing;
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
@@ -13,7 +12,6 @@
 
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
-import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -49,9 +47,26 @@
 	
 	private static final IStrategoConstructor LANGUAGE_1 =
 		Environment.getTermFactory().makeConstructor("Language", 1);
+
+	private static final IStrategoConstructor TARGET_LANGUAGE_1 =
+		Environment.getTermFactory().makeConstructor("TargetLanguage", 1);
+
+	private static final IStrategoConstructor SETUP_3 =
+		Environment.getTermFactory().makeConstructor("Setup", 3);
+
+	private static final IStrategoConstructor TARGET_SETUP_3 =
+		Environment.getTermFactory().makeConstructor("TargetSetup", 3);
+
+	private static final IStrategoConstructor TOPSORT_1 =
+		Environment.getTermFactory().makeConstructor("TopSort", 1);
+
+	private static final IStrategoConstructor TARGET_TOPSORT_1 =
+		Environment.getTermFactory().makeConstructor("TargetTopSort", 1);
 	
-	private final FragmentParser fragmentParser = new FragmentParser();
+	private final FragmentParser fragmentParser = new FragmentParser(SETUP_3, TOPSORT_1);
 	
+	private final FragmentParser outputFragmentParser = new FragmentParser(TARGET_SETUP_3, TARGET_TOPSORT_1);
+
 	private final SelectionFetcher selections = new SelectionFetcher();
 
 	public SpoofaxTestingJSGLRI(JSGLRI template) {
@@ -74,25 +89,36 @@
 		final Retokenizer retokenizer = new Retokenizer(oldTokenizer);
 		final ITermFactory nonParentFactory = Environment.getTermFactory();
 		final ITermFactory factory = new ParentTermFactory(nonParentFactory);
-		final FragmentParser testedParser = getFragmentParser(root);
+		final FragmentParser testedParser = configureFragmentParser(root, getLanguage(root), fragmentParser);
+		final FragmentParser outputParser = configureFragmentParser(root, getTargetLanguage(root), outputFragmentParser);
 		assert !(nonParentFactory instanceof ParentTermFactory);
-		if (testedParser == null || !testedParser.isInitialized())
+
+		if (testedParser == null || !testedParser.isInitialized()
+				|| outputParser == null || !outputParser.isInitialized()) {
 			return root;
-		
+		}
+
 		IStrategoTerm result = new TermTransformer(factory, true) {
 			@Override
 			public IStrategoTerm preTransform(IStrategoTerm term) {
 				IStrategoConstructor cons = tryGetConstructor(term);
-				if (cons == INPUT_4 || cons == OUTPUT_4) {
+				FragmentParser parser = null;
+				if (cons == INPUT_4) {
+					parser = testedParser;
+				}
+				else if (cons == OUTPUT_4) {
+					parser = outputParser;
+				}
+				if (parser != null) {
 					IStrategoTerm fragmentHead = termAt(term, 1);
 					IStrategoTerm fragmentTail = termAt(term, 2);
 					retokenizer.copyTokensUpToIndex(getLeftToken(fragmentHead).getIndex() - 1);
 					try {
-						IStrategoTerm parsed = testedParser.parse(oldTokenizer, term, /*cons == OUTPUT_4*/ false);
+						IStrategoTerm parsed = parser.parse(oldTokenizer, term, /*cons == OUTPUT_4*/ false);
 						int oldFragmentEndIndex = getRightToken(fragmentTail).getIndex();
 						retokenizer.copyTokensFromFragment(fragmentHead, fragmentTail, parsed,
 								getLeftToken(fragmentHead).getStartOffset(), getRightToken(fragmentTail).getEndOffset());
-						if (!testedParser.isLastSyntaxCorrect())
+						if (!parser.isLastSyntaxCorrect())
 							parsed = nonParentFactory.makeAppl(ERROR_1, parsed);
 						ImploderAttachment implodement = ImploderAttachment.get(term);
 						IStrategoList selected = selections.fetch(parsed);
@@ -127,26 +153,37 @@
 		retokenizer.getTokenizer().initAstNodeBinding();
 		return result;
 	}
-	
-	private FragmentParser getFragmentParser(IStrategoTerm root) {
-		Language language = getLanguage(root);
+
+	private FragmentParser configureFragmentParser(IStrategoTerm root, Language language, FragmentParser fragmentParser) {
 		if (language == null) return null;
 		Descriptor descriptor = Environment.getDescriptor(language);
 		fragmentParser.configure(descriptor, getController().getRelativePath(), getController().getProject(), root);
 		return fragmentParser;
 	}
 
-	private Language getLanguage(IStrategoTerm root) {
-		if (isTermAppl(root) && "EmptyFile".equals(((IStrategoAppl) root).getName()))
-			return null;
+	private String getLanguageName(IStrategoTerm root, IStrategoConstructor which) {
 		IStrategoList headers = termAt(root, 0);
 		for (IStrategoTerm header : StrategoListIterator.iterable(headers)) {
-			if (tryGetConstructor(header) == LANGUAGE_1) {
+			if (tryGetConstructor(header) == which) {
 				IStrategoString name = termAt(header, 0);
-				return LanguageRegistry.findLanguage(asJavaString(name));
+				return asJavaString(name);
 			}
 		}
 		return null;
 	}
 
+	private Language getLanguage(IStrategoTerm root) {
+		final String languageName = getLanguageName(root, LANGUAGE_1);
+		if (languageName == null) return null;
+		return LanguageRegistry.findLanguage(languageName);
+	}
+
+	private Language getTargetLanguage(IStrategoTerm root) {
+		String languageName = getLanguageName(root, TARGET_LANGUAGE_1);
+		if (languageName == null) languageName = getLanguageName(root, LANGUAGE_1);
+		if (languageName == null) return null;
+		// TODO: fix this so it is capable of loading & registering languages
+		// (E.g., now you need to open a file in target language at least once before this works...)
+		return LanguageRegistry.findLanguage(languageName);
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Fri Sep  2 00:38:02 2011	(r23281)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Fri Sep  2 15:27:23 2011	(r23282)
@@ -24,6 +24,10 @@
     "start" "symbol" ID -> Header {cons("TopSort")}
     "language" ID       -> Header {cons("Language")}
 
+	%% For testing source-to-source transformations
+    "target" "start" "symbol" ID -> Header {cons("TargetTopSort")}
+    "target" "language" ID       -> Header {cons("TargetLanguage")}
+
     Test         -> TestDecl
     StrategoTest -> TestDecl
     VarDecl      -> TestDecl
@@ -35,6 +39,12 @@
     "setup" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> -> <Test-CF> {cons("Setup")}
     "setup" <Space-LEX> <Description-CF>                         -> <Test-CF> {cons("SetupEmpty")}
 
+    %% target setup uses Output while setup uses Input so that all Input terms
+    %% can be parsed with the source language, and all Output terms can be
+    %% parsed with the target language. (i.e., simplifies Java code)
+    "target" <LAYOUT?-CF> "setup" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Output-CF> -> <Test-CF> {cons("TargetSetup")}
+    "target" <LAYOUT?-CF> "setup" <Space-LEX> <Description-CF>                          -> <Test-CF> {cons("TargetSetupEmpty")}
+
     "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> <LAYOUT?-CF> <Result*-CF> -> <Test-CF> {cons("Test")}
     "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <TestStratego-CF> <LAYOUT?-CF> <StrategoResult-CF>
       -> <StrategoTest-CF> {cons("TestStratego")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Fri Sep  2 00:38:02 2011	(r23281)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Fri Sep  2 15:27:23 2011	(r23282)
@@ -23,6 +23,8 @@
     with
       (errors', warnings', notes') := <report-invalid-language> ast'
     <+
+      (errors', warnings', notes') := <report-invalid-target-language> ast'
+    <+
       scope-paths(
         <chdir> project-path;
         <record-all-sdfs> ".";
@@ -41,7 +43,7 @@
         end
       | path, project-path
       )
-  
+
   report-invalid-language:
     testsuite(h*, _) -> ([error], [], [])
     where
@@ -52,12 +54,24 @@
       language := <get-language>;
       not(spt-exists-language(|language));
       error := (language, $[Language [language] not defined or not loaded])
-  
+
+  report-invalid-target-language:
+    testsuite(h*, _) -> ([error], [], [])
+    where
+      language := <get-target-language>;
+      not(spt-exists-language(|language));
+      error := (language, $[Language [language] not defined or not loaded])
+
   get-language:
     testsuite(header*, _) -> language
     where
       <one(?Language(language))> header*
-  
+
+  get-target-language:
+    testsuite(header*, _) -> language
+    where
+      <one(?TargetLanguage(language))> header*
+
   generate-java:
     (selected, position, ast, path, project-path) -> result
     with

From M.A.Akhter at student.tudelft.nl  Fri Sep  2 19:35:29 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 02 Sep 2011 17:35:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23283 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language:
	.settings src/jdbm/btree src/jdbm/helper src/jdbm/htree
	src/jdbm/recman src/jdbm/test src/org/sp...
Message-ID: <20110902173529.78BBA7F8032@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep  2 17:35:29 2011
New Revision: 23283
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23283&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/JbdmSimpleEntry.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BPage.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSecondarySortedMap.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSortedMap.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/DefaultSerializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/PrimaryStoreMapImpl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/RecordManagerImpl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/SecondaryKeyHelper.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/StoreReference.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTree.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTreeMap.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTreeSecondaryMap.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HashDirectory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HelloWorld.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HugeData.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/Persons1.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs	Fri Sep  2 17:35:29 2011	(r23283)
@@ -1,8 +1,12 @@
-#Thu Apr 21 17:14:07 CEST 2011
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
-org.eclipse.jdt.core.compiler.compliance=1.5
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.5
+#Fri Sep 02 13:06:34 CEST 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BPage.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BPage.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BPage.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -1058,7 +1058,7 @@
           try {
               readValues(ois, bpage);
           } catch ( ClassNotFoundException except ) {
-              throw new IOException( except);
+        	  throw new IOException(except.getMessage());
           }
       } else {
           bpage._children = new long[ _btree._pageSize ];
@@ -1129,10 +1129,22 @@
 		  }
 	}
 
+	 private static Object[] copyOfRange(Object[] original, int from, int to) {
+	        int newLength = to - from;
+	        if (newLength < 0)
+	            throw new IllegalArgumentException(from + " > " + to);
+	        Object[] copy = new Object[newLength];
+	        System.arraycopy(original, from, copy, 0,
+	                         Math.min(original.length - from, newLength));
+	        return copy;
+	    }
 
+	 
 	private void writeValues(SerializerOutput oos, BPage<K, V> bpage) throws IOException {
 		if ( _btree.valueSerializer == null || _btree.valueSerializer == DefaultSerializer.INSTANCE ) {
-			Object[] vals2 = Arrays.copyOfRange(bpage._values, bpage._first, bpage._values.length);
+			
+			Object[] vals2 = copyOfRange(bpage._values, bpage._first, bpage._values.length);
+			
 			Serialization.writeObject(oos, vals2);
 		}else{
 			for ( int i=bpage._first; i<_btree._pageSize; i++ ) {                                                

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSecondarySortedMap.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSecondarySortedMap.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSecondarySortedMap.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package jdbm.btree;
 
-import java.io.IOError;
 import java.io.IOException;
 
 import jdbm.SecondaryTreeMap;
@@ -36,7 +35,10 @@
 		try {
 			return b.find(k);
 		} catch (IOException e) {
-			throw new IOError(e);
+			//TODO : Since IOError is introduced in Java1.6 and
+			//source code has to be compatible with Java1.5, 
+			//using Error instead of IOError.
+			throw new Error(e);
 		}
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSortedMap.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSortedMap.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSortedMap.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package jdbm.btree;
 
-import java.io.IOError;
 import java.io.IOException;
 import java.util.AbstractSet;
 import java.util.Comparator;
@@ -30,7 +29,7 @@
 import jdbm.helper.AbstractPrimaryMap;
 import jdbm.helper.Tuple;
 import jdbm.helper.TupleBrowser;
-
+import jdbm.helper.JbdmSimpleEntry;
 
 public class BTreeSortedMap<K,V> extends AbstractPrimaryMap<K,V> implements PrimaryTreeMap<K,V>{
 	
@@ -58,7 +57,7 @@
 		return new AbstractSet<Entry<K,V>>(){
 			
 			protected Entry<K,V> newEntry(K k,V v){
-				return new SimpleEntry<K,V>(k,v){
+				return new JbdmSimpleEntry<K,V>(k,v){
 					private static final long serialVersionUID = 978651696969194154L;
 
 					public V setValue(V arg0) {
@@ -80,7 +79,7 @@
 						throw new IllegalArgumentException("key outside of bounds");
 					return tree.insert(e.getKey(), e.getValue(), true) == null;
 				} catch (IOException e1) {
-					throw new IOError(e1);
+					throw new Error(e1);
 				}
 			}
 
@@ -95,7 +94,7 @@
 						if(e.getKey()!=null && tree.find(e.getKey())!=null)
 							return true;
 					} catch (IOException e1) {
-						throw new IOError(e1);
+						throw new Error(e1);
 					}
 				}
 				return false;
@@ -118,7 +117,7 @@
 							else
 								next = null;
 						} catch (IOException e1) {
-							throw new IOError(e1);
+							throw new Error(e1);
 						}						
 					}
 					{
@@ -153,7 +152,7 @@
 					}};
 					
 				} catch (IOException e) {
-					throw new IOError(e);
+					throw new Error(e);
 				}
 					
 			}
@@ -178,7 +177,7 @@
 						V v2 = tree.remove(e.getKey());
 						return v2!=null;
 					} catch (IOException e1) {
-						throw new IOError(e1);
+						throw new Error(e1);
 					}
 				}
 				return false;
@@ -225,7 +224,7 @@
 		}catch (ClassCastException e){
 			return null;
 		}catch (IOException e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 	
@@ -244,7 +243,7 @@
 		}catch (ClassCastException e){
 			return null;
 		}catch (IOException e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 	
@@ -259,7 +258,7 @@
 				throw new IllegalArgumentException("out of bounds");
 			return tree.insert(key, value, true);
 		} catch (IOException e) {
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	};
 	
@@ -274,7 +273,7 @@
 			V v = tree.find((K) key);
 			return v!=null;
 		} catch (IOException e) {
-			throw new IOError(e);
+			throw new Error(e);
 		} catch (ClassCastException e){
 			return false;
 		}
@@ -293,7 +292,7 @@
 			b.getNext(t);
 			return t.getKey();
 		}catch(IOException e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 	
@@ -306,7 +305,7 @@
 			b.getPrevious(t);
 			return t.getKey();
 		}catch(IOException e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/DefaultSerializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/DefaultSerializer.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/DefaultSerializer.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -71,7 +71,10 @@
          try {
             return in.readObject();
          } catch ( ClassNotFoundException except ) {
-            throw new IOException( except );
+	         //TODO : Add custom IOEXception that can accept except as 
+	         //an inner exception. 
+	         //Due to compatibility issue , changed to Java1.5 IOException 
+            throw new IOException( except.getMessage() );
          }
      }
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/JbdmSimpleEntry.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/JbdmSimpleEntry.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -0,0 +1,78 @@
+package jdbm.helper;
+
+import java.util.Map;
+
+public abstract class JbdmSimpleEntry<K, V> implements Map.Entry<K, V>
+{
+	K key;
+    V value;
+   
+    public JbdmSimpleEntry(K paramK, V paramV)
+    {
+      this.key = paramK;
+      this.value = paramV;
+    }
+    public JbdmSimpleEntry(Map.Entry<K, V> paramEntry)
+    {
+      this.key = paramEntry.getKey();
+      this.value = paramEntry.getValue();
+    }
+
+    
+	public K getKey() {
+		return this.key;
+	}
+
+	public V getValue() {
+		 return this.value;
+	}
+
+	public V setValue(V paramV) {
+		 V localObject = this.value;
+	     this.value = paramV;
+	     return localObject;
+	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((key == null) ? 0 : key.hashCode());
+		result = prime * result + ((value == null) ? 0 : value.hashCode());
+		return result;
+	}
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		
+		if (!(obj instanceof Map.Entry))
+			return false;
+		
+		if (!(obj instanceof JbdmSimpleEntry))
+			return false;
+		
+		JbdmSimpleEntry other = (JbdmSimpleEntry) obj;
+	
+		if (key == null) {
+			if (other.key != null)
+				return false;
+		} else if (!key.equals(other.key))
+			return false;
+		if (value == null) {
+			if (other.value != null)
+				return false;
+		} else if (!value.equals(other.value))
+			return false;
+		
+		return true;
+	}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/PrimaryStoreMapImpl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/PrimaryStoreMapImpl.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/PrimaryStoreMapImpl.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -15,7 +15,7 @@
  ******************************************************************************/
 package jdbm.helper;
 
-import java.io.IOError;
+
 import java.io.IOException;
 import java.util.AbstractSet;
 import java.util.Iterator;
@@ -70,7 +70,7 @@
 			map.put(recid, "");
 			return recid;
 		} catch (IOException e) {
-			throw new IOError(e);
+			throw new Error(e);
 		}
 
 	}	
@@ -95,12 +95,12 @@
 		return map.containsKey(key);
 	}
 
-
+	
 	public Set<java.util.Map.Entry<Long, V>> entrySet() {
 		return new AbstractSet<java.util.Map.Entry<Long,V>>(){
 			
 			protected java.util.Map.Entry<Long,V> newEntry(Long k,V v){
-				return new SimpleEntry<Long,V>(k,v){
+				return new JbdmSimpleEntry<Long,V>(k,v){
 
 					public V setValue(V arg0) {
 						throw new UnsupportedOperationException();
@@ -182,7 +182,7 @@
 		try {
 			return getRecordManager().fetch((Long)key,valueSerializer);
 		} catch (IOException e) {
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 
@@ -201,7 +201,7 @@
 					listener.recordUpdated(key, oldVal, value);
 				return oldVal;
 			} catch (IOException e) {
-				throw new IOError(e);
+				throw new Error(e);
 			}
 			
 		}else{			
@@ -218,7 +218,7 @@
 			map.remove(key);		
 			return v;
 		}catch (IOException e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/RecordManagerImpl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/RecordManagerImpl.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/RecordManagerImpl.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package jdbm.helper;
 
-import java.io.IOError;
 import java.io.IOException;
 import java.util.Comparator;
 
@@ -57,7 +56,7 @@
 			}
 			return tree.asMap();
 		}catch(IOException  e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 
@@ -107,7 +106,7 @@
 			
 			return tree.asMap();
 		}catch(IOException  e){
-			throw new IOError(e);
+			throw new Error(e);
 		}	
 	}
 
@@ -126,7 +125,7 @@
 			}
 			return new PrimaryStoreMapImpl<Long, V>(tree.asMap(),valueSerializer);
 		}catch(IOException  e){
-			throw new IOError(e);
+			throw new Error(e);
 		}	
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/SecondaryKeyHelper.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/SecondaryKeyHelper.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/SecondaryKeyHelper.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package jdbm.helper;
 
-import java.io.IOError;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Comparator;
@@ -333,7 +332,7 @@
     		HTreeSecondaryMap<A, K, V> ret = new HTreeSecondaryMap<A, K, V>(secTree, b);
     		return ret;
     	}catch (IOException e){
-    		throw new IOError(e);
+    		throw new Error(e);
     	}
     }
 
@@ -348,7 +347,7 @@
     		BTreeSecondarySortedMap<A, K, V> ret = new BTreeSecondarySortedMap<A, K, V>(secTree, b);
     		return ret;
     	}catch (IOException e){
-    		throw new IOError(e);
+    		throw new Error(e);
     	}
     }
     
@@ -361,7 +360,7 @@
     		HTreeSecondaryMap<A, K, V> ret = new HTreeSecondaryMap<A, K, V>(secTree, b);
     		return ret;
     	}catch (IOException e){
-    		throw new IOError(e);
+    		throw new Error(e);
     	}
     }
 
@@ -375,7 +374,7 @@
     		BTreeSecondarySortedMap<A, K, V> ret = new BTreeSecondarySortedMap<A, K, V>(secTree, b);
     		return ret;
     	}catch (IOException e){
-    		throw new IOError(e);
+    		throw new Error(e);
     	}
     }
 
@@ -442,7 +441,7 @@
 						try {
 							return b.find(iter.next());
 						} catch (IOException e) {
-							throw new IOError(e);
+							throw new Error(e);
 						}
 					}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/StoreReference.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/StoreReference.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/StoreReference.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -17,7 +17,6 @@
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
-import java.io.IOError;
 import java.io.IOException;
 
 import jdbm.RecordManager;
@@ -46,7 +45,7 @@
 		try {
 			recid = recman.insert(val, serializer);
 		} catch (IOException e) {
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 	
@@ -61,7 +60,7 @@
 		if(recid!=-1)try{			
 			return recman2.fetch(recid,serializer2);
 		}catch(IOException e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 		throw new IllegalStateException("Should not be here");			
 	}
@@ -95,7 +94,7 @@
 		try {
 			recordManager.delete(recid);
 		} catch (IOException e) {
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTree.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTree.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTree.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -59,7 +59,7 @@
                     throw new InternalError("Wrong HTree header: "+i);
                 }
             }catch(ClassNotFoundException e){
-                throw new IOException(e);
+                throw new IOException(e.getMessage());
             }
 
         }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTreeMap.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTreeMap.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTreeMap.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package jdbm.htree;
 
-import java.io.IOError;
 import java.io.IOException;
 import java.util.AbstractSet;
 import java.util.Iterator;
@@ -26,7 +25,7 @@
 import jdbm.RecordListener;
 import jdbm.RecordManager;
 import jdbm.helper.AbstractPrimaryMap;
-
+import jdbm.helper.JbdmSimpleEntry;
 
 public class HTreeMap<K,V> extends AbstractPrimaryMap<K,V> implements PrimaryHashMap<K,V>{
 	
@@ -43,7 +42,7 @@
 		return new AbstractSet<Entry<K,V>>(){
 			
 			protected Entry<K,V> newEntry(K k,V v){
-				return new SimpleEntry<K,V>(k,v){
+				return new JbdmSimpleEntry<K,V>(k,v){
 					private static final long serialVersionUID = 978651696969194154L;
 
 					public V setValue(V arg0) {
@@ -66,7 +65,7 @@
 					tree.put(e.getKey(), e.getValue());
 					return true;
 				} catch (IOException e1) {
-					throw new IOError(e1);
+					throw new Error(e1);
 				}
 			}
 
@@ -78,7 +77,7 @@
 						if(e.getKey()!=null && tree.find(e.getKey())!=null)
 							return true;
 					} catch (IOException e1) {
-						throw new IOError(e1);
+						throw new Error(e1);
 					}
 				}
 				return false;
@@ -100,7 +99,7 @@
 							}else
 								next = null;
 						}catch (IOException e){
-							throw new IOError(e);
+							throw new Error(e);
 						}
 					}
 					{
@@ -134,7 +133,7 @@
 					}};
 					
 				} catch (IOException e) {
-					throw new IOError(e);
+					throw new Error(e);
 				}
 					
 			}
@@ -157,7 +156,7 @@
 						tree.remove(e.getKey());
 						return true;
 					} catch (IOException e1) {
-						throw new IOError(e1);
+						throw new Error(e1);
 					}
 				}
 				return false;
@@ -175,7 +174,7 @@
 					}
 					return counter;
 				}catch (IOException e){
-					throw new IOError(e);
+					throw new Error(e);
 				}
 					
 			}
@@ -193,7 +192,7 @@
 		}catch (ClassCastException e){
 			return null;
 		}catch (IOException e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 	
@@ -213,7 +212,7 @@
 		}catch (ClassCastException e){
 			return null;
 		}catch (IOException e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 	
@@ -228,7 +227,7 @@
 			tree.put(key, value);
 			return oldVal;
 		} catch (IOException e) {
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	};
 	
@@ -241,7 +240,7 @@
 			V v = tree.find((K) key);
 			return v!=null;
 		} catch (IOException e) {
-			throw new IOError(e);
+			throw new Error(e);
 		} catch (ClassCastException e){
 			return false;
 		}
@@ -271,7 +270,7 @@
             while(keyIter.hasNext())
                 tree.remove(keyIter.next());
         }catch(IOException e){
-            throw new IOError(e);
+            throw new Error(e);
         }
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTreeSecondaryMap.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTreeSecondaryMap.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HTreeSecondaryMap.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -15,7 +15,6 @@
  ******************************************************************************/
 package jdbm.htree;
 
-import java.io.IOError;
 import java.io.IOException;
 
 import jdbm.SecondaryHashMap;
@@ -34,7 +33,7 @@
 		try {
 			return b.find(k);
 		} catch (IOException e) {
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HashDirectory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HashDirectory.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HashDirectory.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -18,7 +18,6 @@
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
-import java.io.IOError;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -480,7 +479,7 @@
               try {
                 prepareNext();
               } catch ( IOException except ) {
-                throw new IOError( except );
+                throw new Error( except );
               }
               if ( _iter != null && _iter.hasNext() ) {
                 return next2();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -20,7 +20,6 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
-import java.io.IOError;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.nio.channels.FileLock;
@@ -564,7 +563,7 @@
 			else
 				return serializer.deserialize( insertIn );
 		}catch(ClassNotFoundException e){
-			throw new IOError(e);
+			throw new Error(e);
 		}
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -127,9 +127,9 @@
         try{
         	f0.tryLock();
         }catch(IOException e){
-        	throw new IOException("Could not lock DB file: "+fileName,e);
+        	throw new IOException("Could not lock DB file: "+fileName);
         }catch(OverlappingFileLockException e){
-            throw new IOException("Could not lock DB file: "+fileName,e);
+            throw new IOException("Could not lock DB file: "+fileName);
         }
         txnMgr = new TransactionManager(this);
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HelloWorld.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HelloWorld.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HelloWorld.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -1,18 +1,46 @@
 package jdbm.test;
 
 import java.io.IOException;
+import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.Map;
 
 import jdbm.RecordManager;
 import jdbm.RecordManagerFactory;
 
- /**
+
+import static java.lang.System.out;
+
+
+/**
  * This program demonstrates basic JDBM usage. Updated to support separate-chaining using PrimaryMap.
  * 
  * @author Jan Kotek
  * @author Adil Akhter
  */
+
+class VersionInfo
+{
+	private int _versionNO = 0;
+	
+	void Increment()
+	{
+		_versionNO = _versionNO + 1;
+	}
+	
+	int VersionNo()
+	{
+		return _versionNO;
+		
+	}
+
+	@Override
+	public String toString() {
+		return "VersionInfo [VersionNO=" + _versionNO + "]";
+	}
+	
+	
+}
 public class HelloWorld {
 	
 	public static void put( Map<Integer,LinkedList<String>> hashmap , int key, String value )
@@ -30,8 +58,9 @@
 		}
 	}
 	
-	public static void main(String[] args) throws IOException {
-
+	
+	public static void TestPrimaryMap() throws Exception
+	{
 		/** create (or open existing) database */
 		String fileName = "helloWorld2";
 		RecordManager recMan = RecordManagerFactory.createRecordManager(fileName);
@@ -79,7 +108,37 @@
 		
 		/** close record manager */
 		recMan.close();
+	}
+	
+	
+	public static void TestHashMap ()
+	{
+		HashMap<String, VersionInfo> info = new  HashMap<String, VersionInfo>();
+		
+		info.put("test", new VersionInfo());
+		
+		info.get("test").Increment();
+		
+		out.println(info.get("test").toString() );
+		
+		
+		info.get("test").Increment();
 		
+		out.println(info.get("test").toString() );
+		
+		
+		
+		info.put("test", new VersionInfo());
+		
+		info.get("test").Increment();
+		
+		out.println(info.get("test").toString() );
+		
+	}
+	
+	public static void main(String[] args) throws Exception {
+
+		TestPrimaryMap();
 		
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HugeData.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HugeData.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HugeData.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -18,8 +18,8 @@
 	public static void main(String[] args) throws IOException {
 
 		/** open db */
-        RecordManager recman = RecordManagerFactory.createRecordManager( "hugedata");        
-        PrimaryTreeMap<Long, String> m = recman.treeMap("hugemap");
+        RecordManager recman = RecordManagerFactory.createRecordManager( "hugedata1");        
+        PrimaryTreeMap<Long, String> m = recman.treeMap("hugemap1");
         
         /** insert 1e7 records */
         for(long i = 0;i<1e8;i++){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/Persons1.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/Persons1.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/Persons1.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -76,6 +76,10 @@
 		
 	}
 		
+	/**
+	 * @param args
+	 * @throws IOException
+	 */
 	public static void main(String[] args) throws IOException {
 		//init Record Manager and dao
 		RecordManager recman = RecordManagerFactory.createRecordManager("persons1");
@@ -105,19 +109,38 @@
 		Person paul = new Person("Paul Moore", 
 				new Address("Shop street", "Galway","Ireland"),
 				patrick.name);
+		
 		personsByName.put(paul.name, paul	);
+		
+		Person abdul = new Person("abdul akhter", 
+				new Address("Shop street", "dhaka","Bangladesh"),
+				patrick.name);
+		
+		personsByName.put(abdul.name, abdul);
+		
+		Person adil  = new Person("adil akhter", 
+				new Address("Shop street", "dhaka","Bangladesh"),
+				patrick.name);
+		
+		personsByName.put(adil.name, adil );
+		
 
+		Person adil1  = new Person("adil akhter", 
+				new Address("Shop street", "dhaka","Bangladesh"),
+				patrick.name);
+		
+		personsByName.put(adil1.name, adil );
 		
 					
 		System.out.println("Number of persons: "+personsByName.size());
 		
-		System.out.println("Persons with name Patrick Moore: "+personsByName.get("Patrick Moore"));
+		System.out.println("Persons with name adil akhter: "+personsByName.find("adil akhter"));
 		System.out.println("Name of persons living in Galway: "+personsByTown.get("Galway"));
 		System.out.println("Father of Paul Moore: "+
 				personsByName.get(
 						personsByName.get("Paul Moore").fatherName
 					));
-
+		System.out.println("Name of persons living in Dhaka: "+personsByTown.get("dhaka"));
 	}
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -35,9 +35,15 @@
 			return false;
 
 		IStrategoString projectName = (IStrategoString)tvars[0];
-	
-		return index.initialize(projectName , env.getFactory(), SSLLibrary.instance(env).getIOAgent());
-
+		try
+		{
+			return index.initialize(projectName , env.getFactory(), SSLLibrary.instance(env).getIOAgent());
+		}
+		catch(Exception ex)
+		{
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed. Error : "+ ex.getMessage());
+			return false;
+		}
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -11,17 +11,18 @@
 import jdbm.SecondaryKeyExtractor;
 import jdbm.SecondaryTreeMap;
 
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.terms.TermFactory;
 
-
 class SpxModuleLookupTable {
-
+	
+	private final PrimaryHashMap<IStrategoList, IStrategoAppl> _moduleDefinition;
+	private final PrimaryHashMap<IStrategoList, IStrategoAppl> _moduleAnalyzedDefinition;
+	
 	private final PrimaryHashMap<IStrategoList, ModuleDeclaration> _moduleLookupMap;
 	private final SecondaryTreeMap <String , IStrategoList , ModuleDeclaration> _uriMap;
-
 	private final SecondaryHashMap<IStrategoList, IStrategoList,ModuleDeclaration> _enclosingPackageIdReferences;
-	
 
 	/**
 	 * Instantiates a lookup table for the base constructs (e.g. , packages and modules)of  Spoofaxlang.
@@ -36,7 +37,7 @@
 		
 		_moduleLookupMap = manager.loadHashMap(tableName+ "._lookupModuleMap.idx");
 		
-		// readonly secondary view of the the lookup table . 
+		// read-only secondary view of the the lookup table . 
 		_uriMap = _moduleLookupMap.secondaryTreeMap(tableName+ "._urimap.idx", 
 				new SecondaryKeyExtractor<String, IStrategoList, ModuleDeclaration>() {
 
@@ -68,6 +69,9 @@
 			}
 		}
 		);
+		
+		this._moduleDefinition = manager.loadHashMap(tableName+ "._moduleDefinition.idx");
+		this._moduleAnalyzedDefinition = manager.loadHashMap(tableName+ "._moduleAnalyzedDefinition.idx");
 	}
 	
 	/**
@@ -81,6 +85,17 @@
 		_moduleLookupMap.put(decl.getId(), decl);
 		
 	}
+	
+	public void addModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
+	{
+		_moduleDefinition.put(id, moduleDefinition);
+	}
+	
+	public void addAnalyzedModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
+	{
+		_moduleAnalyzedDefinition.put(id, moduleDefinition);
+	}
+	
 	/**
 	 * Removes {@link BaseConstructDeclaration} from the lookup table mapped by the {@code id}
 	 * 
@@ -89,8 +104,19 @@
 	 */
 	public ModuleDeclaration remove(IStrategoList id)
 	{
+		if ( containsModuleDeclaration(id))
+		{
+			//removing module definition and analyzed module definition
+			
+			this._moduleDefinition.remove(id);
+			this._moduleAnalyzedDefinition.remove(id);
+		}
+		
+		//removing module declaration from the table 
+		//and returning it.
 		return _moduleLookupMap.remove(id);
 	}
+	
 	/**
 	 * Returns {@link BaseConstructDeclaration} that is mapped by the specified {@code id} argument.
 	 * 
@@ -101,11 +127,21 @@
 		return _moduleLookupMap.get(id);
 	}
 	
-	
 	public boolean containsModuleDeclaration(IStrategoList id)
 	{
 		return _moduleLookupMap.containsKey(id);
 	}
+	
+	public IStrategoAppl getModuleDefinition(IStrategoList id)
+	{
+		return this._moduleDefinition.get(id);
+	}
+	
+	public IStrategoAppl getAnalyzedModuleDefinition(IStrategoList id)
+	{
+		return this._moduleAnalyzedDefinition.get(id);
+	}
+	
 	/**
 	 * Returns ModuleDeclarations mapped by absPath
 	 * 
@@ -118,29 +154,24 @@
 	
 		for ( IStrategoList l: _uriMap.get(absUri))
 			ret.add(_uriMap.getPrimaryValue(l));
-		
 		return ret;
 	}
 	
-	
 	public Iterable<ModuleDeclaration> moduleDeclarationsByPackageId(IStrategoList packageID)
 	{
 		List<ModuleDeclaration> ret = new ArrayList<ModuleDeclaration>();
 	
 		for ( IStrategoList l: _enclosingPackageIdReferences.get(packageID))
 			ret.add(_enclosingPackageIdReferences.getPrimaryValue(l));
-		
 		return ret;
 	}
 	
-
 	public IStrategoList packageId(IStrategoList moduleId)
 	{
 		if( containsModuleDeclaration(moduleId))
 		{
 			return get(moduleId).enclosingPackageID;
 		}	
-		
 		return null;
 	}
 	
@@ -153,8 +184,6 @@
 	public static void main(String[] args) throws IOException { 
 		//TODO :  add actual unit tests
 		//TODO :  add reference to JUnit  
-	 
-		
 		ISpxPersistenceManager manager = new SpxPersistenceManager( "test" , "c:/temp");
 		
 		SpxModuleLookupTable lookupTable = new SpxModuleLookupTable("lookup", manager);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Sep  2 15:27:23 2011	(r23282)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Sep  2 17:35:29 2011	(r23283)
@@ -46,22 +46,27 @@
 	 * @param termFactory Term Factory  
 	 * @param agent IOAgent responsible for providing IO operations.
 	 * @return true if the operation is successful ; false otherwise.
+	 * @throws IOException 
 	 */
-	public boolean initialize(IStrategoTerm projectName,  ITermFactory termFactory, IOAgent agent) 
+	public boolean initialize(IStrategoTerm projectName,  ITermFactory termFactory, IOAgent agent) throws IOException 
 	{
 		try
 		{	// Adding a new entry of the facade for the project 
 			// in the registry. 
 			_facadeRegistry.add(projectName, termFactory, agent) ;
-			
+
 			return true; 
 		}
-		catch (IOException ex)
+		catch(IllegalStateException e)
 		{
-			agent.printError("[SPX_Index_Initialize] Error : "+ex.getMessage());
-			
-			return false;	
+			tryCleanupResources(projectName);
+			throw e;
 		}
+		catch(Error er)
+		{
+			tryCleanupResources(projectName);
+			throw er;
+		}	
 	}
 
 

From M.A.Akhter at student.tudelft.nl  Fri Sep  2 19:45:36 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 02 Sep 2011 17:45:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23284 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings
Message-ID: <20110902174536.9610D7F8024@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep  2 17:45:35 2011
New Revision: 23284
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23284&sc=1

Log:
reverting changes committed in .settings/prefs

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs	Fri Sep  2 17:35:29 2011	(r23283)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs	Fri Sep  2 17:45:35 2011	(r23284)
@@ -1,12 +1,8 @@
-#Fri Sep 02 13:06:34 CEST 2011
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.5
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.5
+#Thu Apr 21 17:14:07 CEST 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

From M.A.Akhter at student.tudelft.nl  Fri Sep  2 19:47:27 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 02 Sep 2011 17:47:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23285 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test
Message-ID: <20110902174727.0A4602B801B@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep  2 17:47:26 2011
New Revision: 23285
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23285&sc=1

Log:
cleanup

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/TestHashmap.java

From m.dejonge at tudelft.nl  Sat Sep  3 14:48:25 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 03 Sep 2011 12:48:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23286 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110903124825.C5DE87F8003@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Sep  3 12:48:24 2011
New Revision: 23286
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23286&sc=1

Log:
bugfix: fix for failures in combined errors category

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParserHistory.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParserHistory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParserHistory.java	Fri Sep  2 17:47:26 2011	(r23285)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParserHistory.java	Sat Sep  3 12:48:24 2011	(r23286)
@@ -46,7 +46,7 @@
     /*
      * Set current token of parser based on recover tokens or read from new tokens
      */
-    public void readRecoverToken(SGLR myParser, boolean keepRecoveredLines) {  
+    public void readRecoverToken(SGLR myParser, boolean keepStacks) { 
         if (hasFinishedRecoverTokens()) {             
             if(myParser.getCurrentToken()!=SGLR.EOF){                
                 if(getIndexLastToken()>=0){
@@ -54,7 +54,7 @@
                     indentHandler.updateIndentation(myParser.getCurrentToken());
                     recoverTokenCount++;   
                     if(indentHandler.lineMarginEnded() || myParser.getCurrentToken()==SGLR.EOF)
-                        keepNewLinePoint(myParser, myParser.tokensSeen-1, true, indentHandler);
+                        keepNewLinePoint(myParser, myParser.getParserLocation()-1, !keepStacks, indentHandler);
                 }
             }
         }
@@ -63,14 +63,10 @@
             if(myParser.getCurrentToken() == -1) {
             	myParser.setCurrentToken(SGLR.EOF);
     		}
-            if(keepRecoveredLines){
-                recoveryIndentHandler.updateIndentation(myParser.getCurrentToken());
-                if(recoveryIndentHandler.lineMarginEnded() || myParser.getCurrentToken()==SGLR.EOF)
-                    keepNewLinePoint(myParser, tokenIndex, false, recoveryIndentHandler);
-            }    
+            if(keepStacks)
+            	addStackNodesToNewLinePoint(myParser);
         }
-        tokenIndex++;
-        
+        tokenIndex++;        
     }
     
     public boolean hasFinishedRecoverTokens() {
@@ -94,9 +90,9 @@
         indentHandler.updateIndentation(myParser.getCurrentToken());
         recoverTokenCount++;
         tokenIndex++;
-        assert myParser.tokensSeen == this.getTokenIndex(): "inconsistentcy in token index";
+        //assert myParser.tokensSeen == this.getTokenIndex(): "inconsistentcy in token index";
         if(indentHandler.lineMarginEnded() || myParser.getCurrentToken()==SGLR.EOF || tokenIndex == 1)
-            keepNewLinePoint(myParser, myParser.tokensSeen-1, false, indentHandler);
+            keepNewLinePoint(myParser, myParser.getParserLocation() - 1, false, indentHandler);
     }
     
     public void keepInitialState(SGLR myParser) {        
@@ -114,6 +110,21 @@
             newLinePoint.fillStackNodes(myParser.activeStacks);           
         }
     }
+    
+    private void addStackNodesToNewLinePoint(SGLR myParser) {
+		// TODO Auto-generated method stub
+    	int tokensSeen = myParser.getParserLocation() - 1;
+    	for (int i = newLinePoints.size()-1; i >= 0; i--) {
+			IndentInfo newLinePoint = newLinePoints.get(i);
+			if(newLinePoint.getTokensSeen() == tokensSeen){
+	            newLinePoint.fillStackNodes(myParser.activeStacks);
+	            return;
+	        }
+			if(newLinePoint.getTokensSeen() < tokensSeen)
+				return;
+		}
+	}
+
 
     public String getFragment(int startTok, int endTok, PushbackStringIterator chars) {
         String fragment="";

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java	Fri Sep  2 17:47:26 2011	(r23285)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java	Sat Sep  3 12:48:24 2011	(r23286)
@@ -50,8 +50,8 @@
     }
 
     private void combinedRecover() {
-        int tokensSeen = mySGLR.tokensSeen; 
-        int lastIndex = getHistory().getIndexLastLine();
+        int tokensSeen = mySGLR.getParserLocation(); 
+        int lastIndex = getHistory().getLineOfTokenPosition(tokensSeen -1);
         if(onlyFineGrained){
             mySGLR.getPerformanceMeasuring().startFG();
             boolean fg=tryFineGrainedRepair(tokensSeen, lastIndex, false);
@@ -95,10 +95,11 @@
         }
         //WHITESPACE REPAIR
         if (skipSucceeded) { 
-            getHistory().deleteLinesFrom(skipRecovery.getStartIndexErrorFragment());//TODO: integrate with FG and BP
             getHistory().resetRecoveryIndentHandler(skipRecovery.getStartLineErrorFragment().getIndentValue());
             parseErrorFragmentAsWhiteSpace(false);
             boolean rsSucceeded=parseRemainingTokens(true);
+            if(!rsSucceeded)
+            	combinedRecover();
             /*
             if(rsSucceeded)
             	System.out.println("RS-Succeeded");

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java	Fri Sep  2 17:47:26 2011	(r23285)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java	Sat Sep  3 12:48:24 2011	(r23286)
@@ -81,9 +81,9 @@
         boolean eofReached=myParser.getCurrentToken()==SGLR.EOF;
         acceptPosition=-1;
         NewStructureSkipper newRegionSelector=new NewStructureSkipper(myParser);
-        int failureIndex=getHistory().getIndexLastLine();
+        errorDetectionLocation = myParser.getParserLocation()-1;
+        int failureIndex=getHistory().getLineOfTokenPosition(errorDetectionLocation);
         assert(failureIndex >= 0);
-        errorDetectionLocation=getHistory().getIndexLastToken();
         ArrayList<StructureSkipSuggestion> prevRegions=newRegionSelector.getPreviousSkipSuggestions(failureIndex);
         //System.out.println("PREVIOUS REGION");        
         if(trySetErroneousRegion(prevRegions)){

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Fri Sep  2 17:47:26 2011	(r23285)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Sat Sep  3 12:48:24 2011	(r23286)
@@ -53,7 +53,7 @@
 
 	private int currentToken;
 
-	protected int tokensSeen;
+	private int tokensSeen;
 
 	protected int lineNumber;
 

From m.dejonge at tudelft.nl  Sat Sep  3 21:50:27 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 03 Sep 2011 19:50:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23287 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110903195027.125AFCC12D@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Sep  3 19:50:25 2011
New Revision: 23287
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23287&sc=1

Log:
timer on finegrained

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Sat Sep  3 12:48:24 2011	(r23286)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Sat Sep  3 19:50:25 2011	(r23287)
@@ -5,13 +5,16 @@
 
 public class FineGrainedOnRegion {
 
-    private static final int MAX_NUMBER_OF_RECOVER_BRANCHES = 1000;
+    private static final int TIME_LIMIT = 500;
+	private static final int MAX_NUMBER_OF_RECOVER_BRANCHES = 1000;
 	private static final int MAX_NR_OF_EXPLORED_LINES = 75;
 	private int acceptRecoveryPosition;
     private int regionEndPosition;
     private ArrayList<BacktrackPosition> choicePoints;
     private static int MAX_BACK_JUMPS=5;
     private SGLR mySGLR;
+    private long recoveryStartTime;
+    private boolean hasRegionFallBack;
     
     private ParserHistory getHistory() {
         return mySGLR.getHistory();
@@ -28,6 +31,7 @@
                 choicePoints.add(btPoint);
             }            
         }
+        hasRegionFallBack = false;
     }
     
     public void setRegionInfo(StructureSkipSuggestion erroneousRegion, int acceptPosition){
@@ -48,16 +52,21 @@
                 choicePoints.add(btPoint);
             }            
         }
+        hasRegionFallBack = true;
     }
     
     public boolean recover() {
         int btIndex=choicePoints.size()-1;
-        if(btIndex>=0)
+        if(btIndex>=0){
+        	recoveryStartTime = System.currentTimeMillis();
         	return recoverFrom(btIndex, new ArrayList<RecoverNode>());
+        }
         return false;
     }
 
 	private boolean recoverFrom(int btIndex, ArrayList<RecoverNode> unexplored_branches) {
+		if(hasRegionFallBack && System.currentTimeMillis()-recoveryStartTime > TIME_LIMIT)
+			return false;
         ArrayList<RecoverNode> rec_Branches=new ArrayList<RecoverNode>();
         if(btIndex>=0){
         	rec_Branches=collectRecoverBranches(btIndex); //collect permissive branches at btIndex line

From L.C.L.Kats at tudelft.nl  Sun Sep  4 12:31:56 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 04 Sep 2011 10:31:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23288 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
Message-ID: <20110904103156.0753C108C010@mx3.tudelft.nl>

Author: LennartKats
Date: Sun Sep  4 10:31:55 2011
New Revision: 23288
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23288&sc=1

Log:
support getDescriptor() for languages that haven't been loaded yet (reported by Tobi)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Sat Sep  3 19:50:25 2011	(r23287)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Sun Sep  4 10:31:55 2011	(r23288)
@@ -43,6 +43,7 @@
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.dynamicloading.DynamicParseTableProvider;
 import org.strategoxt.imp.runtime.dynamicloading.ParseTableProvider;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.IMPJSGLRLibrary;
 import org.strategoxt.imp.runtime.stratego.IMPLibrary;
@@ -394,7 +395,11 @@
 	}
 	
 	public static Descriptor getDescriptor(Language language) {
-		return descriptors.get(language.getName());
+		// HACK: in case language is only known by IMP but not loaded, use the validator
+		if (language.getValidator() instanceof MetaFileLanguageValidator) 
+			((MetaFileLanguageValidator) language.getValidator()).getDescriptor();
+		Descriptor result = descriptors.get(language.getName());
+		return result;
 	}
 	
 	// ERROR HANDLING

From m.dejonge at tudelft.nl  Sun Sep  4 13:10:47 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sun, 04 Sep 2011 11:10:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23289 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110904111047.AFB922B801C@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Sun Sep  4 11:10:45 2011
New Revision: 23289
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23289&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Sun Sep  4 10:31:55 2011	(r23288)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Sun Sep  4 11:10:45 2011	(r23289)
@@ -11,7 +11,7 @@
 	private int acceptRecoveryPosition;
     private int regionEndPosition;
     private ArrayList<BacktrackPosition> choicePoints;
-    private static int MAX_BACK_JUMPS=5;
+    private static int MAX_BACK_JUMPS=6;
     private SGLR mySGLR;
     private long recoveryStartTime;
     private boolean hasRegionFallBack;

From L.C.L.Kats at tudelft.nl  Sun Sep  4 16:44:41 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 04 Sep 2011 14:44:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23290 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: editor
	editor/java/org/strategoxt/imp/testing syntax
Message-ID: <20110904144441.4F3D6CC13A@mx4.tudelft.nl>

Author: LennartKats
Date: Sun Sep  4 14:44:40 2011
New Revision: 23290
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23290&sc=1

Log:
- use normal setup block if no target language is specified (useful for e.g. refactoring tests)
- minor syntax and editor service tweaks

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Sun Sep  4 11:10:45 2011	(r23289)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Sun Sep  4 14:44:40 2011	(r23290)
@@ -1,17 +1,8 @@
 module Spoofax-Testing-Completions
 
-//imports Spoofax-Testing-Completions.generated
+//imports Spoofax-Testing-Completions.generated                       
 
 completions
-                                                                   
-  // This file is used to define content completion.               
-  //                                                               
-  // See the imported file for a brief introduction and examples.  
-                                                                   
-
-completions
-                                                                 
-  // Semantic (identifier) completion:   
                                          
   completion proposer                  : editor-complete
   
@@ -22,15 +13,21 @@
     "language " <Language>
   
   completion template : Header =
+    "target language " <Language>
+  
+  completion template : Header =
     "start symbol " <Start>
                                          
   completion template Header TestDecl Result :
-    "test" " " <description> "\n\t" "[[" <  > "]] " <succeeds:Result> (blank)
+    "test" " " <description> " [[\n\t" <> "\n]]" <succeeds:Result> (blank)
+                                         
+  completion template Header TestDecl Result :
+    "setup" " [[\n\t" <> "\n]]" (blank)
+                                         
+  completion template Header TestDecl Result :
+    "target setup" " [[\n\t" <> "\n]]" (blank)
     
-  completion template : Result = "parse to file " <path>
-  completion template : Result = "parse to " <term>
-  completion template : Result = "parse fails" 
-  completion template : Result = "parse succeeds" 
+  completion template : Result = "parse " <:OptPattern> 
   completion template : Result = "succeeds"
   completion template : Result = "fails"    
   completion template : Result = <n> " errors" 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Sun Sep  4 11:10:45 2011	(r23289)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Sun Sep  4 14:44:40 2011	(r23290)
@@ -90,7 +90,8 @@
 		final ITermFactory nonParentFactory = Environment.getTermFactory();
 		final ITermFactory factory = new ParentTermFactory(nonParentFactory);
 		final FragmentParser testedParser = configureFragmentParser(root, getLanguage(root), fragmentParser);
-		final FragmentParser outputParser = configureFragmentParser(root, getTargetLanguage(root), outputFragmentParser);
+		final FragmentParser outputParser = getTargetLanguage(root) == null
+				? testedParser : configureFragmentParser(root, getTargetLanguage(root), outputFragmentParser);
 		assert !(nonParentFactory instanceof ParentTermFactory);
 
 		if (testedParser == null || !testedParser.isInitialized()
@@ -180,7 +181,6 @@
 
 	private Language getTargetLanguage(IStrategoTerm root) {
 		String languageName = getLanguageName(root, TARGET_LANGUAGE_1);
-		if (languageName == null) languageName = getLanguageName(root, LANGUAGE_1);
 		if (languageName == null) return null;
 		// TODO: fix this so it is capable of loading & registering languages
 		// (E.g., now you need to open a file in target language at least once before this works...)

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Sun Sep  4 11:10:45 2011	(r23289)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Sun Sep  4 14:44:40 2011	(r23290)
@@ -36,19 +36,19 @@
   syntax
     %% TODO: support tests with no fragment (other than the setup blocks) but only a condition
     
-    "setup" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> -> <Test-CF> {cons("Setup")}
-    "setup" <Space-LEX> <Description-CF>                         -> <Test-CF> {cons("SetupEmpty")}
+    "setup" <OptSpace-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> -> <Test-CF> {cons("Setup")}
+    "setup" <OptSpace-LEX> <Description-CF>                         -> <Test-CF> {cons("SetupEmpty")}
 
     %% target setup uses Output while setup uses Input so that all Input terms
     %% can be parsed with the source language, and all Output terms can be
     %% parsed with the target language. (i.e., simplifies Java code)
-    "target" <LAYOUT?-CF> "setup" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Output-CF> -> <Test-CF> {cons("TargetSetup")}
-    "target" <LAYOUT?-CF> "setup" <Space-LEX> <Description-CF>                          -> <Test-CF> {cons("TargetSetupEmpty")}
+    "target" <LAYOUT?-CF> "setup" <OptSpace-LEX> <Description-CF> <LAYOUT?-CF> <Output-CF> -> <Test-CF> {cons("TargetSetup")}
+    "target" <LAYOUT?-CF> "setup" <OptSpace-LEX> <Description-CF>                          -> <Test-CF> {cons("TargetSetupEmpty")}
 
-    "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> <LAYOUT?-CF> <Result*-CF> -> <Test-CF> {cons("Test")}
-    "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <TestStratego-CF> <LAYOUT?-CF> <StrategoResult-CF>
+    "test" <OptSpace-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> <LAYOUT?-CF> <Result*-CF> -> <Test-CF> {cons("Test")}
+    "test" <OptSpace-LEX> <Description-CF> <LAYOUT?-CF> <TestStratego-CF> <LAYOUT?-CF> <StrategoResult-CF>
       -> <StrategoTest-CF> {cons("TestStratego")}
-    "test" <Space-LEX> <Description-CF> -> <Test-CF> {cons("TestEmpty")}
+    "test" <OptSpace-LEX> <Description-CF> -> <Test-CF> {cons("TestEmpty")}
 
   context-free syntax
     ID "=" ATerm -> VarDecl {cons("VarDecl")}
@@ -79,10 +79,13 @@
     "fails"                              -> Term {reject}
 
   lexical syntax
-    [\ ]+ -> Space
+    [\ ]+   -> OptSpace
+    NoSpace -> OptSpace
+            -> NoSpace
 
   lexical restrictions
-    Space -/- [\ ]
+    OptSpace -/- [\ ]
+    NoSpace  -/- ~[\[].~[\[]
 
   context-free syntax
 

From m.dejonge at tudelft.nl  Mon Sep  5 17:43:54 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 05 Sep 2011 15:43:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23291 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110905154354.CE21A108C004@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Sep  5 15:43:54 2011
New Revision: 23291
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23291&sc=1

Log:
settings for FG

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Sun Sep  4 14:44:40 2011	(r23290)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Mon Sep  5 15:43:54 2011	(r23291)
@@ -6,7 +6,7 @@
 public class FineGrainedOnRegion {
 
     private static final int TIME_LIMIT = 500;
-	private static final int MAX_NUMBER_OF_RECOVER_BRANCHES = 1000;
+	private static final int MAX_NUMBER_OF_RECOVER_BRANCHES = 500;
 	private static final int MAX_NR_OF_EXPLORED_LINES = 75;
 	private int acceptRecoveryPosition;
     private int regionEndPosition;
@@ -125,7 +125,7 @@
      */
     private ArrayList<RecoverNode> recoverParse(ArrayList<RecoverNode> candidates, int endRecoverSearchPos) {
     	if(candidates.size() > MAX_NUMBER_OF_RECOVER_BRANCHES)
-    		candidates = new ArrayList<RecoverNode>(candidates.subList(0, MAX_NUMBER_OF_RECOVER_BRANCHES/2)); //too much stacks causes problems for performance while they probably contain multiple solutions
+    		candidates = new ArrayList<RecoverNode>(); //too much stacks causes problems for performance
     	mySGLR.setFineGrainedOnRegion(true);
         ArrayList<RecoverNode> newCandidates=new ArrayList<RecoverNode>();
         int curTokIndex;

From tobivollebregt at gmail.com  Mon Sep  5 21:05:41 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 05 Sep 2011 19:05:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23292 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing:
	editor/java/org/strategoxt/imp/testing/strategies trans
Message-ID: <20110905190541.8E4E92B8018@mx2.tudelft.nl>

Author: tvo
Date: Mon Sep  5 19:05:41 2011
New Revision: 23292
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23292&sc=1

Log:
Testing language: display expected output using pretty print strategy of target language
+ show foreign part of stacktrace in plugin-strategy-invoke in case rewriting failed

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Mon Sep  5 15:43:54 2011	(r23291)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Mon Sep  5 19:05:41 2011	(r23292)
@@ -44,8 +44,10 @@
 				current = factory.makeAppl(factory.makeConstructor("Some", 1), current);
 				return current;
 			} else {
+				Context foreignContext = observer.getRuntime().getCompiledContext();
 				// TODO: show only foreign part of stack trace (without using setTrace(), won't work here)
-				IStrategoString trace = factory.makeString("rewriting failed\n" + context.getTraceString());
+				IStrategoString trace = factory.makeString("rewriting failed\n" + context.getTraceString()
+						+ (foreignContext != null ? foreignContext.getTraceString() : ""));
 				//if (printTrace.invoke(context, trace) != null)
 				//	observer.reportRewritingFailed();
 				return factory.makeAppl(factory.makeConstructor("Fail", 1), trace);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Mon Sep  5 15:43:54 2011	(r23291)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Mon Sep  5 19:05:41 2011	(r23292)
@@ -114,7 +114,7 @@
     where
       not(<eq> (ast, result) <+ <equal-in-desugared-form> (ast, result)) 
     with
-      result' := <spt-pp-string> result
+      result' := <spt-pp-target-string> result
     <+
       result' := $[[<write-to-string> result] instead of [<write-to-string> ast]]
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Mon Sep  5 15:43:54 2011	(r23291)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Mon Sep  5 19:05:41 2011	(r23292)
@@ -31,6 +31,7 @@
         rules(
           InputFile := path
           Language  := <get-language> ast'
+          TargetLanguage := <get-target-language <+ get-language> ast'
         );
         errors    := <collect-all(check-error, conc)> ast';
         warnings  := <collect-all(check-warning, conc)> ast';
@@ -82,6 +83,11 @@
     with
       filename := <guarantee-extension(|"aterm")> path
   
+  // FIXME: this doesn't work as far as I can see (TVO 20110905)
+  // 1) editor-hover is passed QuotePart when hovering over input
+  // 2) only Input, not Output, is in the pattern
+  // 3) a* == ast, not a* == [ast | _], and the Input/Output node is
+  //    not available because the QuotePart is passed... 
   editor-hover:
     (Input(_, _, _, _){a*}, _, _, _, _) -> hover
     where
@@ -197,10 +203,16 @@
     )    
   
   // Tries to pretty print an AST, or fails
-  spt-pp-string =
-    plugin-strategy-invoke(|<Language>, $[pp-[<lower-case> <Language>]-string]);
+  spt-pp-string(|language) =
+    plugin-strategy-invoke(|language, $[pp-[<lower-case> language]-string]);
     ?Some(<id>)
-  
+
+  spt-pp-string =
+    spt-pp-string(|<Language>)
+
+  spt-pp-target-string =
+    spt-pp-string(|<TargetLanguage>)
+
   get-service-input-term =
     get-service-input-term(|<LastAnalyzedAst>)
 

From m.dejonge at tudelft.nl  Tue Sep  6 12:55:50 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 06 Sep 2011 10:55:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23293 -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
Message-ID: <20110906105550.40D127F8005@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Sep  6 10:55:48 2011
New Revision: 23293
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23293&sc=1

Log:
completion rules option

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/completion-sections.astr
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/completion-sections.astr
==============================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/completion-sections.astr	Mon Sep  5 19:05:41 2011	(r23292)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/completion-sections.astr	Tue Sep  6 10:55:48 2011	(r23293)
@@ -211,7 +211,7 @@
 lookup-placeholder:
 	iter-sep(srt, _) -> [<lookup-placeholder> srt]
 
-get-lexical-default-placeholder = !"MISSING_TOKEN"
+get-lexical-default-placeholder = !NULL() //"MISSING_TOKEN"
 
 get-cf-default-placeholder = !NULL()
 

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr
==============================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr	Mon Sep  5 19:05:41 2011	(r23292)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr	Tue Sep  6 10:55:48 2011	(r23293)
@@ -29,6 +29,7 @@
   SEPARATORS_ON     = "separators"
   OPTIMIZE_ON       = "optimize"
   NONNESTABLE_ON    = "nonnestable"
+  COMPLETIONS_ON    = "completions"
 
 signature constructors
 
@@ -50,8 +51,11 @@
       id.init;
 
       add-permissive-sections;
-      generate-completion-grammar-top;
       
+      if-switch(!COMPLETIONS_ON(),
+        generate-completion-grammar-top
+      );
+            
       /* Disabled:
          Adding rules for separate characters may cause them to be used to
          construct larger literals. E.g. -> [\39] and -> [\42] might together
@@ -104,6 +108,11 @@
     , "off"
     , "Optimize the inserted literals to character groups (disabled in this version)"
     )
+  + SwitchOption(|
+      COMPLETIONS_ON()
+    , "on"
+    , "Add completion recovery rules"
+    )
   + ArgOption(
       "-m"
     , <set-config> ("-m", <id>)

From m.dejonge at tudelft.nl  Tue Sep  6 13:42:47 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 06 Sep 2011 11:42:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23294 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110906114247.9AED37F800D@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Sep  6 11:42:46 2011
New Revision: 23294
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23294&sc=1

Log:
some tolerance for user selection in refactorings: for example  when the name of a method is selected, method can be recognized as selected method

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Tue Sep  6 10:55:48 2011	(r23293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Tue Sep  6 11:42:46 2011	(r23294)
@@ -276,6 +276,11 @@
 					ancestor, ancestor, true);
 			isMatch = isMatchOnConstructorOrSort(mappings, selectionNode);
 		}
+		//some tolerance for example when method name is selected instead of method
+		while (!isMatch && selectionNode != null && !selectionNode.isList() && getParent(selectionNode) != null && !getParent(selectionNode).isList()) {
+			selectionNode = getParent(selectionNode);
+			isMatch = isMatchOnConstructorOrSort(mappings, selectionNode);
+		}
 		if (isMatch) {
 			return selectionNode;
 		}

From m.dejonge at tudelft.nl  Tue Sep  6 14:33:14 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 06 Sep 2011 12:33:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23295 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings
Message-ID: <20110906123314.DFF46CC0C8@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Sep  6 12:33:14 2011
New Revision: 23295
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23295&sc=1

Log:
test for if-else bug

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-todo.spt

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-todo.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-todo.spt	Tue Sep  6 12:33:14 2011	(r23295)
@@ -0,0 +1,32 @@
+module test-rename-todo
+ 
+language Stratego-Sugar
+
+/**
+ * Basic rename testcases: basic constructs, errors do not occur
+ */
+setup [[
+  module test-rename-todo
+  rules
+]]
+
+test Rename If Else
+  [[ 
+    r: a -> [[b]]
+	where
+	  if id then
+		b := 5
+	  else
+		b := 6
+	  end
+  ]] refactor rename-refactoring("foo") to 
+  [[
+    r: a -> foo
+	where
+	  if id then
+		foo := 5 //causes the problem
+	  else
+		foo := 6
+	  end
+  ]]
+

From m.dejonge at tudelft.nl  Tue Sep  6 15:26:09 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 06 Sep 2011 13:26:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23296 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego:
	test-refactorings trans/refactoring
Message-ID: <20110906132609.D4BFE2B8021@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Sep  6 13:26:08 2011
New Revision: 23296
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23296&sc=1

Log:


Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline-TODO.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-TODO.spt
      - copied, changed from r23295, spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-todo.spt
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-todo.spt
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline-semantic-issues.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-prettyprint.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline-TODO.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline-TODO.spt	Tue Sep  6 13:26:08 2011	(r23296)
@@ -0,0 +1,36 @@
+module test-inline
+ 
+language Stratego-Sugar
+
+/**
+ * Basic inline testcases: errors do not occur
+ */
+setup [[
+  module test-inline-TODO
+  rules
+    aaa = fail
+    bbb = fail
+]]
+
+test Inline Variabele
+  [[ 
+  	  r: a -> [[b]]
+  	  where
+  	    b := <debug> []
+  ]] refactor inline-refactoring to
+  [[ 
+  	  r: a -> <debug> []
+  ]]
+  
+  //TODO: more tolerant with selection
+test Inline Definition-Name Selected
+  [[ 
+  	  bar = foo
+  	  [[foo]] = aaa 
+  ]] refactor inline-refactoring to
+  [[ 
+  	  bar = aaa
+  ]]  
+  
+  
+  
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline-semantic-issues.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline-semantic-issues.spt	Tue Sep  6 12:33:14 2011	(r23295)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline-semantic-issues.spt	Tue Sep  6 13:26:08 2011	(r23296)
@@ -30,4 +30,10 @@
   ]] refactor inline-refactoring
   1 fatal errors
 
-//TODO: name collision (or solve collisions?)
\ No newline at end of file
+test Inline External Strategy
+  [[ 
+  	  bar = aaa; [[debug]]
+  ]] refactor inline-refactoring
+  1 fatal errors
+
+//TODO: name collision strategies?
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline.spt	Tue Sep  6 12:33:14 2011	(r23295)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-inline.spt	Tue Sep  6 13:26:08 2011	(r23296)
@@ -41,16 +41,6 @@
   	  bar = aaa
   ]]  
 
-//TODO: more tolerant with selection
-test Inline Definition-Name Selected
-  [[ 
-  	  bar = foo
-  	  [[foo]] = aaa 
-  ]] refactor inline-refactoring to
-  [[ 
-  	  bar = aaa
-  ]]  
-
 test Inline Simple Rule
   [[ 
   	  bar = <map(foo)> [1,2,3]
@@ -78,3 +68,5 @@
   	  bar = <map({a: ?a; !(a,a)})> [1,2,3]
   ]]  
 
+
+     
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-prettyprint.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-prettyprint.spt	Tue Sep  6 12:33:14 2011	(r23295)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-prettyprint.spt	Tue Sep  6 13:26:08 2011	(r23296)
@@ -11,7 +11,9 @@
     rules
       bar(x) = map(x)]] 
   ]] refactor format-refactoring to
-  "module test-prettyprint
-    rules
-      bar(|x) = map(x)"
- 
+"module test-prettyprint
+
+rules
+
+ bar(x) =
+ map(x)"
\ No newline at end of file

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-TODO.spt (from r23295, spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-todo.spt)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-todo.spt	Tue Sep  6 12:33:14 2011	(r23295, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/test-refactorings/test-rename-TODO.spt	Tue Sep  6 13:26:08 2011	(r23296)
@@ -6,7 +6,7 @@
  * Basic rename testcases: basic constructs, errors do not occur
  */
 setup [[
-  module test-rename-todo
+  module test-rename-TODO
   rules
 ]]
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str	Tue Sep  6 12:33:14 2011	(r23295)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str	Tue Sep  6 13:26:08 2011	(r23296)
@@ -7,18 +7,13 @@
 
 inline-refactoring:
   (_, selected, position, ast, path, project-path) -> 
-  (ast-changes, fatal-errors, [], warnings)
+  (ast-changes, [], [], warnings)
     where //TODO: multi-file
       declaration := <?(<?SDefT(_, _, _, _)>, _) <+ declaration-of-call> (selected, ast);
+      <not(errors-recursion)> declaration;
       warnings := <warnings-multiple-declarations> (declaration, ast);
-      fatal-errors := <errors-recursion> declaration;
-      if <?[]> fatal-errors then
-        ast-changes := [(ast, <inline> (declaration, ast))]
-      else
-        ast-changes := []
-    end
+      ast-changes := [(ast, <inline> (declaration, ast))]
  
-
 rules //resolve declaration 
 	
 declaration-of-call:
@@ -30,13 +25,9 @@
 rules //precondition errors, warnings
 
 errors-recursion:
-  decl at SDefT(name{ref}, _, _, _) -> errors
+  decl at SDefT(name{ref}, _, _, _) -> [(decl, "strategy declaration contains recursive call")]
   where
-    if <is-recursive-declaration> decl then
-      errors := [(decl, "strategy declaration contains recursive call")]
-    else
-      errors := []
-    end
+    <is-recursive-declaration> decl
 
 is-recursive-declaration:
   decl at SDefT(name{ref}, _, _, _) -> decl
@@ -54,6 +45,19 @@
       warnings := []
     end
 
+inline-refactoring:
+  (_, selected, position, ast, path, project-path) -> 
+  ([], ["No declaration found. Libary strategy?"], [], [])
+    where //TODO: multi-file
+      <not(?(<?SDefT(_, _, _, _)>, _) <+ declaration-of-call)> (selected, ast)
+
+inline-refactoring:
+  (_, selected, position, ast, path, project-path) -> 
+  ([], fatal-errors, [], [])
+    where //TODO: multi-file
+      declaration := <?(<?SDefT(_, _, _, _)>, _) <+ declaration-of-call> (selected, ast);
+      fatal-errors := <errors-recursion> declaration
+
 
 rules //transformation
 	

From m.dejonge at tudelft.nl  Tue Sep  6 15:27:42 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 06 Sep 2011 13:27:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23297 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor
Message-ID: <20110906132742.BBDBD2B800B@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Sep  6 13:27:42 2011
New Revision: 23297
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23297&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Tue Sep  6 13:26:08 2011	(r23296)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Tue Sep  6 13:27:42 2011	(r23297)
@@ -51,6 +51,6 @@
   
   refactoring: "Remove debug" = remove-debug-refactoring
 
-  refactoring: "Inline" = inline-refactoring (meta)
+  refactoring: "Inline" = inline-refactoring
 
   refactoring: "Extract" = extract-refactoring (meta)

From tobivollebregt at gmail.com  Tue Sep  6 17:37:45 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 06 Sep 2011 15:37:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23298 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20110906153745.A89E0108C009@mx3.tudelft.nl>

Author: tvo
Date: Tue Sep  6 15:37:44 2011
New Revision: 23298
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23298&sc=1

Log:
Java 1.6...

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Tue Sep  6 13:27:42 2011	(r23297)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Tue Sep  6 15:37:44 2011	(r23298)
@@ -8,7 +8,6 @@
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -107,7 +106,14 @@
 			if (origin.getSubtermCount() > 0) {
 				IStrategoList subtermPath = getTermPathWithOrigin(context, ast, origin.getSubterm(0));
 				if (subtermPath != null){
-					IStrategoTerm[] originPath = Arrays.copyOf(subtermPath.getAllSubterms(), subtermPath.getSubtermCount()-1);
+					// Arrays.copyOf is Java 1.6
+					//IStrategoTerm[] originPath = Arrays.copyOf(subtermPath.getAllSubterms(), subtermPath.getSubtermCount()-1);
+					IStrategoTerm[] allSubterms = subtermPath.getAllSubterms();
+					IStrategoTerm[] originPath = new IStrategoTerm[subtermPath.getSubtermCount()-1];
+					for (int i = 0; i < originPath.length; ++i) {
+						originPath[i] = allSubterms[i];
+					}
+
 					TermFactory factory = new TermFactory();
 					return factory.makeList(originPath);
 				}

From tobivollebregt at gmail.com  Tue Sep  6 21:22:55 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 06 Sep 2011 19:22:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23299 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	org.strategoxt.imp.testing/trans
Message-ID: <20110906192255.5F6EC7F800B@mx1.tudelft.nl>

Author: tvo
Date: Tue Sep  6 19:22:54 2011
New Revision: 23299
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23299&sc=1

Log:
Testing language: call target language plugin observer and completion strategies where applicable

Introduced a new SSL_EXT_origin_language primitive so the testing plugin
can find out the original language of the AST passed to editor-complete.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginLanguagePrimitive.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Tue Sep  6 15:37:44 2011	(r23298)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Tue Sep  6 19:22:54 2011	(r23299)
@@ -45,7 +45,9 @@
 		add(new OriginDeletionOffsetPrimitive());
 		add(new OriginInsertBeforeOffsetPrimitive());
 		add(new OriginInsertAtEndOffsetPrimitive());
-		add(new OriginTextWithLayoutPrimitive());				
+		add(new OriginTextWithLayoutPrimitive());
+
+		add(new OriginLanguagePrimitive());
 	}
 
 	public String getOperatorRegistryName() {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginLanguagePrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginLanguagePrimitive.java	Tue Sep  6 19:22:54 2011	(r23299)
@@ -0,0 +1,29 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.eclipse.imp.parser.IParseController;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * Name of the language this AST belongs to.
+ * @author Tobi Vollebregt
+ */
+public class OriginLanguagePrimitive extends AbstractPrimitive {
+
+	public OriginLanguagePrimitive() {
+		super("SSL_EXT_origin_language", 0, 1);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		final IParseController pc = SourceAttachment.getParseController(tvars[0]);
+		if (pc == null) return false;
+		final ITermFactory factory = env.getFactory();
+		env.setCurrent(factory.makeString(pc.getLanguage().getName()));
+		return true;
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Tue Sep  6 15:37:44 2011	(r23298)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Tue Sep  6 19:22:54 2011	(r23299)
@@ -122,7 +122,7 @@
   	(ast, result) -> (ast, result)
   	where
       input-observer := (ast, <InputFile>, <project-path>);
-      ast-desugared := <plugin-strategy-invoke(|<Language>, <spt-get-observer>); try(?Some(<Fst>))> input-observer;
+      ast-desugared := <plugin-strategy-invoke(|<TargetLanguage>, <spt-get-observer>); try(?Some(<Fst>))> input-observer;
       <compare-desugared-asts> (ast-desugared, result) 
   		
   check-builder-expectation(|result) :

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Tue Sep  6 15:37:44 2011	(r23298)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Tue Sep  6 19:22:54 2011	(r23299)
@@ -136,9 +136,16 @@
     where
       ?input-tuple;
       not(<origin-line> ast => 1);
-      resolvers := <spt-get-content-proposers>;
-      results   := <map(execute-service(|input-tuple))> resolvers;
-      proposals := <getfirst(?Some(<id>))> results
+      language := <origin-language> ast;
+      {|Language:
+        rules( Language := language );
+        resolvers := <spt-get-content-proposers>;
+        results   := <map(execute-service(|input-tuple))> resolvers;
+        proposals := <getfirst(?Some(<id>))> results
+      |}
+
+  origin-language =
+  	prim("SSL_EXT_origin_language", <id>)
 
 strategies
   

From m.dejonge at tudelft.nl  Wed Sep  7 09:42:54 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 07 Sep 2011 07:42:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23300 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20110907074254.47215CC06C@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Sep  7 07:42:54 2011
New Revision: 23300
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23300&sc=1

Log:
preserve spacing (align refactoring)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Tue Sep  6 19:22:54 2011	(r23299)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Wed Sep  7 07:42:54 2011	(r23300)
@@ -34,7 +34,7 @@
 		
 create-textchange-replace(pp):
 	(origin-node, new-node) -> (start-offset, end, indented-text)
-	where
+	where 
 		start-offset := <origin-start-offset> origin-node;
 		end   := <origin-end-offset> origin-node;
 		text  := <construct-text(pp)> new-node; //TODO: comments new node?
@@ -100,8 +100,7 @@
 		indented-text := <
 			remove-indentation(|indent-value-old); 
 			prefix-lines(|new-indent);
-			trim-chars(?' ' <+ ?'\t'); //first line is not indented
-			ltrim-chars(?'\n') //do not remove line comment end
+			ltrim-chars(?' ' <+ ?'\t' <+ ?'\n') //first line is not indented
 		> text
 
 /**

From tobivollebregt at gmail.com  Wed Sep  7 10:57:29 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 07 Sep 2011 08:57:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23301 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20110907085729.853A22B803B@mx2.tudelft.nl>

Author: tvo
Date: Wed Sep  7 08:57:29 2011
New Revision: 23301
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23301&sc=1

Log:
simplify r23298 (thx Lennart)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Wed Sep  7 07:42:54 2011	(r23300)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Wed Sep  7 08:57:29 2011	(r23301)
@@ -110,10 +110,7 @@
 					//IStrategoTerm[] originPath = Arrays.copyOf(subtermPath.getAllSubterms(), subtermPath.getSubtermCount()-1);
 					IStrategoTerm[] allSubterms = subtermPath.getAllSubterms();
 					IStrategoTerm[] originPath = new IStrategoTerm[subtermPath.getSubtermCount()-1];
-					for (int i = 0; i < originPath.length; ++i) {
-						originPath[i] = allSubterms[i];
-					}
-
+					System.arraycopy(allSubterms, 0, originPath, 0, originPath.length);
 					TermFactory factory = new TermFactory();
 					return factory.makeList(originPath);
 				}

From L.C.L.Kats at tudelft.nl  Wed Sep  7 10:59:30 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Sep 2011 08:59:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23302 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.editors.sdf
Message-ID: <20110907085930.4870F108C008@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Sep  7 08:59:30 2011
New Revision: 23302
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23302&sc=1

Log:
added validator for sdf and esv plugins

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/plugin.xml	Wed Sep  7 08:57:29 2011	(r23301)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/plugin.xml	Wed Sep  7 08:59:30 2011	(r23302)
@@ -3,7 +3,9 @@
 
 <plugin>
        <extension point="org.eclipse.imp.runtime.languageDescription">
-          <language extensions="esv" description="EditorService" language="EditorService" derivedFrom="DynamicRoot"></language>
+          <language extensions="esv" description="EditorService" language="EditorService" derivedFrom="DynamicRoot"
+           validatorClass="org.strategoxt.imp.editors.editorservice.EditorServiceValidator"
+           validator="org.strategoxt.imp.editors.editorservice.EditorServiceValidator"></language>
        </extension>
        <extension id="org.strategoxt.imp.editors.editorservice.parser" name="EditorService Parser" point="org.eclipse.imp.runtime.parser">
           <parser class="org.strategoxt.imp.editors.editorservice.EditorServiceParseController" language="EditorService">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml	Wed Sep  7 08:57:29 2011	(r23301)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml	Wed Sep  7 08:59:30 2011	(r23302)
@@ -3,10 +3,12 @@
 
 <plugin>
        <extension point="org.eclipse.imp.runtime.languageDescription">
-          <language extensions="sdf,def" description="SDF" language="SDF" derivedFrom="DynamicRoot"></language>
+          <language extensions="sdf,def" description="SDF" language="SDF" derivedFrom="DynamicRoot"
+           validator="org.strategoxt.imp.editors.sdf.SDFValidator"
+           validatorClass="org.strategoxt.imp.editors.sdf.SDFValidator"></language>
        </extension>
        <extension id="org.strategoxt.imp.editors.sdf.parser" name="SDF Parser" point="org.eclipse.imp.runtime.parser">
           <parser class="org.strategoxt.imp.editors.sdf.SDFParseController" language="SDF">
           </parser>
        </extension>    
-    </plugin>
\ No newline at end of file
+    </plugin>

From L.C.L.Kats at tudelft.nl  Wed Sep  7 11:24:12 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Sep 2011 09:24:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23303 -
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <20110907092412.C28D52B8040@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Sep  7 09:24:11 2011
New Revision: 23303
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23303&sc=1

Log:
bah, wrong versions in feature.xml

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Sep  7 08:59:30 2011	(r23302)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Sep  7 09:24:11 2011	(r23303)
@@ -336,16 +336,17 @@
          download-size="0"
          install-size="0"
          version="1.0.0.qualifier"/>
-   	
+
    <plugin
          id="org.strategoxt.imp.editors.spoofax.configuration"
          download-size="0"
          install-size="0"
-         version="1.0.0.qualifier"/>
-         
-	  <plugin
+         version="1.0.0"/>
+
+   <plugin
          id="org.strategoxt.imp.spoofax.generator"
          download-size="0"
          install-size="0"
-         version="1.0.0.qualifier"/>
+         version="0.1.2.qualifier"/>
+
 </feature>

From L.C.L.Kats at tudelft.nl  Wed Sep  7 11:25:26 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Sep 2011 09:25:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23304 -
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <20110907092526.EFEE57F8062@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Sep  7 09:25:26 2011
New Revision: 23304
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23304&sc=1

Log:
explicitly set unpack flag as eclipse is prone to changing its mind otherwise

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Sep  7 09:24:11 2011	(r23303)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Sep  7 09:25:26 2011	(r23304)
@@ -347,6 +347,7 @@
          id="org.strategoxt.imp.spoofax.generator"
          download-size="0"
          install-size="0"
+         unpack="true"
          version="0.1.2.qualifier"/>
 
 </feature>

From L.C.L.Kats at tudelft.nl  Wed Sep  7 11:59:34 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Sep 2011 09:59:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23305 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans
Message-ID: <20110907095934.2E97CCC0B7@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Sep  7 09:59:33 2011
New Revision: 23305
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23305&sc=1

Log:
argh, imports be case sensitive

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/resolve.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/resolve.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/resolve.str	Wed Sep  7 09:25:26 2011	(r23304)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/resolve.str	Wed Sep  7 09:59:33 2011	(r23305)
@@ -2,7 +2,7 @@
 
 imports 
 	lib/editor-common.generated
-	include/spoofaxconfiguration 
+	include/SpoofaxConfiguration 
 	check
 
 rules

From L.C.L.Kats at tudelft.nl  Wed Sep  7 13:21:10 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Sep 2011 11:21:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23306 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers
Message-ID: <20110907112110.2B2B42B8036@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Sep  7 11:21:09 2011
New Revision: 23306
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23306&sc=1

Log:
bad import(?)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str	Wed Sep  7 09:59:33 2011	(r23305)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str	Wed Sep  7 11:21:09 2011	(r23306)
@@ -10,7 +10,6 @@
   libstratego-gpp
   //lib-reconstruction/stratego-parenthesize
   libstrc
-  include/Stratego-Sugar-parenthesize
 
 rules 
 

From seba at informatik.uni-marburg.de  Thu Sep  8 10:21:45 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 08 Sep 2011 08:21:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23307 - in
	sugarj/trunk: case-studies compiler
	compiler/org/sugarj/driver compiler/org/sugarj/driver/path
	editor editor/META-INF editor/editor/java/org/sugarj/builder edit...
Message-ID: <20110908082145.2EA26CC030@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Thu Sep  8 08:21:43 2011
New Revision: 23307
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23307&sc=1

Log:
explicit SugarJ builder; parser does not build anymore. Activate builder by replacing "org.eclipse.jdt.core.javabuilder" with "org.sugarj.editor.SugarJBuilder" in your project's .project file

Added:
   sugarj/trunk/compiler/org/sugarj/driver/path/RelativeSourceLocationPath.java
   sugarj/trunk/compiler/org/sugarj/driver/path/SourceLocation.java
   sugarj/trunk/editor/editor/java/org/sugarj/builder/
   sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
Modified:
   sugarj/trunk/case-studies/.project
   sugarj/trunk/compiler/.classpath
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/Environment.java
   sugarj/trunk/compiler/org/sugarj/driver/JavaCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/ModuleSystemCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/Result.java
   sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/path/AbsolutePath.java
   sugarj/trunk/compiler/org/sugarj/driver/path/Path.java
   sugarj/trunk/compiler/org/sugarj/driver/path/RelativePath.java
   sugarj/trunk/editor/META-INF/MANIFEST.MF
   sugarj/trunk/editor/build.generated.xml
   sugarj/trunk/editor/editor/java/org/sugarj/editor/PendingResult.java
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseController.java
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
   sugarj/trunk/editor/lib/editor-common.generated.str
   sugarj/trunk/editor/lib/refactor-common.generated.str
   sugarj/trunk/editor/plugin.xml
   sugarj/trunk/editor/trans/sugarj.str

Modified: sugarj/trunk/case-studies/.project
==============================================================================
--- sugarj/trunk/case-studies/.project	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/case-studies/.project	Thu Sep  8 08:21:43 2011	(r23307)
@@ -6,7 +6,7 @@
 	</projects>
 	<buildSpec>
 		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
+			<name>org.sugarj.editor.SugarJBuilder</name>
 			<arguments>
 			</arguments>
 		</buildCommand>

Modified: sugarj/trunk/compiler/.classpath
==============================================================================
--- sugarj/trunk/compiler/.classpath	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/.classpath	Thu Sep  8 08:21:43 2011	(r23307)
@@ -6,6 +6,6 @@
 	<classpathentry exported="true" kind="lib" path="make_permissive.jar"/>
 	<classpathentry exported="true" kind="lib" path="commons-cli-1.2.jar"/>
 	<classpathentry kind="lib" path="commons-collections-3.2.1.jar"/>
-	<classpathentry kind="lib" path="/Users/seba/Library/eclipse/plugins/org.strategoxt.imp.nativebundle_0.1.1.201105211714"/>
+	<classpathentry kind="lib" path="/Users/seba/Library/eclipse-sugarj/plugins/org.strategoxt.imp.nativebundle_0.1.1.201108031014"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -30,7 +30,6 @@
 import org.apache.commons.cli.GnuParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
-import org.apache.commons.collections.map.LRUMap;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.InvalidParseTableException;
@@ -52,6 +51,8 @@
 import org.sugarj.driver.path.AbsolutePath;
 import org.sugarj.driver.path.Path;
 import org.sugarj.driver.path.RelativePath;
+import org.sugarj.driver.path.RelativeSourceLocationPath;
+import org.sugarj.driver.path.SourceLocation;
 import org.sugarj.driver.transformations.extraction.extraction;
 import org.sugarj.stdlib.StdLib;
 
@@ -64,22 +65,23 @@
   
   private final static int PENDING_TIMEOUT = 120000;
 
-  private static LRUMap resultCache = new LRUMap(50);
+  private static Map<Path, Result> resultCache = new HashMap<Path, Result>(); // new LRUMap(50);
   private static Map<Path, Entry<String, Driver>> pendingRuns = new HashMap<Path, Map.Entry<String,Driver>>();
 
-  private static List<RelativePath> allInputFiles;
-  private static List<Path> pendingInputFiles;
-  private static List<Path> currentlyProcessing;
+  private static List<RelativeSourceLocationPath> allInputFiles = new ArrayList<RelativeSourceLocationPath>();
+  private static List<Path> pendingInputFiles = new ArrayList<Path>();
+  private static List<Path> currentlyProcessing = new ArrayList<Path>();
 
   private IProgressMonitor monitor;
   
   private Environment environment = new Environment();
   
-  private Result driverResult = new Result();
+  private Result driverResult;
   
   private Path javaOutFile;
+  private Path depOutFile;
   private String relPackageName;
-  private RelativePath sourceFile;
+  private RelativeSourceLocationPath sourceFile;
 
   private Path currentGrammarSDF;
   private String currentGrammarModule;
@@ -109,10 +111,15 @@
   private Context extractionContext;
   private Context strjContext;
   
+  private ModuleKeyCache<Path> sdfCache = null;
+  private ModuleKeyCache<Path> strCache = null;
+  
   private Path currentTransProg;
   
   private boolean interrupt = false;
   
+  private boolean generateFiles;
+  
   private List<Path> generatedJavaClasses = new ArrayList<Path>();
   
   public Driver(Environment env) {
@@ -120,18 +127,14 @@
     
     try {      
       if (environment.getCacheDir() != null)
-        FileCommands.createDir(new AbsolutePath(environment.getCacheDir()));
+        FileCommands.createDir(environment.getCacheDir());
       
-      FileCommands.createDir(new AbsolutePath(environment.getBin()));
+      FileCommands.createDir(environment.getBin());
       
       initializeCaches(environment);
     } catch (IOException e) {
       throw new RuntimeException("error while initializing driver", e);
     }
-    
-    allInputFiles = new ArrayList<RelativePath>();
-    pendingInputFiles = new ArrayList<Path>();
-    currentlyProcessing = new ArrayList<Path>();
   }  
   
   
@@ -174,7 +177,23 @@
     Log.log.log(resultCache.size());
   }
   
-  public static Result compile(RelativePath sourceFile, IProgressMonitor monitor, Environment environment) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
+  public static Result compile(RelativeSourceLocationPath sourceFile, IProgressMonitor monitor) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
+    return run(sourceFile, monitor, true);
+  }
+
+  public static Result parse(RelativeSourceLocationPath sourceFile, IProgressMonitor monitor) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
+    return run(sourceFile, monitor, false);
+  }
+  
+  public static Result compile(String source, RelativeSourceLocationPath sourceFile, IProgressMonitor monitor) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
+    return run(source, sourceFile, monitor, true);
+  }
+  
+  public static Result parse(String source, RelativeSourceLocationPath sourceFile, IProgressMonitor monitor) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
+    return run(source, sourceFile, monitor, false);
+  }
+
+  private static Result run(RelativeSourceLocationPath sourceFile, IProgressMonitor monitor, boolean generateFiles) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
     synchronized (currentlyProcessing) {
       // TODO we need better circular dependency handling
       if (currentlyProcessing.contains(sourceFile))
@@ -186,20 +205,19 @@
     
     try {
       String source = FileCommands.readFileAsString(sourceFile);
-      res = compile(source, sourceFile, monitor, environment);
+      res = run(source, sourceFile, monitor, generateFiles);
     } finally {
       synchronized (currentlyProcessing) {
         currentlyProcessing.remove(sourceFile);
       }
+      pendingInputFiles.remove(sourceFile);
     }
 
-    pendingInputFiles.remove(sourceFile);
-
     return res;
   }
   
-  public static Result compile(String source, RelativePath sourceFile, IProgressMonitor monitor, Environment environment) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
-    Driver driver = new Driver(environment);
+  private static Result run(String source, RelativeSourceLocationPath sourceFile, IProgressMonitor monitor, boolean generateFiles) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
+    Driver driver = new Driver(sourceFile.getSourceLocation().getEnvironment());
     Entry<String, Driver> pending = null;
     
     synchronized (Driver.class) {
@@ -211,7 +229,7 @@
 
       if (pending == null) {
         Result result = getResult(sourceFile);
-        if (result != null && result.isUpToDate(source.hashCode(), environment))
+        if (result != null && result.isUpToDate(source.hashCode(), sourceFile.getSourceLocation().getEnvironment()))
           return result;
       }
       
@@ -221,16 +239,17 @@
     
     if (pending != null) {
       waitForPending(sourceFile);
-      return compile(source, sourceFile, monitor, environment);
+      return run(source, sourceFile, monitor, generateFiles);
     }
     
     try {
-      driver.process(source, sourceFile, monitor);
+      driver.process(source, sourceFile, monitor, generateFiles);
       if (!Environment.rocache)
-        storeCaches(environment);
+        driver.storeCaches(sourceFile.getSourceLocation().getEnvironment());
     } finally {
         pendingRuns.remove(sourceFile);
-        putResult(sourceFile, driver.driverResult.getSugaredSyntaxTree() == null ? null : driver.driverResult);
+        if (generateFiles)
+          putResult(sourceFile, driver.driverResult.getSugaredSyntaxTree() == null ? null : driver.driverResult);
     }
     
     return driver.driverResult;
@@ -247,16 +266,17 @@
    * @throws TokenExpectedException 
    * @throws InterruptedException 
    */
-  private void process(String source, RelativePath sourceFile, IProgressMonitor monitor) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
+  private void process(String source, RelativePath sourceFile, IProgressMonitor monitor, boolean generateFiles) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
     this.monitor = monitor;
     log.beginTask("processing", "BEGIN PROCESSING " + sourceFile.getRelativePath());
     boolean success = false;
     try {
-      init(sourceFile);
-      driverResult.setSourceFile(sourceFile, source.hashCode());
+      init(sourceFile, generateFiles);
+      driverResult.setSourceFile(this.sourceFile, source.hashCode());
       
       if (sourceFile != null) {
         javaOutFile = environment.new RelativePathBin(FileCommands.dropExtension(sourceFile.getRelativePath()) + ".java");
+        depOutFile = environment.new RelativePathBin(FileCommands.dropExtension(sourceFile.getRelativePath()) + ".dep");
         Path genLog= environment.new RelativePathBin(FileCommands.dropExtension(sourceFile.getRelativePath()) + ".gen");
         driverResult.setGenerationLog(genLog);
         clearGeneratedStuff();
@@ -324,15 +344,13 @@
   }
 
   private void compileGeneratedJavaFile() throws IOException {
+    boolean good = false;
     log.beginTask("compilation", "COMPILE the generated java file");
     try {
-      List<String> path = new ArrayList<String>(environment.getIncludePath());
-      path.add(StdLib.stdLibDir.getPath());
-      path.add(environment.getBin());
-      
-      driverResult.compileJava(javaOutFile, new AbsolutePath(environment.getBin()), path, generatedJavaClasses);
+      driverResult.compileJava(javaOutFile, environment.getBin(), new ArrayList<Path>(environment.getIncludePath()), generatedJavaClasses);
+      good = true;
     } finally {
-      log.endTask();
+      log.endTask(good, "compilation succeeded", "compilation failed");
     }
   }
 
@@ -468,7 +486,6 @@
         editorServices = ATermCommands.registerSemanticProvider(editorServices, currentTransProg);
   
         Path editorServicesFile = environment.new RelativePathBin(relPackageNameSep() + extName + ".serv");
-        Path depFile = environment.new RelativePathBin(relPackageNameSep() + extName + ".dep");
         FileCommands.createFile(editorServicesFile);
   
         log.log("writing editor services to " + editorServicesFile);
@@ -484,7 +501,7 @@
         }
         
         driverResult.generateFile(editorServicesFile, buf.toString());
-        driverResult.writeDependencyFile(depFile);
+        driverResult.writeDependencyFile(depOutFile);
       } finally {
         log.endTask();
       }
@@ -545,12 +562,11 @@
         
         String ext = extension == null ? "" : ("." + extension);
         Path plainFile = environment.new RelativePathBin(relPackageNameSep() + extName + ext);
-        Path depFile = environment.new RelativePathBin(relPackageNameSep() + extName + ".dep");
         FileCommands.createFile(plainFile);
   
         log.log("writing plain content to " + plainFile);
         driverResult.generateFile(plainFile, plainContent);
-        driverResult.writeDependencyFile(depFile);
+        driverResult.writeDependencyFile(depOutFile);
       } finally {
         log.endTask();
       }
@@ -569,6 +585,8 @@
         checkPackageName(toplevelDecl);
       if (javaOutFile == null)
         javaOutFile = environment.new RelativePathBin(relPackageNameSep() + FileCommands.fileName(driverResult.getSourceFile()) + ".java");
+      if (depOutFile == null)
+        depOutFile = environment.new RelativePathBin(relPackageNameSep() + FileCommands.fileName(driverResult.getSourceFile()) + ".dep");
       try {
         if (isApplication(toplevelDecl, "TypeImportDec") || isApplication(toplevelDecl, "TypeImportOnDemandDec")) {
           if (!environment.isAtomicImportParsing())
@@ -620,7 +638,7 @@
   private IStrategoTerm currentParse(String remainingInput, boolean recovery) throws IOException,
       InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
     // recompile the current grammar definition
-    Path currentGrammarTBL = SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(environment), sdfParser, sdfContext, makePermissiveContext, environment);
+    Path currentGrammarTBL = SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(environment), sdfParser, sdfContext, makePermissiveContext, sdfCache, environment);
     FileCommands.deleteTempFiles(driverResult.getLastParseTable());
     driverResult.setLastParseTable(currentGrammarTBL);
     ParseTable table = org.strategoxt.imp.runtime.Environment.loadParseTable(currentGrammarTBL.getAbsolutePath());
@@ -655,7 +673,7 @@
         "DESUGAR the current toplevel declaration.");
     try {
       FileCommands.deleteTempFiles(currentTransProg);
-      currentTransProg = STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(environment), strParser, strjContext, environment);
+      currentTransProg = STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(environment), strParser, strjContext, strCache, environment);
 
       return STRCommands.assimilate(currentTransProg, term, interp);
     } catch (RuntimeException e) {
@@ -692,6 +710,9 @@
       
       if (javaOutFile == null)
         javaOutFile = environment.new RelativePathBin(relPackageNameSep() + FileCommands.fileName(driverResult.getSourceFile()) + ".java");
+      if (depOutFile == null)
+        depOutFile = environment.new RelativePathBin(relPackageNameSep() + FileCommands.fileName(driverResult.getSourceFile()) + ".dep");
+        
       driverResult.generateFile(javaOutFile, SDFCommands.prettyPrintJava(toplevelDecl, interp) + "\n");
     } finally {
       log.endTask();
@@ -770,7 +791,7 @@
       if (!modulePath.startsWith("org/sugarj")) {
         Path dep = ModuleSystemCommands.searchFile(modulePath, ".dep", environment);
         Result res = null;
-        RelativePath sourceFile = null;
+        RelativeSourceLocationPath sourceFile = null;
         
         if (dep != null) {
           try {
@@ -779,7 +800,7 @@
             log.logErr("could not read dependency file " + dep);
           }
           
-          if (res != null && res.getSourceFile() != null && res.getSourceFile().getBasePath().toString().equals(environment.getRoot()))
+          if (res != null && res.getSourceFile() != null && res.getSourceFile().getBasePath().equals(environment.getRoot()))
             sourceFile = res.getSourceFile();
         }
         
@@ -787,17 +808,21 @@
           sourceFile = ModuleSystemCommands.locateSourceFile(modulePath, environment.getSourcePath());
 
         if (sourceFile != null && (res == null || pendingInputFiles.contains(res.getSourceFile()) || !res.isUpToDate(res.getSourceFile(), environment))) {
-          log.log("Need to compile the imported module first ; processing it now.");
-          
-          try {
-            Result importResult = compile(sourceFile, monitor, environment);
-            if (importResult.hasFailed())
+          if (!generateFiles)
+            ATermCommands.setErrorMessage(toplevelDecl, "module outdated, compile first: " + importModule);
+          else {
+            log.log("Need to compile the imported module first ; processing it now.");
+            
+            try {
+              Result importResult = compile(sourceFile, monitor);
+              if (importResult.hasFailed())
+                ATermCommands.setErrorMessage(toplevelDecl, "problems while compiling " + importModule);
+            } catch (Exception e) {
               ATermCommands.setErrorMessage(toplevelDecl, "problems while compiling " + importModule);
-          } catch (Exception e) {
-            ATermCommands.setErrorMessage(toplevelDecl, "problems while compiling " + importModule);
+            }
+              
+            log.log("CONTINUE PROCESSING'" + sourceFile + "'.");
           }
-            
-          log.log("CONTINUE PROCESSING'" + sourceFile + "'.");
         }
         
         if (dep == null)
@@ -810,7 +835,7 @@
       boolean success = processImport(modulePath, toplevelDecl);
       
       if (!success)
-        ATermCommands.setErrorMessage(toplevelDecl, "module not found " + importModule);
+        ATermCommands.setErrorMessage(toplevelDecl, "module not found: " + importModule);
       
     } catch (Exception e) {
       throw new RuntimeException(e);
@@ -866,11 +891,10 @@
         String decName = Term.asJavaString(dec.getSubterm(0).getSubterm(1).getSubterm(0));
         
         Path clazz = environment.new RelativePathBin(relPackageNameSep() + decName + ".class");
-        Path dep = environment.new RelativePathBin(relPackageNameSep() + decName + ".dep");
         
         generatedJavaClasses.add(clazz);
         driverResult.appendToFile(javaOutFile, SDFCommands.prettyPrintJava(dec, interp) + "\n");
-        driverResult.writeDependencyFile(dep);
+        driverResult.writeDependencyFile(depOutFile);
       } finally {
         log.endTask();
       }
@@ -954,8 +978,7 @@
       
       Path sdfExtension = environment.new RelativePathBin(relPackageNameSep() + extName + ".sdf");
       Path strExtension = environment.new RelativePathBin(relPackageNameSep() + extName + ".str");
-      Path depFile = environment.new RelativePathBin(relPackageNameSep() + extName + ".dep");
-
+      
       FileCommands.delete(sdfExtension);
       FileCommands.delete(strExtension);
 
@@ -1033,7 +1056,7 @@
           log.log("Wrote Stratego file to '" + strExtension.getAbsolutePath() + "'.");
       }
       
-      driverResult.writeDependencyFile(depFile);
+      driverResult.writeDependencyFile(depOutFile);
 
       /*
        * adapt current grammar
@@ -1083,7 +1106,7 @@
     log.beginTask("checking grammar", "CHECK current grammar");
     
     try {
-      Path p = SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(environment), sdfParser, sdfContext, makePermissiveContext, environment);
+      Path p = SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(environment), sdfParser, sdfContext, makePermissiveContext, sdfCache, environment);
       FileCommands.deleteTempFiles(p);
     } finally {
       log.endTask();
@@ -1095,7 +1118,16 @@
     
     try {
       FileCommands.deleteTempFiles(currentTransProg);
-      currentTransProg = STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(environment), strParser, strjContext, environment);
+      currentTransProg = STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(environment), strParser, strjContext, strCache, environment);
+    } catch (RuntimeException e) {
+      String msg = e.getClass().getName() + " " + e.getLocalizedMessage() != null ? e.getLocalizedMessage() : e.toString();
+      
+      if (!(e instanceof StrategoException))
+        e.printStackTrace();
+      else
+        log.logErr(msg);
+
+      ATermCommands.setErrorMessage(lastSugaredToplevelDecl, msg);
     } finally {
       log.endTask();
     }
@@ -1117,11 +1149,15 @@
       driverResult.addEditorService(service);
   }
   
-  private void init(RelativePath sourceFile) throws FileNotFoundException, IOException, InvalidParseTableException {
-    javaOutFile = null; 
+  private void init(RelativePath sourceFile, boolean generateFiles) throws FileNotFoundException, IOException, InvalidParseTableException {
+    javaOutFile = null;
+    depOutFile = null;
     // FileCommands.createFile(tmpOutdir, relModulePath + ".java");
 
-    this.sourceFile = sourceFile;
+    this.sourceFile = new RelativeSourceLocationPath(new SourceLocation(sourceFile.getBasePath(), environment), sourceFile);
+    this.generateFiles = generateFiles;
+    
+    this.driverResult = new Result(generateFiles);
 
     currentGrammarSDF = new AbsolutePath(StdLib.initGrammar.getPath());
     currentGrammarModule = StdLib.initGrammarModule;
@@ -1165,11 +1201,11 @@
       String[] sources = handleOptions(args, environment);
 
       if (environment.getSourcePath().isEmpty())
-        environment.getSourcePath().add(".");
+        environment.getSourcePath().add(new SourceLocation(new AbsolutePath("."), environment));
       
       for (String source : sources)
       {
-        RelativePath p = ModuleSystemCommands.locateSourceFile(FileCommands.dropExtension(source), environment.getSourcePath());
+        RelativeSourceLocationPath p = ModuleSystemCommands.locateSourceFile(FileCommands.dropExtension(source), environment.getSourcePath());
         
         allInputFiles.add(p);
         pendingInputFiles.add(p);
@@ -1177,9 +1213,9 @@
       
       IProgressMonitor monitor = new PrintProgressMonitor(System.out);
       
-      for (final RelativePath sourceFile : allInputFiles) {
+      for (final RelativeSourceLocationPath sourceFile : allInputFiles) {
         monitor.beginTask("compile " + sourceFile, IProgressMonitor.UNKNOWN);
-        Result res = compile(sourceFile, monitor, environment);
+        Result res = compile(sourceFile, monitor);
         if (!DriverCLI.processResultCLI(res, sourceFile, new File(".").getAbsolutePath()))
           throw new RuntimeException("compilation of " + sourceFile + " failed");
       }
@@ -1275,17 +1311,17 @@
 
     if (line.hasOption("buildpath"))
       for (String path : line.getOptionValue("buildpath").split(Environment.classpathsep))
-        environment.getIncludePath().add(path);
+        environment.getIncludePath().add(new AbsolutePath(path));
 
     if (line.hasOption("sourcepath"))
       for (String path : line.getOptionValue("sourcepath").split(Environment.classpathsep))
-        environment.getSourcePath().add(path);
+        environment.getSourcePath().add(new SourceLocation(new AbsolutePath(path), environment));
  
     if (line.hasOption("d"))
-      environment.setBin(line.getOptionValue("d"));
+      environment.setBin(new AbsolutePath(line.getOptionValue("d")));
     
     if (line.hasOption("cache"))
-      environment.setCacheDir(line.getOptionValue("cache"));
+      environment.setCacheDir(new AbsolutePath(line.getOptionValue("cache")));
 
     if (line.hasOption("read-only-cache"))
       Environment.rocache = true;
@@ -1391,12 +1427,6 @@
     
     options.addOption(
         null,
-        "imports-changed",
-        false,
-        "Declare that the imported modules have changed since last compilation.");
-    
-    options.addOption(
-        null,
         "gen-java",
         false,
         "Generate the resulting Java file in the source folder.");
@@ -1417,7 +1447,7 @@
   }
 
   @SuppressWarnings("unchecked")
-  private static synchronized void initializeCaches(Environment environment) throws IOException {
+  private void initializeCaches(Environment environment) throws IOException {
     if (environment.getCacheDir() == null)
       return;
     
@@ -1426,42 +1456,48 @@
     if (!cacheVersion.getFile().exists() ||
         !FileCommands.readFileAsString(cacheVersion).equals(CACHE_VERSION)) {
 
-      for (File f : new File(environment.getCacheDir()).listFiles())
+      for (File f : environment.getCacheDir().getFile().listFiles())
         f.delete();
       
       FileCommands.writeToFile(cacheVersion, CACHE_VERSION);
     }
     
-    Path sdfCache = environment.new RelativePathCache("sdfCache");
-    Path strCache = environment.new RelativePathCache("strCache");
+    Path sdfCachePath = environment.new RelativePathCache("sdfCache");
+    Path strCachePath = environment.new RelativePathCache("strCache");
     
-    if (SDFCommands.sdfCache == null && sdfCache != null)
+    if (sdfCache == null)
       try {
-        log.log("load sdf cache from " + sdfCache);
-          SDFCommands.sdfCache = reallocate(
-              (ModuleKeyCache<Path>) new ObjectInputStream(new FileInputStream(sdfCache.getFile())).readObject(),
+        // log.log("load sdf cache from " + sdfCachePath);
+          sdfCache = reallocate(
+              (ModuleKeyCache<Path>) new ObjectInputStream(new FileInputStream(sdfCachePath.getFile())).readObject(),
               environment);
       } 
       catch (Exception e) {
-        SDFCommands.sdfCache = new ModuleKeyCache<Path>();
+        sdfCache = new ModuleKeyCache<Path>();
         e.printStackTrace();
+        for (File f : environment.getCacheDir().getFile().listFiles())
+          if (f.getPath().endsWith(".tbl"))
+            f.delete();
       }
-    else if (SDFCommands.sdfCache == null)
-      SDFCommands.sdfCache = new ModuleKeyCache<Path>();
+    else if (sdfCache == null)
+      sdfCache = new ModuleKeyCache<Path>();
     
-    if (STRCommands.strCache == null && strCache != null)
+    if (strCache == null)
       try {
-        log.log("load str cache from " + strCache);
-        STRCommands.strCache = reallocate(
-            (ModuleKeyCache<Path>) new ObjectInputStream(new FileInputStream(strCache.getFile())).readObject(),
+        // log.log("load str cache from " + strCachePath);
+        strCache = reallocate(
+            (ModuleKeyCache<Path>) new ObjectInputStream(new FileInputStream(strCachePath.getFile())).readObject(),
             environment);
       } 
       catch (Exception e) {
-        STRCommands.strCache = new ModuleKeyCache<Path>();
+        strCache = new ModuleKeyCache<Path>();
         e.printStackTrace();
+        for (File f : environment.getCacheDir().getFile().listFiles())
+          if (f.getPath().endsWith(".jar"))
+            f.delete();
       }
-    else if (STRCommands.strCache == null)
-      STRCommands.strCache = new ModuleKeyCache<Path>();
+    else if (strCache == null)
+      strCache = new ModuleKeyCache<Path>();
   }
 
   
@@ -1480,40 +1516,40 @@
   }
 
 
-  private static synchronized void storeCaches(Environment environment) throws IOException {
+  private void storeCaches(Environment environment) throws IOException {
     if (environment.getCacheDir() == null)
       return;
     
     Path cacheVersion = environment.new RelativePathCache("version");
     FileCommands.writeToFile(cacheVersion, CACHE_VERSION);
     
-    Path sdfCache = environment.new RelativePathCache("sdfCache");
-    Path strCache = environment.new RelativePathCache("strCache");
+    Path sdfCachePath = environment.new RelativePathCache("sdfCache");
+    Path strCachePath = environment.new RelativePathCache("strCache");
 
-    if (!sdfCache.getFile().exists())
-      FileCommands.createFile(sdfCache);
+    if (!sdfCachePath.getFile().exists())
+      FileCommands.createFile(sdfCachePath);
 
-    if (!strCache.getFile().exists())
-      FileCommands.createFile(strCache);
+    if (!strCachePath.getFile().exists())
+      FileCommands.createFile(strCachePath);
     
-    if (SDFCommands.sdfCache != null) {
-      log.log("store sdf cache in " + sdfCache);
-      log.log("sdf cache size: " + SDFCommands.sdfCache.size());
-      FileCommands.createFile(sdfCache);
-      ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(sdfCache.getFile()));
+    if (sdfCache != null) {
+//      log.log("store sdf cache in " + sdfCachePath);
+//      log.log("sdf cache size: " + sdfCache.size());
+      FileCommands.createFile(sdfCachePath);
+      ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(sdfCachePath.getFile()));
       try {
-        oos.writeObject(SDFCommands.sdfCache);
+        oos.writeObject(sdfCache);
       } finally {
         oos.close();
       }
     }
     
-    if (STRCommands.strCache != null) {
-      log.log("store str cache in " + strCache);
-      log.log("str cache size: " + STRCommands.strCache.size());
-      ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(strCache.getFile()));
+    if (strCache != null) {
+//      log.log("store str cache in " + strCachePath);
+//      log.log("str cache size: " + strCache.size());
+      ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(strCachePath.getFile()));
       try {
-        oos.writeObject(STRCommands.strCache);
+        oos.writeObject(strCache);
       } finally {
         oos.close();
       }

Modified: sugarj/trunk/compiler/org/sugarj/driver/Environment.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Environment.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/Environment.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -13,6 +13,7 @@
 import org.sugarj.driver.path.AbsolutePath;
 import org.sugarj.driver.path.Path;
 import org.sugarj.driver.path.RelativePath;
+import org.sugarj.driver.path.SourceLocation;
 import org.sugarj.stdlib.StdLib;
 
 
@@ -43,7 +44,7 @@
     
     @Override
     public Path getBasePath() {
-      return new AbsolutePath(bin);
+      return bin;
     }
   }
   
@@ -59,10 +60,11 @@
     
     @Override
     public Path getBasePath() {
-      return new AbsolutePath(cacheDir);
+      return cacheDir;
     }
   }
 
+  
   /*
    * read-only/write-only cache flags.
    */
@@ -71,13 +73,11 @@
   
   
   
-  private String cacheDir = null;
-  
-  private String root = ".";
+  private Path cacheDir = null;
   
-  private Set<String> sourcePath = new HashSet<String>();
+  private Path root = new AbsolutePath(".");
   
-  private String bin = ".";
+  private Path bin = new AbsolutePath(".");
   
   
   /* 
@@ -93,48 +93,48 @@
   private boolean generateJavaFile = false;
   
   
-  private String trans = "sugarj" + sep + "driver" + sep + "transformations";
-  private String tmpDir = System.getProperty("java.io.tmpdir");
+  private Path tmpDir = new AbsolutePath(System.getProperty("java.io.tmpdir"));
   
-  private Set<String> includePath = new HashSet<String>();
+  private Set<SourceLocation> sourcePath = new HashSet<SourceLocation>();
+  private Set<Path> includePath = new HashSet<Path>();
   
   public Environment() {
     includePath.add(bin);
-    includePath.add(StdLib.stdLibDir.getPath());
+    includePath.add(new AbsolutePath(StdLib.stdLibDir.getPath()));
   }
   
-  public String getRoot() {
+  public Path getRoot() {
     return root;
   }
 
-  public void setRoot(String root) {
+  public void setRoot(Path root) {
     this.root = root;
   }
 
-  public Set<String> getSourcePath() {
+  public Set<SourceLocation> getSourcePath() {
     return sourcePath;
   }
 
-  public void setSourcePath(Set<String> sourcePath) {
+  public void setSourcePath(Set<SourceLocation> sourcePath) {
     this.sourcePath = sourcePath;
   }
 
-  public String getBin() {
+  public Path getBin() {
     return bin;
   }
 
-  public void setBin(String bin) {
+  public void setBin(Path bin) {
     if (this.bin!=null)
       includePath.remove(this.bin);
     this.bin = bin;
     includePath.add(bin);
   }
 
-  public String getCacheDir() {
+  public Path getCacheDir() {
     return cacheDir;
   }
 
-  public void setCacheDir(String cacheDir) {
+  public void setCacheDir(Path cacheDir) {
     this.cacheDir = cacheDir;
   }
 
@@ -162,27 +162,19 @@
     this.generateJavaFile = generateJavaFile;
   }
 
-  public String getTrans() {
-    return trans;
-  }
-
-  public void setTrans(String trans) {
-    this.trans = trans;
-  }
-
-  public String getTmpDir() {
+  public Path getTmpDir() {
     return tmpDir;
   }
 
-  public void setTmpDir(String tmpDir) {
+  public void setTmpDir(Path tmpDir) {
     this.tmpDir = tmpDir;
   }
 
-  public Set<String> getIncludePath() {
+  public Set<Path> getIncludePath() {
     return includePath;
   }
 
-  public void setIncludePath(Set<String> includePath) {
+  public void setIncludePath(Set<Path> includePath) {
     this.includePath = includePath;
   }
 

Modified: sugarj/trunk/compiler/org/sugarj/driver/JavaCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/JavaCommands.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/JavaCommands.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -17,15 +17,15 @@
  */
 public class JavaCommands {
 
-  public static boolean javac(Path java, Path dir, Collection<String> cp) throws IOException {
-    return javac(java, dir, cp.toArray(new String[] {}));
+  public static boolean javac(Path java, Path dir, Collection<Path> cp) throws IOException {
+    return javac(java, dir, cp.toArray(new Path[cp.size()]));
   }
 
-  public static boolean javac(Path java, Path dir, String... cp) throws IOException {
+  public static boolean javac(Path java, Path dir, Path... cp) throws IOException {
     StringBuilder cpBuilder = new StringBuilder();
     
     for (int i = 0; i < cp.length; i++) {
-      cpBuilder.append(FileCommands.toWindowsPath(cp[i]));
+      cpBuilder.append(FileCommands.toWindowsPath(cp[i].getAbsolutePath()));
       
       if (i < cp.length - 1)
         cpBuilder.append(Environment.classpathsep);

Modified: sugarj/trunk/compiler/org/sugarj/driver/ModuleSystemCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/ModuleSystemCommands.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/ModuleSystemCommands.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -4,7 +4,6 @@
 import static org.sugarj.driver.Log.log;
 
 import java.io.BufferedReader;
-import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.net.MalformedURLException;
@@ -14,9 +13,10 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.HybridInterpreter;
-import org.sugarj.driver.path.AbsolutePath;
 import org.sugarj.driver.path.Path;
 import org.sugarj.driver.path.RelativePath;
+import org.sugarj.driver.path.RelativeSourceLocationPath;
+import org.sugarj.driver.path.SourceLocation;
 
 /**
  * @author Sebastian Erdweg <seba at informatik uni-marburg de>
@@ -113,14 +113,14 @@
     }
   }
   
-  public static RelativePath locateSourceFile(String modulePath, Set<String> sourcePath) {
+  public static RelativeSourceLocationPath locateSourceFile(String modulePath, Set<SourceLocation> sourcePath) {
     if (modulePath.startsWith("org/sugarj"))
       return null;
     
-    RelativePath result = searchFileInSearchPath(modulePath, ".sugj", sourcePath);
+    RelativeSourceLocationPath result = searchFileInSourceLocationPath(modulePath, ".sugj", sourcePath);
     
     if (result == null)
-      result = searchFileInSearchPath(modulePath, ".java", sourcePath);
+      result = searchFileInSourceLocationPath(modulePath, ".java", sourcePath);
     
     return result;
   }
@@ -165,19 +165,42 @@
     return null;
   }
   
-  private static RelativePath searchFileInSearchPath(String relativePath, String extension, Set<String> searchPath) {
-    for (String base : searchPath) {
-      RelativePath p = new RelativePath(new AbsolutePath(base), relativePath + extension);
-      if (p.getFile().exists())
+  private static RelativePath searchFileInSearchPath(String relativePath, String extension, Set<Path> searchPath) {
+    for (Path base : searchPath) {
+      RelativePath p = searchFile(base, relativePath, extension);
+      if (p != null)
         return p;
-      
-      try {
-        ClassLoader cl = new URLClassLoader(new URL[] {new File(base).toURI().toURL()}, null);
-        if (cl.getResource(relativePath + extension) != null)
-          return new RelativePath(new AbsolutePath(base), relativePath + extension);
-      } catch (MalformedURLException e) {
-        e.printStackTrace();
-      }
+    }
+    
+    return null;
+  }
+
+  private static RelativeSourceLocationPath searchFileInSourceLocationPath(String relativePath, String extension, Set<SourceLocation> searchPath) {
+    for (SourceLocation loc : searchPath) {
+      RelativePath p = searchFile(loc.getPath(), relativePath, extension);
+      if (p != null)
+        return new RelativeSourceLocationPath(loc, p);
+    }
+    
+    return null;
+  }
+
+  private static RelativePath searchFile(Path base, String relativePath, String extension) {
+    if (relativePath.startsWith(base.getAbsolutePath())) {
+      int sepOffset = relativePath.endsWith(Environment.sep) ? 0 : 1;
+      relativePath = relativePath.substring(base.getAbsolutePath().length() + sepOffset);
+    }
+    
+    RelativePath p = new RelativePath(base, relativePath + extension);
+    if (p.getFile().exists())
+      return p;
+    
+    try {
+      ClassLoader cl = new URLClassLoader(new URL[] {base.getFile().toURI().toURL()}, null);
+      if (cl.getResource(relativePath + extension) != null)
+        return new RelativePath(base, relativePath + extension);
+    } catch (MalformedURLException e) {
+      e.printStackTrace();
     }
     
     return null;

Modified: sugarj/trunk/compiler/org/sugarj/driver/Result.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Result.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/Result.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -17,26 +17,29 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.sugarj.driver.path.Path;
-import org.sugarj.driver.path.RelativePath;
+import org.sugarj.driver.path.RelativeSourceLocationPath;
 
 /**
  * @author Sebastian Erdweg <seba at informatik uni-marburg de>
  */
 public class Result {
+  
+  private final boolean generateFiles;
+  
   private Map<Path, Integer> dependencies = new HashMap<Path, Integer>();
   private Map<Path, Integer> generatedFileHashes = new HashMap<Path, Integer>();
   private Set<IStrategoTerm> editorServices = new HashSet<IStrategoTerm>();
   private Set<BadTokenException> collectedErrors = new HashSet<BadTokenException>();
   private IStrategoTerm sugaredSyntaxTree = null;
   private Path desugaringsFile;
-  private RelativePath sourceFile;
+  private RelativeSourceLocationPath sourceFile;
   private Integer sourceFileHash;
   private Set<Path> allDependentFiles = new HashSet<Path>();
   private boolean failed = false;
   private Path lastParseTable;
   private Path generationLog;
 
-  private final static Result OUTDATED_RESULT = new Result() {
+  private final static Result OUTDATED_RESULT = new Result(true) {
     @Override
     public boolean isUpToDate(Path file, Environment env) {
       return false;
@@ -48,6 +51,10 @@
     }
   };
   
+  public Result(boolean generateFiles) {
+    this.generateFiles = generateFiles;
+  }
+  
   void addDependency(Path depFile, Environment env) throws IOException {
     dependencies.put(depFile, FileCommands.fileHash(depFile));
     allDependentFiles.addAll(readDependencyFile(depFile, env).getFileDependencies(env));
@@ -72,11 +79,12 @@
   }
   
   void generateFile(Path file, String content) throws IOException {
-    FileCommands.writeToFile(file, content);
-    generatedFileHashes.put(file, FileCommands.fileHash(file));
-    allDependentFiles.add(file);
-    
-    logGeneration(file);
+    if (generateFiles) {
+      FileCommands.writeToFile(file, content);
+      generatedFileHashes.put(file, FileCommands.fileHash(file));
+      allDependentFiles.add(file);
+      logGeneration(file);
+    }
   }
   
   private void logGeneration(Object o) throws IOException {
@@ -92,8 +100,10 @@
   }
   
   void appendToFile(Path file, String content) throws IOException {
-    FileCommands.appendToFile(file, content);
-    generatedFileHashes.put(file, FileCommands.fileHash(file));
+    if (generateFiles) {
+      FileCommands.appendToFile(file, content);
+      generatedFileHashes.put(file, FileCommands.fileHash(file));
+    }
   }
   
   void addEditorService(IStrategoTerm service) {
@@ -104,11 +114,15 @@
     return editorServices;
   }
   
+  public boolean isUpToDateShallow(Path inputFile, Environment env) throws IOException {
+    return isUpToDateShallow(FileCommands.fileHash(inputFile), env);
+  }
+  
   public boolean isUpToDate(Path inputFile, Environment env) throws IOException {
     return isUpToDate(FileCommands.fileHash(inputFile), env);
   }
-  
-  public boolean isUpToDate(int inputHash, Environment env) throws IOException {
+
+  public boolean isUpToDateShallow(int inputHash, Environment env) throws IOException {
     if (sourceFileHash == null || inputHash != sourceFileHash)
       return false;
     
@@ -119,7 +133,16 @@
     for (Entry<Path, Integer> entry : dependencies.entrySet()) {
       if (FileCommands.fileHash(entry.getKey()) != entry.getValue())
         return false;
-      
+    }
+
+    return true;
+  }
+
+  public boolean isUpToDate(int inputHash, Environment env) throws IOException {
+    if (!isUpToDateShallow(inputHash, env))
+      return false;
+
+    for (Entry<Path, Integer> entry : dependencies.entrySet()) {
       Result r = Result.readDependencyFile(entry.getKey(), env);
       if (r == null || !r.isUpToDate(r.getSourceFile(), env))
         return false;
@@ -144,10 +167,12 @@
     return sugaredSyntaxTree;
   }
 
-  void compileJava(Path javaOutFile, Path bin, List<String> path, List<Path> generatedJavaClasses) throws IOException {
-    JavaCommands.javac(javaOutFile, bin, path);
-    for (Path cl : generatedJavaClasses)
-      generatedFileHashes.put(cl, FileCommands.fileHash(cl));
+  void compileJava(Path javaOutFile, Path bin, List<Path> path, List<Path> generatedJavaClasses) throws IOException {
+    if (generateFiles) {
+      JavaCommands.javac(javaOutFile, bin, path);
+      for (Path cl : generatedJavaClasses)
+        generatedFileHashes.put(cl, FileCommands.fileHash(cl));
+    }
   }
   
   void registerEditorDesugarings(Path jarfile) throws IOException {
@@ -160,6 +185,9 @@
   }
   
   void writeDependencyFile(Path dep) throws IOException {
+    if (!generateFiles)
+      return;
+    
     logGeneration(dep);
 
     ObjectOutputStream oos = null;
@@ -189,14 +217,14 @@
   }
   
   static Result readDependencyFile(Path dep, Environment env) throws IOException {
-    Result result = new Result();
+    Result result = new Result(true);
     result.allDependentFiles = null;
     ObjectInputStream ois = null;
     
     try {
       ois = new ObjectInputStream(new FileInputStream(dep.getFile()));
       
-      result.sourceFile = (RelativePath) Path.readPath(ois, env);
+      result.sourceFile = (RelativeSourceLocationPath) Path.readPath(ois, env);
       result.sourceFileHash = ois.readInt();
       
       boolean reallocate = result.sourceFile.getBasePath().toString().equals(env.getRoot());
@@ -229,12 +257,12 @@
     return result;
   }
   
-  void setSourceFile(RelativePath sourceFile, int sourceFileHash) {
+  void setSourceFile(RelativeSourceLocationPath sourceFile, int sourceFileHash) {
     this.sourceFile = sourceFile;
     this.sourceFileHash = sourceFileHash;
   }
 
-  public RelativePath getSourceFile() {
+  public RelativeSourceLocationPath getSourceFile() {
     return sourceFile;
   }
   

Modified: sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -3,7 +3,6 @@
 import static org.sugarj.driver.FileCommands.toCygwinPath;
 import static org.sugarj.driver.Log.log;
 
-import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -66,9 +65,7 @@
     }
   }
   
-  public static ModuleKeyCache<Path> sdfCache = null;
-  
-  private static void packSdf(Path sdf, Path def, Context sdfContext, Collection<String> paths) throws IOException {
+  private static void packSdf(Path sdf, Path def, Context sdfContext, Collection<Path> paths) throws IOException {
     
     /*
      * We can include as many paths as we want here, checking the
@@ -87,10 +84,10 @@
       "-I", StdLib.stdLibDir.getPath(),
     }));
     
-    for (String path : paths) 
-      if (new File(path).isDirectory()){
+    for (Path path : paths) 
+      if (path.getFile().isDirectory()){
         cmd.add("-I");
-        cmd.add(path);
+        cmd.add(path.getAbsolutePath());
       }
     
     try {
@@ -144,7 +141,7 @@
     FileCommands.deleteTempFiles(tbl);
   }
   
-  public static void check(Path sdf, String module, Context sdfContext, Collection<String> paths) throws IOException {
+  public static void check(Path sdf, String module, Context sdfContext, Collection<Path> paths) throws IOException {
     Path def = FileCommands.newTempFile("def");
     packSdf(sdf, def, sdfContext, paths);
     normalizeTable(def, module);
@@ -160,13 +157,13 @@
    * @throws BadTokenException 
    * @throws TokenExpectedException 
    */
-  public static Path compile(Path sdf, String module, Collection<Path> dependentFiles, JSGLRI sdfParser, Context sdfContext, Context makePermissiveContext, Environment environment) throws IOException,
+  public static Path compile(Path sdf, String module, Collection<Path> dependentFiles, JSGLRI sdfParser, Context sdfContext, Context makePermissiveContext, ModuleKeyCache<Path> sdfCache, Environment environment) throws IOException,
       InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
     ModuleKey key = getModuleKeyForGrammar(sdf, module, dependentFiles, sdfParser);
-    Path tbl = lookupGrammarInCache(key);
+    Path tbl = lookupGrammarInCache(sdfCache, key);
     if (tbl == null) {
       tbl = generateParseTable(key, sdf, module, sdfContext, makePermissiveContext, environment.getIncludePath());
-      cacheParseTable(key, tbl, environment);
+      cacheParseTable(sdfCache, key, tbl, environment);
     }
     
     if (tbl != null)
@@ -176,7 +173,7 @@
   }
   
   
-  private static void cacheParseTable(ModuleKey key, Path tbl, Environment environment) throws IOException {
+  private static void cacheParseTable(ModuleKeyCache<Path> sdfCache, ModuleKey key, Path tbl, Environment environment) throws IOException {
     if (sdfCache == null)
       return;
     
@@ -197,7 +194,7 @@
     }
   }
 
-  private static Path lookupGrammarInCache(ModuleKey key) {
+  private static Path lookupGrammarInCache(ModuleKeyCache<Path> sdfCache, ModuleKey key) {
     if (sdfCache == null)
       return null;
     
@@ -247,7 +244,7 @@
                                          String module,
                                          Context sdfContext,
                                          Context makePermissiveContext,
-                                         Collection<String> paths)
+                                         Collection<Path> paths)
       throws IOException, InvalidParseTableException {
     log.beginTask("Generating", "Generate the parse table");
     try {

Modified: sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -4,7 +4,6 @@
 import static org.sugarj.driver.Log.log;
 
 import java.io.BufferedInputStream;
-import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -42,14 +41,12 @@
 public class STRCommands {
   
   
-  public static ModuleKeyCache<Path> strCache = null;
-  
   private final static Pattern STR_FILE_PATTERN = Pattern.compile(".*\\.str");
 
   /**
    *  Compiles a {@code *.str} file to a single {@code *.java} file. 
    */
-  private static void strj(Path str, Path java, String main, Context strjContext, Collection<String> paths) throws IOException {
+  private static void strj(Path str, Path java, String main, Context strjContext, Collection<Path> paths) throws IOException {
     
     /*
      * We can include as many paths as we want here, checking the
@@ -67,10 +64,10 @@
         "-O", "0"
     }));
     
-    for (String path : paths)
-      if (new File(path).isDirectory()){
+    for (Path path : paths)
+      if (path.getFile().isDirectory()){
         cmd.add("-I");
-        cmd.add(path);
+        cmd.add(path.getAbsolutePath());
       }
     
     try {
@@ -82,20 +79,16 @@
       if (e.getValue() != 0)
         throw new RuntimeException("STRJ failed", e);
     }
-        
-//    CommandExecution.executeWithPrefix("strategoxt.jar",
-        
-        
   }
   
   
-  public static Path compile(Path str, String main, Collection<Path> dependentFiles, JSGLRI strParser, Context strjContext, Environment environment) throws IOException, InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
+  public static Path compile(Path str, String main, Collection<Path> dependentFiles, JSGLRI strParser, Context strjContext, ModuleKeyCache<Path> strCache, Environment environment) throws IOException, InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
     ModuleKey key = getModuleKeyForAssimilation(str, main, dependentFiles, strParser);
-    Path prog = lookupAssimilationInCache(key);
+    Path prog = lookupAssimilationInCache(strCache, key);
     
     if (prog == null) {
       prog = generateAssimilator(key, str, main, strjContext, environment.getIncludePath());
-      cacheAssimilator(key, prog, environment);
+      cacheAssimilator(strCache, key, prog, environment);
     }
     return prog;
   }
@@ -104,7 +97,7 @@
                                           Path str,
                                           String main,
                                           Context strjContext,
-                                          Collection<String> paths) throws IOException {
+                                          Collection<Path> paths) throws IOException {
     log.beginTask("Generating", "Generate the assimilator");
     try {
       Path dir = FileCommands.newTempDir();
@@ -128,7 +121,7 @@
     }
   }
     
-  private static void cacheAssimilator(ModuleKey key, Path prog, Environment environment) throws IOException {
+  private static void cacheAssimilator(ModuleKeyCache<Path> strCache, ModuleKey key, Path prog, Environment environment) throws IOException {
     if (strCache == null)
       return;
     
@@ -150,7 +143,7 @@
     }
   }
   
-  private static Path lookupAssimilationInCache(ModuleKey key) {
+  private static Path lookupAssimilationInCache(ModuleKeyCache<Path> strCache, ModuleKey key) {
     if (strCache == null)
       return null;
     
@@ -202,13 +195,16 @@
   public static IStrategoTerm assimilate(String strategy, Path jarfile, IStrategoTerm in, HybridInterpreter interp) throws IOException {
     try {
       // XXX try release loaded classes by creating a completely new interpreter
-      HybridInterpreter newInterp = new HybridInterpreter(interp.getFactory());
+      HybridInterpreter newInterp = new HybridInterpreter(interp.getFactory(), interp.getProgramFactory());
       newInterp.loadJars(jarfile.getFile().toURI().toURL());
       newInterp.setCurrent(in);
       
       if (newInterp.invoke(strategy)) {
         IStrategoTerm term = newInterp.current();
         
+        // XXX does this improve memory consumption?
+        newInterp.reset();
+        
         IToken left = ImploderAttachment.getLeftToken(in);
         IToken right = ImploderAttachment.getRightToken(in);
         String sort = ImploderAttachment.getSort(in);

Modified: sugarj/trunk/compiler/org/sugarj/driver/path/AbsolutePath.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/path/AbsolutePath.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/path/AbsolutePath.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -1,6 +1,5 @@
 package org.sugarj.driver.path;
 
-import org.sugarj.driver.Environment;
 
 /**
  * @author Sebastian Erdweg <seba at informatik uni-marburg de>
@@ -11,10 +10,7 @@
   private String path;
   
   public AbsolutePath(String path) {
-    while (path.endsWith(Environment.sep))
-      path = path.substring(0, path.length() - 1);
-    
-    this.path = path;
+    this.path = trimBack(path);
   }
   
   @Override

Modified: sugarj/trunk/compiler/org/sugarj/driver/path/Path.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/path/Path.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/path/Path.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -32,6 +32,19 @@
   public boolean equals(Object o) {
     return o instanceof Path && ((Path) o).getAbsolutePath().equals(getAbsolutePath());
   }
+
+  protected String trimFront(String path) {
+    while (path.startsWith(Environment.sep))
+      path = path.substring(1, path.length());
+    return path;
+  }
+  
+  protected String trimBack(String path) {
+    while (path.endsWith(Environment.sep))
+      path = path.substring(0, path.length() - 1);
+    return path;
+  }
+
   
 //  /**
 //   * @throws IllegalArgumentException if this is not a descendant of p

Modified: sugarj/trunk/compiler/org/sugarj/driver/path/RelativePath.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/path/RelativePath.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/compiler/org/sugarj/driver/path/RelativePath.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -12,12 +12,15 @@
   private Path base;
     
   public RelativePath(String relativePath) {
-    this.relativePath = relativePath;
+    this(null, relativePath);
   }
   
   public RelativePath(Path base, String relativePath) {
-    this.relativePath = relativePath;
+    this.relativePath = trimFront(trimBack(relativePath));
     this.base = base;
+    
+    if (relativePath == null || relativePath.isEmpty())
+      throw new IllegalArgumentException();
   }
   
   public String getRelativePath() {

Added: sugarj/trunk/compiler/org/sugarj/driver/path/RelativeSourceLocationPath.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/org/sugarj/driver/path/RelativeSourceLocationPath.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -0,0 +1,26 @@
+package org.sugarj.driver.path;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class RelativeSourceLocationPath extends RelativePath {
+  private static final long serialVersionUID = -7966865805323269655L;
+
+  private SourceLocation sourceLocation;
+  
+  public RelativeSourceLocationPath(SourceLocation loc, String relativePath) {
+    super(loc.getPath(), relativePath);
+    this.sourceLocation = loc;
+  }
+  
+  public RelativeSourceLocationPath(SourceLocation loc, RelativePath p) {
+    super(loc.getPath(), p.getRelativePath());
+    if (!loc.getPath().equals(p.getBasePath()))
+      throw new IllegalArgumentException("Given path is not part of the given source location");
+    this.sourceLocation = loc;
+  }
+  
+  public SourceLocation getSourceLocation() {
+    return sourceLocation;
+  }
+}

Added: sugarj/trunk/compiler/org/sugarj/driver/path/SourceLocation.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/org/sugarj/driver/path/SourceLocation.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -0,0 +1,28 @@
+package org.sugarj.driver.path;
+
+import java.io.Serializable;
+
+import org.sugarj.driver.Environment;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class SourceLocation implements Serializable {
+  private static final long serialVersionUID = -7115409347263943546L;
+
+  private Path path;
+  private Environment env;
+
+  public SourceLocation(Path path, Environment env) {
+    this.path = path;
+    this.env = env;
+  }
+
+  public Path getPath() {
+    return path;
+  }
+
+  public Environment getEnvironment() {
+    return env;
+  }
+}

Modified: sugarj/trunk/editor/META-INF/MANIFEST.MF
==============================================================================
--- sugarj/trunk/editor/META-INF/MANIFEST.MF	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/editor/META-INF/MANIFEST.MF	Thu Sep  8 08:21:43 2011	(r23307)
@@ -4,7 +4,8 @@
 Bundle-SymbolicName: org.sugarj.editor;singleton:=true
 Bundle-Version: 1.0.0.qualifier
 Bundle-Activator: org.sugarj.editor.Activator
-Export-Package: org.sugarj.editor;
+Export-Package: org.sugarj.builder,
+ org.sugarj.editor;
   uses:="org.eclipse.imp.preferences,
    org.eclipse.imp.parser,
    org.eclipse.imp.runtime,

Modified: sugarj/trunk/editor/build.generated.xml
==============================================================================
--- sugarj/trunk/editor/build.generated.xml	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/editor/build.generated.xml	Thu Sep  8 08:21:43 2011	(r23307)
@@ -4,10 +4,10 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
-        <available file="${build}/org/sugarj/editor/strategies/Main.class" property="java.jar.enabled"/>
+        <available file="${src-gen}/org/sugarj/editor/strategies/Main.java" property="java.jar.enabled"/>
         <condition property="java.jar.import" value="-la org.sugarj.editor.strategies" else="">
             <isset property="java.jar.enabled"/>
         </condition>
@@ -16,12 +16,15 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
-        <condition property="externaljarimport" value=":${externaljar}" else="">
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
         <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
             <isset property="eclipse.running"/>
         </condition>
@@ -43,7 +46,7 @@
         <mkdir dir="${lib}"/>
         <mkdir dir="${syntax}"/>
 
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
             <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
@@ -247,6 +250,37 @@
             </java>
         </target>
         
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+        
         <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
@@ -349,7 +383,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -367,7 +401,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -378,7 +412,7 @@
                 <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
                 <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
             </antcall>
-            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <!-- copy imported terms -->
             <copy todir="${build}/trans">
                 <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
@@ -416,6 +450,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- value determines which target will be executed.
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Added: sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -0,0 +1,144 @@
+package org.sugarj.builder;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.IResourceDelta;
+import org.eclipse.core.resources.IResourceVisitor;
+import org.eclipse.core.resources.IncrementalProjectBuilder;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.jdt.core.JavaCore;
+import org.strategoxt.strc.strc;
+import org.sugarj.driver.CommandExecution;
+import org.sugarj.driver.Driver;
+import org.sugarj.driver.Environment;
+import org.sugarj.driver.FileCommands;
+import org.sugarj.driver.Log;
+import org.sugarj.driver.ModuleSystemCommands;
+import org.sugarj.driver.path.AbsolutePath;
+import org.sugarj.driver.path.Path;
+import org.sugarj.driver.path.RelativePath;
+import org.sugarj.driver.path.RelativeSourceLocationPath;
+import org.sugarj.editor.SugarJConsole;
+import org.sugarj.editor.SugarJParseController;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class Builder extends IncrementalProjectBuilder {
+
+  protected IProject[] build(int kind, @SuppressWarnings("rawtypes") Map args,
+      IProgressMonitor monitor) {
+    if (kind == IncrementalProjectBuilder.FULL_BUILD) {
+      fullBuild(monitor);
+    } else {
+      IResourceDelta delta = getDelta(getProject());
+      if (delta == null) {
+        fullBuild(monitor);
+      } else {
+        incrementalBuild(delta, monitor);
+      }
+    }
+    return null;
+  }
+  
+  protected void clean(IProgressMonitor monitor) throws CoreException {
+    File f = getProject().getLocation().append(JavaCore.create(getProject()).getOutputLocation().makeRelativeTo(getProject().getFullPath())).toFile();
+    try {
+      FileCommands.delete(new AbsolutePath(f.getPath()));
+    } catch (IOException e) {
+    }
+  }
+
+  private void incrementalBuild(IResourceDelta delta, IProgressMonitor monitor) {
+    fullBuild(monitor);
+    // System.out.println("incremental build on " + delta);
+    // try {
+    // delta.accept(new IResourceDeltaVisitor() {
+    // public boolean visit(IResourceDelta delta) {
+    // System.out.println("changed: " + delta.getResource().getRawLocation());
+    // return true; // visit children too
+    // }
+    // });
+    // } catch (CoreException e) {
+    // e.printStackTrace();
+    // }
+  }
+
+  private void fullBuild(IProgressMonitor monitor) {
+    final List<RelativeSourceLocationPath> resources = new LinkedList<RelativeSourceLocationPath>();
+    try {
+      getProject().accept(new IResourceVisitor() {
+        Environment environment = SugarJParseController.makeProjectEnvironment(JavaCore.create(getProject()));
+        
+        @Override
+        public boolean visit(IResource resource) throws CoreException {
+          Path root = new AbsolutePath(getProject().getLocation().makeAbsolute().toString());
+          Environment environment = this.environment;
+          IPath relPath = resource.getFullPath().makeRelativeTo(getProject().getFullPath());
+          if (!relPath.isEmpty() &&
+              (environment.getBin().equals(new RelativePath(root, relPath.toString())) ||
+               environment.getIncludePath().contains(new RelativePath(root, relPath.toString()))))
+            return false;
+          
+          if ("sugj".equals(resource.getFileExtension())) {
+            IPath path = resource.getFullPath().makeRelativeTo(getProject().getFullPath());
+            final RelativeSourceLocationPath sourceFile = ModuleSystemCommands.locateSourceFile(
+                    FileCommands.dropExtension(path.toString()),
+                    environment.getSourcePath());
+            resources.add(sourceFile);
+          }
+          return true;
+        }
+      });
+    } catch (CoreException e) {
+      e.printStackTrace();
+    }
+
+    build(monitor, resources, "project " + getProject().getName());
+  }
+
+  private void build(IProgressMonitor monitor, final List<RelativeSourceLocationPath> resources, String what) {
+    CommandExecution.SILENT_EXECUTION = false;
+    CommandExecution.SUB_SILENT_EXECUTION = false;
+    CommandExecution.FULL_COMMAND_LINE = true;
+
+    Log.out = SugarJConsole.getOutputPrintStream();
+    Log.err = SugarJConsole.getErrorPrintStream();
+    SugarJConsole.activateConsoleOnce();
+
+    Job buildJob = new Job("Build " + what) {
+      @Override
+      protected IStatus run(IProgressMonitor monitor) {
+        for (RelativeSourceLocationPath sourceFile : resources)
+          try {
+            monitor.beginTask("compile " + sourceFile.getRelativePath(),
+                IProgressMonitor.UNKNOWN);
+            Driver.compile(sourceFile, monitor);
+          } catch (InterruptedException e) {
+            monitor.setCanceled(true);
+            monitor.done();
+            return Status.CANCEL_STATUS;
+          } catch (Exception e) {
+            e.printStackTrace();
+            throw new RuntimeException("compilation of "
+                + FileCommands.fileName(sourceFile) + " failed", e);
+          } finally {
+            monitor.done();
+          }
+          return Status.OK_STATUS;
+      }
+    };
+    buildJob.schedule();
+  }
+}

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/PendingResult.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/PendingResult.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/PendingResult.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -3,6 +3,7 @@
  */
 package org.sugarj.editor;
 
+import org.sugarj.driver.Environment;
 import org.sugarj.driver.Result;
 
 /**
@@ -10,15 +11,20 @@
  */
 public class PendingResult extends Result {
   private Result result;
-  
+
   public PendingResult(Result result) {
+    super(true);
     this.result = result;
   }
-  
+
   public Result getResult() {
     return result;
   }
-  
+
+  public boolean isUpToDateShallow(int h, Environment env) {
+    return false;
+  }
+
   public boolean isUpToDate(int hash) {
     return false;
   }

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseController.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseController.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseController.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -1,8 +1,5 @@
 package org.sugarj.editor;
 
-import java.io.File;
-import java.util.ArrayList;
-
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.imp.model.ISourceProject;
 import org.eclipse.imp.parser.IMessageHandler;
@@ -11,22 +8,23 @@
 import org.eclipse.jdt.core.IPackageFragmentRoot;
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.JavaModelException;
-import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.eclipse.ant.StrategoJarAntPropertyProvider;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
+import org.sugarj.driver.Environment;
+import org.sugarj.driver.path.AbsolutePath;
+import org.sugarj.driver.path.Path;
+import org.sugarj.driver.path.RelativePath;
+import org.sugarj.driver.path.SourceLocation;
 
 public class SugarJParseController extends SugarJParseControllerGenerated {
   
   private static Descriptor descriptor;
 
   private SugarJParser sugarjParser;
-  private String projectPath;
-
-  private String outputPath;
-  private ArrayList<String> includePath;
-  private ArrayList<String> sourcePath;
+  private Environment environment;
   
   @Override
   public IParseController getWrapped() {
@@ -37,10 +35,7 @@
       if (!(parser instanceof SugarJParser)) {
         sugarjParser = new SugarJParser(parser);
 
-        sugarjParser.setProjectPath(projectPath);
-        sugarjParser.setOutputPath(outputPath);
-        sugarjParser.setIncludePath(includePath);
-        sugarjParser.setSourcePath(sourcePath);
+        sugarjParser.setEnvironment(environment);
         
         ((SGLRParseController) result).setParser(sugarjParser);
       }
@@ -56,11 +51,11 @@
         descriptor.setAttachmentProvider(SugarJParseControllerGenerated.class);
         setDescriptor(descriptor);
         // TODO: Optimize - generated parse controller also registers and reinitializes the descriptor...
-        Environment.registerDescriptor(descriptor.getLanguage(), descriptor);
+        org.strategoxt.imp.runtime.Environment.registerDescriptor(descriptor.getLanguage(), descriptor);
       }
       return descriptor;
     } catch (BadDescriptorException e) {
-      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", e);
+      org.strategoxt.imp.runtime.Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", e);
       throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", e);
     }
   }
@@ -71,43 +66,67 @@
     super.initialize(filePath, project, handler);
     
     if (project != null) {
-      projectPath = project.getRawProject().getLocation().makeAbsolute().toString();
       IJavaProject javaProject = JavaCore.create(project.getRawProject());
       if (javaProject != null)
-        try { 
-          
-          outputPath = projectPath + File.separator + javaProject.getOutputLocation().makeRelativeTo(project.getRawProject().getFullPath()).toString();
-          
-          sourcePath = new ArrayList<String>();
-          includePath = new ArrayList<String>();
-          for (IPackageFragmentRoot root : javaProject.getAllPackageFragmentRoots()) {
-            IPath path = root.getPath();
-            boolean externalPath = root.getResource() == null;
-            String p = externalPath ? path.toString() : projectPath + "/" + path.makeRelativeTo(project.getRawProject().getFullPath());
-            if (root.getKind() == IPackageFragmentRoot.K_SOURCE && project.getRawProject().getFullPath().isPrefixOf(path))
-              sourcePath.add(p);
-            else if (root.getKind() == IPackageFragmentRoot.K_BINARY)
-              includePath.add(p);
-          }
-          
-          for (String reqProject : javaProject.getRequiredProjectNames()) {
-            IJavaProject reqJavaProject = JavaCore.create(project.getRawProject().getWorkspace().getRoot().getProject(reqProject));
-            IPath reqProjectPath = reqJavaProject.getProject().getLocation().makeAbsolute();
-            if (reqJavaProject != null)
-              includePath.add(reqProjectPath + "/" + reqJavaProject.getOutputLocation().makeRelativeTo(reqJavaProject.getProject().getFullPath()).toPortableString());
-          }
-        } catch (JavaModelException e) { 
-          outputPath = null; 
+        try {
+          environment = makeProjectEnvironment(javaProject);
+        } catch (JavaModelException e) {
+          environment = null;
+          throw new RuntimeException(e);
         }
-      else
-        outputPath = null;
     }
     
-    if (sugarjParser != null) {
-      sugarjParser.setProjectPath(projectPath);
-      sugarjParser.setOutputPath(outputPath);
-      sugarjParser.setIncludePath(includePath);
-      sugarjParser.setSourcePath(sourcePath);
+    if (sugarjParser != null)
+      sugarjParser.setEnvironment(environment);
+  }
+  
+  public static Environment makeProjectEnvironment(IJavaProject project) throws JavaModelException {
+    Environment env = new Environment();
+    
+    IPath fullPath = project.getProject().getFullPath();
+    Path root = new AbsolutePath(project.getProject().getLocation().makeAbsolute().toString());
+    Path bin = new RelativePath(root, project.getOutputLocation().makeRelativeTo(fullPath).toString());
+    env.setRoot(root);
+    env.setBin(bin);
+    
+    for (IPackageFragmentRoot fragment : project.getAllPackageFragmentRoots()) {
+      IPath path = fragment.getPath();
+      boolean externalPath = fragment.getResource() == null;
+      String p = externalPath ? path.toString() : path.makeRelativeTo(fullPath).toString();
+      if (fragment.getKind() == IPackageFragmentRoot.K_SOURCE && fullPath.isPrefixOf(path)) {
+        Path relPath = p.isEmpty() ? root : new RelativePath(root, p);
+        env.getSourcePath().add(new SourceLocation(relPath, env));
+      }
+      else if (fragment.getKind() == IPackageFragmentRoot.K_BINARY)
+        env.getIncludePath().add(new AbsolutePath(p));
+    }
+    
+    for (String reqProject : project.getRequiredProjectNames()) {
+      IJavaProject reqJavaProject = JavaCore.create(project.getProject().getWorkspace().getRoot().getProject(reqProject));
+      if (reqJavaProject != null) {
+        Environment projEnv = makeProjectEnvironment(reqJavaProject);
+        env.getSourcePath().addAll(projEnv.getSourcePath());
+        env.getIncludePath().add(projEnv.getBin());
+      }
     }
+  
+    setDefaultEnvironmentOptions(env);
+    
+    return env;
+  }
+  
+  private static void setDefaultEnvironmentOptions(Environment environment) {
+    // set this to true to temporarily deactivate caching
+    Environment.wocache = false;
+
+    if (environment.getCacheDir() == null)
+      environment.setCacheDir(new RelativePath(environment.getRoot(), ".sugarjcache"));
+    
+    environment.setAtomicImportParsing(true);
+    environment.setGenerateJavaFile(true);
+    
+    environment.setNoChecking(true);
+
+    environment.getIncludePath().add(new AbsolutePath(new StrategoJarAntPropertyProvider().getAntPropertyValue("")));
   }
 }
\ No newline at end of file

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Thu Sep  8 08:21:43 2011	(r23307)
@@ -13,18 +13,13 @@
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.jsglr.client.ITreeBuilder;
 import org.spoofax.jsglr.client.KeywordRecognizer;
-import org.spoofax.jsglr.client.ParseTable;
 import org.spoofax.jsglr.client.imploder.IToken;
-import org.spoofax.jsglr.client.imploder.TermTreeFactory;
 import org.spoofax.jsglr.client.imploder.Token;
 import org.spoofax.jsglr.client.imploder.Tokenizer;
-import org.spoofax.jsglr.client.imploder.TreeBuilder;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
-import org.strategoxt.eclipse.ant.StrategoJarAntPropertyProvider;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.sugarj.driver.ATermCommands;
 import org.sugarj.driver.CommandExecution;
@@ -32,25 +27,21 @@
 import org.sugarj.driver.Environment;
 import org.sugarj.driver.FileCommands;
 import org.sugarj.driver.Log;
+import org.sugarj.driver.ModuleSystemCommands;
 import org.sugarj.driver.Result;
-import org.sugarj.driver.path.AbsolutePath;
-import org.sugarj.driver.path.Path;
-import org.sugarj.driver.path.RelativePath;
+import org.sugarj.driver.path.RelativeSourceLocationPath;
 
 /**
  * @author Sebastian Erdweg <seba at informatik uni-marburg de>
  */
 public class SugarJParser extends JSGLRI {
 
-  private String projectPath;
-  private String outputPath;
-  private List<String> includePath;
-  private List<String> sourcePath;
+  private Environment environment;
   
   private static Map<String, Result> results = new HashMap<String, Result>();
   private Result result;
-  private JSGLRI parser;
-  private Path parserTable;
+//  private JSGLRI parser;
+//  private Path parserTable;
   
   public SugarJParser(JSGLRI parser) {
     super(parser.getParseTable(), parser.getStartSymbol(), parser.getController());
@@ -61,65 +52,41 @@
   protected IStrategoTerm doParse(String input, String filename)
       throws TokenExpectedException, BadTokenException, SGLRException, IOException {
     
-    Environment environment = new Environment();
+    assert environment != null;
     
-    Environment.wocache = false;
-
-    assert includePath != null;
-    environment.getIncludePath().addAll(includePath);
-    environment.getIncludePath().add(new StrategoJarAntPropertyProvider().getAntPropertyValue(""));
-    
-    assert sourcePath != null;
-    environment.getSourcePath().addAll(sourcePath);
-    
-    assert projectPath != null;
-    environment.setRoot(projectPath);
-    environment.setBin(outputPath != null ? outputPath : projectPath);
-
-    if (environment.getCacheDir() == null)
-      environment.setCacheDir(projectPath + "/.sugarjcache");
-    
-    environment.setAtomicImportParsing(true);
-    environment.setGenerateJavaFile(true);
-
-    // use this to temporarily deactivate caching
-    // Environment.wocache = true;
-    
-    environment.setNoChecking(true);
-
     result = getResult(filename);
     if (result == null) {
       result = parseFailureResult();
       putResult(filename, result);
     }
 
-    if (result != null && result.isUpToDate(input.hashCode(), environment))
+    if (result != null && result.isUpToDateShallow(input.hashCode(), environment))
       return result.getSugaredSyntaxTree();
     else if (result == null || !(result instanceof PendingResult)) 
-      scheduleParse(input, filename, environment);
+      scheduleParse(input, filename);
         
-    Path lastParseTable;
-    
-    if (result instanceof PendingResult)
-      lastParseTable = ((PendingResult) result).getResult().getLastParseTable();
-    else
-      lastParseTable = result.getLastParseTable();
-  
-    if (lastParseTable != null && lastParseTable.equals(parserTable))
-      return parser.parse(input, filename);
-    
-    if (lastParseTable != null) {
-      try {
-        ParseTable parseTable = org.strategoxt.imp.runtime.Environment.loadParseTable(lastParseTable.getAbsolutePath());
-        ITreeBuilder builder = new TreeBuilder(new TermTreeFactory(ATermCommands.factory));
-        
-        parser = new JSGLRI(parseTable, "SugarCompilationUnit");
-        parserTable = lastParseTable;
-        parser.getParser().setTreeBuilder(builder);
-        return parser.parse(input, filename);
-      } catch (Exception e) {
-      }
-    }
+//    Path lastParseTable;
+//    
+//    if (result instanceof PendingResult)
+//      lastParseTable = ((PendingResult) result).getResult().getLastParseTable();
+//    else
+//      lastParseTable = result.getLastParseTable();
+//  
+//    if (lastParseTable != null && lastParseTable.equals(parserTable))
+//      return parser.parse(input, filename);
+//    
+//    if (lastParseTable != null) {
+//      try {
+//        ParseTable parseTable = org.strategoxt.imp.runtime.Environment.loadParseTable(lastParseTable.getAbsolutePath());
+//        ITreeBuilder builder = new TreeBuilder(new TermTreeFactory(ATermCommands.factory));
+//        
+//        parser = new JSGLRI(parseTable, "SugarCompilationUnit");
+//        parserTable = lastParseTable;
+//        parser.getParser().setTreeBuilder(builder);
+//        return parser.parse(input, filename);
+//      } catch (Exception e) {
+//      }
+//    }
     
     if (result instanceof PendingResult)
       return ((PendingResult) result).getResult().getSugaredSyntaxTree();
@@ -127,17 +94,22 @@
     return result.getSugaredSyntaxTree();
   }
   
-  private synchronized void scheduleParse(final String input, final String filename, final Environment environment) {
+  private synchronized void scheduleParse(final String input, final String filename) {
     final Result oldResult = getResult(filename);
     putResult(filename, new PendingResult(oldResult));
+
+    final RelativeSourceLocationPath sourceFile = ModuleSystemCommands.locateSourceFile(FileCommands.dropExtension(filename), environment.getSourcePath());
+
     
-    Job parseJob = new Job("SugarJ parser: " + projectRelativePath(filename).getRelativePath()) {
+    Job parseJob = new Job("SugarJ parser: " + sourceFile.getRelativePath()) {
       @Override
       protected IStatus run(IProgressMonitor monitor) {
-        monitor.beginTask("parse " + projectRelativePath(filename).getRelativePath(), IProgressMonitor.UNKNOWN);
+        monitor.beginTask("parse " + sourceFile.getRelativePath(), IProgressMonitor.UNKNOWN);
         Result result = null;
         try {
-          result = runParser(input, filename, monitor, environment);
+          result = runParser(input, sourceFile, monitor);
+          if (result.getSugaredSyntaxTree() == null)
+            result.setSugaredSyntaxTree(oldResult.getSugaredSyntaxTree());
           putResult(filename, result);
         } catch (InterruptedException e) {
           result = null;
@@ -156,7 +128,7 @@
     parseJob.schedule();
   }
   
-  private Result runParser(String input, String filename, IProgressMonitor monitor, Environment environment) throws InterruptedException {
+  private Result runParser(String input, RelativeSourceLocationPath sourceFile, IProgressMonitor monitor) throws InterruptedException {
     CommandExecution.SILENT_EXECUTION = false;
     CommandExecution.SUB_SILENT_EXECUTION = false;
     CommandExecution.FULL_COMMAND_LINE = true;
@@ -166,32 +138,20 @@
     SugarJConsole.activateConsoleOnce();
     
     try {
-      return Driver.compile(input, projectRelativePath(filename), monitor, environment);
+      return Driver.parse(input, sourceFile, monitor);
     } catch (InterruptedException e) {
       throw e;
     } catch (Exception e) {
       e.printStackTrace();
-      throw new RuntimeException("parsing " + FileCommands.fileName(new AbsolutePath(filename)) + " failed", e);
+      throw new RuntimeException("parsing " + FileCommands.fileName(sourceFile) + " failed", e);
     }
   }
   
-
-  public void setProjectPath(String projectPath) {
-    this.projectPath = projectPath;
-  }
-
-  public void setOutputPath(String outputPath) {
-    this.outputPath = outputPath;
-  }
   
-  public void setIncludePath(List<String> includePath) {
-    this.includePath = includePath;
+  public void setEnvironment(Environment environment) {
+    this.environment = environment;
   }
-
-  public void setSourcePath(List<String> sourcePath) {
-    this.sourcePath = sourcePath;
-  }
-
+  
   @Override
   public Set<BadTokenException> getCollectedErrors() {
     final Set<BadTokenException> empty = Collections.emptySet();
@@ -212,29 +172,13 @@
     results.put(file, result);
   }
   
-  private RelativePath projectRelativePath(String filename) {
-    RelativePath path = null;
-    for (String s : sourcePath) {
-      if (filename.startsWith(s)) {
-        int sepOffset = s.endsWith(Environment.sep) ? 0 : 1;
-        RelativePath newPath = new RelativePath(new AbsolutePath(s), filename.substring(s.length() + sepOffset));
-        if (path == null || newPath.getBasePath().getAbsolutePath().length() < path.getBasePath().getAbsolutePath().length())
-          path = newPath;
-      }
-    }
-    
-    if (path != null)
-      return path;
-    
-    throw new IllegalStateException("Ressource " + filename + " not inside any source folder.");
-  }
-  
   private Result parseFailureResult() {
     Tokenizer tokenizer = new Tokenizer(" ", " ", new KeywordRecognizer(null) {});
     Token tok = tokenizer.makeToken(0, IToken.TK_UNKNOWN, true);
     IStrategoTerm term = ATermCommands.makeList("SugarCompilationUnit", tok);
     
-    Result r = new Result() {
+    Result r = new Result(true) {
+      public boolean isUpToDateShallow(int h, Environment env) { return false; }
       public boolean isUpToDate(int h, Environment env) { return false; }
     };
     r.setSugaredSyntaxTree(term);

Modified: sugarj/trunk/editor/lib/editor-common.generated.str
==============================================================================
--- sugarj/trunk/editor/lib/editor-common.generated.str	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/editor/lib/editor-common.generated.str	Thu Sep  8 08:21:43 2011	(r23307)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: sugarj/trunk/editor/lib/refactor-common.generated.str
==============================================================================
--- sugarj/trunk/editor/lib/refactor-common.generated.str	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/editor/lib/refactor-common.generated.str	Thu Sep  8 08:21:43 2011	(r23307)
@@ -50,15 +50,18 @@
 strategies //user-input
 
 /**
- * Opens an input dialog for one string value
- * @type (String, String, String) -> String
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
  */
 input-dialog:
-  (title, label, default-value) -> <prim("SSL_EXT_opendialog", title, label, default-value)>
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
   
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
 
 strategies //pp-table
 	
 get-pp-table=
-  import-term(include/EntityRefactorings.generated.pp.af)
+  import-term(include/SugarJ.generated.pp.af)
 	

Modified: sugarj/trunk/editor/plugin.xml
==============================================================================
--- sugarj/trunk/editor/plugin.xml	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/editor/plugin.xml	Thu Sep  8 08:21:43 2011	(r23307)
@@ -8,5 +8,16 @@
        <extension id="org.sugarj.editor.parser" name="SugarJ Parser" point="org.eclipse.imp.runtime.parser">
           <parser class="org.sugarj.editor.SugarJParseController" language="SugarJ">
           </parser>
+       </extension>
+       <extension
+             id="SugarJBuilder"
+             name="SugarJ builder"
+             point="org.eclipse.core.resources.builders">
+          <builder>
+	         <run class="org.sugarj.builder.Builder">
+	            <parameter name="optimize" value="true"/>
+	            <parameter name="comment" value="SugarJ Builder"/>
+	         </run>
+          </builder>
        </extension>    
-    </plugin>
\ No newline at end of file
+    </plugin>

Modified: sugarj/trunk/editor/trans/sugarj.str
==============================================================================
--- sugarj/trunk/editor/trans/sugarj.str	Wed Sep  7 11:21:09 2011	(r23306)
+++ sugarj/trunk/editor/trans/sugarj.str	Thu Sep  8 08:21:43 2011	(r23307)
@@ -12,6 +12,14 @@
   refactorings
 
 rules // Main editor interface (defined by editor/SugarJ-Builders and -References.esv)
+
+  generate-desugared :
+  	(selected, position, ast, path, project-path) -> (filename, result)
+  	where
+  	  filename := <guarantee-extension(|"desug")> path;
+  	  result   := <internal-main> selected // we just return the input term
+  
+  internal-main = fail
   
   // Analyzes the current program, returning a tuple with errors, warnings, and notes;
   // each a list of (term, message) tuples or simply (message) terms.

From puschj at mathematik.uni-marburg.de  Thu Sep  8 12:42:50 2011
From: puschj at mathematik.uni-marburg.de (Jonas Pusch)
Date: Thu, 08 Sep 2011 10:42:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23308 - in
	sugarj/trunk: compiler/org/sugarj/driver
	editor/editor/java/org/sugarj/editor
Message-ID: <20110908104250.EE6A8CC0E0@mx4.tudelft.nl>

Author: JonasPusch
Date: Thu Sep  8 10:42:49 2011
New Revision: 23308
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23308&sc=1

Log:
improved thread handling.

Modified:
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Sep  8 08:21:43 2011	(r23307)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Sep  8 10:42:49 2011	(r23308)
@@ -1030,7 +1030,7 @@
         driverResult.generateFile(sdfExtension, sdfSource);
         availableSDFImports.add(fullExtName);
         
-        if (CommandExecution.FULL_COMMAND_LINE)
+        if (CommandExecution.FULL_COMMAND_LINE && generateFiles)
           log.log("Wrote SDF file to '" + sdfExtension.getAbsolutePath() + "'.");
         
         String strExtensionTerm = 
@@ -1052,7 +1052,7 @@
         driverResult.generateFile(strExtension, strExtensionContent);
         availableSTRImports.add(fullExtName);
         
-        if (CommandExecution.FULL_COMMAND_LINE)
+        if (CommandExecution.FULL_COMMAND_LINE && generateFiles)
           log.log("Wrote Stratego file to '" + strExtension.getAbsolutePath() + "'.");
       }
       

Modified: sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Thu Sep  8 08:21:43 2011	(r23307)
+++ sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Thu Sep  8 10:42:49 2011	(r23308)
@@ -12,7 +12,9 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.FutureTask;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.regex.Pattern;
@@ -52,6 +54,8 @@
   
   private final static Pattern SDF_FILE_PATTERN = Pattern.compile(".*\\.sdf");
   
+  private static ExecutorService parseExecutorService = Executors.newSingleThreadExecutor();
+  
   /*
    * timeout for parsing files (in milliseconds)
    */
@@ -81,6 +85,7 @@
       "-Idef", StdLib.strategoDef.getPath(),
       "-Idef", StdLib.editorServicesDef.getPath(),
       "-Idef", StdLib.plainDef.getPath(),
+      "-Idef", StdLib.modeldrivenDef.getPath(),
       "-I", StdLib.stdLibDir.getPath(),
     }));
     
@@ -314,15 +319,14 @@
     
     parser.getParser().setTreeBuilder(treeBuilder);
 
-    FutureTask<IStrategoTerm> res = new FutureTask<IStrategoTerm>(new Callable<IStrategoTerm>() {
+    Callable<IStrategoTerm> parseCallable = new Callable<IStrategoTerm>() {
       @Override
       public IStrategoTerm call() throws Exception {
         return parser.parse(source, "in-file declaration");
-      }
-    });
+    }};
     
     try {
-      new Thread(res).start();
+      Future<IStrategoTerm> res = parseExecutorService.submit(parseCallable);
       return res.get(PARSE_TIMEOUT, TimeUnit.MILLISECONDS);
     } catch (ExecutionException e) {
       if (e.getCause() instanceof SGLRException)

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java	Thu Sep  8 08:21:43 2011	(r23307)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java	Thu Sep  8 10:42:49 2011	(r23308)
@@ -4,6 +4,8 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 
 import org.eclipse.imp.language.ILanguageService;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -32,6 +34,8 @@
   
   private List<IStrategoTerm> lastServices;
 
+  private ExecutorService reloadEditorExecutorService = Executors.newSingleThreadExecutor();
+  
   public SugarJDescriptor(Descriptor baseDescriptor) throws BadDescriptorException {
     super(baseDescriptor.getDocument());
     baseDocument = baseDescriptor.getDocument();
@@ -66,7 +70,7 @@
   }
 
   private void initObserver(final StrategoObserver observer) {
-    new Thread(new Runnable() {
+    reloadEditorExecutorService.execute(new Runnable() {
       public void run() {
         try {
           observer.getLock().lockInterruptibly();
@@ -79,7 +83,7 @@
           observer.getLock().unlock();
         }
       }
-    }).start();
+    });
   }
   
   private void reloadEditors(SGLRParseController controller) {

From seba at informatik.uni-marburg.de  Thu Sep  8 14:09:53 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 08 Sep 2011 12:09:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23309 - in
	sugarj/trunk/case-studies: concretesyntax foo
Message-ID: <20110908120953.62D7E108C01C@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Thu Sep  8 12:09:53 2011
New Revision: 23309
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23309&sc=1

Log:
few fixes in case studies

Modified:
   sugarj/trunk/case-studies/concretesyntax/MetaListVarTest.sugj
   sugarj/trunk/case-studies/concretesyntax/Test.sugj
   sugarj/trunk/case-studies/foo/Test.sugj

Modified: sugarj/trunk/case-studies/concretesyntax/MetaListVarTest.sugj
==============================================================================
--- sugarj/trunk/case-studies/concretesyntax/MetaListVarTest.sugj	Thu Sep  8 10:42:49 2011	(r23308)
+++ sugarj/trunk/case-studies/concretesyntax/MetaListVarTest.sugj	Thu Sep  8 12:09:53 2011	(r23309)
@@ -1,6 +1,6 @@
 package concretesyntax;
 
-import concretesyntax.ConcreteJava;
+import concretesyntax.Java;
 
 public sugar MetaListVarTest {
   
@@ -8,4 +8,4 @@
     foo1 : java |[ {java_bstm*} ]| -> ""
     foo2 : java |[ {~bstm*:bstm*} ]| -> ""
     foo3 : java |[ {~bstm:bstms} ]| -> ""
-}
\ No newline at end of file
+} 
\ No newline at end of file

Modified: sugarj/trunk/case-studies/concretesyntax/Test.sugj
==============================================================================
--- sugarj/trunk/case-studies/concretesyntax/Test.sugj	Thu Sep  8 10:42:49 2011	(r23308)
+++ sugarj/trunk/case-studies/concretesyntax/Test.sugj	Thu Sep  8 12:09:53 2011	(r23309)
@@ -1,6 +1,6 @@
 package concretesyntax;
 
-import concretesyntax.ConcreteJava;
+import concretesyntax.Java;
 
 public sugar TestAux {
   desugarings

Modified: sugarj/trunk/case-studies/foo/Test.sugj
==============================================================================
--- sugarj/trunk/case-studies/foo/Test.sugj	Thu Sep  8 10:42:49 2011	(r23308)
+++ sugarj/trunk/case-studies/foo/Test.sugj	Thu Sep  8 12:09:53 2011	(r23309)
@@ -3,11 +3,8 @@
 import foo.FooSugar;
 import foo.FooEditorServices;
 
-import foo.FooTest;
-
 public class Test {
   TYPE v = nil;
   String x = nil;
   String y = null;
-}
-
+} 

From seba at informatik.uni-marburg.de  Thu Sep  8 15:12:58 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 08 Sep 2011 13:12:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23310 -
	sugarj/trunk/editor/editor/java/org/sugarj/builder
Message-ID: <20110908131258.A223D7F804D@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Thu Sep  8 13:12:58 2011
New Revision: 23310
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23310&sc=1

Log:
catch null source files

Modified:
   sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java

Modified: sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Thu Sep  8 12:09:53 2011	(r23309)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Thu Sep  8 13:12:58 2011	(r23310)
@@ -96,6 +96,10 @@
             final RelativeSourceLocationPath sourceFile = ModuleSystemCommands.locateSourceFile(
                     FileCommands.dropExtension(path.toString()),
                     environment.getSourcePath());
+            
+            if (sourceFile == null)
+              throw new IllegalStateException("cannot locate source file for ressource " + resource.getFullPath());
+              
             resources.add(sourceFile);
           }
           return true;

From seba at informatik.uni-marburg.de  Thu Sep  8 15:37:53 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 08 Sep 2011 13:37:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23311 -
	sugarj/trunk/editor/editor/java/org/sugarj/builder
Message-ID: <20110908133753.C40287F8008@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Thu Sep  8 13:37:53 2011
New Revision: 23311
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23311&sc=1

Log:
fix builder file lookup

Modified:
   sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java

Modified: sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Thu Sep  8 13:12:58 2011	(r23310)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Thu Sep  8 13:37:53 2011	(r23311)
@@ -92,7 +92,7 @@
             return false;
           
           if ("sugj".equals(resource.getFileExtension())) {
-            IPath path = resource.getFullPath().makeRelativeTo(getProject().getFullPath());
+            String path = getProject().getLocation().makeAbsolute() + "/" + relPath;
             final RelativeSourceLocationPath sourceFile = ModuleSystemCommands.locateSourceFile(
                     FileCommands.dropExtension(path.toString()),
                     environment.getSourcePath());

From m.dejonge at tudelft.nl  Thu Sep  8 15:46:00 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 08 Sep 2011 13:46:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23312 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20110908134600.F00497F8039@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Sep  8 13:45:59 2011
New Revision: 23312
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23312&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Sep  8 13:37:53 2011	(r23311)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Sep  8 13:45:59 2011	(r23312)
@@ -51,7 +51,9 @@
 		<has-origin-term> oldnode		
 	with
 		reconstructed-text := <topdown(try(strip-annos)); construct-text-from-old(pp)> (oldnode, newnode); 
-		(start-offset, end-offset, newText) := <ast-change-to-text-change(pp)> REPLACEMENT(oldnode, reconstructed-text)
+		r-text := <origin-set-relation>(newnode, reconstructed-text);
+		(start-offset, end-offset, newText) := <ast-change-to-text-change(pp)> REPLACEMENT(oldnode, r-text)
+		
 
 construct-textual-change(pp):
 	t@(oldnode, newnode) -> (0, 0, "")
@@ -109,7 +111,7 @@
 		//; debug(!"ast-changes!: ")
 	with
 		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; //debug(!"txt-changes: ");
-		text := <apply-text-changes>(text-changes, <origin-text> origin-node, <origin-start-offset> origin-node)		
+		text := <apply-text-changes>(text-changes, <origin-text> origin-node, <origin-start-offset> origin-node)
 
 construct-text-by-pp(pp):
 	node -> text

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Thu Sep  8 13:37:53 2011	(r23311)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Thu Sep  8 13:45:59 2011	(r23312)
@@ -12,7 +12,7 @@
 		tc-deletion := <create-textchange-delete> origin-lst
 
 ast-change-to-text-change(pp):
-	REPLACEMENT(origin-node, new-node) -> tc-replacement 
+	REPLACEMENT(origin-node, new-node) ->  tc-replacement 
 	with 
 		tc-replacement := <create-textchange-replace(pp)> (origin-node, new-node) 
 

From L.C.L.Kats at tudelft.nl  Thu Sep  8 17:02:13 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 08 Sep 2011 15:02:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23313 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder
Message-ID: <20110908150213.F13657F804D@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Sep  8 15:02:13 2011
New Revision: 23313
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23313&sc=1

Log:
ensure that isSyntaxCorrect() is false in case of a region recovery

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITokenizer.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/NullTokenizer.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Tokenizer.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java	Thu Sep  8 13:45:59 2011	(r23312)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java	Thu Sep  8 15:02:13 2011	(r23313)
@@ -40,6 +40,10 @@
 	public boolean isSyntaxCorrect() {
 		return isSyntaxCorrect;
 	}
+	
+	protected void setSyntaxCorrect(boolean isSyntaxCorrect)  {
+		this.isSyntaxCorrect = isSyntaxCorrect;
+	}
 
 	private LineStartOffsetList getLineStartOffsets() {
 		if (lineStartOffsets == null)

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java	Thu Sep  8 13:45:59 2011	(r23312)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java	Thu Sep  8 15:02:13 2011	(r23313)
@@ -47,7 +47,7 @@
 	/** Token kind for an erroneous token. */
 	public static final int TK_ERROR_EOF_UNEXPECTED = 12;
 	
-	/** Token kind for a meta-esape operator. */
+	/** Token kind for a meta-escape operator. */
 	public static final int TK_ESCAPE_OPERATOR = 13;
 	
 	/** A reserved token kind for internal use only. */

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITokenizer.java	Thu Sep  8 13:45:59 2011	(r23312)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITokenizer.java	Thu Sep  8 15:02:13 2011	(r23313)
@@ -69,6 +69,8 @@
 	 * invoked for each character in a skipped/erroneous region of code.
 	 * Required for keyword highlighting with {@link KeywordRecognizer}.
 	 * 
+	 * Additionally, ensures that {@link #isSyntaxCorrect()} returns false.
+	 * 
 	 * @param offset
 	 *           The offset of the 
 	 */

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/NullTokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/NullTokenizer.java	Thu Sep  8 13:45:59 2011	(r23312)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/NullTokenizer.java	Thu Sep  8 15:02:13 2011	(r23313)
@@ -65,11 +65,10 @@
 	protected void setErrorMessage(IToken leftToken, IToken rightToken, String message) {
 		if (leftToken != onlyToken || rightToken != onlyToken)
 			throw new IllegalArgumentException("Argument tokens do not belong to this NullTokenizer");
-		// Do nothing
 	}
 
 	public void tryMakeSkippedRegionToken(int endOffset) {
-		// Do nothing
+		setSyntaxCorrect(false);
 	}
 
 	@Override
@@ -80,7 +79,10 @@
 	@Override
 	public void markPossibleSyntaxError(LabelInfo label, IToken firstToken,
 			int endOffset, ProductionAttributeReader prodReader) {
-		// Do nothing
+		
+		if (label.isRecover() || label.isReject() || label.isCompletion()) {
+			setSyntaxCorrect(false);
+		}
 	}
 
 	public Iterator<IToken> iterator() {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Tokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Tokenizer.java	Thu Sep  8 13:45:59 2011	(r23312)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Tokenizer.java	Thu Sep  8 15:02:13 2011	(r23313)
@@ -210,6 +210,8 @@
 				makeToken(offset, TK_ERROR, false, ERROR_SKIPPED_REGION);
 			}
 		}
+		
+		setSyntaxCorrect(false);
 	}
 
 	private boolean isAtPotentialKeywordEnd(int offset, boolean isInputKeywordChar) {

From L.C.L.Kats at tudelft.nl  Thu Sep  8 17:07:49 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 08 Sep 2011 15:07:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23314 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110908150749.10F117F8022@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Sep  8 15:07:48 2011
New Revision: 23314
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23314&sc=1

Log:
spoofax-libs

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From seba at informatik.uni-marburg.de  Thu Sep  8 18:00:36 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 08 Sep 2011 16:00:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23315 - in
	sugarj/trunk: compiler/org/sugarj/driver
	editor/editor/java/org/sugarj/builder
	editor/editor/java/org/sugarj/editor feature update-site
Message-ID: <20110908160036.0D3017F8060@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Thu Sep  8 16:00:35 2011
New Revision: 23315
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23315&sc=1

Log:
improved integration of builder and parser

Modified:
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/Result.java
   sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJOnSaveService.java
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
   sugarj/trunk/feature/feature.xml
   sugarj/trunk/update-site/site.xml

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Sep  8 15:07:48 2011	(r23314)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Sep  8 16:00:35 2011	(r23315)
@@ -329,7 +329,9 @@
       driverResult.setSugaredSyntaxTree(makeSugaredSyntaxTree());
       if (currentTransProg != null)
         driverResult.registerEditorDesugarings(currentTransProg);
-      
+
+      driverResult.writeDependencyFile(depOutFile);
+
       success = true;
     } 
     catch (CommandExecution.ExecutionError e) {
@@ -501,7 +503,6 @@
         }
         
         driverResult.generateFile(editorServicesFile, buf.toString());
-        driverResult.writeDependencyFile(depOutFile);
       } finally {
         log.endTask();
       }
@@ -566,7 +567,6 @@
   
         log.log("writing plain content to " + plainFile);
         driverResult.generateFile(plainFile, plainContent);
-        driverResult.writeDependencyFile(depOutFile);
       } finally {
         log.endTask();
       }
@@ -639,8 +639,8 @@
       InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
     // recompile the current grammar definition
     Path currentGrammarTBL = SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(environment), sdfParser, sdfContext, makePermissiveContext, sdfCache, environment);
-    FileCommands.deleteTempFiles(driverResult.getLastParseTable());
-    driverResult.setLastParseTable(currentGrammarTBL);
+//    FileCommands.deleteTempFiles(driverResult.getLastParseTable());
+//    driverResult.setLastParseTable(currentGrammarTBL);
     ParseTable table = org.strategoxt.imp.runtime.Environment.loadParseTable(currentGrammarTBL.getAbsolutePath());
     
     IStrategoTerm parseResult = null;
@@ -894,7 +894,6 @@
         
         generatedJavaClasses.add(clazz);
         driverResult.appendToFile(javaOutFile, SDFCommands.prettyPrintJava(dec, interp) + "\n");
-        driverResult.writeDependencyFile(depOutFile);
       } finally {
         log.endTask();
       }
@@ -1056,8 +1055,6 @@
           log.log("Wrote Stratego file to '" + strExtension.getAbsolutePath() + "'.");
       }
       
-      driverResult.writeDependencyFile(depOutFile);
-
       /*
        * adapt current grammar
        */

Modified: sugarj/trunk/compiler/org/sugarj/driver/Result.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Result.java	Thu Sep  8 15:07:48 2011	(r23314)
+++ sugarj/trunk/compiler/org/sugarj/driver/Result.java	Thu Sep  8 16:00:35 2011	(r23315)
@@ -184,7 +184,7 @@
     return desugaringsFile;
   }
   
-  void writeDependencyFile(Path dep) throws IOException {
+  public void writeDependencyFile(Path dep) throws IOException {
     if (!generateFiles)
       return;
     
@@ -216,7 +216,7 @@
     }
   }
   
-  static Result readDependencyFile(Path dep, Environment env) throws IOException {
+  public static Result readDependencyFile(Path dep, Environment env) throws IOException {
     Result result = new Result(true);
     result.allDependentFiles = null;
     ObjectInputStream ois = null;

Modified: sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Thu Sep  8 15:07:48 2011	(r23314)
+++ sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Thu Sep  8 16:00:35 2011	(r23315)
@@ -85,7 +85,6 @@
       "-Idef", StdLib.strategoDef.getPath(),
       "-Idef", StdLib.editorServicesDef.getPath(),
       "-Idef", StdLib.plainDef.getPath(),
-      "-Idef", StdLib.modeldrivenDef.getPath(),
       "-I", StdLib.stdLibDir.getPath(),
     }));
     

Modified: sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Thu Sep  8 15:07:48 2011	(r23314)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Thu Sep  8 16:00:35 2011	(r23315)
@@ -18,7 +18,6 @@
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.jdt.core.JavaCore;
-import org.strategoxt.strc.strc;
 import org.sugarj.driver.CommandExecution;
 import org.sugarj.driver.Driver;
 import org.sugarj.driver.Environment;
@@ -33,6 +32,9 @@
 import org.sugarj.editor.SugarJParseController;
 
 /**
+ * TODO update editors to show newly built result
+ * TODO annotate errors/warnings in package explorer
+ * 
  * @author Sebastian Erdweg <seba at informatik uni-marburg de>
  */
 public class Builder extends IncrementalProjectBuilder {

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJOnSaveService.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJOnSaveService.java	Thu Sep  8 15:07:48 2011	(r23314)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJOnSaveService.java	Thu Sep  8 16:00:35 2011	(r23315)
@@ -31,6 +31,6 @@
   @Override
   public void documentChanged(DocumentEvent event) {
     baseService.documentChanged(event);
-    descriptor.reloadAllEditors(0);
+    // descriptor.reloadAllEditors(0);
   }
 }

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Thu Sep  8 15:07:48 2011	(r23314)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Thu Sep  8 16:00:35 2011	(r23315)
@@ -4,6 +4,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -39,6 +40,8 @@
   private Environment environment;
   
   private static Map<String, Result> results = new HashMap<String, Result>();
+  private static Set<String> pending = new HashSet<String>();
+  
   private Result result;
 //  private JSGLRI parser;
 //  private Path parserTable;
@@ -55,14 +58,12 @@
     assert environment != null;
     
     result = getResult(filename);
-    if (result == null) {
+    if (result == null)
       result = parseFailureResult();
-      putResult(filename, result);
-    }
 
-    if (result != null && result.isUpToDateShallow(input.hashCode(), environment))
+    if (result.isUpToDateShallow(input.hashCode(), environment))
       return result.getSugaredSyntaxTree();
-    else if (result == null || !(result instanceof PendingResult)) 
+    else if (!isPending(filename)) 
       scheduleParse(input, filename);
         
 //    Path lastParseTable;
@@ -88,15 +89,11 @@
 //      }
 //    }
     
-    if (result instanceof PendingResult)
-      return ((PendingResult) result).getResult().getSugaredSyntaxTree();
-    
     return result.getSugaredSyntaxTree();
   }
   
   private synchronized void scheduleParse(final String input, final String filename) {
-    final Result oldResult = getResult(filename);
-    putResult(filename, new PendingResult(oldResult));
+    SugarJParser.setPending(filename, true);
 
     final RelativeSourceLocationPath sourceFile = ModuleSystemCommands.locateSourceFile(FileCommands.dropExtension(filename), environment.getSourcePath());
 
@@ -108,19 +105,17 @@
         Result result = null;
         try {
           result = runParser(input, sourceFile, monitor);
-          if (result.getSugaredSyntaxTree() == null)
-            result.setSugaredSyntaxTree(oldResult.getSugaredSyntaxTree());
-          putResult(filename, result);
         } catch (InterruptedException e) {
           result = null;
         } catch (Exception e) {
           org.strategoxt.imp.runtime.Environment.logException(e);
         } finally {
           monitor.done();
-          if (result != null)
+          if (result != null) {
+            SugarJParser.putResult(filename, result);
             getController().scheduleParserUpdate(0, false);
-          else
-            putResult(filename, oldResult);
+          }
+          SugarJParser.setPending(filename, false);
         }
         return Status.OK_STATUS;
       }
@@ -164,12 +159,31 @@
     return result == null ? empty : new ArrayList<IStrategoTerm>(result.getEditorServices());
   }
 
-  private static synchronized Result getResult(String file) {
-    return results.get(file);
+  private static Result getResult(String file) {
+    synchronized (results) {
+      return results.get(file);
+    }
   }
   
-  private static synchronized void putResult(String file, Result result) {
-    results.put(file, result);
+  public static void putResult(String file, Result result) {
+    synchronized (results) {
+      results.put(file, result);
+    }
+  }
+  
+  private static boolean isPending(String file) {
+    synchronized (pending) {
+      return pending.contains(file);      
+    }
+  }
+  
+  private static void setPending(String file, boolean isPending) {
+    synchronized (pending) {
+      if (isPending)
+        pending.add(file);
+      else
+        pending.remove(file);
+    }
   }
   
   private Result parseFailureResult() {

Modified: sugarj/trunk/feature/feature.xml
==============================================================================
--- sugarj/trunk/feature/feature.xml	Thu Sep  8 15:07:48 2011	(r23314)
+++ sugarj/trunk/feature/feature.xml	Thu Sep  8 16:00:35 2011	(r23315)
@@ -2,7 +2,7 @@
 <feature
       id="org.sugarj.editor"
       label="Sugarclipse"
-      version="1.2.8.qualifier"
+      version="1.3.0.qualifier"
       provider-name="sugarj.org">
 
    <description url="http://sugarj.org">

Modified: sugarj/trunk/update-site/site.xml
==============================================================================
--- sugarj/trunk/update-site/site.xml	Thu Sep  8 15:07:48 2011	(r23314)
+++ sugarj/trunk/update-site/site.xml	Thu Sep  8 16:00:35 2011	(r23315)
@@ -3,7 +3,7 @@
    <description name="SugarJ" url="sugarj.org/update">
       SugarJ
    </description>
-   <feature url="features/org.sugarj.editor_1.2.8.201107141204.jar" id="org.sugarj.editor" version="1.2.8.201107141204">
+   <feature url="features/org.sugarj.editor_1.3.0.201109081757.jar" id="org.sugarj.editor" version="1.3.0.201109081757">
       <category name="SugarJ"/>
    </feature>
    <category-def name="SugarJ" label="SugarJ">

From v.vergu at gmail.com  Thu Sep  8 22:53:41 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Thu, 08 Sep 2011 20:53:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23316 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views
Message-ID: <20110908205341.5A8D7108C007@mx3.tudelft.nl>

Author: VladVergu
Date: Thu Sep  8 20:53:40 2011
New Revision: 23316
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23316&sc=1

Log:
Fixes http://yellowgrass.org/issue/Spoofax/417

- changed to GridLayout instead of FormLayout
- added filter for displaying only failed tests

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/FailedTestsFilter.java   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/FailedTestsFilter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/FailedTestsFilter.java	Thu Sep  8 20:53:40 2011	(r23316)
@@ -0,0 +1,22 @@
+package org.strategoxt.imp.testing.views;
+
+import org.eclipse.jface.viewers.Viewer;
+import org.eclipse.jface.viewers.ViewerFilter;
+import org.strategoxt.imp.testing.model.TestcaseRun;
+import org.strategoxt.imp.testing.model.TestsuiteRun;
+
+public class FailedTestsFilter extends ViewerFilter {
+
+	@Override
+	public boolean select(Viewer viewer, Object parentElement, Object element) {
+		if (element instanceof TestcaseRun) {
+			TestcaseRun tcr = (TestcaseRun) element;
+			return !tcr.hasSucceeded();
+		} else if (element instanceof TestsuiteRun) {
+			TestsuiteRun tsr = (TestsuiteRun) element;
+			return tsr.getNrFailedTests() > 0;
+		}
+		return true;
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java	Thu Sep  8 16:00:35 2011	(r23315)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java	Thu Sep  8 20:53:40 2011	(r23316)
@@ -6,15 +6,17 @@
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.jdt.internal.junit.ui.JUnitProgressBar;
+import org.eclipse.jface.action.Action;
+import org.eclipse.jface.action.IMenuManager;
 import org.eclipse.jface.viewers.DoubleClickEvent;
 import org.eclipse.jface.viewers.IDoubleClickListener;
 import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.jface.viewers.TreeViewer;
+import org.eclipse.jface.viewers.ViewerFilter;
 import org.eclipse.jface.viewers.ViewerSorter;
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.FormAttachment;
-import org.eclipse.swt.layout.FormData;
-import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Label;
@@ -28,186 +30,221 @@
 import org.strategoxt.imp.testing.model.TestcaseRun;
 import org.strategoxt.imp.testing.model.TestsuiteRun;
 
-
 public class TestRunViewPart extends ViewPart {
 
-    private final FormToolkit toolkit = new FormToolkit(Display.getCurrent());
-    private TestRun testrun = null;
-    private Label lblRatio;
-    private JUnitProgressBar pb;
-    private TreeViewer treeViewer;
+	private final FormToolkit toolkit = new FormToolkit(Display.getCurrent());
+	private TestRun testrun = null;
+	private Label lblRatio;
+	private final static int LBLRATIO_WIDTHHINT = 65;
+	private JUnitProgressBar pb;
+	private TreeViewer treeViewer;
 	private int nrFailedTests = 0;
-    
-    public TestRunViewPart() {
-    	
-    }
-    
-    /**
-     * Create contents of the view part.
-     * @param parent
-     */
-    @Override
-    public void createPartControl(Composite parent) {
-        parent.setLayout(new FormLayout());
-       
-        pb = new JUnitProgressBar(parent);
-        FormData fd_pb = new FormData();
-        fd_pb.left = new FormAttachment(0, 10);
-        fd_pb.top = new FormAttachment(0, 10);
-        pb.setLayoutData(fd_pb);
-        toolkit.adapt(pb, true, true);
-       
-        Label lblTests = new Label(parent, SWT.NONE);
-        fd_pb.right = new FormAttachment(100, -100);
-        FormData fd_lblTests = new FormData();
-        fd_lblTests.top = new FormAttachment(0, 11);
-        fd_lblTests.right = new FormAttachment(100, -65);
-        lblTests.setLayoutData(fd_lblTests);
-        toolkit.adapt(lblTests, true, true);
-        lblTests.setText("Tests");
-       
-        lblRatio = new Label(parent, SWT.NONE);
-        lblRatio.setAlignment(SWT.LEFT);
-        lblRatio.setSize(55, 25);
-        FormData fd_lblRatio = new FormData();
-        fd_lblRatio.right = new FormAttachment(100, -10);
-        fd_lblRatio.top = new FormAttachment(0, 11);
-        lblRatio.setLayoutData(fd_lblRatio);
-        toolkit.adapt(lblRatio, true, true);
-       
-        treeViewer = new TreeViewer(parent, SWT.BORDER);
-        Tree tv = treeViewer.getTree();
-        FormData fd_tv = new FormData();
-        fd_tv.bottom = new FormAttachment(100, -10);
-        fd_tv.top = new FormAttachment(0, 35);
-        fd_tv.left = new FormAttachment(0, 10);
-        fd_tv.right = new FormAttachment(100, -10);
-        tv.setLayoutData(fd_tv);
-        toolkit.paintBordersFor(tv);
+	private Action onlyFailedTestsAction;
+	private ViewerFilter failedTestsFilter;
+
+	public TestRunViewPart() {
+
+	}
+
+	/**
+	 * Create contents of the view part.
+	 * 
+	 * @param parent
+	 */
+	@Override
+	public void createPartControl(Composite parent) {
+		GridData gd = null;
+
+		GridLayout layout = new GridLayout(3, false);
+		parent.setLayout(layout);
+
+		pb = new JUnitProgressBar(parent);
+		gd = new GridData();
+		gd.horizontalAlignment = SWT.FILL;
+		gd.grabExcessHorizontalSpace = true;
+		gd.verticalAlignment = SWT.TOP;
+		pb.setLayoutData(gd);
+
+		Label lblTests = new Label(parent, SWT.NONE);
+		lblTests.setText("Tests");
+		gd = new GridData();
+		gd.horizontalAlignment = SWT.BEGINNING;
+		lblTests.setLayoutData(gd);
+
+		lblRatio = new Label(parent, SWT.RIGHT);
+		gd = new GridData();
+		gd.horizontalAlignment = SWT.END;
+		gd.widthHint = LBLRATIO_WIDTHHINT;
+		lblRatio.setLayoutData(gd);
+
+		treeViewer = new TreeViewer(parent, SWT.BORDER);
+		Tree tv = treeViewer.getTree();
+		gd = new GridData();
+		gd.grabExcessHorizontalSpace = true;
+		gd.grabExcessVerticalSpace = true;
+		gd.horizontalAlignment = SWT.FILL;
+		gd.verticalAlignment = SWT.FILL;
+		gd.horizontalSpan = 3;
+		tv.setLayoutData(gd);
+
+		TreeColumn column = new TreeColumn(treeViewer.getTree(), SWT.NONE);
 
-		TreeColumn column = new TreeColumn(treeViewer.getTree(),SWT.NONE);
-		column.setWidth(10);
 		column.setText("");
-		
-        treeViewer.setContentProvider(new TestRunContentProvider());
-        treeViewer.setLabelProvider(new TestRunLabelProvider());
-        treeViewer.setSorter(new ViewerSorter());
-        treeViewer.addDoubleClickListener(new IDoubleClickListener() {
-			
+		column.pack();
+
+		treeViewer.setContentProvider(new TestRunContentProvider());
+		treeViewer.setLabelProvider(new TestRunLabelProvider());
+		treeViewer.setSorter(new ViewerSorter());
+		treeViewer.addDoubleClickListener(new IDoubleClickListener() {
+
 			public void doubleClick(DoubleClickEvent event) {
-				Object selectObject = ((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
+				Object selectObject = ((IStructuredSelection) treeViewer
+						.getSelection()).getFirstElement();
 
 				String file = null;
 				int offset = 0;
-				
+
 				if (selectObject instanceof TestcaseRun) {
-					TestcaseRun tcr = (TestcaseRun) selectObject ;
+					TestcaseRun tcr = (TestcaseRun) selectObject;
 					file = tcr.getParent().getFilename();
 					offset = tcr.getOffset();
-				} else if(selectObject instanceof TestsuiteRun) {
-					file = ((TestsuiteRun)selectObject).getFilename();
+				} else if (selectObject instanceof TestsuiteRun) {
+					file = ((TestsuiteRun) selectObject).getFilename();
 				}
 
-				if(file != null) {
+				if (file != null) {
 					File f = new File(file);
 					IResource res;
 					try {
 						res = EditorIOAgent.getResource(f);
-						EditorState.asyncOpenEditor(Display.getDefault(), (IFile)res, offset, true);
+						EditorState.asyncOpenEditor(Display.getDefault(),
+								(IFile) res, offset, true);
 					} catch (FileNotFoundException e) {
-						org.strategoxt.imp.runtime.Environment.logException("File not found", e);
+						org.strategoxt.imp.runtime.Environment.logException(
+								"File not found", e);
 					}
 				}
 			}
 		});
-        
-        createActions();
-        initializeToolBar();
-        initializeMenu();
-        
-        reset();
+
+		createActions();
+		createFilters();
+		initializeToolBar();
+		initializeMenu();
+
+		reset();
 
 		testrun = new TestRun();
 
 		treeViewer.expandAll();
-        
-        updateHeader();
-    }
-    
-    private void updateHeader() {
-    	int nrTests = testrun.getNrTests();
-    	if(testrun == null) {
-    		lblRatio.setText("0 / 0");
-    	} else {
-    		lblRatio.setText(String.format("%d / %d    ", (nrTests-nrFailedTests), nrTests));
-    	}
-        pb.setMaximum(nrTests);
-    }
-    
+
+		updateHeader();
+
+	}
+
+	private void updateHeader() {
+		int nrTests = testrun.getNrTests();
+		if (testrun == null) {
+			lblRatio.setText("0 / 0");
+		} else {
+			lblRatio.setText(String.format("%d / %d    ",
+					(nrTests - nrFailedTests), nrTests));
+		}
+		pb.setMaximum(nrTests);
+	}
+
 	@Override
 	public void dispose() {
-        toolkit.dispose();
-        super.dispose();
-    }
-
-    /**
-     * Create the actions.
-     */
-    private void createActions() {
-        // Create the actions
-    }
-
-    /**
-     * Initialize the toolbar.
-     */
-    private void initializeToolBar() {
-    }
-
-    /**
-     * Initialize the menu.
-     */
-    private void initializeMenu() {
-    }
-
-    @Override
-    public void setFocus() {
-    }
-    
-    public void reset() {
+		toolkit.dispose();
+		super.dispose();
+	}
+
+	/**
+	 * Create the actions.
+	 */
+	private void createActions() {
+		onlyFailedTestsAction = new Action("Show only failed tests",Action.AS_CHECK_BOX) {
+			public void run() {
+				if (onlyFailedTestsAction.isChecked()) {
+					treeViewer.addFilter(failedTestsFilter);
+				} else {
+					treeViewer.removeFilter(failedTestsFilter);
+				}
+
+			}
+		};
+
+	}
+
+	private void createFilters(){
+		failedTestsFilter = new FailedTestsFilter();
+	}
+	
+	/**
+	 * Initialize the toolbar.
+	 */
+	private void initializeToolBar() {
+	}
+
+	/**
+	 * Initialize the menu.
+	 */
+	private void initializeMenu() {
+		IMenuManager mgr = getViewSite().getActionBars().getMenuManager();
+        mgr.add(onlyFailedTestsAction);
+	}
+
+	@Override
+	public void setFocus() {
+	}
+
+	public void reset() {
 		nrFailedTests = 0;
-    	testrun = new TestRun();
+		testrun = new TestRun();
 		treeViewer.setInput(testrun);
 		pb.reset();
-    }
-    
-    public void refresh() {
-    	updateHeader();
-    	treeViewer.refresh();
-    	treeViewer.expandAll();
-    }
-    
-    public void addTestsuite(String name, String filename) {    	
-    	testrun.addTestsuite(name, filename);
-    	refresh();
-    }
-
-    public void addTestcase(String testsuite, String description, int offset) {
-    	TestsuiteRun ts = testrun.getTestsuite(testsuite);
-    	ts.addTestCase(description, offset);
-    	refresh();
-    }
-    
-    public void startTestcase(String testsuite, String description) {
-    	TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(description);
-    	tcr.start();
-    }
-
-    public void finishTestcase(String testsuite, String description, boolean succeeded) {
-    	TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(description);
-    	tcr.finished(succeeded);
-    	if(!succeeded) 
-    		nrFailedTests++;
-    	pb.step(nrFailedTests);
-    	refresh();
-    }
+	}
+
+	public void refresh() {
+		updateHeader();
+		treeViewer.refresh();
+		treeViewer.expandAll();
+
+		final Tree tree = treeViewer.getTree();
+		Display.getCurrent().asyncExec(new Runnable() {
+			public void run() {
+				for (TreeColumn tc : tree.getColumns()) {
+					tc.pack();
+				}
+			}
+		});
+	}
+
+	public void addTestsuite(String name, String filename) {
+		testrun.addTestsuite(name, filename);
+		refresh();
+	}
+
+	public void addTestcase(String testsuite, String description, int offset) {
+		TestsuiteRun ts = testrun.getTestsuite(testsuite);
+		ts.addTestCase(description, offset);
+		refresh();
+	}
+
+	public void startTestcase(String testsuite, String description) {
+		TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(
+				description);
+		tcr.start();
+	}
+
+	public void finishTestcase(String testsuite, String description,
+			boolean succeeded) {
+		TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(
+				description);
+		tcr.finished(succeeded);
+		if (!succeeded)
+			nrFailedTests++;
+		pb.step(nrFailedTests);
+		refresh();
+	}
 }

From L.C.L.Kats at tudelft.nl  Fri Sep  9 15:27:57 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 09 Sep 2011 13:27:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23317 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing
	org.strategoxt.imp.testing/syntax
Message-ID: <20110909132757.59BB1108C006@mx3.tudelft.nl>

Author: LennartKats
Date: Fri Sep  9 13:27:56 2011
New Revision: 23317
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23317&sc=1

Log:
testing language syntax/parsing tweaks: relaxed identifier syntax, avoid exception on empty file

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/comments-in-test-titles.spt
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Common.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/comments-in-test-titles.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/comments-in-test-titles.spt	Fri Sep  9 13:27:56 2011	(r23317)
@@ -0,0 +1,15 @@
+module comments
+
+language Spoofax-Testing
+
+test comments in test titles [[[
+	module foo
+	language TestingTesting
+	test /* [[
+		module e
+	]]
+	test */ [[
+		module e
+	]]
+	test /**/ [[]]
+]]] parse succeeds
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Thu Sep  8 20:53:40 2011	(r23316)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Fri Sep  9 13:27:56 2011	(r23317)
@@ -1,6 +1,7 @@
 package org.strategoxt.imp.testing;
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermList;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
@@ -163,6 +164,8 @@
 	}
 
 	private String getLanguageName(IStrategoTerm root, IStrategoConstructor which) {
+		if (root.getSubtermCount() < 1 || !isTermList(termAt(root, 0)))
+			return null;
 		IStrategoList headers = termAt(root, 0);
 		for (IStrategoTerm header : StrategoListIterator.iterable(headers)) {
 			if (tryGetConstructor(header) == which) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Common.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Common.sdf	Thu Sep  8 20:53:40 2011	(r23316)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Common.sdf	Fri Sep  9 13:27:56 2011	(r23317)
@@ -4,8 +4,8 @@
 
   lexical syntax
   
-    [a-zA-Z][a-zA-Z0-9\_]* -> ID {prefer}
-    "-"? [0-9]+            -> INT
+    [a-zA-Z][a-zA-Z0-9\_\-\$\']* -> ID {prefer}
+    "-"? [0-9]+                  -> INT
     
     "\"" StringChar* "\"" -> STRING
     ~[\"\n]               -> StringChar
@@ -28,7 +28,7 @@
   
     %%CommentChar -/- [\/]
     INT           -/- [0-9]
-    ID            -/- [a-zA-Z0-9\_]
+    ID            -/- [a-zA-Z0-9\_\-\$\']
     
     %% EOF may not be followed by any char
     

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Sep  8 20:53:40 2011	(r23316)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Fri Sep  9 13:27:56 2011	(r23317)
@@ -154,6 +154,7 @@
     "setup" -> ID    {reject}
     "test"  -> ATerm {reject}
     "setup" -> ATerm {reject}
+            -> "fails" {recover, reject}
             -> "resolves" {recover, reject}
             -> "=>" {recover, reject}
             -> "->" {recover, reject}

From M.A.Akhter at student.tudelft.nl  Sun Sep 11 23:10:59 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 11 Sep 2011 21:10:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23318 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language:
	META-INF src/jdbm src/jdbm/btree
	src/org/spoofax/interpreter/library/language src/org/spoofax/in...
Message-ID: <20110911211059.51A80108C023@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Sep 11 21:10:58 2011
New Revision: 23318
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23318&sc=1

Log:
- Index Implementation for spoofax package , module 
- Updates on PrimaryTreeMap(hashmap powered by b+ tree)
- Unit tests to verify Package & Module Lookup Table is working as expected.
- Adding Listeners to keep symbol table consistent in case of updates and removal of SpxCompilationUnits
- quick note on In-progress stuff : integration with Spoofaxlang + cleanup + generic symbol table supporting scope tree.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java
      - copied, changed from r23283, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_desriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
      - copied, changed from r23283, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_add_module.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
      - copied, changed from r23283, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitSymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
      - copied, changed from r23283, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexTests.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_add_module.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitSymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/PrimaryTreeMap.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSecondarySortedMap.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentStoreTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF	Sun Sep 11 21:10:58 2011	(r23318)
@@ -4,10 +4,13 @@
 Bundle-SymbolicName: org.spoofax.interpreter.library.language
 Bundle-Version: 1.0.0.qualifier
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
-Require-Bundle: org.spoofax.interpreter.core,
+Require-Bundle: org.junit,
+ org.junit4,
+ org.spoofax.interpreter.core,
  org.spoofax.terms;bundle-version="1.0.0",
  org.spoofax.jsglr;bundle-version="0.3.0",
  org.eclipse.core.runtime,
  org.eclipse.core.resources
+ 
 Export-Package: org.spoofax.interpreter.library.language,
  org.spoofax.interpreter.library.language.spxlang

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/PrimaryTreeMap.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/PrimaryTreeMap.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/PrimaryTreeMap.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -29,9 +29,11 @@
  * or <code<StoreReference</code> to minimalize size of index.
  *  
  * @author Jan Kotek
- *
+ *  
  * @param <K> key type
  * @param <V> value type
+ * 
+ * Modified by {@author adil akhter} to make it Java1.5 Compliance
  */
 
 public interface PrimaryTreeMap<K,V>  extends PrimaryMap<K,V>, SortedMap<K,V>{

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSecondarySortedMap.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSecondarySortedMap.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTreeSecondarySortedMap.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -12,7 +12,12 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ * 
+ * 
+ * Modified by {@author adil akhter} to make it Java1.5 Compliance 
+ *  
  ******************************************************************************/
+
 package jdbm.btree;
 
 import java.io.IOException;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -26,14 +26,25 @@
 		
 		SpxSemanticIndex spxIndex= new SpxSemanticIndex();
 		
+		//primitives for index initialization and management
 		add(new SPX_index_init(spxIndex));
 		add(new SPX_index_close(spxIndex));
 		add(new SPX_index_save(spxIndex));
 		
-		add(new SPX_index_add_module(spxIndex));
-		
+		//primitives to index spoofaxlang compilation unit 
 		add(new SPX_index_compilation_unit(spxIndex));
 		add(new SPX_index_compilation_unit_get(spxIndex));
+		
+		//primitives to index packages, language descriptions  and modules 
+		add(new SPX_index_package_declaration(spxIndex));
+		add(new SPX_index_language_desriptor(spxIndex));
+		add(new SPX_index_module_definition(spxIndex));
+		
+		add(new SPX_index_get_language_descriptor(spxIndex));
+		add(new SPX_index_get_package_declaration(spxIndex));
+		add(new SPX_index_get_module_declaration(spxIndex));
+		add(new SPX_index_get_module_definition(spxIndex));
+		
 	}
 
 	public String getOperatorRegistryName() {

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,91 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.io.Serializable;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+
+public abstract class BaseConstructDeclaration implements Serializable
+{
+	private static final long serialVersionUID = 1055862481052307186L;
+	
+	final IStrategoList id;
+	
+	public BaseConstructDeclaration(IStrategoList uri) {
+		super();
+		this.id = uri;
+	}
+	
+	public IStrategoList getId()
+	{
+		//returns String representation of the BaseConstruct.
+		return id;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		BaseConstructDeclaration other = (BaseConstructDeclaration) obj;
+		if (id == null) {
+			if (other.id != null)
+				return false;
+		} else if (!id.match(other.id))
+			return false;
+		return true;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "BaseConstructDeclaration [id=" + id + "]";
+	}
+	
+	public abstract IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade);  
+
+	public static IStrategoAppl toIdTerm ( ITermFactory factory ,  String constructorName , IStrategoList id)
+	{
+		IStrategoConstructor cons = factory.makeConstructor(constructorName, 1);
+		
+		return factory.makeAppl(cons, id);
+	}
+	
+	protected IStrategoTerm forceImploderAttachment(IStrategoTerm term) {
+		ImploderAttachment attach = ImploderAttachment.get(id);
+		if (attach != null) {
+			ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(), attach.getRightToken());
+		} 
+		else {
+			String fn = getFileLocation();
+			term.putAttachment(ImploderAttachment.createCompactPositionAttachment(
+					fn, 0, 0, 0, -1));
+		}
+		return term;
+	}
+	
+	protected String getFileLocation() {return null;}
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,17 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+interface IScope {
+    public String getScopeName();
+
+    public Scope getEnclosingScope();
+
+    public void define(SpxSymbol sym);
+    
+    public SpxSymbol resolve(String name);
+
+}
+
+interface ISpxType {
+	
+	public String getName();
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -5,7 +5,7 @@
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
 
-interface ISpxPersistenceManager {
+public interface ISpxPersistenceManager {
 
 	/**
 	 * Commits the unsaved and closes the connection.
@@ -18,8 +18,12 @@
 	
 	public <K,V> PrimaryHashMap<K,V> loadHashMap ( String mapName);
 
-	public SpxCompilationUnitSymbolTable  spxCompilcationUnitTable();
+	public SpxCompilationUnitTable  spxCompilcationUnitTable();
 
+	public SpxPackageLookupTable  spxPackageTable();
+	
+	public SpxModuleLookupTable spxModuleTable();
+	
 	public void commit() throws IOException;
 	
 	public boolean IsClosed();

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,218 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.StrategoListIterator;
+
+/**
+ * Defines several properties of the Language specified in the 
+ * package scope. 
+ * 
+ * @author Md. Adil Akhter
+ * Created On : Sep 3, 2011
+ */
+public class LanguageDescriptor extends BaseConstructDeclaration {
+
+	private static final long serialVersionUID = 7099736990601308645L;
+	
+	static final int LanguageNamesIndex = 1;
+	static final int LanguageIdsIndex = 2;
+	static final int EsvStartSymbolsIndex = 3;
+	static final int SdfStartSymbolsIndex = 4;
+	
+	private IStrategoList languageNames;
+	private IStrategoList languageIDs;
+	private IStrategoList esvDeclaredStartSymbols;
+	private IStrategoList sdfDeclaredStartSymbols;
+	
+	public LanguageDescriptor(IStrategoList id) {
+		super(id);
+	}
+	/**
+	 * @return the languageNames
+	 */
+	public IStrategoList getLanguageNames() {
+		return languageNames;
+	}
+	/**
+	 * @return the languageIDs
+	 */
+	public IStrategoList getLanguageIDs() {
+		return languageIDs;
+	}
+	/**
+	 * @return the esvDeclaredStartSymbols
+	 */
+	public IStrategoList getEsvDeclaredStartSymbols() {
+		return esvDeclaredStartSymbols;
+	}
+	/**
+	 * @return the sdfDeclaredStartSymbols
+	 */
+	public IStrategoList getSdfDeclaredStartSymbols() {
+		return sdfDeclaredStartSymbols;
+	}
+
+	public void addLanguageNames( ITermFactory fac , IStrategoList langNames) 
+	{ 
+		if (languageNames == null)
+			this.languageNames = fac.makeList();
+	
+		this.languageNames =  prepend(fac, languageNames , langNames);
+	}
+
+	public void addLanguageIDs( ITermFactory fac , IStrategoList langIds) 
+	{ 
+		languageIDs =  prepend(fac, languageIDs , langIds);
+	}
+	
+	public void addEsvDeclaredStartSymbols( ITermFactory fac , IStrategoList startSymbols)
+	{
+		this.esvDeclaredStartSymbols =  prepend(fac, this.esvDeclaredStartSymbols  , startSymbols);
+	}
+	
+	public void addSDFDeclaredStartSymbols( ITermFactory fac , IStrategoList startSymbols)
+	{
+		this.esvDeclaredStartSymbols =  prepend(fac, this.esvDeclaredStartSymbols  , startSymbols);
+	}
+	
+	public Iterable<String> asLanguageNameStrings()
+	{
+		Set<String> langNames = new HashSet<String>();
+		for (IStrategoTerm lName: StrategoListIterator.iterable(this.languageNames)) {
+			langNames.add(Tools.asJavaString(lName));
+		}
+		return langNames;
+	}
+	
+	/**
+	 * Creates a new instance of {@link LanguageDescriptor}
+	 * @param fac
+	 * @param decl
+	 * @return
+	 */
+	public static LanguageDescriptor newInstance(ITermFactory fac, LanguageDescriptor decl)
+	{
+		return newInstance(fac, 
+				decl.getId(), 
+				decl.languageIDs, 
+				decl.languageNames, 
+				decl.sdfDeclaredStartSymbols, 
+				decl.esvDeclaredStartSymbols);
+		
+	}
+
+	public static LanguageDescriptor newInstance( ITermFactory f,  IStrategoList packageId , IStrategoList languageIds, IStrategoList languageNames,IStrategoList sdfStartSymbols,IStrategoList esvStartSymbols)
+	{
+		LanguageDescriptor desc = new LanguageDescriptor(packageId);
+
+		desc.addLanguageIDs(f, languageIds);
+		desc.addLanguageNames( f, languageNames);
+		desc.addSDFDeclaredStartSymbols(f, sdfStartSymbols);
+		desc.addEsvDeclaredStartSymbols(f, esvStartSymbols);
+
+		return desc;
+	}
+	
+	private static IStrategoList prepend(ITermFactory fac, IStrategoList srcList, IStrategoList toPrepend) {
+		if ( toPrepend == null)
+			return srcList;
+		
+		if ( srcList == null)
+			srcList = fac.makeList();
+
+		for (IStrategoTerm result: StrategoListIterator.iterable(toPrepend)) {
+			srcList = fac.makeListCons(result, srcList);
+		}
+		return srcList;
+	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime
+				* result
+				+ ((esvDeclaredStartSymbols == null) ? 0
+						: esvDeclaredStartSymbols.hashCode());
+		result = prime * result
+				+ ((languageIDs == null) ? 0 : languageIDs.hashCode());
+		result = prime * result
+				+ ((languageNames == null) ? 0 : languageNames.hashCode());
+		result = prime
+				* result
+				+ ((sdfDeclaredStartSymbols == null) ? 0
+						: sdfDeclaredStartSymbols.hashCode());
+		return result;
+	}
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (!(obj instanceof LanguageDescriptor))
+			return false;
+		LanguageDescriptor other = (LanguageDescriptor) obj;
+		
+		if (esvDeclaredStartSymbols == null) {
+			if (other.esvDeclaredStartSymbols != null)
+				return false;
+		} else if (!esvDeclaredStartSymbols.match(other.esvDeclaredStartSymbols))
+			return false;
+		
+		if (languageIDs == null) {
+			if (other.languageIDs != null)
+				return false;
+		} else if (!languageIDs.match(other.languageIDs))
+			return false;
+		if (languageNames == null) {
+			if (other.languageNames != null)
+				return false;
+		} else if (!languageNames.match(other.languageNames))
+			return false;
+		if (sdfDeclaredStartSymbols == null) {
+			if (other.sdfDeclaredStartSymbols != null)
+				return false;
+		} else if (!sdfDeclaredStartSymbols.match(other.sdfDeclaredStartSymbols))
+			return false;
+		return true;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "LanguageDescriptor [languageNames=" + languageNames
+				+ ", languageIDs=" + languageIDs + ", esvDeclaredStartSymbols="
+				+ esvDeclaredStartSymbols + ", sdfDeclaredStartSymbols="
+				+ sdfDeclaredStartSymbols + "]";
+	}
+
+	@Override
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
+		
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		
+		IStrategoConstructor ctr = idxFacade.getLanguageDescriptorCon();
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageIdTerm(termFactory, this.getId());
+		
+		IStrategoTerm retTerm = termFactory.makeAppl(ctr, packageQNameAppl , this.languageNames , this.languageIDs , this.esvDeclaredStartSymbols , this.sdfDeclaredStartSymbols);
+		
+		return this.forceImploderAttachment(retTerm);
+	} 
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,127 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public class ModuleDeclaration extends BaseConstructDeclaration 
+{
+	private static final long serialVersionUID = -6249406731326662111L;
+	static final String _moduleIdContructorName = "Module";
+	
+	static final int ModuleTypedQNameIndex = 0;
+	static final int ModulePathIndex = 1;
+	static final int PackageTypedQNameIndex = 2;
+	static final int AstIndex = 3;
+	static final int AnalyzedAstIndex = 3;
+	
+	final String resourceAbsPath; 
+	
+	@Override protected String getFileLocation() {
+		return resourceAbsPath;
+	}
+
+	final IStrategoList enclosingPackageID;
+	
+	public ModuleDeclaration(String resourceAbsPath, IStrategoList id , IStrategoList packageID) {
+		super(id);
+		
+		this.resourceAbsPath = resourceAbsPath;
+		this.enclosingPackageID = packageID;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "ModuleDeclaration [ id= " + id 
+				+ ", packageId ="+ enclosingPackageID 
+				+ ", resourceAbsPath= " + resourceAbsPath+ "]";
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime * result
+				+ ((resourceAbsPath == null) ? 0 : resourceAbsPath.hashCode());
+		
+		result = prime * result + ((enclosingPackageID == null) ? 0 : enclosingPackageID.hashCode());
+		
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		ModuleDeclaration other = (ModuleDeclaration) obj;
+		if (resourceAbsPath == null) {
+			if (other.resourceAbsPath != null)
+				return false;
+		} else if (!resourceAbsPath.equals(other.resourceAbsPath))
+			return false;
+		
+		if (enclosingPackageID == null) {
+			if (other.enclosingPackageID!= null)
+				return false;
+		} else if (!enclosingPackageID.match(other.enclosingPackageID))
+			return false;
+		
+		return true;
+	}
+	
+	public static IStrategoList getModuleId(ITermFactory fac, IStrategoAppl moduleQName )
+	{
+		final IStrategoConstructor moduleQNameCons = fac.makeConstructor(_moduleIdContructorName, 1);
+		
+		if(moduleQNameCons == moduleQName.getConstructor())
+		{
+			return (IStrategoList)moduleQName.getSubterm(0);
+		}
+		else
+			throw new IllegalArgumentException("Invalid module qname : "+ moduleQName.toString());
+	}
+	
+	public static IStrategoAppl toModuleIdTerm(ITermFactory termFactory , ModuleDeclaration decl)
+	{
+		return toIdTerm(termFactory, _moduleIdContructorName, decl.getId());
+	}
+
+	/* Transforms {@link ModuleDeclaration} to following term-
+	 * 		ModuleDecl :  Module * String * Package -> Def
+	 * 
+	 * (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.BaseConstructDeclaration#toTerm(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
+	@Override
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
+		
+		ITermFactory termFactory = idxFacade.getTermFactory();
+
+		IStrategoConstructor moduleDeclCons = idxFacade.getModuleDeclCon();
+		
+		IStrategoAppl moduleQNameAppl =toModuleIdTerm( termFactory ,  this);
+		IStrategoString resAbsPathTerm = termFactory.makeString(resourceAbsPath) ;
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageIdTerm(termFactory, this.enclosingPackageID);
+		
+		IStrategoTerm retTerm = termFactory.makeAppl(moduleDeclCons,moduleQNameAppl,resAbsPathTerm,packageQNameAppl);
+		
+		return this.forceImploderAttachment(retTerm);
+	}
+}
+

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,64 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * @author Md. Adil Akhter
+ * Created On : Sep 7, 2011
+ */
+
+class ModuleDefinition  extends ModuleDeclaration 
+{
+	private static final long serialVersionUID = -5355795992567198473L;
+	
+	private IStrategoAppl ast;
+	private IStrategoAppl analyzedAst;
+	
+	/**
+	 * @param resourceAbsPath
+	 * @param id
+	 * @param packageID
+	 * @param ast
+	 * @param analyzedAst
+	 */
+	public ModuleDefinition(String resourceAbsPath, IStrategoList id, IStrategoList packageID , IStrategoAppl ast , IStrategoAppl analyzedAst) {
+		super(resourceAbsPath, id, packageID);
+		
+		this.ast = ast;
+		this.analyzedAst  = analyzedAst;
+	}
+	
+	public ModuleDefinition(ModuleDeclaration moduleDecl, IStrategoAppl ast , IStrategoAppl analyzedAst) {
+		this(moduleDecl.resourceAbsPath , moduleDecl.id, moduleDecl.enclosingPackageID , ast , analyzedAst);
+	}
+	
+	/* Transform {@link ModuleDefinition} to following terms :
+	 * 		ModuleDef :  Module * String * Package * Module * Module -> Def
+	 *  
+	 * (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration#toTerm(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
+	@Override
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
+
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		
+		IStrategoTerm moduleDeclarationTerm = super.toTerm(idxFacade);
+		IStrategoConstructor moduleDefCons = idxFacade.getModuleDeclCon();
+		
+		
+		IStrategoTerm retTerm = termFactory.makeAppl(moduleDefCons,
+				moduleDeclarationTerm.getSubterm(0),
+				moduleDeclarationTerm.getSubterm(1),
+				moduleDeclarationTerm.getSubterm(2),
+				ast,
+				analyzedAst);
+		
+		return this.forceImploderAttachment(retTerm);
+	}
+	
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentStoreTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentStoreTable.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentStoreTable.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -103,6 +103,7 @@
 	
 	/**
 	 * Gets the collection of values that are hashed using the key specified.
+	 * 
 	 * @param key  The Key whose associated value is to be returned
 	 * @return The values to which this key is mapped to in this Symbol Table. 
 	 * Returns empty list if no mapping for the keys is not found.   
@@ -142,7 +143,9 @@
 	}
 	
 	/**
-	 * Returns the physical storage keys. Given virtual key, it gets the physical keys for the storage elements.
+	 * Returns the physical storage keys. Given virtual key, 
+	 * it gets the physical keys for the storage elements.
+	 * 
 	 * @param key virtual key 
 	 * @return  Collection of Physical Storage Key
 	 */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -7,7 +7,8 @@
 import jdbm.RecordManager;
 
 /**
- * Generic MultiValue Symbol Table to store the symbols. Symbols are stored in memory and persisted
+ * Generic MultiValue Symbol Table to store the symbols. 
+ * Symbols are stored in memory and persisted
  * on the disk if committed via {@link SpxPersistenceManager}.
  * 
  * @author Md. Adil Akhter
@@ -16,9 +17,7 @@
 class MultiValuePersistentTable<K, V> {
 
 	private final PrimaryMap<K,ArrayList<V>> _primaryMap;
-	
 	private final RecordManager _recordManager;
-	
 	private String _mapName ;
 	
 	public MultiValuePersistentTable(String name, RecordManager manager)
@@ -30,9 +29,9 @@
 		_primaryMap = _recordManager.hashMap(_mapName);
 	}
 	
-	
 	/**
-	 * Clears the Map
+	 * removes all the entries from current map
+	 * 
 	 * @throws IOException 
 	 */
 	public void clear() throws IOException
@@ -42,7 +41,6 @@
 		_recordManager.commit();
 	}
 	
-	
 	/**
 	 * Defines symbol in the current symbol table. Define does not replace  
 	 * old symbol mapped using the key with the new one. It just adds the 
@@ -54,9 +52,7 @@
 	public void define(K key , V symbol)
 	{	
 		if ( _primaryMap.containsKey(key))
-		{
 			_primaryMap.get(key).add(symbol);
-		}
 		else
 		{
 			ArrayList<V> values = new ArrayList<V>(); 
@@ -66,4 +62,3 @@
 		}
 	}
 }
-

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,178 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public class PackageDeclaration extends BaseConstructDeclaration
+{
+	private static final long serialVersionUID = -9081890582103567413L;
+	private static final String _packageIdContructorName = "Package";
+	
+	static final int PACKAGE_ID_INDEX = 0;
+	static final int SPX_COMPILATION_UNIT_PATH = 1;
+	
+	final Set<String> resourceAbsPaths = new HashSet<String>();
+	
+	PackageDeclaration(IStrategoList id)
+	{
+		super(id);
+	}
+	
+	public PackageDeclaration(String resourceAbsPath, IStrategoList id) {
+		super(id);
+		
+		resourceAbsPaths.add(resourceAbsPath); 
+	}
+	
+	public void add(String resAbsolutePath)
+	{
+		resourceAbsPaths.add(resAbsolutePath);
+	}
+	
+	public void remove(String resAbsolutePath)
+	{
+		resourceAbsPaths.remove(resAbsolutePath);
+	}
+	
+	public Set<String> getAllFilePaths()
+	{
+		return resourceAbsPaths;
+	}
+	
+	public boolean doesNotExistInAnyFile()
+	{
+		return (resourceAbsPaths == null) || (resourceAbsPaths.size() == 0) ; 
+	}
+	
+	/* (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.BaseConstructDeclaration#toTerm(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
+	@Override
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		
+		IStrategoConstructor packageDeclCons = idxFacade.getPackageDeclCon();
+		IStrategoList absPathList = termFactory.makeList();
+		
+		for(String resourceAbsPath : resourceAbsPaths)
+		{
+			IStrategoString absPathTerm = termFactory.makeString(resourceAbsPath);
+			absPathList  = termFactory.makeListCons(absPathTerm, absPathList);
+		}	
+		
+		IStrategoTerm retTerm = termFactory.makeAppl(
+				packageDeclCons, 
+				toPackageIdTerm(termFactory, this),
+				absPathList 
+		);
+		
+		return this.forceImploderAttachment(retTerm);
+	}
+	
+	/**
+	 * Gets PackageID from Typed Package QName
+	 * @param fac
+	 * @param packageQName
+	 * @return
+	 */
+	public static IStrategoList getPackageId(ITermFactory fac,IStrategoAppl packageQName)
+	{
+		final IStrategoConstructor packageQNameCons = fac.makeConstructor("Package", 1);
+		
+		if(packageQNameCons == packageQName.getConstructor())
+		{
+			return (IStrategoList)packageQName.getSubterm(0);
+		}
+		else
+			throw new IllegalArgumentException("packageQName");
+	}
+	
+	/**
+	 * Converts to typed Package Qualified Name
+	 *  
+	 * @param termFactory
+	 * @param decl
+	 * @return
+	 */
+	public static IStrategoAppl toPackageIdTerm (ITermFactory termFactory , PackageDeclaration decl)
+	{
+		return toPackageIdTerm (termFactory, decl.getId());
+	}
+	
+	public static IStrategoAppl toPackageIdTerm (ITermFactory termFactory , IStrategoList id)
+	{
+		return toIdTerm(termFactory, _packageIdContructorName, id);
+	}
+	
+	/**
+	 * Creates a new instance of {@link PackageDeclaration} . It acts as a copy
+	 * constructor to clone {@code decl}.
+	 * 
+	 * @param decl an instance of {@link PackageDeclaration} to copy from. 
+	 * @return {@link PackageDeclaration}
+	 */
+	public static PackageDeclaration newInstance( PackageDeclaration decl)
+	{
+		if (decl == null) 
+			return decl;
+		
+		PackageDeclaration newDecl = new PackageDeclaration(decl.getId());
+		for( String str : decl.getAllFilePaths())
+		{
+			newDecl.add(str); 
+		}
+		return newDecl;
+	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "PackageDeclaration [id=" + id + ", resourceAbsPaths=" + resourceAbsPaths + "]";
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime
+				* result
+				+ ((resourceAbsPaths == null) ? 0 : resourceAbsPaths.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		PackageDeclaration other = (PackageDeclaration) obj;
+		if (resourceAbsPaths == null) {
+			if (other.resourceAbsPaths != null)
+				return false;
+		} else if (!resourceAbsPaths.equals(other.resourceAbsPaths))
+			return false;
+		return true;
+	}
+}
+
+
+
+

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java (from r23283, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java	Fri Sep  2 17:35:29 2011	(r23283, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -7,11 +7,11 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-class PackageScope  extends BaseScope {
+class PackageSymbol  extends BaseScope {
 	
 	private final String _scopeType = "Package" ;
 	
-	public PackageScope(IStrategoTerm id , ITermFactory factory) {
+	public PackageSymbol(IStrategoTerm id , ITermFactory factory) {
 		
 		super(id,factory);
 		
@@ -48,7 +48,7 @@
 			return false;
 		if (getClass() != obj.getClass())
 			return false;
-		PackageScope other = (PackageScope) obj;
+		PackageSymbol other = (PackageSymbol) obj;
 		if (_scopeType == null) {
 			if (other._scopeType != null)
 				return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit_get.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit_get.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit_get.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -17,40 +17,35 @@
 public class SPX_index_compilation_unit_get extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_compilation_unit_get";
-
 	private final SpxSemanticIndex index;
 
 	public SPX_index_compilation_unit_get(SpxSemanticIndex index) {
 		super(NAME, 0, 2);
 		this.index = index;
-	}
+	}	
 
-	/* (non-Javadoc)
+	/* Retrieve Spoofaxlang Compilation Unit mapped by absolute path.  
+	 * 
 	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
 	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) 
-	{
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){ 
 		boolean successStatement = false;
-		 
 		if ( Tools.isTermString(tvars[0]) && Tools.isTermString(tvars[1])) 
 		{
 			IStrategoString projectName = (IStrategoString)tvars[0];
 			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[1];
-			
 			try {
 				IStrategoTerm t = index.getCompilationUnit(projectName ,  spxCompilationUnitPath);
 				env.setCurrent(t);
-				
 				successStatement = true;
 			} 
 			catch(Exception ex)
 			{
-				// logging any un-handled exception 
+				// Logging any exception throw from the underlying symbol table. 
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
-		
 		return successStatement;
 	}
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,62 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * Primitive to retrieve LangaugeDescriptor from {@link SpxSemanticIndex} for a specified Package
+ * 
+ * @author Md. Adil Akhter
+ * Created On : Sep 11, 2011
+ */
+public class SPX_index_get_language_descriptor extends AbstractPrimitive {
+
+	private static String NAME = "SPX_index_get_language_descriptor";
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int PACKAGE_ID_INDEX = 1;
+	
+	private final SpxSemanticIndex index;
+
+	
+	public SPX_index_get_language_descriptor(SpxSemanticIndex index) {
+		super(NAME, 0, 2);
+		this.index = index;
+	}
+	
+	/* Retrieve Spoofaxlang LangaugeDescriptor for a specified Package. 
+	 * The typed qualified PackageID is specified in {@code tvars} 
+	 *
+	 * (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		boolean successStatement = false;
+		
+		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[PACKAGE_ID_INDEX])) 
+		{
+			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl typedPackageIdQName = (IStrategoAppl)tvars[PACKAGE_ID_INDEX];
+			try {
+				IStrategoTerm t = index.getModuleDeclaration(projectName, typedPackageIdQName);
+				env.setCurrent(t);
+				successStatement = true;
+			} 
+			catch(Exception ex)
+			{
+				// Logging any exception throw from the underlying symbol table. 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+			}
+		}
+		return successStatement;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,59 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * Primitive to retrieve ModuleDeclaration from {@link SpxSemanticIndex}
+ * 
+ * @author Md. Adil Akhter
+ * Created On : Sep 11, 2011
+ */
+public class SPX_index_get_module_declaration extends AbstractPrimitive {
+
+	private static String NAME = "SPX_index_get_module_declaration";
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int MODULE_ID_INDEX = 1;
+	
+	private final SpxSemanticIndex index;
+
+	public SPX_index_get_module_declaration(SpxSemanticIndex index) {
+		super(NAME, 0, 2);
+		this.index = index;
+	}
+	
+	/* Retrieve Spoofaxlang ModuleDeclaration with Module ID 
+	 * specified in {@code tvars}.    
+	 * 
+	 * {@code tvars} contains name of the project and typed qualified ModuleID  
+	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		boolean successStatement = false;
+		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[MODULE_ID_INDEX])) 
+		{
+			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl typedModuleQName = (IStrategoAppl)tvars[MODULE_ID_INDEX];
+			try {
+				IStrategoTerm t = index.getModuleDeclaration(projectName, typedModuleQName);
+				env.setCurrent(t);
+				successStatement = true;
+			} 
+			catch(Exception ex)
+			{
+				// Logging any exception throw from the underlying symbol table. 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+			}
+		}
+		return successStatement;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,53 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class SPX_index_get_module_definition extends AbstractPrimitive {
+
+	private static String NAME = "SPX_index_get_module_definition";
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int MODULE_ID_INDEX = 1;
+	
+	private final SpxSemanticIndex index;
+
+	public SPX_index_get_module_definition(SpxSemanticIndex index) {
+		super(NAME, 0, 2);
+		this.index = index;
+	}
+	
+	/* Retrieve Spoofaxlang ModuleDefinition with Module ID 
+	 * specified in {@code tvars}.    
+	 * 
+	 * {@code tvars} contains name of the project and typed qualified ModuleID  
+	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		boolean successStatement = false;
+		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[MODULE_ID_INDEX])) 
+		{
+			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl typedModuleQName = (IStrategoAppl)tvars[MODULE_ID_INDEX];
+			try {
+				IStrategoTerm t = index.getModuleDefinition(projectName, typedModuleQName);
+				env.setCurrent(t);
+				successStatement = true;
+			} 
+			catch(Exception ex)
+			{
+				// Logging any exception throw from the underlying symbol table. 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+			}
+		}
+		return successStatement;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,60 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Md. Adil Akhter
+ * Created On : Sep 11, 2011
+ */
+public class SPX_index_get_package_declaration extends AbstractPrimitive {
+
+	private static String NAME = "SPX_index_get_package_declaration";
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int PACKAGE_ID_INDEX = 1;
+	
+	private final SpxSemanticIndex index;
+
+	public SPX_index_get_package_declaration(SpxSemanticIndex index) {
+		super(NAME, 0, 2);
+		this.index = index;
+	}
+	
+	/* Retrieve Spoofaxlang ModuleDeclaration with Module ID 
+	 * specified in {@code tvars}.    
+	 * 
+	 * {@code tvars} contains name of the project and typed qualified ModuleID  
+	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		boolean successStatement = false;
+		
+		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[PACKAGE_ID_INDEX])) 
+		{
+			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl typedPackageIdQName = (IStrategoAppl)tvars[PACKAGE_ID_INDEX];
+			try {
+				IStrategoTerm t = index.getPackageDeclaration(projectName, typedPackageIdQName);
+				env.setCurrent(t);
+				
+				successStatement = true;
+			} 
+			catch(Exception ex)
+			{
+				// Logging any exception throw from the underlying symbol table. 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+			}
+		}
+		
+		return successStatement;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_desriptor.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_desriptor.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,56 @@
+/**
+ * 
+ */
+package org.spoofax.interpreter.library.language.spxlang;
+
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.net.URI;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Md. Adil Akhter
+ *
+ */
+public class SPX_index_language_desriptor extends AbstractPrimitive {
+
+	private static String NAME = "SPX_index_language_descriptor";
+
+	private final SpxSemanticIndex index;
+
+	public SPX_index_language_desriptor(SpxSemanticIndex index) {
+		super(NAME, 0, 2);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		boolean successStatement = false;
+
+		if (isTermString(tvars[0]) && isTermAppl(tvars[0])) {
+
+			IStrategoString projectName = (IStrategoString)tvars[0];
+			IStrategoAppl languageDescriptor= (IStrategoAppl) tvars[1];
+
+			try
+			{
+				successStatement = index.indexLanguageDescriptor(projectName, languageDescriptor);
+			}
+			catch(Exception ex)
+			{ 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+			}
+		}
+
+		return successStatement;	
+	}
+}
\ No newline at end of file

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java (from r23283, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_add_module.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_add_module.java	Fri Sep  2 17:35:29 2011	(r23283, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -3,43 +3,51 @@
  */
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.asJavaString;
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
-import java.net.URI;
-
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Md. Adil Akhter
  *
  */
-public class SPX_index_add_module extends AbstractPrimitive {
+public class SPX_index_module_definition extends AbstractPrimitive {
 
-	private static String NAME = "SPX_index_add_module";
+	private static String NAME = "SPX_index_module_definition";
 
 	private final SpxSemanticIndex index;
 
-	public SPX_index_add_module(SpxSemanticIndex index) {
-		super(NAME, 0, 1);
+	public SPX_index_module_definition(SpxSemanticIndex index) {
+		super(NAME, 0, 2);
 		this.index = index;
 	}
 
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (isTermAppl(tvars[0])) {
-			//IStrategoAppl entry = (IStrategoAppl) tvars[0];
-			//URI file = index.toFileURI(asJavaString(tvars[1]));
+		boolean successStatement = false;
+		
+		if (isTermString(tvars[0]) && isTermAppl(tvars[0])) {
+			
+			IStrategoString projectName = (IStrategoString)tvars[0];
+			IStrategoAppl moduleDef = (IStrategoAppl) tvars[1];
 			
-			//index.add(entry, asJavaString(tvars[1]));
-			return true;
-		} else {
-			return false;
+			try
+			{
+				successStatement = index.indexModuleDefinition(projectName, moduleDef);
+			}
+			catch(Exception ex)
+			{ 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+			}
 		}
+		
+		return successStatement;	
 	}
 }
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,56 @@
+/**
+ * 
+ */
+package org.spoofax.interpreter.library.language.spxlang;
+
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.net.URI;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Md. Adil Akhter
+ *
+ */
+public class SPX_index_package_declaration extends AbstractPrimitive {
+
+	private static String NAME = "SPX_index_package_declaration";
+
+	private final SpxSemanticIndex index;
+
+	public SPX_index_package_declaration(SpxSemanticIndex index) {
+		super(NAME, 0, 2);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		boolean successStatement = false;
+		
+		if (isTermString(tvars[0]) && isTermAppl(tvars[0])) {
+			
+			IStrategoString projectName = (IStrategoString)tvars[0];
+			IStrategoAppl packageDecl = (IStrategoAppl) tvars[1];
+			
+			try
+			{
+				successStatement = index.indexPackageDeclaration(projectName, packageDecl);
+			}
+			catch(Exception ex)
+			{ 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+			}
+		}
+		
+		return successStatement;	
+	}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -13,6 +13,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
+ * Primitive to remove compilation unit from the {@link SpxSemanticIndex}
+ * 
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -15,16 +15,14 @@
 	private static final long serialVersionUID = 4874917828420267542L;
 
 	private final long _recId;
-	
 	private int _version;
-	
 	private final URI _absPath;
 	
 	public SpxCompilationUnitInfo(URI absPath,long recourceId)
 	{
 		this (0 , absPath , recourceId);
 	}
-	
+
 	public SpxCompilationUnitInfo( int versionNo, URI absPath,long recourceId)
 	{
 		_recId = recourceId;
@@ -49,21 +47,22 @@
 		return new File(getAbsPath()).getAbsolutePath();
 	}
 
-	void IncrementVersionNo()
-	{
-		_version = _version + 1;
-	}
+	/**
+	 * Increment version no
+	 */
+	public void IncrementVersionNo() { _version = _version + 1; }
 
 	/**
 	 * Returns the Absolute Path of the given URI 
+	 * 
 	 * @param uri URI of the Resource. 
 	 * @return Absolute Path represented by the URI  
 	 */
 	public static String toAbsulatePath( URI uri)
 	{
 		return new File( uri).getAbsolutePath();
-		
 	}
+	
 	public String toString() {
 		return "SpxComplicationUnitResourceInfo [ResourceId=" + _recId
 				+ ", VersionNo=" + _version + ", AbsPath=" + _absPath + "]";
@@ -100,4 +99,21 @@
 			return false;
 		return true;
 	}
+	
+	/**
+	 * Creates a new instance of {@code inf}.
+	 * 
+	 * @param inf an instance of {@link SpxCompilationUnitInfo}
+	 * @return a cloned version of {@code inf}
+	 */
+	public static SpxCompilationUnitInfo newInstance( SpxCompilationUnitInfo inf)
+	{
+		if( inf == null) 
+			return null; 
+		else	
+			return new SpxCompilationUnitInfo(
+					inf.getVersionNo(), 
+					inf.getAbsPath() , 
+					inf.getRecId());
+	}
 }
\ No newline at end of file

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java (from r23283, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitSymbolTable.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitSymbolTable.java	Fri Sep  2 17:35:29 2011	(r23283, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -1,21 +1,39 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.io.IOException;
 import java.net.URI;
-
-import static org.spoofax.interpreter.library.language.spxlang.SpxCompilationUnitInfo.toAbsulatePath;
+import java.util.ArrayList;
+import java.util.List;
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
-
+import static org.spoofax.interpreter.library.language.spxlang.SpxCompilationUnitInfo.toAbsulatePath;
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
+import jdbm.RecordListener;
 
-class SpxCompilationUnitSymbolTable {
-	
-	PrimaryHashMap<String , SpxCompilationUnitInfo> _infoMap;
-	
-	PrimaryStoreMap<Long,IStrategoTerm> _spxUnitStoreMap;
+/**
+ * Record Listener for Compilation Unit.  
+ *  
+ * @author Md. Adil Akhter
+ * Created On : Sep 5, 2011
+ */
+interface ICompilationUnitRecordListener
+{
+	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener();
+}
+
+
+
+public class SpxCompilationUnitTable {
 	
+	private PrimaryHashMap<String , SpxCompilationUnitInfo> _infoMap;
+	private PrimaryStoreMap<Long,IStrategoTerm> _spxUnitStoreMap;
 	
+    /**
+     * Listeners which are notified about changes in records
+     */
+    protected List<RecordListener<String,SpxCompilationUnitInfo>> recordListeners = new ArrayList<RecordListener<String,SpxCompilationUnitInfo>>();
+    
 	/**
 	 * Creates a new instance of SymbolTable or loads existing SymbolTable with name specified  
 	 * in the following tableName argument.
@@ -23,20 +41,47 @@
 	 * @param tableName name of the SymbolTable
 	 * @param manager an instance of IPersistenceManager
 	 */
-	public SpxCompilationUnitSymbolTable(String tableName , ISpxPersistenceManager manager)
+	public SpxCompilationUnitTable(String tableName , ISpxPersistenceManager manager)
 	{
 		_infoMap = manager.loadHashMap(tableName+ "._infomap.idx");
 		_spxUnitStoreMap = manager.loadStoreMap(tableName + "._spxUnitStorageMap.idx");
 	}
 	
 	/**
+	 * Adds a {@code listener} in the collection of record listener 
+	 * @param listener
+	 */
+	public void addRecordListener(final RecordListener<String, SpxCompilationUnitInfo> listener) {
+		recordListeners.add((RecordListener<String, SpxCompilationUnitInfo>) listener);
+	}
+	
+	public void addRecordListener( final ICompilationUnitRecordListener rl)
+	{
+		this.addRecordListener(rl.getCompilationUnitRecordListener());
+	}
+	
+	public void removeRecordListener( final ICompilationUnitRecordListener rl)
+	{
+		this.removeRecordListener(rl.getCompilationUnitRecordListener());
+	}
+	
+	/**
+	 * Removes {@code listener} from the collection of record listeners
+	 * @param listener
+	 */
+	public void removeRecordListener(RecordListener<String, SpxCompilationUnitInfo> listener) {	
+		recordListeners.remove(listener);
+	}
+	
+	/**
 	 * Defines a new symbol table entry. If the entry is already present in the symboltable, 
 	 * it updates the existing entry by invoking {@link #update(URI, IStrategoTerm)}. 
 	 * 
 	 * @param absPath URI representing the absolute path of the Compilation Unit.   
 	 * @param compilationUnit compilation unit AST represented by {@link IStrategoTerm}
+	 * @throws IOException 
 	 */
-	public void define(URI absPath , IStrategoTerm compilationUnitRTree)
+	public void define(URI absPath , IStrategoTerm compilationUnitRTree) throws IOException
 	{	
 		String abspathString = toAbsulatePath(absPath);
 		
@@ -51,8 +96,9 @@
 	 * 
 	 * @param absPath
 	 * @param compilationUnitRTree
+	 * @throws IOException 
 	 */
-	private void add(URI absPath , IStrategoTerm compilationUnitRTree) 
+	private void add(URI absPath , IStrategoTerm compilationUnitRTree) throws IOException 
 	{
 		// adding Compilation Unit to the storemap
 		long resID = _spxUnitStoreMap.putValue(compilationUnitRTree);
@@ -60,7 +106,18 @@
 		// instantiating a new SpxCompilationUnitInfo object with the newly created resID
 		// and storing it in infomap
 		SpxCompilationUnitInfo newResInfo = new SpxCompilationUnitInfo(absPath,resID);
-		_infoMap.put(newResInfo.getAbsPathString(), newResInfo);
+		String key = newResInfo.getAbsPathString();
+		
+		
+		_infoMap.put(key, newResInfo);
+		
+		if(!recordListeners.isEmpty())
+		{	
+			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners)
+			{
+				r.recordInserted(key, newResInfo);
+			}
+		}
 	}
 	
 	
@@ -69,16 +126,26 @@
 	 * 
 	 * @param absPath
 	 * @param compilationUnitRTree
+	 * @throws IOException 
 	 */
-	private void update(URI absPath , IStrategoTerm compilationUnitRTree)
+	private void update(URI absPath , IStrategoTerm compilationUnitRTree) throws IOException
 	{	
 		
-		// key is already there in the info map .
-		SpxCompilationUnitInfo resInfoToUpdate = _infoMap.get( toAbsulatePath(absPath));
+		SpxCompilationUnitInfo oldValue = _infoMap.get(toAbsulatePath(absPath));
 		
-		_spxUnitStoreMap.put(resInfoToUpdate.getRecId(), compilationUnitRTree);
+		SpxCompilationUnitInfo newValue 
+			= SpxCompilationUnitInfo.newInstance(oldValue);
 		
-		resInfoToUpdate.IncrementVersionNo();
+		_spxUnitStoreMap.put(newValue.getRecId(), compilationUnitRTree);
+		newValue.IncrementVersionNo();
+	
+		if(!recordListeners.isEmpty())
+		{	
+			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners)
+			{
+				r.recordUpdated(toAbsulatePath(absPath), oldValue , newValue);
+			}
+		}
 	}
 	
 	
@@ -86,16 +153,23 @@
 	 * Removes a SPX Compilation Unit from the symbol table.
 	 * 
 	 * @param absPath URI for the SPXCompilationUnit to remove
+	 * @throws IOException 
 	 */
-	public void remove(URI absPath)
+	public void remove(URI absPath) throws IOException
 	{
 		String key = toAbsulatePath(absPath);
 		
-		SpxCompilationUnitInfo resInfoToUpdate = _infoMap.remove(key);
+		SpxCompilationUnitInfo removedValue = _infoMap.remove(key);
 		
-		if ( resInfoToUpdate != null)
+		if ( removedValue != null)
+			_spxUnitStoreMap.remove(removedValue.getRecId());
+		
+		if(!recordListeners.isEmpty())
 		{	
-			_spxUnitStoreMap.remove(resInfoToUpdate.getRecId());
+			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners)
+			{
+				r.recordRemoved(toAbsulatePath(absPath),removedValue);
+			}
 		}
 	}
 	
@@ -114,4 +188,5 @@
 		return _spxUnitStoreMap.get(retUnitData.getRecId());
 		
 	}
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -7,6 +7,7 @@
 
 import jdbm.InverseHashView;
 import jdbm.PrimaryHashMap;
+import jdbm.RecordListener;
 import jdbm.SecondaryHashMap;
 import jdbm.SecondaryKeyExtractor;
 import jdbm.SecondaryTreeMap;
@@ -15,14 +16,18 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.terms.TermFactory;
 
-class SpxModuleLookupTable {
+public class SpxModuleLookupTable implements ICompilationUnitRecordListener{
 	
-	private final PrimaryHashMap<IStrategoList, IStrategoAppl> _moduleDefinition;
+	private final PrimaryHashMap<IStrategoList, ModuleDeclaration> _moduleLookupMap; 
+	
+	/* TODO : Using separate HashMap due to the consideration of converting them store map
+	 * to load module AST lazily. 
+	 */
+	private final PrimaryHashMap<IStrategoList, IStrategoAppl> _moduleDefinition; 
 	private final PrimaryHashMap<IStrategoList, IStrategoAppl> _moduleAnalyzedDefinition;
 	
-	private final PrimaryHashMap<IStrategoList, ModuleDeclaration> _moduleLookupMap;
-	private final SecondaryTreeMap <String , IStrategoList , ModuleDeclaration> _uriMap;
-	private final SecondaryHashMap<IStrategoList, IStrategoList,ModuleDeclaration> _enclosingPackageIdReferences;
+	private final SecondaryHashMap <String , IStrategoList , ModuleDeclaration> _moduleByFileAbsPath;
+	private final SecondaryHashMap<IStrategoList, IStrategoList,ModuleDeclaration> _moduleByPackageId;
 
 	/**
 	 * Instantiates a lookup table for the base constructs (e.g. , packages and modules)of  Spoofaxlang.
@@ -38,7 +43,7 @@
 		_moduleLookupMap = manager.loadHashMap(tableName+ "._lookupModuleMap.idx");
 		
 		// read-only secondary view of the the lookup table . 
-		_uriMap = _moduleLookupMap.secondaryTreeMap(tableName+ "._urimap.idx", 
+		_moduleByFileAbsPath = _moduleLookupMap.secondaryHashMap(tableName+ "._moduleByFileAbsPath.idx", 
 				new SecondaryKeyExtractor<String, IStrategoList, ModuleDeclaration>() {
 
 			/**
@@ -54,7 +59,7 @@
 		}
 		);
 		
-		_enclosingPackageIdReferences = _moduleLookupMap.secondaryHashMap(tableName+ "._enclosingPackageIdReferences.idx", 
+		_moduleByPackageId = _moduleLookupMap.secondaryHashMap(tableName+ "._moduleByPackageId.idx", 
 				new SecondaryKeyExtractor<IStrategoList, IStrategoList, ModuleDeclaration>() {
 
 			/**
@@ -72,28 +77,88 @@
 		
 		this._moduleDefinition = manager.loadHashMap(tableName+ "._moduleDefinition.idx");
 		this._moduleAnalyzedDefinition = manager.loadHashMap(tableName+ "._moduleAnalyzedDefinition.idx");
+	
+		initRecordListener();
+	}
+	
+	private void initRecordListener()
+	{
+		_moduleLookupMap.addRecordListener(
+				new RecordListener<IStrategoList, ModuleDeclaration>() {
+
+					public void recordInserted(IStrategoList key,
+							ModuleDeclaration value) throws IOException {
+						//do nothing 
+						
+					}
+
+					public void recordUpdated(IStrategoList key,
+							ModuleDeclaration oldValue,
+							ModuleDeclaration newValue) throws IOException {
+						//do nothing 
+						
+					}
+
+					public void recordRemoved(IStrategoList key,
+							ModuleDeclaration value) throws IOException {
+					
+						// cleanup other table to make it consistent 
+						_moduleDefinition.remove(key);
+						_moduleAnalyzedDefinition.remove(key);
+					}
+				
+				}
+		);
 	}
 	
+	/** Size of the Symbol Table 
+	 * 
+	 * @return
+	 */
+	public int size() 
+	{
+		assert _moduleLookupMap.size() == _moduleDefinition.size();
+		assert _moduleLookupMap.size() == _moduleAnalyzedDefinition.size();
+		
+		return _moduleLookupMap.size();
+	}
 	/**
 	 * Defines a new entry in this symbol table 
 	 * 
 	 * @param info
 	 * @param compilationUnit
 	 */
-	public void define(ModuleDeclaration decl)
+	SpxModuleLookupTable define(ModuleDeclaration decl)
 	{	
 		_moduleLookupMap.put(decl.getId(), decl);
-		
+		return this;
 	}
 	
-	public void addModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
+	/**
+	 * Defines Module Definition in the Symbole Table
+	 * @param decl
+	 * @param originalModuleDefinition
+	 * @param analyzedModuleDefinition
+	 */
+	public void define(ModuleDeclaration decl, IStrategoAppl originalModuleDefinition , IStrategoAppl analyzedModuleDefinition)
+	{
+		this.define(decl)
+			.addModuleDefinition(decl.getId(), originalModuleDefinition)
+			.addAnalyzedModuleDefinition(decl.getId(), analyzedModuleDefinition);
+	}
+	
+	public SpxModuleLookupTable addModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
 	{
 		_moduleDefinition.put(id, moduleDefinition);
+		
+		return this;
 	}
 	
-	public void addAnalyzedModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
+	public SpxModuleLookupTable addAnalyzedModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
 	{
 		_moduleAnalyzedDefinition.put(id, moduleDefinition);
+		
+		return this;
 	}
 	
 	/**
@@ -103,47 +168,58 @@
 	 * @return {@link BaseConstructDeclaration} mapped by {@code id}
 	 */
 	public ModuleDeclaration remove(IStrategoList id)
-	{
-		if ( containsModuleDeclaration(id))
-		{
-			//removing module definition and analyzed module definition
-			
-			this._moduleDefinition.remove(id);
-			this._moduleAnalyzedDefinition.remove(id);
-		}
-		
+	{	
 		//removing module declaration from the table 
 		//and returning it.
 		return _moduleLookupMap.remove(id);
 	}
 	
 	/**
-	 * Returns {@link BaseConstructDeclaration} that is mapped by the specified {@code id} argument.
+	 * Returns {@link ModuleDeclaration} that is mapped by the specified {@code id} argument.
 	 * 
 	 * @param id
 	 * @return
 	 */
-	public ModuleDeclaration get(IStrategoList id) {
+	public ModuleDeclaration getModuleDeclaration(IStrategoList id) {
 		return _moduleLookupMap.get(id);
 	}
 	
+	/**
+	 * Check whether particular module exists in the Symbol Table 
+	 * 
+	 * @param id
+	 * @return
+	 */
 	public boolean containsModuleDeclaration(IStrategoList id)
 	{
 		return _moduleLookupMap.containsKey(id);
 	}
 	
+	/**
+	 * Gets a module definition 
+	 * 
+	 * @param id
+	 * @return
+	 */
 	public IStrategoAppl getModuleDefinition(IStrategoList id)
 	{
 		return this._moduleDefinition.get(id);
 	}
 	
+	/**
+	 * Gets module definition (analyzed) 
+	 * 
+	 * @param id
+	 * @return
+	 */
 	public IStrategoAppl getAnalyzedModuleDefinition(IStrategoList id)
 	{
 		return this._moduleAnalyzedDefinition.get(id);
 	}
 	
 	/**
-	 * Returns ModuleDeclarations mapped by absPath
+	 * Returns ModuleDeclarations mapped by a filepath. It actually returns 
+	 * all the module declaration exists in a file . 
 	 * 
 	 * @param absUri
 	 * @return
@@ -152,8 +228,8 @@
 	{
 		List<ModuleDeclaration> ret = new ArrayList<ModuleDeclaration>();
 	
-		for ( IStrategoList l: _uriMap.get(absUri))
-			ret.add(_uriMap.getPrimaryValue(l));
+		for ( IStrategoList l: _moduleByFileAbsPath.get(absUri))
+			ret.add(_moduleByFileAbsPath.getPrimaryValue(l));
 		return ret;
 	}
 	
@@ -161,8 +237,8 @@
 	{
 		List<ModuleDeclaration> ret = new ArrayList<ModuleDeclaration>();
 	
-		for ( IStrategoList l: _enclosingPackageIdReferences.get(packageID))
-			ret.add(_enclosingPackageIdReferences.getPrimaryValue(l));
+		for ( IStrategoList l: _moduleByPackageId.get(packageID))
+			ret.add(_moduleByPackageId.getPrimaryValue(l));
 		return ret;
 	}
 	
@@ -170,64 +246,67 @@
 	{
 		if( containsModuleDeclaration(moduleId))
 		{
-			return get(moduleId).enclosingPackageID;
+			return getModuleDeclaration(moduleId).enclosingPackageID;
 		}	
 		return null;
 	}
 	
+	
 	/**
-	 * added only for the testing purpose.
+	 * Removes all the module {@link ModuleDeclaration} located in the 
+	 * following URI : {@code absUri}
 	 *  
-	 * @param args
-	 * @throws IOException
+	 * @param absUri String representation of absolute path of the file 
+	 * 
 	 */
-	public static void main(String[] args) throws IOException { 
-		//TODO :  add actual unit tests
-		//TODO :  add reference to JUnit  
-		ISpxPersistenceManager manager = new SpxPersistenceManager( "test" , "c:/temp");
-		
-		SpxModuleLookupTable lookupTable = new SpxModuleLookupTable("lookup", manager);
-		
-		final TermFactory f = new TermFactory();
-		final String absPathString = "c:/temp/test.spx" ;
-		final String absPathString2 = "c:/temp/test2.spx" ;
-		
-		IStrategoList pId = f.makeList(f.makeString("test"));
-		
-		//module declaration 
-		IStrategoList idm1 = f.makeList(f.makeString("test") , f.makeString("m1"));
-		ModuleDeclaration m1 = new ModuleDeclaration(absPathString, idm1,pId );
-		
-		lookupTable.define(m1);
-		
-		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
-		ModuleDeclaration m2 = new ModuleDeclaration(absPathString, idm2,pId );
-		
-		lookupTable.define(m2);
-		
-		IStrategoList idm3 = f.makeList(f.makeString("test") , f.makeString("m3"));
-		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
-		
-		lookupTable.define(m3);
+	public void removeModuleDeclarationsByUri( String absUri)
+	{	
+		ArrayList<IStrategoList> list = new ArrayList<IStrategoList>();
 		
-		m2 = new ModuleDeclaration(absPathString2, idm2,pId );
-		lookupTable.define(m2);
+		// constructing a temporary list to be removed from 
+		// the symbol table. 
+		for ( IStrategoList l: _moduleByFileAbsPath.get(absUri))
+			list.add(l);
+		
+		// removing the package declaration from the lookup table.
+		for(Object o : list.toArray())
+			_moduleLookupMap.remove(o);
+	}
 	
-		
-		System.out.println("lookup for ID" + idm2 );
-		System.out.println("Result : " + lookupTable.get(idm2));
-		System.out.println();
-		
-		System.out.println("lookup for URI " + absPathString);
-		System.out.println("Result : " + lookupTable.moduleDeclarationsByUri(absPathString));
-		System.out.println();
-		
-		System.out.println("lookup for URI " + absPathString2);
-		System.out.println("Result : " + lookupTable.moduleDeclarationsByUri(absPathString2));
-		System.out.println();
-		
-		System.out.println("lookup for PackageID " + pId);
-		System.out.println("Result : " + lookupTable.moduleDeclarationsByPackageId(pId));
-		System.out.println();
+	
+	/**
+	 * Clears the symbol table
+	 */
+	public synchronized void clear()
+	{
+		this._moduleLookupMap.clear();
+		this._moduleDefinition.clear();
+		this._moduleAnalyzedDefinition.clear();
+	}
+	
+	
+	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener() {
+		return new RecordListener<String, SpxCompilationUnitInfo>() {
+
+			public void recordInserted(String key, SpxCompilationUnitInfo value)
+					throws IOException {
+				// do nothing 
+				
+			}
+
+			public void recordUpdated(String key,
+					SpxCompilationUnitInfo oldValue,
+					SpxCompilationUnitInfo newValue) throws IOException {
+				// do nothing 
+				
+			}
+
+			public void recordRemoved(String key, SpxCompilationUnitInfo value)
+					throws IOException {
+				
+				removeModuleDeclarationsByUri(key);
+				
+			}
+		};
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -2,25 +2,33 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.List;
+import java.util.HashSet;
+import java.util.Set;
 
 import jdbm.PrimaryHashMap;
+import jdbm.RecordListener;
+import jdbm.SecondaryHashMap;
 import jdbm.SecondaryKeyExtractor;
-import jdbm.SecondaryTreeMap;
 
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.terms.TermFactory;
+import org.spoofax.interpreter.terms.IStrategoString;
 
 /**
+ * SymbolTable for Spx Packages 
  * @author Md. Adil Akhter
  * Created On : Sep 1, 2011
  */
+public class SpxPackageLookupTable  implements ICompilationUnitRecordListener{
 
-class SpxPackageLookupTable {
-
+	// Symbol table that stores package declarations 
 	private final PrimaryHashMap<IStrategoList, PackageDeclaration> _packageLookupTable;
-	private final SecondaryTreeMap <String , IStrategoList , PackageDeclaration> _uriMap;
+	private final SecondaryHashMap <String , IStrategoList , PackageDeclaration> _uriMap;
 
+	//Symbol table for language descriptor
+	private final PrimaryHashMap<IStrategoList, LanguageDescriptor> _languageDescriptors;
+	private final SecondaryHashMap <String , IStrategoList , LanguageDescriptor> _packagesByLangaugeName;
+	
 	/**
 	 * Instantiates a lookup table for the base constructs (e.g. , packages and modules)of  Spoofaxlang.
 	 *  
@@ -35,7 +43,7 @@
 		_packageLookupTable = manager.loadHashMap(tableName+ "._lookupPackageMap.idx");
 		
 		// readonly secondary view of the the lookup table . 
-		_uriMap = _packageLookupTable.secondaryTreeMapManyToOne(tableName+ "._urimap.idx", 
+		_uriMap = _packageLookupTable.secondaryHashMapManyToOne(tableName+ "._urimap.idx", 
 				
 				new SecondaryKeyExtractor<Iterable<String>, IStrategoList, PackageDeclaration>() {
 					/**
@@ -46,107 +54,255 @@
 					 * @return secondary key to map the value with . 
 					 */
 					public Iterable<String> extractSecondaryKey(IStrategoList key, PackageDeclaration value) {
+						
 						return value.getAllFilePaths();
 					}
 			}
 		);
+		
+		initListeners();
+	
+		// initializing language Descriptor for the package   
+		_languageDescriptors = manager.loadHashMap(tableName+ "._languageDescriptors.idx");
+		
+		_packagesByLangaugeName = _languageDescriptors.secondaryHashMapManyToOne(tableName+ "._packagesByLangaugeName.idx", 
+				
+				new SecondaryKeyExtractor<Iterable<String>, IStrategoList, LanguageDescriptor>() {
+					/**
+					 * Returns the Secondary keys as Language Name Strings  
+					 *   
+					 * @param key current primary key 
+					 * @param value value to be mapped using primary key
+					 * @return secondary key to map the value with . 
+					 */
+					public Iterable<String> extractSecondaryKey(IStrategoList key, LanguageDescriptor value) {
+						return value.asLanguageNameStrings();
+					}
+			}
+		);
 	}
 	
+	/**
+	 * adding a record listener to remove/cleanup symbol table and make it consistent in several scenario.
+	 */
+	private void initListeners() {
+		
+		_packageLookupTable.addRecordListener(
+				new RecordListener<IStrategoList , PackageDeclaration>(){
+
+					public void recordInserted(IStrategoList key,
+							PackageDeclaration value) throws IOException {
+						// do nothing 
+					}
+					public void recordUpdated(IStrategoList key,
+							PackageDeclaration oldValue,
+							PackageDeclaration newValue) throws IOException {
+						
+							if(newValue.getAllFilePaths().size() == 0)
+							{
+								// since there is no URI left for the Package 
+								// removing it from the table.
+								_packageLookupTable.remove(key);
+								_languageDescriptors.remove(key);
+							}
+					}
+					public void recordRemoved(IStrategoList key,
+							PackageDeclaration value) throws IOException {
+						
+						//removing language descriptors 
+						_languageDescriptors.remove(key);
+						
+					}}
+		);
+	
+	}
 	
-	public void define( PackageDeclaration packageDeclaration )
+	/** Returns the size of the symbol table 
+	 * 
+	 * @return
+	 */
+	public int size() 
+	{
+		assert _packageLookupTable.size() ==  _languageDescriptors.size() ;
+		
+		return _packageLookupTable.size();
+	}
+	/**
+	 * Defines {@code PackageDeclaration} in current symbol table 
+	 * 
+	 * @param packageDeclaration an Instance of {@link PackageDeclaration}
+	 */
+	public void definePackageDeclaration( PackageDeclaration packageDeclaration )
 	{
 		assert packageDeclaration != null;
 		
 		_packageLookupTable.put( packageDeclaration.getId(), packageDeclaration);
 	}
 	
-	public boolean appendFilePath( IStrategoList key , String absPath )
+	/**
+	 * Defines {@link LanguageDescriptor}  for the Spx Package with {@code packageId} 
+	 * 
+	 * @param packageId Qualified ID of the package
+	 * @param newDesc {@link LanguageDescriptor} of package with ID  - {@code newDesc}
+	 */
+	public void defineLanguageDescriptor ( IStrategoList packageId, LanguageDescriptor newDesc) 
 	{
-		assert key!= null & absPath != null ;
+		if( containsPackage (packageId))
+		{
+			this._languageDescriptors.put(packageId, newDesc);
+		}
+		else
+			throw new IllegalArgumentException("Unknown Package ID : "+ packageId.toString());	
+	}
+	
+	/**
+	 * Adds a SPX Package Declaration location 
+	 * 
+	 * @param packageId Package ID represented by {@link IStrategoList} 
+	 * @param absPath
+	 * @return
+	 */
+	public boolean addPackageDeclarationLocation( IStrategoList packageId , String absPath )
+	{
+		assert packageId!= null & absPath != null ;
 		
-		PackageDeclaration decl  = _packageLookupTable.get(key);
+		PackageDeclaration decl  = PackageDeclaration.newInstance( _packageLookupTable.get(packageId) );
 		
 		if ( decl != null)
 		{
 			decl.add(absPath);
-			this.define(decl);
+			this.definePackageDeclaration(decl);
 			return true;
 		}
+		return false;
+	}
+	
+	public boolean removePackageDeclarationLocation( IStrategoList key , String absPath )
+	{
+		assert key!= null & absPath != null ;
 		
+		PackageDeclaration decl  = PackageDeclaration.newInstance( _packageLookupTable.get(key));
+		
+		if ( decl != null)
+		{
+			decl.remove(absPath);
+			
+			// redefining it again 
+			this.definePackageDeclaration(decl);
+			return true;
+		}
 		return false;
 	}
 	
-	public PackageDeclaration get(IStrategoList id) {
+	public PackageDeclaration getPackageDeclaration(IStrategoList id) {
 		return _packageLookupTable.get(id);
 	}
-	
+	/**
+	 * Returns language descriptor associated with id 
+	 * @param id package id whose language descriptor is to be returned
+	 * @return {@link LanguageDescriptor}
+	 */
+	public LanguageDescriptor getLangaugeDescriptor(IStrategoList id) {
+		return _languageDescriptors.get(id);
+	}
+
+	/**
+	 * Removes a PackageDeclaration from the table 
+	 * 
+	 * @param id Package Id whose language descriptor is to be returned 
+	 * and removed from the table. 
+	 * @return associated {@link PackageDeclaration}}
+	 */
 	public PackageDeclaration remove(IStrategoList id)
 	{
 		return _packageLookupTable.remove(id);
 	}
-	
+	/**
+	 * Returns Package located in the uri specified by {@code absUri}
+	 * @param absUri
+	 * @return {@link Iterable}}
+	 */
 	public Iterable<PackageDeclaration> packageDeclarationsByUri( String absUri)
 	{
-		List<PackageDeclaration> ret = new ArrayList<PackageDeclaration>();
+		Set<PackageDeclaration> ret = new HashSet<PackageDeclaration>();
 	
 		for ( IStrategoList l: _uriMap.get(absUri))
 			ret.add(_uriMap.getPrimaryValue(l));
-		
 		return ret;
 	}
 	
-	
 	/**
-	 * Only for testing purpose
-	 * @param args
-	 * @throws IOException 
+	 * Removes all packages located in the {@code absUri} 
+	 * 
+	 * @param absUri Absolute Path of the File 
 	 */
-	public static void main(String[] args) throws IOException {
-		ISpxPersistenceManager manager = new SpxPersistenceManager( "test" , "c:/temp");
-		
-		SpxPackageLookupTable lookupTable = new SpxPackageLookupTable("lookup", manager);
-		
-		final TermFactory f = new TermFactory();
-		final String absPathString1 = "c:/temp/test.spx" ;
-		final String absPathString2 = "c:/temp/test2.spx" ;
-		
-		//module declaration 
-		IStrategoList idp1 = f.makeList(f.makeString("test") , f.makeString("p1"));
-		PackageDeclaration p1 = new PackageDeclaration(absPathString2, idp1);
-		
-		lookupTable.define(p1);
-		
-		IStrategoList idp2 = f.makeList(f.makeString("test") , f.makeString("p2"));
-		PackageDeclaration  p2 = new PackageDeclaration(absPathString2, idp2);
-		p2.add(absPathString1);
-		
-		lookupTable.define(p2);
-		//saving and closing the persistence manager
-		manager.commitAndClose();
-		
-		
-		// loading the symbol table again
-		ISpxPersistenceManager manager1 = new SpxPersistenceManager( "test" , "c:/temp");
-		SpxPackageLookupTable  lookupTable1 = new SpxPackageLookupTable("lookup", manager1);
-		
-		System.out.println("lookup for ID" + idp2 );
-		System.out.println("Result : " + lookupTable1.get(idp2));
-		System.out.println();
-		
-		System.out.println("lookup for packages in the following URI : " + absPathString1);
-		System.out.println("Result : " + lookupTable1.packageDeclarationsByUri(absPathString1));
-		System.out.println();
+	public void removePackageDeclarationsByUri( String absUri)
+	{	
+		ArrayList<IStrategoList> list = new ArrayList<IStrategoList>();
 		
-		//update p1 with new uri . Will verify whether the changes are persisted  
-		lookupTable1.appendFilePath(idp2, absPathString2);
-		
-		System.out.println("lookup for ID . [Should return 2 URIs]" + idp2 );
-		System.out.println("Result : " + lookupTable1.get(idp2));
-		System.out.println();
+		// constructing a temporary list to be removed from 
+		// the symbol table. 
+		for ( IStrategoList l: _uriMap.get(absUri))
+			list.add(l);
 		
-		System.out.println("lookup for packages in the following URI : " + absPathString2);
-		System.out.println("Result : " + lookupTable1.packageDeclarationsByUri(absPathString2));
-		System.out.println();
+		// removing the package declaration from the lookup table.
+		for(Object o : list.toArray())
+			_packageLookupTable.remove(o);
+	}
+	
+	/**
+	 * Clears Symbol table  
+	 */
+	public synchronized void clear() { 
+		_packageLookupTable.clear();
+		_languageDescriptors.clear();
+	} 
+
+	/**
+	 * Checks whether the package with packageId exists in the symbol table.
+	 * @param packageId
+	 * @return
+	 */
+	public boolean containsPackage( IStrategoList packageId)
+	{
+		return _packageLookupTable.containsKey(packageId);
+	}
+
+	/**
+	 * Returns the packages indexed using languageName 
+	 * 
+	 * @param langaugeName
+	 * @return
+	 */
+	public Iterable<IStrategoList> getPackageIdsByLangaugeName( String langaugeName )
+	{
+		return _packagesByLangaugeName.get(langaugeName);
+	}
+	
+	public Iterable<IStrategoList> getPackageIdsByLangaugeName( IStrategoString langaugeName )
+	{
+		return getPackageIdsByLangaugeName(Tools.asJavaString(langaugeName));
 	}
 
+	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener() {
+		
+		return new RecordListener<String, SpxCompilationUnitInfo>() {
+			
+			public void recordUpdated(String key, SpxCompilationUnitInfo oldValue,
+					SpxCompilationUnitInfo newValue) throws IOException {
+				// do nothing 
+			}
+			
+			public void recordRemoved(String key, SpxCompilationUnitInfo value)
+					throws IOException {
+				removePackageDeclarationsByUri(key);
+				
+			}
+			
+			public void recordInserted(String key, SpxCompilationUnitInfo value)
+					throws IOException {
+				//do nothing 
+			}
+		};
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -19,16 +19,16 @@
  * @author Md. Adil Akhter
  * Created On : Aug 22, 2011
  */
-class SpxPersistenceManager implements ISpxPersistenceManager {
+public class SpxPersistenceManager implements ISpxPersistenceManager {
 
 	//TODO : create a registry that keeps all the loaded SymbolTable
 	//and perform operation on that.  
 	private final RecordManager _recordManager;
+	private final String indexDirectory;  
 	
-	private String indexDirectory;  
-	
-	private final SpxCompilationUnitSymbolTable _spxUnitsTable;  
-	
+	private SpxCompilationUnitTable _spxUnitsTable;  
+	private SpxPackageLookupTable _spxPackageTable;
+	private SpxModuleLookupTable _spxModuleTable;
 
 	public SpxPersistenceManager(String projectName, String projectAbsPath) throws IOException{
 		this(projectName, projectAbsPath+ "/.Index" , null);
@@ -45,15 +45,40 @@
 		// setting up the working directory for the Index 
 		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, indexDirectory + "/" + projectName + ".idx");
 	
-		//creating recordmanager for the particular project
+		//creating record manager for the particular project
 		_recordManager = RecordManagerFactory.createRecordManager(projectName , options);
 		
-		_spxUnitsTable = new SpxCompilationUnitSymbolTable(projectName+"_spxUnitTable", this);
+		initTables(projectName);
+		initListeners();
 	}
-	
-		
 
 	/**
+	 * Initializes Symbol Tables for {@code projectName} Project
+	 * 
+	 * @param projectName name of the Project 
+	 */
+	private void initTables(String projectName) {
+		
+		_spxUnitsTable   = new SpxCompilationUnitTable(projectName+"_spxUnitTable", this);
+		_spxPackageTable = new SpxPackageLookupTable(projectName+"_spxPackageTable", this);
+		_spxModuleTable  = new SpxModuleLookupTable(projectName+"_spxModuleTable", this);
+	}
+	
+	
+	/**
+	 * Initializes RecordListeners
+	 */
+	private void initListeners()
+	{
+		// chain record listeners among the tables. 
+		// If compilation unit is removed, automatically remove packages.
+		// If package is removed , automatically remove the modules that is located.
+		_spxUnitsTable.addRecordListener((ICompilationUnitRecordListener)_spxPackageTable);
+		_spxUnitsTable.addRecordListener((ICompilationUnitRecordListener)_spxModuleTable);
+	}
+	
+	
+	/**
 	 * Instantiates a new HashMap 
 	 * 
 	 * @param <K>
@@ -66,8 +91,6 @@
 		return _recordManager.hashMap(mapName) ;
 		
 	}
-	
-	
 	/**
 	 * Instantiates a new StoreHashMap
 	 * 
@@ -80,7 +103,6 @@
 		return _recordManager.storeMap(storeMapName);
 	}
 	
-	
 	/**
 	 * Commits any unsaved changes to the disk 
 	 * @throws IOException
@@ -90,7 +112,6 @@
 		_recordManager.commit();
 	}
 	
-	
 	/**
 	 * Closes RecordManager
 	 * 
@@ -110,8 +131,7 @@
 		this.close();
 	}
 
-	
-	public SpxCompilationUnitSymbolTable spxCompilcationUnitTable() {
+	public SpxCompilationUnitTable spxCompilcationUnitTable() {
 		
 		return _spxUnitsTable;
 	}
@@ -121,5 +141,13 @@
 		return _recordManager.IsClosed();
 		
 	}
+
+	public SpxPackageLookupTable spxPackageTable() {
+		return _spxPackageTable;
+	}
+
+	public SpxModuleLookupTable spxModuleTable() {
+		return _spxModuleTable;
+	}
 }
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,6 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+public class SpxPrimarySymbolTable {
+	
+	
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -20,6 +20,16 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
+interface IIndexer 
+{	
+	public void index(IStrategoString projectName , IStrategoAppl appl);
+}
+
+interface ISymbolResolver<T> 
+{	
+	public T get(IStrategoString projectName , IStrategoTerm key) throws Exception;
+}
+
 /**
  * Semantic Index to store the symbols of SPXlang projects. 
  *  
@@ -28,6 +38,8 @@
  */
 public class SpxSemanticIndex {
 
+	//TODO : have to do something about exception handling . Bored copying 
+	// same exception handling code again and again. 
 	
 	/**
 	 * Registry keeps the mapping of projectName to its own facade
@@ -68,33 +80,98 @@
 			throw er;
 		}	
 	}
-
-
-	/**
-	 * Adds entry to the Index 
-	 * 
-	 * @param entry
-	 * @param file
-	 */
-	public void add(String projectName , IStrategoAppl entry, String file)
+	
+	private boolean indexSymbol(IStrategoString projectName , IStrategoAppl appl , IIndexer indexer)
 	{
-		// adds entry to the table
-
+		boolean successStatement = false;
+		try {
+			indexer.index(projectName, appl);
+			successStatement  = true;
+		}
+		catch(IllegalStateException e)
+		{
+			tryCleanupResources(projectName);
+			throw e;
+		}
+		catch(Error er)
+		{
+			tryCleanupResources(projectName);
+			throw er;
+		}
 		
+		return successStatement;
+	}
+	
+	private <T> IStrategoTerm resolve(IStrategoString projectName , IStrategoTerm key , ISymbolResolver<T> resolver) throws Exception
+	{
+		try {
+			return (IStrategoTerm) resolver.get(projectName, key);
+		}
+		catch(IllegalStateException e)
+		{
+			tryCleanupResources(projectName);
+			throw e;
+		}
+		catch(Exception ex) { throw ex ;}
+		catch(Error er)
+		{
+			tryCleanupResources(projectName);
+			throw er;
+		}
 	}
 	
 	
-	// adds module definition in the index . 
-	public void addModuleDefinition(IStrategoTerm moduleDefinition , URI file)
+	// Index module definition . 
+	public boolean indexModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleDefinition)
 	{
-		
+		IIndexer idx = new IIndexer() {
+			@Override
+			public void index(IStrategoString projectName, IStrategoAppl appl) {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				idxFacade.indexModuleDefinition(moduleDefinition);
+			}
+		};
 
+		return indexSymbol(projectName, moduleDefinition,  idx);
+	}
+	
+	
+	public boolean indexPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageDecl) {
+		IIndexer idx = new IIndexer() {
+			@Override
+			public void index(IStrategoString projectName, IStrategoAppl appl) {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				idxFacade.indexPackageDeclaration(packageDecl);
+				}
+		};
+
+		return indexSymbol(projectName, packageDecl,  idx);
 	}
 
 	
-	public boolean indexCompilationUnit(IStrategoString projectName,
-			IStrategoString spxCompilationUnitPath,
-			IStrategoAppl spxCompilationUnitAST) throws IllegalStateException, Exception{
+	public boolean indexLanguageDescriptor(IStrategoString projectName,	final IStrategoAppl languageDescriptor) {
+		IIndexer idx = new IIndexer() {
+			@Override
+			public void index(IStrategoString projectName, IStrategoAppl appl) {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				idxFacade.indexLanguageDescriptor(languageDescriptor);
+				}
+		};
+
+		return indexSymbol(projectName, languageDescriptor,  idx);
+	}
+	
+	/**
+	 * Indexes spoofax lang Compilation Unit
+	 * 
+	 * @param projectName
+	 * @param spxCompilationUnitPath
+	 * @param spxCompilationUnitAST
+	 * @return true if the CompilationUnit is successfully indexed; otherwise  returns false. 
+	 * @throws IllegalStateException
+	 * @throws Exception
+	 */
+	public boolean indexCompilationUnit(IStrategoString projectName, IStrategoString spxCompilationUnitPath, IStrategoAppl spxCompilationUnitAST) throws IllegalStateException, Exception{
 
 		boolean successStatement = false;
 		
@@ -116,32 +193,74 @@
 		return successStatement;
 	}
 
-	public IStrategoTerm getCompilationUnit(IStrategoString projectName,
-			IStrategoString spxCompilationUnitPath) throws IllegalStateException{
+	
+	public IStrategoTerm getCompilationUnit(IStrategoString projectName, IStrategoString spxCompilationUnitPath) throws Exception{
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			@Override
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm key) {
 		
-		try 
-		{
-			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-			
-			return idxFacade.getCompilationUnit(spxCompilationUnitPath);
-		}
-		catch(IllegalStateException e)
-		{
-			tryCleanupResources(projectName);
-			throw e;
-		}
-		catch(Error er)
-		{
-			tryCleanupResources(projectName);
-			throw er;
-		}	
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				return idxFacade.getCompilationUnit((IStrategoString)key);
+			}
+		};
+		
+		return resolve(projectName, spxCompilationUnitPath, resolver);
 	}
 	
-	public boolean removeCompilationUnit(IStrategoString projectName,
-			IStrategoString spxCompilationUnitPath) throws IllegalStateException{
+	
+	public IStrategoTerm getPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			@Override
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				return idxFacade.getPackageDeclaration((IStrategoAppl)qname);
+			}
+		};
 		
-		boolean successStatement = false;
+		return resolve(projectName, packageTypedQname, resolver);
+	}
+
+	
+	public IStrategoTerm getModuleDeclaration(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception{
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			@Override
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				return idxFacade.getModuleDeclaration((IStrategoAppl)qname);
+			}
+		};
+		
+		return resolve(projectName, moduleTypedQname, resolver);
+	}
+	
+	public IStrategoTerm getModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception {
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			@Override
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				return idxFacade.getModuleDefinition((IStrategoAppl)qname);
+			}
+		};
 		
+		return resolve(projectName, moduleTypedQname, resolver);
+	}
+	
+	public IStrategoTerm getLanguageDescriptor(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			@Override
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.getLanguageDescriptor((IStrategoAppl)qname);
+			} 
+		};
+		
+		return resolve(projectName, packageTypedQname, resolver);
+	}
+
+	
+	public boolean removeCompilationUnit(IStrategoString projectName,IStrategoString spxCompilationUnitPath) throws IllegalStateException, IOException{
+		
+		boolean successStatement = false;
 		
 		try {
 			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
@@ -164,27 +283,28 @@
 	
 	/**
 	 * Saves the indexes of the project specified by the projectName
-	 * @param tvars Term representation of the projectName 
+	 * 
+	 * @param projectName Term representation of the projectName 
 	 * @return true if the operation is successful ; otherwise false.
 	 * @throws IOException 
 	 */
-	public boolean save(IStrategoTerm tvars) throws IllegalStateException, IOException
+	public boolean save(IStrategoTerm projectName) throws IllegalStateException, IOException
 	{
 		boolean retValue = false; 
 		try
 		{
-			SpxSemanticIndexFacade idxFacade = getFacade(tvars);
+			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 			idxFacade.persistChanges();
 			retValue = true;
 		}
 		catch(IllegalStateException e)
 		{
-			tryCleanupResources(tvars);
+			tryCleanupResources(projectName);
 			throw e;
 		}
 		catch(Error er)
 		{
-			tryCleanupResources(tvars);
+			tryCleanupResources(projectName);
 			throw er;
 		}
 		return retValue;
@@ -227,7 +347,6 @@
 		if (idxFactory == null)
 			throw new IllegalStateException("Spoofaxlang Semantic index not initialized");
 	}
-	
-	
+
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -5,57 +5,58 @@
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
-import java.util.HashMap;
 
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.terms.attachments.TermAttachmentStripper;
 
-
-
-class SpxSemanticIndexFacade {
+public class SpxSemanticIndexFacade {
 
 	private final ISpxPersistenceManager _persistenceManager;
-
 	private final String _projectName ; 
-
 	private final ITermFactory _termFactory;
-
 	private final IOAgent _agent;
-
 	private final SpxSemanticIndexEntryFactory _entryFactory;
+	private final TermAttachmentStripper _stripper;
+	public static final boolean DEBUG = true;
 	
-	private final TermAttachmentStripper stripper;
+	
+	private final IStrategoConstructor _moduleDefCon;
+	private final IStrategoConstructor _moduleDeclCon;
+	private final IStrategoConstructor _packageDeclCon;
+	private final IStrategoConstructor _languageDescriptorCon;
+
 	/**
 	 * Initializes the SemanticIndexFactory
-	 * @param projectName
-	 * @param termFactory
-	 * @throws IOException
+	 * @param projectName name of the project 
+	 * @param termFactory {@link ITermFactory}
+	 * @param agent {@link IOAgent}
+	 * @throws IOException throws {@link IOException} from underlying {@link SpxPersistenceManager}
 	 */
 	public SpxSemanticIndexFacade(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent) throws IOException
 	{
-		_projectName = asJavaString(projectName);	
+		_projectName = asJavaString(projectName);
+		
+		//TODO : consider removing following instance 
 		_entryFactory = new SpxSemanticIndexEntryFactory(termFactory);
 
-		//Sets the Term Factory 
 		_termFactory = termFactory;
-
-		//IOAgent to handle URI
 		_agent = agent;
+		_stripper = new TermAttachmentStripper(_termFactory);
 		
-		stripper = new TermAttachmentStripper(termFactory);
-		
-		String projectAbsPath = _agent.getWorkingDir();
-		
-		//Initializes persistent manager
-		_persistenceManager = new SpxPersistenceManager(_projectName , projectAbsPath);
-
+		_moduleDefCon  			= _termFactory.makeConstructor("ModuleDefinition", 5);
+		_moduleDeclCon 			= _termFactory.makeConstructor("ModuleDeclaration", 3);
+		_packageDeclCon 		= _termFactory.makeConstructor("PackageDeclaration", 2);
+		_languageDescriptorCon  = _termFactory.makeConstructor("LanguageDescriptor", 5);
 		
+		_persistenceManager = new SpxPersistenceManager(_projectName , _agent.getWorkingDir());
 	}
 
 	/**
@@ -86,24 +87,24 @@
 	}
 
 	/**
-	 * 
+	 * Returns an instance of the Persistence Manager active for the current Facade
 	 * @return
 	 */
-	public ISpxPersistenceManager getPersistenceManager()
+	ISpxPersistenceManager getPersistenceManager()
 	{
 		return _persistenceManager;
 	}
 
 	/**
+	 * Returns URI 
 	 * @param path
 	 * @return
 	 */
 	URI toFileURI(String path)
 	{
 		File file = new File(path);
-		return file.isAbsolute()
-		? file.toURI()
-				: new File(_agent.getWorkingDir(), path).toURI();
+		return	file.isAbsolute()? file.toURI()
+			  			 : new File(_agent.getWorkingDir(), path).toURI();
 	}
 
 	URI toFileURI(IStrategoTerm filePath) 
@@ -116,71 +117,478 @@
 		return file.toString();
 	}
 
-	public IOAgent getIOAgent() {
+	IOAgent getIOAgent() {
 		return _agent;
 	}
-
 	
 	/**
 	 * Prints error message
-	 * 
 	 * @param errMessage
 	 */
-	public void printError(String errMessage)
+	void printError(String errMessage)
 	{
 		_agent.printError(errMessage);
 	}
-
+	
 	/**
-	 * Adds CompilationUnit to the symbol table 
+	 * Force an imploder attachment for a term.
+	 * This ensures that there is always some form of position info,
+	 * and makes sure that origin info is not added to the term.
+	 * (The latter would be bad since we cache in {@link #term}.)
+	 */
+	public static IStrategoAppl forceImploderAttachment(IStrategoAppl term , URI file) {
+		
+		return forceImploderAttachment(term, term, file);
+	}
+	
+	public static IStrategoAppl forceImploderAttachment(IStrategoTerm id, IStrategoAppl term , URI file) {
+		
+		ImploderAttachment attach = ImploderAttachment.get(id);
+		if (attach != null) {
+			ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(), attach.getRightToken());
+		} else {
+			String fn = file == null ? null : file.toString();
+			term.putAttachment(ImploderAttachment.createCompactPositionAttachment(
+					fn, 0, 0, 0, -1));
+		}
+		return term;
+	}
+	
+	/**
+	 * Adds CompilationUnit in the symbol table.
 	 * 
-	 * @param spxCompilationUnitPath path of the SpxCompilation Unit. 
-	 * It can be a relative path (  relative to project) or absolute path. 
+	 * @param spxCompilationUnitPath path of the SpxCompilation Unit. It can be a relative path (  relative to project) or absolute path. 
 	 * @param spxCompilationUnitAST SPXCompilationUnit AST 
+	 * @throws IOException 
 	 */
-	public void indexCompilationUnit(
-			IStrategoString spxCompilationUnitPath,
-			IStrategoAppl spxCompilationUnitAST) {
+	public void indexCompilationUnit( IStrategoString spxCompilationUnitPath, IStrategoAppl spxCompilationUnitAST) throws IOException {
 
 		URI resUri = toFileURI(spxCompilationUnitPath); // Converting IStrategoString to File URI 
 		
-		ImploderAttachment astAttachment = ImploderAttachment.getCompactPositionAttachment(spxCompilationUnitAST, true);
-		IStrategoTerm astTerm = stripper.strip(spxCompilationUnitAST);
-		astTerm.putAttachment(astAttachment);
+		IStrategoTerm astTerm = toCompactPositionInfo(spxCompilationUnitAST);
 
-		//TODO : Implement Custom Serializer for the IStrategoTerm 
+		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+	
+		logMessage("Storing following compilation unit. Path : [" 
+					+  spxCompilationUnitPath +"]"
+					+ " AST: "+ spxCompilationUnitAST );
 		
-		SpxCompilationUnitSymbolTable table = _persistenceManager.spxCompilcationUnitTable();
 		table.define(resUri, astTerm);
 	}
 
+	/**
+	 * Returns CompilationUnit located in {@code spxCompilationUnitPath} as {@link IStrategoTerm}
+	 * 
+	 * @param spxCompilationUnitPath Location to the CompilationUnit
+	 * @return {@link IStrategoTerm} 
+	 */
 	public IStrategoTerm getCompilationUnit(IStrategoString spxCompilationUnitPath)
 	{
+		IStrategoAppl retTerm = null; 
 		URI resUri = toFileURI(spxCompilationUnitPath);
 		
-		SpxCompilationUnitSymbolTable table = _persistenceManager.spxCompilcationUnitTable();
+		logMessage("SpxSemanticIndexFacade.getCompilationUnit . Arguments : " + spxCompilationUnitPath);
+		
+		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+		
+		IStrategoAppl term = (IStrategoAppl)table.get(resUri);
+		
+		if ( term != null)
+			retTerm = forceImploderAttachment(term, resUri);
+		
+		logMessage("SpxSemanticIndexFacade.getCompilationUnit :  Returning Following APPL for uri " + resUri +  " : "+ retTerm);
 		
-		return table.get(resUri);
+		return retTerm;
 	}
 	
-	public void removeCompilationUnit( IStrategoString spxCompilationUnitPath )
+	/**
+	 * Removes CompilationUnit located in {@code spxCompilationUnitPath} file path.  
+	 * 
+	 * @param spxCompilationUnitPath file path
+	 * @throws IOException
+	 */
+	public void removeCompilationUnit( IStrategoString spxCompilationUnitPath ) throws IOException
 	{
 		URI resUri = toFileURI(spxCompilationUnitPath);
 		
-		SpxCompilationUnitSymbolTable table = _persistenceManager.spxCompilcationUnitTable();
+		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
 		
 		table.remove(resUri);
 	}
+
+	/**
+	 * Stores PackageDeclaration in Symbol Table 
+	 * 
+	 * @param packageDeclaration
+	 */
+	public void indexPackageDeclaration(IStrategoAppl packageDeclaration)
+	{
+		verifyDeclarationType(
+				packageDeclaration.getConstructor(), 
+				getPackageDeclCon(), 
+				"Illegal PackageDeclaration");
+	
+		indexPackageDeclaration(
+				(IStrategoAppl)  packageDeclaration.getSubterm(PackageDeclaration.PACKAGE_ID_INDEX), // package id
+				(IStrategoString)packageDeclaration.getSubterm(PackageDeclaration.SPX_COMPILATION_UNIT_PATH)  // package location absolute path  
+		);
+	}
+	
+	/**
+	 * Indexes Spoofaxlang PackageDeclaration 
+	 * 
+	 * @param packageIdAppl 
+	 * @param spxCompilationUnitPath
+	 */
+	public void indexPackageDeclaration(IStrategoAppl packageIdAppl, IStrategoString spxCompilationUnitPath	)
+	{
+		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
+		
+		IStrategoList packageId = PackageDeclaration.getPackageId(getTermFactory(), packageIdAppl);
+		
+		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
+		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
+		
+		if(table.containsPackage(packageId))
+			table.addPackageDeclarationLocation(
+					packageId, 
+					asJavaString(spxCompilationUnitPath));
+		else
+		{	
+			PackageDeclaration pDecl = new PackageDeclaration(
+					asJavaString(spxCompilationUnitPath), 
+					packageId);
+			table.definePackageDeclaration(pDecl);
+		}
+	}
+	
+	/**
+	 * Indexes LanguageDescriptor for a particular Package specified in {@code langaugeDescriptor}
+	 * 
+	 * @param languageDescriptor
+	 */
+	public void indexLanguageDescriptor (IStrategoAppl languageDescriptor)
+	{
+		verifyDeclarationType(languageDescriptor.getConstructor(), getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
+		
+		IStrategoList qualifiedPackageId = PackageDeclaration.getPackageId(getTermFactory(), (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
+		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
+		
+		if( table.containsPackage(qualifiedPackageId))
+		{
+			//TODO : move the following logic to extract information and 
+			//construct instance in respective classes . e.g. in LanguageDesrciptor class
+			qualifiedPackageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)qualifiedPackageId);
+		
+			IStrategoList lNames = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageNamesIndex));
+			IStrategoList lIds = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageIdsIndex));
+			IStrategoList lEsvStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.EsvStartSymbolsIndex));
+			IStrategoList lSDFStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.SdfStartSymbolsIndex));
+			
+			LanguageDescriptor current = table.getLangaugeDescriptor(qualifiedPackageId);
+			if( current != null)
+			{	
+				current.addEsvDeclaredStartSymbols(this.getTermFactory(), lEsvStartSymbols);
+				current.addSDFDeclaredStartSymbols(this.getTermFactory(), lSDFStartSymbols );
+				current.addLanguageIDs(this.getTermFactory(), lIds);
+				current.addLanguageNames(this.getTermFactory(), lNames);
+			}
+			else
+				current = LanguageDescriptor.newInstance(this.getTermFactory() , qualifiedPackageId , lIds, lNames,lSDFStartSymbols , lEsvStartSymbols);
+			
+			table.defineLanguageDescriptor(qualifiedPackageId, current);
+		}
+		else
+			throw new IllegalArgumentException( "Unknown Package Id : "+ qualifiedPackageId.toString());
+	}
+	
+	/**
+	 * Returns the package declaration indexed with {@code packageIdAppl} typed qualified name.
+	 * 
+	 * @param packageTypedQName
+	 * @return
+	 * @throws Exception 
+	 */
+	public IStrategoTerm getPackageDeclaration(IStrategoAppl packageTypedQName) throws IllegalArgumentException
+	{
+		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
+		
+		IStrategoList packageId = PackageDeclaration.getPackageId(getTermFactory(), packageTypedQName);
+		
+		PackageDeclaration decl = table.getPackageDeclaration(packageId);
+		
+		if (decl == null)
+			throw new IllegalArgumentException( "Unknown Package Id"+ packageTypedQName.toString());
+		
+		return decl.toTerm(this);
+	}
+	
+	/**
+	 * Returns {@link ModuleDeclaration} indexed with Module Id - {@code moduleTypeQName}  
+	 * 
+	 * @param moduleTypeQName
+	 * @return
+	 * @throws IllegalArgumentException If {@link ModuleDeclaration} with {@code moduleTypeQName} is not found 
+	 */
+	public IStrategoTerm getModuleDeclaration(IStrategoAppl moduleTypeQName) throws IllegalArgumentException
+	{
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		
+		IStrategoList moduleId = ModuleDeclaration.getModuleId(getTermFactory(), moduleTypeQName);
+		
+		ModuleDeclaration decl = table.getModuleDeclaration(moduleId);
+		
+		if (decl == null)
+			throw new IllegalArgumentException( "Unknown Module Id"+ moduleTypeQName.toString());
+		
+		return decl.toTerm(this);
+	}
+	
+	/** 
+	 * Returns ModuleDefinition for the Module with ID :  {@code moduleTypedQName}
+	 * 
+	 * @param moduleTypedQName
+	 * @return
+	 * @throws IllegalArgumentException
+	 */
+	public IStrategoTerm getModuleDefinition(IStrategoAppl moduleTypedQName) throws IllegalArgumentException
+	{
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		
+		IStrategoList qualifiedModuleId = ModuleDeclaration.getModuleId(getTermFactory(), moduleTypedQName);
+		
+		ModuleDeclaration decl = table.getModuleDeclaration(qualifiedModuleId);
+		
+		if (decl != null)
+		{	
+			ModuleDefinition def = new ModuleDefinition( decl , table.getModuleDefinition(qualifiedModuleId) , table.getAnalyzedModuleDefinition(qualifiedModuleId));
+			return def.toTerm(this);
+		}
+		else
+			throw new IllegalArgumentException( "Unknown Module Id"+ moduleTypedQName.toString());
+	}
+	
+	/**
+	 * Returns {@link LanguageDescriptor} for Spoofaxlang package with {@link packageTypedQName}}
+	 *  
+	 * @param packageTypedQName
+	 * @return {@link IStrategoTerm} representation of {@link IStrategoTerm}
+	 * @throws IllegalArgumentException if the package id is not found in the symbol table 
+	 * @throws Exception  If package Id is valid but does not have any language descriptor registered
+	 */
+	public IStrategoTerm getLanguageDescriptor ( IStrategoAppl packageTypedQName) throws IllegalArgumentException, Exception
+	{
+		IStrategoList  packageQName = PackageDeclaration.getPackageId(getTermFactory(), packageTypedQName);
+		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
+		
+		LanguageDescriptor desc = table.getLangaugeDescriptor(packageQName);
+		if ( desc == null)
+		{	
+			if( table.containsPackage(packageQName))
+				throw new IllegalArgumentException( "Unknown Package Id"+ packageTypedQName.toString());
+			else	
+				throw new SpxSymbolTableException("Not Found LanguageDescriptor for " + packageQName.toString()); 
+		}
+		return desc.toTerm(this);
+	}
+	
+	
+	/**
+	 * Removes PackageDeclaration mapped with the {@code spxCompilationUnitPath}
+	 * 
+	 * @param spxCompilationUnitPath
+	 * @param packageId
+	 */
+	public void removePackageDeclaration(
+			IStrategoString spxCompilationUnitPath , 
+			IStrategoList packageId)
+	{
+		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
+		
+		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
+		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
+		
+		
+		table.removePackageDeclarationLocation(
+				packageId, 
+				asJavaString(spxCompilationUnitPath));
+	}
+
+	
+	/**
+	 * Indexes {@code moduleDefinition}
+	 * 
+	 * @param moduleDefinition
+	 * @throws IllegalArgumentException
+	 */
+	public void indexModuleDefinition(IStrategoAppl moduleDefinition) throws IllegalArgumentException
+	{
+		verifyDeclarationType(moduleDefinition.getConstructor() , _moduleDefCon , "Illegal Module Definition" );
+		
+		indexModuleDefinition(	(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.ModuleTypedQNameIndex), 
+								(IStrategoString) moduleDefinition.getSubterm(ModuleDeclaration.ModulePathIndex), 
+								(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.PackageTypedQNameIndex),
+								(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.AstIndex),
+								(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.AnalyzedAstIndex)
+								);
+	}
+
+	/**
+	 * Indexes Module Definition, e.g. ModuleDef :  Module * String * Package * Term * Term -> Def
+	 * @param moduleQName
+	 * @param spxCompilationUnitPath
+	 * @param packageQName
+	 * @param ast
+	 * @param analyzedAst
+	 */
+	public void indexModuleDefinition(
+			IStrategoAppl moduleQName,
+			IStrategoString spxCompilationUnitPath ,
+			IStrategoAppl packageQName,
+			IStrategoAppl ast , 
+			IStrategoAppl analyzedAst)
+	{
+		
+		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
+		
+		IStrategoList moduleId = ModuleDeclaration.getModuleId(this.getTermFactory(), moduleQName);
+		IStrategoList packageId = PackageDeclaration.getPackageId(this.getTermFactory(), packageQName);
+
+		moduleId 				= (IStrategoList)toCompactPositionInfo(moduleId);
+		packageId 				= (IStrategoList)toCompactPositionInfo(packageId);
+		ast 					= (IStrategoAppl)strip(ast);
+		analyzedAst 			= (IStrategoAppl)strip(analyzedAst);
+		spxCompilationUnitPath  = (IStrategoString) strip(spxCompilationUnitPath);
+		
+		//verify whether the enclosing package exists in symbol table 
+		if (!_persistenceManager.spxPackageTable().containsPackage(packageId))
+			throw new IllegalArgumentException("Unknown Package : "+packageId.toString());
+
+		table.define(
+				new ModuleDeclaration(
+						toAbsulatePath(spxCompilationUnitPath) ,
+						moduleId, 
+						packageId)
+				,ast
+				,analyzedAst);
+	}
+
+	
+	/**
+	 * Saves(Commits) any unsaved data. 
+	 *  
+	 * @throws IOException
+	 */
 	public void persistChanges() throws IOException 
 	{
 		_persistenceManager.commit();
 	}
-
 	
+	/**
+	 * Closes any underlying open connection. 
+	 *  
+	 * @throws IOException
+	 */
 	public void close() throws IOException {
 		if (! isPersistenceManagerClosed())
 			_persistenceManager.commitAndClose();
 	}
 	
-	boolean isPersistenceManagerClosed() { return _persistenceManager.IsClosed();}
+	/**
+	 * Checks whether the underlying persistence manager is already open. 
+	 * 
+	 * @return true if PersistenceManage is open. Otherwise returns false.
+	 */
+	boolean isPersistenceManagerClosed() { 
+		return _persistenceManager.IsClosed();
+	}
+
+	/**
+	 * @return the ModuleDefinition Constructor
+	 */
+	IStrategoConstructor getModuleDefCon() {
+		return _moduleDefCon;
+	}
+
+	/**
+	 * @return the PackageDeclaration Constructor
+	 */
+	IStrategoConstructor getPackageDeclCon() {
+		return _packageDeclCon;
+	}
+	
+	IStrategoConstructor getModuleDeclCon() {
+		return _moduleDeclCon;
+	}
+
+	IStrategoConstructor getLanguageDescriptorCon() {
+		return _languageDescriptorCon;
+	}
+	
+	/**
+	 * @param spxCompilationUnitAST
+	 * @return
+	 */
+	private IStrategoTerm toCompactPositionInfo(IStrategoTerm term) {
+		
+		if( term == null) return term;
+		
+		ImploderAttachment astAttachment = ImploderAttachment.getCompactPositionAttachment(term, true);
+		IStrategoTerm astTerm = _stripper.strip(term);
+		astTerm.putAttachment(astAttachment);
+		return astTerm;
+	}
+
+	private IStrategoTerm strip(IStrategoTerm term)
+	{
+		return _stripper.strip(term);
+	}
+	
+	/**
+	 * Returns the Absolute Path of the given URI 
+	 * 
+	 * @param uri URI of the Resource. 
+	 * @return Absolute Path represented by the URI  
+	 */
+	private String toAbsulatePath( IStrategoString uri)
+	{
+		URI resUri = toFileURI(uri);
+		
+		return new File( resUri).getAbsolutePath();
+		
+	}
+
+	/**
+	 * Verify type of declaration . 
+	 * 
+	 * @param actual
+	 * @param expected
+	 * @param message
+	 */
+	private void verifyDeclarationType( IStrategoConstructor actual , IStrategoConstructor expected , String message)
+	{
+		if( actual != expected)
+			throw new IllegalArgumentException(message);
+	}
+	
+	/**
+	 * Logs message 
+	 * 
+	 * @param message
+	 */
+	private void logMessage(String message) {
+		
+		final String src = "["+ _projectName+ ": IndexFacade] ";
+		if(DEBUG)
+		{		
+			try {
+				_agent.getWriter(IOAgent.CONST_STDOUT).write(src + message+ "\n");
+			} catch (IOException e) {
+				// Like System.err.println, we swallow excpetions
+			}
+		}
+	}
+	
+	
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Fri Sep  9 13:27:56 2011	(r23317)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -36,7 +36,7 @@
 		else
 		{
 			SpxSemanticIndexFacade f = _registry.get(projectName);
-			if(f.isPersistenceManagerClosed())
+			if( (f!= null) && f.isPersistenceManagerClosed())
 			{
 				fac = new SpxSemanticIndexFacade(projectName, factory, agent);
 			}	
@@ -61,7 +61,7 @@
 	}
 	
 	
-	public void ClearAll()
+	public void clearAll()
 	{
 		_registry.clear();
 	}

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java (from r23283, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntry.java	Fri Sep  2 17:35:29 2011	(r23283, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -1,48 +1,58 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import java.io.Serializable;
-import java.net.URI;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.UUID;
 
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-/**
- * @author Md. Adil Akhter
- * Created On : Aug 20, 2011
- */
-class SpxSemanticIndexEntry {
+class ScopeIndentifier 
+{
+	private UUID _scopeId;
 	
-	private Scope _scope; 
+	public ScopeIndentifier( UUID scopeId)
+	{
+		_scopeId = scopeId;
+	}
 	
-	private IStrategoTerm data;
 	
-	public SpxSemanticIndexEntry (Scope scope)
+	public IScope resolve( ISpxPersistenceManager manager)
 	{
-		setScope(scope);
+		return null;
 	}
+	
+	
+}
 
-	public Scope getScope() {
-		return _scope;
-	}
 
-	private void setScope(Scope scope) {
-		this._scope = scope;
-	}
 
+/**
+ * @author Md. Adil Akhter
+ * Created On : Aug 20, 2011
+ */
+class SpxSymbol {
+	
+	private String _name;
+	private IStrategoTerm _data;
+	private ISpxType _type;
+	private ScopeIndentifier _scope;
+	
+	
+	public SpxSymbol (String name){	_name = name; }
+	public SpxSymbol (String name , ISpxType type){ this(name) ; _type = type;}
+	
+	public String getName() { return _name; }
+	
 	/**
 	 * @return the data
 	 */
 	protected IStrategoTerm getData() {
-		return data;
+		return _data;
 	}
 
 	/**
 	 * @param data the data to set
 	 */
 	protected void setData(IStrategoTerm data) {
-		this.data = data;
+		this._data = data;
 	}
 	
 	/* (non-Javadoc)
@@ -50,8 +60,7 @@
 	 */
 	@Override
 	public String toString() {
-		return "IndexEntry [_scope=" + _scope + ", data=" + data
-				+ "]";
+		return "SpxSymbol[_scope =" + _scope + ", data=" + _data + "]";
 	}
 
 	/* (non-Javadoc)
@@ -62,7 +71,7 @@
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + ((_scope == null) ? 0 : _scope.hashCode());
-		result = prime * result + ((data == null) ? 0 : data.hashCode());
+		result = prime * result + ((_data == null) ? 0 : _data.hashCode());
 		return result;
 	}
 
@@ -77,313 +86,155 @@
 			return false;
 		if (getClass() != obj.getClass())
 			return false;
-		SpxSemanticIndexEntry other = (SpxSemanticIndexEntry) obj;
+		SpxSymbol other = (SpxSymbol) obj;
 		if (_scope == null) {
 			if (other._scope != null)
 				return false;
 		} else if (!_scope.equals(other._scope))
 			return false;
-		if (data == null) {
-			if (other.data != null)
-				return false;
-		} else if (!data.match(other.data))
-			return false;
-		return true;
-	}
-}
-
-
-/**
- * @author Md. Adil Akhter
- * Created On : Sep 1, 2011
- */
-class SpxSemanticIndexKey extends SpxSemanticIndexEntry
-{	
-	public SpxSemanticIndexKey(Scope scope, IStrategoTerm key)
-	{
-		super(scope);
-	}
-	
-	public IStrategoTerm getKey()
-	{
-		return getData(); 
-		
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "SpxSemanticIndexKey [ " +
-				"key =" + getData().toString() +
-				"scope="  + getScope().toString() +
-				"]";
-	}
-}
-
-
-/**
- * @author Md. Adil Akhter
- * Created On : Sep 1, 2011
- */
-class SpxSemanticIndexSymbol extends SpxSemanticIndexEntry
-{
-	private final IStrategoTerm _key ;
-
-	public SpxSemanticIndexSymbol ( Scope scope, IStrategoTerm symbol, IStrategoTerm key)
-	{
-		super(scope);
-		
-		_key = key;
-		setData(symbol);
-	}
-	
-	/**
-	 * @return the _key
-	 */
-	public IStrategoTerm getKey() {
-		return _key;
-	}
-
-	public IStrategoTerm getValue()
-	{
-		return getData();
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = super.hashCode();
-		result = prime * result + ((_key == null) ? 0 : _key.hashCode());
-		return result;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (!super.equals(obj))
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		SpxSemanticIndexSymbol other = (SpxSemanticIndexSymbol) obj;
-		if (_key == null) {
-			if (other._key != null)
-				return false;
-		} else if (!_key.match(other._key))
-			return false;
-		return true;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "SpxSemanticIndexSymbol [ " +
-				"key=" + _key.toString() + 
-				"symbol=" + getData().toString() +
-				"scope="  + getScope().toString() +
-				"]";
-	}
-}
-
-abstract class BaseConstructDeclaration implements Serializable
-{
-	private static final long serialVersionUID = 1055862481052307186L;
-	
-	protected static final int PackageType = 1;
-	protected static final int ModuleType = 2;
-	
-	final IStrategoList id;
-	
-	public BaseConstructDeclaration(IStrategoList uri) {
-		super();
-		this.id = uri;
-	}
-	
-	public IStrategoList getId()
-	{
-		//returns String representation of the BaseConstruct.
-		return id;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + ((id == null) ? 0 : id.hashCode());
-		return result;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		BaseConstructDeclaration other = (BaseConstructDeclaration) obj;
-		if (id == null) {
-			if (other.id != null)
+		if (_data == null) {
+			if (other._data != null)
 				return false;
-		} else if (!id.match(other.id))
+		} else if (!_data.match(other._data))
 			return false;
 		return true;
 	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "BaseConstructDeclaration [id=" + id + "]";
-	}
 }
 
-class ModuleDeclaration extends BaseConstructDeclaration 
-{
-	private static final long serialVersionUID = -6249406731326662111L;
-	
-	final String resourceAbsPath; 
-	
-	final IStrategoList enclosingPackageID;
-	
-	public ModuleDeclaration(String resourceAbsPath, IStrategoList id , IStrategoList packageID) {
-		super(id);
-		
-		this.resourceAbsPath = resourceAbsPath;
-		this.enclosingPackageID = packageID;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "ModuleDeclaration [ id= " + id 
-				+ ", packageId ="+ enclosingPackageID 
-				+ ", resourceAbsPath= " + resourceAbsPath+ "]";
-	}
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = super.hashCode();
-		result = prime * result
-				+ ((resourceAbsPath == null) ? 0 : resourceAbsPath.hashCode());
-		
-		result = prime * result + ((enclosingPackageID == null) ? 0 : enclosingPackageID.hashCode());
-		
-		return result;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (!super.equals(obj))
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		ModuleDeclaration other = (ModuleDeclaration) obj;
-		if (resourceAbsPath == null) {
-			if (other.resourceAbsPath != null)
-				return false;
-		} else if (!resourceAbsPath.equals(other.resourceAbsPath))
-			return false;
-		
-		if (enclosingPackageID == null) {
-			if (other.enclosingPackageID!= null)
-				return false;
-		} else if (!enclosingPackageID.match(other.enclosingPackageID))
-			return false;
-		
-		return true;
-	}
-}
-
-class PackageDeclaration extends BaseConstructDeclaration
+class SpxScopedSymbol extends SpxSymbol implements IScope  
 {
-	private static final long serialVersionUID = -9081890582103567413L;
-	
-	final Set<String> resourceAbsPaths = new HashSet<String>();
-	
-	public PackageDeclaration(String resourceAbsPath, IStrategoList id) {
-		super(id);
-		
-		resourceAbsPaths.add(resourceAbsPath); 
-	}
-	
-	public  void add(String resAbsolutePath)
-	{
-		resourceAbsPaths.add(resAbsolutePath);
-	}
-	
-	public Set<String> getAllFilePaths()
-	{
-		 return resourceAbsPaths;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "PackageDeclaration [id=" + id + ", resourceAbsPaths=" + resourceAbsPaths + "]";
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = super.hashCode();
-		result = prime
-				* result
-				+ ((resourceAbsPaths == null) ? 0 : resourceAbsPaths.hashCode());
-		return result;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (!super.equals(obj))
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		PackageDeclaration other = (PackageDeclaration) obj;
-		if (resourceAbsPaths == null) {
-			if (other.resourceAbsPaths != null)
-				return false;
-		} else if (!resourceAbsPaths.equals(other.resourceAbsPaths))
-			return false;
-		return true;
-	}
-}
+	public SpxScopedSymbol(String name) {
+		super(name);
+		// TODO Auto-generated constructor stub
+	}
+
+	ScopeIndentifier _enclosingScope;
+	
+	@Override
+	public String getScopeName() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Scope getEnclosingScope() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public void define(SpxSymbol sym) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	@Override
+	public SpxSymbol resolve(String name) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+}
+//
+///**
+// * @author Md. Adil Akhter
+// * Created On : Sep 1, 2011
+// */
+//class SpxSemanticIndexKey extends SpxSymbol
+//{	
+//	public SpxSemanticIndexKey(Scope scope, IStrategoTerm key)
+//	{
+//		super(scope);
+//	}
+//	
+//	public IStrategoTerm getKey()
+//	{
+//		return getData(); 
+//	}
+//
+//	/* (non-Javadoc)
+//	 * @see java.lang.Object#toString()
+//	 */
+//	@Override
+//	public String toString() {
+//		return "SpxSemanticIndexKey [ " +
+//				"key =" + getData().toString() +
+//				"scope="  + getScope().toString() +
+//				"]";
+//	}
+//}
+//
+///**
+// * 
+// * @author Md. Adil Akhter
+// * Created On : Sep 1, 2011
+// */
+//class SpxSemanticIndexSymbol extends SpxSymbol
+//{
+//	private final IStrategoTerm _key ;
+//
+//	public SpxSemanticIndexSymbol ( Scope scope, IStrategoTerm symbol, IStrategoTerm key)
+//	{
+//		super(scope);
+//		
+//		_key = key;
+//		setData(symbol);
+//	}
+//	
+//	/**
+//	 * 
+//	 * @return the _key
+//	 */
+//	public IStrategoTerm getKey() {
+//		return _key;
+//	}
+//
+//	public IStrategoTerm getValue()
+//	{
+//		return getData();
+//	}
+//
+//	/* (non-Javadoc)
+//	 * @see java.lang.Object#hashCode()
+//	 */
+//	@Override
+//	public int hashCode() {
+//		final int prime = 31;
+//		int result = super.hashCode();
+//		result = prime * result + ((_key == null) ? 0 : _key.hashCode());
+//		return result;
+//	}
+//
+//	/* (non-Javadoc)
+//	 * @see java.lang.Object#equals(java.lang.Object)
+//	 */
+//	@Override
+//	public boolean equals(Object obj) {
+//		if (this == obj)
+//			return true;
+//		if (!super.equals(obj))
+//			return false;
+//		if (getClass() != obj.getClass())
+//			return false;
+//		SpxSemanticIndexSymbol other = (SpxSemanticIndexSymbol) obj;
+//		if (_key == null) {
+//			if (other._key != null)
+//				return false;
+//		} else if (!_key.match(other._key))
+//			return false;
+//		return true;
+//	}
+//
+//	/* (non-Javadoc)
+//	 * @see java.lang.Object#toString()
+//	 */
+//	@Override
+//	public String toString() {
+//		return "SpxSemanticIndexSymbol [ " +
+//				"key=" + _key.toString() + 
+//				"symbol=" + getData().toString() +
+//				"scope="  + getScope().toString() +
+//				"]";
+//	}
+//}
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableException.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableException.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,28 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+/**
+ * Custom Exception thrown to indicate symbol table lookup has been failed.  
+ * 
+ * @author Md. Adil Akhter
+ * Created On : Sep 11, 2011
+ */
+public class SpxSymbolTableException extends Exception {
+
+	private static final long serialVersionUID = 2412790462608500241L;
+
+	public SpxSymbolTableException() {
+		super();
+	}
+
+	public SpxSymbolTableException(String message, Throwable cause) {
+		super(message, cause);
+	}
+
+	public SpxSymbolTableException(String message) {
+		super(message);
+	}
+
+	public SpxSymbolTableException(Throwable cause) {
+		super(cause);
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,556 @@
+package org.spoofax.interpreter.library.language.tests;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Set;
+
+import org.junit.Test;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.LanguageLibrary;
+import org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager;
+import org.spoofax.interpreter.library.language.spxlang.LanguageDescriptor;
+import org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.SpxModuleLookupTable;
+import org.spoofax.interpreter.library.language.spxlang.SpxPackageLookupTable;
+import org.spoofax.interpreter.library.language.spxlang.SpxPersistenceManager;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.test.AbstractInterpreterTest;
+
+public class SpxLookupTableUnitTests  extends AbstractInterpreterTest{
+	
+	private ISpxPersistenceManager manager ;
+	private SpxPackageLookupTable symtable;
+	private SpxModuleLookupTable mSymTable;
+	
+	final String absPathString1 = "c:/temp/test.spx" ;
+	final String absPathString2 = "c:/temp/test2.spx" ;
+	
+	public SpxLookupTableUnitTests() {}
+
+	private Interpreter interpreter()
+	{
+		return itp;
+	}
+
+	private ITermFactory termFactory() {
+		return factory;
+	}
+
+	private IOAgent ioAgent() {
+		return itp.getIOAgent(); 
+	}
+	
+	@Override protected void setUp() throws Exception {
+		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
+		interpreter().addOperatorRegistry(new LanguageLibrary());
+		
+		manager = new SpxPersistenceManager( "test" , "c:/temp");
+		symtable = new SpxPackageLookupTable("lookupPackage", manager);
+		mSymTable = new SpxModuleLookupTable("lookupModule", manager);
+		
+		symtable.clear();
+	}
+	
+	@Override protected void tearDown() throws Exception {
+		symtable.clear();
+		mSymTable.clear();
+		
+		manager.commitAndClose();
+	}
+	
+	public void testShouldReturngPackageDeclarationbyUri() 
+	{
+		symtable.clear();
+		
+		//package declaration 
+		IStrategoList idp1 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p1"));
+		IStrategoList idp2 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p2"));
+		
+		PackageDeclaration  p1 = new PackageDeclaration(absPathString2, idp1);
+		PackageDeclaration  p2 = new PackageDeclaration(absPathString2, idp2);
+		p2.add(absPathString1);
+		
+		symtable.definePackageDeclaration(p1);
+		symtable.definePackageDeclaration(p2);
+		try 
+		{
+			manager.commit();
+			
+		}catch(Exception ex)
+		{
+			// do nothing	
+		}
+		
+		//setup expected
+		PackageDeclaration expected = p2;
+	
+		int expectedPackageDecls = 1;
+		
+		//getting actual test run result and comparing with expected 
+		int actualPackageDeclaration  = 0 ;
+		for(PackageDeclaration  actual: symtable.packageDeclarationsByUri(absPathString1))
+		{
+			actualPackageDeclaration = actualPackageDeclaration + 1;    
+			
+			assertEquals(expected , actual);
+			assertEquals(2 , actual.getAllFilePaths().size());
+		}	
+		
+		assertEquals(expectedPackageDecls, actualPackageDeclaration);
+	}
+	
+	public void testShouldReturnPackageDeclarationByQName()
+	{
+		//package declaration 
+		IStrategoList idp1 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p1"));
+		IStrategoList idp2 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p2"));
+		
+		PackageDeclaration p1 = new PackageDeclaration(absPathString2, idp1);
+		PackageDeclaration  p2 = new PackageDeclaration(absPathString2, idp2);
+		p2.add(absPathString1);
+		
+		symtable.definePackageDeclaration(p1);
+		symtable.definePackageDeclaration(p2);
+		
+		PackageDeclaration expected = p2;
+		PackageDeclaration  actual = symtable.getPackageDeclaration(idp2);
+
+		assertEquals(expected, actual);
+	}
+	
+	public void testUpdatingFileUrisShouldPersists()
+	{
+		symtable.clear();
+		
+		//package declaration 
+		IStrategoList idp1 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p1"));
+		IStrategoList idp2 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p2"));
+		
+		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idp1);
+		PackageDeclaration  p2 = new PackageDeclaration(absPathString2, idp2);
+		
+		symtable.definePackageDeclaration(p1);
+		symtable.definePackageDeclaration(p2);
+	
+		
+		//adding another uri in package declaration
+		symtable.addPackageDeclarationLocation(idp2, absPathString1);
+		
+		try 
+		{
+			manager.commit();
+		}catch(Exception ex){// do nothing	
+		}	
+		
+		//setup expected
+		int expectedPackageDecls = 2;
+		
+		//getting actual test run result and comparing with expected 
+		Set<PackageDeclaration> decls= (Set<PackageDeclaration>)symtable.packageDeclarationsByUri(absPathString1);
+		
+		PackageDeclaration test = symtable.getPackageDeclaration(idp1) ;
+		
+		assertEquals(expectedPackageDecls , decls.size());
+	}
+	
+	public void testRemovePackageDeclarationsByFileUri()
+	{
+		symtable.clear();
+			
+		//package declaration 
+		IStrategoList idp1 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p1"));
+		IStrategoList idp2 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p2"));
+		IStrategoList idp3 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p3"));
+			
+		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idp1);
+		PackageDeclaration p2  = new PackageDeclaration(absPathString1, idp2);
+		PackageDeclaration p3  = new PackageDeclaration(absPathString2, idp3);
+			
+		symtable.definePackageDeclaration(p1);
+		symtable.definePackageDeclaration(p2);
+		symtable.definePackageDeclaration(p3);
+		
+		
+		symtable.removePackageDeclarationsByUri(absPathString1);
+		
+		assertEquals(symtable.size(), 1);
+	}
+		
+	public void testNoFileUriShouldRemovePackageDeclaration()
+	{
+		symtable.clear();
+		
+		//package declaration 
+		IStrategoList idp1 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p1"));
+		IStrategoList idp2 = termFactory().makeList(termFactory().makeString("test") , termFactory().makeString("p2"));
+		
+		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idp1);
+		PackageDeclaration  p2 = new PackageDeclaration(absPathString2, idp2);
+		
+		
+		symtable.definePackageDeclaration(p1);
+		symtable.definePackageDeclaration(p2);
+	
+		try 
+		{
+			manager.commit();
+		}catch(Exception ex){// do nothing	
+		}	
+		
+		//adding another uri in package declaration
+		symtable.removePackageDeclarationLocation(idp1, absPathString1);
+		
+		
+		assertEquals(null , symtable.getPackageDeclaration(idp1));
+		
+	}
+
+	public void testLanguageDescriptorIsPersisted()
+	{
+		symtable.clear();
+		
+		ITermFactory factory = termFactory();
+		
+		//Defining packagedecl in the symbol table. 
+		IStrategoList idp1 = factory.makeList(factory.makeString("test") , factory.makeString("p1"));
+		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idp1);
+		symtable.definePackageDeclaration(p1);
+		
+		//adding langauge descriptor
+		LanguageDescriptor langDescriptor = LanguageDescriptor.newInstance(
+				factory,
+				idp1, 
+				factory.makeList( factory.makeString("id1lang") ,factory.makeString("id2lang")),    
+				factory.makeList( factory.makeString("langname2") ,factory.makeString("langname2")),
+				asSDFStartSymbols( new String[]{"Start" , "Package"}) , 
+				asEsvStartSymbols( new String[]{"Start" , "Package"})
+				);
+		
+		symtable.defineLanguageDescriptor(idp1, langDescriptor);
+		
+		
+		ArrayList<IStrategoList> actual = (ArrayList<IStrategoList>)symtable.getPackageIdsByLangaugeName("langname2");
+	
+		assertEquals( actual.size() , 1) ;
+		assertEquals(idp1, actual.get(0));
+	}	
+	
+	public void testUpdatingLanguageDescriptorIsPersisted()
+	{
+		symtable.clear();
+		
+		ITermFactory factory = termFactory();
+		
+		//Defining packagedecl in the symbol table. 
+		IStrategoList idp1 = factory.makeList(factory.makeString("test") , factory.makeString("p1"));
+		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idp1);
+		symtable.definePackageDeclaration(p1);
+		
+		//adding langauge descriptor
+		LanguageDescriptor langDescriptor = LanguageDescriptor.newInstance(
+				factory,
+				idp1, 
+				factory.makeList( factory.makeString("id1lang") ,factory.makeString("id2lang")),    
+				factory.makeList( factory.makeString("langname2") ,factory.makeString("langname2")),
+				asSDFStartSymbols( new String[]{"Start" , "Package"}) , 
+				asEsvStartSymbols( new String[]{"Start" , "Package"})
+				);
+		
+		symtable.defineLanguageDescriptor(idp1, langDescriptor);
+		
+		LanguageDescriptor langDescriptor2 = symtable.getLangaugeDescriptor(idp1);
+		langDescriptor2 = LanguageDescriptor.newInstance(factory, langDescriptor2);
+		langDescriptor2.addLanguageNames(factory, factory.makeList( factory.makeString("langname3") ,factory.makeString("langname4")));
+		
+		symtable.defineLanguageDescriptor(idp1, langDescriptor2);
+		
+		ArrayList<IStrategoList> actual = (ArrayList<IStrategoList>)symtable.getPackageIdsByLangaugeName("langname3");
+	
+		assertEquals( actual.size() , 1) ;
+		assertEquals(idp1, actual.get(0));
+	}	
+	
+	public void testShouldThrowIllegalArgumentExceptionIfUnknownPackageId()
+	{
+		symtable.clear();
+		
+		ITermFactory factory = termFactory();
+		
+		//Defining packagedecl in the symbol table. 
+		IStrategoList idp1 = factory.makeList(factory.makeString("test") , factory.makeString("p1"));
+		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idp1);
+		
+		//Not defining package declaration. Hence package p1 is unknown 
+		//is unknown in this current symbol table.
+		//symtable.definePackageDeclaration(p1);
+		
+		//adding langauge descriptor
+		LanguageDescriptor langDescriptor = LanguageDescriptor.newInstance(
+				factory,
+				idp1, 
+				factory.makeList( factory.makeString("id1lang") ,factory.makeString("id2lang")),    
+				factory.makeList( factory.makeString("langname2") ,factory.makeString("langname2")),
+				asSDFStartSymbols( new String[]{"Start" , "Package"}) , 
+				asEsvStartSymbols( new String[]{"Start" , "Package"})
+				);
+		try
+		{
+			symtable.defineLanguageDescriptor(idp1, langDescriptor);
+		}catch (IllegalArgumentException ex)
+		{
+			// test is ok  since is it throwing corrent excpetion.  
+			// TODO : check why @Test(expected = IllegalArgumentException.class) is not working.
+		}
+	}
+	
+	private IStrategoList asEsvStartSymbols(String [] esvStartSymbolsStrings)
+	{
+		ITermFactory factory = termFactory();
+		IStrategoList list = factory.makeList();
+		IStrategoConstructor sortCons = factory.makeConstructor("Sort", 1);
+		
+		for(String s : esvStartSymbolsStrings)
+		{
+			IStrategoString esvStartSymbol = factory.makeString(s);
+			IStrategoAppl sortAppl = factory.makeAppl(sortCons, esvStartSymbol);
+			
+			list = factory.makeListCons(sortAppl, list);
+		}
+		return list;
+	}
+	
+	private IStrategoList asSDFStartSymbols(String [] sdfStartSymbolsStrings)
+	{
+		ITermFactory factory = termFactory();
+		IStrategoList list = factory.makeList();
+		IStrategoConstructor sortCons = factory.makeConstructor("sort", 1);
+		
+		for(String s : sdfStartSymbolsStrings)
+		{
+			IStrategoString esvStartSymbol = factory.makeString(s);
+			IStrategoAppl sortAppl = factory.makeAppl(sortCons, esvStartSymbol);
+			
+			list = factory.makeListCons(sortAppl, list);
+		}
+		return list;
+	}
+	
+	public void testModuleDefinitionDefineShouldPersists() throws IOException
+	{
+		ITermFactory f = this.termFactory();
+		SpxModuleLookupTable lookupTable = mSymTable;
+		
+		IStrategoList pId = f.makeList(f.makeString("test"));
+		IStrategoList pId2 = f.makeList(f.makeString("test2"));
+		
+		//module declaration 
+		IStrategoList idm1 = f.makeList(f.makeString("test") , f.makeString("m1"));
+		ModuleDeclaration m1 = new ModuleDeclaration(absPathString1, idm1,pId );
+		
+		
+		lookupTable.define(
+					m1 , 
+					(IStrategoAppl)getModuleDefinition("m1") , 
+					(IStrategoAppl)getAnalyzedModuleDefinition("m1")
+				);
+		
+		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
+		ModuleDeclaration m2 = new ModuleDeclaration(absPathString1, idm2,pId2 );
+		
+		lookupTable.define(
+				m2 , 
+				(IStrategoAppl)getModuleDefinition("m2") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition("m2")
+			);
+	
+		
+		IStrategoList idm3 = f.makeList(f.makeString("test") , f.makeString("m3"));
+		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
+
+		lookupTable.define(
+				m3 , 
+				(IStrategoAppl)getModuleDefinition("m3") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition("m3")
+			);
+	
+		assertEquals(3, lookupTable.size());
+		
+		manager.commit();
+		
+		
+		ModuleDeclaration expected = m1;
+		ModuleDeclaration actual =  lookupTable.getModuleDeclaration(idm1);
+		
+		assertEquals(expected , actual);
+		
+	}
+	
+	public void testShouldReturnModuleByPackageId() throws IOException
+	{
+		ITermFactory f = this.termFactory();
+		SpxModuleLookupTable lookupTable = mSymTable;
+		
+		IStrategoList pId = f.makeList(f.makeString("test"));
+		IStrategoList pId2 = f.makeList(f.makeString("test2"));
+		
+		//module declaration 
+		IStrategoList idm1 = f.makeList(f.makeString("test") , f.makeString("m1"));
+		ModuleDeclaration m1 = new ModuleDeclaration(absPathString1, idm1,pId );
+		
+		
+		lookupTable.define(
+					m1 , 
+					(IStrategoAppl)getModuleDefinition("m1") , 
+					(IStrategoAppl)getAnalyzedModuleDefinition("m1")
+				);
+		
+		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
+		ModuleDeclaration m2 = new ModuleDeclaration(absPathString1, idm2,pId2 );
+		
+		lookupTable.define(
+				m2 , 
+				(IStrategoAppl)getModuleDefinition("m2") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition("m2")
+			);
+	
+		
+		IStrategoList idm3 = f.makeList(f.makeString("test") , f.makeString("m3"));
+		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
+
+		lookupTable.define(
+				m3 , 
+				(IStrategoAppl)getModuleDefinition("m3") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition("m3")
+			);
+	
+		assertEquals(3, lookupTable.size());
+		
+		manager.commit();
+		
+		
+		ArrayList<ModuleDeclaration> modulesByPackageID 
+			= (ArrayList<ModuleDeclaration>)lookupTable.moduleDeclarationsByPackageId(pId);
+		
+		assertEquals(2, modulesByPackageID.size());
+	}
+	
+	public void testShouldReturnModuleDeclarationByFilePath() throws IOException
+	{
+		ITermFactory f = this.termFactory();
+		SpxModuleLookupTable lookupTable = mSymTable;
+		
+		IStrategoList pId = f.makeList(f.makeString("test"));
+		IStrategoList pId2 = f.makeList(f.makeString("test2"));
+		
+		//module declaration 
+		IStrategoList idm1 = f.makeList(f.makeString("test") , f.makeString("m1"));
+		ModuleDeclaration m1 = new ModuleDeclaration(absPathString1, idm1,pId );
+		
+		
+		lookupTable.define(
+					m1 , 
+					(IStrategoAppl)getModuleDefinition("m1") , 
+					(IStrategoAppl)getAnalyzedModuleDefinition("m1")
+				);
+		
+		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
+		ModuleDeclaration m2 = new ModuleDeclaration(absPathString2, idm2,pId2 );
+		
+		lookupTable.define(
+				m2 , 
+				(IStrategoAppl)getModuleDefinition("m2") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition("m2")
+			);
+	
+		
+		IStrategoList idm3 = f.makeList(f.makeString("test") , f.makeString("m3"));
+		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
+
+		lookupTable.define(
+				m3 , 
+				(IStrategoAppl)getModuleDefinition("m3") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition("m3")
+			);
+	
+		assertEquals(3, lookupTable.size());
+		
+		manager.commit();
+		
+		ArrayList<ModuleDeclaration> modulesByFileUri 
+			= (ArrayList<ModuleDeclaration>)lookupTable.moduleDeclarationsByUri(absPathString1);
+		
+		assertEquals(1, modulesByFileUri.size());
+	}
+	
+	
+	public void testShouldRemoveModuleDeclarationByFilePath() throws IOException
+	{
+		ITermFactory f = this.termFactory();
+		
+		SpxModuleLookupTable lookupTable = mSymTable;
+		
+		IStrategoList pId = f.makeList(f.makeString("test"));
+		IStrategoList pId2 = f.makeList(f.makeString("test2"));
+		
+		//module declaration 
+		IStrategoList idm1 = f.makeList(f.makeString("test") , f.makeString("m1"));
+		ModuleDeclaration m1 = new ModuleDeclaration(absPathString1, idm1,pId );
+		
+		
+		lookupTable.define(
+					m1 , 
+					(IStrategoAppl)getModuleDefinition("m1") , 
+					(IStrategoAppl)getAnalyzedModuleDefinition("m1")
+				);
+		
+		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
+		ModuleDeclaration m2 = new ModuleDeclaration(absPathString2, idm2,pId2 );
+		
+		lookupTable.define(
+				m2 , 
+				(IStrategoAppl)getModuleDefinition("m2") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition("m2")
+			);
+	
+		
+		IStrategoList idm3 = f.makeList(f.makeString("test") , f.makeString("m3"));
+		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
+
+		lookupTable.define(
+				m3 , 
+				(IStrategoAppl)getModuleDefinition("m3") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition("m3")
+			);
+	
+		assertEquals(3, lookupTable.size());
+		
+		manager.commit();
+		
+		lookupTable.removeModuleDeclarationsByUri(absPathString2);
+		
+		assertEquals(1, lookupTable.size());
+	}
+	private IStrategoTerm getModuleDefinition( String moduleName )
+	{
+		ITermFactory f = this.termFactory();
+
+		String text = "Module(" + 
+		"None()"+
+		", SPXModuleName(\""+moduleName+"\")"+
+		", [])" ;
+
+		return f.parseFromString(text);
+	}
+
+	private IStrategoTerm getAnalyzedModuleDefinition(String moduleName) 
+	{ 
+		return getModuleDefinition(moduleName);
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,51 @@
+package org.spoofax.interpreter.library.language.tests;
+
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.LanguageLibrary;
+import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.test.AbstractInterpreterTest;
+
+public class SpxSemanticIndexFacadeTest extends AbstractInterpreterTest{
+	
+	private final String _projectName = "test";
+	
+	private IStrategoString projectNameTerm; 
+	private SpxSemanticIndexFacade _facade;
+	
+	private Interpreter interpreter()
+	{
+		 return itp;
+	}
+	
+	private ITermFactory termFactory() {
+		return factory;
+	}
+
+	private IOAgent ioAgent() {
+		return itp.getIOAgent(); 
+	}
+	
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
+		interpreter().addOperatorRegistry(new LanguageLibrary());
+		
+		projectNameTerm = termFactory().makeString(_projectName);
+		
+		
+		_facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
+		
+	}
+	
+	@Override protected void tearDown() throws Exception {
+		_facade.close();
+	}
+	
+	public void testListenerRemovingRecordsFromChildSymbolTables()
+	{
+		
+	}	
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexTests.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexTests.java	Sun Sep 11 21:10:58 2011	(r23318)
@@ -0,0 +1,59 @@
+package org.spoofax.interpreter.library.language.tests;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.LanguageLibrary;
+import org.spoofax.interpreter.library.language.SemanticIndex;
+import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndex;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.test.AbstractInterpreterTest;
+
+/**
+ * Integration tests to to test various operation of semantic index
+ * of SpoofaxLang. 
+ * 
+ * @author Md. Adil Akhter
+ * Created On : Sep 2, 2011
+ */
+public class SpxSemanticIndexTests extends AbstractInterpreterTest{
+	
+	private final SpxSemanticIndex _index = new SpxSemanticIndex();
+	private final String _projectName = "test";
+	private IStrategoString projectNameTerm; 
+	
+	private Interpreter interpreter()
+	{
+		 return itp;
+	}
+	
+	private ITermFactory termFactory() {
+		return factory;
+	}
+
+	private IOAgent ioAgent() {
+		return itp.getIOAgent(); 
+	}
+	
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
+		interpreter().addOperatorRegistry(new LanguageLibrary());
+		
+		projectNameTerm = termFactory().makeString(_projectName);
+		
+		_index.initialize( projectNameTerm , termFactory(), ioAgent());
+	}
+	
+	@Override protected void tearDown() throws Exception {
+		
+		_index.save(projectNameTerm);
+		_index.close(projectNameTerm);
+	}
+
+	
+}

From M.A.Akhter at student.tudelft.nl  Mon Sep 12 12:10:50 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 12 Sep 2011 10:10:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23319 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang
Message-ID: <20110912101050.83E6B7F802A@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Sep 12 10:10:49 2011
New Revision: 23319
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23319&sc=1

Log:
- clean up

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
      - copied, changed from r23318, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit_get.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Scope.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sun Sep 11 21:10:58 2011	(r23318)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Mon Sep 12 10:10:49 2011	(r23319)
@@ -33,7 +33,7 @@
 		
 		//primitives to index spoofaxlang compilation unit 
 		add(new SPX_index_compilation_unit(spxIndex));
-		add(new SPX_index_compilation_unit_get(spxIndex));
+		add(new SPX_index_get_compilation_unit(spxIndex));
 		
 		//primitives to index packages, language descriptions  and modules 
 		add(new SPX_index_package_declaration(spxIndex));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java	Sun Sep 11 21:10:58 2011	(r23318)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java	Mon Sep 12 10:10:49 2011	(r23319)
@@ -1,17 +1,36 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.net.URI;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
 interface IScope {
-    public String getScopeName();
+    
+	public String getScopeName();
 
-    public Scope getEnclosingScope();
+    public ScopeIdentifier getEnclosingScope();
 
     public void define(SpxSymbol sym);
     
     public SpxSymbol resolve(String name);
-
 }
 
 interface ISpxType {
 	
 	public String getName();
 }
+
+
+interface Scope 
+{
+	public IStrategoTerm getScopeId();
+	
+	public Scope getEnclosingScope();
+	
+	public IStrategoTerm getType();
+	
+	public URI getScopeURI();
+	
+	//TODO : Add Scope specific Define and Resolve 
+	//
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Sun Sep 11 21:10:58 2011	(r23318)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Mon Sep 12 10:10:49 2011	(r23319)
@@ -2,6 +2,8 @@
 
 import java.io.IOException;
 
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java (from r23318, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit_get.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit_get.java	Sun Sep 11 21:10:58 2011	(r23318, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Mon Sep 12 10:10:49 2011	(r23319)
@@ -14,12 +14,12 @@
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
-public class SPX_index_compilation_unit_get extends AbstractPrimitive {
+public class SPX_index_get_compilation_unit extends AbstractPrimitive {
 
-	private static String NAME = "SPX_index_compilation_unit_get";
+	private static String NAME = "SPX_index_get_compilation_unit";
 	private final SpxSemanticIndex index;
 
-	public SPX_index_compilation_unit_get(SpxSemanticIndex index) {
+	public SPX_index_get_compilation_unit(SpxSemanticIndex index) {
 		super(NAME, 0, 2);
 		this.index = index;
 	}	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Sun Sep 11 21:10:58 2011	(r23318)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Mon Sep 12 10:10:49 2011	(r23319)
@@ -3,6 +3,8 @@
 import java.io.IOException;
 import java.util.Properties;
 
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
 import jdbm.RecordManager;
@@ -148,6 +150,5 @@
 
 	public SpxModuleLookupTable spxModuleTable() {
 		return _spxModuleTable;
-	}
+	}	
 }
-

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Sun Sep 11 21:10:58 2011	(r23318)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Mon Sep 12 10:10:49 2011	(r23319)
@@ -1,6 +1,30 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import jdbm.PrimaryMap;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
 public class SpxPrimarySymbolTable {
 	
+	private final ISpxPersistenceManager _manager;
+	private final PrimaryMap <ScopeIdentifier , IScope> _scopeLookup;
+	
+	public SpxPrimarySymbolTable (String tableName, ISpxPersistenceManager manager)
+	{
+		_manager = manager;
+		
+		_scopeLookup  = _manager.loadHashMap(tableName + "_scopeLookup.idx");
+		
+	}
+	
+	public ScopeIdentifier getScopeID(IStrategoTerm spxSymbolId)
+	{
+		return null;
+	}
 	
+	public IScope getScope( ScopeIdentifier scopeId)
+	{
+		// lookup ScopeTree for the scopeId and return it.
+		return null;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sun Sep 11 21:10:58 2011	(r23318)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Mon Sep 12 10:10:49 2011	(r23319)
@@ -1,21 +1,9 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import java.io.File;
 import java.io.IOException;
-import java.net.URI;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 
 import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.library.language.SemanticIndexEntry;
-import org.spoofax.interpreter.library.language.SemanticIndexEntryFactory;
-import org.spoofax.interpreter.library.language.SemanticIndexEntryParent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -157,6 +145,7 @@
 				idxFacade.indexLanguageDescriptor(languageDescriptor);
 				}
 		};
+		
 
 		return indexSymbol(projectName, languageDescriptor,  idx);
 	}
@@ -196,7 +185,6 @@
 	
 	public IStrategoTerm getCompilationUnit(IStrategoString projectName, IStrategoString spxCompilationUnitPath) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			@Override
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm key) {
 		
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Sun Sep 11 21:10:58 2011	(r23318)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Mon Sep 12 10:10:49 2011	(r23319)
@@ -4,26 +4,22 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-class ScopeIndentifier 
+class ScopeIdentifier 
 {
 	private UUID _scopeId;
 	
-	public ScopeIndentifier( UUID scopeId)
+	public ScopeIdentifier( UUID scopeId)
 	{
 		_scopeId = scopeId;
 	}
 	
-	
 	public IScope resolve( ISpxPersistenceManager manager)
 	{
 		return null;
 	}
-	
-	
 }
 
 
-
 /**
  * @author Md. Adil Akhter
  * Created On : Aug 20, 2011
@@ -33,7 +29,7 @@
 	private String _name;
 	private IStrategoTerm _data;
 	private ISpxType _type;
-	private ScopeIndentifier _scope;
+	private ScopeIdentifier _scope;
 	
 	
 	public SpxSymbol (String name){	_name = name; }
@@ -102,39 +98,7 @@
 }
 
 
-class SpxScopedSymbol extends SpxSymbol implements IScope  
-{
-	public SpxScopedSymbol(String name) {
-		super(name);
-		// TODO Auto-generated constructor stub
-	}
-
-	ScopeIndentifier _enclosingScope;
-	
-	@Override
-	public String getScopeName() {
-		// TODO Auto-generated method stub
-		return null;
-	}
-
-	@Override
-	public Scope getEnclosingScope() {
-		// TODO Auto-generated method stub
-		return null;
-	}
-
-	@Override
-	public void define(SpxSymbol sym) {
-		// TODO Auto-generated method stub
-		
-	}
 
-	@Override
-	public SpxSymbol resolve(String name) {
-		// TODO Auto-generated method stub
-		return null;
-	}
-}
 //
 ///**
 // * @author Md. Adil Akhter

From m.dejonge at tudelft.nl  Mon Sep 12 12:18:58 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 12 Sep 2011 10:18:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23320 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms
Message-ID: <20110912101858.8CE317F8039@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Sep 12 10:18:58 2011
New Revision: 23320
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23320&sc=1

Log:
BugFix: failing assertion in StrategoTerm.java line 31, Spoofax r23317, Eclipse 3.7:

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java	Mon Sep 12 10:10:49 2011	(r23319)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java	Mon Sep 12 10:18:58 2011	(r23320)
@@ -61,7 +61,9 @@
         final int ch = bis.read();
         if (ch == '{') {
             List<IStrategoTerm> annos = parseTermSequence(bis, '}');
-            return factory.annotateTerm(term, factory.makeList(annos));
+            if (annos.size()==0)
+                return factory.annotateTerm(term, TermFactory.EMPTY_LIST); 
+            return factory.annotateTerm(term, factory.makeList(annos)); 
         } else {
             bis.unread(ch);
             return term;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Mon Sep 12 10:10:49 2011	(r23319)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Mon Sep 12 10:18:58 2011	(r23320)
@@ -222,9 +222,9 @@
 	public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
         if (placeholderConstructor == null)
             placeholderConstructor = makeConstructor("<>", 1);
-        return new StrategoPlaceholder(placeholderConstructor, template, makeList(), defaultStorageType);
+        return new StrategoPlaceholder(placeholderConstructor, template, TermFactory.EMPTY_LIST, defaultStorageType);
 	}
-    
+
     /*
      * A Stratego string that maintains 
      * a reference to an existing string,

From M.A.Akhter at student.tudelft.nl  Mon Sep 12 12:50:10 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 12 Sep 2011 10:50:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23321 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110912105010.454682B8014@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Sep 12 10:50:10 2011
New Revision: 23321
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23321&sc=1

Log:
java 1.5 compliance | removing @override

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Mon Sep 12 10:18:58 2011	(r23320)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Mon Sep 12 10:50:10 2011	(r23321)
@@ -113,7 +113,6 @@
 	public boolean indexModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleDefinition)
 	{
 		IIndexer idx = new IIndexer() {
-			@Override
 			public void index(IStrategoString projectName, IStrategoAppl appl) {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexModuleDefinition(moduleDefinition);
@@ -126,7 +125,6 @@
 	
 	public boolean indexPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageDecl) {
 		IIndexer idx = new IIndexer() {
-			@Override
 			public void index(IStrategoString projectName, IStrategoAppl appl) {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexPackageDeclaration(packageDecl);
@@ -139,7 +137,6 @@
 	
 	public boolean indexLanguageDescriptor(IStrategoString projectName,	final IStrategoAppl languageDescriptor) {
 		IIndexer idx = new IIndexer() {
-			@Override
 			public void index(IStrategoString projectName, IStrategoAppl appl) {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexLanguageDescriptor(languageDescriptor);
@@ -198,7 +195,6 @@
 	
 	public IStrategoTerm getPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			@Override
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				return idxFacade.getPackageDeclaration((IStrategoAppl)qname);
@@ -211,7 +207,6 @@
 	
 	public IStrategoTerm getModuleDeclaration(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			@Override
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				return idxFacade.getModuleDeclaration((IStrategoAppl)qname);
@@ -223,7 +218,6 @@
 	
 	public IStrategoTerm getModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception {
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			@Override
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				return idxFacade.getModuleDefinition((IStrategoAppl)qname);
@@ -235,7 +229,6 @@
 	
 	public IStrategoTerm getLanguageDescriptor(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			@Override
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
 					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 					return idxFacade.getLanguageDescriptor((IStrategoAppl)qname);

From seba at informatik.uni-marburg.de  Mon Sep 12 13:54:43 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 12 Sep 2011 11:54:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23322 - in
	sugarj/trunk: compiler/org/sugarj/driver editor/META-INF
	editor/editor/java/org/sugarj/builder update-site
Message-ID: <20110912115443.7CA2E2B8006@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Mon Sep 12 11:54:43 2011
New Revision: 23322
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23322&sc=1

Log:
better integration of SugarJ builder and parser

Modified:
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/Result.java
   sugarj/trunk/editor/META-INF/MANIFEST.MF
   sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
   sugarj/trunk/update-site/site.xml

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Mon Sep 12 10:50:10 2011	(r23321)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Mon Sep 12 11:54:43 2011	(r23322)
@@ -488,8 +488,7 @@
         editorServices = ATermCommands.registerSemanticProvider(editorServices, currentTransProg);
   
         Path editorServicesFile = environment.new RelativePathBin(relPackageNameSep() + extName + ".serv");
-        FileCommands.createFile(editorServicesFile);
-  
+        
         log.log("writing editor services to " + editorServicesFile);
         
         StringBuffer buf = new StringBuffer();
@@ -808,8 +807,10 @@
           sourceFile = ModuleSystemCommands.locateSourceFile(modulePath, environment.getSourcePath());
 
         if (sourceFile != null && (res == null || pendingInputFiles.contains(res.getSourceFile()) || !res.isUpToDate(res.getSourceFile(), environment))) {
-          if (!generateFiles)
+          if (!generateFiles) {
+            boolean b = pendingInputFiles.contains(res.getSourceFile()) || !res.isUpToDate(res.getSourceFile(), environment);
             ATermCommands.setErrorMessage(toplevelDecl, "module outdated, compile first: " + importModule);
+          }
           else {
             log.log("Need to compile the imported module first ; processing it now.");
             
@@ -1602,7 +1603,7 @@
   }
   
   private void clearGeneratedStuff() throws IOException {
-    if (driverResult.getGenerationLog() != null && FileCommands.exists(driverResult.getGenerationLog())) {
+    if (generateFiles && driverResult.getGenerationLog() != null && FileCommands.exists(driverResult.getGenerationLog())) {
 
       ObjectInputStream ois = null;
       
@@ -1616,6 +1617,7 @@
           }
         }
       } catch (Exception e) {
+        e.printStackTrace();
       } finally {
         if (ois != null)
           ois.close();

Modified: sugarj/trunk/compiler/org/sugarj/driver/Result.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Result.java	Mon Sep 12 10:50:10 2011	(r23321)
+++ sugarj/trunk/compiler/org/sugarj/driver/Result.java	Mon Sep 12 11:54:43 2011	(r23322)
@@ -86,9 +86,11 @@
       logGeneration(file);
     }
   }
-  
+
+  // TODO subsequent ObjectOutputStream writes seem to misbehave: raises StreamCorruptedException in Driver.clearGeneratedStuff().
+  //   => how to append an object to an ObjectOutputStream
   private void logGeneration(Object o) throws IOException {
-    if (generationLog != null) {
+    if (generateFiles && generationLog != null) {
       FileCommands.createFile(generationLog);
       ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(generationLog.getFile(), true));
       try {

Modified: sugarj/trunk/editor/META-INF/MANIFEST.MF
==============================================================================
--- sugarj/trunk/editor/META-INF/MANIFEST.MF	Mon Sep 12 10:50:10 2011	(r23321)
+++ sugarj/trunk/editor/META-INF/MANIFEST.MF	Mon Sep 12 11:54:43 2011	(r23322)
@@ -30,6 +30,7 @@
  org.sugarj.stdlib,
  org.eclipse.ant.core,
  org.eclipse.jdt.core,
- org.eclipse.ui.console
+ org.eclipse.ui.console,
+ org.eclipse.ui.ide;bundle-version="3.6.2"
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
 Bundle-ActivationPolicy: lazy

Modified: sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Mon Sep 12 10:50:10 2011	(r23321)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Mon Sep 12 11:54:43 2011	(r23322)
@@ -6,6 +6,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IResourceDelta;
@@ -17,7 +18,14 @@
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.ui.IEditorPart;
+import org.eclipse.ui.IEditorReference;
+import org.eclipse.ui.IWorkbenchPage;
+import org.eclipse.ui.IWorkbenchWindow;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.part.FileEditorInput;
 import org.sugarj.driver.CommandExecution;
 import org.sugarj.driver.Driver;
 import org.sugarj.driver.Environment;
@@ -32,8 +40,7 @@
 import org.sugarj.editor.SugarJParseController;
 
 /**
- * TODO update editors to show newly built result
- * TODO annotate errors/warnings in package explorer
+ * updates editors to show newly built results
  * 
  * @author Sebastian Erdweg <seba at informatik uni-marburg de>
  */
@@ -131,6 +138,22 @@
             monitor.beginTask("compile " + sourceFile.getRelativePath(),
                 IProgressMonitor.UNKNOWN);
             Driver.compile(sourceFile, monitor);
+            
+            IWorkbenchWindow[] workbenchWindows = PlatformUI.getWorkbench().getWorkbenchWindows();
+            for (IWorkbenchWindow workbenchWindow : workbenchWindows)
+              for (IWorkbenchPage page : workbenchWindow.getPages())
+                for (IEditorReference editorRef : page.getEditorReferences()) {
+                  IEditorPart editor = editorRef.getEditor(false);
+                  if (editor != null && 
+                      editor instanceof UniversalEditor && 
+                      editor.getEditorInput() instanceof FileEditorInput) {
+                    IFile file = ((FileEditorInput) editor.getEditorInput()).getFile();
+                    if (file.getLocation().toString().equals(sourceFile.toString()))
+                      ((UniversalEditor) editor).fParserScheduler.schedule();
+                  }
+                }
+            
+            
           } catch (InterruptedException e) {
             monitor.setCanceled(true);
             monitor.done();

Modified: sugarj/trunk/update-site/site.xml
==============================================================================
--- sugarj/trunk/update-site/site.xml	Mon Sep 12 10:50:10 2011	(r23321)
+++ sugarj/trunk/update-site/site.xml	Mon Sep 12 11:54:43 2011	(r23322)
@@ -3,7 +3,7 @@
    <description name="SugarJ" url="sugarj.org/update">
       SugarJ
    </description>
-   <feature url="features/org.sugarj.editor_1.3.0.201109081757.jar" id="org.sugarj.editor" version="1.3.0.201109081757">
+   <feature url="features/org.sugarj.editor_1.3.0.201109121151.jar" id="org.sugarj.editor" version="1.3.0.201109121151">
       <category name="SugarJ"/>
    </feature>
    <category-def name="SugarJ" label="SugarJ">

From seba at informatik.uni-marburg.de  Mon Sep 12 13:55:20 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 12 Sep 2011 11:55:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23323 -
	sugarj/trunk/editor/editor/java/org/sugarj/editor
Message-ID: <20110912115520.C409E2B8036@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Mon Sep 12 11:55:20 2011
New Revision: 23323
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23323&sc=1

Log:
better integration of SugarJ builder and parser

Deleted:
   sugarj/trunk/editor/editor/java/org/sugarj/editor/PendingResult.java

From v.vergu at gmail.com  Mon Sep 12 15:05:50 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 13:05:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23324 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.ui
Message-ID: <20110912130550.4CC0BCC0C8@mx4.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 13:05:50 2011
New Revision: 23324
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23324&sc=1

Log:
Initial share of the view providing plug-in as per Spoofax/419

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/

From v.vergu at gmail.com  Mon Sep 12 15:06:59 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 13:06:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23325 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing.ui: . .settings
	META-INF
Message-ID: <20110912130659.14072CC0B7@mx4.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 13:06:58 2011
New Revision: 23325
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23325&sc=1

Log:
Initial share of the view providing plug-in as per Spoofax/419

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.classpath   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.project   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.settings/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.settings/org.eclipse.jdt.core.prefs   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/build.properties   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml   (contents, props changed)

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.classpath	Mon Sep 12 13:06:58 2011	(r23325)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.project	Mon Sep 12 13:06:58 2011	(r23325)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.testing.ui</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/.settings/org.eclipse.jdt.core.prefs	Mon Sep 12 13:06:58 2011	(r23325)
@@ -0,0 +1,8 @@
+#Sat Sep 10 23:01:11 CEST 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Sep 12 13:06:58 2011	(r23325)
@@ -0,0 +1,15 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: SpoofaxTesting UI Plug-in
+Bundle-SymbolicName: org.strategoxt.imp.testing.ui;singleton:=true
+Bundle-Version: 1.0.0.qualifier
+Bundle-Activator: org.strategoxt.imp.testing.ui.Activator
+Require-Bundle: org.eclipse.ui,
+ org.eclipse.core.runtime,
+ org.strategoxt.imp.testing;bundle-version="1.0.0",
+ org.eclipse.core.resources;bundle-version="3.6.1",
+ org.eclipse.ui.forms;bundle-version="3.5.2",
+ org.strategoxt.strj;bundle-version="0.17.92",
+ org.strategoxt.imp.runtime;bundle-version="0.1.1"
+Bundle-ActivationPolicy: lazy
+Bundle-RequiredExecutionEnvironment: J2SE-1.5

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/build.properties	Mon Sep 12 13:06:58 2011	(r23325)
@@ -0,0 +1,5 @@
+source.. = src/
+output.. = bin/
+bin.includes = META-INF/,\
+               .,\
+               plugin.xml

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml	Mon Sep 12 13:06:58 2011	(r23325)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.4"?>
+<plugin>
+   <extension
+         point="org.eclipse.ui.views">
+      <view
+            class="org.strategoxt.imp.testing.ui.views.TestRunViewPart"
+            id="org.strategoxt.imp.testing.ui.views.testrunviewpart"
+            name="Spoofax Test Runner">
+      </view>
+   </extension>
+   <extension
+         point="org.strategoxt.imp.testing.testlistener">
+      <client
+            class="org.strategoxt.imp.testing.ui.model.TestListener">
+      </client>
+   </extension>
+
+</plugin>

From v.vergu at gmail.com  Mon Sep 12 15:12:55 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 13:12:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23326 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src: . org
	org/eclipse org/eclipse/jdt org/eclipse/jdt/internal
	org/eclipse/jdt/internal/junit org/eclipse/jdt/i...
Message-ID: <20110912131255.69719108C031@mx3.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 13:12:55 2011
New Revision: 23326
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23326&sc=1

Log:
Import as per Spoofax/419

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/eclipse/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/eclipse/jdt/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/eclipse/jdt/internal/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/eclipse/jdt/internal/junit/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/eclipse/jdt/internal/junit/ui/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestListener.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestRun.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestcaseRun.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestsuiteRun.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/FailedTestsFilter.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunContentProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunLabelProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunViewPart.java

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,183 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     Stephan Michels, stephan at apache.org - 104944 [JUnit] Unnecessary code in JUnitProgressBar
+ *******************************************************************************/
+package org.eclipse.jdt.internal.junit.ui;
+
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.ControlAdapter;
+import org.eclipse.swt.events.ControlEvent;
+import org.eclipse.swt.events.DisposeEvent;
+import org.eclipse.swt.events.DisposeListener;
+import org.eclipse.swt.events.PaintEvent;
+import org.eclipse.swt.events.PaintListener;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.GC;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.widgets.Canvas;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+
+/**
+ * A progress bar with a red/green indication for success or failure.
+ */
+public class JUnitProgressBar extends Canvas {
+	private static final int DEFAULT_WIDTH = 160;
+	private static final int DEFAULT_HEIGHT = 18;
+
+	private int fCurrentTickCount= 0;
+	private int fMaxTickCount= 0;
+	private int fColorBarWidth= 0;
+	private Color fOKColor;
+	private Color fFailureColor;
+	private Color fStoppedColor;
+	private boolean fError;
+	private boolean fStopped= false;
+
+	public JUnitProgressBar(Composite parent) {
+		super(parent, SWT.NONE);
+
+		addControlListener(new ControlAdapter() {
+			@Override
+			public void controlResized(ControlEvent e) {
+				fColorBarWidth= scale(fCurrentTickCount);
+				redraw();
+			}
+		});
+		addPaintListener(new PaintListener() {
+			public void paintControl(PaintEvent e) {
+				paint(e);
+			}
+		});
+		addDisposeListener(new DisposeListener() {
+			public void widgetDisposed(DisposeEvent e) {
+				fFailureColor.dispose();
+				fOKColor.dispose();
+				fStoppedColor.dispose();
+			}
+		});
+		Display display= parent.getDisplay();
+		fFailureColor= new Color(display, 159, 63, 63);
+		fOKColor= new Color(display, 95, 191, 95);
+		fStoppedColor= new Color(display, 120, 120, 120);
+	}
+
+	public void setMaximum(int max) {
+		fMaxTickCount= max;
+	}
+
+	public void reset() {
+		fError= false;
+		fStopped= false;
+		fCurrentTickCount= 0;
+		fMaxTickCount= 0;
+		fColorBarWidth= 0;
+		redraw();
+	}
+
+	public void reset(boolean hasErrors, boolean stopped, int ticksDone, int maximum) {
+		boolean noChange= fError == hasErrors && fStopped == stopped && fCurrentTickCount == ticksDone && fMaxTickCount == maximum;
+		fError= hasErrors;
+		fStopped= stopped;
+		fCurrentTickCount= ticksDone;
+		fMaxTickCount= maximum;
+		fColorBarWidth= scale(ticksDone);
+		if (! noChange)
+			redraw();
+	}
+
+	private void paintStep(int startX, int endX) {
+		GC gc = new GC(this);
+		setStatusColor(gc);
+		Rectangle rect= getClientArea();
+		startX= Math.max(1, startX);
+		gc.fillRectangle(startX, 1, endX-startX, rect.height-2);
+		gc.dispose();
+	}
+
+	private void setStatusColor(GC gc) {
+		if (fStopped)
+			gc.setBackground(fStoppedColor);
+		else if (fError)
+			gc.setBackground(fFailureColor);
+		else
+			gc.setBackground(fOKColor);
+	}
+
+	public void stopped() {
+		fStopped= true;
+		redraw();
+	}
+
+	private int scale(int value) {
+		if (fMaxTickCount > 0) {
+			Rectangle r= getClientArea();
+			if (r.width != 0)
+				return Math.max(0, value*(r.width-2)/fMaxTickCount);
+		}
+		return value;
+	}
+
+	private void drawBevelRect(GC gc, int x, int y, int w, int h, Color topleft, Color bottomright) {
+		gc.setForeground(topleft);
+		gc.drawLine(x, y, x+w-1, y);
+		gc.drawLine(x, y, x, y+h-1);
+
+		gc.setForeground(bottomright);
+		gc.drawLine(x+w, y, x+w, y+h);
+		gc.drawLine(x, y+h, x+w, y+h);
+	}
+
+	private void paint(PaintEvent event) {
+		GC gc = event.gc;
+		Display disp= getDisplay();
+
+		Rectangle rect= getClientArea();
+		gc.fillRectangle(rect);
+		drawBevelRect(gc, rect.x, rect.y, rect.width-1, rect.height-1,
+			disp.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW),
+			disp.getSystemColor(SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW));
+
+		setStatusColor(gc);
+		fColorBarWidth= Math.min(rect.width-2, fColorBarWidth);
+		gc.fillRectangle(1, 1, fColorBarWidth, rect.height-2);
+	}
+
+	@Override
+	public Point computeSize(int wHint, int hHint, boolean changed) {
+		checkWidget();
+		Point size= new Point(DEFAULT_WIDTH, DEFAULT_HEIGHT);
+		if (wHint != SWT.DEFAULT) size.x= wHint;
+		if (hHint != SWT.DEFAULT) size.y= hHint;
+		return size;
+	}
+
+	public void step(int failures) {
+		fCurrentTickCount++;
+		int x= fColorBarWidth;
+
+		fColorBarWidth= scale(fCurrentTickCount);
+
+		if (!fError && failures > 0) {
+			fError= true;
+			x= 1;
+		}
+		if (fCurrentTickCount == fMaxTickCount)
+			fColorBarWidth= getClientArea().width-1;
+		paintStep(x, fColorBarWidth);
+	}
+
+	public void refresh(boolean hasErrors) {
+		fError= hasErrors;
+		redraw();
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/Activator.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,63 @@
+package org.strategoxt.imp.testing.ui;
+
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.ui.plugin.AbstractUIPlugin;
+import org.osgi.framework.BundleContext;
+
+/**
+ * The activator class controls the plug-in life cycle
+ */
+public class Activator extends AbstractUIPlugin {
+
+	// The plug-in ID
+	public static final String PLUGIN_ID = "org.strategoxt.imp.testing.ui"; //$NON-NLS-1$
+
+	// The shared instance
+	private static Activator plugin;
+	
+	/**
+	 * The constructor
+	 */
+	public Activator() {
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
+	 */
+	public void start(BundleContext context) throws Exception {
+		super.start(context);
+		plugin = this;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
+	 */
+	public void stop(BundleContext context) throws Exception {
+		plugin = null;
+		super.stop(context);
+	}
+
+	/**
+	 * Returns the shared instance
+	 *
+	 * @return the shared instance
+	 */
+	public static Activator getDefault() {
+		return plugin;
+	}
+
+	public static void logError(String message, Throwable exception){
+		plugin.getLog().log(new Status(IStatus.ERROR, PLUGIN_ID, message, exception));
+	}
+	
+	public static void logError(String message){
+		plugin.getLog().log(new Status(IStatus.ERROR, PLUGIN_ID,message));
+	}
+	
+	public static void logInfo(String message){
+		plugin.getLog().log(new Status(IStatus.INFO, PLUGIN_ID, message));
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestListener.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestListener.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,81 @@
+package org.strategoxt.imp.testing.ui.model;
+
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.ui.PartInitException;
+import org.eclipse.ui.PlatformUI;
+import org.strategoxt.imp.testing.listener.ITestListener;
+import org.strategoxt.imp.testing.ui.Activator;
+import org.strategoxt.imp.testing.ui.views.TestRunViewPart;
+
+public class TestListener implements ITestListener {
+
+	public TestListener() {
+	}
+
+	private TestRunViewPart getViewPart() {
+		try {
+			return (TestRunViewPart) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage()
+					.showView(TestRunViewPart.VIEW_ID);
+		} catch (PartInitException e) {
+			Activator.logError("Could not open view", e);
+			return null;
+		}
+	}
+
+	public void reset() {
+		Display.getDefault().syncExec(new Runnable() {
+			public void run() {
+				TestRunViewPart vp = getViewPart();
+				if (vp != null) {
+					vp.reset();
+				}
+			}
+		});
+
+	}
+
+	public void addTestcase(final String testsuite, final String description, final int offset) {
+		Display.getDefault().syncExec(new Runnable() {
+			public void run() {
+				TestRunViewPart vp = getViewPart();
+				if (vp != null) {
+					vp.addTestcase(testsuite, description, offset);
+				}
+			}
+		});
+	}
+
+	public void addTestsuite(final String name, final String filename) {
+		Display.getDefault().syncExec(new Runnable() {
+			public void run() {
+				TestRunViewPart vp = getViewPart();
+				if (vp != null) {
+					vp.addTestsuite(name, filename);
+				}
+			}
+		});
+	}
+
+	public void startTestcase(final String testsuite, final String description) {
+		Display.getDefault().syncExec(new Runnable() {
+			public void run() {
+				TestRunViewPart vp = getViewPart();
+				if (vp != null) {
+					vp.startTestcase(testsuite, description);
+				}
+			}
+		});
+	}
+
+	public void finishTestcase(final String testsuite, final String description, final boolean succeeded) {
+		Display.getDefault().syncExec(new Runnable() {
+			public void run() {
+				TestRunViewPart vp = getViewPart();
+				if (vp != null) {
+					vp.finishTestcase(testsuite, description, succeeded);
+				}
+			}
+		});
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestRun.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestRun.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,31 @@
+package org.strategoxt.imp.testing.ui.model;
+
+import java.util.Collection;
+import java.util.HashMap;
+
+public class TestRun {
+	private HashMap<String, TestsuiteRun> testsuites = new HashMap<String, TestsuiteRun>();
+
+	public TestsuiteRun addTestsuite(String testsuite, String filename) {
+		TestsuiteRun ts = new TestsuiteRun(this, testsuite, filename);
+		testsuites.put(filename, ts) ;
+		return ts;
+	}
+	
+	public TestsuiteRun getTestsuite(String testsuite) {
+		return testsuites.get(testsuite);
+	}
+	
+	public Collection<TestsuiteRun> getTestSuites() {
+		return testsuites.values();
+	}
+
+	public int getNrTests() {
+		int res = 0;
+		for(TestsuiteRun tr : getTestSuites()) {
+			res += tr.getNrTests();
+		}
+		return res;
+	}
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestcaseRun.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestcaseRun.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,54 @@
+package org.strategoxt.imp.testing.ui.model;
+
+public class TestcaseRun {
+	private String description;
+	private int offset;
+	private TestsuiteRun testsuite;
+	private boolean finished = false;
+	private boolean succeeded = false;
+	private long start = 0, end = 0 ;
+	
+	public TestcaseRun(String description, TestsuiteRun testsuite, int offset) {
+		this.description = description;
+		this.offset = offset;
+		this.testsuite = testsuite;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public TestsuiteRun getParent() {
+		return testsuite;
+	}
+	
+	public long getDuration() {
+		if(start == 0 || end == 0 ) {
+			return -1;
+		} else {
+			return end - start;
+		}
+	}
+	
+	public int getOffset() {
+		return offset;
+	}
+	
+	public boolean isFinished() {
+		return finished;
+	}
+	
+	public boolean hasSucceeded() {
+		return succeeded;
+	}
+	
+	public void start() {
+		start = System.currentTimeMillis();
+	}
+	
+	public void finished(boolean succeeded) {
+		end = System.currentTimeMillis();
+		this.finished = true;
+		this.succeeded = succeeded;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestsuiteRun.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestsuiteRun.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,57 @@
+package org.strategoxt.imp.testing.ui.model;
+
+import java.util.Collection;
+import java.util.HashMap;
+
+public class TestsuiteRun {
+	private String name;
+	private String resource;
+	private TestRun testrun;
+	private HashMap<String,TestcaseRun> testcases = new HashMap<String, TestcaseRun>();
+	
+	public TestsuiteRun(TestRun testrun, String name, String resource) {
+		this.testrun = testrun;
+		this.resource = resource;
+		this.name = name;
+	}
+
+	public String getFilename() {
+		return resource;
+	}
+
+	public String getName() {
+		return name;
+	}
+	
+	public Collection<TestcaseRun> getTestcases() {
+		return testcases.values();
+	}
+	
+	public TestcaseRun getTestcase(String testcase) {
+		return testcases.get(testcase);
+	}
+	
+	public TestRun getParent() {
+		return testrun;
+	}
+	
+	public TestcaseRun addTestCase(String description, int line) {
+		TestcaseRun tcr = new TestcaseRun(description, this, line);
+		testcases.put(description, tcr) ;
+		return tcr;		
+	}
+	
+	public int getNrTests() {
+		return getTestcases().size();
+	}
+
+	public int getNrFailedTests() {
+		int res = 0;
+		for(TestcaseRun tcr : getTestcases()) {
+			if(tcr.isFinished() && !tcr.hasSucceeded())
+				res++;
+		}
+		return res;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/FailedTestsFilter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/FailedTestsFilter.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,22 @@
+package org.strategoxt.imp.testing.ui.views;
+
+import org.eclipse.jface.viewers.Viewer;
+import org.eclipse.jface.viewers.ViewerFilter;
+import org.strategoxt.imp.testing.ui.model.TestcaseRun;
+import org.strategoxt.imp.testing.ui.model.TestsuiteRun;
+
+public class FailedTestsFilter extends ViewerFilter {
+
+	@Override
+	public boolean select(Viewer viewer, Object parentElement, Object element) {
+		if (element instanceof TestcaseRun) {
+			TestcaseRun tcr = (TestcaseRun) element;
+			return !tcr.hasSucceeded();
+		} else if (element instanceof TestsuiteRun) {
+			TestsuiteRun tsr = (TestsuiteRun) element;
+			return tsr.getNrFailedTests() > 0;
+		}
+		return true;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunContentProvider.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunContentProvider.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,51 @@
+package org.strategoxt.imp.testing.ui.views;
+
+import org.eclipse.jface.viewers.ITreeContentProvider;
+import org.eclipse.jface.viewers.Viewer;
+import org.strategoxt.imp.testing.ui.model.TestRun;
+import org.strategoxt.imp.testing.ui.model.TestcaseRun;
+import org.strategoxt.imp.testing.ui.model.TestsuiteRun;
+
+
+public class TestRunContentProvider implements ITreeContentProvider {
+
+	public void dispose() {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public Object[] getElements(Object inputElement) {
+		return getChildren(inputElement);
+	}
+
+	public Object[] getChildren(Object parentElement) {
+	    if(parentElement instanceof TestRun) {
+	    	TestRun tr = (TestRun) parentElement;
+	    	return tr.getTestSuites().toArray() ;
+	    } else if (parentElement instanceof TestsuiteRun) {
+	    	TestsuiteRun tsr = (TestsuiteRun) parentElement;
+	    	return tsr.getTestcases().toArray();
+	    } 
+	    return new Object[] {};
+	}
+
+	public Object getParent(Object element) {
+	    if (element instanceof TestsuiteRun) {
+	    	TestsuiteRun tsr = (TestsuiteRun) element;
+	    	return tsr.getParent();
+	    } else if (element instanceof TestcaseRun) {
+	    	TestcaseRun tcr = (TestcaseRun) element;
+	    	return tcr.getParent();
+	    } 
+    	return null ;
+	}
+
+	public boolean hasChildren(Object element) {
+		return getChildren(element).length > 0;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunLabelProvider.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunLabelProvider.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,70 @@
+package org.strategoxt.imp.testing.ui.views;
+
+import org.eclipse.jface.viewers.ITableColorProvider;
+import org.eclipse.jface.viewers.ITableFontProvider;
+import org.eclipse.jface.viewers.ITableLabelProvider;
+import org.eclipse.jface.viewers.LabelProvider;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.Font;
+import org.eclipse.swt.graphics.Image;
+import org.eclipse.swt.widgets.Display;
+import org.strategoxt.imp.testing.ui.model.TestcaseRun;
+import org.strategoxt.imp.testing.ui.model.TestsuiteRun;
+
+public class TestRunLabelProvider extends LabelProvider implements ITableLabelProvider, ITableFontProvider, ITableColorProvider {
+	
+	
+	@Override
+	public Image getImage(Object element) {
+		return super.getImage(element);
+	}
+	
+	@Override
+	public String getText(Object element) {
+		if(element instanceof TestsuiteRun) {
+			TestsuiteRun tsr = (TestsuiteRun)element;
+			int failed = tsr.getNrFailedTests();
+			return failed == 0 ? tsr.getName() : String.format("%s (%d failed)", tsr.getName(), failed);
+		} else if(element instanceof TestcaseRun) {
+			TestcaseRun tcr = (TestcaseRun)element;
+			String lbl = tcr.getDescription();
+			if(tcr.isFinished()) {
+				lbl = lbl + " (" + String.format("%.2f", tcr.getDuration()/1000.0) +"s)";
+				if (! tcr.hasSucceeded() ) {
+					lbl += " : FAILED";
+				}
+			}
+			return lbl;
+		}
+		return super.getText(element);
+	}
+
+	public Color getForeground(Object element, int columnIndex) {
+		if(element instanceof TestcaseRun) {
+			TestcaseRun tcr = (TestcaseRun)element;
+			if(tcr.isFinished() && !tcr.hasSucceeded())
+				return new Color(Display.getCurrent(), 159, 63, 63);
+			if(tcr.isFinished() && tcr.hasSucceeded())
+				return new Color(Display.getCurrent(), 10, 100, 10);
+		}
+		return null;
+	}
+
+	public Color getBackground(Object element, int columnIndex) {
+		return null;
+	}
+
+	public Font getFont(Object element, int columnIndex) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public Image getColumnImage(Object element, int columnIndex) {
+		return getImage(element);
+	}
+
+	public String getColumnText(Object element, int columnIndex) {
+		return getText(element);
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunViewPart.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunViewPart.java	Mon Sep 12 13:12:55 2011	(r23326)
@@ -0,0 +1,252 @@
+package org.strategoxt.imp.testing.ui.views;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.jdt.internal.junit.ui.JUnitProgressBar;
+import org.eclipse.jface.action.Action;
+import org.eclipse.jface.action.IMenuManager;
+import org.eclipse.jface.viewers.DoubleClickEvent;
+import org.eclipse.jface.viewers.IDoubleClickListener;
+import org.eclipse.jface.viewers.IStructuredSelection;
+import org.eclipse.jface.viewers.TreeViewer;
+import org.eclipse.jface.viewers.ViewerFilter;
+import org.eclipse.jface.viewers.ViewerSorter;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Tree;
+import org.eclipse.swt.widgets.TreeColumn;
+import org.eclipse.ui.forms.widgets.FormToolkit;
+import org.eclipse.ui.part.ViewPart;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
+import org.strategoxt.imp.testing.ui.model.TestRun;
+import org.strategoxt.imp.testing.ui.model.TestcaseRun;
+import org.strategoxt.imp.testing.ui.model.TestsuiteRun;
+
+public class TestRunViewPart extends ViewPart {
+
+	public final static String VIEW_ID = "org.strategoxt.imp.testing.ui.views.testrunviewpart";
+	
+	private final FormToolkit toolkit = new FormToolkit(Display.getCurrent());
+	private TestRun testrun = null;
+	private Label lblRatio;
+	private final static int LBLRATIO_WIDTHHINT = 65;
+	private JUnitProgressBar pb;
+	private TreeViewer treeViewer;
+	private int nrFailedTests = 0;
+	private Action onlyFailedTestsAction;
+	private ViewerFilter failedTestsFilter;
+
+	public TestRunViewPart() {
+
+	}
+
+	/**
+	 * Create contents of the view part.
+	 * 
+	 * @param parent
+	 */
+	@Override
+	public void createPartControl(Composite parent) {
+		GridData gd = null;
+
+		GridLayout layout = new GridLayout(3, false);
+		parent.setLayout(layout);
+
+		pb = new JUnitProgressBar(parent);
+		gd = new GridData();
+		gd.horizontalAlignment = SWT.FILL;
+		gd.grabExcessHorizontalSpace = true;
+		gd.verticalAlignment = SWT.TOP;
+		pb.setLayoutData(gd);
+
+		Label lblTests = new Label(parent, SWT.NONE);
+		lblTests.setText("Tests");
+		gd = new GridData();
+		gd.horizontalAlignment = SWT.BEGINNING;
+		lblTests.setLayoutData(gd);
+
+		lblRatio = new Label(parent, SWT.RIGHT);
+		gd = new GridData();
+		gd.horizontalAlignment = SWT.END;
+		gd.widthHint = LBLRATIO_WIDTHHINT;
+		lblRatio.setLayoutData(gd);
+
+		treeViewer = new TreeViewer(parent, SWT.BORDER);
+		Tree tv = treeViewer.getTree();
+		gd = new GridData();
+		gd.grabExcessHorizontalSpace = true;
+		gd.grabExcessVerticalSpace = true;
+		gd.horizontalAlignment = SWT.FILL;
+		gd.verticalAlignment = SWT.FILL;
+		gd.horizontalSpan = 3;
+		tv.setLayoutData(gd);
+
+		TreeColumn column = new TreeColumn(treeViewer.getTree(), SWT.NONE);
+
+		column.setText("");
+		column.pack();
+
+		treeViewer.setContentProvider(new TestRunContentProvider());
+		treeViewer.setLabelProvider(new TestRunLabelProvider());
+		treeViewer.setSorter(new ViewerSorter());
+		treeViewer.addDoubleClickListener(new IDoubleClickListener() {
+
+			public void doubleClick(DoubleClickEvent event) {
+				Object selectObject = ((IStructuredSelection) treeViewer
+						.getSelection()).getFirstElement();
+
+				String file = null;
+				int offset = 0;
+
+				if (selectObject instanceof TestcaseRun) {
+					TestcaseRun tcr = (TestcaseRun) selectObject;
+					file = tcr.getParent().getFilename();
+					offset = tcr.getOffset();
+				} else if (selectObject instanceof TestsuiteRun) {
+					file = ((TestsuiteRun) selectObject).getFilename();
+				}
+
+				if (file != null) {
+					File f = new File(file);
+					IResource res;
+					try {
+						res = EditorIOAgent.getResource(f);
+						EditorState.asyncOpenEditor(Display.getDefault(),
+								(IFile) res, offset, true);
+					} catch (FileNotFoundException e) {
+						org.strategoxt.imp.runtime.Environment.logException(
+								"File not found", e);
+					}
+				}
+			}
+		});
+
+		createActions();
+		createFilters();
+		initializeToolBar();
+		initializeMenu();
+
+		reset();
+
+		testrun = new TestRun();
+
+		treeViewer.expandAll();
+
+		updateHeader();
+
+	}
+
+	private void updateHeader() {
+		int nrTests = testrun.getNrTests();
+		if (testrun == null) {
+			lblRatio.setText("0 / 0");
+		} else {
+			lblRatio.setText(String.format("%d / %d    ",
+					(nrTests - nrFailedTests), nrTests));
+		}
+		pb.setMaximum(nrTests);
+	}
+
+	@Override
+	public void dispose() {
+		toolkit.dispose();
+		super.dispose();
+	}
+
+	/**
+	 * Create the actions.
+	 */
+	private void createActions() {
+		onlyFailedTestsAction = new Action("Show only failed tests",Action.AS_CHECK_BOX) {
+			public void run() {
+				if (onlyFailedTestsAction.isChecked()) {
+					treeViewer.addFilter(failedTestsFilter);
+				} else {
+					treeViewer.removeFilter(failedTestsFilter);
+				}
+
+			}
+		};
+
+	}
+
+	private void createFilters(){
+		failedTestsFilter = new FailedTestsFilter();
+	}
+	
+	/**
+	 * Initialize the toolbar.
+	 */
+	private void initializeToolBar() {
+	}
+
+	/**
+	 * Initialize the menu.
+	 */
+	private void initializeMenu() {
+		IMenuManager mgr = getViewSite().getActionBars().getMenuManager();
+        mgr.add(onlyFailedTestsAction);
+	}
+
+	@Override
+	public void setFocus() {
+	}
+
+	public void reset() {
+		nrFailedTests = 0;
+		testrun = new TestRun();
+		treeViewer.setInput(testrun);
+		pb.reset();
+	}
+
+	public void refresh() {
+		updateHeader();
+		treeViewer.refresh();
+		treeViewer.expandAll();
+
+		final Tree tree = treeViewer.getTree();
+		Display.getCurrent().asyncExec(new Runnable() {
+			public void run() {
+				for (TreeColumn tc : tree.getColumns()) {
+					tc.pack();
+				}
+			}
+		});
+	}
+
+	public void addTestsuite(String name, String filename) {
+		testrun.addTestsuite(name, filename);
+		refresh();
+	}
+
+	public void addTestcase(String testsuite, String description, int offset) {
+		TestsuiteRun ts = testrun.getTestsuite(testsuite);
+		ts.addTestCase(description, offset);
+		refresh();
+	}
+
+	public void startTestcase(String testsuite, String description) {
+		TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(
+				description);
+		tcr.start();
+	}
+
+	public void finishTestcase(String testsuite, String description,
+			boolean succeeded) {
+		TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(
+				description);
+		tcr.finished(succeeded);
+		if (!succeeded)
+			nrFailedTests++;
+		pb.step(nrFailedTests);
+		refresh();
+	}
+}

From v.vergu at gmail.com  Mon Sep 12 16:01:28 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 14:01:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23327 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: . META-INF
	editor/java/org/eclipse/jdt/internal/junit/ui
	editor/java/org/strategoxt/imp/testing/listener editor/ja...
Message-ID: <20110912140134.06E49CC0C6@mx4.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 14:01:28 2011
New Revision: 23327
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23327&sc=1

Log:
Split/update of project as per Spoofax/419

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/ITestListener.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java
      - copied, changed from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java
      - copied, changed from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java
      - copied, changed from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java
      - copied, changed from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_init_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_open_0_0.java
      - copied, changed from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java
      - copied, changed from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/schema/
   spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/ui/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_init_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Sep 12 13:12:55 2011	(r23326)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Sep 12 14:01:28 2011	(r23327)
@@ -2,12 +2,11 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: SpoofaxTesting Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.testing; singleton:=true
-Bundle-Version: 1.0.0.qualifier
+Bundle-Version: 1.0.1.201109121517
 Bundle-Activator: org.strategoxt.imp.testing.Activator
 Import-Package: org.osgi.framework
 Require-Bundle: org.strategoxt.imp.runtime,
  org.eclipse.core.runtime,
- org.eclipse.core.resources,
  org.eclipse.imp.runtime,
  org.eclipse.ui,
  org.eclipse.ui.ide,
@@ -21,8 +20,11 @@
  org.eclipse.jdt.core,
  org.spoofax.terms,
  org.strategoxt.strj,
- org.eclipse.ui.forms
+ org.eclipse.ui.forms,
+ org.eclipse.core.resources;bundle-version="3.6.1"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: org.strategoxt.imp.testing
+Export-Package: org.strategoxt.imp.testing,
+ org.strategoxt.imp.testing.listener
+Bundle-Vendor: Spoofax.org
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Mon Sep 12 13:12:55 2011	(r23326)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Mon Sep 12 14:01:28 2011	(r23327)
@@ -46,7 +46,7 @@
         <mkdir dir="${lib}"/>
         <mkdir dir="${syntax}"/>
 
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
             <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
@@ -250,6 +250,37 @@
             </java>
         </target>
         
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+        
         <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
@@ -421,145 +452,145 @@
                 
         <!-- begin: targets used for adding debugging instrumentation to stratego -->
         
-		<!-- 
-			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
-			Only used by stratego.jvm.helper.debug 
-		-->
-		<condition property="transformer-output" value="" else="--output-rtree">
-			<isset property="debug.the.debug.transformer"/>
-		</condition>
-		
-		<!-- 
-			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
-			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
-			Only used by stratego.jvm.helper.debug
-		-->
-		<condition property="strj.input.file.type" value="str" else="rtree">
-			<isset property="debug.the.debug.transformer"/>
-		</condition>
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
         
         <!-- value determines which target will be executed.
-        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
-        	else call stratego.jar
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
         -->
         <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
             <available file=".debugmode"/>
         </condition>
-		
-		<!-- will save the stratego files with debug info in this folder -->
-		<property name="trans-debug" location="trans-debug"/>
-		
-		<!-- this helper target determines what target to call, based on debug.build.enabled -->
-		<target name="stratego.jar.helper">
-			<antcall target="${stratego.jar.target}"/>
-		</target>
-		
-		<!-- call stratego.jar unless debug.build.enabled property is set --> 
-		<target name="call.stratego.jar" depends="stratego.jar">
-			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
-		</target>
-		
-		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
-		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
-			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
-		</target>
-		
-		<!-- copy stratego runtime jars to utils folder -->
-		<target name="utils-files-debug" depends="utils-files">
-			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
-			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
-		</target>
-		
-	    <!-- Stratego to Java compiler with debugging capabilities -->
-	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
-	        <dependset>
-	            <srcfileset dir="${basedir}">
-	                <include name="**/*.str"/>
-	                <include name="**/*.astr"/>
-	                <exclude name="lib/editor-common.generated.str"/>
-	            </srcfileset>
-	            <targetfileset file="${src-gen}/trans/Main.java"/>
-	        </dependset>
-	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
-	        <antcall target="copy-jar"/>
-	        <antcall target="stratego.jar.deletehelper"/>
-	    	<!-- compile stratego to java -->
-	        <antcall target="stratego.jvm.helper.debug">
-	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
-	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
-	        </antcall>
-	    	<!-- compile java to class -->
-	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
-	    		<!-- attribute in javac: srcdir="${src-gen}" -->
-	    		<src path="${src-gen}"/>
-	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
-	        	<classpath>
-	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
-	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
-	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
-	        	</classpath>
-	        	<!-- attribute in javac: includes="trans/**"  -->
-	        	<include name="trans/**"/>
-	    	</javac>
-	        <!-- copy imported terms -->
-	        <copy todir="${build}/trans">
-	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
-	        </copy>
-	    	<!-- create a jar from the class files -->
-	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
-	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
-	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
-	    </target>
-		
-		<!-- instrument the stratego program and compile it to java -->
-	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
-	    	<echo message="generate stratego with debug information"/>
-	    	<echo message="${basedir}"/>
-	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
-	    	<!-- add debug information -->
-	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
-	  		     <classpath>
-					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
-	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
-	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
-	  		     </classpath>
-	  			<arg value="-i"/>
-	  			<arg value="${trans}/${strmodule}.str"/>
-	  			<arg value="--gen-dir"/>
-	  			<arg value="${trans-debug}"/>
-	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
-	  			<arg value="${basedir}"/>
-	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
-	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
-	  			
-	  			<!-- arguments should start with two '-'-characters -->
-	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
-	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
-	  			<!-- <arg value="-output-rtree"/> --> 
-	    	</java>
-	    	<!-- now compile instrumented stratego to java -->
-	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-	        <java classname="org.strategoxt.strj.Main" failonerror="true">
-	            <arg value="-i"/>
-	            <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
-	            <arg value="-o"/>
-	            <arg value="${build.stratego.outputfile}"/>
-	            <arg value="-p"/>
-	            <arg value="trans"/>
-	            <arg value="--library"/>
-	            <arg value="--clean"/>
-	            <arg line="${build.stratego.args}"/>
-	            <arg line="${build.stratego.extraargs}"/>
-	            <arg line="${externaljarflags}"/>
-	            <arg line="${externaldefimport}"/>
-	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
-	        	<!-- put strategodebuglib.rtree on the include path -->
-	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
-	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
-	        </java>
-	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-	        <mkdir dir="${build}/trans"/>
-	    </target>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
         
         
         <!-- end: targets used for adding debugging instrumentation to stratego -->

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/ITestListener.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/ITestListener.java	Mon Sep 12 14:01:28 2011	(r23327)
@@ -0,0 +1,23 @@
+/**
+ * 
+ */
+package org.strategoxt.imp.testing.listener;
+
+/**
+ * @author vladvergu
+ * 
+ */
+public interface ITestListener {
+
+	static final String EXTENSION_ID = "org.strategoxt.imp.testing.testlistener";
+	
+	void reset();
+
+	void addTestcase(String testsuite, String description, int offset);
+
+	void addTestsuite(String name, String filename);
+
+	void startTestcase(String testsuite, String description);
+
+	void finishTestcase(String testsuite, String description, boolean succeeded);
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Mon Sep 12 13:12:55 2011	(r23326)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Mon Sep 12 14:01:28 2011	(r23327)
@@ -18,11 +18,11 @@
         		   get_service_input_term_0_1.instance,
         		   get_service_input_term_refactoring_0_1.instance,
         		   open_editor_0_0.instance,
-        		   testview_init_0_0.instance,
-        		   testview_add_testsuite_0_2.instance,
-        		   testview_add_testcase_0_3.instance,
-        		   testview_start_testcase_0_2.instance,
-        		   testview_finish_testcase_0_3.instance,
+        		   testlistener_init_0_0.instance,
+        		   testlistener_add_testsuite_0_2.instance,
+        		   testlistener_add_testcase_0_3.instance,
+        		   testlistener_start_testcase_0_2.instance,
+        		   testlistener_finish_testcase_0_3.instance,
         		   parse_spt_string_0_0.instance,
         		   get_completion_input_term_0_1.instance });
          }

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java (from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java	Fri Sep  9 13:27:56 2011	(r23317, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java	Mon Sep 12 14:01:28 2011	(r23327)
@@ -3,42 +3,80 @@
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.ui.IViewPart;
-import org.eclipse.ui.PlatformUI;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.ISafeRunnable;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.SafeRunner;
+import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.testing.Activator;
+import org.strategoxt.imp.testing.listener.ITestListener;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
-public class testview_add_testcase_0_3 extends Strategy {
+public class testlistener_add_testcase_0_3 extends Strategy {
+
+	public static testlistener_add_testcase_0_3 instance = new testlistener_add_testcase_0_3();
 
-	public static testview_add_testcase_0_3 instance = new testview_add_testcase_0_3();
-	
 	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1, IStrategoTerm arg2) {
-		if (!isTermString(arg0) || !isTermString(arg1) ) return null;
-		
-		final String ts = ((IStrategoString)arg0).stringValue();
-		final String desc = ((IStrategoString)arg1).stringValue();
-		final int offset = ((IStrategoInt)arg2).intValue();
-		
-		Display.getDefault().syncExec(new Runnable() {
-            public void run() {
-			  	try {       
-					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-					// Using reflection, because if I use a cast, I get a ClassCastException 
-					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-					Method m = a.getClass().getMethod("addTestcase", new Class[] {String.class, String.class, int.class}) ;
-					m.invoke(a, ts, desc, offset);
-			  	} catch(Exception e) {
-			  		e.printStackTrace();
-			  	}  
-            }
-		});
-		
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1,
+			IStrategoTerm arg2) {
+		if (!isTermString(arg0) || !isTermString(arg1))
+			return null;
+
+		final String ts = ((IStrategoString) arg0).stringValue();
+		final String desc = ((IStrategoString) arg1).stringValue();
+		final int offset = ((IStrategoInt) arg2).intValue();
+
+		// Display.getDefault().syncExec(new Runnable() {
+		// public void run() {
+		// try {
+		// IViewPart a =
+		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+		// // Using reflection, because if I use a cast, I get a ClassCastException
+		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
+		// Method m = a.getClass().getMethod("addTestcase", new Class[] {String.class, String.class, int.class}) ;
+		// m.invoke(a, ts, desc, offset);
+		// } catch(Exception e) {
+		// e.printStackTrace();
+		// }
+		// }
+		// });
+		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
+				ITestListener.EXTENSION_ID);
+		try {
+			for (IConfigurationElement e : config) {
+				final Object o = e.createExecutableExtension("class");
+				ISafeRunnable runner = new ISafeRunnable() {
+
+					public void run() throws Exception {
+						// Using reflection, because if I use a cast, I get a ClassCastException
+						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+						Method m = o.getClass().getMethod("addTestcase",
+								new Class[] { String.class, String.class, int.class });
+						if (!Modifier.isAbstract(m.getModifiers())) {
+							m.invoke(o, ts, desc, offset);
+						}
+					}
+
+					public void handleException(Throwable exception) {
+						//
+					}
+				};
+				SafeRunner.run(runner);
+			}
+			if(config.length == 0){
+				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
+			}
+		} catch (CoreException cex) {
+			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status", cex));
+		}
 		return current;
 	}
 

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java (from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_2.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_2.java	Fri Sep  9 13:27:56 2011	(r23317, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java	Mon Sep 12 14:01:28 2011	(r23327)
@@ -3,40 +3,76 @@
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.ui.IViewPart;
-import org.eclipse.ui.PlatformUI;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.ISafeRunnable;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.SafeRunner;
+import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.testing.Activator;
+import org.strategoxt.imp.testing.listener.ITestListener;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
-public class testview_add_testsuite_0_2 extends Strategy {
+public class testlistener_add_testsuite_0_2 extends Strategy {
+
+	public static testlistener_add_testsuite_0_2 instance = new testlistener_add_testsuite_0_2();
 
-	public static testview_add_testsuite_0_2 instance = new testview_add_testsuite_0_2();
-	
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1) {
-		if (!isTermString(arg0) || !isTermString(arg1)) return null;
+		if (!isTermString(arg0) || !isTermString(arg1))
+			return null;
+
+		final String name = ((IStrategoString) arg0).stringValue();
+		final String filename = ((IStrategoString) arg1).stringValue();
 
-		final String name = ((IStrategoString)arg0).stringValue();
-		final String filename = ((IStrategoString)arg1).stringValue();
-		
-		Display.getDefault().syncExec(new Runnable() {
-            public void run() {
-			  	try {       
-					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-					// Using reflection, because if I use a cast, I get a ClassCastException 
-					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-					Method m = a.getClass().getMethod("addTestsuite", new Class[] {String.class, String.class}) ;
-					m.invoke(a, name, filename);
-			  	} catch(Exception e) {
-			  		e.printStackTrace();
-			  	}  
-            }
-		});
-		
+		// Display.getDefault().syncExec(new Runnable() {
+		// public void run() {
+		// try {
+		// IViewPart a =
+		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+		// // Using reflection, because if I use a cast, I get a ClassCastException
+		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
+		// Method m = a.getClass().getMethod("addTestsuite", new Class[] {String.class, String.class}) ;
+		// m.invoke(a, name, filename);
+		// } catch(Exception e) {
+		// e.printStackTrace();
+		// }
+		// }
+		// });
+		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
+				ITestListener.EXTENSION_ID);
+		try {
+			for (IConfigurationElement e : config) {
+				final Object o = e.createExecutableExtension("class");
+				ISafeRunnable runner = new ISafeRunnable() {
+
+					public void run() throws Exception {
+						// Using reflection, because if I use a cast, I get a ClassCastException
+						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+						Method m = o.getClass().getMethod("addTestsuite", new Class[] { String.class, String.class });
+						if (!Modifier.isAbstract(m.getModifiers())) {
+							m.invoke(o, name, filename);
+						}
+					}
+
+					public void handleException(Throwable exception) {
+						//
+					}
+				};
+				SafeRunner.run(runner);
+			}
+			if(config.length == 0){
+				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
+			}
+		} catch (CoreException cex) {
+			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+		}
 		return current;
 	}
 

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java (from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java	Fri Sep  9 13:27:56 2011	(r23317, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java	Mon Sep 12 14:01:28 2011	(r23327)
@@ -3,46 +3,90 @@
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.ui.IViewPart;
-import org.eclipse.ui.PlatformUI;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.ISafeRunnable;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.SafeRunner;
+import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.testing.Activator;
+import org.strategoxt.imp.testing.listener.ITestListener;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
-public class testview_finish_testcase_0_3 extends Strategy {
+public class testlistener_finish_testcase_0_3 extends Strategy {
+
+	public static testlistener_finish_testcase_0_3 instance = new testlistener_finish_testcase_0_3();
 
-	public static testview_finish_testcase_0_3 instance = new testview_finish_testcase_0_3();
-	
 	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1, IStrategoTerm arg2) {
-		if (!isTermString(arg0) || !isTermString(arg1) ) return null;
-		
-		final String ts = ((IStrategoString)arg0).stringValue();
-		final String desc = ((IStrategoString)arg1).stringValue();
-		final String appl = ((IStrategoAppl)arg2).getConstructor().getName();
-		
-		Display.getDefault().syncExec(new Runnable() {
-            public void run() {
-			  	try {
-					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-					// Using reflection, because if I use a cast, I get a ClassCastException 
-					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-					Method m = a.getClass().getMethod("finishTestcase", new Class[] {String.class, String.class, boolean.class}) ;
-					if(appl.equals("True")) {
-						m.invoke(a, ts, desc, true);
-					} else {
-						m.invoke(a, ts, desc, false);
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1,
+			IStrategoTerm arg2) {
+		if (!isTermString(arg0) || !isTermString(arg1))
+			return null;
+
+		final String ts = ((IStrategoString) arg0).stringValue();
+		final String desc = ((IStrategoString) arg1).stringValue();
+		final String appl = ((IStrategoAppl) arg2).getConstructor().getName();
+
+		// Display.getDefault().syncExec(new Runnable() {
+		// public void run() {
+		// try {
+		// IViewPart a =
+		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+		// // Using reflection, because if I use a cast, I get a ClassCastException
+		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
+		// Method m = a.getClass().getMethod("finishTestcase", new Class[] {String.class, String.class, boolean.class})
+		// ;
+		// if(appl.equals("True")) {
+		// m.invoke(a, ts, desc, true);
+		// } else {
+		// m.invoke(a, ts, desc, false);
+		// }
+		// } catch(Exception e) {
+		// e.printStackTrace();
+		// }
+		// }
+		// });
+		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
+				ITestListener.EXTENSION_ID);
+		try {
+			for (IConfigurationElement e : config) {
+				final Object o = e.createExecutableExtension("class");
+				ISafeRunnable runner = new ISafeRunnable() {
+
+					public void run() throws Exception {
+						// Using reflection, because if I use a cast, I get a ClassCastException
+						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+						Method m = o.getClass().getMethod("finishTestcase",
+								new Class[] { String.class, String.class, boolean.class });
+						if (!Modifier.isAbstract(m.getModifiers())) {
+							if (appl.equals("True")) {
+								m.invoke(o, ts, desc, true);
+							} else {
+								m.invoke(o, ts, desc, false);
+							}
+						}
 					}
-			  	} catch(Exception e) {
-			  		e.printStackTrace();
-			  	}  
-            }
-		});
-		
+
+					public void handleException(Throwable exception) {
+						//
+					}
+				};
+				SafeRunner.run(runner);
+
+			}
+			if(config.length == 0){
+				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
+			}
+		} catch (CoreException cex) {
+			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+		}
 		return current;
 	}
 

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java (from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_init_0_0.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_init_0_0.java	Fri Sep  9 13:27:56 2011	(r23317, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java	Mon Sep 12 14:01:28 2011	(r23327)
@@ -1,34 +1,70 @@
 package org.strategoxt.imp.testing.strategies;
 
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.ui.IViewPart;
-import org.eclipse.ui.PlatformUI;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.ISafeRunnable;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.SafeRunner;
+import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.testing.Activator;
+import org.strategoxt.imp.testing.listener.ITestListener;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
-public class testview_init_0_0 extends Strategy {
+public class testlistener_init_0_0 extends Strategy {
+
+	public static testlistener_init_0_0 instance = new testlistener_init_0_0();
 
-	public static testview_init_0_0 instance = new testview_init_0_0();
-	
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		Display.getDefault().syncExec(new Runnable() {
-            public void run() {
-			  	try {       
-					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-					// Using reflection, because if I use a cast, I get a ClassCastException 
-					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-					Method m = a.getClass().getMethod("reset", new Class[] {}) ;
-					m.invoke(a);
-			  	} catch(Exception e) {
-			  		e.printStackTrace();
-			  	}  
-            }
-		});
-		
+		// Display.getDefault().syncExec(new Runnable() {
+		// public void run() {
+		// try {
+		// IViewPart a =
+		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+		// // Using reflection, because if I use a cast, I get a ClassCastException
+		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
+		// Method m = a.getClass().getMethod("reset", new Class[] {}) ;
+		// m.invoke(a);
+		// } catch(Exception e) {
+		// e.printStackTrace();
+		// }
+		// }
+		// });
+		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
+				ITestListener.EXTENSION_ID);
+
+		try {
+			for (IConfigurationElement e : config) {
+				final Object o = e.createExecutableExtension("class");
+				ISafeRunnable runner = new ISafeRunnable() {
+
+					public void run() throws Exception {
+						// Using reflection, because if I use a cast, I get a ClassCastException
+						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+						Method m = o.getClass().getMethod("reset", new Class[] {});
+						if (!Modifier.isAbstract(m.getModifiers())) {
+							m.invoke(o);
+						}
+					}
+
+					public void handleException(Throwable exception) {
+						//
+					}
+				};
+				SafeRunner.run(runner);
+			}
+			if(config.length == 0){
+				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
+			}
+		} catch (Exception cex) {
+			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+		}
+
 		return current;
 	}
 

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_open_0_0.java (from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java	Fri Sep  9 13:27:56 2011	(r23317, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_open_0_0.java	Mon Sep 12 14:01:28 2011	(r23327)
@@ -2,30 +2,27 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.ui.PartInitException;
-import org.eclipse.ui.PlatformUI;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
-public class testview_open_0_0 extends Strategy {
+public class testlistener_open_0_0 extends Strategy {
 
-	public static testview_open_0_0 instance = new testview_open_0_0();
+	public static testlistener_open_0_0 instance = new testlistener_open_0_0();
 	
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
 		if (!isTermString(current)) return null;
 		
-		Display.getDefault().syncExec(new Runnable() {
-            public void run() {
-				try {
-					PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunview");
-				} catch (PartInitException e) {
-					e.printStackTrace();
-				}
-            }
-		});
+//		Display.getDefault().syncExec(new Runnable() {
+//            public void run() {
+//				try {
+//					PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunview");
+//				} catch (PartInitException e) {
+//					e.printStackTrace();
+//				}
+//            }
+//		});
 		
 		return current;
 	}

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java (from r23317, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java	Fri Sep  9 13:27:56 2011	(r23317, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java	Mon Sep 12 14:01:28 2011	(r23327)
@@ -3,40 +3,77 @@
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.ui.IViewPart;
-import org.eclipse.ui.PlatformUI;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.ISafeRunnable;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.SafeRunner;
+import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.testing.Activator;
+import org.strategoxt.imp.testing.listener.ITestListener;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
-public class testview_start_testcase_0_2 extends Strategy {
+public class testlistener_start_testcase_0_2 extends Strategy {
+
+	public static testlistener_start_testcase_0_2 instance = new testlistener_start_testcase_0_2();
 
-	public static testview_start_testcase_0_2 instance = new testview_start_testcase_0_2();
-	
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1) {
-		if (!isTermString(arg0) || !isTermString(arg1) ) return null;
-		
-		final String ts = ((IStrategoString)arg0).stringValue();
-		final String desc = ((IStrategoString)arg1).stringValue();
-		
-		Display.getDefault().syncExec(new Runnable() {
-            public void run() {
-			  	try {       
-					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-					// Using reflection, because if I use a cast, I get a ClassCastException 
-					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-					Method m = a.getClass().getMethod("startTestcase", new Class[] {String.class, String.class}) ;
-					m.invoke(a, ts, desc);
-			  	} catch(Exception e) {
-			  		e.printStackTrace();
-			  	}  
-            }
-		});
-		
+		if (!isTermString(arg0) || !isTermString(arg1))
+			return null;
+
+		final String ts = ((IStrategoString) arg0).stringValue();
+		final String desc = ((IStrategoString) arg1).stringValue();
+
+		// Display.getDefault().syncExec(new Runnable() {
+		// public void run() {
+		// try {
+		// IViewPart a =
+		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+		// // Using reflection, because if I use a cast, I get a ClassCastException
+		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
+		// Method m = a.getClass().getMethod("startTestcase", new Class[] {String.class, String.class}) ;
+		// m.invoke(a, ts, desc);
+		// } catch(Exception e) {
+		// e.printStackTrace();
+		// }
+		// }
+		// });
+		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
+				ITestListener.EXTENSION_ID);
+		try {
+			for (IConfigurationElement e : config) {
+				final Object o = e.createExecutableExtension("class");
+				ISafeRunnable runner = new ISafeRunnable() {
+
+					public void run() throws Exception {
+						// Using reflection, because if I use a cast, I get a ClassCastException
+						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+						Method m = o.getClass().getMethod("startTestcase", new Class[] { String.class, String.class });
+						if (!Modifier.isAbstract(m.getModifiers())) {
+							m.invoke(o, ts, desc);
+						}
+					}
+
+					public void handleException(Throwable exception) {
+						//
+					}
+				};
+				SafeRunner.run(runner);
+
+			}
+			if(config.length == 0){
+				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
+			}
+		} catch (CoreException cex) {
+			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+		}
 		return current;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml	Mon Sep 12 13:12:55 2011	(r23326)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml	Mon Sep 12 14:01:28 2011	(r23327)
@@ -2,14 +2,7 @@
 <?eclipse version="3.0"?>
 
 <plugin>
-   <extension
-         point="org.eclipse.ui.views">
-      <view
-            name="Spoofax Test Runner"
-            class="org.strategoxt.imp.testing.views.TestRunViewPart"
-            id="org.strategoxt.imp.testing.views.testrunviewpart">
-      </view>
-   </extension>
+   <extension-point id="testlistener" name="Spoofax Test Listener" schema="schema/testlistener.exsd"/>
 
        <extension point="org.eclipse.imp.runtime.languageDescription">
           <language extensions="spt" description="Spoofax-Testing" language="Spoofax-Testing" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.testing.SpoofaxTestingValidator" validatorClass="org.strategoxt.imp.testing.SpoofaxTestingValidator"></language>
@@ -18,4 +11,4 @@
           <parser class="org.strategoxt.imp.testing.SpoofaxTestingParseController" language="Spoofax-Testing">
           </parser>
        </extension>    
-    </plugin>
\ No newline at end of file
+    </plugin>

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd	Mon Sep 12 14:01:28 2011	(r23327)
@@ -0,0 +1,102 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<!-- Schema file written by PDE -->
+<schema targetNamespace="org.strategoxt.imp.testing" xmlns="http://www.w3.org/2001/XMLSchema">
+<annotation>
+      <appInfo>
+         <meta.schema plugin="org.strategoxt.imp.testing" id="testlistener" name="Spoofax Test Listener"/>
+      </appInfo>
+      <documentation>
+         [Enter description of this extension point.]
+      </documentation>
+   </annotation>
+
+   <element name="extension">
+      <annotation>
+         <appInfo>
+            <meta.element />
+         </appInfo>
+      </annotation>
+      <complexType>
+         <choice minOccurs="1" maxOccurs="unbounded">
+            <element ref="client"/>
+         </choice>
+         <attribute name="point" type="string" use="required">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="id" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="name" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+               <appInfo>
+                  <meta.attribute translatable="true"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <element name="client">
+      <complexType>
+         <attribute name="class" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+               <appInfo>
+                  <meta.attribute kind="java" basedOn=":org.strategoxt.imp.testing.listener.ITestListener"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="since"/>
+      </appInfo>
+      <documentation>
+         [Enter the first release in which this extension point appears.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="examples"/>
+      </appInfo>
+      <documentation>
+         [Enter extension point usage example here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="apiinfo"/>
+      </appInfo>
+      <documentation>
+         [Enter API information here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="implementation"/>
+      </appInfo>
+      <documentation>
+         [Enter information about supplied implementation of this extension point.]
+      </documentation>
+   </annotation>
+
+
+</schema>

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Mon Sep 12 13:12:55 2011	(r23326)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Mon Sep 12 14:01:28 2011	(r23327)
@@ -28,18 +28,18 @@
   ; flatten-list
   
   test-runner =
-    testview-init 
+    testlistener-init 
   ; find-all-testsuites-in-project ;debug(!"1: ")
-  ; map(testview-add-testsuite(|<get-testsuite-name-from-file>,<id>)) ;debug(!"2: ")
+  ; map(testlistener-add-testsuite(|<get-testsuite-name-from-file>,<id>)) ;debug(!"2: ")
   ; map(try(run-testsuite)) ;debug(!"3: ")
   ; !None()
 
   test-runner-file:
     (selected, position, ast, path, project-path) -> None()
     with
-      testview-init 
+      testlistener-init 
     ; !path
-    ; testview-add-testsuite(|<get-testsuite-name-from-file>,<id>)
+    ; testlistener-add-testsuite(|<get-testsuite-name-from-file>,<id>)
     ; try(run-testsuite)
   
   find-all-testsuites-in-project =
@@ -54,7 +54,7 @@
     where 
       ast  := <parse-spt-file> file
     ; ast' := <topdown(repeat(spt-desugar)); alltd(spt-desugar-refactoring-conditions)> ast 
-    ; testcases := <collect-all(testview-add-testcase(|file, <test-to-description>,<origin-offset>))>ast'
+    ; testcases := <collect-all(testlistener-add-testcase(|file, <test-to-description>,<origin-offset>))>ast'
     ; <map(run-testcase(|file))>testcases
   
   parse-spt-file = 
@@ -70,11 +70,11 @@
   run-testcase(|testsuite) = 
     ?tst
   ; test-to-description => name
-  ; testview-start-testcase(|testsuite, name)
+  ; testlistener-start-testcase(|testsuite, name)
   ; if errors := <check-warning>tst ; not((id,[])) then
-      testview-finish-testcase(|testsuite, name, False())
+      testlistener-finish-testcase(|testsuite, name, False())
     else
-      testview-finish-testcase(|testsuite, name, True()) 
+      testlistener-finish-testcase(|testsuite, name, True()) 
     end
     
   test-to-description = 
@@ -82,11 +82,11 @@
   + ?TestStratego(_, description(<id>), _, _)  
   + ?TestEmpty(_, description(<id>))
 
-  external testview-init(|)
-  external testview-add-testsuite(|testsuite, filename)
-  external testview-add-testcase(|testsuite, description, linenr)
-  external testview-start-testcase(|testsuite, description)
-  external testview-finish-testcase(|testsuite, description, result)
+  external testlistener-init(|)
+  external testlistener-add-testsuite(|testsuite, filename)
+  external testlistener-add-testcase(|testsuite, description, linenr)
+  external testlistener-start-testcase(|testsuite, description)
+  external testlistener-finish-testcase(|testsuite, description, result)
   external parse-spt-string(|)
     
   
\ No newline at end of file

From v.vergu at gmail.com  Mon Sep 12 16:13:06 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 14:13:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23328 - hydra/jobs
Message-ID: <20110912141306.DBA77108C00A@mx3.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 14:13:06 2011
New Revision: 23328
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23328&sc=1

Log:
Included org.strategoxt.imp.testing.ui in the list of plugins.

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Mon Sep 12 14:01:28 2011	(r23327)
+++ hydra/jobs/spoofax-imp.nix	Mon Sep 12 14:13:06 2011	(r23328)
@@ -92,6 +92,7 @@
                  ${spoofaxImp}/org.strategoxt.imp.editors.stratego \
                  ${spoofaxImp}/org.strategoxt.imp.editors.spoofax.configuration \
                  ${spoofaxImp}/org.strategoxt.imp.testing \
+		 ${spoofaxImp}/org.strategoxt.imp.testing.ui \
                  ${spoofaxImp}/org.strategoxt.imp.feature \
                  ${spoofaxImp}/org.strategoxt.imp.generator \
                  ${spoofaxImp}/org.strategoxt.imp.spoofax.generator \

From v.vergu at gmail.com  Mon Sep 12 16:14:57 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 14:14:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23329 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF
Message-ID: <20110912141457.20EC72B8040@mx2.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 14:14:56 2011
New Revision: 23329
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23329&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Sep 12 14:13:06 2011	(r23328)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Sep 12 14:14:56 2011	(r23329)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: SpoofaxTesting UI Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.testing.ui;singleton:=true
-Bundle-Version: 1.0.0.qualifier
+Bundle-Version: 1.0.0.201109121517
 Bundle-Activator: org.strategoxt.imp.testing.ui.Activator
 Require-Bundle: org.eclipse.ui,
  org.eclipse.core.runtime,

From v.vergu at gmail.com  Mon Sep 12 16:22:08 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 14:22:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23330 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.testing.ui/META-INF
	org.strategoxt.imp.testing/META-INF
Message-ID: <20110912142208.B7F48CC092@mx4.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 14:22:08 2011
New Revision: 23330
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23330&sc=1

Log:
hopefully fixing build.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Sep 12 14:14:56 2011	(r23329)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Sep 12 14:22:08 2011	(r23330)
@@ -347,7 +347,12 @@
          id="org.strategoxt.imp.spoofax.generator"
          download-size="0"
          install-size="0"
-         unpack="true"
          version="0.1.2.qualifier"/>
 
+   <plugin
+         id="org.strategoxt.imp.testing.ui"
+         download-size="0"
+         install-size="0"
+         version="1.0.0.qualifier"/>
+
 </feature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Sep 12 14:14:56 2011	(r23329)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Sep 12 14:22:08 2011	(r23330)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: SpoofaxTesting UI Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.testing.ui;singleton:=true
-Bundle-Version: 1.0.0.201109121517
+Bundle-Version: 1.0.0.qualifer
 Bundle-Activator: org.strategoxt.imp.testing.ui.Activator
 Require-Bundle: org.eclipse.ui,
  org.eclipse.core.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Sep 12 14:14:56 2011	(r23329)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Sep 12 14:22:08 2011	(r23330)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: SpoofaxTesting Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.testing; singleton:=true
-Bundle-Version: 1.0.1.201109121517
+Bundle-Version: 1.0.0.qualifier
 Bundle-Activator: org.strategoxt.imp.testing.Activator
 Import-Package: org.osgi.framework
 Require-Bundle: org.strategoxt.imp.runtime,

From v.vergu at gmail.com  Mon Sep 12 16:38:02 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 14:38:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23333 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.ui/META-INF
	org.strategoxt.imp.testing/META-INF
Message-ID: <20110912143802.47E71108C017@mx3.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 14:38:02 2011
New Revision: 23333
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23333&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Sep 12 14:36:17 2011	(r23332)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Sep 12 14:38:02 2011	(r23333)
@@ -6,10 +6,10 @@
 Bundle-Activator: org.strategoxt.imp.testing.ui.Activator
 Require-Bundle: org.eclipse.ui,
  org.eclipse.core.runtime,
- org.strategoxt.imp.testing;bundle-version="1.0.0",
- org.eclipse.core.resources;bundle-version="3.6.0",
- org.eclipse.ui.forms;bundle-version="3.5.2",
- org.strategoxt.strj;bundle-version="0.17.92",
- org.strategoxt.imp.runtime;bundle-version="0.1.1"
+ org.strategoxt.imp.testing,
+ org.eclipse.core.resources,
+ org.eclipse.ui.forms,
+ org.strategoxt.strj,
+ org.strategoxt.imp.runtime
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Sep 12 14:36:17 2011	(r23332)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Sep 12 14:38:02 2011	(r23333)
@@ -21,7 +21,7 @@
  org.spoofax.terms,
  org.strategoxt.strj,
  org.eclipse.ui.forms,
- org.eclipse.core.resources;bundle-version="3.6.0"
+ org.eclipse.core.resources
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Export-Package: org.strategoxt.imp.testing,

From L.C.L.Kats at tudelft.nl  Mon Sep 12 17:13:16 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 12 Sep 2011 15:13:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23334 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	strategoxt-java-backend/trunk/java
Message-ID: <20110912151316.69246108C017@mx3.tudelft.nl>

Author: LennartKats
Date: Mon Sep 12 15:13:16 2011
New Revision: 23334
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23334&sc=1

Log:
added SSL_fflush to SSLLibrary

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	Mon Sep 12 14:38:02 2011	(r23333)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	Mon Sep 12 15:13:16 2011	(r23334)
@@ -125,6 +125,7 @@
         add(new SSL_fclose());
         add(new SSL_read_term_from_string());
         add(new SSL_fgetc());
+        add(new SSL_fflush());
         add(new SSL_table_fold());
         add(new SSL_table_keys_fold());
         add(new SSL_table_values_fold());

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From v.vergu at gmail.com  Mon Sep 12 16:32:32 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 14:32:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23331 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF
Message-ID: <20110912143232.747B8108C02B@mx3.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 14:32:32 2011
New Revision: 23331
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23331&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Sep 12 14:22:08 2011	(r23330)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Sep 12 14:32:32 2011	(r23331)
@@ -21,7 +21,7 @@
  org.spoofax.terms,
  org.strategoxt.strj,
  org.eclipse.ui.forms,
- org.eclipse.core.resources;bundle-version="3.6.1"
+ org.eclipse.core.resources;bundle-version="3.6.0"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Export-Package: org.strategoxt.imp.testing,

From v.vergu at gmail.com  Mon Sep 12 16:36:18 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 12 Sep 2011 14:36:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23332 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF
Message-ID: <20110912143618.2FEE1CC0C8@mx4.tudelft.nl>

Author: VladVergu
Date: Mon Sep 12 14:36:17 2011
New Revision: 23332
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23332&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Sep 12 14:32:32 2011	(r23331)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Sep 12 14:36:17 2011	(r23332)
@@ -7,7 +7,7 @@
 Require-Bundle: org.eclipse.ui,
  org.eclipse.core.runtime,
  org.strategoxt.imp.testing;bundle-version="1.0.0",
- org.eclipse.core.resources;bundle-version="3.6.1",
+ org.eclipse.core.resources;bundle-version="3.6.0",
  org.eclipse.ui.forms;bundle-version="3.5.2",
  org.strategoxt.strj;bundle-version="0.17.92",
  org.strategoxt.imp.runtime;bundle-version="0.1.1"

From M.A.Akhter at student.tudelft.nl  Mon Sep 12 23:20:43 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 12 Sep 2011 21:20:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23336 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110912212043.6D5742B800E@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Sep 12 21:20:42 2011
New Revision: 23336
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23336&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java	Mon Sep 12 16:50:30 2011	(r23335)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java	Mon Sep 12 21:20:42 2011	(r23336)
@@ -12,6 +12,7 @@
 public abstract class BaseConstructDeclaration implements Serializable
 {
 	private static final long serialVersionUID = 1055862481052307186L;
+	protected static final String qnameContructorName = "QName";
 	
 	final IStrategoList id;
 	
@@ -70,8 +71,10 @@
 	public static IStrategoAppl toIdTerm ( ITermFactory factory ,  String constructorName , IStrategoList id)
 	{
 		IStrategoConstructor cons = factory.makeConstructor(constructorName, 1);
+		IStrategoConstructor qnameCons = factory.makeConstructor(qnameContructorName, 1);
+		IStrategoAppl qnameAppl = factory.makeAppl(qnameCons, id);
 		
-		return factory.makeAppl(cons, id);
+		return factory.makeAppl(cons, qnameAppl);
 	}
 	
 	protected IStrategoTerm forceImploderAttachment(IStrategoTerm term) {
@@ -88,4 +91,14 @@
 	}
 	
 	protected String getFileLocation() {return null;}
+	
+	protected static IStrategoList getID(ITermFactory fac, IStrategoAppl qName) {
+		
+		final IStrategoConstructor qnameCon = fac.makeConstructor(qnameContructorName, 1);
+		
+		if(qName.getConstructor() == qnameCon)
+			return (IStrategoList)qName.getSubterm(0);
+		
+		throw new IllegalArgumentException("Invalid QName : " + qName);
+	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Mon Sep 12 16:50:30 2011	(r23335)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Mon Sep 12 21:20:42 2011	(r23336)
@@ -90,11 +90,9 @@
 		final IStrategoConstructor moduleQNameCons = fac.makeConstructor(_moduleIdContructorName, 1);
 		
 		if(moduleQNameCons == moduleQName.getConstructor())
-		{
-			return (IStrategoList)moduleQName.getSubterm(0);
-		}
-		else
-			throw new IllegalArgumentException("Invalid module qname : "+ moduleQName.toString());
+			getID(fac, (IStrategoAppl)moduleQName.getSubterm(ModuleTypedQNameIndex));	
+		
+		throw new IllegalArgumentException("Invalid module qname : "+ moduleQName.toString());
 	}
 	
 	public static IStrategoAppl toModuleIdTerm(ITermFactory termFactory , ModuleDeclaration decl)
@@ -102,7 +100,7 @@
 		return toIdTerm(termFactory, _moduleIdContructorName, decl.getId());
 	}
 
-	/* Transforms {@link ModuleDeclaration} to following term-
+	/* Transforms {@link ModuleDeclaration} to following term : 
 	 * 		ModuleDecl :  Module * String * Package -> Def
 	 * 
 	 * (non-Javadoc)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Mon Sep 12 16:50:30 2011	(r23335)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Mon Sep 12 21:20:42 2011	(r23336)
@@ -84,14 +84,14 @@
 	 */
 	public static IStrategoList getPackageId(ITermFactory fac,IStrategoAppl packageQName)
 	{
-		final IStrategoConstructor packageQNameCons = fac.makeConstructor("Package", 1);
+		final IStrategoConstructor packageQNameCon = fac.makeConstructor(_packageIdContructorName, 1);
 		
-		if(packageQNameCons == packageQName.getConstructor())
+		if(packageQNameCon == packageQName.getConstructor())
 		{
-			return (IStrategoList)packageQName.getSubterm(0);
+			getID(fac, (IStrategoAppl)packageQName.getSubterm(0));	
 		}
-		else
-			throw new IllegalArgumentException("packageQName");
+		
+		throw new IllegalArgumentException("Invalid Package Typed QName : "+ packageQName);
 	}
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Mon Sep 12 16:50:30 2011	(r23335)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Mon Sep 12 21:20:42 2011	(r23336)
@@ -1,9 +1,5 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
-
-import java.io.IOException;
-
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
@@ -13,17 +9,22 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
+ * Primitive to save Spoofaxlang Semantic Index in disk and close any 
+ * underlying open connection . 
+ * 
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
 public class SPX_index_close extends AbstractPrimitive {
 
-	private static String NAME = "SPX_index_save";
-
+	private static String NAME = "SPX_index_close";
+	private final static int PROJECT_NAME_INDEX = 0;
+	private final static int NO_ARGS = 1;
+	
 	private final SpxSemanticIndex index;
 
 	public SPX_index_close(SpxSemanticIndex index) {
-		super(NAME, 0, 1);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 	
@@ -34,12 +35,12 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 			throws InterpreterException {
 	
-		if (!Tools.isTermString(tvars[0]))
+		if ( tvars.length != NO_ARGS || !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
 			return false;
 		
 		try 
 		{
-			return index.close(tvars[0]);
+			return index.close(tvars[PROJECT_NAME_INDEX]);
 		}
 		catch(Exception ex)
 		{

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Mon Sep 12 16:50:30 2011	(r23335)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Mon Sep 12 21:20:42 2011	(r23336)
@@ -13,6 +13,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
+ * Primitive to index spoofaxlang CompilationUnit
+ * 
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Mon Sep 12 16:50:30 2011	(r23335)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Mon Sep 12 21:20:42 2011	(r23336)
@@ -11,16 +11,22 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
+ * Primitive to return a Spoofaxlang CompilationUnit
+ *  
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
 public class SPX_index_get_compilation_unit extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_get_compilation_unit";
+	private final static int PROJECT_NAME_INDEX = 0;
+	private final static int COMP_UNIT_PATH_INDEX = 1;
+	
+	private final static int NO_ARGS = 2;
 	private final SpxSemanticIndex index;
 
 	public SPX_index_get_compilation_unit(SpxSemanticIndex index) {
-		super(NAME, 0, 2);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}	
 
@@ -31,10 +37,15 @@
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){ 
 		boolean successStatement = false;
-		if ( Tools.isTermString(tvars[0]) && Tools.isTermString(tvars[1])) 
+		
+		if(tvars.length != NO_ARGS)
+			return successStatement;
+		
+		
+		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermString(tvars[COMP_UNIT_PATH_INDEX])) 
 		{
-			IStrategoString projectName = (IStrategoString)tvars[0];
-			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[1];
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[COMP_UNIT_PATH_INDEX];
 			try {
 				IStrategoTerm t = index.getCompilationUnit(projectName ,  spxCompilationUnitPath);
 				env.setCurrent(t);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Mon Sep 12 16:50:30 2011	(r23335)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Mon Sep 12 21:20:42 2011	(r23336)
@@ -19,8 +19,9 @@
 public class SPX_index_get_language_descriptor extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_get_language_descriptor";
-	private static int PROJECT_NAME_INDEX = 0;
-	private static int PACKAGE_ID_INDEX = 1;
+	
+	private final static int PROJECT_NAME_INDEX = 0;
+	private final static int PACKAGE_ID_INDEX = 1;
 	
 	private final SpxSemanticIndex index;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Mon Sep 12 16:50:30 2011	(r23335)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Mon Sep 12 21:20:42 2011	(r23336)
@@ -1,9 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import java.io.IOException;
-
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
@@ -11,17 +9,21 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
+ * Primitive to initialize Spoofaxlang Semantic Index
+ * 
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
 public class SPX_index_init extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_init";
-
+	private final static int PROJECT_NAME_INDEX = 0;
+	private final static int NO_ARGS = 1;
+	
 	private final SpxSemanticIndex index;
 
 	public SPX_index_init(SpxSemanticIndex index) {
-		super(NAME, 0, 1);
+		super(NAME, 0, NO_ARGS );
 		this.index = index;
 	}
 
@@ -31,10 +33,10 @@
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 	{
-		if ( tvars.length != 1)
+		if ( tvars.length != NO_ARGS || !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
 			return false;
 
-		IStrategoString projectName = (IStrategoString)tvars[0];
+		IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 		try
 		{
 			return index.initialize(projectName , env.getFactory(), SSLLibrary.instance(env).getIOAgent());

From m.dejonge at tudelft.nl  Mon Sep 12 18:50:31 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 12 Sep 2011 16:50:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23335 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring
Message-ID: <20110912165031.11629108C00A@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Sep 12 16:50:30 2011
New Revision: 23335
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23335&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/remove-debug.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/remove-debug.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/remove-debug.str	Mon Sep 12 15:13:16 2011	(r23334)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/remove-debug.str	Mon Sep 12 16:50:30 2011	(r23335)
@@ -20,28 +20,28 @@
 rules //remove debug rules
 
 remove-debug:
-  Seq(s, <debug-call>) -> s
+  Seq(s1, <is-debug-call>) ->  s1
   
 remove-debug:
-  Seq(<debug-call>, s) -> s
+  Seq(<is-debug-call>, s) -> s
   
 remove-debug:
-  GuardedLChoice(<debug-call>, s1, s2) -> s1
+  GuardedLChoice(<is-debug-call>, s1, s2) -> s1
 
 remove-debug:
-  GuardedLChoice(s1, <debug-call>, s2) -> LChoice(s1, s2)
+  GuardedLChoice(s1, <is-debug-call>, s2) -> LChoice(s1, s2)
 
 remove-debug: //TODO: preference because more specific
-  GuardedLChoice(Where(s1), s2, <debug-call>) -> IfThen(s1, s2)
+  GuardedLChoice(Where(s1), s2, <is-debug-call>) -> IfThen(s1, s2)
 
 remove-debug:
-  GuardedLChoice(s1, s2, <debug-call>) -> GuardedLChoice(s1, s2, Id())
+  GuardedLChoice(s1, s2, <is-debug-call>) -> GuardedLChoice(s1, s2, Id())
 
 remove-debug:
-  Rule(lhs, App(<debug-call>, rhs), conds) -> Rule(lhs, rhs, conds)
+  Rule(lhs, App(<is-debug-call>, rhs), conds) -> Rule(lhs, rhs, conds)
 
 remove-debug:
-  Rule(lhs, rhs, <debug-call>) -> Rule(lhs, rhs, [])
+  Rule(lhs, rhs, <is-debug-call>) -> Rule(lhs, rhs, [])
 
 remove-debug:
   Rule(lhs, rhs, conds) -> Rule(lhs, rhs, conds')
@@ -50,8 +50,8 @@
   	
 is-debug-clause =
   where(
-    ?WhereClause(<debug-call>) <+
-    ?WithClause(<debug-call>)
+    ?WhereClause(<is-debug-call>) <+
+    ?WithClause(<is-debug-call>)
   )
 
 //TODO: support some common patterns
@@ -59,24 +59,24 @@
 
 rules //debug calls
 
-debug-call =
-  where(?Where(BA(<debug-call>, Var(_))))
+is-debug-call =
+  where(?Where(BA(<is-debug-call>, Var(_))))
 
-debug-call =
-  where(?Where(BA(<debug-call>, NoAnnoList(_))))
+is-debug-call =
+  where(?Where(BA(<is-debug-call>, NoAnnoList(_))))
 
-debug-call =
-  where(?With(BA(<debug-call>, Var(_))))
+is-debug-call =
+  where(?With(BA(<is-debug-call>, Var(_))))
 
-debug-call =
-  where(?With(BA(<debug-call>, NoAnnoList(_))))
+is-debug-call =
+  where(?With(BA(<is-debug-call>, NoAnnoList(_))))
 
-debug-call =
+is-debug-call =
   ?CallT(SVar("debug"{_}), _, [])
 
-debug-call =
+is-debug-call =
   ?Where(CallT(SVar("debug"{_}), _, []))
   
-debug-call =
+is-debug-call =
   ?With(CallT(SVar("debug"{_}), _, []))
   

From seba at informatik.uni-marburg.de  Tue Sep 13 11:30:10 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 13 Sep 2011 09:30:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23337 - in
	sugarj/trunk: compiler/META-INF compiler/org/sugarj/driver
	compiler/org/sugarj/driver/cli compiler/org/sugarj/util
	editor/editor/java/org/sugarj/builder editor/...
Message-ID: <20110913093010.662C82B8011@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Tue Sep 13 09:30:09 2011
New Revision: 23337
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23337&sc=1

Log:
bufixing builder

Added:
   sugarj/trunk/compiler/org/sugarj/driver/cli/
   sugarj/trunk/compiler/org/sugarj/driver/cli/CLIError.java
   sugarj/trunk/compiler/org/sugarj/driver/cli/DriverCLI.java
   sugarj/trunk/compiler/org/sugarj/util/
   sugarj/trunk/compiler/org/sugarj/util/AppendableObjectOutputStream.java
   sugarj/trunk/compiler/org/sugarj/util/ProcessingListener.java
   sugarj/trunk/editor/editor/java/org/sugarj/builder/MarkingProcessingListener.java
Deleted:
   sugarj/trunk/compiler/org/sugarj/driver/DriverCLI.java
Modified:
   sugarj/trunk/compiler/META-INF/MANIFEST.MF
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/Result.java
   sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java

Modified: sugarj/trunk/compiler/META-INF/MANIFEST.MF
==============================================================================
--- sugarj/trunk/compiler/META-INF/MANIFEST.MF	Mon Sep 12 21:20:42 2011	(r23336)
+++ sugarj/trunk/compiler/META-INF/MANIFEST.MF	Tue Sep 13 09:30:09 2011	(r23337)
@@ -19,7 +19,8 @@
  org.sugarj.driver,
  org.sugarj.driver.caching,
  org.sugarj.driver.path,
- org.sugarj.driver.transformations
+ org.sugarj.driver.transformations,
+ org.sugarj.util
 Bundle-ClassPath: make_permissive.jar,
  .,
  commons-cli-1.2.jar,

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Mon Sep 12 21:20:42 2011	(r23336)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Tue Sep 13 09:30:09 2011	(r23337)
@@ -10,6 +10,7 @@
 import static org.sugarj.driver.Environment.sep;
 import static org.sugarj.driver.Log.log;
 
+import java.io.EOFException;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
@@ -21,15 +22,11 @@
 import java.util.AbstractMap;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 
-import org.apache.commons.cli.CommandLine;
-import org.apache.commons.cli.CommandLineParser;
-import org.apache.commons.cli.GnuParser;
-import org.apache.commons.cli.HelpFormatter;
-import org.apache.commons.cli.Options;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.InvalidParseTableException;
@@ -48,6 +45,8 @@
 import org.strategoxt.tools.tools;
 import org.sugarj.driver.caching.ModuleKey;
 import org.sugarj.driver.caching.ModuleKeyCache;
+import org.sugarj.driver.cli.CLIError;
+import org.sugarj.driver.cli.DriverCLI;
 import org.sugarj.driver.path.AbsolutePath;
 import org.sugarj.driver.path.Path;
 import org.sugarj.driver.path.RelativePath;
@@ -55,6 +54,7 @@
 import org.sugarj.driver.path.SourceLocation;
 import org.sugarj.driver.transformations.extraction.extraction;
 import org.sugarj.stdlib.StdLib;
+import org.sugarj.util.ProcessingListener;
 
 /**
  * @author Sebastian Erdweg <seba at informatik uni-marburg de>
@@ -72,6 +72,9 @@
   private static List<Path> pendingInputFiles = new ArrayList<Path>();
   private static List<Path> currentlyProcessing = new ArrayList<Path>();
 
+  private static List<ProcessingListener> processingListener = new LinkedList<ProcessingListener>();
+  
+  
   private IProgressMonitor monitor;
   
   private Environment environment = new Environment();
@@ -150,6 +153,14 @@
     pendingRuns.put(file, new AbstractMap.SimpleImmutableEntry<String, Driver>(source, driver));
   }
   
+  public static synchronized void addProcessingDoneListener(ProcessingListener listener) {
+    processingListener.add(listener);
+  }
+  
+  public static synchronized void removeProcessingDoneListener(ProcessingListener listener) {
+    processingListener.remove(listener);
+  }
+  
   private static void waitForPending(Path file) {
     int count = 0;
     Object lock = new Object();
@@ -243,15 +254,26 @@
     }
     
     try {
+      synchronized (processingListener) {
+        for (ProcessingListener listener : processingListener)
+          listener.processingStarts(sourceFile);
+      }
+    
       driver.process(source, sourceFile, monitor, generateFiles);
       if (!Environment.rocache)
         driver.storeCaches(sourceFile.getSourceLocation().getEnvironment());
+    
+      synchronized (processingListener) {
+        for (ProcessingListener listener : processingListener)
+          listener.processingDone(driver.driverResult);
+      }
+
     } finally {
-        pendingRuns.remove(sourceFile);
-        if (generateFiles)
-          putResult(sourceFile, driver.driverResult.getSugaredSyntaxTree() == null ? null : driver.driverResult);
+      pendingRuns.remove(sourceFile);
+      if (generateFiles)
+        putResult(sourceFile, driver.driverResult.getSugaredSyntaxTree() == null ? null : driver.driverResult);
     }
-    
+
     return driver.driverResult;
   }
   
@@ -277,7 +299,7 @@
       if (sourceFile != null) {
         javaOutFile = environment.new RelativePathBin(FileCommands.dropExtension(sourceFile.getRelativePath()) + ".java");
         depOutFile = environment.new RelativePathBin(FileCommands.dropExtension(sourceFile.getRelativePath()) + ".dep");
-        Path genLog= environment.new RelativePathBin(FileCommands.dropExtension(sourceFile.getRelativePath()) + ".gen");
+        Path genLog = environment.new RelativePathBin(FileCommands.dropExtension(sourceFile.getRelativePath()) + ".gen");
         driverResult.setGenerationLog(genLog);
         clearGeneratedStuff();
       }
@@ -429,7 +451,7 @@
       inputTreeBuilder.getTokenizer().makeToken(inputTreeBuilder.getTokenizer().getStartOffset() - 1, IToken.TK_EOF, true);
       IStrategoTerm term = ATermCommands.factory.makeString(input);
       ImploderAttachment.putImploderAttachment(term, false, "String", left, right);
-      ATermCommands.setErrorMessage(term, msg);
+      setErrorMessage(term, msg);
       return new IncrementalParseResult(term, "");
     } finally {
       log.endTask();
@@ -626,7 +648,7 @@
         else
           log.logErr(msg);
 
-        ATermCommands.setErrorMessage(toplevelDecl, msg);
+        setErrorMessage(toplevelDecl, msg);
         if (!sugaredTypeOrSugarDecls.contains(lastSugaredToplevelDecl))
           sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
 
@@ -656,8 +678,10 @@
           inputTreeBuilder,
           parser);
     } finally {
-      if (recovery)
-        driverResult.addBadTokenExceptions(parser.getCollectedErrors());
+      if (recovery) {
+        for (BadTokenException e : parser.getCollectedErrors())
+          driverResult.logParseError(e);
+      }
     }
     
     return parseResult;
@@ -683,7 +707,7 @@
       else
         log.logErr(msg);
 
-      ATermCommands.setErrorMessage(term, msg);
+      setErrorMessage(term, msg);
       return term;
     } finally {
       log.endTask();
@@ -727,7 +751,7 @@
       String expectedPackage = i >= 0 ? rel.substring(0, i) : rel;
       expectedPackage = expectedPackage.replace('/', '.');
       if (!packageName.equals(expectedPackage))
-        ATermCommands.setErrorMessage(
+        setErrorMessage(
             toplevelDecl,
             "The declared package '" + packageName + "'" +
             " does not match the expected package '" + expectedPackage + "'.");
@@ -809,7 +833,8 @@
         if (sourceFile != null && (res == null || pendingInputFiles.contains(res.getSourceFile()) || !res.isUpToDate(res.getSourceFile(), environment))) {
           if (!generateFiles) {
             boolean b = pendingInputFiles.contains(res.getSourceFile()) || !res.isUpToDate(res.getSourceFile(), environment);
-            ATermCommands.setErrorMessage(toplevelDecl, "module outdated, compile first: " + importModule);
+            System.out.println(b);
+            setErrorMessage(toplevelDecl, "module outdated, compile first: " + importModule);
           }
           else {
             log.log("Need to compile the imported module first ; processing it now.");
@@ -817,9 +842,9 @@
             try {
               Result importResult = compile(sourceFile, monitor);
               if (importResult.hasFailed())
-                ATermCommands.setErrorMessage(toplevelDecl, "problems while compiling " + importModule);
+                setErrorMessage(toplevelDecl, "problems while compiling " + importModule);
             } catch (Exception e) {
-              ATermCommands.setErrorMessage(toplevelDecl, "problems while compiling " + importModule);
+              setErrorMessage(toplevelDecl, "problems while compiling " + importModule);
             }
               
             log.log("CONTINUE PROCESSING'" + sourceFile + "'.");
@@ -836,7 +861,7 @@
       boolean success = processImport(modulePath, toplevelDecl);
       
       if (!success)
-        ATermCommands.setErrorMessage(toplevelDecl, "module not found: " + importModule);
+        setErrorMessage(toplevelDecl, "module not found: " + importModule);
       
     } catch (Exception e) {
       throw new RuntimeException(e);
@@ -979,9 +1004,6 @@
       Path sdfExtension = environment.new RelativePathBin(relPackageNameSep() + extName + ".sdf");
       Path strExtension = environment.new RelativePathBin(relPackageNameSep() + extName + ".str");
       
-      FileCommands.delete(sdfExtension);
-      FileCommands.delete(strExtension);
-
       String sdfImports = " imports " + StringCommands.printListSeparated(availableSDFImports, " ") + "\n";
       String strImports = " imports " + StringCommands.printListSeparated(availableSTRImports, " ") + "\n";
       
@@ -1125,7 +1147,7 @@
       else
         log.logErr(msg);
 
-      ATermCommands.setErrorMessage(lastSugaredToplevelDecl, msg);
+      setErrorMessage(lastSugaredToplevelDecl, msg);
     } finally {
       log.endTask();
     }
@@ -1196,7 +1218,7 @@
     Environment environment = new Environment();
     
     try {
-      String[] sources = handleOptions(args, environment);
+      String[] sources = DriverCLI.handleOptions(args, environment);
 
       if (environment.getSourcePath().isEmpty())
         environment.getSourcePath().add(new SourceLocation(new AbsolutePath("."), environment));
@@ -1232,218 +1254,6 @@
   }
   
   
-  /**
-   * This is thrown when a problem during option processing
-   * occurs.
-   *  
-   * @author rendel at informatik.uni-marburg.de
-   */
-  public static class CLIError extends Error {
-    private static final long serialVersionUID = -918505242287737113L;
-
-    private final Options options; 
-    
-    public CLIError(String message, Options options) {
-      super(message);
-      this.options = options;
-    }
-    
-    public void showUsage() {
-      showUsageMessage(options);
-    }
-  }
-
-  /**
-   * Parses and processes command line options. This method may
-   * set paths and flags in {@link CommandExecution} and
-   * {@link Environment} in the process.
-   * 
-   * @param args
-   *        the command line arguments to be parsed
-   * @return the source file to be processed
-   * @throws CLIError
-   *         when the command line is not correct
-   */
-  private static String[] handleOptions(String[] args, Environment environment) {
-    Options options = specifyOptions();
-
-    try {
-      CommandLine line = parseOptions(options, args);
-      return processOptions(options, line, environment);
-    } catch (org.apache.commons.cli.ParseException e) {
-      throw new CLIError(e.getMessage(), options);
-    }
-  }
-
-  private static void showUsageMessage(Options options) {
-    HelpFormatter formatter = new HelpFormatter();
-    formatter.printHelp(
-        "java -java sugarj.jar [options] source-files",
-        options,
-        false);
-  }
-  
-  private static String[] processOptions(Options options, CommandLine line, Environment environment) throws org.apache.commons.cli.ParseException {
-    if (line.hasOption("help")) {
-      // TODO This is not exactly an error ...
-      throw new CLIError("help requested", options);
-    }
-
-    if (line.hasOption("verbose")) {
-      CommandExecution.SILENT_EXECUTION = false;
-      CommandExecution.SUB_SILENT_EXECUTION = false;
-      CommandExecution.FULL_COMMAND_LINE = true;
-    }
-
-    if (line.hasOption("silent-execution"))
-      CommandExecution.SILENT_EXECUTION = true;
-
-    if (line.hasOption("sub-silent-execution"))
-      CommandExecution.SUB_SILENT_EXECUTION = true;
-
-    if (line.hasOption("full-command-line"))
-      CommandExecution.FULL_COMMAND_LINE = true;
-
-    if (line.hasOption("cache-info"))
-      CommandExecution.CACHE_INFO = true;
-
-    if (line.hasOption("buildpath"))
-      for (String path : line.getOptionValue("buildpath").split(Environment.classpathsep))
-        environment.getIncludePath().add(new AbsolutePath(path));
-
-    if (line.hasOption("sourcepath"))
-      for (String path : line.getOptionValue("sourcepath").split(Environment.classpathsep))
-        environment.getSourcePath().add(new SourceLocation(new AbsolutePath(path), environment));
- 
-    if (line.hasOption("d"))
-      environment.setBin(new AbsolutePath(line.getOptionValue("d")));
-    
-    if (line.hasOption("cache"))
-      environment.setCacheDir(new AbsolutePath(line.getOptionValue("cache")));
-
-    if (line.hasOption("read-only-cache"))
-      Environment.rocache = true;
-    
-    if (line.hasOption("write-only-cache"))
-      Environment.wocache = true;
-    
-    if (line.hasOption("gen-java"))
-      environment.setGenerateJavaFile(true);
-    
-    if (line.hasOption("atomic-imports"))
-      environment.setAtomicImportParsing(true);
-
-    if (line.hasOption("no-checking"))
-      environment.setNoChecking(true);
-
-    String[] sources = line.getArgs();
-    if (sources.length < 1)
-      throw new CLIError("No source files specified.", options);
-
-    return sources;
-  }
-
-  private static CommandLine parseOptions(Options options, String[] args) throws org.apache.commons.cli.ParseException {
-    CommandLineParser parser = new GnuParser();
-    return parser.parse(options, args);
-  }
-
-  private static Options specifyOptions() {
-    Options options = new Options();
-
-    options.addOption(
-        "v", 
-        "verbose", 
-        false, 
-        "show verbose output");
-
-    options.addOption(
-        null, 
-        "silent-execution", 
-        false, 
-        "try to be silent");
-
-    options.addOption(
-        null,
-        "sub-silent-execution",
-        false,
-        "do not display output of subprocesses");
-
-    options.addOption(
-        null,
-        "full-command-line",
-        false,
-        "show all arguments to subprocesses");
-
-    options.addOption(
-        null, 
-        "cache-info", 
-        false, 
-        "show where files are cached");
-
-    options.addOption(
-        null,
-        "buildpath",
-        true,
-        "Specify where to find compiled files. Multiple paths can be given separated by \'" + Environment.classpathsep + "\'.");
-
-    options.addOption(
-        null,
-        "sourcepath",
-        true,
-        "Specify where to find source files. Multiple paths can be given separated by \'" + Environment.classpathsep + "\'.");
-
-    options.addOption(
-        "d", 
-        null,
-        true, 
-        "Specify where to place compiled files");
-
-    options.addOption(
-        null, 
-        "help", 
-        false, 
-        "Print this synopsis of options");
-    
-    options.addOption(
-        null,
-        "cache",
-        true,
-        "Specifiy a directory for caching.");
-    
-    options.addOption(
-        null,
-        "read-only-cache",
-        false,
-        "Specify the cache to be read-only.");
-
-    options.addOption(
-        null,
-        "write-only-cache",
-        false,
-        "Specify the cache to be write-only.");
-    
-    options.addOption(
-        null,
-        "gen-java",
-        false,
-        "Generate the resulting Java file in the source folder.");
-
-    options.addOption(
-        null,
-        "atomic-imports",
-        false,
-        "Parse all import statements simultaneously.");
-
-    options.addOption(
-        null,
-        "no-checking",
-        false,
-        "Do not check resulting SDF and Stratego files.");
-    
-    return options;
-  }
-
   @SuppressWarnings("unchecked")
   private void initializeCaches(Environment environment) throws IOException {
     if (environment.getCacheDir() == null)
@@ -1616,14 +1426,19 @@
           } catch (ClassNotFoundException e) { 
           }
         }
+      } catch (EOFException e) {
       } catch (Exception e) {
         e.printStackTrace();
       } finally {
         if (ois != null)
           ois.close();
+        FileCommands.delete(driverResult.getGenerationLog());
       }
-
-      FileCommands.writeToFile(driverResult.getGenerationLog(), "");
     }
   }
+  
+  private void setErrorMessage(IStrategoTerm toplevelDecl, String msg) {
+    driverResult.logError(msg);
+    ATermCommands.setErrorMessage(toplevelDecl, msg);
+  }
 }

Modified: sugarj/trunk/compiler/org/sugarj/driver/Result.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Result.java	Mon Sep 12 21:20:42 2011	(r23336)
+++ sugarj/trunk/compiler/org/sugarj/driver/Result.java	Tue Sep 13 09:30:09 2011	(r23337)
@@ -9,6 +9,7 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -18,6 +19,7 @@
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.sugarj.driver.path.Path;
 import org.sugarj.driver.path.RelativeSourceLocationPath;
+import org.sugarj.util.AppendableObjectOutputStream;
 
 /**
  * @author Sebastian Erdweg <seba at informatik uni-marburg de>
@@ -29,14 +31,14 @@
   private Map<Path, Integer> dependencies = new HashMap<Path, Integer>();
   private Map<Path, Integer> generatedFileHashes = new HashMap<Path, Integer>();
   private Set<IStrategoTerm> editorServices = new HashSet<IStrategoTerm>();
-  private Set<BadTokenException> collectedErrors = new HashSet<BadTokenException>();
+  private List<String> collectedErrors = new LinkedList<String>();
+  private Set<BadTokenException> parseErrors = new HashSet<BadTokenException>();
   private IStrategoTerm sugaredSyntaxTree = null;
   private Path desugaringsFile;
   private RelativeSourceLocationPath sourceFile;
   private Integer sourceFileHash;
   private Set<Path> allDependentFiles = new HashSet<Path>();
   private boolean failed = false;
-  private Path lastParseTable;
   private Path generationLog;
 
   private final static Result OUTDATED_RESULT = new Result(true) {
@@ -87,12 +89,13 @@
     }
   }
 
-  // TODO subsequent ObjectOutputStream writes seem to misbehave: raises StreamCorruptedException in Driver.clearGeneratedStuff().
-  //   => how to append an object to an ObjectOutputStream
   private void logGeneration(Object o) throws IOException {
     if (generateFiles && generationLog != null) {
-      FileCommands.createFile(generationLog);
-      ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(generationLog.getFile(), true));
+      boolean exists = FileCommands.exists(generationLog);
+      if (!exists)
+          FileCommands.createFile(generationLog);
+      ObjectOutputStream oos = exists ? new AppendableObjectOutputStream(new FileOutputStream(generationLog.getFile(), true))
+                                      : new ObjectOutputStream(new FileOutputStream(generationLog.getFile()));
       try {
         oos.writeObject(o);
       } finally {
@@ -153,14 +156,22 @@
     return true;
   }
   
-  void addBadTokenExceptions(Collection<? extends BadTokenException> exceptions) {
-    collectedErrors.addAll(exceptions);
+  void logError(String error) {
+    collectedErrors.add(error);
   }
   
-  public Set<BadTokenException> getCollectedErrors() {
+  public List<String> getCollectedErrors() {
     return collectedErrors;
   }
   
+  void logParseError(BadTokenException e) {
+    parseErrors.add(e);  
+  }
+  
+  public Set<BadTokenException> getParseErrors() {
+    return parseErrors;
+  }
+  
   public void setSugaredSyntaxTree(IStrategoTerm sugaredSyntaxTree) {
     this.sugaredSyntaxTree = sugaredSyntaxTree;
   }
@@ -182,7 +193,7 @@
     editorServices = new HashSet<IStrategoTerm>(ATermCommands.registerSemanticProvider(editorServices, jarfile));
   }
   
-  Path getDesugaringsFile() {
+  public Path getDesugaringsFile() {
     return desugaringsFile;
   }
   
@@ -212,6 +223,13 @@
         oos.writeObject(e.getKey());
         oos.writeInt(e.getValue());
       }
+      
+//      new TermReader(ATermCommands.factory).unparseToFile(sugaredSyntaxTree, oos);
+//      oos.writeBoolean(failed);
+//      oos.writeObject(collectedErrors);
+//      oos.writeObject(parseErrors);
+//      oos.writeObject(generationLog);
+//      oos.writeObject(desugaringsFile);
     } finally {
       if (oos != null)
         oos.close();
@@ -244,6 +262,14 @@
         int hash = ois.readInt();
         result.generatedFileHashes.put(file, hash);
       }
+      
+//      result.sugaredSyntaxTree = new TermReader(ATermCommands.factory).parseFromStream(ois);
+//      result.failed = ois.readBoolean();
+//      result.collectedErrors = (List<String>) ois.readObject();
+//      result.parseErrors = (Set<BadTokenException>) ois.readObject();
+//      result.generationLog = Path.readPath(ois, env);
+//      result.desugaringsFile = Path.readPath(ois, env);
+      
     } catch (FileNotFoundException e) {
       return OUTDATED_RESULT;
     } catch (ClassNotFoundException e) {
@@ -275,12 +301,4 @@
   public void setFailed(boolean hasFailed) {
     this.failed = hasFailed;
   }
-  
-  public void setLastParseTable(Path parseTable) {
-    this.lastParseTable = parseTable;
-  }
-  
-  public Path getLastParseTable() {
-    return lastParseTable;
-  }
-}
\ No newline at end of file
+  }
\ No newline at end of file

Added: sugarj/trunk/compiler/org/sugarj/driver/cli/CLIError.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/org/sugarj/driver/cli/CLIError.java	Tue Sep 13 09:30:09 2011	(r23337)
@@ -0,0 +1,24 @@
+package org.sugarj.driver.cli;
+
+import org.apache.commons.cli.Options;
+
+/**
+ * This is thrown when a problem during option processing
+ * occurs.
+ *  
+ * @author rendel at informatik.uni-marburg.de
+ */
+public class CLIError extends Error {
+  private static final long serialVersionUID = -918505242287737113L;
+
+  private final Options options; 
+  
+  public CLIError(String message, Options options) {
+    super(message);
+    this.options = options;
+  }
+  
+  public void showUsage() {
+    DriverCLI.showUsageMessage(options);
+  }
+}
\ No newline at end of file

Added: sugarj/trunk/compiler/org/sugarj/driver/cli/DriverCLI.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/org/sugarj/driver/cli/DriverCLI.java	Tue Sep 13 09:30:09 2011	(r23337)
@@ -0,0 +1,507 @@
+package org.sugarj.driver.cli;
+
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
+import static org.spoofax.terms.Term.tryGetConstructor;
+import static org.sugarj.driver.Log.log;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.CommandLineParser;
+import org.apache.commons.cli.GnuParser;
+import org.apache.commons.cli.HelpFormatter;
+import org.apache.commons.cli.Options;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.MultiBadTokenException;
+import org.spoofax.jsglr.client.ParseTimeoutException;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.jsglr.client.imploder.Token;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.spoofax.terms.TermVisitor;
+import org.strategoxt.HybridInterpreter;
+import org.strategoxt.imp.runtime.Environment;
+import org.sugarj.driver.ATermCommands;
+import org.sugarj.driver.CommandExecution;
+import org.sugarj.driver.Result;
+import org.sugarj.driver.STRCommands;
+import org.sugarj.driver.path.AbsolutePath;
+import org.sugarj.driver.path.Path;
+import org.sugarj.driver.path.SourceLocation;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ *
+ * large chunk copied and adapted from org.strategoxt.imp.runtime.parser.ParseErrorHandler
+ */
+public class DriverCLI {
+  
+  private static class Error {
+    public String msg;
+    public int lineStart;
+    public int lineEnd;
+    public int columnStart;
+    public int columEnd;
+    
+    Error(String msg, IToken left, IToken right) {
+      this.msg = msg;
+      this.lineStart = left.getLine();
+      this.columnStart = left.getColumn();
+      this.lineEnd = right.getLine();
+      this.columEnd = right.getColumn();
+    }
+    
+    /**
+     * start of file error
+     * @param msg
+     */
+    Error(String msg) {
+      this.msg = msg;
+      this.lineStart = 0;
+      this.columnStart = 0;
+      this.lineEnd = 0;
+      this.columEnd = 0;
+    }
+  }
+  
+  public static boolean processResultCLI(Result res, Path file, String project) throws IOException {
+    log.log("");
+    
+    boolean success = res.getCollectedErrors().isEmpty();
+    
+    for (BadTokenException e : res.getParseErrors())
+      log.log("syntax error: line " + e.getLineNumber() + " column " + e.getColumnNumber() + ": " + e.getMessage());
+    
+    
+    IToken tok = ImploderAttachment.getRightToken(res.getSugaredSyntaxTree());
+    
+    IStrategoTerm tuple = ATermCommands.makeTuple(
+        tok,
+        res.getSugaredSyntaxTree(), 
+        ATermCommands.makeString(file.getAbsolutePath(), tok), 
+        ATermCommands.makeString(project, tok));
+    
+    List<Error> errors = gatherNonFatalErrors(res.getSugaredSyntaxTree());
+    success &= errors.isEmpty();
+    
+    for (Error error : errors)
+      log.log("error: line " + error.lineStart + " column " + error.columnStart + " to line " + error.lineEnd + " column " + error.columEnd + ":\n  " + error.msg);
+
+    
+    IStrategoTerm errorTree = STRCommands.assimilate("sugarj-analyze", res.getDesugaringsFile(), tuple, new HybridInterpreter());
+    
+    assert errorTree.getTermType() == IStrategoTerm.TUPLE && errorTree.getSubtermCount() == 4 :
+      "error in sugarj-analyze, did not return tuple with 4 elements";
+    
+    IStrategoList semErrors = Tools.termAt(errorTree, 1);
+    IStrategoList warnings = Tools.termAt(errorTree, 2);
+    IStrategoList notes = Tools.termAt(errorTree, 3);
+    
+    success &= semErrors.isEmpty() && warnings.isEmpty() && notes.isEmpty();
+    
+    for (IStrategoTerm error : semErrors.getAllSubterms())
+      if (error.getTermType() == IStrategoTerm.LIST)
+        for (IStrategoTerm deepError : error.getAllSubterms())
+          reportCLI(deepError, "error");
+      else
+        reportCLI(error, "error");
+    for (IStrategoTerm warning : warnings.getAllSubterms())
+      if (warning.getTermType() == IStrategoTerm.LIST)
+        for (IStrategoTerm deepWarning : warning.getAllSubterms())
+          reportCLI(deepWarning, "warning");
+      else
+        reportCLI(warning, "warning");
+    for (IStrategoTerm note : notes.getAllSubterms())
+      if (note.getTermType() == IStrategoTerm.LIST)
+        for (IStrategoTerm deepNote : note.getAllSubterms())
+          reportCLI(deepNote, "note");
+      else
+        reportCLI(note, "note");
+    
+    // System.out.println(ATermCommands.atermToFile(errorTree));
+    
+    return success;
+  }
+  
+  private static void reportCLI(IStrategoTerm pairOrList, String kind) throws IOException {
+    assert pairOrList.getTermType() == IStrategoTerm.TUPLE && pairOrList.getSubtermCount() == 2;
+    
+    IStrategoTerm term = Tools.termAt(pairOrList, 0);
+    IStrategoString msg = Tools.termAt(pairOrList, 1);
+    
+    IToken left = ImploderAttachment.getLeftToken(term);
+    IToken right = ImploderAttachment.getRightToken(term);
+    
+    if (left == null && right != null)
+      left = right;
+    else if (left != null && right == null)
+      right = left;
+    
+    if (left == null || right == null)
+      log.log("error: " + msg + "\n  in tree " + ATermCommands.atermToFile(term));
+    else
+      log.log("error: line " + left.getLine() + " column " + left.getColumn() + " to line " + right.getLine() + " column " + right.getColumn() + ":\n  " + msg);
+  }
+  
+  
+  
+  /**
+   * Report WATER + INSERT errors from parse tree
+   */
+  private static List<Error> gatherNonFatalErrors(IStrategoTerm top) {
+    List<Error> errors = new ArrayList<Error>();
+    ITokenizer tokenizer = getTokenizer(top);
+    for (int i = 0, max = tokenizer.getTokenCount(); i < max; i++) {
+      IToken token = tokenizer.getTokenAt(i);
+      String error = token.getError();
+      if (error != null) {
+        if (error == ITokenizer.ERROR_SKIPPED_REGION) {
+          i = findRightMostWithSameError(token, null);
+          reportSkippedRegion(token, tokenizer.getTokenAt(i), errors);
+        } else if (error.startsWith(ITokenizer.ERROR_WARNING_PREFIX)) {
+          i = findRightMostWithSameError(token, null);
+          reportWarningAtTokens(token, tokenizer.getTokenAt(i), error, errors);
+        } else if (error.startsWith(ITokenizer.ERROR_WATER_PREFIX)) {
+          i = findRightMostWithSameError(token, ITokenizer.ERROR_WATER_PREFIX);
+          reportErrorAtTokens(token, tokenizer.getTokenAt(i), error, errors);
+        } else {
+          i = findRightMostWithSameError(token, null);
+          // UNDONE: won't work for multi-token errors (as seen in SugarJ)
+          reportErrorAtTokens(token, tokenizer.getTokenAt(i), error, errors);
+        }
+      }
+    }
+    gatherAmbiguities(top, errors);
+    
+    return errors;
+  }
+
+  private static int findRightMostWithSameError(IToken token, String prefix) {
+    String expectedError = token.getError();
+    ITokenizer tokenizer = token.getTokenizer();
+    int i = token.getIndex();
+    for (int max = tokenizer.getTokenCount(); i + 1 < max; i++) {
+      String error = tokenizer.getTokenAt(i + 1).getError();
+      if (error != expectedError
+          && (error == null || prefix == null || !error.startsWith(prefix)))
+        break;
+    }
+    return i;
+  }
+
+  
+  private static final IStrategoConstructor ambCons = Environment.getTermFactory().makeConstructor("amb", 1);
+  
+    /**
+     * Report recoverable errors (e.g., inserted brackets).
+     * 
+     * @param outerBeginOffset  The begin offset of the enclosing construct.
+     */
+  private static void gatherAmbiguities(IStrategoTerm term, final List<Error> errors) {
+    new TermVisitor() {
+      IStrategoTerm ambStart;
+      
+      public void preVisit(IStrategoTerm term) {
+        if (ambStart == null && ambCons == tryGetConstructor(term)) {
+          reportAmbiguity(term, errors);
+          ambStart = term;
+        }
+      }
+      
+      @Override
+      public void postVisit(IStrategoTerm term) {
+        if (term == ambStart) ambStart = null;
+      }
+    }.visit(term);
+  }
+  
+  private static void reportAmbiguity(IStrategoTerm amb, List<Error> errors) {
+    reportWarningAtTokens(getLeftToken(amb), getRightToken(amb),
+        "Fragment is ambiguous", errors);
+  }
+  
+
+  private static void reportSkippedRegion(IToken left, IToken right, List<Error> errors) {
+    // Report entire region
+    reportErrorAtTokens(left, right, ITokenizer.ERROR_SKIPPED_REGION, errors);
+  }
+
+
+  private static void reportTokenExpected(ITokenizer tokenizer, TokenExpectedException exception, List<Error> errors) {
+    String message = exception.getShortMessage();
+    reportErrorNearOffset(tokenizer, exception.getOffset(), message, errors);
+  }
+  
+  private static void reportBadToken(ITokenizer tokenizer, BadTokenException exception, List<Error> errors) {
+    String message;
+    if (exception.isEOFToken() || tokenizer.getTokenCount() <= 1) {
+      message = exception.getShortMessage();
+    } else {
+      IToken token = tokenizer.getTokenAtOffset(exception.getOffset());
+      token = findNextNonEmptyToken(token);
+      message = ITokenizer.ERROR_WATER_PREFIX + ": " + token.toString().trim();
+    }
+    reportErrorNearOffset(tokenizer, exception.getOffset(), message, errors);
+  }
+  
+  private static void reportMultiBadToken(ITokenizer tokenizer, MultiBadTokenException exception, List<Error> errors) {
+    for (BadTokenException e : exception.getCauses()) {
+      reportException(tokenizer, e, errors); // use double dispatch
+    }
+  }
+  
+  private static void reportTimeOut(ITokenizer tokenizer, ParseTimeoutException exception, List<Error> errors) {
+    String message = "Internal parsing error: " + exception.getMessage();
+    reportErrorAtFirstLine(message, errors);
+    reportMultiBadToken(tokenizer, exception, errors);
+  }
+  
+  private static void reportException(ITokenizer tokenizer, Exception exception, List<Error> errors) {
+    try {
+      throw exception;
+    } catch (ParseTimeoutException e) {
+      reportTimeOut(tokenizer, (ParseTimeoutException) exception, errors);
+    } catch (TokenExpectedException e) {
+      reportTokenExpected(tokenizer, (TokenExpectedException) exception, errors);
+    } catch (MultiBadTokenException e) {
+      reportMultiBadToken(tokenizer, (MultiBadTokenException) exception, errors);
+    } catch (BadTokenException e) {
+      reportBadToken(tokenizer, (BadTokenException) exception, errors);
+    } catch (Exception e) {
+      String message = "Internal parsing error: " + exception;
+      reportErrorAtFirstLine(message, errors);
+    }
+  }
+
+  private static void reportErrorNearOffset(ITokenizer tokenizer, int offset, String message, List<Error> errors) {
+    IToken errorToken = tokenizer.getErrorTokenOrAdjunct(offset);
+    reportErrorAtTokens(errorToken, errorToken, message, errors);
+  }
+   
+  private static IToken findNextNonEmptyToken(IToken token) {
+    ITokenizer tokenizer = token.getTokenizer();
+    IToken result = null;
+    for (int i = token.getIndex(), max = tokenizer.getTokenCount(); i < max; i++) {
+      result = tokenizer.getTokenAt(i);
+      if (result.getLength() != 0 && !Token.isWhiteSpace(result)) break;
+    }
+    return result;
+  }
+  
+  private static void reportErrorAtTokens(final IToken left, final IToken right, String message, List<Error> errors) {
+    if (left.getStartOffset() > right.getEndOffset()) {
+      reportErrorNearOffset(left.getTokenizer(), left.getStartOffset(), message, errors);
+    } else {
+      errors.add(new Error(message, left, right));
+    }
+  }
+  
+  private static void reportWarningAtTokens(final IToken left, final IToken right, final String message, List<Error> errors) {
+    errors.add(new Error(message, left, right));
+  }
+  
+  private static void reportErrorAtFirstLine(String message, List<Error> errors) {
+    errors.add(new Error(message));
+  }
+
+  /**
+   * Parses and processes command line options. This method may
+   * set paths and flags in {@link CommandExecution} and
+   * {@link Environment} in the process.
+   * 
+   * @param args
+   *        the command line arguments to be parsed
+   * @return the source file to be processed
+   * @throws CLIError
+   *         when the command line is not correct
+   */
+  public static String[] handleOptions(String[] args, org.sugarj.driver.Environment environment) {
+    Options options = specifyOptions();
+  
+    try {
+      CommandLine line = parseOptions(options, args);
+      return processOptions(options, line, environment);
+    } catch (org.apache.commons.cli.ParseException e) {
+      throw new CLIError(e.getMessage(), options);
+    }
+  }
+
+  static void showUsageMessage(Options options) {
+    HelpFormatter formatter = new HelpFormatter();
+    formatter.printHelp(
+        "java -java sugarj.jar [options] source-files",
+        options,
+        false);
+  }
+
+  private static String[] processOptions(Options options, CommandLine line, org.sugarj.driver.Environment environment) throws org.apache.commons.cli.ParseException {
+    if (line.hasOption("help")) {
+      // TODO This is not exactly an error ...
+      throw new CLIError("help requested", options);
+    }
+  
+    if (line.hasOption("verbose")) {
+      CommandExecution.SILENT_EXECUTION = false;
+      CommandExecution.SUB_SILENT_EXECUTION = false;
+      CommandExecution.FULL_COMMAND_LINE = true;
+    }
+  
+    if (line.hasOption("silent-execution"))
+      CommandExecution.SILENT_EXECUTION = true;
+  
+    if (line.hasOption("sub-silent-execution"))
+      CommandExecution.SUB_SILENT_EXECUTION = true;
+  
+    if (line.hasOption("full-command-line"))
+      CommandExecution.FULL_COMMAND_LINE = true;
+  
+    if (line.hasOption("cache-info"))
+      CommandExecution.CACHE_INFO = true;
+  
+    if (line.hasOption("buildpath"))
+      for (String path : line.getOptionValue("buildpath").split(org.sugarj.driver.Environment.classpathsep))
+        environment.getIncludePath().add(new AbsolutePath(path));
+  
+    if (line.hasOption("sourcepath"))
+      for (String path : line.getOptionValue("sourcepath").split(org.sugarj.driver.Environment.classpathsep))
+        environment.getSourcePath().add(new SourceLocation(new AbsolutePath(path), environment));
+  
+    if (line.hasOption("d"))
+      environment.setBin(new AbsolutePath(line.getOptionValue("d")));
+    
+    if (line.hasOption("cache"))
+      environment.setCacheDir(new AbsolutePath(line.getOptionValue("cache")));
+  
+    if (line.hasOption("read-only-cache"))
+      org.sugarj.driver.Environment.rocache = true;
+    
+    if (line.hasOption("write-only-cache"))
+      org.sugarj.driver.Environment.wocache = true;
+    
+    if (line.hasOption("gen-java"))
+      environment.setGenerateJavaFile(true);
+    
+    if (line.hasOption("atomic-imports"))
+      environment.setAtomicImportParsing(true);
+  
+    if (line.hasOption("no-checking"))
+      environment.setNoChecking(true);
+  
+    String[] sources = line.getArgs();
+    if (sources.length < 1)
+      throw new CLIError("No source files specified.", options);
+  
+    return sources;
+  }
+
+  private static CommandLine parseOptions(Options options, String[] args) throws org.apache.commons.cli.ParseException {
+    CommandLineParser parser = new GnuParser();
+    return parser.parse(options, args);
+  }
+
+  private static Options specifyOptions() {
+    Options options = new Options();
+  
+    options.addOption(
+        "v", 
+        "verbose", 
+        false, 
+        "show verbose output");
+  
+    options.addOption(
+        null, 
+        "silent-execution", 
+        false, 
+        "try to be silent");
+  
+    options.addOption(
+        null,
+        "sub-silent-execution",
+        false,
+        "do not display output of subprocesses");
+  
+    options.addOption(
+        null,
+        "full-command-line",
+        false,
+        "show all arguments to subprocesses");
+  
+    options.addOption(
+        null, 
+        "cache-info", 
+        false, 
+        "show where files are cached");
+  
+    options.addOption(
+        null,
+        "buildpath",
+        true,
+        "Specify where to find compiled files. Multiple paths can be given separated by \'" + org.sugarj.driver.Environment.classpathsep + "\'.");
+  
+    options.addOption(
+        null,
+        "sourcepath",
+        true,
+        "Specify where to find source files. Multiple paths can be given separated by \'" + org.sugarj.driver.Environment.classpathsep + "\'.");
+  
+    options.addOption(
+        "d", 
+        null,
+        true, 
+        "Specify where to place compiled files");
+  
+    options.addOption(
+        null, 
+        "help", 
+        false, 
+        "Print this synopsis of options");
+    
+    options.addOption(
+        null,
+        "cache",
+        true,
+        "Specifiy a directory for caching.");
+    
+    options.addOption(
+        null,
+        "read-only-cache",
+        false,
+        "Specify the cache to be read-only.");
+  
+    options.addOption(
+        null,
+        "write-only-cache",
+        false,
+        "Specify the cache to be write-only.");
+    
+    options.addOption(
+        null,
+        "gen-java",
+        false,
+        "Generate the resulting Java file in the source folder.");
+  
+    options.addOption(
+        null,
+        "atomic-imports",
+        false,
+        "Parse all import statements simultaneously.");
+  
+    options.addOption(
+        null,
+        "no-checking",
+        false,
+        "Do not check resulting SDF and Stratego files.");
+    
+    return options;
+  }
+}

Added: sugarj/trunk/compiler/org/sugarj/util/AppendableObjectOutputStream.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/org/sugarj/util/AppendableObjectOutputStream.java	Tue Sep 13 09:30:09 2011	(r23337)
@@ -0,0 +1,21 @@
+package org.sugarj.util;
+
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+import java.io.OutputStream;
+
+/**
+ * copied from http://stackoverflow.com/questions/1194656/appending-to-an-objectoutputstream/1195078#1195078
+ */
+public class AppendableObjectOutputStream extends ObjectOutputStream {
+
+  public AppendableObjectOutputStream(OutputStream out) throws IOException {
+    super(out);
+  }
+
+  @Override
+  protected void writeStreamHeader() throws IOException {
+    // do not write a header
+  }
+
+}

Added: sugarj/trunk/compiler/org/sugarj/util/ProcessingListener.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/org/sugarj/util/ProcessingListener.java	Tue Sep 13 09:30:09 2011	(r23337)
@@ -0,0 +1,13 @@
+package org.sugarj.util;
+
+import org.sugarj.driver.Result;
+import org.sugarj.driver.path.RelativeSourceLocationPath;
+
+/**
+ * 
+ * @author seba
+ */
+public interface ProcessingListener {
+  public void processingStarts(RelativeSourceLocationPath sourceFile);
+  public void processingDone(Result result);
+}

Modified: sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Mon Sep 12 21:20:42 2011	(r23336)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Tue Sep 13 09:30:09 2011	(r23337)
@@ -2,6 +2,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -17,6 +18,7 @@
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.ILock;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.jdt.core.JavaCore;
@@ -32,12 +34,14 @@
 import org.sugarj.driver.FileCommands;
 import org.sugarj.driver.Log;
 import org.sugarj.driver.ModuleSystemCommands;
+import org.sugarj.driver.Result;
 import org.sugarj.driver.path.AbsolutePath;
 import org.sugarj.driver.path.Path;
 import org.sugarj.driver.path.RelativePath;
 import org.sugarj.driver.path.RelativeSourceLocationPath;
 import org.sugarj.editor.SugarJConsole;
 import org.sugarj.editor.SugarJParseController;
+import org.sugarj.util.ProcessingListener;
 
 /**
  * updates editors to show newly built results
@@ -46,6 +50,25 @@
  */
 public class Builder extends IncrementalProjectBuilder {
 
+  private class BuildInput {
+    public IResource resource;
+    public RelativeSourceLocationPath sourceFile;
+    public BuildInput(IResource resource, RelativeSourceLocationPath path) {
+      this.resource = resource; this.sourceFile = path;
+    }
+  }
+
+  private static Map<IProject, ILock> buildLocks = new HashMap<IProject, ILock>();
+  
+  private synchronized static ILock getLock(IProject project) {
+    ILock lock = buildLocks.get(project);
+    if (lock != null)
+      return lock;
+    lock = Job.getJobManager().newLock();
+    buildLocks.put(project, lock);
+    return lock;
+  }
+  
   protected IProject[] build(int kind, @SuppressWarnings("rawtypes") Map args,
       IProgressMonitor monitor) {
     if (kind == IncrementalProjectBuilder.FULL_BUILD) {
@@ -85,7 +108,7 @@
   }
 
   private void fullBuild(IProgressMonitor monitor) {
-    final List<RelativeSourceLocationPath> resources = new LinkedList<RelativeSourceLocationPath>();
+    final LinkedList<BuildInput> resources = new LinkedList<BuildInput>();
     try {
       getProject().accept(new IResourceVisitor() {
         Environment environment = SugarJParseController.makeProjectEnvironment(JavaCore.create(getProject()));
@@ -109,7 +132,7 @@
             if (sourceFile == null)
               throw new IllegalStateException("cannot locate source file for ressource " + resource.getFullPath());
               
-            resources.add(sourceFile);
+            resources.addFirst(new BuildInput(resource, sourceFile));
           }
           return true;
         }
@@ -121,7 +144,7 @@
     build(monitor, resources, "project " + getProject().getName());
   }
 
-  private void build(IProgressMonitor monitor, final List<RelativeSourceLocationPath> resources, String what) {
+  private void build(IProgressMonitor monitor, final List<BuildInput> inputs, String what) {
     CommandExecution.SILENT_EXECUTION = false;
     CommandExecution.SUB_SILENT_EXECUTION = false;
     CommandExecution.FULL_COMMAND_LINE = true;
@@ -133,11 +156,14 @@
     Job buildJob = new Job("Build " + what) {
       @Override
       protected IStatus run(IProgressMonitor monitor) {
-        for (RelativeSourceLocationPath sourceFile : resources)
+        ProcessingListener marker = new MarkingProcessingListener(getProject());
+        Driver.addProcessingDoneListener(marker);
+        getLock(getProject()).acquire();
+        for (BuildInput input : inputs)
           try {
-            monitor.beginTask("compile " + sourceFile.getRelativePath(),
-                IProgressMonitor.UNKNOWN);
-            Driver.compile(sourceFile, monitor);
+            monitor.beginTask("compile " + input.sourceFile.getRelativePath(), IProgressMonitor.UNKNOWN);
+
+            Result res = Driver.compile(input.sourceFile, monitor);
             
             IWorkbenchWindow[] workbenchWindows = PlatformUI.getWorkbench().getWorkbenchWindows();
             for (IWorkbenchWindow workbenchWindow : workbenchWindows)
@@ -148,21 +174,20 @@
                       editor instanceof UniversalEditor && 
                       editor.getEditorInput() instanceof FileEditorInput) {
                     IFile file = ((FileEditorInput) editor.getEditorInput()).getFile();
-                    if (file.getLocation().toString().equals(sourceFile.toString()))
+                    if (file.getLocation().toString().equals(input.sourceFile.toString()))
                       ((UniversalEditor) editor).fParserScheduler.schedule();
                   }
                 }
-            
-            
           } catch (InterruptedException e) {
             monitor.setCanceled(true);
             monitor.done();
             return Status.CANCEL_STATUS;
           } catch (Exception e) {
             e.printStackTrace();
-            throw new RuntimeException("compilation of "
-                + FileCommands.fileName(sourceFile) + " failed", e);
+            throw new RuntimeException("compilation of " + FileCommands.fileName(input.sourceFile) + " failed", e);
           } finally {
+            getLock(getProject()).release();
+            Driver.removeProcessingDoneListener(marker);
             monitor.done();
           }
           return Status.OK_STATUS;

Added: sugarj/trunk/editor/editor/java/org/sugarj/builder/MarkingProcessingListener.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/MarkingProcessingListener.java	Tue Sep 13 09:30:09 2011	(r23337)
@@ -0,0 +1,69 @@
+package org.sugarj.builder;
+
+import org.eclipse.core.resources.IMarker;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.jdt.core.IPackageFragmentRoot;
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.core.JavaModelException;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.sugarj.driver.Result;
+import org.sugarj.driver.path.RelativeSourceLocationPath;
+import org.sugarj.util.ProcessingListener;
+
+/**
+ * @author seba
+ */
+public class MarkingProcessingListener implements ProcessingListener {
+  
+  private IProject project;
+  
+  public MarkingProcessingListener(IProject project) {
+    this.project = project;
+  }
+
+  private IResource getResource(RelativeSourceLocationPath sourceFile) throws JavaModelException {
+    if (!sourceFile.getAbsolutePath().startsWith(project.getLocation().toString()))
+      return null;
+    
+    try {
+      for (IPackageFragmentRoot frag : JavaCore.create(project).getAllPackageFragmentRoots())
+        if (frag.getKind() == IPackageFragmentRoot.K_SOURCE) {
+          IResource resource = project.findMember(frag.getPath().makeRelativeTo(project.getFullPath()).append(sourceFile.getRelativePath()));
+          if (resource != null)
+            return resource;
+        }
+    } catch (JavaModelException e) { }
+    return null;
+  }
+  
+  @Override
+  public void processingStarts(RelativeSourceLocationPath sourceFile) {
+    try {
+      IResource resource = getResource(sourceFile);
+      if (resource != null)
+        resource.deleteMarkers(IMarker.MARKER, true, IResource.DEPTH_INFINITE);
+    } catch (CoreException e) {
+    }
+  }
+
+  @Override
+  public void processingDone(Result result) {
+    try {
+      IResource resource = getResource(result.getSourceFile());
+      
+      for (String error : result.getCollectedErrors()) {
+        IMarker marker = resource.createMarker(IMarker.PROBLEM);
+        marker.setAttribute(IMarker.MESSAGE, "compilation failed: " + error);
+      }
+      
+      for (BadTokenException error : result.getParseErrors()) {
+        IMarker marker = resource.createMarker(IMarker.PROBLEM);
+        marker.setAttribute(IMarker.MESSAGE, "parsing failed: " + error.getLocalizedMessage());
+      }
+    } catch (CoreException e) {
+    }
+  }
+
+}

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Mon Sep 12 21:20:42 2011	(r23336)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Tue Sep 13 09:30:09 2011	(r23337)
@@ -63,7 +63,8 @@
 
     if (result.isUpToDateShallow(input.hashCode(), environment))
       return result.getSugaredSyntaxTree();
-    else if (!isPending(filename)) 
+    
+    if (!isPending(filename)) 
       scheduleParse(input, filename);
         
 //    Path lastParseTable;
@@ -150,7 +151,7 @@
   @Override
   public Set<BadTokenException> getCollectedErrors() {
     final Set<BadTokenException> empty = Collections.emptySet();
-    return result == null ? empty : result.getCollectedErrors();
+    return result == null ? empty : new HashSet(result.getCollectedErrors());
   }
 
 
@@ -160,6 +161,7 @@
   }
 
   private static Result getResult(String file) {
+    
     synchronized (results) {
       return results.get(file);
     }

From r.t.lindeman at student.tudelft.nl  Tue Sep 13 14:20:31 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 13 Sep 2011 12:20:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23338 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans
Message-ID: <20110913122031.9A0872B8007@mx2.tudelft.nl>

Author: RickyLindeman
Date: Tue Sep 13 12:20:31 2011
New Revision: 23338
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23338&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str	Tue Sep 13 09:30:09 2011	(r23337)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str	Tue Sep 13 12:20:31 2011	(r23338)
@@ -103,7 +103,6 @@
 		
 		
 	// current term s is a Strategy
-	// it is transformed to s-enter; s; s-exit
 	// s-enter ; s < s-exit + (s-exit; fail)
 	// if the strategy s fail, when can still call s-exit and throw a fail afterwards!
 	// TODO: when we want the debugger to catch 'fail' we should probably call a specific before re-throwing fail
@@ -313,4 +312,4 @@
     create-s-fail-call(|filename, name, a) = !CallT(SVar("s-fail"), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(name)), <location-to-term> a])
  
     create-fail = !Fail()
-	
\ No newline at end of file
+	

From r.t.lindeman at student.tudelft.nl  Tue Sep 13 14:21:27 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 13 Sep 2011 12:21:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23339 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies
Message-ID: <20110913122127.B7F0E108C014@mx3.tudelft.nl>

Author: RickyLindeman
Date: Tue Sep 13 12:21:27 2011
New Revision: 23339
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23339&sc=1

Log:
disable printing to commandline

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/TimeMonitor.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/TimeMonitor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/TimeMonitor.java	Tue Sep 13 12:20:31 2011	(r23338)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/TimeMonitor.java	Tue Sep 13 12:21:27 2011	(r23339)
@@ -75,8 +75,14 @@
 		this.timeMonitors.put(name, totalDuration);
 	}
 	
+	public static boolean TIME_MONITOR_ENABLED = false;
+	
 	public void print()
 	{
+		if (!TIME_MONITOR_ENABLED)
+		{
+			return;
+		}
 		for(String key : this.timeMonitors.keySet())
 		{
 			System.out.println("NANO " + key + ":" + this.timeMonitorsN.get(key));

From r.t.lindeman at student.tudelft.nl  Tue Sep 13 14:27:12 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 13 Sep 2011 12:27:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23340 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec
Message-ID: <20110913122712.18E557F8043@mx1.tudelft.nl>

Author: RickyLindeman
Date: Tue Sep 13 12:27:11 2011
New Revision: 23340
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23340&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Tue Sep 13 12:21:27 2011	(r23339)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Tue Sep 13 12:27:11 2011	(r23340)
@@ -1,6 +1,7 @@
 package org.strategoxt.debug.core.eventspec;
 
 import java.io.File;
+import java.util.HashMap;
 import java.util.List;
 
 import org.eclipse.core.runtime.IPath;
@@ -274,4 +275,20 @@
 		return inputTerm;
 	}
 
+	private HashMap<String, Object> properties = new HashMap<String, Object>();
+	
+	public Object getProperty(String key)
+	{
+		if (properties.containsKey(key))
+		{
+			return properties.get(key);
+		} else {
+			return null;
+		}
+	}
+	
+	public void setProperty(String key, Object value)
+	{
+		this.properties.put(key, value);
+	}
 }

From r.t.lindeman at student.tudelft.nl  Tue Sep 13 14:33:48 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 13 Sep 2011 12:33:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23341 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control
Message-ID: <20110913123348.0C56BCC0C1@mx4.tudelft.nl>

Author: RickyLindeman
Date: Tue Sep 13 12:33:47 2011
New Revision: 23341
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23341&sc=1

Log:
disable profiler which monitered performance

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventProfiler.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventProfiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventProfiler.java	Tue Sep 13 12:27:11 2011	(r23340)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventProfiler.java	Tue Sep 13 12:33:47 2011	(r23341)
@@ -21,6 +21,7 @@
 	 */
 	public static EventProfiler instance = new EventProfiler();
 	
+	public static boolean ENABLE_EVENT_PROFILER = false;
 	
 	private EventProfiler()
 	{
@@ -91,7 +92,7 @@
 	}
 	
 	
-	public void writeInternal() throws IOException
+	private void writeInternal() throws IOException
 	{
 		File file = new File("internalcount.tsv");
 		BufferedWriter w = new BufferedWriter(new FileWriter(file));
@@ -115,7 +116,7 @@
 		w.close();
 	}
 	
-	public void writeStratego() throws IOException
+	private void writeStratego() throws IOException
 	{
 		File file = new File("count.tsv");
 		BufferedWriter w = new BufferedWriter(new FileWriter(file));
@@ -141,6 +142,10 @@
 	
 	public void write()
 	{
+		if (!ENABLE_EVENT_PROFILER)
+		{
+			return;
+		}
 		try {
 			writeStratego();
 		} catch (IOException e) {

From seba at informatik.uni-marburg.de  Tue Sep 13 17:13:49 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 13 Sep 2011 15:13:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23342 - in
	sugarj/trunk: case-studies/xml compiler/org/sugarj/driver
Message-ID: <20110913151349.6E0C7CC130@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Tue Sep 13 15:13:49 2011
New Revision: 23342
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23342&sc=1

Log:
less intrusive cyclic dependency detection

Modified:
   sugarj/trunk/case-studies/xml/CSSXmlEditor.sugj
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java

Modified: sugarj/trunk/case-studies/xml/CSSXmlEditor.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/CSSXmlEditor.sugj	Tue Sep 13 12:33:47 2011	(r23341)
+++ sugarj/trunk/case-studies/xml/CSSXmlEditor.sugj	Tue Sep 13 15:13:49 2011	(r23342)
@@ -6,8 +6,8 @@
 
 public css CSSXmlEditor {
   Element  { folding; outlining }
-  ElemName { color-recursive : blue }
-  AttrName { color-recursive : darkorange }
-  AttValue { color-recursive : darkred }
-  CharData { color-recursive : black }
+  ElemName { rec-color : blue }
+  AttrName { rec-color : darkorange }
+  AttValue { rec-color : darkred }
+  CharData { rec-color : black }
 }
\ No newline at end of file

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Tue Sep 13 12:33:47 2011	(r23341)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Tue Sep 13 15:13:49 2011	(r23342)
@@ -205,12 +205,13 @@
   }
 
   private static Result run(RelativeSourceLocationPath sourceFile, IProgressMonitor monitor, boolean generateFiles) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException, InterruptedException {
-    synchronized (currentlyProcessing) {
-      // TODO we need better circular dependency handling
-      if (currentlyProcessing.contains(sourceFile))
-        throw new IllegalStateException("circular processing");
-      currentlyProcessing.add(sourceFile);
-    }
+    if (generateFiles)
+      synchronized (currentlyProcessing) {
+        // TODO we need better circular dependency handling
+        if (currentlyProcessing.contains(sourceFile))
+          throw new IllegalStateException("circular processing");
+        currentlyProcessing.add(sourceFile);
+      }
 
     Result res;
     
@@ -218,9 +219,10 @@
       String source = FileCommands.readFileAsString(sourceFile);
       res = run(source, sourceFile, monitor, generateFiles);
     } finally {
-      synchronized (currentlyProcessing) {
-        currentlyProcessing.remove(sourceFile);
-      }
+      if (generateFiles)
+        synchronized (currentlyProcessing) {
+          currentlyProcessing.remove(sourceFile);
+        }
       pendingInputFiles.remove(sourceFile);
     }
 

From M.A.Akhter at student.tudelft.nl  Wed Sep 14 04:25:17 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 14 Sep 2011 02:25:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23343 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang tests
Message-ID: <20110914022517.B666D2B800F@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Sep 14 02:25:14 2011
New Revision: 23343
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23343&sc=1

Log:
+ changes in Spoofaxlang Index to fix integration issues 
+ more unit tests

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java
      - copied, changed from r23318, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_desriptor.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_desriptor.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -37,7 +37,7 @@
 		
 		//primitives to index packages, language descriptions  and modules 
 		add(new SPX_index_package_declaration(spxIndex));
-		add(new SPX_index_language_desriptor(spxIndex));
+		add(new SPX_index_language_descriptor(spxIndex));
 		add(new SPX_index_module_definition(spxIndex));
 		
 		add(new SPX_index_get_language_descriptor(spxIndex));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -16,7 +16,7 @@
 	static final int ModulePathIndex = 1;
 	static final int PackageTypedQNameIndex = 2;
 	static final int AstIndex = 3;
-	static final int AnalyzedAstIndex = 3;
+	static final int AnalyzedAstIndex = 4;
 	
 	final String resourceAbsPath; 
 	
@@ -90,7 +90,7 @@
 		final IStrategoConstructor moduleQNameCons = fac.makeConstructor(_moduleIdContructorName, 1);
 		
 		if(moduleQNameCons == moduleQName.getConstructor())
-			getID(fac, (IStrategoAppl)moduleQName.getSubterm(ModuleTypedQNameIndex));	
+			return getID(fac, (IStrategoAppl)moduleQName.getSubterm(ModuleTypedQNameIndex));	
 		
 		throw new IllegalArgumentException("Invalid module qname : "+ moduleQName.toString());
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -48,10 +48,11 @@
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		
 		IStrategoTerm moduleDeclarationTerm = super.toTerm(idxFacade);
-		IStrategoConstructor moduleDefCons = idxFacade.getModuleDeclCon();
+		IStrategoConstructor moduleDefCons = idxFacade.getModuleDefCon();
 		
 		
-		IStrategoTerm retTerm = termFactory.makeAppl(moduleDefCons,
+		IStrategoTerm retTerm = termFactory.makeAppl(
+				moduleDefCons,
 				moduleDeclarationTerm.getSubterm(0),
 				moduleDeclarationTerm.getSubterm(1),
 				moduleDeclarationTerm.getSubterm(2),

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -88,7 +88,7 @@
 		
 		if(packageQNameCon == packageQName.getConstructor())
 		{
-			getID(fac, (IStrategoAppl)packageQName.getSubterm(0));	
+			return getID(fac, (IStrategoAppl)packageQName.getSubterm(0));	
 		}
 		
 		throw new IllegalArgumentException("Invalid Package Typed QName : "+ packageQName);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -36,7 +36,10 @@
 			throws InterpreterException {
 	
 		if ( tvars.length != NO_ARGS || !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
+		{
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 			return false;
+		}
 		
 		try 
 		{

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -21,11 +21,17 @@
 public class SPX_index_compilation_unit extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_compilation_unit";
-
+	
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int COMPILATION_UNIT_PATH_INDEX = 1;
+	private static int COMPILATION_UNIT_AST_INDEX = 2;
+	
+	private final static int NO_ARGS = 3;
+	
 	private final SpxSemanticIndex index;
 
 	public SPX_index_compilation_unit(SpxSemanticIndex index) {
-		super(NAME, 0, 3);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 
@@ -37,11 +43,12 @@
 	{
 		boolean successStatement = false;
 		 
-		if ( Tools.isTermString(tvars[0]) && Tools.isTermString(tvars[1]) && Tools.isTermAppl(tvars[2])) 
-		{
-			IStrategoString projectName = (IStrategoString)tvars[0];
-			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[1];
-			IStrategoAppl  compilationUnitRTree = (IStrategoAppl)tvars[2];
+		if (Tools.isTermString(tvars[PROJECT_NAME_INDEX])
+				&& Tools.isTermString(tvars[COMPILATION_UNIT_PATH_INDEX])
+				&& Tools.isTermAppl(tvars[COMPILATION_UNIT_AST_INDEX])) {
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[COMPILATION_UNIT_PATH_INDEX];
+			IStrategoAppl  compilationUnitRTree = (IStrategoAppl)tvars[COMPILATION_UNIT_AST_INDEX];
 			
 			try {
 				successStatement  = index.indexCompilationUnit(projectName ,  spxCompilationUnitPath ,  compilationUnitRTree);
@@ -51,7 +58,9 @@
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
-		
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			
 		return successStatement;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -1,7 +1,5 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import java.io.IOException;
-
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
@@ -41,7 +39,6 @@
 		if(tvars.length != NO_ARGS)
 			return successStatement;
 		
-		
 		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermString(tvars[COMP_UNIT_PATH_INDEX])) 
 		{
 			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
@@ -51,12 +48,13 @@
 				env.setCurrent(t);
 				successStatement = true;
 			} 
-			catch(Exception ex)
-			{
-				// Logging any exception throw from the underlying symbol table. 
+			catch(Exception ex){
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
 		return successStatement;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -22,12 +22,13 @@
 	
 	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int PACKAGE_ID_INDEX = 1;
+	private final static int NO_ARGS = 2;
 	
 	private final SpxSemanticIndex index;
 
 	
 	public SPX_index_get_language_descriptor(SpxSemanticIndex index) {
-		super(NAME, 0, 2);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 	
@@ -42,12 +43,12 @@
 			throws InterpreterException {
 		boolean successStatement = false;
 		
-		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[PACKAGE_ID_INDEX])) 
+		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[PACKAGE_ID_INDEX])) 
 		{
 			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 			IStrategoAppl typedPackageIdQName = (IStrategoAppl)tvars[PACKAGE_ID_INDEX];
 			try {
-				IStrategoTerm t = index.getModuleDeclaration(projectName, typedPackageIdQName);
+				IStrategoTerm t = index.getLanguageDescriptor(projectName, typedPackageIdQName);
 				env.setCurrent(t);
 				successStatement = true;
 			} 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -53,6 +53,9 @@
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
 		return successStatement;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -47,6 +47,9 @@
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
 		return successStatement;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -19,11 +19,12 @@
 	private static String NAME = "SPX_index_get_package_declaration";
 	private static int PROJECT_NAME_INDEX = 0;
 	private static int PACKAGE_ID_INDEX = 1;
+	private final static int NO_ARGS = 2;
 	
 	private final SpxSemanticIndex index;
 
 	public SPX_index_get_package_declaration(SpxSemanticIndex index) {
-		super(NAME, 0, 2);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 	
@@ -37,7 +38,7 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
 		boolean successStatement = false;
 		
-		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[PACKAGE_ID_INDEX])) 
+		if ( (tvars.length == NO_ARGS) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[PACKAGE_ID_INDEX])) 
 		{
 			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 			IStrategoAppl typedPackageIdQName = (IStrategoAppl)tvars[PACKAGE_ID_INDEX];
@@ -53,6 +54,8 @@
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -34,8 +34,11 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 	{
 		if ( tvars.length != NO_ARGS || !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
+		{
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 			return false;
-
+		}	
+		
 		IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 		try
 		{

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java (from r23318, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_desriptor.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_desriptor.java	Sun Sep 11 21:10:58 2011	(r23318, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -3,12 +3,9 @@
  */
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.asJavaString;
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
-import java.net.URI;
-
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
@@ -21,14 +18,17 @@
  * @author Md. Adil Akhter
  *
  */
-public class SPX_index_language_desriptor extends AbstractPrimitive {
+public class SPX_index_language_descriptor extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_language_descriptor";
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int LANGUAGE_DESCRIPTOR_INDEX = 1;
+	private final static int NO_ARGS = 2;
 
 	private final SpxSemanticIndex index;
 
-	public SPX_index_language_desriptor(SpxSemanticIndex index) {
-		super(NAME, 0, 2);
+	public SPX_index_language_descriptor(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 
@@ -36,11 +36,10 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
 		boolean successStatement = false;
 
-		if (isTermString(tvars[0]) && isTermAppl(tvars[0])) {
-
-			IStrategoString projectName = (IStrategoString)tvars[0];
-			IStrategoAppl languageDescriptor= (IStrategoAppl) tvars[1];
+		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[LANGUAGE_DESCRIPTOR_INDEX])) {
 
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl languageDescriptor= (IStrategoAppl) tvars[LANGUAGE_DESCRIPTOR_INDEX];
 			try
 			{
 				successStatement = index.indexLanguageDescriptor(projectName, languageDescriptor);
@@ -50,7 +49,9 @@
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
-
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
 		return successStatement;	
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -21,11 +21,14 @@
 public class SPX_index_module_definition extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_module_definition";
-
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int MODULE_DEF_INDEX = 1;
+	private final static int NO_ARGS = 2;
+	
 	private final SpxSemanticIndex index;
 
 	public SPX_index_module_definition(SpxSemanticIndex index) {
-		super(NAME, 0, 2);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 
@@ -33,10 +36,10 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
 		boolean successStatement = false;
 		
-		if (isTermString(tvars[0]) && isTermAppl(tvars[0])) {
+		if ( (tvars.length == NO_ARGS) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[MODULE_DEF_INDEX])) {
 			
-			IStrategoString projectName = (IStrategoString)tvars[0];
-			IStrategoAppl moduleDef = (IStrategoAppl) tvars[1];
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl moduleDef = (IStrategoAppl) tvars[MODULE_DEF_INDEX ];
 			
 			try
 			{
@@ -47,6 +50,8 @@
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;	
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -24,11 +24,16 @@
 public class SPX_index_package_declaration extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_package_declaration";
-
+	
+	private final static int PROJECT_NAME_INDEX = 0;
+	private final static int PACKAGE_DECL_INDEX = 1;
+	
+	private final static int NO_ARGS = 2;
+	
 	private final SpxSemanticIndex index;
-
+	
 	public SPX_index_package_declaration(SpxSemanticIndex index) {
-		super(NAME, 0, 2);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 
@@ -36,10 +41,10 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
 		boolean successStatement = false;
 		
-		if (isTermString(tvars[0]) && isTermAppl(tvars[0])) {
+		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[PACKAGE_DECL_INDEX])) {
 			
-			IStrategoString projectName = (IStrategoString)tvars[0];
-			IStrategoAppl packageDecl = (IStrategoAppl) tvars[1];
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl packageDecl   = (IStrategoAppl) tvars[PACKAGE_DECL_INDEX];
 			
 			try
 			{
@@ -50,6 +55,8 @@
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;	
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -21,11 +21,16 @@
 public class SPX_index_remove_compilation_unit extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_remove_compilation_unit";
+	
+	private final static int PROJECT_NAME_INDEX = 0;
+	private final static int FILE_PATH_INDEX = 1;
 
+	private final static int NO_ARGS = 2;
+	
 	private final SpxSemanticIndex index;
 
 	public SPX_index_remove_compilation_unit(SpxSemanticIndex index) {
-		super(NAME, 0, 2);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 
@@ -37,22 +42,22 @@
 	{
 		boolean successStatement = false;
 		 
-		if ( Tools.isTermString(tvars[0]) && Tools.isTermString(tvars[1])) 
+		if ( (NO_ARGS == tvars.length) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermString(tvars[FILE_PATH_INDEX])) 
 		{
-			IStrategoString projectName = (IStrategoString)tvars[0];
-			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[1];
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[FILE_PATH_INDEX];
 		
 			try {
 				successStatement  = index.removeCompilationUnit(projectName ,  spxCompilationUnitPath);
 			} 
 			catch(Exception ex)
 			{
-				// logging any unhandled exception 
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -1,9 +1,5 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
-
-import java.io.IOException;
-
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
@@ -19,11 +15,13 @@
 public class SPX_index_save extends AbstractPrimitive {
 
 	private static String NAME = "SPX_index_save";
-
+	private static int PROJECT_NAME_INDEX = 0;
+	private final static int NO_ARGS = 1;
+	
 	private final SpxSemanticIndex index;
 
 	public SPX_index_save(SpxSemanticIndex index) {
-		super(NAME, 0, 1);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 	
@@ -31,15 +29,17 @@
 	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
 	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
 	
-		if (!Tools.isTermString(tvars[0]))
+		if ( (tvars.length != NO_ARGS) && !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
+		{	
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 			return false;
+		}
 		
 		try 
 		{
-			return index.save(tvars[0]);
+			return index.save(tvars[PROJECT_NAME_INDEX]);
 		}
 		catch(Exception ex)
 		{

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -118,7 +118,6 @@
 				idxFacade.indexModuleDefinition(moduleDefinition);
 			}
 		};
-
 		return indexSymbol(projectName, moduleDefinition,  idx);
 	}
 	
@@ -297,6 +296,11 @@
 		return true;
 	}
 	
+	/**
+	 * Closes any underlying open connection and clean up unmanaged resources. 
+	 * 
+	 * @param projectName
+	 */
 	private void tryCleanupResources( IStrategoTerm projectName){
 		
 		if ( _facadeRegistry.containsFacade(projectName))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -51,10 +51,10 @@
 		_agent = agent;
 		_stripper = new TermAttachmentStripper(_termFactory);
 		
-		_moduleDefCon  			= _termFactory.makeConstructor("ModuleDefinition", 5);
-		_moduleDeclCon 			= _termFactory.makeConstructor("ModuleDeclaration", 3);
-		_packageDeclCon 		= _termFactory.makeConstructor("PackageDeclaration", 2);
-		_languageDescriptorCon  = _termFactory.makeConstructor("LanguageDescriptor", 5);
+		_moduleDefCon  			= _termFactory.makeConstructor("ModuleDef", 5);
+		_moduleDeclCon 			= _termFactory.makeConstructor("ModuleDecl", 3);
+		_packageDeclCon 		= _termFactory.makeConstructor("PackageDecl", 2);
+		_languageDescriptorCon  = _termFactory.makeConstructor("PackageDeclaration", 5);
 		
 		_persistenceManager = new SpxPersistenceManager(_projectName , _agent.getWorkingDir());
 	}
@@ -223,7 +223,7 @@
 	 */
 	public void indexPackageDeclaration(IStrategoAppl packageDeclaration)
 	{
-		verifyDeclarationType(
+		assertConstructor(
 				packageDeclaration.getConstructor(), 
 				getPackageDeclCon(), 
 				"Illegal PackageDeclaration");
@@ -269,7 +269,7 @@
 	 */
 	public void indexLanguageDescriptor (IStrategoAppl languageDescriptor)
 	{
-		verifyDeclarationType(languageDescriptor.getConstructor(), getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
+		assertConstructor(languageDescriptor.getConstructor(), getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
 		
 		IStrategoList qualifiedPackageId = PackageDeclaration.getPackageId(getTermFactory(), (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
@@ -423,7 +423,7 @@
 	 */
 	public void indexModuleDefinition(IStrategoAppl moduleDefinition) throws IllegalArgumentException
 	{
-		verifyDeclarationType(moduleDefinition.getConstructor() , _moduleDefCon , "Illegal Module Definition" );
+		assertConstructor(moduleDefinition.getConstructor() , _moduleDefCon , "Illegal Module Definition" );
 		
 		indexModuleDefinition(	(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.ModuleTypedQNameIndex), 
 								(IStrategoString) moduleDefinition.getSubterm(ModuleDeclaration.ModulePathIndex), 
@@ -441,36 +441,36 @@
 	 * @param ast
 	 * @param analyzedAst
 	 */
-	public void indexModuleDefinition(
-			IStrategoAppl moduleQName,
-			IStrategoString spxCompilationUnitPath ,
-			IStrategoAppl packageQName,
-			IStrategoAppl ast , 
-			IStrategoAppl analyzedAst)
-	{
-		
+	public void indexModuleDefinition(IStrategoAppl moduleQName,
+			IStrategoString spxCompilationUnitPath, IStrategoAppl packageQName,
+			IStrategoAppl ast, IStrategoAppl analyzedAst) {
+
 		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
-		
-		IStrategoList moduleId = ModuleDeclaration.getModuleId(this.getTermFactory(), moduleQName);
-		IStrategoList packageId = PackageDeclaration.getPackageId(this.getTermFactory(), packageQName);
 
-		moduleId 				= (IStrategoList)toCompactPositionInfo(moduleId);
-		packageId 				= (IStrategoList)toCompactPositionInfo(packageId);
-		ast 					= (IStrategoAppl)strip(ast);
-		analyzedAst 			= (IStrategoAppl)strip(analyzedAst);
-		spxCompilationUnitPath  = (IStrategoString) strip(spxCompilationUnitPath);
-		
-		//verify whether the enclosing package exists in symbol table 
+		IStrategoList moduleId = ModuleDeclaration.getModuleId(
+				this.getTermFactory(), moduleQName);
+		IStrategoList packageId = PackageDeclaration.getPackageId(
+				this.getTermFactory(), packageQName);
+
+		moduleId = (IStrategoList) toCompactPositionInfo(moduleId);
+		packageId = (IStrategoList) toCompactPositionInfo(packageId);
+		ast = (IStrategoAppl) strip(ast);
+		analyzedAst = (IStrategoAppl) strip(analyzedAst);
+		spxCompilationUnitPath = (IStrategoString) strip(spxCompilationUnitPath);
+
+		// verify whether the enclosing package exists in symbol table
 		if (!_persistenceManager.spxPackageTable().containsPackage(packageId))
-			throw new IllegalArgumentException("Unknown Package : "+packageId.toString());
+			throw new IllegalArgumentException("Unknown Package : "
+					+ packageId.toString());
 
-		table.define(
-				new ModuleDeclaration(
-						toAbsulatePath(spxCompilationUnitPath) ,
-						moduleId, 
-						packageId)
-				,ast
-				,analyzedAst);
+		table.define(new ModuleDeclaration(
+				toAbsulatePath(spxCompilationUnitPath), moduleId, packageId),
+				ast, analyzedAst);
+	}
+
+	public IStrategoList getModuleDeclarations(IStrategoAppl packageQNameTerm) {
+
+		return null;
 	}
 
 	
@@ -513,7 +513,7 @@
 	/**
 	 * @return the PackageDeclaration Constructor
 	 */
-	IStrategoConstructor getPackageDeclCon() {
+	public IStrategoConstructor getPackageDeclCon() {
 		return _packageDeclCon;
 	}
 	
@@ -565,7 +565,7 @@
 	 * @param expected
 	 * @param message
 	 */
-	private void verifyDeclarationType( IStrategoConstructor actual , IStrategoConstructor expected , String message)
+	public  void assertConstructor( IStrategoConstructor actual , IStrategoConstructor expected , String message)
 	{
 		if( actual != expected)
 			throw new IllegalArgumentException(message);
@@ -588,7 +588,5 @@
 			}
 		}
 	}
-	
-	
-	
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -357,8 +357,8 @@
 		
 		lookupTable.define(
 					m1 , 
-					(IStrategoAppl)getModuleDefinition("m1") , 
-					(IStrategoAppl)getAnalyzedModuleDefinition("m1")
+					(IStrategoAppl)getModuleDefinition(f, "m1") , 
+					(IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
 		
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
@@ -366,8 +366,8 @@
 		
 		lookupTable.define(
 				m2 , 
-				(IStrategoAppl)getModuleDefinition("m2") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition("m2")
+				(IStrategoAppl)getModuleDefinition(f, "m2") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
 	
 		
@@ -376,8 +376,8 @@
 
 		lookupTable.define(
 				m3 , 
-				(IStrategoAppl)getModuleDefinition("m3") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition("m3")
+				(IStrategoAppl)getModuleDefinition(f, "m3") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
 			);
 	
 		assertEquals(3, lookupTable.size());
@@ -407,8 +407,8 @@
 		
 		lookupTable.define(
 					m1 , 
-					(IStrategoAppl)getModuleDefinition("m1") , 
-					(IStrategoAppl)getAnalyzedModuleDefinition("m1")
+					(IStrategoAppl)getModuleDefinition(f, "m1") , 
+					(IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
 		
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
@@ -416,8 +416,8 @@
 		
 		lookupTable.define(
 				m2 , 
-				(IStrategoAppl)getModuleDefinition("m2") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition("m2")
+				(IStrategoAppl)getModuleDefinition(f, "m2") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
 	
 		
@@ -426,8 +426,8 @@
 
 		lookupTable.define(
 				m3 , 
-				(IStrategoAppl)getModuleDefinition("m3") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition("m3")
+				(IStrategoAppl)getModuleDefinition(f, "m3") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
 			);
 	
 		assertEquals(3, lookupTable.size());
@@ -456,8 +456,8 @@
 		
 		lookupTable.define(
 					m1 , 
-					(IStrategoAppl)getModuleDefinition("m1") , 
-					(IStrategoAppl)getAnalyzedModuleDefinition("m1")
+					(IStrategoAppl)getModuleDefinition(f, "m1") , 
+					(IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
 		
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
@@ -465,8 +465,8 @@
 		
 		lookupTable.define(
 				m2 , 
-				(IStrategoAppl)getModuleDefinition("m2") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition("m2")
+				(IStrategoAppl)getModuleDefinition(f, "m2") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
 	
 		
@@ -475,8 +475,8 @@
 
 		lookupTable.define(
 				m3 , 
-				(IStrategoAppl)getModuleDefinition("m3") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition("m3")
+				(IStrategoAppl)getModuleDefinition(f, "m3") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
 			);
 	
 		assertEquals(3, lookupTable.size());
@@ -506,8 +506,8 @@
 		
 		lookupTable.define(
 					m1 , 
-					(IStrategoAppl)getModuleDefinition("m1") , 
-					(IStrategoAppl)getAnalyzedModuleDefinition("m1")
+					(IStrategoAppl)getModuleDefinition(f, "m1") , 
+					(IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
 		
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
@@ -515,8 +515,8 @@
 		
 		lookupTable.define(
 				m2 , 
-				(IStrategoAppl)getModuleDefinition("m2") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition("m2")
+				(IStrategoAppl)getModuleDefinition(f, "m2") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
 	
 		
@@ -525,8 +525,8 @@
 
 		lookupTable.define(
 				m3 , 
-				(IStrategoAppl)getModuleDefinition("m3") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition("m3")
+				(IStrategoAppl)getModuleDefinition(f, "m3") , 
+				(IStrategoAppl)getAnalyzedModuleDefinition(f , "m3")
 			);
 	
 		assertEquals(3, lookupTable.size());
@@ -537,10 +537,9 @@
 		
 		assertEquals(1, lookupTable.size());
 	}
-	private IStrategoTerm getModuleDefinition( String moduleName )
+	static IStrategoTerm getModuleDefinition( ITermFactory f, String moduleName )
 	{
-		ITermFactory f = this.termFactory();
-
+		
 		String text = "Module(" + 
 		"None()"+
 		", SPXModuleName(\""+moduleName+"\")"+
@@ -549,8 +548,8 @@
 		return f.parseFromString(text);
 	}
 
-	private IStrategoTerm getAnalyzedModuleDefinition(String moduleName) 
+	static IStrategoTerm getAnalyzedModuleDefinition(ITermFactory f , String moduleName) 
 	{ 
-		return getModuleDefinition(moduleName);
+		return getModuleDefinition(f, moduleName);
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Tue Sep 13 15:13:49 2011	(r23342)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 02:25:14 2011	(r23343)
@@ -3,8 +3,12 @@
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.LanguageLibrary;
+import org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.test.AbstractInterpreterTest;
 
@@ -15,6 +19,9 @@
 	private IStrategoString projectNameTerm; 
 	private SpxSemanticIndexFacade _facade;
 	
+	final String absPathString1 = "c:/temp/test1.spx" ;
+	final String absPathString2 = "c:/temp/test2.spx" ;
+	
 	private Interpreter interpreter()
 	{
 		 return itp;
@@ -48,4 +55,61 @@
 	{
 		
 	}	
+	
+	public void testUnknownPackageNameThrowsIllegalArgumentException() 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		try{
+		_facade.indexModuleDefinition( mQnameAppl ,f.makeString(absPathString1) ,pQnameAppl , ast, analyzed_ast);
+		}
+		catch(IllegalArgumentException ex)
+		{
+			
+		}
+	}
+	
+	public void testIndexPackageDeclaration() 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		
+		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
+		
+		_facade.assertConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration"); 
+	}
+	
+	
+	public void testIndexPackageDeclarationInMultipleFiles() 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString2));
+		
+		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
+		
+		_facade.assertConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
+		
+		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
+	}
 }

From L.C.L.Kats at tudelft.nl  Wed Sep 14 13:38:24 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 14 Sep 2011 11:38:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23344 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
Message-ID: <20110914113824.21B19CC14F@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Sep 14 11:38:23 2011
New Revision: 23344
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23344&sc=1

Log:
typo in SSL_fflush

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fflush.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fflush.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fflush.java	Wed Sep 14 02:25:14 2011	(r23343)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fflush.java	Wed Sep 14 11:38:23 2011	(r23344)
@@ -20,7 +20,7 @@
 public class SSL_fflush extends AbstractPrimitive {
 
     SSL_fflush() {
-        super("SSL_flush", 0, 1);
+        super("SSL_fflush", 0, 1);
     }
     
     @Override

From L.C.L.Kats at tudelft.nl  Wed Sep 14 13:38:29 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 14 Sep 2011 11:38:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23345 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110914113829.E9B7C7F806F@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Sep 14 11:38:29 2011
New Revision: 23345
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23345&sc=1

Log:
new-libs

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From m.dejonge at tudelft.nl  Wed Sep 14 15:16:35 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 14 Sep 2011 13:16:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23346 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
	org.spoofax.jsglr/src/org/spoofax/jsglr/client/imp...
Message-ID: <20110914131635.A1B5D7F807A@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Sep 14 13:16:35 2011
New Revision: 23346
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23346&sc=1

Log:
moved: origin layout strategies + StrategoSubList

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LayoutStructure.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginCommentsAfterPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentsAfterPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginCommentsBeforePrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentsBeforePrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginDeletionOffsetPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDeletionOffsetPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginDesugaredTermPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginIndentationPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginInsertAtEndOffsetPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginInsertAtEndOffsetPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginInsertBeforeOffsetPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginInsertBeforeOffsetPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLayoutPrefixPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginLayoutPrefixPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginNonLayoutTokensPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginNonLayoutTokensPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSeparationPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparationPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSublistTermPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSublistTermPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTermFuzzyPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTermFuzzyPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTextWithLayoutPrimitive.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextWithLayoutPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java   (contents, props changed)
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java
      - copied, changed from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITreeFactory.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TermTreeFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LayoutStructure.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LayoutStructure.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
@@ -10,9 +10,7 @@
 import org.spoofax.jsglr.client.imploder.ITokenizer;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.jsglr.client.imploder.Token;
-import org.spoofax.terms.attachments.OriginAttachment;
-import org.strategoxt.imp.runtime.parser.ast.StrategoSubList;
-import org.strategoxt.stratego_lib.assert_1_0;
+import org.spoofax.terms.StrategoSubList;
 
 /**
  * Provides access to the layout structure (text fragments and offsets) surrounding a node

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginCommentsAfterPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentsAfterPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentsAfterPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginCommentsAfterPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginCommentsBeforePrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentsBeforePrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentsBeforePrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginCommentsBeforePrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginDeletionOffsetPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDeletionOffsetPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDeletionOffsetPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginDeletionOffsetPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginDesugaredTermPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginDesugaredTermPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginIndentationPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginIndentationPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginInsertAtEndOffsetPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginInsertAtEndOffsetPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginInsertAtEndOffsetPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginInsertAtEndOffsetPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginInsertBeforeOffsetPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginInsertBeforeOffsetPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginInsertBeforeOffsetPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginInsertBeforeOffsetPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLayoutPrefixPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginLayoutPrefixPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginLayoutPrefixPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLayoutPrefixPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Wed Sep 14 11:38:29 2011	(r23345)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -20,6 +20,26 @@
 		add(new OriginTermPrimitive());
 		add(new OriginTextPrimitive());
 		add(new OriginEqualPrimitive());
+		
+		add(new OriginNonLayoutTokensPrimitive());
+		add(new OriginTokensPrimitive());
+
+		//origin term strategies
+		add(new OriginSublistTermPrimitive());
+		add(new OriginDesugaredTermPrimitive());
+		add(new OriginTermFuzzyPrimitive());
+		
+		//layout strategies
+		add(new OriginLayoutPrefixPrimitive());
+		add(new OriginCommentsAfterPrimitive());
+		add(new OriginCommentsBeforePrimitive());
+		add(new OriginIndentationPrimitive());
+		add(new OriginSeparationPrimitive());
+		add(new OriginDeletionOffsetPrimitive());
+		add(new OriginInsertBeforeOffsetPrimitive());
+		add(new OriginInsertAtEndOffsetPrimitive());
+		add(new OriginTextWithLayoutPrimitive());
+
     }
 
     public String getOperatorRegistryName() {

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginNonLayoutTokensPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginNonLayoutTokensPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginNonLayoutTokensPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginNonLayoutTokensPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import java.util.ArrayList;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSeparationPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparationPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparationPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSeparationPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSublistTermPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSublistTermPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSublistTermPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSublistTermPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,10 +1,11 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getImploderOrigin;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.hasImploderOrigin;
 import static org.spoofax.terms.Term.isTermList;
 import static org.spoofax.terms.attachments.OriginAttachment.tryGetOrigin;
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
+import static org.spoofax.terms.attachments.ParentAttachment.putParent;
 
 import java.util.Arrays;
 import java.util.List;
@@ -14,7 +15,10 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.parser.ast.StrategoSubList;
+import org.spoofax.jsglr.client.imploder.TermTreeFactory;
+import org.spoofax.terms.attachments.ParentAttachment;
+import org.spoofax.terms.attachments.ParentTermFactory;
+
 
 /**
  * Returns the (sub)list with origin nodes by mapping all subterms of a list one by one.
@@ -62,7 +66,9 @@
 				return false;
 		}
 		IStrategoTerm lastChildNode= getImploderOrigin(list.getSubterm(list.size()-1));
-		IStrategoTerm result = StrategoSubList.createSublist((IStrategoList) commonParentList, firstChildNode, lastChildNode, true); 
+		if(ParentAttachment.getParent(commonParentList) == null && ParentAttachment.getParent(list) != null)
+			putParent(commonParentList, ParentAttachment.get(list));		
+		IStrategoTerm result = new TermTreeFactory(env.getFactory()).createSublist((IStrategoList) commonParentList, firstChildNode, lastChildNode);
 		if (result == null) 
 			return false;
 		env.setCurrent(result);

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTermFuzzyPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTermFuzzyPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTermFuzzyPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTermFuzzyPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTextWithLayoutPrimitive.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextWithLayoutPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextWithLayoutPrimitive.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTextWithLayoutPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,4 +1,4 @@
-package org.strategoxt.imp.runtime.stratego;
+package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -0,0 +1,34 @@
+package org.spoofax.interpreter.library.jsglr.origin;
+
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
+
+import java.util.ArrayList;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+
+/**
+ * Tokens, ignoring layout
+ */
+public class OriginTokensPrimitive extends AbstractOriginPrimitive {
+	
+	public OriginTokensPrimitive() {
+		super("SSL_EXT_origin_tokens");
+	}
+
+	@Override
+	public IStrategoTerm call(IContext env, IStrategoTerm origin) {
+		ITokenizer tokenizer=getTokenizer(origin);
+		int startIndex=getLeftToken(origin).getIndex();
+		int endIndex = getRightToken(origin).getIndex();
+		ArrayList<IStrategoTerm> tokenStrings=new ArrayList<IStrategoTerm>();
+		for (int i = startIndex; i <= endIndex; i++) {
+			//if(tokenizer.getTokenAt(i).getKind() != IToken.TK_LAYOUT)
+				tokenStrings.add(env.getFactory().makeString(tokenizer.getTokenAt(i).toString()));
+		}		
+		return env.getFactory().makeList(tokenStrings);
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITreeFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITreeFactory.java	Wed Sep 14 11:38:29 2011	(r23345)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITreeFactory.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -3,6 +3,8 @@
 import java.util.List;
 
 import org.spoofax.interpreter.terms.ISimpleTerm;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.ITreeBuilder;
 
 /**
@@ -43,6 +45,8 @@
 	 */
 	TNode createList(String elementSort, IToken leftToken, IToken rightToken, List<TNode> children);
 
+	TNode createSublist(IStrategoList list, IStrategoTerm firstChild, IStrategoTerm lastChild);
+
 	TNode createTop(TNode tree, String filename, int ambiguityCount);
 
 	TNode createAmb(List<TNode> alternatives, IToken leftToken, IToken rightToken);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TermTreeFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TermTreeFactory.java	Wed Sep 14 11:38:29 2011	(r23345)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TermTreeFactory.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -13,6 +13,7 @@
 import static org.spoofax.terms.StrategoListIterator.iterable;
 import static org.spoofax.terms.Term.isTermAppl;
 import static org.spoofax.terms.Term.isTermString;
+import static org.spoofax.terms.attachments.ParentAttachment.putParent;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -28,7 +29,10 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.StrategoListIterator;
+import org.spoofax.terms.StrategoSubList;
 import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.ParentAttachment;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -132,6 +136,51 @@
 		return result;
 	}
 	
+	public IStrategoTerm createSublist(IStrategoList list, IStrategoTerm firstChild, IStrategoTerm lastChild) {
+		ArrayList<IStrategoTerm> children = new ArrayList<IStrategoTerm>();
+		boolean isStartChildFound = false;
+		int indexStart = -1;
+		int indexEnd = -1;
+
+		int i = 0;
+		for (IStrategoTerm child : StrategoListIterator.iterable(list)) {
+			if (child == firstChild) {
+				indexStart = i;
+				isStartChildFound = true;
+			}
+			if (isStartChildFound) {
+				children.add(child);
+				if (child == lastChild) {
+					indexEnd = i;
+					break;
+				}
+			}
+			i++;
+		}
+		assert(0 <= indexStart && indexStart <= indexEnd);
+		IStrategoList wrapped = factory.makeList(children);
+		StrategoSubList result = new StrategoSubList(list, wrapped, indexStart, indexEnd);
+		
+		/* XXX: support updateParents again??
+		if (cloneFirst) result = result.cloneIgnoreTokens();
+		list.overrideReferences(getLeftToken(list), getRightToken(list), children, result);
+		setParent(result, list);
+		*/
+		putParent(result, ParentAttachment.get(list));
+		
+		if(ImploderAttachment.get(firstChild) != null && ImploderAttachment.get(lastChild) != null)
+			putImploderAttachment(
+				result, 
+				true,
+				getElementSort(list), 
+				getLeftToken(firstChild), 
+				getRightToken(lastChild)
+			);
+		return result;
+	}
+
+	
+	
 	public IStrategoTerm recreateNode(IStrategoTerm oldNode, IToken leftToken, IToken rightToken, List<IStrategoTerm> children) {
 		switch (oldNode.getTermType()) {
 			case INT:

Copied and modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java (from r23334, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java	Mon Sep 12 15:13:16 2011	(r23334, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -1,20 +1,7 @@
-package org.strategoxt.imp.runtime.parser.ast;
-
-import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getElementSort;
-import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
-import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
-import static org.spoofax.jsglr.client.imploder.ImploderAttachment.putImploderAttachment;
-import static org.spoofax.terms.attachments.ParentAttachment.putParent;
-
-import java.util.ArrayList;
+package org.spoofax.terms;
 
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.jsglr.client.imploder.ImploderAttachment;
-import org.spoofax.terms.StrategoListIterator;
-import org.spoofax.terms.StrategoWrapped;
-import org.spoofax.terms.attachments.ParentAttachment;
-import org.strategoxt.imp.runtime.Environment;
 
 /**
  * An artificial partial list AST node.
@@ -29,49 +16,7 @@
 
 	private int indexEnd;
 	
-	public static StrategoSubList createSublist(IStrategoList list, IStrategoTerm firstChild, IStrategoTerm lastChild, boolean updateParents) {
-		ArrayList<IStrategoTerm> children = new ArrayList<IStrategoTerm>();
-		boolean isStartChildFound = false;
-		int indexStart = -1;
-		int indexEnd = -1;
-
-		int i = 0;
-		for (IStrategoTerm child : StrategoListIterator.iterable(list)) {
-			if (child == firstChild) {
-				indexStart = i;
-				isStartChildFound = true;
-			}
-			if (isStartChildFound) {
-				children.add(child);
-				if (child == lastChild) {
-					indexEnd = i;
-					break;
-				}
-			}
-			i++;
-		}
-		assert(0 <= indexStart && indexStart <= indexEnd);
-		IStrategoList wrapped = Environment.getTermFactory().makeList(children);
-		StrategoSubList result = new StrategoSubList(list, wrapped, indexStart, indexEnd);
-		
-		/* XXX: support updateParents again??
-		if (cloneFirst) result = result.cloneIgnoreTokens();
-		list.overrideReferences(getLeftToken(list), getRightToken(list), children, result);
-		setParent(result, list);
-		*/
-		putParent(result, ParentAttachment.get(list));
-		if(ImploderAttachment.get(firstChild) != null && ImploderAttachment.get(lastChild) != null)
-			putImploderAttachment(
-				result, 
-				true, 
-				getElementSort(list), 
-				getLeftToken(firstChild), 
-				getRightToken(lastChild)
-			);
-		return result;
-	}
-
-	private StrategoSubList(IStrategoList completeList, IStrategoList wrapped, int indexStart, int indexEnd) {
+	public StrategoSubList(IStrategoList completeList, IStrategoList wrapped, int indexStart, int indexEnd) {
 		super(wrapped);
 		this.completeList = completeList;
 		this.indexStart = indexStart;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java	Wed Sep 14 11:38:29 2011	(r23345)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java	Wed Sep 14 13:16:35 2011	(r23346)
@@ -17,6 +17,7 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.terms.AbstractTermFactory;
 import org.spoofax.terms.StrategoListIterator;
+import org.spoofax.terms.StrategoSubList;
 
 /** 
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -97,6 +98,7 @@
 	@Override
 	public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail, IStrategoList annos) {
 		IStrategoList result = baseFactory.makeListCons(head, tail, annos);
+		assert(!(result instanceof StrategoSubList));
 		putParent(head, null, result);
 		putParent(tail, null, result);
 		return result;

From m.dejonge at tudelft.nl  Wed Sep 14 15:16:39 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 14 Sep 2011 13:16:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23347 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	parser/ast services stratego
Message-ID: <20110914131639.1DE1C2B8063@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Sep 14 13:16:38 2011
New Revision: 23347
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23347&sc=1

Log:
moved: origin layout strategies + StrategoSubList

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LayoutStructure.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentsAfterPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentsBeforePrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDeletionOffsetPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginInsertAtEndOffsetPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginInsertBeforeOffsetPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginLayoutPrefixPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginNonLayoutTokensPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparationPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSublistTermPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTermFuzzyPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextWithLayoutPrimitive.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Wed Sep 14 13:16:35 2011	(r23346)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Wed Sep 14 13:16:38 2011	(r23347)
@@ -18,10 +18,11 @@
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.TermTreeFactory;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.parser.ast.StrategoSubList;
+import org.spoofax.terms.StrategoSubList;
 import org.strategoxt.imp.runtime.stratego.SourceAttachment;
 import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
 import org.strategoxt.lang.Context;
@@ -105,7 +106,7 @@
 		IStrategoTerm lastChild = getResultingTerm(resultingAst, node.getLastChild());
 		if(firstChild == null || lastChild == null)
 			return null;
-		return StrategoSubList.createSublist(targetTerm, firstChild, lastChild, false);
+		return new TermTreeFactory(Environment.getTermFactory()).createSublist(targetTerm, firstChild, lastChild); 
 	}
 
 	private IStrategoTerm getResultingTerm(IStrategoTerm resultingAst, IStrategoTerm originTerm) {
@@ -272,8 +273,7 @@
 		// Usecase: extract refactoring is defined on a (sub)list (refactoring
 		// X+: ...) and should be applicable when only one X is selected
 		if (!isMatch && !ancestor.isList() && getParent(ancestor) != null && getParent(ancestor).isList()) {
-			selectionNode = StrategoSubList.createSublist((IStrategoList) getParent(ancestor),
-					ancestor, ancestor, true);
+			selectionNode = new TermTreeFactory(Environment.getTermFactory()).createSublist((IStrategoList) getParent(ancestor), ancestor, ancestor); 
 			isMatch = isMatchOnConstructorOrSort(mappings, selectionNode);
 		}
 		//some tolerance for example when method name is selected instead of method

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Wed Sep 14 13:16:35 2011	(r23346)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Wed Sep 14 13:16:38 2011	(r23347)
@@ -27,25 +27,9 @@
 		add(new LanguageDescriptionPrimitive());
 		add(new OverrideInputPrimitive());
 
-		add(new InSelectedFragmentPrimitive());
-		add(new OriginNonLayoutTokensPrimitive());
-
-		//origin term strategies
-		add(new OriginSublistTermPrimitive());
-		add(new OriginDesugaredTermPrimitive());
-		add(new OriginTermFuzzyPrimitive());
-		
-		//layout strategies
 		add(new OriginSurroundingCommentsPrimitive());
-		add(new OriginLayoutPrefixPrimitive());
-		add(new OriginCommentsAfterPrimitive());
-		add(new OriginCommentsBeforePrimitive());
-		add(new OriginIndentationPrimitive());
-		add(new OriginSeparationPrimitive());
-		add(new OriginDeletionOffsetPrimitive());
-		add(new OriginInsertBeforeOffsetPrimitive());
-		add(new OriginInsertAtEndOffsetPrimitive());
-		add(new OriginTextWithLayoutPrimitive());
+
+		add(new InSelectedFragmentPrimitive());
 
 		add(new OriginLanguagePrimitive());
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Wed Sep 14 13:16:35 2011	(r23346)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Wed Sep 14 13:16:38 2011	(r23347)
@@ -14,6 +14,7 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.TermTreeFactory;
 import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.TermVisitor;
 import org.spoofax.terms.attachments.ParentAttachment;
@@ -21,7 +22,7 @@
 import org.strategoxt.imp.generator.position_of_term_1_0;
 import org.strategoxt.imp.generator.term_at_position_0_1;
 import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.parser.ast.StrategoSubList;
+import org.spoofax.terms.StrategoSubList;
 import org.strategoxt.imp.runtime.services.ContentProposer;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
@@ -205,7 +206,7 @@
 			if (i == 0)
 				return commonAncestor;
 			IStrategoTerm child1 = ancestors1List.get(i - 1);
-			return StrategoSubList.createSublist((IStrategoList) commonAncestor, child1, child2, true); 
+			return new TermTreeFactory(Environment.getTermFactory()).createSublist((IStrategoList) commonAncestor, child1, child2); 
 		} else {
 			return commonAncestor;
 		}

From M.A.Akhter at student.tudelft.nl  Wed Sep 14 15:46:32 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 14 Sep 2011 13:46:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23348 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	jdbm/test org/spoofax/interpreter/library/language/spxlang
	org/spoofax/interpreter/library/l...
Message-ID: <20110914134632.6F4BF2B807E@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Sep 14 13:46:32 2011
New Revision: 23348
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23348&sc=1

Log:
+ unit tests
+ implementation of symbol table cleanup

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HelloWorld.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/Persons2.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HelloWorld.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HelloWorld.java	Wed Sep 14 13:16:38 2011	(r23347)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/HelloWorld.java	Wed Sep 14 13:46:32 2011	(r23348)
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.Map;
 
@@ -116,6 +117,8 @@
 		HashMap<String, VersionInfo> info = new  HashMap<String, VersionInfo>();
 		
 		info.put("test", new VersionInfo());
+		info.put("test2", new VersionInfo());
+		info.put("test3", new VersionInfo());
 		
 		info.get("test").Increment();
 		
@@ -126,19 +129,25 @@
 		
 		out.println(info.get("test").toString() );
 		
-		
-		
 		info.put("test", new VersionInfo());
 		
 		info.get("test").Increment();
 		
 		out.println(info.get("test").toString() );
 		
+		for (Object s : info.keySet().toArray())
+		{
+			out.println("Removing : " + s);
+			info.remove(s);
+		}	
+		
+		out.println( "Current Size : " + info.keySet().size());
 	}
 	
+	
 	public static void main(String[] args) throws Exception {
 
-		TestPrimaryMap();
+		TestHashMap();
 		
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/Persons2.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/Persons2.java	Wed Sep 14 13:16:38 2011	(r23347)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/Persons2.java	Wed Sep 14 13:46:32 2011	(r23348)
@@ -218,7 +218,8 @@
 		dao.insertPerson(jack);
 		dao.insertPerson(patrick);
 		dao.insertPerson(paul);
-				
+		
+		
 		System.out.println("Number of persons: "+dao.persons.size());
 		
 		System.out.println("Persons with name Patrick Moore: "+dao.personByName("Patrick Moore"));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Wed Sep 14 13:16:38 2011	(r23347)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Wed Sep 14 13:46:32 2011	(r23348)
@@ -29,4 +29,6 @@
 	public void commit() throws IOException;
 	
 	public boolean IsClosed();
+	
+	public void clearAll();
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Wed Sep 14 13:16:38 2011	(r23347)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Wed Sep 14 13:46:32 2011	(r23348)
@@ -3,7 +3,9 @@
 import java.io.IOException;
 import java.net.URI;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import static org.spoofax.interpreter.library.language.spxlang.SpxCompilationUnitInfo.toAbsulatePath;
@@ -189,4 +191,11 @@
 		
 	}
 	
+	public void clear() {
+		Iterator<String> keyIter = _infoMap.keySet().iterator();
+		while (keyIter.hasNext())
+			_infoMap.remove(keyIter.next());
+
+	}
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Wed Sep 14 13:16:38 2011	(r23347)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Wed Sep 14 13:46:32 2011	(r23348)
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.net.URI;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 
 import jdbm.InverseHashView;
@@ -147,14 +148,14 @@
 			.addAnalyzedModuleDefinition(decl.getId(), analyzedModuleDefinition);
 	}
 	
-	public SpxModuleLookupTable addModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
+	private SpxModuleLookupTable addModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
 	{
 		_moduleDefinition.put(id, moduleDefinition);
 		
 		return this;
 	}
 	
-	public SpxModuleLookupTable addAnalyzedModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
+	private SpxModuleLookupTable addAnalyzedModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
 	{
 		_moduleAnalyzedDefinition.put(id, moduleDefinition);
 		
@@ -275,13 +276,15 @@
 	
 	
 	/**
-	 * Clears the symbol table
+	 * Clears ModuleLookup Table
 	 */
 	public synchronized void clear()
 	{
-		this._moduleLookupMap.clear();
-		this._moduleDefinition.clear();
-		this._moduleAnalyzedDefinition.clear();
+		Iterator<IStrategoList> keyIter = _moduleLookupMap.keySet().iterator();
+		
+		while (keyIter.hasNext())
+			_moduleLookupMap.remove(keyIter.next());
+		
 	}
 	
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Wed Sep 14 13:16:38 2011	(r23347)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Wed Sep 14 13:46:32 2011	(r23348)
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.Set;
 
 import jdbm.PrimaryHashMap;
@@ -106,13 +107,15 @@
 								_languageDescriptors.remove(key);
 							}
 					}
+
 					public void recordRemoved(IStrategoList key,
 							PackageDeclaration value) throws IOException {
-						
-						//removing language descriptors 
+
+						// removing language descriptors
 						_languageDescriptors.remove(key);
-						
-					}}
+
+					}
+				}
 		);
 	
 	}
@@ -253,9 +256,11 @@
 	/**
 	 * Clears Symbol table  
 	 */
-	public synchronized void clear() { 
-		_packageLookupTable.clear();
-		_languageDescriptors.clear();
+	public synchronized void clear() {
+		Iterator<IStrategoList> keyIter = _packageLookupTable.keySet().iterator();
+		
+		while (keyIter.hasNext())
+			_packageLookupTable.remove(keyIter.next());
 	} 
 
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Wed Sep 14 13:16:38 2011	(r23347)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Wed Sep 14 13:46:32 2011	(r23348)
@@ -74,9 +74,14 @@
 	{
 		// chain record listeners among the tables. 
 		// If compilation unit is removed, automatically remove packages.
-		// If package is removed , automatically remove the modules that is located.
+		// If package is removed , automatically remove the modules that is located 
+		// in that particular compilation units 
+		
 		_spxUnitsTable.addRecordListener((ICompilationUnitRecordListener)_spxPackageTable);
 		_spxUnitsTable.addRecordListener((ICompilationUnitRecordListener)_spxModuleTable);
+		
+		//TODO : also chain package removed event so that whenever a package is removed from
+		//symbol table, remove enclosing module declaration. 
 	}
 	
 	
@@ -151,4 +156,11 @@
 	public SpxModuleLookupTable spxModuleTable() {
 		return _spxModuleTable;
 	}	
+
+	public void clearAll(){
+		this._spxUnitsTable.clear();	
+		
+		this._spxPackageTable.clear();
+		this._spxModuleTable.clear();
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 13:16:38 2011	(r23347)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 13:46:32 2011	(r23348)
@@ -494,6 +494,12 @@
 			_persistenceManager.commitAndClose();
 	}
 	
+	
+	public void clearSymbolTable() 
+	{
+		if (! isPersistenceManagerClosed())
+			_persistenceManager.clearAll();
+	}
 	/**
 	 * Checks whether the underlying persistence manager is already open. 
 	 * 
@@ -502,14 +508,6 @@
 	boolean isPersistenceManagerClosed() { 
 		return _persistenceManager.IsClosed();
 	}
-
-	/**
-	 * @return the ModuleDefinition Constructor
-	 */
-	IStrategoConstructor getModuleDefCon() {
-		return _moduleDefCon;
-	}
-
 	/**
 	 * @return the PackageDeclaration Constructor
 	 */
@@ -517,11 +515,18 @@
 		return _packageDeclCon;
 	}
 	
-	IStrategoConstructor getModuleDeclCon() {
+	public IStrategoConstructor getModuleDeclCon() {
 		return _moduleDeclCon;
 	}
 
-	IStrategoConstructor getLanguageDescriptorCon() {
+	/**
+	 * @return the ModuleDefinition Constructor
+	 */
+	public IStrategoConstructor getModuleDefCon() {
+		return _moduleDefCon;
+	}
+
+	public IStrategoConstructor getLanguageDescriptorCon() {
 		return _languageDescriptorCon;
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 13:16:38 2011	(r23347)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 13:46:32 2011	(r23348)
@@ -42,12 +42,13 @@
 		
 		projectNameTerm = termFactory().makeString(_projectName);
 		
-		
+	
 		_facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
-		
+		_facade.clearSymbolTable();
 	}
 	
-	@Override protected void tearDown() throws Exception {
+	@Override 
+	protected void tearDown() throws Exception {
 		_facade.close();
 	}
 	
@@ -112,4 +113,26 @@
 		
 		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
 	}
+	
+	
+	public void testIndexModuleDeclaration() 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		_facade.indexModuleDefinition(mQnameAppl, f.makeString(absPathString1), pQnameAppl, ast, analyzed_ast);
+		
+		
+		IStrategoAppl moduleDeclaration = (IStrategoAppl)_facade.getModuleDeclaration( mQnameAppl );
+		
+		_facade.assertConstructor(moduleDeclaration.getConstructor(), _facade.getModuleDeclCon(), "Wrong Module Declaration Constructs");
+	}
+	
 }

From M.A.Akhter at student.tudelft.nl  Wed Sep 14 20:43:57 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 14 Sep 2011 18:43:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23349 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	spxlang tests
Message-ID: <20110914184357.C0D95CC148@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Sep 14 18:43:57 2011
New Revision: 23349
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23349&sc=1

Log:
+ implementation getModuleDeclarations by packageId
+ more refactoring  + logging
+ unit tests

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Wed Sep 14 13:46:32 2011	(r23348)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Wed Sep 14 18:43:57 2011	(r23349)
@@ -225,24 +225,36 @@
 	 * @param absUri
 	 * @return
 	 */
-	public Iterable<ModuleDeclaration> moduleDeclarationsByUri( String absUri)
+	public Iterable<ModuleDeclaration> getModuleDeclarationsByUri( String absUri)
 	{
 		List<ModuleDeclaration> ret = new ArrayList<ModuleDeclaration>();
-	
-		for ( IStrategoList l: _moduleByFileAbsPath.get(absUri))
-			ret.add(_moduleByFileAbsPath.getPrimaryValue(l));
+		
+		Iterable<IStrategoList> foundModuleDecls = _moduleByFileAbsPath.get(absUri);
+		
+		if(foundModuleDecls  != null)
+		{
+			for ( IStrategoList l: foundModuleDecls)
+				ret.add(_moduleByFileAbsPath.getPrimaryValue(l));
+		}
+		
 		return ret;
 	}
 	
-	public Iterable<ModuleDeclaration> moduleDeclarationsByPackageId(IStrategoList packageID)
+	public Iterable<ModuleDeclaration> getModuleDeclarationsByPackageId(IStrategoList packageID)
 	{
 		List<ModuleDeclaration> ret = new ArrayList<ModuleDeclaration>();
-	
-		for ( IStrategoList l: _moduleByPackageId.get(packageID))
-			ret.add(_moduleByPackageId.getPrimaryValue(l));
+		
+		Iterable<IStrategoList> foundModuleDecls = _moduleByPackageId.get(packageID);
+		
+		if(foundModuleDecls  != null)
+		{
+			for ( IStrategoList l: foundModuleDecls)
+				ret.add(_moduleByPackageId.getPrimaryValue(l));
+		}
 		return ret;
 	}
 	
+	
 	public IStrategoList packageId(IStrategoList moduleId)
 	{
 		if( containsModuleDeclaration(moduleId))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 13:46:32 2011	(r23348)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 18:43:57 2011	(r23349)
@@ -344,6 +344,30 @@
 		return decl.toTerm(this);
 	}
 	
+
+	public IStrategoList getModuleDeclarations(IStrategoAppl packageQName) {
+
+		logMessage("getModuleDeclarations | Arguments : " + packageQName);
+		
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		
+		IStrategoList packageID = PackageDeclaration.getPackageId(getTermFactory(), packageQName);
+		
+		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByPackageId(packageID);
+		
+		logMessage("getModuleDeclarations | Found following result from SymbolTable : " + decls);
+		
+		IStrategoList result = _termFactory.makeList();
+		
+		for ( ModuleDeclaration decl: decls)
+			result = _termFactory.makeListCons(decl.toTerm(this), result);
+		
+		logMessage("getModuleDeclarations | After converting it to IStrategoList : " + result );
+		
+		return result;
+	}	
+
+	
 	/** 
 	 * Returns ModuleDefinition for the Module with ID :  {@code moduleTypedQName}
 	 * 
@@ -468,11 +492,6 @@
 				ast, analyzedAst);
 	}
 
-	public IStrategoList getModuleDeclarations(IStrategoAppl packageQNameTerm) {
-
-		return null;
-	}
-
 	
 	/**
 	 * Saves(Commits) any unsaved data. 
@@ -500,6 +519,7 @@
 		if (! isPersistenceManagerClosed())
 			_persistenceManager.clearAll();
 	}
+
 	/**
 	 * Checks whether the underlying persistence manager is already open. 
 	 * 
@@ -583,7 +603,7 @@
 	 */
 	private void logMessage(String message) {
 		
-		final String src = "["+ _projectName+ ": IndexFacade] ";
+		final String src = "["+ _projectName+ ".SpxSemanticIndexFacade]  ";
 		if(DEBUG)
 		{		
 			try {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Wed Sep 14 13:46:32 2011	(r23348)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Wed Sep 14 18:43:57 2011	(r23349)
@@ -436,7 +436,7 @@
 		
 		
 		ArrayList<ModuleDeclaration> modulesByPackageID 
-			= (ArrayList<ModuleDeclaration>)lookupTable.moduleDeclarationsByPackageId(pId);
+			= (ArrayList<ModuleDeclaration>)lookupTable.getModuleDeclarationsByPackageId(pId);
 		
 		assertEquals(2, modulesByPackageID.size());
 	}
@@ -484,7 +484,7 @@
 		manager.commit();
 		
 		ArrayList<ModuleDeclaration> modulesByFileUri 
-			= (ArrayList<ModuleDeclaration>)lookupTable.moduleDeclarationsByUri(absPathString1);
+			= (ArrayList<ModuleDeclaration>)lookupTable.getModuleDeclarationsByUri(absPathString1);
 		
 		assertEquals(1, modulesByFileUri.size());
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 13:46:32 2011	(r23348)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 18:43:57 2011	(r23349)
@@ -135,4 +135,76 @@
 		_facade.assertConstructor(moduleDeclaration.getConstructor(), _facade.getModuleDeclCon(), "Wrong Module Declaration Constructs");
 	}
 	
+	private void indexTestModuleDefs( String moduleName , String packageQName , String filePath)
+	{
+		String moduleQName = packageQName  + ", \""+ moduleName  +"\"" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageQName+"]))");
+		
+		IStrategoAppl mQnameAppl = (IStrategoAppl)termFactory().parseFromString("Module(QName(["+moduleQName+ "]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(termFactory(), moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(termFactory(), moduleName);
+		
+		_facade.indexModuleDefinition(mQnameAppl, termFactory().makeString(absPathString1), pQnameAppl, ast, analyzed_ast);
+	}
+	
+	private IStrategoAppl indexTestPackageDecl(String packageName , String fileName) {
+		
+		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageName+"]))");
+		_facade.indexPackageDeclaration(pQnameAppl, termFactory().makeString(absPathString1));
+		return pQnameAppl;
+	}
+	
+	public void testGetModuleDeclarationsByPackageId()
+	{
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+		
+		IStrategoAppl pQnameAppl = indexTestPackageDecl(packageName1, absPathString1);
+		indexTestModuleDefs ( "m1" , packageName1 , absPathString1);
+		indexTestModuleDefs ( "m2" , packageName1 , absPathString1);
+		
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		IStrategoAppl pQnameAppl2 = indexTestPackageDecl(packageName2, absPathString1);
+		indexTestModuleDefs ( "m2" , packageName2 , absPathString1);
+		
+		IStrategoList actuals = null;
+		
+		//following invocation should return 2 ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( pQnameAppl );
+		
+		assertEquals(2, actuals.getSubtermCount());
+		
+		//following invocation should return 1 ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( pQnameAppl2 );
+		
+		assertEquals(1, actuals.getSubtermCount());
+	}
+
+	public void testGetModuleDeclarationsWithUnknownPackageID()
+	{
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+		
+		indexTestPackageDecl(packageName1, absPathString1);
+		indexTestModuleDefs ( "m1" , packageName1 , absPathString1);
+		indexTestModuleDefs ( "m2" , packageName1 , absPathString1);
+		
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName2, absPathString1);
+		indexTestModuleDefs ( "m2" , packageName2 , absPathString1);
+		
+		
+		String unknown =  	"\"languages\", \"unknown\"" ;
+		IStrategoAppl pUnknownQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+unknown+"]))");
+		IStrategoList actuals = null;
+		
+		//following invocation should return 2 ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( pUnknownQnameAppl );
+		
+		assertEquals(0, actuals.getSubtermCount());
+		
+	}
+	
+	
+	
+	
+	
 }

From tobivollebregt at gmail.com  Wed Sep 14 23:06:49 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 14 Sep 2011 21:06:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23350 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <20110914210649.99E027F800A@mx1.tudelft.nl>

Author: tvo
Date: Wed Sep 14 21:06:49 2011
New Revision: 23350
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23350&sc=1

Log:
Update ParentAttachment of root AST node in CustomDisambiguator

Fixes Spoofax/425

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CustomDisambiguator.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CustomDisambiguator.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CustomDisambiguator.java	Wed Sep 14 18:43:57 2011	(r23349)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CustomDisambiguator.java	Wed Sep 14 21:06:49 2011	(r23350)
@@ -29,36 +29,36 @@
 
 /**
  * A class that uses the language runtime to disambiguate an AST.
- * 
+ *
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class CustomDisambiguator {
 
 	private final SGLRParseController controller;
-	
+
 	private final String[] functions;
-	
+
 	private WeakReference<StrategoObserver> runtime;
-	
+
 	public CustomDisambiguator(SGLRParseController controller, String[] functions) {
 		this.controller = controller;
 		this.functions = functions;
 	}
-	
+
 	public IStrategoTerm disambiguate(IStrategoTerm ast) {
 		if (functions.length == 0)
 			return ast;
-		
+
 		if (Environment.isMainThread()) {
-			// Shouldn't acquire environment lock from main thread 
+			// Shouldn't acquire environment lock from main thread
 			controller.scheduleParserUpdate(SGLRParseController.REPARSE_DELAY, false);
 			throw new OperationCanceledException("Cannot parse and disambiguate from main thread");
 		}
-		
+
 		StrategoObserver myRuntime = getRuntime();
 		if (myRuntime == null)
 			return ast;
-		
+
 		myRuntime.getLock().lock();
 		try {
 			IResource resource = getResource(ast);
@@ -75,21 +75,22 @@
 		} finally {
 			myRuntime.getLock().unlock();
 		}
-		
+
 		return ast;
 	}
-	
+
 	private static IStrategoTerm transferAttachments(final IStrategoTerm oldTerm, IStrategoTerm newTerm) {
 		reinitTokens(newTerm, getLeftToken(oldTerm), getRightToken(oldTerm));
 		getTokenizer(oldTerm).setAst(newTerm);
 		getTokenizer(oldTerm).initAstNodeBinding();
-		SourceAttachment.putSource(newTerm, getResource(oldTerm), getParseController(oldTerm));
+		ParentAttachment.putParent(newTerm, null, null);
 		reinitParents(newTerm);
+		SourceAttachment.putSource(newTerm, getResource(oldTerm), getParseController(oldTerm));
 		return newTerm;
 	}
-	
+
 	private static void reinitParents(IStrategoTerm parent) {
-		Iterator<IStrategoTerm> iterator = tryGetListIterator(parent); 
+		Iterator<IStrategoTerm> iterator = tryGetListIterator(parent);
 		for (int i = 0, max = parent.getSubtermCount(); i < max; i++) {
 			IStrategoTerm child = iterator == null ? parent.getSubterm(i) : iterator.next();
 			ParentAttachment.putParent(child, parent, null);
@@ -99,7 +100,7 @@
 
 	/**
 	 * Assign tokens to this term and all subterms, using the origin tokens or the given tokens.
-	 * 
+	 *
 	 * @param left  The left token to use if no token can be identified for this term.
 	 * @param right The right token to use if no token can be identified for this term.
 	 */
@@ -118,9 +119,9 @@
 			}
 		}
 		term.removeAttachment(OriginAttachment.TYPE);
-		
+
 		// Recurse
-		Iterator<IStrategoTerm> iterator = tryGetListIterator(term); 
+		Iterator<IStrategoTerm> iterator = tryGetListIterator(term);
 		for (int i = 0, max = term.getSubtermCount(); i < max; i++) {
 			IStrategoTerm child = iterator == null ? term.getSubterm(i) : iterator.next();
 			reinitTokens(child, left, right);

From M.A.Akhter at student.tudelft.nl  Thu Sep 15 00:21:06 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 14 Sep 2011 22:21:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23351 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	spxlang tests
Message-ID: <20110914222106.73B972B800F@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Sep 14 22:21:06 2011
New Revision: 23351
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23351&sc=1

Log:
+unit tests 
+logging

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Wed Sep 14 21:06:49 2011	(r23350)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Wed Sep 14 22:21:06 2011	(r23351)
@@ -30,5 +30,7 @@
 	
 	public boolean IsClosed();
 	
-	public void clearAll();
+	public void clearAll() throws IOException;
+	
+	public void logMessage(String origin, String message);
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Sep 14 21:06:49 2011	(r23350)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Sep 14 22:21:06 2011	(r23351)
@@ -121,5 +121,25 @@
 		
 		return this.forceImploderAttachment(retTerm);
 	}
+	
+	/**
+	 * Constructs {@link IStrategoList} from {@code decls}  
+	 * 
+	 * @param idxFacade an instance of {@link SpxSemanticIndexFacade }
+	 * @param decls A collection of ModuleDeclataions 
+	 * @return {@link IStrategoList}
+	 */
+	public static IStrategoList toTerm( SpxSemanticIndexFacade idxFacade , Iterable<ModuleDeclaration> decls)
+	{
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		IStrategoList result = termFactory.makeList();
+		
+		if(decls!=null)
+		{	
+			for ( ModuleDeclaration decl: decls)
+				result = termFactory.makeListCons(decl.toTerm(idxFacade), result);
+		}
+		return result;
+	}
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Wed Sep 14 21:06:49 2011	(r23350)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Wed Sep 14 22:21:06 2011	(r23351)
@@ -161,7 +161,12 @@
 	{
 		String key = toAbsulatePath(absPath);
 		
-		SpxCompilationUnitInfo removedValue = _infoMap.remove(key);
+		remove(key);
+	}
+	
+	void remove(String absPathString) throws IOException
+	{
+		SpxCompilationUnitInfo removedValue = _infoMap.remove(absPathString);
 		
 		if ( removedValue != null)
 			_spxUnitStoreMap.remove(removedValue.getRecId());
@@ -170,7 +175,7 @@
 		{	
 			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners)
 			{
-				r.recordRemoved(toAbsulatePath(absPath),removedValue);
+				r.recordRemoved(absPathString,removedValue);
 			}
 		}
 	}
@@ -191,11 +196,10 @@
 		
 	}
 	
-	public void clear() {
+	public void clear() throws IOException{
 		Iterator<String> keyIter = _infoMap.keySet().iterator();
 		while (keyIter.hasNext())
-			_infoMap.remove(keyIter.next());
-
+			remove(keyIter.next());
 	}
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Wed Sep 14 21:06:49 2011	(r23350)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Wed Sep 14 22:21:06 2011	(r23351)
@@ -29,7 +29,11 @@
 	
 	private final SecondaryHashMap <String , IStrategoList , ModuleDeclaration> _moduleByFileAbsPath;
 	private final SecondaryHashMap<IStrategoList, IStrategoList,ModuleDeclaration> _moduleByPackageId;
-
+	
+	private final ISpxPersistenceManager _manager;
+	
+	private final String SRC  = this.getClass().getSimpleName();
+	
 	/**
 	 * Instantiates a lookup table for the base constructs (e.g. , packages and modules)of  Spoofaxlang.
 	 *  
@@ -41,6 +45,8 @@
 		assert tableName != null;
 		assert manager != null;
 		
+		_manager = manager;
+		
 		_moduleLookupMap = manager.loadHashMap(tableName+ "._lookupModuleMap.idx");
 		
 		// read-only secondary view of the the lookup table . 
@@ -170,6 +176,7 @@
 	 */
 	public ModuleDeclaration remove(IStrategoList id)
 	{	
+		_manager.logMessage(SRC+".remove", "Removing following Module : "+ id);
 		//removing module declaration from the table 
 		//and returning it.
 		return _moduleLookupMap.remove(id);
@@ -292,11 +299,12 @@
 	 */
 	public synchronized void clear()
 	{
+		_manager.logMessage(SRC + ".clear", "Removing "+ this.size()+" entries ");
+		
 		Iterator<IStrategoList> keyIter = _moduleLookupMap.keySet().iterator();
 		
 		while (keyIter.hasNext())
-			_moduleLookupMap.remove(keyIter.next());
-		
+			remove(keyIter.next());
 	}
 	
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Wed Sep 14 21:06:49 2011	(r23350)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Wed Sep 14 22:21:06 2011	(r23351)
@@ -30,6 +30,8 @@
 	private final PrimaryHashMap<IStrategoList, LanguageDescriptor> _languageDescriptors;
 	private final SecondaryHashMap <String , IStrategoList , LanguageDescriptor> _packagesByLangaugeName;
 	
+	private final String SRC  = this.getClass().getSimpleName();
+	private final ISpxPersistenceManager _manager;
 	/**
 	 * Instantiates a lookup table for the base constructs (e.g. , packages and modules)of  Spoofaxlang.
 	 *  
@@ -41,6 +43,7 @@
 		assert tableName != null;
 		assert manager != null;
 		
+		_manager = manager;
 		_packageLookupTable = manager.loadHashMap(tableName+ "._lookupPackageMap.idx");
 		
 		// readonly secondary view of the the lookup table . 
@@ -218,6 +221,8 @@
 	 */
 	public PackageDeclaration remove(IStrategoList id)
 	{
+		_manager.logMessage(SRC+".remove", "Removing Package " + id + " from symbol table.");
+		
 		return _packageLookupTable.remove(id);
 	}
 	/**
@@ -250,17 +255,19 @@
 		
 		// removing the package declaration from the lookup table.
 		for(Object o : list.toArray())
-			_packageLookupTable.remove(o);
+			remove((IStrategoList)o);
 	}
 	
 	/**
 	 * Clears Symbol table  
 	 */
 	public synchronized void clear() {
+		
+		_manager.logMessage(SRC+".clear", "Removing " + this.size() + " entries from symbol table.");
 		Iterator<IStrategoList> keyIter = _packageLookupTable.keySet().iterator();
 		
 		while (keyIter.hasNext())
-			_packageLookupTable.remove(keyIter.next());
+			remove(keyIter.next());
 	} 
 
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Wed Sep 14 21:06:49 2011	(r23350)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Wed Sep 14 22:21:06 2011	(r23351)
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.util.Properties;
 
+import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 import jdbm.PrimaryHashMap;
@@ -23,35 +24,57 @@
  */
 public class SpxPersistenceManager implements ISpxPersistenceManager {
 
-	//TODO : create a registry that keeps all the loaded SymbolTable
-	//and perform operation on that.  
+	private static final boolean DEBUG = true;
+	private static final String SRC =   "SpxPersistenceManager" ;
+	
+	
 	private final RecordManager _recordManager;
-	private final String indexDirectory;  
+	private final String _indexDirectory;  
+	private final IOAgent _agent;
+	private final String _projectName ;
 	
 	private SpxCompilationUnitTable _spxUnitsTable;  
 	private SpxPackageLookupTable _spxPackageTable;
 	private SpxModuleLookupTable _spxModuleTable;
 
-	public SpxPersistenceManager(String projectName, String projectAbsPath) throws IOException{
-		this(projectName, projectAbsPath+ "/.Index" , null);
+	/**
+	 * Instantiates a new instance of SpxPersistenceManager. Main Responsibility of this class  
+	 * is to store symbol table in disk and manage it . 
+	 * 
+	 * @param projectName
+	 * @param projectAbsPath
+	 * @param ioAgent
+	 * @throws IOException
+	 */
+	public SpxPersistenceManager(String projectName, String projectAbsPath , IOAgent ioAgent) throws IOException{
+		this(projectName, projectAbsPath+ "/.Index" ,ioAgent, null );
 	}
 	
-	public SpxPersistenceManager (String projectName ,String indexDirectory, Properties options) throws IOException
+	
+	/**
+	 * @param projectName
+	 * @param indexDirectory
+	 * @param ioAgent
+	 * @param options
+	 * @throws IOException
+	 */
+	SpxPersistenceManager (String projectName ,String indexDirectory,  IOAgent ioAgent,Properties options) throws IOException
 	{
-		this.indexDirectory = indexDirectory;
+		this._agent = ioAgent;
+		this._projectName = projectName;
+		this._indexDirectory = indexDirectory;
 		
-		// Creating empty properties collection if it is null
 		if( options  == null)
-			options = new Properties();
+			options = new Properties();// Creating empty properties collection if it is null
 		
-		// setting up the working directory for the Index 
 		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, indexDirectory + "/" + projectName + ".idx");
-	
-		//creating record manager for the particular project
+		
 		_recordManager = RecordManagerFactory.createRecordManager(projectName , options);
 		
 		initTables(projectName);
 		initListeners();
+		
+		logMessage(SRC+".ctor" , "Instantiation of PersistenceManager is done. Index Directory : "+ _indexDirectory );
 	}
 
 	/**
@@ -84,7 +107,6 @@
 		//symbol table, remove enclosing module declaration. 
 	}
 	
-	
 	/**
 	 * Instantiates a new HashMap 
 	 * 
@@ -98,6 +120,7 @@
 		return _recordManager.hashMap(mapName) ;
 		
 	}
+	
 	/**
 	 * Instantiates a new StoreHashMap
 	 * 
@@ -157,10 +180,40 @@
 		return _spxModuleTable;
 	}	
 
-	public void clearAll(){
-		this._spxUnitsTable.clear();	
+	public void clearAll() throws IOException{
+		try
+		{
+			this._spxUnitsTable.clear();	
+			this._spxPackageTable.clear();
+			this._spxModuleTable.clear();
+			
+			logMessage(SRC + ".clearAll", "SymbolTable is cleaned successfully. ");
+		}catch(IOException ex)
+		{
+			logMessage(SRC + ".clearAll", "Exception occured . "+ ex);
+			throw ex;
+		}
+		
 		
-		this._spxPackageTable.clear();
-		this._spxModuleTable.clear();
 	}
+
+
+	/* Logs Message 
+	 * 
+	 * @see org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager#logMessage(java.lang.String, java.lang.String)
+	 */
+	public void logMessage(String origin, String message) {
+		if(DEBUG)
+		{		
+			try {
+				_agent.getWriter(IOAgent.CONST_STDOUT).write(
+						"[" + this._projectName + "." + origin + "]   " + message
+								+ "\n");
+			} 
+			catch (IOException e) {
+				
+			}
+		}
+	}
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 21:06:49 2011	(r23350)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 22:21:06 2011	(r23351)
@@ -25,8 +25,6 @@
 	private final IOAgent _agent;
 	private final SpxSemanticIndexEntryFactory _entryFactory;
 	private final TermAttachmentStripper _stripper;
-	public static final boolean DEBUG = true;
-	
 	
 	private final IStrategoConstructor _moduleDefCon;
 	private final IStrategoConstructor _moduleDeclCon;
@@ -56,7 +54,7 @@
 		_packageDeclCon 		= _termFactory.makeConstructor("PackageDecl", 2);
 		_languageDescriptorCon  = _termFactory.makeConstructor("PackageDeclaration", 5);
 		
-		_persistenceManager = new SpxPersistenceManager(_projectName , _agent.getWorkingDir());
+		_persistenceManager = new SpxPersistenceManager(_projectName , _agent.getWorkingDir(),agent);
 	}
 
 	/**
@@ -95,23 +93,7 @@
 		return _persistenceManager;
 	}
 
-	/**
-	 * Returns URI 
-	 * @param path
-	 * @return
-	 */
-	URI toFileURI(String path)
-	{
-		File file = new File(path);
-		return	file.isAbsolute()? file.toURI()
-			  			 : new File(_agent.getWorkingDir(), path).toURI();
-	}
-
-	URI toFileURI(IStrategoTerm filePath) 
-	{
-		return toFileURI(Tools.asJavaString(filePath));
-	}
-
+	
 	String fromFileURI(URI uri) {
 		File file = new File(uri);
 		return file.toString();
@@ -252,11 +234,11 @@
 		if(table.containsPackage(packageId))
 			table.addPackageDeclarationLocation(
 					packageId, 
-					asJavaString(spxCompilationUnitPath));
+					toAbsulatePath(spxCompilationUnitPath));
 		else
 		{	
 			PackageDeclaration pDecl = new PackageDeclaration(
-					asJavaString(spxCompilationUnitPath), 
+					toAbsulatePath(spxCompilationUnitPath), 
 					packageId);
 			table.definePackageDeclaration(pDecl);
 		}
@@ -344,6 +326,22 @@
 		return decl.toTerm(this);
 	}
 	
+	public IStrategoList getModuleDeclarations (IStrategoString filePath)
+	{
+		logMessage("getModuleDeclarations | Arguments : " + filePath);
+		
+		String absFilePath = toAbsulatePath(filePath);
+		
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		
+		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByUri(absFilePath);
+		
+		IStrategoList result =  ModuleDeclaration.toTerm(this, decls);
+		
+		logMessage("getModuleDeclarations | After converting it to IStrategoList : " + result );
+		
+		return result;
+	}
 
 	public IStrategoList getModuleDeclarations(IStrategoAppl packageQName) {
 
@@ -357,10 +355,7 @@
 		
 		logMessage("getModuleDeclarations | Found following result from SymbolTable : " + decls);
 		
-		IStrategoList result = _termFactory.makeList();
-		
-		for ( ModuleDeclaration decl: decls)
-			result = _termFactory.makeListCons(decl.toTerm(this), result);
+		IStrategoList result =  ModuleDeclaration.toTerm(this, decls);
 		
 		logMessage("getModuleDeclarations | After converting it to IStrategoList : " + result );
 		
@@ -392,6 +387,7 @@
 			throw new IllegalArgumentException( "Unknown Module Id"+ moduleTypedQName.toString());
 	}
 	
+	
 	/**
 	 * Returns {@link LanguageDescriptor} for Spoofaxlang package with {@link packageTypedQName}}
 	 *  
@@ -471,10 +467,8 @@
 
 		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
 
-		IStrategoList moduleId = ModuleDeclaration.getModuleId(
-				this.getTermFactory(), moduleQName);
-		IStrategoList packageId = PackageDeclaration.getPackageId(
-				this.getTermFactory(), packageQName);
+		IStrategoList moduleId = ModuleDeclaration.getModuleId( this.getTermFactory(), moduleQName);
+		IStrategoList packageId = PackageDeclaration.getPackageId(this.getTermFactory(), packageQName);
 
 		moduleId = (IStrategoList) toCompactPositionInfo(moduleId);
 		packageId = (IStrategoList) toCompactPositionInfo(packageId);
@@ -487,9 +481,7 @@
 			throw new IllegalArgumentException("Unknown Package : "
 					+ packageId.toString());
 
-		table.define(new ModuleDeclaration(
-				toAbsulatePath(spxCompilationUnitPath), moduleId, packageId),
-				ast, analyzedAst);
+		table.define(new ModuleDeclaration(toAbsulatePath(spxCompilationUnitPath), moduleId, packageId), ast, analyzedAst);
 	}
 
 	
@@ -514,7 +506,7 @@
 	}
 	
 	
-	public void clearSymbolTable() 
+	public void clearSymbolTable() throws IOException 
 	{
 		if (! isPersistenceManagerClosed())
 			_persistenceManager.clearAll();
@@ -579,9 +571,27 @@
 	{
 		URI resUri = toFileURI(uri);
 		
-		return new File( resUri).getAbsolutePath();
+		return new File(resUri).getAbsolutePath();
 		
 	}
+	/**
+	 * Returns URI 
+	 * @param path
+	 * @return
+	 */
+	URI toFileURI(String path)
+	{
+		File file = new File(path);
+		return	file.isAbsolute()? file.toURI()
+			  			 : new File(_agent.getWorkingDir(), path).toURI();
+	}
+
+	URI toFileURI(IStrategoTerm filePath) 
+	{
+		return toFileURI(Tools.asJavaString(filePath));
+	}
+
+	
 
 	/**
 	 * Verify type of declaration . 
@@ -603,15 +613,7 @@
 	 */
 	private void logMessage(String message) {
 		
-		final String src = "["+ _projectName+ ".SpxSemanticIndexFacade]  ";
-		if(DEBUG)
-		{		
-			try {
-				_agent.getWriter(IOAgent.CONST_STDOUT).write(src + message+ "\n");
-			} catch (IOException e) {
-				// Like System.err.println, we swallow excpetions
-			}
-		}
+		_persistenceManager.logMessage("SpxSemanticIndexFacade", message);
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Wed Sep 14 21:06:49 2011	(r23350)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Wed Sep 14 22:21:06 2011	(r23351)
@@ -51,7 +51,7 @@
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
-		manager = new SpxPersistenceManager( "test" , "c:/temp");
+		manager = new SpxPersistenceManager( "test" , "c:/temp" , ioAgent());
 		symtable = new SpxPackageLookupTable("lookupPackage", manager);
 		mSymTable = new SpxModuleLookupTable("lookupModule", manager);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 21:06:49 2011	(r23350)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 22:21:06 2011	(r23351)
@@ -93,7 +93,6 @@
 		_facade.assertConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration"); 
 	}
 	
-	
 	public void testIndexPackageDeclarationInMultipleFiles() 
 	{
 		ITermFactory f = termFactory() ;
@@ -114,7 +113,6 @@
 		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
 	}
 	
-	
 	public void testIndexModuleDeclaration() 
 	{
 		ITermFactory f = termFactory() ;
@@ -144,7 +142,7 @@
 		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(termFactory(), moduleName);
 		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(termFactory(), moduleName);
 		
-		_facade.indexModuleDefinition(mQnameAppl, termFactory().makeString(absPathString1), pQnameAppl, ast, analyzed_ast);
+		_facade.indexModuleDefinition(mQnameAppl, termFactory().makeString(filePath), pQnameAppl, ast, analyzed_ast);
 	}
 	
 	private IStrategoAppl indexTestPackageDecl(String packageName , String fileName) {
@@ -203,8 +201,33 @@
 		
 	}
 	
-	
-	
-	
+	public void testGetModuleDeclarationsByFilePath()
+	{
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+		
+		indexTestPackageDecl(packageName1, absPathString1);
+		indexTestModuleDefs ( "p1m1" , packageName1 , absPathString1);
+		indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
+		
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName2, absPathString1);
+		indexTestModuleDefs ( "p2m2" , packageName2 , absPathString1);
+		
+
+		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName3, absPathString2);
+		indexTestModuleDefs ( "p3m2" , packageName3 , absPathString2);
+		
+		
+		IStrategoList actuals = null;
+		//following invocation should return 2 ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString1));
+		
+		assertEquals(3, actuals.getSubtermCount());
+		
+		//following invocation should return 1  ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString2));
+		assertEquals(1, actuals.getSubtermCount());
+	}
 	
 }

From M.A.Akhter at student.tudelft.nl  Thu Sep 15 01:46:51 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 14 Sep 2011 23:46:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23352 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang tests
Message-ID: <20110914234651.AD37B7F800A@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Sep 14 23:46:51 2011
New Revision: 23352
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23352&sc=1

Log:
+ primitive : SPX_index_get_module_declarations_of

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
      - copied, changed from r23336, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -45,6 +45,7 @@
 		add(new SPX_index_get_module_declaration(spxIndex));
 		add(new SPX_index_get_module_definition(spxIndex));
 		
+		add(new SPX_index_get_module_declarations_of(spxIndex));
 	}
 
 	public String getOperatorRegistryName() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -9,11 +9,6 @@
 
 public interface ISpxPersistenceManager {
 
-	/**
-	 * Commits the unsaved and closes the connection.
-	 *  
-	 * @throws IOException
-	 */
 	public void commitAndClose()  throws IOException;
 	
 	public <V> PrimaryStoreMap <Long, V> loadStoreMap( String storeMapName);

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java (from r23336, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseConstructDeclaration.java	Mon Sep 12 21:20:42 2011	(r23336, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -9,21 +9,20 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 
-public abstract class BaseConstructDeclaration implements Serializable
+public abstract class IdentifiableConstruct implements Serializable
 {
 	private static final long serialVersionUID = 1055862481052307186L;
 	protected static final String qnameContructorName = "QName";
 	
-	final IStrategoList id;
+	protected final IStrategoList id;
 	
-	public BaseConstructDeclaration(IStrategoList uri) {
+	public IdentifiableConstruct(IStrategoList uri) {
 		super();
 		this.id = uri;
 	}
 	
 	public IStrategoList getId()
 	{
-		//returns String representation of the BaseConstruct.
 		return id;
 	}
 
@@ -49,7 +48,7 @@
 			return false;
 		if (getClass() != obj.getClass())
 			return false;
-		BaseConstructDeclaration other = (BaseConstructDeclaration) obj;
+		IdentifiableConstruct other = (IdentifiableConstruct) obj;
 		if (id == null) {
 			if (other.id != null)
 				return false;
@@ -63,12 +62,12 @@
 	 */
 	@Override
 	public String toString() {
-		return "BaseConstructDeclaration [id=" + id + "]";
+		return "IdentifiableConstruct [id=" + id + "]";
 	}
 	
 	public abstract IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade);  
 
-	public static IStrategoAppl toIdTerm ( ITermFactory factory ,  String constructorName , IStrategoList id)
+	static IStrategoAppl toIdTerm ( ITermFactory factory ,  String constructorName , IStrategoList id)
 	{
 		IStrategoConstructor cons = factory.makeConstructor(constructorName, 1);
 		IStrategoConstructor qnameCons = factory.makeConstructor(qnameContructorName, 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -18,7 +18,7 @@
  * @author Md. Adil Akhter
  * Created On : Sep 3, 2011
  */
-public class LanguageDescriptor extends BaseConstructDeclaration {
+public class LanguageDescriptor extends IdentifiableConstruct {
 
 	private static final long serialVersionUID = 7099736990601308645L;
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -7,7 +7,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class ModuleDeclaration extends BaseConstructDeclaration 
+public class ModuleDeclaration extends IdentifiableConstruct 
 {
 	private static final long serialVersionUID = -6249406731326662111L;
 	static final String _moduleIdContructorName = "Module";

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -10,7 +10,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class PackageDeclaration extends BaseConstructDeclaration
+public class PackageDeclaration extends IdentifiableConstruct
 {
 	private static final long serialVersionUID = -9081890582103567413L;
 	private static final String _packageIdContructorName = "Package";

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -22,10 +22,12 @@
 	private static int PROJECT_NAME_INDEX = 0;
 	private static int MODULE_ID_INDEX = 1;
 	
+	private final static int NO_ARGS = 2;
+	
 	private final SpxSemanticIndex index;
 
 	public SPX_index_get_module_declaration(SpxSemanticIndex index) {
-		super(NAME, 0, 2);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
 	
@@ -38,7 +40,7 @@
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
 		boolean successStatement = false;
-		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[MODULE_ID_INDEX])) 
+		if ( (NO_ARGS == tvars.length) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[MODULE_ID_INDEX])) 
 		{
 			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 			IStrategoAppl typedModuleQName = (IStrategoAppl)tvars[MODULE_ID_INDEX];

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -0,0 +1,61 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * Primitive to retrieve ModuleDeclarations from {@link SpxSemanticIndex}
+ * 
+ * @author Md. Adil Akhter
+ * Created On : Sep 11, 2011
+ */
+public class SPX_index_get_module_declarations_of extends AbstractPrimitive {
+
+    private static String NAME = "SPX_index_get_module_declarations_of";
+    private static int PROJECT_NAME_INDEX = 0;
+    private static int RES_INDEX = 1;
+
+    private final static int NO_ARGS = 2;
+
+    private final SpxSemanticIndex index;
+
+    public SPX_index_get_module_declarations_of(SpxSemanticIndex index) {
+	super(NAME, 0, NO_ARGS);
+	this.index = index;
+    }
+	
+    /* Retrieve Spoofaxlang ModuleDeclarations enclosed in the following resource - {@code tvars}.    
+     * 
+     * {@code tvars} contains name of the project and typed qualified ModuleID  
+     * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+     */
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+    	boolean successStatement = false;
+
+    	if ((tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX])) 
+    	{
+    		IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+    		try {
+    			IStrategoTerm retTerm = index.getModuleDeclarations(projectName, tvars[RES_INDEX]);
+    			successStatement = true;
+    			env.setCurrent(retTerm);
+    		}
+    		catch(Exception ex)
+    		{
+    			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+    		}
+    	}
+    	else
+    		SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+
+    	return successStatement;
+    }
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -11,18 +11,19 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SPX_index_get_module_definition extends AbstractPrimitive {
-
 	private static String NAME = "SPX_index_get_module_definition";
 	private static int PROJECT_NAME_INDEX = 0;
 	private static int MODULE_ID_INDEX = 1;
-	
+
+	private final static int NO_ARGS = 2;
+
 	private final SpxSemanticIndex index;
 
 	public SPX_index_get_module_definition(SpxSemanticIndex index) {
-		super(NAME, 0, 2);
+		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
-	
+
 	/* Retrieve Spoofaxlang ModuleDefinition with Module ID 
 	 * specified in {@code tvars}.    
 	 * 
@@ -32,10 +33,12 @@
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
 		boolean successStatement = false;
-		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[MODULE_ID_INDEX])) 
+	
+		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[MODULE_ID_INDEX])) 
 		{
 			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 			IStrategoAppl typedModuleQName = (IStrategoAppl)tvars[MODULE_ID_INDEX];
+		
 			try {
 				IStrategoTerm t = index.getModuleDefinition(projectName, typedModuleQName);
 				env.setCurrent(t);
@@ -43,14 +46,12 @@
 			} 
 			catch(Exception ex)
 			{
-				// Logging any exception throw from the underlying symbol table. 
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
 		else
 			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
+
 		return successStatement;
 	}
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -169,10 +169,10 @@
 	}
 	
 	/**
-	 * Removes {@link BaseConstructDeclaration} from the lookup table mapped by the {@code id}
+	 * Removes {@link IdentifiableConstruct} from the lookup table mapped by the {@code id}
 	 * 
 	 * @param id {@link IStrategoList} representing qualified ID of the Construct
-	 * @return {@link BaseConstructDeclaration} mapped by {@code id}
+	 * @return {@link IdentifiableConstruct} mapped by {@code id}
 	 */
 	public ModuleDeclaration remove(IStrategoList id)
 	{	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -215,6 +215,19 @@
 		return resolve(projectName, moduleTypedQname, resolver);
 	}
 	
+	public IStrategoTerm getModuleDeclarations(IStrategoString projectName, IStrategoTerm retTerm) throws Exception {
+		
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				return idxFacade.getModuleDeclarationsOf(qname);
+			}
+		};
+		
+		return resolve(projectName, retTerm, resolver);
+	}
+
+	
 	public IStrategoTerm getModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception {
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
@@ -332,6 +345,5 @@
 		if (idxFactory == null)
 			throw new IllegalStateException("Spoofaxlang Semantic index not initialized");
 	}
-
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -326,6 +326,21 @@
 		return decl.toTerm(this);
 	}
 	
+
+	public IStrategoTerm getModuleDeclarationsOf(IStrategoTerm res) {
+		
+		IStrategoTerm retValue ;
+		
+		if(Tools.isTermAppl(res))
+			retValue  = this.getModuleDeclarations((IStrategoAppl)res);
+		else if(Tools.isTermString(res))
+			retValue = this.getModuleDeclarations((IStrategoString)res);
+		else
+			throw new IllegalArgumentException("Unknown argument in getModuleDeclarationOf: " + res);
+		
+		return retValue;
+	}
+
 	public IStrategoList getModuleDeclarations (IStrategoString filePath)
 	{
 		logMessage("getModuleDeclarations | Arguments : " + filePath);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 22:21:06 2011	(r23351)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 23:46:51 2011	(r23352)
@@ -201,10 +201,10 @@
 		
 	}
 	
-	public void testGetModuleDeclarationsByFilePath()
+	public void testGetModuleDeclarationsByFileUri()
 	{
 		String packageName1 =  	"\"languages\", \"entitylang\"" ;
-		
+
 		indexTestPackageDecl(packageName1, absPathString1);
 		indexTestModuleDefs ( "p1m1" , packageName1 , absPathString1);
 		indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
@@ -213,12 +213,10 @@
 		indexTestPackageDecl(packageName2, absPathString1);
 		indexTestModuleDefs ( "p2m2" , packageName2 , absPathString1);
 		
-
 		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
 		indexTestPackageDecl(packageName3, absPathString2);
 		indexTestModuleDefs ( "p3m2" , packageName3 , absPathString2);
 		
-		
 		IStrategoList actuals = null;
 		//following invocation should return 2 ModuleDeclarations
 		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString1));

From M.A.Akhter at student.tudelft.nl  Thu Sep 15 04:06:34 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 15 Sep 2011 02:06:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23353 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	spxlang tests
Message-ID: <20110915020634.22538CC06F@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Sep 15 02:06:33 2011
New Revision: 23353
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23353&sc=1

Log:
+ impl. get-package-declarations-by-uri 
+ refactoring
+ unit tests for get-package-declarations-by-uri

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Wed Sep 14 23:46:51 2011	(r23352)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Thu Sep 15 02:06:33 2011	(r23353)
@@ -100,4 +100,24 @@
 		
 		throw new IllegalArgumentException("Invalid QName : " + qName);
 	}
+
+	/**
+	 * Constructs {@link IStrategoList} from {@code decls}  
+	 * 
+	 * @param idxFacade an instance of {@link SpxSemanticIndexFacade }
+	 * @param decls A collection of ModuleDeclataions 
+	 * @return {@link IStrategoList}
+	 */
+	public static <T extends IdentifiableConstruct> IStrategoList toTerm( SpxSemanticIndexFacade idxFacade , Iterable<T> decls)
+	{
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		IStrategoList result = termFactory.makeList();
+		
+		if(decls!=null)
+		{	
+			for ( T decl: decls)
+				result = termFactory.makeListCons(decl.toTerm(idxFacade), result);
+		}
+		return result;
+	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Sep 14 23:46:51 2011	(r23352)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Thu Sep 15 02:06:33 2011	(r23353)
@@ -122,24 +122,5 @@
 		return this.forceImploderAttachment(retTerm);
 	}
 	
-	/**
-	 * Constructs {@link IStrategoList} from {@code decls}  
-	 * 
-	 * @param idxFacade an instance of {@link SpxSemanticIndexFacade }
-	 * @param decls A collection of ModuleDeclataions 
-	 * @return {@link IStrategoList}
-	 */
-	public static IStrategoList toTerm( SpxSemanticIndexFacade idxFacade , Iterable<ModuleDeclaration> decls)
-	{
-		ITermFactory termFactory = idxFacade.getTermFactory();
-		IStrategoList result = termFactory.makeList();
-		
-		if(decls!=null)
-		{	
-			for ( ModuleDeclaration decl: decls)
-				result = termFactory.makeListCons(decl.toTerm(idxFacade), result);
-		}
-		return result;
-	}
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Wed Sep 14 23:46:51 2011	(r23352)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Thu Sep 15 02:06:33 2011	(r23353)
@@ -54,10 +54,12 @@
 			} 
 			catch(Exception ex)
 			{
-				// Logging any exception throw from the underlying symbol table. 
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
 			}
 		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+	
 		return successStatement;
 	}
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java	Thu Sep 15 02:06:33 2011	(r23353)
@@ -0,0 +1,63 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Md. Adil Akhter
+ * Created On : Sep 11, 2011
+ */
+public class SPX_index_get_package_declarations_of extends AbstractPrimitive {
+
+	private static String NAME = "SPX_index_get_package_declarations_of";
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int COMPILATION_UNIT_URI_INDEX = 1;
+	private final static int NO_ARGS = 2;
+	
+	private final SpxSemanticIndex index;
+
+	public SPX_index_get_package_declarations_of(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
+		this.index = index;
+	}
+	
+	/* Retrieve Spoofaxlang ModuleDeclaration with Module ID 
+	 * specified in {@code tvars}.    
+	 * 
+	 * {@code tvars} contains name of the project and typed qualified ModuleID  
+	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		boolean successStatement = false;
+		
+		if ( (tvars.length == NO_ARGS) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermString(tvars[COMPILATION_UNIT_URI_INDEX])) 
+		{
+			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoString  compilationUnitUri= (IStrategoString)tvars[COMPILATION_UNIT_URI_INDEX];
+			try {
+				IStrategoTerm t = index.getPackageDeclarationsByUri(projectName, compilationUnitUri);
+				env.setCurrent(t);
+				
+				successStatement = true;
+			} 
+			catch(Exception ex)
+			{
+				// Logging any exception throw from the underlying symbol table. 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+			}
+		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
+		return successStatement;
+	}
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Wed Sep 14 23:46:51 2011	(r23352)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Thu Sep 15 02:06:33 2011	(r23353)
@@ -233,9 +233,13 @@
 	public Iterable<PackageDeclaration> packageDeclarationsByUri( String absUri)
 	{
 		Set<PackageDeclaration> ret = new HashSet<PackageDeclaration>();
-	
-		for ( IStrategoList l: _uriMap.get(absUri))
-			ret.add(_uriMap.getPrimaryValue(l));
+		Iterable<IStrategoList> retList =_uriMap.get(absUri);
+		if(retList != null)
+		{
+			for ( IStrategoList l: retList)
+				ret.add(_uriMap.getPrimaryValue(l));
+		}
+
 		return ret;
 	}
 	
@@ -247,12 +251,16 @@
 	public void removePackageDeclarationsByUri( String absUri)
 	{	
 		ArrayList<IStrategoList> list = new ArrayList<IStrategoList>();
-		
-		// constructing a temporary list to be removed from 
-		// the symbol table. 
-		for ( IStrategoList l: _uriMap.get(absUri))
-			list.add(l);
-		
+
+		Iterable<IStrategoList> toRemove =_uriMap.get(absUri);
+
+		if(toRemove != null)
+		{
+			// constructing a temporary list to be removed from 
+			// the symbol table. 
+			for ( IStrategoList l: toRemove)
+				list.add(l);
+		}
 		// removing the package declaration from the lookup table.
 		for(Object o : list.toArray())
 			remove((IStrategoList)o);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Sep 14 23:46:51 2011	(r23352)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Thu Sep 15 02:06:33 2011	(r23353)
@@ -203,7 +203,17 @@
 		return resolve(projectName, packageTypedQname, resolver);
 	}
 
-	
+	public IStrategoTerm getPackageDeclarationsByUri(IStrategoString projectName, IStrategoString compilationUnitUri)  throws Exception{
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm uri) throws Exception  {
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.getPackageDeclarationsByUri((IStrategoString)uri);
+			} 
+		};
+		
+		return resolve(projectName, compilationUnitUri, resolver);
+	}
+
 	public IStrategoTerm getModuleDeclaration(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
@@ -218,9 +228,9 @@
 	public IStrategoTerm getModuleDeclarations(IStrategoString projectName, IStrategoTerm retTerm) throws Exception {
 		
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
+			public IStrategoTerm get(IStrategoString projectName ,IStrategoTerm res) {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.getModuleDeclarationsOf(qname);
+				return idxFacade.getModuleDeclarationsOf(res);
 			}
 		};
 		
@@ -249,7 +259,6 @@
 		
 		return resolve(projectName, packageTypedQname, resolver);
 	}
-
 	
 	public boolean removeCompilationUnit(IStrategoString projectName,IStrategoString spxCompilationUnitPath) throws IllegalStateException, IOException{
 		
@@ -345,5 +354,4 @@
 		if (idxFactory == null)
 			throw new IllegalStateException("Spoofaxlang Semantic index not initialized");
 	}
-	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Sep 14 23:46:51 2011	(r23352)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Sep 15 02:06:33 2011	(r23353)
@@ -304,7 +304,21 @@
 		
 		return decl.toTerm(this);
 	}
-	
+
+	public IStrategoList getPackageDeclarationsByUri(IStrategoString uri) {
+
+		logMessage("getPackageDeclarationsByUri | Arguments : " + uri);
+
+		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
+
+		Iterable<PackageDeclaration> decls = table.packageDeclarationsByUri(toAbsulatePath(uri));
+
+		IStrategoList result =  PackageDeclaration.toTerm(this, decls);
+		logMessage("getPackageDeclarationsByUri | Returning IStrategoList : " + result );
+
+		return result;
+	}
+
 	/**
 	 * Returns {@link ModuleDeclaration} indexed with Module Id - {@code moduleTypeQName}  
 	 * 
@@ -353,7 +367,7 @@
 		
 		IStrategoList result =  ModuleDeclaration.toTerm(this, decls);
 		
-		logMessage("getModuleDeclarations | After converting it to IStrategoList : " + result );
+		logMessage("getModuleDeclarations | Returning IStrategoList : " + result );
 		
 		return result;
 	}
@@ -372,7 +386,7 @@
 		
 		IStrategoList result =  ModuleDeclaration.toTerm(this, decls);
 		
-		logMessage("getModuleDeclarations | After converting it to IStrategoList : " + result );
+		logMessage("getModuleDeclarations | Returning IStrategoList : " + result );
 		
 		return result;
 	}	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Wed Sep 14 23:46:51 2011	(r23352)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Thu Sep 15 02:06:33 2011	(r23353)
@@ -148,7 +148,7 @@
 	private IStrategoAppl indexTestPackageDecl(String packageName , String fileName) {
 		
 		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageName+"]))");
-		_facade.indexPackageDeclaration(pQnameAppl, termFactory().makeString(absPathString1));
+		_facade.indexPackageDeclaration(pQnameAppl, termFactory().makeString(fileName));
 		return pQnameAppl;
 	}
 	
@@ -228,4 +228,29 @@
 		assertEquals(1, actuals.getSubtermCount());
 	}
 	
+	
+	public void testGetPackageDeclarationsByUri()
+	{
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+
+		indexTestPackageDecl(packageName1, absPathString1);
+		
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName2, absPathString1);
+		
+		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName3, absPathString2);
+		
+		
+		IStrategoList actuals = null;
+
+		
+		actuals = _facade.getPackageDeclarationsByUri(termFactory().makeString(absPathString2));
+		assertEquals(1, actuals.getSubtermCount());
+		
+
+		actuals = _facade.getPackageDeclarationsByUri(termFactory().makeString(absPathString1));
+		assertEquals(2, actuals.getSubtermCount());
+	}
+
 }

From M.A.Akhter at student.tudelft.nl  Thu Sep 15 04:07:36 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 15 Sep 2011 02:07:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23354 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language
Message-ID: <20110915020736.793CF7F800A@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Sep 15 02:07:36 2011
New Revision: 23354
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23354&sc=1

Log:
added to language library

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Sep 15 02:06:33 2011	(r23353)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Sep 15 02:07:36 2011	(r23354)
@@ -46,6 +46,7 @@
 		add(new SPX_index_get_module_definition(spxIndex));
 		
 		add(new SPX_index_get_module_declarations_of(spxIndex));
+		add(new SPX_index_get_package_declarations_of(spxIndex));
 	}
 
 	public String getOperatorRegistryName() {

From tobivollebregt at gmail.com  Thu Sep 15 09:52:49 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 15 Sep 2011 07:52:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23355 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org...
Message-ID: <20110915075249.15338108C00D@mx3.tudelft.nl>

Author: tvo
Date: Thu Sep 15 07:52:48 2011
New Revision: 23355
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23355&sc=1

Log:
Fix Spoofax/424

* Move CustomDisambiguator use to AbstractSGLRI

* Replace parse-spt-string by parse-spt-file:
  string parsing doesn't work with custom disambiguator, for
  which a file and project path need to be passed to Stratego

* FragmentParser: Get an IResource from the original fragment,
  instead of the tested parse controller (which doesn't have one
  when batch-running tests), which sometimes has a null resource..

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_file_0_0.java
      - copied, changed from r23350, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java	Thu Sep 15 02:07:36 2011	(r23354)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java	Thu Sep 15 07:52:48 2011	(r23355)
@@ -37,7 +37,7 @@
 			throw new BadDescriptorException("Could not load parse table for " + language.getName(), e);
 		}
 		SGLRParseController result = new SGLRParseController(language, table, syntaxProperties, descriptor.getStartSymbol());
-		result.setCustomDisambiguator(new CustomDisambiguator(result, descriptor.getProperties("Disambiguator")));
+		result.getParser().setCustomDisambiguator(new CustomDisambiguator(result, descriptor.getProperties("Disambiguator")));
 		if (table.isDynamic())
 			table.setController(result);
 		return result;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Thu Sep 15 02:07:36 2011	(r23354)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Thu Sep 15 07:52:48 2011	(r23355)
@@ -72,6 +72,12 @@
 		return implodeEnabled;
 	}
 	
+	public void setCustomDisambiguator(CustomDisambiguator disambiguator) {
+		this.disambiguator = disambiguator;
+	}
+	
+	private CustomDisambiguator disambiguator;
+	
 	// Initialization and parsing
 	
 	public AbstractSGLRI(Object parseTableId, String startSymbol, SGLRParseController controller) {
@@ -117,6 +123,9 @@
 		if (controller != null || resource != null)
 			SourceAttachment.putSource(result, resource, controller);
 		
+		if (disambiguator != null)
+			result = disambiguator.disambiguate(result);
+		
 		// parsedCache.put(cachingKey, result);
 		// putTokenizer(result, currentTokenizer);
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Thu Sep 15 02:07:36 2011	(r23354)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Thu Sep 15 07:52:48 2011	(r23355)
@@ -99,8 +99,6 @@
 
 	private volatile long initialReschedule;
 
-	private CustomDisambiguator disambiguator;
-
 	// Simple accessors
 	
 	/**
@@ -287,9 +285,6 @@
 			IStrategoTerm result = doParse(input, filename);
 			currentTokenizer = getTokenizer(result);
 			
-			if (disambiguator != null)
-				result = disambiguator.disambiguate(result);
-
 			errorHandler.clearErrors();
 			errorHandler.setRecoveryFailed(false);
 			errorHandler.gatherNonFatalErrors(result);
@@ -544,8 +539,4 @@
 		
 		return result.toString();
 	}
-
-	public void setCustomDisambiguator(CustomDisambiguator disambiguator) {
-		this.disambiguator = disambiguator;
-	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Thu Sep 15 02:07:36 2011	(r23354)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Thu Sep 15 07:52:48 2011	(r23355)
@@ -15,7 +15,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.imp.model.ISourceProject;
 import org.eclipse.imp.parser.IParseController;
@@ -159,8 +158,7 @@
 				controller.getParseLock().unlock();
 			}
 			isLastSyntaxCorrect = getTokenizer(parsed).isSyntaxCorrect();
-			IResource resource = controller.getResource();
-			SourceAttachment.putSource(parsed, resource, controller);
+			SourceAttachment.putSource(parsed, SourceAttachment.getResource(fragment), controller);
 			if (!successExpected)
 				clearTokenErrors(getTokenizer(parsed));
 			if (isLastSyntaxCorrect == successExpected)

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Thu Sep 15 02:07:36 2011	(r23354)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Thu Sep 15 07:52:48 2011	(r23355)
@@ -23,7 +23,7 @@
         		   testlistener_add_testcase_0_3.instance,
         		   testlistener_start_testcase_0_2.instance,
         		   testlistener_finish_testcase_0_3.instance,
-        		   parse_spt_string_0_0.instance,
+        		   parse_spt_file_0_0.instance,
         		   get_completion_input_term_0_1.instance });
          }
        }

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_file_0_0.java (from r23350, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java	Wed Sep 14 21:06:49 2011	(r23350, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_file_0_0.java	Thu Sep 15 07:52:48 2011	(r23355)
@@ -2,6 +2,8 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
+import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
 
 import org.eclipse.imp.language.Language;
@@ -24,20 +26,24 @@
 /**
  * parse-spt-string strategy to get AST of Spoofax-Testing testsuite, 
  * where the input fragments have been annotated with the AST of the input.
+ * 
+ * The current term is the string to parse and the sole term argument is an
+ * absolute path to the file this string is coming from.
  */
-public class parse_spt_string_0_0 extends Strategy {
+public class parse_spt_file_0_0 extends Strategy {
 
-	public static parse_spt_string_0_0 instance = new parse_spt_string_0_0();
+	public static parse_spt_file_0_0 instance = new parse_spt_file_0_0();
 	
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
 		if (!isTermString(current)) return null;
-		String input = ((IStrategoString)current ).stringValue();
-		
+		String filename = ((IStrategoString)current ).stringValue();
+		File file = new File(filename);
+
 		Language l = LanguageRegistry.findLanguage("Spoofax-Testing");
 		Descriptor d = Environment.getDescriptor(l);
 		IStrategoTerm result = null;
-		try {				
+		try {
 			IParseController ip = d.createParseController();
 			if (ip instanceof DynamicParseController)
 				ip = ((DynamicParseController) ip).getWrapped();
@@ -45,7 +51,7 @@
 				SGLRParseController sglrController = (SGLRParseController) ip;
 				JSGLRI parser = sglrController.getParser(); 
 				parser.setUseRecovery(false);
-			    result = parser.parse(input, "string");
+				result = parser.parse(new FileInputStream(file), file.getAbsolutePath());
 			}
 		} catch (BadDescriptorException e) {
 			Environment.logException("Could not parse testing string", e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Thu Sep 15 02:07:36 2011	(r23354)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Thu Sep 15 07:52:48 2011	(r23355)
@@ -38,7 +38,7 @@
     (selected, position, ast, path, project-path) -> None()
     with
       testlistener-init 
-    ; !path
+    ; !$[[project-path]/[path]]
     ; testlistener-add-testsuite(|<get-testsuite-name-from-file>,<id>)
     ; try(run-testsuite)
   
@@ -57,9 +57,6 @@
     ; testcases := <collect-all(testlistener-add-testcase(|file, <test-to-description>,<origin-offset>))>ast'
     ; <map(run-testcase(|file))>testcases
   
-  parse-spt-file = 
-    read-text-file; parse-spt-string
-      
   get-testsuite-name :
     testsuite(hds, _) -> name
     where name := <fetch-elem(?Name(<id>))>hds
@@ -87,6 +84,6 @@
   external testlistener-add-testcase(|testsuite, description, linenr)
   external testlistener-start-testcase(|testsuite, description)
   external testlistener-finish-testcase(|testsuite, description, result)
-  external parse-spt-string(|)
+  external parse-spt-file(|)
     
   
\ No newline at end of file

From tobivollebregt at gmail.com  Thu Sep 15 09:52:55 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 15 Sep 2011 07:52:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23356 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading parser
Message-ID: <20110915075255.B389F2B8005@mx2.tudelft.nl>

Author: tvo
Date: Thu Sep 15 07:52:55 2011
New Revision: 23356
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23356&sc=1

Log:
Fix descriptor start symbol usage (Spoofax/423)

Fix parser forgetting start symbol after an invalid input
triggered a  StartSymbolException..

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Thu Sep 15 07:52:48 2011	(r23355)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Thu Sep 15 07:52:55 2011	(r23356)
@@ -292,7 +292,12 @@
 	}
 	
 	public String getStartSymbol() {
-		return getProperty("StartSymbols", null);
+		IStrategoAppl result = findTerm(document, "StartSymbols");
+		if (result == null)
+			return null;
+
+		// FIXME: support more than one start symbol
+		return termContents(termAt(termAt(result, 0), 0));
 	}
 	
 	public boolean isUsedForUnmanagedParseTable(String languageName) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Thu Sep 15 07:52:48 2011	(r23355)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Thu Sep 15 07:52:55 2011	(r23356)
@@ -353,8 +353,16 @@
 				// Be forgiving: user probably specified an inconsistent start symbol in the ESV
 				Environment.logWarning("Incorrect start symbol specified in editor descriptor:" + parser.getStartSymbol(), e);
 			}
-			parser.setStartSymbol(null);
-			return parser.parse(input, filename);
+			String startSymbol = parser.getStartSymbol();
+			try {
+				parser.setStartSymbol(null);
+				return parser.parse(input, filename);
+			} finally {
+				// Always reset the original start symbol!
+				// Otherwise a single parse that triggers a StartSymbolException
+				// will permanently handicap the parser...
+				parser.setStartSymbol(startSymbol);
+			}
 		}
 	}
 

From tobivollebregt at gmail.com  Thu Sep 15 09:53:02 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 15 Sep 2011 07:53:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23357 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies
Message-ID: <20110915075302.72CA1108C00D@mx3.tudelft.nl>

Author: tvo
Date: Thu Sep 15 07:53:01 2011
New Revision: 23357
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23357&sc=1

Log:
Fix failed parseLock assertion in AbstractSGLRI

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_file_0_0.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_file_0_0.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_file_0_0.java	Thu Sep 15 07:52:55 2011	(r23356)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_file_0_0.java	Thu Sep 15 07:53:01 2011	(r23357)
@@ -49,9 +49,16 @@
 				ip = ((DynamicParseController) ip).getWrapped();
 			if (ip instanceof SGLRParseController) {
 				SGLRParseController sglrController = (SGLRParseController) ip;
-				JSGLRI parser = sglrController.getParser(); 
-				parser.setUseRecovery(false);
-				result = parser.parse(new FileInputStream(file), file.getAbsolutePath());
+				// Must lock the parse lock of this controller
+				// or hit the assertion in AbstractSGLRI.parse
+				sglrController.getParseLock().lock();
+				try {
+					JSGLRI parser = sglrController.getParser(); 
+					parser.setUseRecovery(false);
+					result = parser.parse(new FileInputStream(file), file.getAbsolutePath());
+				} finally {
+					sglrController.getParseLock().unlock();
+				}
 			}
 		} catch (BadDescriptorException e) {
 			Environment.logException("Could not parse testing string", e);

From tobivollebregt at gmail.com  Thu Sep 15 11:45:31 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 15 Sep 2011 09:45:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23358 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <20110915094531.5D6622B8003@mx2.tudelft.nl>

Author: tvo
Date: Thu Sep 15 09:45:31 2011
New Revision: 23358
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23358&sc=1

Log:
Tweak r23356; don't keep double-parsing files with a .meta file
that *needs* a different start symbol.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Thu Sep 15 07:53:01 2011	(r23357)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Thu Sep 15 09:45:31 2011	(r23358)
@@ -349,6 +349,7 @@
 			if (metaFile != null) {
 				// Unmanaged parse tables may have different start symbols;
 				// try again without the standard start symbol
+				parser.setStartSymbol(null);
 			} else {
 				// Be forgiving: user probably specified an inconsistent start symbol in the ESV
 				Environment.logWarning("Incorrect start symbol specified in editor descriptor:" + parser.getStartSymbol(), e);

From v.vergu at gmail.com  Thu Sep 15 23:42:17 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Thu, 15 Sep 2011 21:42:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23359 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.ui
	org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies
	org.strategoxt.imp.testing/schema
Message-ID: <20110915214217.12348CC114@mx4.tudelft.nl>

Author: VladVergu
Date: Thu Sep 15 21:42:15 2011
New Revision: 23359
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23359&sc=1

Log:
Modified extension point schema to support listener priority. The test runner now notifies only the listener with the higher priority.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml	Thu Sep 15 09:45:31 2011	(r23358)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml	Thu Sep 15 21:42:15 2011	(r23359)
@@ -12,7 +12,8 @@
    <extension
          point="org.strategoxt.imp.testing.testlistener">
       <client
-            class="org.strategoxt.imp.testing.ui.model.TestListener">
+            class="org.strategoxt.imp.testing.ui.model.TestListener"
+            priority="11">
       </client>
    </extension>
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java	Thu Sep 15 09:45:31 2011	(r23358)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java	Thu Sep 15 21:42:15 2011	(r23359)
@@ -5,7 +5,6 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 
-import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IConfigurationElement;
 import org.eclipse.core.runtime.ISafeRunnable;
 import org.eclipse.core.runtime.IStatus;
@@ -51,17 +50,32 @@
 		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
 				ITestListener.EXTENSION_ID);
 		try {
+			Object candidateListener = null;
+			int maxPrio = 0;
+			// determine the listener with the highest priority
 			for (IConfigurationElement e : config) {
-				final Object o = e.createExecutableExtension("class");
+				int prio = 0;
+				try {
+					prio = Integer.parseInt(e.getAttribute("priority"));
+				} catch (NumberFormatException fex) {
+				}
+				if (prio > maxPrio) {
+					maxPrio = prio;
+					candidateListener = e.createExecutableExtension("class");
+				}
+			}
+			if (candidateListener != null) {
+				final Object listener = candidateListener;
+
 				ISafeRunnable runner = new ISafeRunnable() {
 
 					public void run() throws Exception {
 						// Using reflection, because if I use a cast, I get a ClassCastException
 						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = o.getClass().getMethod("addTestcase",
+						Method m = listener.getClass().getMethod("addTestcase",
 								new Class[] { String.class, String.class, int.class });
 						if (!Modifier.isAbstract(m.getModifiers())) {
-							m.invoke(o, ts, desc, offset);
+							m.invoke(listener, ts, desc, offset);
 						}
 					}
 
@@ -70,12 +84,19 @@
 					}
 				};
 				SafeRunner.run(runner);
+			} else {
+				Activator
+						.getInstance()
+						.getLog()
+						.log(new Status(IStatus.INFO, Activator.kPluginID,
+								"No TestListeners available to listen for test status"));
 			}
-			if(config.length == 0){
-				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
-			}
-		} catch (CoreException cex) {
-			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status", cex));
+		} catch (Exception cex) {
+			Activator
+					.getInstance()
+					.getLog()
+					.log(new Status(IStatus.ERROR, Activator.kPluginID,
+							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
 		}
 		return current;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java	Thu Sep 15 09:45:31 2011	(r23358)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java	Thu Sep 15 21:42:15 2011	(r23359)
@@ -5,7 +5,6 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 
-import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IConfigurationElement;
 import org.eclipse.core.runtime.ISafeRunnable;
 import org.eclipse.core.runtime.IStatus;
@@ -48,16 +47,31 @@
 		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
 				ITestListener.EXTENSION_ID);
 		try {
+			Object candidateListener = null;
+			int maxPrio = 0;
+			// determine the listener with the highest priority
 			for (IConfigurationElement e : config) {
-				final Object o = e.createExecutableExtension("class");
+				int prio = 0;
+				try {
+					prio = Integer.parseInt(e.getAttribute("priority"));
+				} catch (NumberFormatException fex) {
+				}
+				if (prio > maxPrio) {
+					maxPrio = prio;
+					candidateListener = e.createExecutableExtension("class");
+				}
+			}
+			if (candidateListener != null) {
+				final Object listener = candidateListener;
+
 				ISafeRunnable runner = new ISafeRunnable() {
 
 					public void run() throws Exception {
 						// Using reflection, because if I use a cast, I get a ClassCastException
 						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = o.getClass().getMethod("addTestsuite", new Class[] { String.class, String.class });
+						Method m = listener.getClass().getMethod("addTestsuite", new Class[] { String.class, String.class });
 						if (!Modifier.isAbstract(m.getModifiers())) {
-							m.invoke(o, name, filename);
+							m.invoke(listener, name, filename);
 						}
 					}
 
@@ -66,12 +80,19 @@
 					}
 				};
 				SafeRunner.run(runner);
+			} else {
+				Activator
+						.getInstance()
+						.getLog()
+						.log(new Status(IStatus.INFO, Activator.kPluginID,
+								"No TestListeners available to listen for test status"));
 			}
-			if(config.length == 0){
-				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
-			}
-		} catch (CoreException cex) {
-			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+		} catch (Exception cex) {
+			Activator
+					.getInstance()
+					.getLog()
+					.log(new Status(IStatus.ERROR, Activator.kPluginID,
+							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
 		}
 		return current;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java	Thu Sep 15 09:45:31 2011	(r23358)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java	Thu Sep 15 21:42:15 2011	(r23359)
@@ -5,7 +5,6 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 
-import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IConfigurationElement;
 import org.eclipse.core.runtime.ISafeRunnable;
 import org.eclipse.core.runtime.IStatus;
@@ -56,20 +55,35 @@
 		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
 				ITestListener.EXTENSION_ID);
 		try {
+			Object candidateListener = null;
+			int maxPrio = 0;
+			// determine the listener with the highest priority
 			for (IConfigurationElement e : config) {
-				final Object o = e.createExecutableExtension("class");
+				int prio = 0;
+				try {
+					prio = Integer.parseInt(e.getAttribute("priority"));
+				} catch (NumberFormatException fex) {
+				}
+				if (prio > maxPrio) {
+					maxPrio = prio;
+					candidateListener = e.createExecutableExtension("class");
+				}
+			}
+			if (candidateListener != null) {
+				final Object listener = candidateListener;
+
 				ISafeRunnable runner = new ISafeRunnable() {
 
 					public void run() throws Exception {
 						// Using reflection, because if I use a cast, I get a ClassCastException
 						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = o.getClass().getMethod("finishTestcase",
+						Method m = listener.getClass().getMethod("finishTestcase",
 								new Class[] { String.class, String.class, boolean.class });
 						if (!Modifier.isAbstract(m.getModifiers())) {
 							if (appl.equals("True")) {
-								m.invoke(o, ts, desc, true);
+								m.invoke(listener, ts, desc, true);
 							} else {
-								m.invoke(o, ts, desc, false);
+								m.invoke(listener, ts, desc, false);
 							}
 						}
 					}
@@ -79,13 +93,19 @@
 					}
 				};
 				SafeRunner.run(runner);
-
-			}
-			if(config.length == 0){
-				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
+			} else {
+				Activator
+						.getInstance()
+						.getLog()
+						.log(new Status(IStatus.INFO, Activator.kPluginID,
+								"No TestListeners available to listen for test status"));
 			}
-		} catch (CoreException cex) {
-			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+		} catch (Exception cex) {
+			Activator
+					.getInstance()
+					.getLog()
+					.log(new Status(IStatus.ERROR, Activator.kPluginID,
+							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
 		}
 		return current;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java	Thu Sep 15 09:45:31 2011	(r23358)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java	Thu Sep 15 21:42:15 2011	(r23359)
@@ -39,16 +39,31 @@
 				ITestListener.EXTENSION_ID);
 
 		try {
+			Object candidateListener = null;
+			int maxPrio = 0;
+			// determine the listener with the highest priority
 			for (IConfigurationElement e : config) {
-				final Object o = e.createExecutableExtension("class");
+				int prio = 0;
+				try {
+					prio = Integer.parseInt(e.getAttribute("priority"));
+				} catch (NumberFormatException fex) {
+				}
+				if (prio > maxPrio) {
+					maxPrio = prio;
+					candidateListener = e.createExecutableExtension("class");
+				}
+			}
+			if (candidateListener != null) {
+				final Object listener = candidateListener;
+
 				ISafeRunnable runner = new ISafeRunnable() {
 
 					public void run() throws Exception {
 						// Using reflection, because if I use a cast, I get a ClassCastException
 						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = o.getClass().getMethod("reset", new Class[] {});
+						Method m = listener.getClass().getMethod("reset", new Class[] {});
 						if (!Modifier.isAbstract(m.getModifiers())) {
-							m.invoke(o);
+							m.invoke(listener);
 						}
 					}
 
@@ -57,12 +72,19 @@
 					}
 				};
 				SafeRunner.run(runner);
-			}
-			if(config.length == 0){
-				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
+			} else {
+				Activator
+						.getInstance()
+						.getLog()
+						.log(new Status(IStatus.INFO, Activator.kPluginID,
+								"No TestListeners available to listen for test status"));
 			}
 		} catch (Exception cex) {
-			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+			Activator
+					.getInstance()
+					.getLog()
+					.log(new Status(IStatus.ERROR, Activator.kPluginID,
+							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
 		}
 
 		return current;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java	Thu Sep 15 09:45:31 2011	(r23358)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java	Thu Sep 15 21:42:15 2011	(r23359)
@@ -5,7 +5,6 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 
-import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IConfigurationElement;
 import org.eclipse.core.runtime.ISafeRunnable;
 import org.eclipse.core.runtime.IStatus;
@@ -48,16 +47,31 @@
 		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
 				ITestListener.EXTENSION_ID);
 		try {
+			Object candidateListener = null;
+			int maxPrio = 0;
+			// determine the listener with the highest priority
 			for (IConfigurationElement e : config) {
-				final Object o = e.createExecutableExtension("class");
+				int prio = 0;
+				try {
+					prio = Integer.parseInt(e.getAttribute("priority"));
+				} catch (NumberFormatException fex) {
+				}
+				if (prio > maxPrio) {
+					maxPrio = prio;
+					candidateListener = e.createExecutableExtension("class");
+				}
+			}
+			if (candidateListener != null) {
+				final Object listener = candidateListener;
+
 				ISafeRunnable runner = new ISafeRunnable() {
 
 					public void run() throws Exception {
 						// Using reflection, because if I use a cast, I get a ClassCastException
 						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = o.getClass().getMethod("startTestcase", new Class[] { String.class, String.class });
+						Method m = listener.getClass().getMethod("startTestcase", new Class[] { String.class, String.class });
 						if (!Modifier.isAbstract(m.getModifiers())) {
-							m.invoke(o, ts, desc);
+							m.invoke(listener, ts, desc);
 						}
 					}
 
@@ -66,13 +80,19 @@
 					}
 				};
 				SafeRunner.run(runner);
-
-			}
-			if(config.length == 0){
-				Activator.getInstance().getLog().log(new Status(IStatus.INFO, Activator.kPluginID, "No TestListeners available to listen for test status"));
+			} else {
+				Activator
+						.getInstance()
+						.getLog()
+						.log(new Status(IStatus.INFO, Activator.kPluginID,
+								"No TestListeners available to listen for test status"));
 			}
-		} catch (CoreException cex) {
-			Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.kPluginID, "Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+		} catch (Exception cex) {
+			Activator
+					.getInstance()
+					.getLog()
+					.log(new Status(IStatus.ERROR, Activator.kPluginID,
+							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
 		}
 		return current;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd	Thu Sep 15 09:45:31 2011	(r23358)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd	Thu Sep 15 21:42:15 2011	(r23359)
@@ -59,6 +59,13 @@
                </appInfo>
             </annotation>
          </attribute>
+         <attribute name="priority" type="string">
+            <annotation>
+               <documentation>
+                  Specifies the priority (integer) of this listener. Only the listener with the higher priority will be notified of test status changes.
+               </documentation>
+            </annotation>
+         </attribute>
       </complexType>
    </element>
 

From M.A.Akhter at student.tudelft.nl  Fri Sep 16 19:40:47 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 16 Sep 2011 17:40:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23360 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang
Message-ID: <20110916174047.D679E2B8012@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep 16 17:40:46 2011
New Revision: 23360
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23360&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -30,6 +30,7 @@
 		add(new SPX_index_init(spxIndex));
 		add(new SPX_index_close(spxIndex));
 		add(new SPX_index_save(spxIndex));
+		add(new SPX_index_clearall(spxIndex));
 		
 		//primitives to index spoofaxlang compilation unit 
 		add(new SPX_index_compilation_unit(spxIndex));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -16,55 +16,14 @@
 	
 	protected final IStrategoList id;
 	
-	public IdentifiableConstruct(IStrategoList uri) {
-		super();
-		this.id = uri;
+	public IdentifiableConstruct(IStrategoList id) {
+		assert id != null;
+		
+		this.id = id;
 	}
 	
-	public IStrategoList getId()
-	{
-		return id;
-	}
+	public IStrategoList getId(){ return id; }
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + ((id == null) ? 0 : id.hashCode());
-		return result;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		IdentifiableConstruct other = (IdentifiableConstruct) obj;
-		if (id == null) {
-			if (other.id != null)
-				return false;
-		} else if (!id.match(other.id))
-			return false;
-		return true;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "IdentifiableConstruct [id=" + id + "]";
-	}
-	
 	public abstract IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade);  
 
 	static IStrategoAppl toIdTerm ( ITermFactory factory ,  String constructorName , IStrategoList id)
@@ -89,8 +48,23 @@
 		return term;
 	}
 	
-	protected String getFileLocation() {return null;}
+	/**
+	 * Returns the location of the construct 
+	 * 
+	 * @return {@link String} representing the absolute path of the  Construct
+	 */
+	protected String getFileLocation() {
+		return null;
+	}
 	
+	/**
+	 * Returns {@link IStrategoList} representation of qualified ID of the {@link IdentifiableConstruct}  
+	 * 
+	 * @param fac an instance of {@link ITermFactory}
+	 * @param qName Typed qualified Name of the construct 
+	 * 
+	 * @return underlying {@link IStrategoList} qualified name
+	 */
 	protected static IStrategoList getID(ITermFactory fac, IStrategoAppl qName) {
 		
 		final IStrategoConstructor qnameCon = fac.makeConstructor(qnameContructorName, 1);
@@ -120,4 +94,44 @@
 		}
 		return result;
 	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		IdentifiableConstruct other = (IdentifiableConstruct) obj;
+		if (id == null) {
+			if (other.id != null)
+				return false;
+		} else if (!id.match(other.id))
+			return false;
+		return true;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "IdentifiableConstruct [id=" + id + "]";
+	}
+	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -20,7 +20,11 @@
 	
 	final String resourceAbsPath; 
 	
-	@Override protected String getFileLocation() {
+	/* (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.IdentifiableConstruct#getFileLocation()
+	 */
+	@Override 
+	protected String getFileLocation() {
 		return resourceAbsPath;
 	}
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -0,0 +1,59 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+
+//TODO : Generalize state management primitive. Abstract them to one primitive only.  
+
+/**
+ * @author Md. Adil Akhter
+ * Created On : Aug 25, 2011
+ */
+public class SPX_index_clearall extends AbstractPrimitive {
+
+	private static String NAME = "SPX_index_clearall";
+	private static int PROJECT_NAME_INDEX = 0;
+	private final static int NO_ARGS = 1;
+	
+	private final SpxSemanticIndex index;
+
+	public SPX_index_clearall(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
+		this.index = index;
+	}
+	
+	
+	
+	/* (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+	
+		boolean retValue = false;	
+		if ( (tvars.length == NO_ARGS) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
+		{	
+			try 
+			{
+				retValue  = index.clearall((IStrategoString)tvars[PROJECT_NAME_INDEX]);
+			}
+			catch(Exception ex)
+			{
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed. Error : "+ ex.getMessage());
+			}	
+				
+		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
+		return retValue;
+	}
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -37,7 +37,7 @@
 	
 		if ( tvars.length != NO_ARGS || !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
 		{
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" ] Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 			return false;
 		}
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -55,11 +55,11 @@
 			} 
 			catch(Exception ex)
 			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 			
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -49,11 +49,11 @@
 				successStatement = true;
 			} 
 			catch(Exception ex){
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -54,11 +54,11 @@
 			} 
 			catch(Exception ex)
 			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 	
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -52,11 +52,11 @@
 			catch(Exception ex)
 			{
 				// Logging any exception throw from the underlying symbol table. 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -50,11 +50,11 @@
     		}
     		catch(Exception ex)
     		{
-    			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+    			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
     		}
     	}
     	else
-    		SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+    		SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 
     	return successStatement;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -46,11 +46,11 @@
 			} 
 			catch(Exception ex)
 			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -51,11 +51,11 @@
 			catch(Exception ex)
 			{
 				// Logging any exception throw from the underlying symbol table. 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -51,11 +51,11 @@
 			catch(Exception ex)
 			{
 				// Logging any exception throw from the underlying symbol table. 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -40,6 +40,7 @@
 		}	
 		
 		IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+		
 		try
 		{
 			return index.initialize(projectName , env.getFactory(), SSLLibrary.instance(env).getIOAgent());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -46,11 +46,11 @@
 			}
 			catch(Exception ex)
 			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed . Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;	
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -47,11 +47,11 @@
 			}
 			catch(Exception ex)
 			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;	
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -52,11 +52,11 @@
 			}
 			catch(Exception ex)
 			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;	
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -29,6 +29,12 @@
 	
 	private final SpxSemanticIndex index;
 
+	/**
+	 * Instantiates a new instance of {@link SPX_index_remove_compilation_unit}  that removes a
+	 * Spoofaxlang Compilation Unit entry from the symbol table given the absolute path of the resource.
+	 *   
+	 * @param index an instance of {@link SpxSemanticIndex}
+	 */
 	public SPX_index_remove_compilation_unit(SpxSemanticIndex index) {
 		super(NAME, 0, NO_ARGS);
 		this.index = index;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -31,9 +31,9 @@
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
 	
-		if ( (tvars.length != NO_ARGS) && !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
+		if ( (tvars.length != NO_ARGS) || !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
 		{	
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 			return false;
 		}
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -129,8 +129,6 @@
 	 */
 	public int size() 
 	{
-		assert _packageLookupTable.size() ==  _languageDescriptors.size() ;
-		
 		return _packageLookupTable.size();
 	}
 	/**
@@ -140,7 +138,10 @@
 	 */
 	public void definePackageDeclaration( PackageDeclaration packageDeclaration )
 	{
-		assert packageDeclaration != null;
+		assert packageDeclaration 		  != null;
+		assert packageDeclaration.getId() != null;
+		
+		_manager.logMessage(SRC+".definePackageDeclaration", "Indexing package declaration : "+ packageDeclaration);
 		
 		_packageLookupTable.put( packageDeclaration.getId(), packageDeclaration);
 	}
@@ -261,17 +262,18 @@
 			for ( IStrategoList l: toRemove)
 				list.add(l);
 		}
+		
 		// removing the package declaration from the lookup table.
 		for(Object o : list.toArray())
 			remove((IStrategoList)o);
 	}
 	
 	/**
-	 * Clears Symbol table  
+	 * Clears this symbol table. 
 	 */
 	public synchronized void clear() {
 		
-		_manager.logMessage(SRC+".clear", "Removing " + this.size() + " entries from symbol table.");
+		_manager.logMessage(SRC+".clear", "Removing "+ this.size() + " entries from symbol table ") ;
 		Iterator<IStrategoList> keyIter = _packageLookupTable.keySet().iterator();
 		
 		while (keyIter.hasNext())

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -10,7 +10,7 @@
 
 interface IIndexer 
 {	
-	public void index(IStrategoString projectName , IStrategoAppl appl);
+	public void index(IStrategoString projectName , IStrategoAppl appl) throws Exception ;
 }
 
 interface ISymbolResolver<T> 
@@ -69,7 +69,7 @@
 		}	
 	}
 	
-	private boolean indexSymbol(IStrategoString projectName , IStrategoAppl appl , IIndexer indexer)
+	private boolean indexSymbol(IStrategoString projectName , IStrategoAppl appl , IIndexer indexer) throws Exception
 	{
 		boolean successStatement = false;
 		try {
@@ -110,10 +110,10 @@
 	
 	
 	// Index module definition . 
-	public boolean indexModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleDefinition)
+	public boolean indexModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleDefinition) throws Exception
 	{
 		IIndexer idx = new IIndexer() {
-			public void index(IStrategoString projectName, IStrategoAppl appl) {
+			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexModuleDefinition(moduleDefinition);
 			}
@@ -122,9 +122,9 @@
 	}
 	
 	
-	public boolean indexPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageDecl) {
+	public boolean indexPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageDecl) throws Exception {
 		IIndexer idx = new IIndexer() {
-			public void index(IStrategoString projectName, IStrategoAppl appl) {
+			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexPackageDeclaration(packageDecl);
 				}
@@ -134,9 +134,9 @@
 	}
 
 	
-	public boolean indexLanguageDescriptor(IStrategoString projectName,	final IStrategoAppl languageDescriptor) {
+	public boolean indexLanguageDescriptor(IStrategoString projectName,	final IStrategoAppl languageDescriptor) throws Exception {
 		IIndexer idx = new IIndexer() {
-			public void index(IStrategoString projectName, IStrategoAppl appl) {
+			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception  {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexLanguageDescriptor(languageDescriptor);
 				}
@@ -181,7 +181,7 @@
 	
 	public IStrategoTerm getCompilationUnit(IStrategoString projectName, IStrategoString spxCompilationUnitPath) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm key) {
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm key) throws Exception  {
 		
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				return idxFacade.getCompilationUnit((IStrategoString)key);
@@ -194,7 +194,7 @@
 	
 	public IStrategoTerm getPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				return idxFacade.getPackageDeclaration((IStrategoAppl)qname);
 			}
@@ -216,7 +216,7 @@
 
 	public IStrategoTerm getModuleDeclaration(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname)  throws Exception {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				return idxFacade.getModuleDeclaration((IStrategoAppl)qname);
 			}
@@ -228,7 +228,7 @@
 	public IStrategoTerm getModuleDeclarations(IStrategoString projectName, IStrategoTerm retTerm) throws Exception {
 		
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName ,IStrategoTerm res) {
+			public IStrategoTerm get(IStrategoString projectName ,IStrategoTerm res) throws Exception  {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				return idxFacade.getModuleDeclarationsOf(res);
 			}
@@ -240,7 +240,7 @@
 	
 	public IStrategoTerm getModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception {
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) {
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				return idxFacade.getModuleDefinition((IStrategoAppl)qname);
 			}
@@ -260,7 +260,7 @@
 		return resolve(projectName, packageTypedQname, resolver);
 	}
 	
-	public boolean removeCompilationUnit(IStrategoString projectName,IStrategoString spxCompilationUnitPath) throws IllegalStateException, IOException{
+	public boolean removeCompilationUnit(IStrategoString projectName,IStrategoString spxCompilationUnitPath) throws IllegalStateException, IOException, SpxSymbolTableException{
 		
 		boolean successStatement = false;
 		
@@ -283,14 +283,35 @@
 		return successStatement;
 	}
 	
+	public boolean clearall(IStrategoString projectName) throws SpxSymbolTableException, IOException {
+		boolean retValue = false; 
+		try
+		{
+			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+			idxFacade.clearSymbolTable();
+			retValue = true;
+		}
+		catch(IllegalStateException e)
+		{
+			tryCleanupResources(projectName);
+			throw e;
+		}
+		catch(Error er)
+		{
+			tryCleanupResources(projectName);
+			throw er;
+		}
+		return retValue;
+	}
 	/**
 	 * Saves the indexes of the project specified by the projectName
 	 * 
 	 * @param projectName Term representation of the projectName 
 	 * @return true if the operation is successful ; otherwise false.
 	 * @throws IOException 
+	 * @throws SpxSymbolTableException 
 	 */
-	public boolean save(IStrategoTerm projectName) throws IllegalStateException, IOException
+	public boolean save(IStrategoTerm projectName) throws IllegalStateException, IOException, SpxSymbolTableException
 	{
 		boolean retValue = false; 
 		try
@@ -312,6 +333,8 @@
 		return retValue;
 	}
 	
+	
+	
 	public boolean close(IStrategoTerm projectName) throws IOException {
 		SpxSemanticIndexFacade idxFacade = removeFacade(projectName);
 		idxFacade.close();
@@ -336,7 +359,7 @@
 		}	
 	}
 	
-	private SpxSemanticIndexFacade getFacade(IStrategoTerm projectName) {
+	private SpxSemanticIndexFacade getFacade(IStrategoTerm projectName) throws SpxSymbolTableException {
 
 		SpxSemanticIndexFacade facade = _facadeRegistry.getFacade(projectName);
 		ensureInitialized(facade);
@@ -354,4 +377,6 @@
 		if (idxFactory == null)
 			throw new IllegalStateException("Spoofaxlang Semantic index not initialized");
 	}
+
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -52,12 +52,20 @@
 	 * @param projectName  ProjectName Term
 	 * 
 	 * @return SpxSemanticIndexFactory mapped with the projectName. If no mapping is found, it is returning null. 
+	 * @throws SpxSymbolTableException 
 	 */
-	public SpxSemanticIndexFacade getFacade( IStrategoTerm projectName)
+	public SpxSemanticIndexFacade getFacade( IStrategoTerm projectName) throws SpxSymbolTableException
 	{
 		String key = asJavaString(projectName);
 		
-		return _registry.get(key);
+		SpxSemanticIndexFacade facade =  _registry.get(key);
+		
+		if(facade == null || facade.isPersistenceManagerClosed())
+		{
+			throw new SpxSymbolTableException("Symbol Table is not initialized for project : " + projectName + " . Invoke SPX_index_init. ");
+		}	
+		
+		return facade;
 	}
 	
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Thu Sep 15 21:42:15 2011	(r23359)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Fri Sep 16 17:40:46 2011	(r23360)
@@ -2,16 +2,14 @@
 
 import java.util.UUID;
 
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 class ScopeIdentifier 
 {
 	private UUID _scopeId;
 	
-	public ScopeIdentifier( UUID scopeId)
-	{
-		_scopeId = scopeId;
-	}
+	public ScopeIdentifier( UUID scopeId){	_scopeId = scopeId; }
 	
 	public IScope resolve( ISpxPersistenceManager manager)
 	{
@@ -19,24 +17,55 @@
 	}
 }
 
-
 /**
+ * Class to represent SpxSymbol 
+ * 
  * @author Md. Adil Akhter
  * Created On : Aug 20, 2011
  */
-class SpxSymbol {
+class SpxSymbol  extends IdentifiableConstruct {
+	
+	private static final long serialVersionUID = -5293805213473800423L;
 	
 	private String _name;
 	private IStrategoTerm _data;
 	private ISpxType _type;
 	private ScopeIdentifier _scope;
 	
+	/**
+	 * Instantiates a new instance of {@link SpxSymbol}
+	 * 
+	 * @param id
+	 * @param name
+	 */
+	public SpxSymbol (IStrategoList id , String name)
+	{	
+		super(id);
+		
+		_name = name; 
+	}
+	/**
+	 * Instantiates a new instance of {@link SpxSymbol}
+	 * 
+	 * @param id
+	 * @param name
+	 * @param type
+	 */
+	public SpxSymbol (IStrategoList id ,  String name , ISpxType type)
+	{ 
+		this(id , name) ; 
+		_type = type;
+	}
 	
-	public SpxSymbol (String name){	_name = name; }
-	public SpxSymbol (String name , ISpxType type){ this(name) ; _type = type;}
-	
+	/**
+	 * returns the name of the symbol 
+	 * 
+	 * @return
+	 */
 	public String getName() { return _name; }
 	
+	public ISpxType getType() {return _type; }
+
 	/**
 	 * @return the data
 	 */
@@ -95,6 +124,12 @@
 			return false;
 		return true;
 	}
+	
+	@Override
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
+		// TODO Auto-generated method stub
+		return null;
+	}
 }
 
 

From M.A.Akhter at student.tudelft.nl  Sat Sep 17 00:05:25 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 16 Sep 2011 22:05:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23361 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	jdbm/recman org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110916220525.A6A1A108C004@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep 16 22:05:25 2011
New Revision: 23361
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23361&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Fri Sep 16 17:40:46 2011	(r23360)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Fri Sep 16 22:05:25 2011	(r23361)
@@ -230,8 +230,7 @@
      *  @throws IOException when the file cannot be opened or is not
      *          a valid file content-wise.
      */
-    public BaseRecordManager( String filename )
-        throws IOException
+    public BaseRecordManager( String filename ) throws IOException
     {
     	// If relativeDirPath is empty, all the jbdm storage will 
     	// created in the currently working directory.
@@ -241,38 +240,45 @@
     }
     
     
-    public BaseRecordManager( String filename , String relativeDirPath)
-    throws IOException
+    public BaseRecordManager( String filename , String relativeDirPath)   throws IOException
     {	
     	
     	_indexDirRelativePathString = relativeDirPath;
     	_filename = filename;
-    	reopen();
+		reopen();
+    	
     }
 
 	private void reopen() throws IOException {
-		_physFileFree = new RecordFile( _filename +  DBF, FREE_BLOCK_SIZE , _indexDirRelativePathString);
-		
+		_physFileFree = new RecordFile(_filename + DBF, FREE_BLOCK_SIZE,
+				_indexDirRelativePathString);
+
+		_physPagemanFree = new PageManager(_physFileFree);
+		_physFile = new RecordFile(_filename + DBR, DATA_BLOCK_SIZE);
+		_physPageman = new PageManager(_physFile);
+		_physMgr = new PhysicalRowIdManager(_physFile, _physPageman,
+				new FreePhysicalRowIdPageManager(_physFileFree,
+						_physPagemanFree, appendToEnd));
+
+		_logicFileFree = new RecordFile(_filename + IDF, FREE_BLOCK_SIZE);
+		_logicPagemanFree = new PageManager(_logicFileFree);
+		if (TRANS_BLOCK_SIZE > 256 * 8)
+			throw new InternalError(); // to big page, slot number would not fit
+										// into page
+		_logicFile = new RecordFile(_filename + IDR, TRANS_BLOCK_SIZE);
+		_logicPageman = new PageManager(_logicFile);
+		_logicMgr = new LogicalRowIdManager(_logicFile, _logicPageman,
+				new FreeLogicalRowIdPageManager(_logicFileFree,
+						_logicPagemanFree));
+
+		long versionNumber = getRoot(STORE_VERSION_NUMBER_ROOT);
+		if (versionNumber > STORE_FORMAT_VERSION)
+			throw new IOException(
+					"Unsupported version of store. Please update JDBM. Minimal supported ver:"
+							+ STORE_FORMAT_VERSION + ", store ver:"
+							+ versionNumber);
 		
-    	_physPagemanFree = new PageManager(_physFileFree);    	
-        _physFile = new RecordFile( _filename + DBR, DATA_BLOCK_SIZE);
-        _physPageman = new PageManager( _physFile );
-        _physMgr = new PhysicalRowIdManager( _physFile, _physPageman, 
-        		new FreePhysicalRowIdPageManager(_physFileFree, _physPagemanFree,appendToEnd));
-        
-        _logicFileFree= new RecordFile( _filename +IDF,FREE_BLOCK_SIZE );
-        _logicPagemanFree = new PageManager( _logicFileFree );
-        if(TRANS_BLOCK_SIZE>256*8)
-        	throw new InternalError(); //to big page, slot number would not fit into page
-        _logicFile = new RecordFile( _filename +IDR,TRANS_BLOCK_SIZE );
-        _logicPageman = new PageManager( _logicFile );
-        _logicMgr = new LogicalRowIdManager( _logicFile, _logicPageman, 
-        		new FreeLogicalRowIdPageManager(_logicFileFree, _logicPagemanFree));
-
-        long versionNumber = getRoot(STORE_VERSION_NUMBER_ROOT);
-        if(versionNumber>STORE_FORMAT_VERSION)
-        	throw new IOException("Unsupported version of store. Please update JDBM. Minimal supported ver:"+STORE_FORMAT_VERSION+", store ver:"+versionNumber);
-        setRoot(STORE_VERSION_NUMBER_ROOT, STORE_FORMAT_VERSION);
+		setRoot(STORE_VERSION_NUMBER_ROOT, STORE_FORMAT_VERSION);
 	}
 
 
@@ -318,7 +324,7 @@
         throws IOException
     {
         checkIfClosed();
-
+        
         _physPageman.close();
         _physPageman = null;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Sep 16 17:40:46 2011	(r23360)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Sep 16 22:05:25 2011	(r23361)
@@ -345,8 +345,9 @@
 	 * Closes any underlying open connection and clean up unmanaged resources. 
 	 * 
 	 * @param projectName
+	 * @throws IOException 
 	 */
-	private void tryCleanupResources( IStrategoTerm projectName){
+	private void tryCleanupResources( IStrategoTerm projectName) throws IOException{
 		
 		if ( _facadeRegistry.containsFacade(projectName))
 		{
@@ -366,7 +367,7 @@
 		return facade;
 	}
 	
-	private SpxSemanticIndexFacade removeFacade(IStrategoTerm projectName) {
+	private SpxSemanticIndexFacade removeFacade(IStrategoTerm projectName) throws IOException {
 
 		SpxSemanticIndexFacade facade = _facadeRegistry.removeFacade(projectName);
 		ensureInitialized(facade);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Fri Sep 16 17:40:46 2011	(r23360)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Fri Sep 16 22:05:25 2011	(r23361)
@@ -69,18 +69,28 @@
 	}
 	
 	
-	public void clearAll()
+	public void clearAll() throws IOException
 	{
-		_registry.clear();
+		for ( String fname : _registry.keySet())
+			remove(fname);
 	}
 
 
-	public SpxSemanticIndexFacade removeFacade(IStrategoTerm projectName) {
+	public SpxSemanticIndexFacade removeFacade(IStrategoTerm projectName) throws IOException {
 		String key = asJavaString(projectName);
 		
-		return _registry.remove(key);
+		return remove(key);
 	}
 	
+	private SpxSemanticIndexFacade remove(String projectName) throws IOException {
+		
+		SpxSemanticIndexFacade facade = _registry.remove(projectName);
+		
+		if((facade != null) &&  !facade.isPersistenceManagerClosed())
+			facade.close();
+		
+		return facade;
+	}
 	
 	public boolean containsFacade(IStrategoTerm projectName)
 	{

From M.A.Akhter at student.tudelft.nl  Sat Sep 17 03:38:49 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 17 Sep 2011 01:38:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23362 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	spxlang tests
Message-ID: <20110917013849.E42172B8004@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Sep 17 01:38:48 2011
New Revision: 23362
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23362&sc=1

Log:
checks to see whether the provided PackageID argument is valid or not

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Sep 16 22:05:25 2011	(r23361)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sat Sep 17 01:38:48 2011	(r23362)
@@ -336,8 +336,7 @@
 	
 	
 	public boolean close(IStrategoTerm projectName) throws IOException {
-		SpxSemanticIndexFacade idxFacade = removeFacade(projectName);
-		idxFacade.close();
+		removeFacade(projectName);
 		return true;
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Sep 16 22:05:25 2011	(r23361)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Sep 17 01:38:48 2011	(r23362)
@@ -52,7 +52,7 @@
 		_moduleDefCon  			= _termFactory.makeConstructor("ModuleDef", 5);
 		_moduleDeclCon 			= _termFactory.makeConstructor("ModuleDecl", 3);
 		_packageDeclCon 		= _termFactory.makeConstructor("PackageDecl", 2);
-		_languageDescriptorCon  = _termFactory.makeConstructor("PackageDeclaration", 5);
+		_languageDescriptorCon  = _termFactory.makeConstructor("LanguageDescriptor", 5);
 		
 		_persistenceManager = new SpxPersistenceManager(_projectName , _agent.getWorkingDir(),agent);
 	}
@@ -232,7 +232,7 @@
 		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
 		
 		if(table.containsPackage(packageId))
-			table.addPackageDeclarationLocation(
+ 			table.addPackageDeclarationLocation(
 					packageId, 
 					toAbsulatePath(spxCompilationUnitPath));
 		else
@@ -252,36 +252,34 @@
 	public void indexLanguageDescriptor (IStrategoAppl languageDescriptor)
 	{
 		assertConstructor(languageDescriptor.getConstructor(), getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
-		
+
 		IStrategoList qualifiedPackageId = PackageDeclaration.getPackageId(getTermFactory(), (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
-		
-		if( table.containsPackage(qualifiedPackageId))
-		{
-			//TODO : move the following logic to extract information and 
-			//construct instance in respective classes . e.g. in LanguageDesrciptor class
-			qualifiedPackageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)qualifiedPackageId);
-		
-			IStrategoList lNames = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageNamesIndex));
-			IStrategoList lIds = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageIdsIndex));
-			IStrategoList lEsvStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.EsvStartSymbolsIndex));
-			IStrategoList lSDFStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.SdfStartSymbolsIndex));
-			
-			LanguageDescriptor current = table.getLangaugeDescriptor(qualifiedPackageId);
-			if( current != null)
-			{	
-				current.addEsvDeclaredStartSymbols(this.getTermFactory(), lEsvStartSymbols);
-				current.addSDFDeclaredStartSymbols(this.getTermFactory(), lSDFStartSymbols );
-				current.addLanguageIDs(this.getTermFactory(), lIds);
-				current.addLanguageNames(this.getTermFactory(), lNames);
-			}
-			else
-				current = LanguageDescriptor.newInstance(this.getTermFactory() , qualifiedPackageId , lIds, lNames,lSDFStartSymbols , lEsvStartSymbols);
-			
-			table.defineLanguageDescriptor(qualifiedPackageId, current);
+
+		checkIfValidPackageId(qualifiedPackageId , "Unknown Package ID :  "+ qualifiedPackageId) ;
+
+		//TODO : move the following logic to extract information and 
+		//construct instance in respective classes . e.g. in LanguageDesrciptor class
+		qualifiedPackageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)qualifiedPackageId);
+
+		IStrategoList lNames = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageNamesIndex));
+		IStrategoList lIds = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageIdsIndex));
+		IStrategoList lEsvStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.EsvStartSymbolsIndex));
+		IStrategoList lSDFStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.SdfStartSymbolsIndex));
+
+		LanguageDescriptor current = table.getLangaugeDescriptor(qualifiedPackageId);
+		if( current != null)
+		{	
+			current.addEsvDeclaredStartSymbols(this.getTermFactory(), lEsvStartSymbols);
+			current.addSDFDeclaredStartSymbols(this.getTermFactory(), lSDFStartSymbols );
+			current.addLanguageIDs(this.getTermFactory(), lIds);
+			current.addLanguageNames(this.getTermFactory(), lNames);
 		}
 		else
-			throw new IllegalArgumentException( "Unknown Package Id : "+ qualifiedPackageId.toString());
+			current = LanguageDescriptor.newInstance(this.getTermFactory() , qualifiedPackageId , lIds, lNames,lSDFStartSymbols , lEsvStartSymbols);
+
+		table.defineLanguageDescriptor(qualifiedPackageId, current);
+
 	}
 	
 	/**
@@ -361,6 +359,7 @@
 		
 		String absFilePath = toAbsulatePath(filePath);
 		
+		//TODO : Check abspath is valid 
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 		
 		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByUri(absFilePath);
@@ -373,19 +372,15 @@
 	}
 
 	public IStrategoList getModuleDeclarations(IStrategoAppl packageQName) {
-
 		logMessage("getModuleDeclarations | Arguments : " + packageQName);
-		
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
-		
 		IStrategoList packageID = PackageDeclaration.getPackageId(getTermFactory(), packageQName);
 		
-		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByPackageId(packageID);
+		checkIfValidPackageId(packageID , "Unknown Package ID :  "+ packageID) ;
 		
+		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByPackageId(packageID);
 		logMessage("getModuleDeclarations | Found following result from SymbolTable : " + decls);
-		
 		IStrategoList result =  ModuleDeclaration.toTerm(this, decls);
-		
 		logMessage("getModuleDeclarations | Returning IStrategoList : " + result );
 		
 		return result;
@@ -428,15 +423,14 @@
 	public IStrategoTerm getLanguageDescriptor ( IStrategoAppl packageTypedQName) throws IllegalArgumentException, Exception
 	{
 		IStrategoList  packageQName = PackageDeclaration.getPackageId(getTermFactory(), packageTypedQName);
-		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
 		
+		checkIfValidPackageId(packageQName , "Unknown Package ID :  "+ packageQName) ;
+		
+		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
 		LanguageDescriptor desc = table.getLangaugeDescriptor(packageQName);
 		if ( desc == null)
 		{	
-			if( table.containsPackage(packageQName))
-				throw new IllegalArgumentException( "Unknown Package Id"+ packageTypedQName.toString());
-			else	
-				throw new SpxSymbolTableException("Not Found LanguageDescriptor for " + packageQName.toString()); 
+			throw new SpxSymbolTableException("Not Found LanguageDescriptor for " + packageQName.toString()); 
 		}
 		return desc.toTerm(this);
 	}
@@ -457,6 +451,7 @@
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
 		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
 		
+		checkIfValidPackageId(packageId , "Unknown Package ID :  "+ packageId) ;
 		
 		table.removePackageDeclarationLocation(
 				packageId, 
@@ -498,7 +493,9 @@
 
 		IStrategoList moduleId = ModuleDeclaration.getModuleId( this.getTermFactory(), moduleQName);
 		IStrategoList packageId = PackageDeclaration.getPackageId(this.getTermFactory(), packageQName);
-
+		
+		checkIfValidPackageId(packageId , "Unknown Package ID :  "+ packageId) ;
+		
 		moduleId = (IStrategoList) toCompactPositionInfo(moduleId);
 		packageId = (IStrategoList) toCompactPositionInfo(packageId);
 		ast = (IStrategoAppl) strip(ast);
@@ -530,10 +527,12 @@
 	 * @throws IOException
 	 */
 	public void close() throws IOException {
-		if (! isPersistenceManagerClosed())
+		if (!isPersistenceManagerClosed()) {
+			logMessage("close | closing underlying persistence manager instance.");
 			_persistenceManager.commitAndClose();
-	}
-	
+		} else
+			logMessage("close | underlying persistence manager is already closed. ");
+	}	
 	
 	public void clearSymbolTable() throws IOException 
 	{
@@ -635,6 +634,13 @@
 			throw new IllegalArgumentException(message);
 	}
 	
+	
+	private void checkIfValidPackageId ( IStrategoList packageId , String errorMessage) {
+		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
+		
+		if(!table.containsPackage(packageId)) { throw new IllegalArgumentException(errorMessage);}
+	}  
+	
 	/**
 	 * Logs message 
 	 * 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Fri Sep 16 22:05:25 2011	(r23361)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Sat Sep 17 01:38:48 2011	(r23362)
@@ -48,7 +48,9 @@
 	
 	
 	/**
-	 * Gets the porject's Semantic Index factory
+	 * Gets the porject's Semantic Index factory . If it is initialized and somehow is not closed 
+	 * then it returns the instance of the factory to perform further operation. 
+	 * 
 	 * @param projectName  ProjectName Term
 	 * 
 	 * @return SpxSemanticIndexFactory mapped with the projectName. If no mapping is found, it is returning null. 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Fri Sep 16 22:05:25 2011	(r23361)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Sat Sep 17 01:38:48 2011	(r23362)
@@ -194,10 +194,13 @@
 		IStrategoAppl pUnknownQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+unknown+"]))");
 		IStrategoList actuals = null;
 		
-		//following invocation should return 2 ModuleDeclarations
-		actuals = _facade.getModuleDeclarations( pUnknownQnameAppl );
-		
-		assertEquals(0, actuals.getSubtermCount());
+		try{
+			//following invocation should return 2 ModuleDeclarations
+			actuals = _facade.getModuleDeclarations( pUnknownQnameAppl );
+		}catch(IllegalArgumentException ex)
+		{
+			
+		}
 		
 	}
 	

From M.A.Akhter at student.tudelft.nl  Sat Sep 17 04:09:31 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 17 Sep 2011 02:09:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23363 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110917020931.707D0108C012@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Sep 17 02:09:31 2011
New Revision: 23363
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23363&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Sat Sep 17 01:38:48 2011	(r23362)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Sat Sep 17 02:09:31 2011	(r23363)
@@ -164,8 +164,13 @@
 		remove(key);
 	}
 	
-	void remove(String absPathString) throws IOException
-	{
+	public void verifyUriExists(String uri)	{
+		if(!_infoMap.containsKey(uri)){
+			throw new IllegalArgumentException(" Unknown CompilationUnit Uri: "+ uri);
+		}	
+	}
+	
+	void remove(String absPathString) throws IOException{
 		SpxCompilationUnitInfo removedValue = _infoMap.remove(absPathString);
 		
 		if ( removedValue != null)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Sat Sep 17 01:38:48 2011	(r23362)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Sat Sep 17 02:09:31 2011	(r23363)
@@ -247,6 +247,16 @@
 		return ret;
 	}
 	
+
+	void verifyUriExists(String uri){
+		if(containsUri(uri)){ 
+			throw new IllegalArgumentException(" Unknown Module Uri " + uri) ;
+		}
+	}
+	
+	
+	private boolean containsUri ( String absPath ) { return _moduleByFileAbsPath.containsKey(absPath);}
+	 
 	public Iterable<ModuleDeclaration> getModuleDeclarationsByPackageId(IStrategoList packageID)
 	{
 		List<ModuleDeclaration> ret = new ArrayList<ModuleDeclaration>();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sat Sep 17 01:38:48 2011	(r23362)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sat Sep 17 02:09:31 2011	(r23363)
@@ -244,6 +244,18 @@
 		return ret;
 	}
 	
+	void verifyUriExists(String uri){
+		if(containsUri(uri)){ 
+			throw new IllegalArgumentException("Unknown Package Uri " + uri) ;
+		}
+	}
+	
+	void verifyPackageIDExists ( IStrategoList packageId) {
+		if(!containsPackage(packageId)) { throw new IllegalArgumentException("Unknown Package ID : "+ packageId);}
+	}  
+	
+	
+	private boolean containsUri ( String absPath ) { return _uriMap.containsKey(absPath);}
 	/**
 	 * Removes all packages located in the {@code absUri} 
 	 * 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Sep 17 01:38:48 2011	(r23362)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Sep 17 02:09:31 2011	(r23363)
@@ -61,37 +61,26 @@
 	 * Returns the TermFactory 
 	 * @return
 	 */
-	public ITermFactory getTermFactory() {
-		return _termFactory;
-	}
+	public ITermFactory getTermFactory() { return _termFactory; }
 
 	/**
 	 * Gets the project name as String
 	 * @return
 	 */
-	public String getProjectNameString()
-	{
-		return _projectName;
-	}
+	public String getProjectNameString(){ return _projectName; }
 
 	/**
 	 * Get ProjectName as IStrategoTerm
 	 * 
 	 * @return IStrategoTerm
 	 */
-	public IStrategoTerm getProjectName()
-	{
-		return _termFactory.makeString(_projectName);
-	}
+	public IStrategoTerm getProjectName(){ return _termFactory.makeString(_projectName);}
 
 	/**
 	 * Returns an instance of the Persistence Manager active for the current Facade
 	 * @return
 	 */
-	ISpxPersistenceManager getPersistenceManager()
-	{
-		return _persistenceManager;
-	}
+	ISpxPersistenceManager getPersistenceManager(){	return _persistenceManager; }
 
 	
 	String fromFileURI(URI uri) {
@@ -107,8 +96,7 @@
 	 * Prints error message
 	 * @param errMessage
 	 */
-	void printError(String errMessage)
-	{
+	void printError(String errMessage){
 		_agent.printError(errMessage);
 	}
 	
@@ -119,7 +107,6 @@
 	 * (The latter would be bad since we cache in {@link #term}.)
 	 */
 	public static IStrategoAppl forceImploderAttachment(IStrategoAppl term , URI file) {
-		
 		return forceImploderAttachment(term, term, file);
 	}
 	
@@ -183,6 +170,7 @@
 		return retTerm;
 	}
 	
+	
 	/**
 	 * Removes CompilationUnit located in {@code spxCompilationUnitPath} file path.  
 	 * 
@@ -256,7 +244,7 @@
 		IStrategoList qualifiedPackageId = PackageDeclaration.getPackageId(getTermFactory(), (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
 
-		checkIfValidPackageId(qualifiedPackageId , "Unknown Package ID :  "+ qualifiedPackageId) ;
+		table.verifyPackageIDExists(qualifiedPackageId) ;
 
 		//TODO : move the following logic to extract information and 
 		//construct instance in respective classes . e.g. in LanguageDesrciptor class
@@ -308,8 +296,9 @@
 		logMessage("getPackageDeclarationsByUri | Arguments : " + uri);
 
 		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
-
-		Iterable<PackageDeclaration> decls = table.packageDeclarationsByUri(toAbsulatePath(uri));
+		String absFilePath = toAbsulatePath(uri);
+		table.verifyUriExists(absFilePath);
+		Iterable<PackageDeclaration> decls = table.packageDeclarationsByUri(absFilePath);
 
 		IStrategoList result =  PackageDeclaration.toTerm(this, decls);
 		logMessage("getPackageDeclarationsByUri | Returning IStrategoList : " + result );
@@ -361,6 +350,7 @@
 		
 		//TODO : Check abspath is valid 
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		table.verifyUriExists(absFilePath);
 		
 		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByUri(absFilePath);
 		
@@ -376,7 +366,7 @@
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 		IStrategoList packageID = PackageDeclaration.getPackageId(getTermFactory(), packageQName);
 		
-		checkIfValidPackageId(packageID , "Unknown Package ID :  "+ packageID) ;
+		_persistenceManager.spxPackageTable().verifyPackageIDExists(packageID ) ;
 		
 		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByPackageId(packageID);
 		logMessage("getModuleDeclarations | Found following result from SymbolTable : " + decls);
@@ -424,9 +414,11 @@
 	{
 		IStrategoList  packageQName = PackageDeclaration.getPackageId(getTermFactory(), packageTypedQName);
 		
-		checkIfValidPackageId(packageQName , "Unknown Package ID :  "+ packageQName) ;
 		
 		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
+		table.verifyPackageIDExists(packageQName) ;
+		
+		
 		LanguageDescriptor desc = table.getLangaugeDescriptor(packageQName);
 		if ( desc == null)
 		{	
@@ -451,7 +443,7 @@
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
 		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
 		
-		checkIfValidPackageId(packageId , "Unknown Package ID :  "+ packageId) ;
+		table.verifyPackageIDExists(packageId) ;
 		
 		table.removePackageDeclarationLocation(
 				packageId, 
@@ -494,7 +486,7 @@
 		IStrategoList moduleId = ModuleDeclaration.getModuleId( this.getTermFactory(), moduleQName);
 		IStrategoList packageId = PackageDeclaration.getPackageId(this.getTermFactory(), packageQName);
 		
-		checkIfValidPackageId(packageId , "Unknown Package ID :  "+ packageId) ;
+		_persistenceManager.spxPackageTable().verifyPackageIDExists(packageId) ;
 		
 		moduleId = (IStrategoList) toCompactPositionInfo(moduleId);
 		packageId = (IStrategoList) toCompactPositionInfo(packageId);
@@ -635,11 +627,6 @@
 	}
 	
 	
-	private void checkIfValidPackageId ( IStrategoList packageId , String errorMessage) {
-		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
-		
-		if(!table.containsPackage(packageId)) { throw new IllegalArgumentException(errorMessage);}
-	}  
 	
 	/**
 	 * Logs message 

From M.A.Akhter at student.tudelft.nl  Sat Sep 17 04:18:03 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 17 Sep 2011 02:18:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23364 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110917021803.64B39108C012@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Sep 17 02:18:01 2011
New Revision: 23364
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23364&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Sat Sep 17 02:09:31 2011	(r23363)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Sat Sep 17 02:18:01 2011	(r23364)
@@ -118,8 +118,7 @@
 	 * @param decl an instance of {@link PackageDeclaration} to copy from. 
 	 * @return {@link PackageDeclaration}
 	 */
-	public static PackageDeclaration newInstance( PackageDeclaration decl)
-	{
+	public static PackageDeclaration newInstance( PackageDeclaration decl){
 		if (decl == null) 
 			return decl;
 		
@@ -171,8 +170,4 @@
 			return false;
 		return true;
 	}
-}
-
-
-
-
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Sat Sep 17 02:09:31 2011	(r23363)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Sat Sep 17 02:18:01 2011	(r23364)
@@ -246,15 +246,13 @@
 		
 		return ret;
 	}
-	
 
 	void verifyUriExists(String uri){
-		if(containsUri(uri)){ 
-			throw new IllegalArgumentException(" Unknown Module Uri " + uri) ;
+		if(!containsUri(uri)){ 
+			throw new IllegalArgumentException("Illegal URI argument " + uri) ;
 		}
 	}
-	
-	
+
 	private boolean containsUri ( String absPath ) { return _moduleByFileAbsPath.containsKey(absPath);}
 	 
 	public Iterable<ModuleDeclaration> getModuleDeclarationsByPackageId(IStrategoList packageID)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sat Sep 17 02:09:31 2011	(r23363)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sat Sep 17 02:18:01 2011	(r23364)
@@ -190,10 +190,8 @@
 		
 		PackageDeclaration decl  = PackageDeclaration.newInstance( _packageLookupTable.get(key));
 		
-		if ( decl != null)
-		{
+		if ( decl != null){
 			decl.remove(absPath);
-			
 			// redefining it again 
 			this.definePackageDeclaration(decl);
 			return true;
@@ -220,8 +218,7 @@
 	 * and removed from the table. 
 	 * @return associated {@link PackageDeclaration}}
 	 */
-	public PackageDeclaration remove(IStrategoList id)
-	{
+	public PackageDeclaration remove(IStrategoList id){
 		_manager.logMessage(SRC+".remove", "Removing Package " + id + " from symbol table.");
 		
 		return _packageLookupTable.remove(id);
@@ -245,7 +242,7 @@
 	}
 	
 	void verifyUriExists(String uri){
-		if(containsUri(uri)){ 
+		if(!containsUri(uri)){ 
 			throw new IllegalArgumentException("Unknown Package Uri " + uri) ;
 		}
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Sep 17 02:09:31 2011	(r23363)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Sep 17 02:18:01 2011	(r23364)
@@ -346,10 +346,10 @@
 	{
 		logMessage("getModuleDeclarations | Arguments : " + filePath);
 		
-		String absFilePath = toAbsulatePath(filePath);
 		
-		//TODO : Check abspath is valid 
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		
+		String absFilePath = toAbsulatePath(filePath);
 		table.verifyUriExists(absFilePath);
 		
 		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByUri(absFilePath);
@@ -410,18 +410,14 @@
 	 * @throws IllegalArgumentException if the package id is not found in the symbol table 
 	 * @throws Exception  If package Id is valid but does not have any language descriptor registered
 	 */
-	public IStrategoTerm getLanguageDescriptor ( IStrategoAppl packageTypedQName) throws IllegalArgumentException, Exception
-	{
+	public IStrategoTerm getLanguageDescriptor ( IStrategoAppl packageTypedQName) throws IllegalArgumentException, Exception{
 		IStrategoList  packageQName = PackageDeclaration.getPackageId(getTermFactory(), packageTypedQName);
-		
-		
+
 		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
 		table.verifyPackageIDExists(packageQName) ;
 		
-		
 		LanguageDescriptor desc = table.getLangaugeDescriptor(packageQName);
-		if ( desc == null)
-		{	
+		if ( desc == null){	
 			throw new SpxSymbolTableException("Not Found LanguageDescriptor for " + packageQName.toString()); 
 		}
 		return desc.toTerm(this);
@@ -436,8 +432,7 @@
 	 */
 	public void removePackageDeclaration(
 			IStrategoString spxCompilationUnitPath , 
-			IStrategoList packageId)
-	{
+			IStrategoList packageId){
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
 		
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);

From M.A.Akhter at student.tudelft.nl  Sat Sep 17 04:38:08 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 17 Sep 2011 02:38:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23365 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110917023808.A662C108C029@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Sep 17 02:38:07 2011
New Revision: 23365
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23365&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -36,8 +36,8 @@
 	 */
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-	
 		boolean retValue = false;	
+		
 		if ( (tvars.length == NO_ARGS) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
 		{	
 			try 
@@ -46,7 +46,7 @@
 			}
 			catch(Exception ex)
 			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed. Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}	
 				
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -32,23 +32,21 @@
 	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
 	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
-	
-		if ( tvars.length != NO_ARGS || !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
-		{
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		boolean retValue = false;
+		if ( tvars.length == NO_ARGS && Tools.isTermString(tvars[PROJECT_NAME_INDEX])) {
+
+			try {
+				retValue = index.close(tvars[PROJECT_NAME_INDEX]);
+			}
+			catch(Exception ex){
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+
+			}
+		}else{
 			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" ] Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-			return false;
-		}
-		
-		try 
-		{
-			return index.close(tvars[PROJECT_NAME_INDEX]);
-		}
-		catch(Exception ex)
-		{
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed. Error : "+ ex.getMessage());
-			return false;
 		}
+
+		return retValue;
 	}	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -55,11 +55,11 @@
 			} 
 			catch(Exception ex)
 			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]   Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 			
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -49,11 +49,11 @@
 				successStatement = true;
 			} 
 			catch(Exception ex){
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -54,11 +54,11 @@
 			} 
 			catch(Exception ex)
 			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 	
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -52,11 +52,11 @@
 			catch(Exception ex)
 			{
 				// Logging any exception throw from the underlying symbol table. 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Incokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -50,11 +50,11 @@
     		}
     		catch(Exception ex)
     		{
-    			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
+    			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
     		}
     	}
     	else
-    		SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+    		SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 
     	return successStatement;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -46,11 +46,11 @@
 			} 
 			catch(Exception ex)
 			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -48,14 +48,12 @@
 				
 				successStatement = true;
 			} 
-			catch(Exception ex)
-			{
-				// Logging any exception throw from the underlying symbol table. 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
+			catch(Exception ex){
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -48,10 +48,9 @@
 				
 				successStatement = true;
 			} 
-			catch(Exception ex)
-			{
+			catch(Exception ex){
 				// Logging any exception throw from the underlying symbol table. 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -31,25 +31,22 @@
 	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
 	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-	{
-		if ( tvars.length != NO_ARGS || !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
-		{
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-			return false;
-		}	
-		
-		IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-		
-		try
-		{
-			return index.initialize(projectName , env.getFactory(), SSLLibrary.instance(env).getIOAgent());
-		}
-		catch(Exception ex)
-		{
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed. Error : "+ ex.getMessage());
-			return false;
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		boolean retStatement  = false;
+
+		if(tvars.length == NO_ARGS && Tools.isTermString(tvars[PROJECT_NAME_INDEX])) {
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			try{
+				retStatement   = index.initialize(projectName , env.getFactory(), SSLLibrary.instance(env).getIOAgent());
+			}
+			catch(Exception ex){
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+			}
 		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invocation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+
+		return retStatement;
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -46,11 +46,11 @@
 			}
 			catch(Exception ex)
 			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed . Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;	
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -47,11 +47,11 @@
 			}
 			catch(Exception ex)
 			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;	
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -52,11 +52,11 @@
 			}
 			catch(Exception ex)
 			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed . Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;	
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -58,11 +58,11 @@
 			} 
 			catch(Exception ex)
 			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error : "+ ex.getMessage());
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}
 		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invokation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
 		
 		return successStatement;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java	Sat Sep 17 02:18:01 2011	(r23364)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java	Sat Sep 17 02:38:07 2011	(r23365)
@@ -30,23 +30,18 @@
 	 */
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-	
-		if ( (tvars.length != NO_ARGS) || !Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
-		{	
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-			return false;
+		boolean retValue = false;
+		if ( (tvars.length == NO_ARGS) && Tools.isTermString(tvars[PROJECT_NAME_INDEX])) {
+			try {
+				retValue = index.save(tvars[PROJECT_NAME_INDEX]);
+			}
+			catch(Exception ex)	{
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+			}
 		}
-		
-		try 
-		{
-			return index.save(tvars[PROJECT_NAME_INDEX]);
-		}
-		catch(Exception ex)
-		{
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed. Error : "+ ex.getMessage());
-			return false;
-		}
-		
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		return retValue;
 	}
 
 }

From M.A.Akhter at student.tudelft.nl  Sat Sep 17 20:07:12 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 17 Sep 2011 18:07:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23366 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110917180712.590567F8082@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Sep 17 18:07:11 2011
New Revision: 23366
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23366&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ICompilationUnitRecordListener.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ICompilationUnitRecordListener.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ICompilationUnitRecordListener.java	Sat Sep 17 18:07:11 2011	(r23366)
@@ -0,0 +1,15 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import jdbm.RecordListener;
+
+
+/**
+ * Record Listener for Compilation Unit.  
+ *  
+ * @author Md. Adil Akhter
+ * Created On : Sep 5, 2011
+ */
+interface ICompilationUnitRecordListener
+{
+	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener();
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java	Sat Sep 17 02:38:07 2011	(r23365)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java	Sat Sep 17 18:07:11 2011	(r23366)
@@ -60,27 +60,26 @@
 		return sdfDeclaredStartSymbols;
 	}
 
-	public void addLanguageNames( ITermFactory fac , IStrategoList langNames) 
-	{ 
+	public void addLanguageNames(ITermFactory fac, IStrategoList langNames) {
 		if (languageNames == null)
 			this.languageNames = fac.makeList();
-	
-		this.languageNames =  prepend(fac, languageNames , langNames);
+
+		this.languageNames = prepend(fac, languageNames, langNames);
 	}
 
-	public void addLanguageIDs( ITermFactory fac , IStrategoList langIds) 
-	{ 
-		languageIDs =  prepend(fac, languageIDs , langIds);
+	public void addLanguageIDs(ITermFactory fac, IStrategoList langIds) {
+		languageIDs = prepend(fac, languageIDs, langIds);
 	}
 	
-	public void addEsvDeclaredStartSymbols( ITermFactory fac , IStrategoList startSymbols)
-	{
-		this.esvDeclaredStartSymbols =  prepend(fac, this.esvDeclaredStartSymbols  , startSymbols);
+	public void addEsvDeclaredStartSymbols(ITermFactory fac,
+			IStrategoList startSymbols) {
+		this.esvDeclaredStartSymbols = prepend(fac,
+				this.esvDeclaredStartSymbols, startSymbols);
 	}
-	
+
 	public void addSDFDeclaredStartSymbols( ITermFactory fac , IStrategoList startSymbols)
 	{
-		this.esvDeclaredStartSymbols =  prepend(fac, this.esvDeclaredStartSymbols  , startSymbols);
+		this.sdfDeclaredStartSymbols =  prepend(fac, this.esvDeclaredStartSymbols  , startSymbols);
 	}
 	
 	public Iterable<String> asLanguageNameStrings()

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Sat Sep 17 02:38:07 2011	(r23365)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Sat Sep 17 18:07:11 2011	(r23366)
@@ -13,19 +13,6 @@
 import jdbm.PrimaryStoreMap;
 import jdbm.RecordListener;
 
-/**
- * Record Listener for Compilation Unit.  
- *  
- * @author Md. Adil Akhter
- * Created On : Sep 5, 2011
- */
-interface ICompilationUnitRecordListener
-{
-	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener();
-}
-
-
-
 public class SpxCompilationUnitTable {
 	
 	private PrimaryHashMap<String , SpxCompilationUnitInfo> _infoMap;
@@ -49,14 +36,6 @@
 		_spxUnitStoreMap = manager.loadStoreMap(tableName + "._spxUnitStorageMap.idx");
 	}
 	
-	/**
-	 * Adds a {@code listener} in the collection of record listener 
-	 * @param listener
-	 */
-	public void addRecordListener(final RecordListener<String, SpxCompilationUnitInfo> listener) {
-		recordListeners.add((RecordListener<String, SpxCompilationUnitInfo>) listener);
-	}
-	
 	public void addRecordListener( final ICompilationUnitRecordListener rl)
 	{
 		this.addRecordListener(rl.getCompilationUnitRecordListener());
@@ -68,14 +47,6 @@
 	}
 	
 	/**
-	 * Removes {@code listener} from the collection of record listeners
-	 * @param listener
-	 */
-	public void removeRecordListener(RecordListener<String, SpxCompilationUnitInfo> listener) {	
-		recordListeners.remove(listener);
-	}
-	
-	/**
 	 * Defines a new symbol table entry. If the entry is already present in the symboltable, 
 	 * it updates the existing entry by invoking {@link #update(URI, IStrategoTerm)}. 
 	 * 
@@ -110,7 +81,6 @@
 		SpxCompilationUnitInfo newResInfo = new SpxCompilationUnitInfo(absPath,resID);
 		String key = newResInfo.getAbsPathString();
 		
-		
 		_infoMap.put(key, newResInfo);
 		
 		if(!recordListeners.isEmpty())
@@ -124,7 +94,11 @@
 	
 	
 	/**
-	 * Updates existing symbol table entry. 
+	 * Updates existing symbol table entry. Invokes all the {@link RecordListener}s' update event  
+	 * which updates the respective symbol tables accordingly. For example, if 
+	 * SpxCompilationUnit is updated in symbol table , then it invalidates all the 
+	 * enclosed {@link PackageDeclaration} and {@link ModuleDeclaration}  
+	 * and hence, {@link RecordListener} cleans up respective SymbolTable.   
 	 * 
 	 * @param absPath
 	 * @param compilationUnitRTree
@@ -135,11 +109,11 @@
 		
 		SpxCompilationUnitInfo oldValue = _infoMap.get(toAbsulatePath(absPath));
 		
-		SpxCompilationUnitInfo newValue 
-			= SpxCompilationUnitInfo.newInstance(oldValue);
+		SpxCompilationUnitInfo newValue = SpxCompilationUnitInfo.newInstance(oldValue);
+		newValue.IncrementVersionNo();
 		
 		_spxUnitStoreMap.put(newValue.getRecId(), compilationUnitRTree);
-		newValue.IncrementVersionNo();
+		
 	
 		if(!recordListeners.isEmpty())
 		{	
@@ -207,4 +181,19 @@
 			remove(keyIter.next());
 	}
 	
+	/**
+	 * Adds a {@code listener} in the collection of record listener 
+	 * @param listener
+	 */
+	private void addRecordListener(final RecordListener<String, SpxCompilationUnitInfo> listener) {
+		recordListeners.add((RecordListener<String, SpxCompilationUnitInfo>) listener);
+	}
+	
+	/**
+	 * Removes {@code listener} from the collection of record listeners
+	 * @param listener
+	 */
+	private void removeRecordListener(RecordListener<String, SpxCompilationUnitInfo> listener) {	
+		recordListeners.remove(listener);
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Sat Sep 17 02:38:07 2011	(r23365)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Sat Sep 17 18:07:11 2011	(r23366)
@@ -328,15 +328,19 @@
 			public void recordUpdated(String key,
 					SpxCompilationUnitInfo oldValue,
 					SpxCompilationUnitInfo newValue) throws IOException {
-				// do nothing 
 				
+				if(oldValue.getVersionNo() != newValue.getVersionNo()){
+					//Whenever compilation unit version no is updated , 
+					//remove all the related module declaration 
+					//from the symbol table , since it is obsolete now. 
+					removeModuleDeclarationsByUri(key);
+				}
 			}
 
 			public void recordRemoved(String key, SpxCompilationUnitInfo value)
 					throws IOException {
-				
+		
 				removeModuleDeclarationsByUri(key);
-				
 			}
 		};
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sat Sep 17 02:38:07 2011	(r23365)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sat Sep 17 18:07:11 2011	(r23366)
@@ -86,11 +86,11 @@
 		);
 	}
 	
+	
 	/**
 	 * adding a record listener to remove/cleanup symbol table and make it consistent in several scenario.
 	 */
 	private void initListeners() {
-		
 		_packageLookupTable.addRecordListener(
 				new RecordListener<IStrategoList , PackageDeclaration>(){
 
@@ -123,14 +123,15 @@
 	
 	}
 	
-	/** Returns the size of the symbol table 
+	private boolean containsUri ( String absPath ) { return _uriMap.containsKey(absPath);}
+	
+	/** 
+	 * Returns no of entries in this symbol table. 
 	 * 
-	 * @return
+	 * @return {@link Integer}
 	 */
-	public int size() 
-	{
-		return _packageLookupTable.size();
-	}
+	public int size(){ return _packageLookupTable.size(); }
+	
 	/**
 	 * Defines {@code PackageDeclaration} in current symbol table 
 	 * 
@@ -251,8 +252,6 @@
 		if(!containsPackage(packageId)) { throw new IllegalArgumentException("Unknown Package ID : "+ packageId);}
 	}  
 	
-	
-	private boolean containsUri ( String absPath ) { return _uriMap.containsKey(absPath);}
 	/**
 	 * Removes all packages located in the {@code absUri} 
 	 * 
@@ -319,19 +318,23 @@
 		
 		return new RecordListener<String, SpxCompilationUnitInfo>() {
 			
-			public void recordUpdated(String key, SpxCompilationUnitInfo oldValue,
-					SpxCompilationUnitInfo newValue) throws IOException {
-				// do nothing 
+			public void recordUpdated(String key, SpxCompilationUnitInfo oldValue,SpxCompilationUnitInfo newValue) throws IOException {
+				
+				if(oldValue.getVersionNo() != newValue.getVersionNo()){
+					//Whenever compilation unit version no is updated , 
+					//remove all the related module declaration 
+					//from the symbol table , since it is obsolete now. 
+					recordRemoved(key, oldValue); 
+				}
+
 			}
 			
-			public void recordRemoved(String key, SpxCompilationUnitInfo value)
-					throws IOException {
+			public void recordRemoved(String key, SpxCompilationUnitInfo value) throws IOException {
 				removePackageDeclarationsByUri(key);
 				
 			}
 			
-			public void recordInserted(String key, SpxCompilationUnitInfo value)
-					throws IOException {
+			public void recordInserted(String key, SpxCompilationUnitInfo value) throws IOException {
 				//do nothing 
 			}
 		};

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Sat Sep 17 02:38:07 2011	(r23365)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Sat Sep 17 18:07:11 2011	(r23366)
@@ -95,7 +95,7 @@
 	 */
 	private void initListeners()
 	{
-		// chain record listeners among the tables. 
+		// chain record listeners among the tables to keep the consistency in inter-table symbols. 
 		// If compilation unit is removed, automatically remove packages.
 		// If package is removed , automatically remove the modules that is located 
 		// in that particular compilation units 
@@ -103,8 +103,11 @@
 		_spxUnitsTable.addRecordListener((ICompilationUnitRecordListener)_spxPackageTable);
 		_spxUnitsTable.addRecordListener((ICompilationUnitRecordListener)_spxModuleTable);
 		
-		//TODO : also chain package removed event so that whenever a package is removed from
-		//symbol table, remove enclosing module declaration. 
+		
+		//TODO : Chain package removed event so that whenever a package is removed from
+		//symbol table, remove enclosing module declaration.  Currently it is linked with 
+		//the record listener of the SpxCompilationUnit. Hence, whenever a SpxCompilationUnit
+		//is updated , it updates both package and module table and underlying symbols .
 	}
 	
 	/**

From M.A.Akhter at student.tudelft.nl  Sun Sep 18 03:36:08 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 18 Sep 2011 01:36:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23367 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	spxlang tests
Message-ID: <20110918013608.6F4ED108C008@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Sep 18 01:36:08 2011
New Revision: 23367
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23367&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Sat Sep 17 18:07:11 2011	(r23366)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Sun Sep 18 01:36:08 2011	(r23367)
@@ -36,11 +36,20 @@
 		_spxUnitStoreMap = manager.loadStoreMap(tableName + "._spxUnitStorageMap.idx");
 	}
 	
+	/**
+	 * Adds {@link ICompilationUnitRecordListener} in recordlistener collection 
+	 * @param rl
+	 */
 	public void addRecordListener( final ICompilationUnitRecordListener rl)
 	{
 		this.addRecordListener(rl.getCompilationUnitRecordListener());
 	}
 	
+	/**
+	 * Removes {@link ICompilationUnitRecordListener} in recordlistener collection
+	 * 
+	 * @param rl
+	 */
 	public void removeRecordListener( final ICompilationUnitRecordListener rl)
 	{
 		this.removeRecordListener(rl.getCompilationUnitRecordListener());
@@ -68,13 +77,12 @@
 	 * Adds the new CompilationUnit.
 	 * 
 	 * @param absPath
-	 * @param compilationUnitRTree
+	 * @param compilationUnitAST
 	 * @throws IOException 
 	 */
-	private void add(URI absPath , IStrategoTerm compilationUnitRTree) throws IOException 
-	{
-		// adding Compilation Unit to the storemap
-		long resID = _spxUnitStoreMap.putValue(compilationUnitRTree);
+	private void add(URI absPath , IStrategoTerm compilationUnitAST) throws IOException {
+		
+		long resID = _spxUnitStoreMap.putValue(compilationUnitAST); // Adding Compilation Unit to the storemap
 		
 		// instantiating a new SpxCompilationUnitInfo object with the newly created resID
 		// and storing it in infomap
@@ -92,7 +100,6 @@
 		}
 	}
 	
-	
 	/**
 	 * Updates existing symbol table entry. Invokes all the {@link RecordListener}s' update event  
 	 * which updates the respective symbol tables accordingly. For example, if 
@@ -101,38 +108,31 @@
 	 * and hence, {@link RecordListener} cleans up respective SymbolTable.   
 	 * 
 	 * @param absPath
-	 * @param compilationUnitRTree
+	 * @param compilationUnitAterm
 	 * @throws IOException 
 	 */
-	private void update(URI absPath , IStrategoTerm compilationUnitRTree) throws IOException
-	{	
+	private void update(URI absPath , IStrategoTerm compilationUnitAterm) throws IOException {	
 		
 		SpxCompilationUnitInfo oldValue = _infoMap.get(toAbsulatePath(absPath));
-		
 		SpxCompilationUnitInfo newValue = SpxCompilationUnitInfo.newInstance(oldValue);
 		newValue.IncrementVersionNo();
 		
-		_spxUnitStoreMap.put(newValue.getRecId(), compilationUnitRTree);
-		
+		_spxUnitStoreMap.put(newValue.getRecId(), compilationUnitAterm);
 	
-		if(!recordListeners.isEmpty())
-		{	
-			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners)
-			{
+		if(!recordListeners.isEmpty()){	
+			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners){
 				r.recordUpdated(toAbsulatePath(absPath), oldValue , newValue);
 			}
 		}
 	}
 	
-	
 	/**
 	 * Removes a SPX Compilation Unit from the symbol table.
 	 * 
 	 * @param absPath URI for the SPXCompilationUnit to remove
 	 * @throws IOException 
 	 */
-	public void remove(URI absPath) throws IOException
-	{
+	public void remove(URI absPath) throws IOException{
 		String key = toAbsulatePath(absPath);
 		
 		remove(key);
@@ -165,14 +165,12 @@
 	 * @param absPath
 	 * @return
 	 */
-	public IStrategoTerm get(URI absPath)
-	{
+	public IStrategoTerm get(URI absPath){
 		String key = toAbsulatePath(absPath);
 		
 		SpxCompilationUnitInfo retUnitData= _infoMap.get(key);
 		
 		return _spxUnitStoreMap.get(retUnitData.getRecId());
-		
 	}
 	
 	public void clear() throws IOException{

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sat Sep 17 18:07:11 2011	(r23366)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sun Sep 18 01:36:08 2011	(r23367)
@@ -288,7 +288,7 @@
 		try
 		{
 			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-			idxFacade.clearSymbolTable();
+			idxFacade.reinitSymbolTable();
 			retValue = true;
 		}
 		catch(IllegalStateException e)
@@ -336,7 +336,7 @@
 	
 	
 	public boolean close(IStrategoTerm projectName) throws IOException {
-		removeFacade(projectName);
+		_facadeRegistry.removeFacade(projectName);
 		return true;
 	}
 	
@@ -365,13 +365,6 @@
 		ensureInitialized(facade);
 		return facade;
 	}
-	
-	private SpxSemanticIndexFacade removeFacade(IStrategoTerm projectName) throws IOException {
-
-		SpxSemanticIndexFacade facade = _facadeRegistry.removeFacade(projectName);
-		ensureInitialized(facade);
-		return facade;
-	}
 	
 	private void ensureInitialized(SpxSemanticIndexFacade idxFactory) throws IllegalStateException {
 		if (idxFactory == null)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Sep 17 18:07:11 2011	(r23366)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sun Sep 18 01:36:08 2011	(r23367)
@@ -191,9 +191,8 @@
 	 * 
 	 * @param packageDeclaration
 	 */
-	public void indexPackageDeclaration(IStrategoAppl packageDeclaration)
-	{
-		assertConstructor(
+	public void indexPackageDeclaration(IStrategoAppl packageDeclaration){
+		verifyConstructor(
 				packageDeclaration.getConstructor(), 
 				getPackageDeclCon(), 
 				"Illegal PackageDeclaration");
@@ -205,13 +204,12 @@
 	}
 	
 	/**
-	 * Indexes Spoofaxlang PackageDeclaration 
+	 * Indexes {@link PackageDeclaration}
 	 * 
 	 * @param packageIdAppl 
 	 * @param spxCompilationUnitPath
 	 */
-	public void indexPackageDeclaration(IStrategoAppl packageIdAppl, IStrategoString spxCompilationUnitPath	)
-	{
+	public void indexPackageDeclaration(IStrategoAppl packageIdAppl, IStrategoString spxCompilationUnitPath){
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
 		
 		IStrategoList packageId = PackageDeclaration.getPackageId(getTermFactory(), packageIdAppl);
@@ -219,12 +217,11 @@
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
 		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
 		
-		if(table.containsPackage(packageId))
+		if(table.containsPackage(packageId)){
  			table.addPackageDeclarationLocation(
 					packageId, 
 					toAbsulatePath(spxCompilationUnitPath));
-		else
-		{	
+		}else{	
 			PackageDeclaration pDecl = new PackageDeclaration(
 					toAbsulatePath(spxCompilationUnitPath), 
 					packageId);
@@ -239,7 +236,7 @@
 	 */
 	public void indexLanguageDescriptor (IStrategoAppl languageDescriptor)
 	{
-		assertConstructor(languageDescriptor.getConstructor(), getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
+		verifyConstructor(languageDescriptor.getConstructor(), getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
 
 		IStrategoList qualifiedPackageId = PackageDeclaration.getPackageId(getTermFactory(), (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
@@ -327,7 +324,6 @@
 		return decl.toTerm(this);
 	}
 	
-
 	public IStrategoTerm getModuleDeclarationsOf(IStrategoTerm res) {
 		
 		IStrategoTerm retValue ;
@@ -346,7 +342,6 @@
 	{
 		logMessage("getModuleDeclarations | Arguments : " + filePath);
 		
-		
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 		
 		String absFilePath = toAbsulatePath(filePath);
@@ -375,7 +370,6 @@
 		
 		return result;
 	}	
-
 	
 	/** 
 	 * Returns ModuleDefinition for the Module with ID :  {@code moduleTypedQName}
@@ -401,7 +395,6 @@
 			throw new IllegalArgumentException( "Unknown Module Id"+ moduleTypedQName.toString());
 	}
 	
-	
 	/**
 	 * Returns {@link LanguageDescriptor} for Spoofaxlang package with {@link packageTypedQName}}
 	 *  
@@ -423,7 +416,6 @@
 		return desc.toTerm(this);
 	}
 	
-	
 	/**
 	 * Removes PackageDeclaration mapped with the {@code spxCompilationUnitPath}
 	 * 
@@ -445,7 +437,6 @@
 				asJavaString(spxCompilationUnitPath));
 	}
 
-	
 	/**
 	 * Indexes {@code moduleDefinition}
 	 * 
@@ -454,7 +445,7 @@
 	 */
 	public void indexModuleDefinition(IStrategoAppl moduleDefinition) throws IllegalArgumentException
 	{
-		assertConstructor(moduleDefinition.getConstructor() , _moduleDefCon , "Illegal Module Definition" );
+		verifyConstructor(moduleDefinition.getConstructor() , _moduleDefCon , "Illegal Module Definition" );
 		
 		indexModuleDefinition(	(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.ModuleTypedQNameIndex), 
 								(IStrategoString) moduleDefinition.getSubterm(ModuleDeclaration.ModulePathIndex), 
@@ -466,6 +457,7 @@
 
 	/**
 	 * Indexes Module Definition, e.g. ModuleDef :  Module * String * Package * Term * Term -> Def
+	 * 
 	 * @param moduleQName
 	 * @param spxCompilationUnitPath
 	 * @param packageQName
@@ -496,17 +488,13 @@
 
 		table.define(new ModuleDeclaration(toAbsulatePath(spxCompilationUnitPath), moduleId, packageId), ast, analyzedAst);
 	}
-
 	
 	/**
 	 * Saves(Commits) any unsaved data. 
 	 *  
 	 * @throws IOException
 	 */
-	public void persistChanges() throws IOException 
-	{
-		_persistenceManager.commit();
-	}
+	public void persistChanges() throws IOException {  _persistenceManager.commit(); }
 	
 	/**
 	 * Closes any underlying open connection. 
@@ -517,12 +505,19 @@
 		if (!isPersistenceManagerClosed()) {
 			logMessage("close | closing underlying persistence manager instance.");
 			_persistenceManager.commitAndClose();
-		} else
+		}else {
 			logMessage("close | underlying persistence manager is already closed. ");
+		}	
 	}	
-	
-	public void clearSymbolTable() throws IOException 
-	{
+
+	/**
+	 * Re-initialize Symbol Tables . It clears all the existing entries from  
+	 * symbol tables.
+	 * 
+	 * @throws IOException
+	 */
+	public void reinitSymbolTable() throws IOException {
+		
 		if (! isPersistenceManagerClosed())
 			_persistenceManager.clearAll();
 	}
@@ -538,31 +533,22 @@
 	/**
 	 * @return the PackageDeclaration Constructor
 	 */
-	public IStrategoConstructor getPackageDeclCon() {
-		return _packageDeclCon;
-	}
+	public IStrategoConstructor getPackageDeclCon() { return _packageDeclCon; }
 	
-	public IStrategoConstructor getModuleDeclCon() {
-		return _moduleDeclCon;
-	}
+	public IStrategoConstructor getModuleDeclCon() { return _moduleDeclCon; }
 
 	/**
 	 * @return the ModuleDefinition Constructor
 	 */
-	public IStrategoConstructor getModuleDefCon() {
-		return _moduleDefCon;
-	}
+	public IStrategoConstructor getModuleDefCon() {	return _moduleDefCon; }
 
-	public IStrategoConstructor getLanguageDescriptorCon() {
-		return _languageDescriptorCon;
-	}
+	public IStrategoConstructor getLanguageDescriptorCon() { return _languageDescriptorCon;	}
 	
 	/**
 	 * @param spxCompilationUnitAST
 	 * @return
 	 */
 	private IStrategoTerm toCompactPositionInfo(IStrategoTerm term) {
-		
 		if( term == null) return term;
 		
 		ImploderAttachment astAttachment = ImploderAttachment.getCompactPositionAttachment(term, true);
@@ -571,10 +557,7 @@
 		return astTerm;
 	}
 
-	private IStrategoTerm strip(IStrategoTerm term)
-	{
-		return _stripper.strip(term);
-	}
+	private IStrategoTerm strip(IStrategoTerm term) { return _stripper.strip(term); 	}
 	
 	/**
 	 * Returns the Absolute Path of the given URI 
@@ -594,19 +577,14 @@
 	 * @param path
 	 * @return
 	 */
-	URI toFileURI(String path)
+	private URI toFileURI(String path)
 	{
 		File file = new File(path);
 		return	file.isAbsolute()? file.toURI()
 			  			 : new File(_agent.getWorkingDir(), path).toURI();
 	}
 
-	URI toFileURI(IStrategoTerm filePath) 
-	{
-		return toFileURI(Tools.asJavaString(filePath));
-	}
-
-	
+	private URI toFileURI(IStrategoTerm filePath) {	return toFileURI(Tools.asJavaString(filePath)); }
 
 	/**
 	 * Verify type of declaration . 
@@ -615,21 +593,17 @@
 	 * @param expected
 	 * @param message
 	 */
-	public  void assertConstructor( IStrategoConstructor actual , IStrategoConstructor expected , String message)
-	{
+	public  void verifyConstructor( IStrategoConstructor actual , IStrategoConstructor expected , String message){
 		if( actual != expected)
 			throw new IllegalArgumentException(message);
 	}
-	
-	
-	
+
 	/**
 	 * Logs message 
 	 * 
 	 * @param message
 	 */
 	private void logMessage(String message) {
-		
 		_persistenceManager.logMessage("SpxSemanticIndexFacade", message);
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Sat Sep 17 18:07:11 2011	(r23366)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Sun Sep 18 01:36:08 2011	(r23367)
@@ -45,8 +45,7 @@
 		if(fac != null)
 			_registry.put(fac.getProjectNameString(), fac);
 	}
-	
-	
+
 	/**
 	 * Gets the porject's Semantic Index factory . If it is initialized and somehow is not closed 
 	 * then it returns the instance of the factory to perform further operation. 
@@ -69,15 +68,12 @@
 		
 		return facade;
 	}
-	
-	
-	public void clearAll() throws IOException
-	{
+
+	public void clearAll() throws IOException{
 		for ( String fname : _registry.keySet())
 			remove(fname);
 	}
-
-
+	
 	public SpxSemanticIndexFacade removeFacade(IStrategoTerm projectName) throws IOException {
 		String key = asJavaString(projectName);
 		
@@ -94,8 +90,7 @@
 		return facade;
 	}
 	
-	public boolean containsFacade(IStrategoTerm projectName)
-	{
+	public boolean containsFacade(IStrategoTerm projectName){
 		String key = asJavaString(projectName);
 		
 		return _registry.containsKey(key);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Sat Sep 17 18:07:11 2011	(r23366)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Sun Sep 18 01:36:08 2011	(r23367)
@@ -44,7 +44,7 @@
 		
 	
 		_facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
-		_facade.clearSymbolTable();
+		_facade.reinitSymbolTable();
 	}
 	
 	@Override 
@@ -90,7 +90,7 @@
 		
 		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
 		
-		_facade.assertConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration"); 
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration"); 
 	}
 	
 	public void testIndexPackageDeclarationInMultipleFiles() 
@@ -108,7 +108,7 @@
 		
 		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
 		
-		_facade.assertConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
 		
 		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
 	}
@@ -130,7 +130,7 @@
 		
 		IStrategoAppl moduleDeclaration = (IStrategoAppl)_facade.getModuleDeclaration( mQnameAppl );
 		
-		_facade.assertConstructor(moduleDeclaration.getConstructor(), _facade.getModuleDeclCon(), "Wrong Module Declaration Constructs");
+		_facade.verifyConstructor(moduleDeclaration.getConstructor(), _facade.getModuleDeclCon(), "Wrong Module Declaration Constructs");
 	}
 	
 	private void indexTestModuleDefs( String moduleName , String packageQName , String filePath)

From M.A.Akhter at student.tudelft.nl  Sun Sep 18 23:40:42 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 18 Sep 2011 21:40:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23368 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	spxlang tests
Message-ID: <20110918214042.2C09A108C00E@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Sep 18 21:40:40 2011
New Revision: 23368
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23368&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Sun Sep 18 01:36:08 2011	(r23367)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Sun Sep 18 21:40:40 2011	(r23368)
@@ -344,4 +344,13 @@
 			}
 		};
 	}
+
+	/**
+	 * Returns all the {@link ModuleDeclaration} declared in the current package. 
+	 * 
+	 * @return 
+	 */
+	public Iterable<ModuleDeclaration> getModuleDeclarations() {
+		return this._moduleLookupMap.values();
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sun Sep 18 01:36:08 2011	(r23367)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sun Sep 18 21:40:40 2011	(r23368)
@@ -203,6 +203,11 @@
 	public PackageDeclaration getPackageDeclaration(IStrategoList id) {
 		return _packageLookupTable.get(id);
 	}
+	
+	
+	public Iterable<PackageDeclaration> getPackageDeclarations(){
+		return _packageLookupTable.values();
+	}
 	/**
 	 * Returns language descriptor associated with id 
 	 * @param id package id whose language descriptor is to be returned

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sun Sep 18 01:36:08 2011	(r23367)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sun Sep 18 21:40:40 2011	(r23368)
@@ -207,7 +207,7 @@
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm uri) throws Exception  {
 					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-					return idxFacade.getPackageDeclarationsByUri((IStrategoString)uri);
+					return idxFacade.getPackageDeclarations((IStrategoString)uri);
 			} 
 		};
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sun Sep 18 01:36:08 2011	(r23367)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sun Sep 18 21:40:40 2011	(r23368)
@@ -31,6 +31,10 @@
 	private final IStrategoConstructor _packageDeclCon;
 	private final IStrategoConstructor _languageDescriptorCon;
 
+	private static final String All= "*";
+	
+
+	
 	/**
 	 * Initializes the SemanticIndexFactory
 	 * @param projectName name of the project 
@@ -287,16 +291,24 @@
 		
 		return decl.toTerm(this);
 	}
+	
+	public IStrategoList getPackageDeclarations(IStrategoString filePath) {
 
-	public IStrategoList getPackageDeclarationsByUri(IStrategoString uri) {
-
-		logMessage("getPackageDeclarationsByUri | Arguments : " + uri);
+		logMessage("getPackageDeclarationsByUri | Arguments : " + filePath);
 
 		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
-		String absFilePath = toAbsulatePath(uri);
-		table.verifyUriExists(absFilePath);
-		Iterable<PackageDeclaration> decls = table.packageDeclarationsByUri(absFilePath);
-
+		String filepathString = asJavaString(filePath);
+		
+		Iterable<PackageDeclaration> decls; 
+		if(All == filepathString) {
+			decls = table.getPackageDeclarations();  //returning all the package declarations found in the current project
+		}else{
+
+			String absFilePath = toAbsulatePath(filePath);
+			table.verifyUriExists(absFilePath);
+			decls = table.packageDeclarationsByUri(absFilePath);
+		}
+		
 		IStrategoList result =  PackageDeclaration.toTerm(this, decls);
 		logMessage("getPackageDeclarationsByUri | Returning IStrategoList : " + result );
 
@@ -338,21 +350,23 @@
 		return retValue;
 	}
 
-	public IStrategoList getModuleDeclarations (IStrategoString filePath)
-	{
+	public IStrategoList getModuleDeclarations (IStrategoString filePath){
 		logMessage("getModuleDeclarations | Arguments : " + filePath);
 		
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		String filepathString = asJavaString(filePath);
 		
-		String absFilePath = toAbsulatePath(filePath);
-		table.verifyUriExists(absFilePath);
-		
-		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByUri(absFilePath);
+		Iterable<ModuleDeclaration> decls; 
+		if(All == filepathString) {
+			decls = table.getModuleDeclarations();  //returning all the package declarations found in the current project
+		}else{	
+			String absFilePath = toAbsulatePath(filePath);
+			table.verifyUriExists(absFilePath);
+			decls = table.getModuleDeclarationsByUri(absFilePath);
+		}
 		
 		IStrategoList result =  ModuleDeclaration.toTerm(this, decls);
-		
 		logMessage("getModuleDeclarations | Returning IStrategoList : " + result );
-		
 		return result;
 	}
 
@@ -569,9 +583,9 @@
 	{
 		URI resUri = toFileURI(uri);
 		
-		return new File(resUri).getAbsolutePath();
-		
+		return new File(resUri).getAbsolutePath().trim();
 	}
+
 	/**
 	 * Returns URI 
 	 * @param path

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Sun Sep 18 01:36:08 2011	(r23367)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Sun Sep 18 21:40:40 2011	(r23368)
@@ -70,7 +70,7 @@
 	}
 
 	public void clearAll() throws IOException{
-		for ( String fname : _registry.keySet())
+		for(String fname : _registry.keySet())
 			remove(fname);
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Sun Sep 18 01:36:08 2011	(r23367)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Sun Sep 18 21:40:40 2011	(r23368)
@@ -248,11 +248,11 @@
 		IStrategoList actuals = null;
 
 		
-		actuals = _facade.getPackageDeclarationsByUri(termFactory().makeString(absPathString2));
+		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString2));
 		assertEquals(1, actuals.getSubtermCount());
 		
 
-		actuals = _facade.getPackageDeclarationsByUri(termFactory().makeString(absPathString1));
+		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString1));
 		assertEquals(2, actuals.getSubtermCount());
 	}
 

From M.A.Akhter at student.tudelft.nl  Mon Sep 19 23:32:05 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 19 Sep 2011 21:32:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23369 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110919213205.40F927F8010@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Sep 19 21:32:04 2011
New Revision: 23369
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23369&sc=1

Log:
converting terms . deep copy.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java	Sun Sep 18 21:40:40 2011	(r23368)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java	Mon Sep 19 21:32:04 2011	(r23369)
@@ -5,6 +5,7 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.TermConverter;
 
 /**
  * @author Md. Adil Akhter
@@ -46,6 +47,7 @@
 	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
 
 		ITermFactory termFactory = idxFacade.getTermFactory();
+		TermConverter termConverter = idxFacade.getTermConverter();
 		
 		IStrategoTerm moduleDeclarationTerm = super.toTerm(idxFacade);
 		IStrategoConstructor moduleDefCons = idxFacade.getModuleDefCon();
@@ -56,8 +58,9 @@
 				moduleDeclarationTerm.getSubterm(0),
 				moduleDeclarationTerm.getSubterm(1),
 				moduleDeclarationTerm.getSubterm(2),
-				ast,
-				analyzedAst);
+				termConverter.convert( ast),
+				termConverter.convert( analyzedAst ) 
+				);
 		
 		return this.forceImploderAttachment(retTerm);
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sun Sep 18 21:40:40 2011	(r23368)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Mon Sep 19 21:32:04 2011	(r23369)
@@ -14,17 +14,21 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.TermConverter;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.terms.attachments.TermAttachmentStripper;
 
 public class SpxSemanticIndexFacade {
 
 	private final ISpxPersistenceManager _persistenceManager;
+	
 	private final String _projectName ; 
 	private final ITermFactory _termFactory;
 	private final IOAgent _agent;
+	
 	private final SpxSemanticIndexEntryFactory _entryFactory;
 	private final TermAttachmentStripper _stripper;
+	private final TermConverter _converter;
 	
 	private final IStrategoConstructor _moduleDefCon;
 	private final IStrategoConstructor _moduleDeclCon;
@@ -51,7 +55,10 @@
 
 		_termFactory = termFactory;
 		_agent = agent;
+		
 		_stripper = new TermAttachmentStripper(_termFactory);
+		_converter = new TermConverter(_termFactory);
+		_converter.setOriginEnabled(true);
 		
 		_moduleDefCon  			= _termFactory.makeConstructor("ModuleDef", 5);
 		_moduleDeclCon 			= _termFactory.makeConstructor("ModuleDecl", 3);
@@ -67,6 +74,7 @@
 	 */
 	public ITermFactory getTermFactory() { return _termFactory; }
 
+	public TermConverter getTermConverter() {return _converter ; }
 	/**
 	 * Gets the project name as String
 	 * @return
@@ -402,7 +410,10 @@
 		
 		if (decl != null)
 		{	
-			ModuleDefinition def = new ModuleDefinition( decl , table.getModuleDefinition(qualifiedModuleId) , table.getAnalyzedModuleDefinition(qualifiedModuleId));
+			IStrategoTerm moduleAterm =table.getModuleDefinition(qualifiedModuleId) ;
+			IStrategoTerm moduleAnnotatedAterm  = table.getAnalyzedModuleDefinition(qualifiedModuleId);
+			
+			ModuleDefinition def = new ModuleDefinition( decl , (IStrategoAppl)moduleAterm, (IStrategoAppl)moduleAnnotatedAterm);
 			return def.toTerm(this);
 		}
 		else
@@ -491,9 +502,9 @@
 		
 		moduleId = (IStrategoList) toCompactPositionInfo(moduleId);
 		packageId = (IStrategoList) toCompactPositionInfo(packageId);
-		ast = (IStrategoAppl) strip(ast);
-		analyzedAst = (IStrategoAppl) strip(analyzedAst);
-		spxCompilationUnitPath = (IStrategoString) strip(spxCompilationUnitPath);
+		ast = (IStrategoAppl) ast;
+		analyzedAst = (IStrategoAppl)analyzedAst;
+		spxCompilationUnitPath = (IStrategoString) spxCompilationUnitPath;
 
 		// verify whether the enclosing package exists in symbol table
 		if (!_persistenceManager.spxPackageTable().containsPackage(packageId))

From R.B.Vermaas at tudelft.nl  Tue Sep 20 14:26:09 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 20 Sep 2011 12:26:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23370 - hydra/webdsl
Message-ID: <20110920122609.26644108C027@mx3.tudelft.nl>

Author: rob
Date: Tue Sep 20 12:26:08 2011
New Revision: 23370
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23370&sc=1

Log:
add 1G of memory to machine running webcheck

Modified:
   hydra/webdsl/machine.nix

Modified: hydra/webdsl/machine.nix
==============================================================================
--- hydra/webdsl/machine.nix	Mon Sep 19 21:32:04 2011	(r23369)
+++ hydra/webdsl/machine.nix	Tue Sep 20 12:26:08 2011	(r23370)
@@ -1,6 +1,6 @@
 { config, pkgs, ... }:
 {
-  virtualisation.memorySize = pkgs.lib.mkOverride 150 2047;
+  virtualisation.memorySize = pkgs.lib.mkOverride 150 3072;
   virtualisation.diskSize = 2048;
   environment.systemPackages = [ pkgs.firefox pkgs.ant pkgs.jdk pkgs.subversion pkgs.maven2 ];
   system.copySystemConfiguration = false;

From m.dejonge at tudelft.nl  Tue Sep 20 16:15:02 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 20 Sep 2011 14:15:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23371 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110920141502.612057F8028@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Sep 20 14:15:02 2011
New Revision: 23371
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23371&sc=1

Log:
bugfix 355: NPE in NewStructureSkipper when triggering completion

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/NewStructureSkipper.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/NewStructureSkipper.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/NewStructureSkipper.java	Tue Sep 20 12:26:08 2011	(r23370)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/NewStructureSkipper.java	Tue Sep 20 14:15:02 2011	(r23371)
@@ -406,9 +406,8 @@
     
     private int findParentBegin(int startLineIndex) {
         int indentStartLine=separatorIndent(startLineIndex); 
-        int indexHistoryLines=startLineIndex;
+        int indexHistoryLines=startLineIndex-1;
         while(indexHistoryLines > 0){
-            indexHistoryLines-=1;            
             int indentSkipPosition=separatorIndent(indexHistoryLines); //currentLine.getIndentValue();
             indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
             if (shift==indentShift.DEDENT){
@@ -421,6 +420,7 @@
                 }                
                 return indexHistoryLines;
             }            
+            indexHistoryLines-=1;            
         }        
         return 0; //SOF
     }
@@ -454,7 +454,7 @@
     private String readLine(int index) {
         while(getHistory().getIndexLastLine()<=index && myParser.getCurrentToken()!=SGLR.EOF)
             getHistory().readRecoverToken(myParser, false);
-        if(index<=getHistory().getIndexLastLine()){
+        if(0 <= index && index<=getHistory().getIndexLastLine()){
             IndentInfo line=getHistory().getLine(index);
             return readLine(line);
         }

From M.A.Akhter at student.tudelft.nl  Wed Sep 21 01:29:52 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 20 Sep 2011 23:29:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23372 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	jdbm/test org/spoofax/interpreter/library/language/spxlang
	org/spoofax/interpreter/library/l...
Message-ID: <20110920232952.8D6A02B8004@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Sep 20 23:29:52 2011
New Revision: 23372
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23372&sc=1

Log:
-cleanup

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
      - copied, changed from r23319, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/test/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentStoreTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexEntryFactory.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -1,10 +1,11 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 
-import java.net.URI;
+import java.util.HashSet;
+import java.util.Set;
 
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
  * BaseScope  is an abstract base class that implements Scope Interface
@@ -12,72 +13,56 @@
  * @author Md. Adil Akhter
  * Created On : Aug 27, 2011
  */
-abstract class BaseScope implements Scope {
+abstract class BaseScope implements INamespace {
 	
-	private IStrategoTerm _id;
-		
-	private final ITermFactory _termFactory;
+	private static final long serialVersionUID = 2052337390283813190L;
+	
+	protected final IStrategoConstructor type;
+	protected final String  src;
+	
+	private  final NamespaceId _currentNamespace; 
+	private final NamespaceId _enclosingNamespace;
+	
+	private final MultiValuePersistentTable _symbols;
+	
+	
+	public BaseScope(NamespaceId currentNS , IStrategoConstructor type, NamespaceId enclosingNS, ISpxPersistenceManager manager) {
+		assert currentNS!= null : "Current NS Identifier is null";
+		assert type!= null      : "Non-null Type is expected";
 		
-	public BaseScope(IStrategoTerm id, ITermFactory termFactory) {
+		_currentNamespace = currentNS;
+		_enclosingNamespace = enclosingNS; 
 		
-		_termFactory = termFactory;
+		this.type = type;
 		
-		setScopeId(id);
-	}
-	
-	protected ITermFactory getTermFactory() {
-		return _termFactory;
-	}
-	
-	public IStrategoTerm getScopeId() {
-		return _id;
+		src = type().toString() + _enclosingNamespace.UniqueID(); 
+			
+		_symbols = new MultiValuePersistentTable( manager.getProjectName()+src , manager);
 	}
 
-	private void setScopeId(IStrategoTerm _id) {
-		this._id = _id;
+	public void define(SpxSymbol sym,ILogger logger){
+		sym.setNamespace(_currentNamespace);
+		
+		logger.logMessage(src, "Defining Symbol "+ sym);
+		
+		_symbols.define(sym);
 	}
-	
-	public abstract IStrategoTerm getType(); 
-
+		
 	/* 
 	 * Returns the enclosing scope of the current scope.
 	 * */
-	public Scope getEnclosingScope() {
-		return null;
-	}
+	public NamespaceId getEnclosingNamespace() { return _enclosingNamespace; }
 	
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + ((_id == null) ? 0 : _id.hashCode());
-		return result;
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		BaseScope other = (BaseScope) obj;
-		if (_id == null) {
-			if (other._id != null)
-				return false;
-		} else if (!_id.match(other._id))
-			return false;
-		return true;
+	public NamespaceId getCurrentNamespace(){ return _currentNamespace; }
+	
+	public Iterable<SpxSymbol> resolve(INamespaceResolver nsResolver, IStrategoTerm id, SearchPattern pattern,ILogger logger){
+		Set<SpxSymbol> symbols = new HashSet<SpxSymbol>(); 
+		
+		
+		return symbols;
 	}
 	
-	/* Gets the URI of the current scope. Returns Null is scope is not associated with 
-	 * any URI.
-	 * 
-	 * @see org.spoofax.interpreter.library.language.spxlang.Scope#getScopeURI()
-	 */
-	public URI getScopeURI() {
-		
-		return null;
-	} 
-}
+	public IStrategoConstructor type() {
+		return type;
+	}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -1,22 +1,43 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
 class GlobalScope extends BaseScope {
 	
-	private final String _scopeType = "Global" ;
+	private static final long serialVersionUID = -9194490383911401603L;
+	private static final String CTOR_NAME = "Global" ;
 	
-	public GlobalScope(IStrategoTerm id , ITermFactory factory) {
-		
-		super(id , factory);
+	public GlobalScope(NamespaceId id , IStrategoConstructor type, ISpxPersistenceManager manager){
+		super(id ,type, null, manager);
 	}
 	
 	/**
-	 * Returns the type of the current Scope 
+	 * Creates an instance of GlobalScope. Point of caution : GlobalScope is valid  
+	 * for the current project. 
+	 * 
+	 * @param facade
+	 * @return
 	 */
-	public IStrategoTerm getType() {
+	public static INamespace createInstance(SpxSemanticIndexFacade facade) 
+	{
+		ITermFactory termFactory = facade.getTermFactory();
+
+		NamespaceId id = new NamespaceId(getGlobalScopeId(facade));
+		
+		GlobalScope scope = new GlobalScope(id, 
+											termFactory.makeConstructor(CTOR_NAME, 0), 
+											facade.getPersistenceManager()
+											);
+		return scope;
+	}
+	
+	
+	static IStrategoList getGlobalScopeId(SpxSemanticIndexFacade facade){
+		ITermFactory termFactory = facade.getTermFactory();
 		
-		return getTermFactory().makeConstructor(_scopeType, 0);
+		return termFactory.makeList(termFactory.makeString(CTOR_NAME));
 	}
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java (from r23319, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IScope.java	Mon Sep 12 10:10:49 2011	(r23319, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -1,36 +1,34 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.io.Serializable;
 import java.net.URI;
 
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
 
-interface IScope {
+interface INamespace extends Serializable {
     
-	public String getScopeName();
+	public NamespaceId getEnclosingNamespace();
 
-    public ScopeIdentifier getEnclosingScope();
-
-    public void define(SpxSymbol sym);
+	public NamespaceId getCurrentNamespace();
+	
+	public void define(SpxSymbol sym , ILogger logger) ;
+    
+	public Iterable<SpxSymbol> resolve(INamespaceResolver nsResolver, IStrategoTerm id, SearchPattern pattern , ILogger logger);
     
-    public SpxSymbol resolve(String name);
+	IStrategoConstructor type(); 
 }
 
-interface ISpxType {
-	
-	public String getName();
+enum SearchPattern
+{
+	ALL,
+	ONE
 }
 
 
-interface Scope 
-{
-	public IStrategoTerm getScopeId();
+interface INamespaceResolver {
 	
-	public Scope getEnclosingScope();
-	
-	public IStrategoTerm getType();
-	
-	public URI getScopeURI();
-	
-	//TODO : Add Scope specific Define and Resolve 
-	//
-}
\ No newline at end of file
+	public INamespace resolveScope(NamespaceId nsId);
+}
+

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -7,7 +7,7 @@
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
 
-public interface ISpxPersistenceManager {
+public interface ISpxPersistenceManager  extends ILogger{
 
 	public void commitAndClose()  throws IOException;
 	
@@ -27,5 +27,9 @@
 	
 	public void clearAll() throws IOException;
 	
-	public void logMessage(String origin, String message);
+	public String getProjectName();
+}
+
+interface ILogger{ 
+	public void logMessage(String origin, String message); 
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -2,6 +2,8 @@
 
 import java.net.URI;
 
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
@@ -12,91 +14,31 @@
 
 class ModuleScope extends BaseScope
 {
-	private Scope _enclosingScope;
+	private static final String CTOR_NAME = "Module" ;
+	private static final long serialVersionUID = 5255913747644738988L;
 	
-	private final String _scopeType = "Module" ;
-	
-	private URI _file; 
-	/**
-	 * Instantiates ModuleScope.  
-	 * 
-	 * @param id refers to the ID of the Scope
-	 * @param enclosingScope refers to the enclosing scope. It
-	 * provides a reference to the container of the current Scope.  
-	 */
-	public ModuleScope(IStrategoTerm id, Scope enclosingScope , ITermFactory factory , URI file) {
-		super(id,factory);
-
-		this._enclosingScope = enclosingScope;
-		this._file = file;
+	public ModuleScope(NamespaceId currentNS, IStrategoConstructor type,NamespaceId enclosingNS, ISpxPersistenceManager manager) {
+		super(currentNS, type, enclosingNS, manager);
+		
 	}
 	
-	public Scope getEnclosingScope() {
-		return _enclosingScope;
-	}
 	
 	/**
-	 * Returns the type of the Scope 
-	 */
-	public IStrategoTerm getType() {
-		return getTermFactory().makeConstructor(_scopeType, 0);
-	}
-
-	/* 
-	 * (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (!super.equals(obj))
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		
-		ModuleScope other = (ModuleScope) obj;
-		if (_enclosingScope == null) {
-			if (other._enclosingScope != null)
-				return false;
-		} else if (!_enclosingScope.equals(other._enclosingScope))
-			return false;
-		if (_file == null) {
-			if (other._file != null)
-				return false;
-		} else if (!_file.equals(other._file))
-			return false;
-		if (_scopeType == null) {
-			if (other._scopeType != null)
-				return false;
-		} else if (!_scopeType.equals(other._scopeType))
-			return false;
-		return true;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = super.hashCode();
-		result = prime * result
-				+ ((_enclosingScope == null) ? 0 : _enclosingScope.hashCode());
-		result = prime * result + ((_file == null) ? 0 : _file.hashCode());
-		result = prime * result
-				+ ((_scopeType == null) ? 0 : _scopeType.hashCode());
-		return result;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
+	 * Creates an instance of GlobalScope. Point of caution : GlobalScope is valid  
+	 * for the current project. 
+	 * 
+	 * @param facade
+	 * @return
 	 */
-	@Override
-	public String toString() {
-		return "ModuleScope [" +
-				"getScopeId()=" + getScopeId() + "]"		
-				+",enclosingScope=" + _enclosingScope
-				+ ", _scopeType=" + _scopeType + ", _file=" + _file ;
+	public static INamespace createInstance(NamespaceId id, NamespaceId enclosingNsId, SpxSemanticIndexFacade facade) 
+	{
+		ITermFactory termFactory = facade.getTermFactory();
+
+		PackageScope scope = new PackageScope(id, 
+											termFactory.makeConstructor(CTOR_NAME, 1),
+											enclosingNsId,
+											facade.getPersistenceManager()
+											);
+		return scope;
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -2,6 +2,9 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.List;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
 
 import jdbm.PrimaryMap;
 import jdbm.RecordManager;
@@ -14,19 +17,13 @@
  * @author Md. Adil Akhter
  * Created On : Aug 22, 2011
  */
-class MultiValuePersistentTable<K, V> {
+class MultiValuePersistentTable {
 
-	private final PrimaryMap<K,ArrayList<V>> _primaryMap;
-	private final RecordManager _recordManager;
-	private String _mapName ;
+	final PrimaryMap<IStrategoTerm,ArrayList<SpxSymbol>> symbols;
 	
-	public MultiValuePersistentTable(String name, RecordManager manager)
-	{
-		_mapName  = name ;
+	public MultiValuePersistentTable(String name, ISpxPersistenceManager manager){
 		
-		_recordManager = manager;
-	
-		_primaryMap = _recordManager.hashMap(_mapName);
+		symbols = manager.loadHashMap(name);
 	}
 	
 	/**
@@ -34,12 +31,10 @@
 	 * 
 	 * @throws IOException 
 	 */
-	public void clear() throws IOException
-	{
-		_primaryMap.clear();
-		
-		_recordManager.commit();
+	public void clear() throws IOException{
+		symbols.clear();
 	}
+
 	
 	/**
 	 * Defines symbol in the current symbol table. Define does not replace  
@@ -49,16 +44,17 @@
 	 * @param key - The key that the symbol will be mapped to .
 	 * @param symbol - The symbol to store. 
 	 */
-	public void define(K key , V symbol)
-	{	
-		if ( _primaryMap.containsKey(key))
-			_primaryMap.get(key).add(symbol);
-		else
-		{
-			ArrayList<V> values = new ArrayList<V>(); 
+	public void define(SpxSymbol symbol){
+		IStrategoTerm key = symbol.Id();
+		
+		if ( symbols.containsKey(key)){
+			symbols.get(key).add(symbol);
+		}else{
+			ArrayList<SpxSymbol> values = new ArrayList<SpxSymbol>(); 
 			values.add(symbol);
-			
-			_primaryMap.put( key , values );
+			symbols.put( key , values );
 		}
 	}
+	
+	public List<SpxSymbol> get(IStrategoTerm id){ return symbols.get(id); }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -1,68 +1,37 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import java.net.URI;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-class PackageSymbol  extends BaseScope {
-	
-	private final String _scopeType = "Package" ;
+class PackageScope  extends BaseScope {
+
+	private static final String CTOR_NAME = "Package" ;
+	private static final long serialVersionUID = 7324156752002137217L;
 	
-	public PackageSymbol(IStrategoTerm id , ITermFactory factory) {
-		
-		super(id,factory);
-		
+	public PackageScope(NamespaceId currentNS, IStrategoConstructor type, NamespaceId enclosingNS, ISpxPersistenceManager manager) {
+		super(currentNS, type, enclosingNS, manager);
 	}
 	
-	@Override public IStrategoTerm getType() {
 	
-		return getTermFactory().makeConstructor(_scopeType, 0);
-	}
 
-	@Override public Scope getEnclosingScope() {
-		// TODO Auto-generated method stub
-		return null;
-	}
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = super.hashCode();
-		result = prime * result
-				+ ((_scopeType == null) ? 0 : _scopeType.hashCode());
-		return result;
-	}
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (!super.equals(obj))
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		PackageSymbol other = (PackageSymbol) obj;
-		if (_scopeType == null) {
-			if (other._scopeType != null)
-				return false;
-		} else if (!_scopeType.equals(other._scopeType))
-			return false;
-		return true;
-	}
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
+	
+	
+	/**
+	 * Creates an instance of GlobalScope. Point of caution : GlobalScope is valid  
+	 * for the current project. 
+	 * 
+	 * @param facade
+	 * @return
 	 */
-	@Override
-	public String toString() {
-		return "PackageScope [_scopeType=" + _scopeType
-				+ ", getScopeId()=" + getScopeId() + "]";
+	public static INamespace createInstance(NamespaceId id, NamespaceId enclosingNsId, SpxSemanticIndexFacade facade) 
+	{
+		ITermFactory termFactory = facade.getTermFactory();
+		
+		PackageScope scope = new PackageScope(id, 
+											termFactory.makeConstructor(CTOR_NAME, 1),
+											enclosingNsId,
+											facade.getPersistenceManager()
+											);
+		return scope;
 	}
-	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -23,6 +23,7 @@
      */
     protected List<RecordListener<String,SpxCompilationUnitInfo>> recordListeners = new ArrayList<RecordListener<String,SpxCompilationUnitInfo>>();
     
+    private final String SRC  = this.getClass().getSimpleName();
 	/**
 	 * Creates a new instance of SymbolTable or loads existing SymbolTable with name specified  
 	 * in the following tableName argument.
@@ -30,9 +31,11 @@
 	 * @param tableName name of the SymbolTable
 	 * @param manager an instance of IPersistenceManager
 	 */
-	public SpxCompilationUnitTable(String tableName , ISpxPersistenceManager manager)
+	public SpxCompilationUnitTable(ISpxPersistenceManager manager)
 	{
-		_infoMap = manager.loadHashMap(tableName+ "._infomap.idx");
+		String tableName = SRC+ "_"+ manager.getProjectName();
+		
+		_infoMap = manager.loadHashMap(tableName  + "._infomap.idx");
 		_spxUnitStoreMap = manager.loadStoreMap(tableName + "._spxUnitStorageMap.idx");
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -1,21 +1,17 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import java.io.IOException;
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
-import jdbm.InverseHashView;
 import jdbm.PrimaryHashMap;
 import jdbm.RecordListener;
 import jdbm.SecondaryHashMap;
 import jdbm.SecondaryKeyExtractor;
-import jdbm.SecondaryTreeMap;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.terms.TermFactory;
 
 public class SpxModuleLookupTable implements ICompilationUnitRecordListener{
 	
@@ -40,13 +36,13 @@
 	 * @param tableName name of the table 
 	 * @param manager an instance of {@link ISpxPersistenceManager}
 	 */
-	public SpxModuleLookupTable(String tableName , ISpxPersistenceManager manager)
+	public SpxModuleLookupTable(ISpxPersistenceManager manager)
 	{
-		assert tableName != null;
 		assert manager != null;
 		
-		_manager = manager;
+		String tableName = SRC+ "_"+ manager.getProjectName();
 		
+		_manager = manager;
 		_moduleLookupMap = manager.loadHashMap(tableName+ "._lookupModuleMap.idx");
 		
 		// read-only secondary view of the the lookup table . 
@@ -66,6 +62,7 @@
 		}
 		);
 		
+		
 		_moduleByPackageId = _moduleLookupMap.secondaryHashMap(tableName+ "._moduleByPackageId.idx", 
 				new SecondaryKeyExtractor<IStrategoList, IStrategoList, ModuleDeclaration>() {
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -38,13 +38,14 @@
 	 * @param tableName name of the table 
 	 * @param manager an instance of {@link ISpxPersistenceManager}
 	 */
-	public SpxPackageLookupTable(String tableName , ISpxPersistenceManager manager)
+	public SpxPackageLookupTable(ISpxPersistenceManager manager)
 	{
-		assert tableName != null;
 		assert manager != null;
 		
+		String tableName = SRC+ "_"+ manager.getProjectName();
+		
 		_manager = manager;
-		_packageLookupTable = manager.loadHashMap(tableName+ "._lookupPackageMap.idx");
+		_packageLookupTable = manager.loadHashMap(manager.getProjectName() + "._lookupPackageMap.idx");
 		
 		// readonly secondary view of the the lookup table . 
 		_uriMap = _packageLookupTable.secondaryHashMapManyToOne(tableName+ "._urimap.idx", 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -84,9 +84,11 @@
 	 */
 	private void initTables(String projectName) {
 		
-		_spxUnitsTable   = new SpxCompilationUnitTable(projectName+"_spxUnitTable", this);
-		_spxPackageTable = new SpxPackageLookupTable(projectName+"_spxPackageTable", this);
-		_spxModuleTable  = new SpxModuleLookupTable(projectName+"_spxModuleTable", this);
+		_spxUnitsTable   = new SpxCompilationUnitTable(this);
+		_spxPackageTable = new SpxPackageLookupTable(this);
+		_spxModuleTable  = new SpxModuleLookupTable(this);
+	
+		// TODO : add primary symbol table
 	}
 	
 	
@@ -200,7 +202,6 @@
 		
 	}
 
-
 	/* Logs Message 
 	 * 
 	 * @see org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager#logMessage(java.lang.String, java.lang.String)
@@ -218,5 +219,9 @@
 			}
 		}
 	}
+
+	public String getProjectName() {
+		return _projectName;
+	}
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -1,30 +1,80 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import jdbm.PrimaryMap;
+import jdbm.SecondaryHashMap;
+import jdbm.SecondaryKeyExtractor;
 
-import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoList;
 
-public class SpxPrimarySymbolTable {
+public class SpxPrimarySymbolTable implements INamespaceResolver{
 	
-	private final ISpxPersistenceManager _manager;
-	private final PrimaryMap <ScopeIdentifier , IScope> _scopeLookup;
+	private final ISpxPersistenceManager _manager; // Persistence Manager
 	
-	public SpxPrimarySymbolTable (String tableName, ISpxPersistenceManager manager)
-	{
+	private final PrimaryMap <NamespaceId,INamespace> namespaces;
+	private final SecondaryHashMap <IStrategoList,NamespaceId,INamespace> namespaceByStrategoId;
+	
+	public SpxPrimarySymbolTable (String tableName, ISpxPersistenceManager manager){
 		_manager = manager;
 		
-		_scopeLookup  = _manager.loadHashMap(tableName + "_scopeLookup.idx");
+		namespaces  = _manager.loadHashMap(tableName + "namespaces.idx");
 		
+		namespaceByStrategoId = namespaces.secondaryHashMap(tableName+ ".namespaceByStrategoId.idx", 
+				new SecondaryKeyExtractor<IStrategoList,NamespaceId,INamespace>()
+				{
+					public IStrategoList extractSecondaryKey(NamespaceId k,INamespace v) {
+						return k.ID(); 
+					}
+				});
 	}
 	
-	public ScopeIdentifier getScopeID(IStrategoTerm spxSymbolId)
-	{
-		return null;
+	public Iterable<INamespace> getNamespaces(IStrategoList id){
+		return namespaceByStrategoId.getPrimaryValues(id);
+	}
+	
+	
+	public INamespace resolveScope(NamespaceId id) {
+		return namespaces.get(id); 
 	}
 	
-	public IScope getScope( ScopeIdentifier scopeId)
+	public void define(IStrategoList namespaceId , SpxSymbol symbol)
 	{
-		// lookup ScopeTree for the scopeId and return it.
-		return null;
+		
 	}
 }
+
+
+
+
+/*
+ * Seperate chaning 
+ * 
+ * Indexed using ID . If multiple symbol is there will return first one 
+ * matching type. 
+ * 
+ * */
+
+
+/*
+ 
+// Ctor x Scope x ID x Symbol -> Definition 
+symbol : Term x  Term x Term x Term -> def 
+
+- define symbol 
+{
+    scope = symbolTable.getActiveScope( scope) 
+    scope.defineSymbol ( Ctor , ID , Symbol) ;
+
+}
+
+- symbol FindSymbol( Scope, ID , CTOR )
+{
+    scope = symbolTable.getActiveScope( scope) 
+    //stop search as soon as found atleast one symbol 
+}
+ 
+- symbols FindAllSymbols(Scope , ID , CTor) 
+{
+    scope = symbolTable.getActiveScope( scope) 
+    // search symbol in all the visible scope
+}
+ */
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -26,7 +26,6 @@
 	private final ITermFactory _termFactory;
 	private final IOAgent _agent;
 	
-	private final SpxSemanticIndexEntryFactory _entryFactory;
 	private final TermAttachmentStripper _stripper;
 	private final TermConverter _converter;
 	
@@ -50,9 +49,6 @@
 	{
 		_projectName = asJavaString(projectName);
 		
-		//TODO : consider removing following instance 
-		_entryFactory = new SpxSemanticIndexEntryFactory(termFactory);
-
 		_termFactory = termFactory;
 		_agent = agent;
 		
@@ -506,11 +502,7 @@
 		analyzedAst = (IStrategoAppl)analyzedAst;
 		spxCompilationUnitPath = (IStrategoString) spxCompilationUnitPath;
 
-		// verify whether the enclosing package exists in symbol table
-		if (!_persistenceManager.spxPackageTable().containsPackage(packageId))
-			throw new IllegalArgumentException("Unknown Package : "
-					+ packageId.toString());
-
+		
 		table.define(new ModuleDeclaration(toAbsulatePath(spxCompilationUnitPath), moduleId, packageId), ast, analyzedAst);
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -5,104 +5,30 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-class ScopeIdentifier 
+class NamespaceId 
 {
-	private UUID _scopeId;
+	private final IStrategoList _id;
+	private final UUID _uId ;
 	
-	public ScopeIdentifier( UUID scopeId){	_scopeId = scopeId; }
+	public NamespaceId(IStrategoList id){_id = id ; _uId = UUID.randomUUID();}
 	
-	public IScope resolve( ISpxPersistenceManager manager)
-	{
-		return null;
-	}
-}
-
-/**
- * Class to represent SpxSymbol 
- * 
- * @author Md. Adil Akhter
- * Created On : Aug 20, 2011
- */
-class SpxSymbol  extends IdentifiableConstruct {
-	
-	private static final long serialVersionUID = -5293805213473800423L;
-	
-	private String _name;
-	private IStrategoTerm _data;
-	private ISpxType _type;
-	private ScopeIdentifier _scope;
-	
-	/**
-	 * Instantiates a new instance of {@link SpxSymbol}
-	 * 
-	 * @param id
-	 * @param name
-	 */
-	public SpxSymbol (IStrategoList id , String name)
-	{	
-		super(id);
-		
-		_name = name; 
-	}
-	/**
-	 * Instantiates a new instance of {@link SpxSymbol}
-	 * 
-	 * @param id
-	 * @param name
-	 * @param type
-	 */
-	public SpxSymbol (IStrategoList id ,  String name , ISpxType type)
-	{ 
-		this(id , name) ; 
-		_type = type;
-	}
+	public IStrategoList ID(){ return _id ; }
 	
-	/**
-	 * returns the name of the symbol 
-	 * 
-	 * @return
-	 */
-	public String getName() { return _name; }
-	
-	public ISpxType getType() {return _type; }
-
-	/**
-	 * @return the data
-	 */
-	protected IStrategoTerm getData() {
-		return _data;
-	}
-
-	/**
-	 * @param data the data to set
-	 */
-	protected void setData(IStrategoTerm data) {
-		this._data = data;
-	}
+	public String UniqueID(){ return _uId.toString();};
 	
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "SpxSymbol[_scope =" + _scope + ", data=" + _data + "]";
+	public INamespace resolve(SpxPrimarySymbolTable sTable) {
+		return sTable.resolveScope(this);
 	}
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
 	@Override
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;
-		result = prime * result + ((_scope == null) ? 0 : _scope.hashCode());
-		result = prime * result + ((_data == null) ? 0 : _data.hashCode());
+		result = prime * result + ((_id == null) ? 0 : _id.hashCode());
+		result = prime * result + ((_uId == null) ? 0 : _uId.hashCode());
 		return result;
 	}
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
 	@Override
 	public boolean equals(Object obj) {
 		if (this == obj)
@@ -111,129 +37,53 @@
 			return false;
 		if (getClass() != obj.getClass())
 			return false;
-		SpxSymbol other = (SpxSymbol) obj;
-		if (_scope == null) {
-			if (other._scope != null)
+		NamespaceId other = (NamespaceId) obj;
+		if (_id == null) {
+			if (other._id != null)
 				return false;
-		} else if (!_scope.equals(other._scope))
+		} else if (!_id.match(other._id))
 			return false;
-		if (_data == null) {
-			if (other._data != null)
+		if (_uId == null) {
+			if (other._uId != null)
 				return false;
-		} else if (!_data.match(other._data))
+		} else if (!_uId.equals(other._uId))
 			return false;
 		return true;
 	}
-	
+
 	@Override
-	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
-		// TODO Auto-generated method stub
-		return null;
+	public String toString() {
+		return "NamespaceId [_id=" + _id + ", _uId=" + _uId + "]";
 	}
 }
 
 
+class SpxSymbol{
+
+	private static final long serialVersionUID = -5293805213473800423L;
+
+	private IStrategoList _id;
+	private IStrategoTerm _data;
+	private IStrategoTerm _type;
+	
+	private NamespaceId _namespace;
+	
+	public SpxSymbol (IStrategoList id){_id = id;}
+	
+	public SpxSymbol (IStrategoList id , IStrategoTerm type){ 
+		this(id) ;
+		_type = type;
+	}
+	
+	IStrategoList Id(){return _id;}
+	
+	IStrategoTerm Type() {return _type; }
+
+	IStrategoTerm Data() { return _data; }
+	
+	NamespaceId Namespace() { return _namespace; }
 
-//
-///**
-// * @author Md. Adil Akhter
-// * Created On : Sep 1, 2011
-// */
-//class SpxSemanticIndexKey extends SpxSymbol
-//{	
-//	public SpxSemanticIndexKey(Scope scope, IStrategoTerm key)
-//	{
-//		super(scope);
-//	}
-//	
-//	public IStrategoTerm getKey()
-//	{
-//		return getData(); 
-//	}
-//
-//	/* (non-Javadoc)
-//	 * @see java.lang.Object#toString()
-//	 */
-//	@Override
-//	public String toString() {
-//		return "SpxSemanticIndexKey [ " +
-//				"key =" + getData().toString() +
-//				"scope="  + getScope().toString() +
-//				"]";
-//	}
-//}
-//
-///**
-// * 
-// * @author Md. Adil Akhter
-// * Created On : Sep 1, 2011
-// */
-//class SpxSemanticIndexSymbol extends SpxSymbol
-//{
-//	private final IStrategoTerm _key ;
-//
-//	public SpxSemanticIndexSymbol ( Scope scope, IStrategoTerm symbol, IStrategoTerm key)
-//	{
-//		super(scope);
-//		
-//		_key = key;
-//		setData(symbol);
-//	}
-//	
-//	/**
-//	 * 
-//	 * @return the _key
-//	 */
-//	public IStrategoTerm getKey() {
-//		return _key;
-//	}
-//
-//	public IStrategoTerm getValue()
-//	{
-//		return getData();
-//	}
-//
-//	/* (non-Javadoc)
-//	 * @see java.lang.Object#hashCode()
-//	 */
-//	@Override
-//	public int hashCode() {
-//		final int prime = 31;
-//		int result = super.hashCode();
-//		result = prime * result + ((_key == null) ? 0 : _key.hashCode());
-//		return result;
-//	}
-//
-//	/* (non-Javadoc)
-//	 * @see java.lang.Object#equals(java.lang.Object)
-//	 */
-//	@Override
-//	public boolean equals(Object obj) {
-//		if (this == obj)
-//			return true;
-//		if (!super.equals(obj))
-//			return false;
-//		if (getClass() != obj.getClass())
-//			return false;
-//		SpxSemanticIndexSymbol other = (SpxSemanticIndexSymbol) obj;
-//		if (_key == null) {
-//			if (other._key != null)
-//				return false;
-//		} else if (!_key.match(other._key))
-//			return false;
-//		return true;
-//	}
-//
-//	/* (non-Javadoc)
-//	 * @see java.lang.Object#toString()
-//	 */
-//	@Override
-//	public String toString() {
-//		return "SpxSemanticIndexSymbol [ " +
-//				"key=" + _key.toString() + 
-//				"symbol=" + getData().toString() +
-//				"scope="  + getScope().toString() +
-//				"]";
-//	}
-//}
+	void setData(IStrategoTerm data) { _data = data; }
 
+	void setNamespace(NamespaceId id){ _namespace = id;}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Tue Sep 20 14:15:02 2011	(r23371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Tue Sep 20 23:29:52 2011	(r23372)
@@ -52,8 +52,8 @@
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
 		manager = new SpxPersistenceManager( "test" , "c:/temp" , ioAgent());
-		symtable = new SpxPackageLookupTable("lookupPackage", manager);
-		mSymTable = new SpxModuleLookupTable("lookupModule", manager);
+		symtable = new SpxPackageLookupTable(manager);
+		mSymTable = new SpxModuleLookupTable(manager);
 		
 		symtable.clear();
 	}

From M.A.Akhter at student.tudelft.nl  Wed Sep 21 02:13:44 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 21 Sep 2011 00:13:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23373 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110921001344.A54F17F81E0@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Sep 21 00:13:44 2011
New Revision: 23373
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23373&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java	Tue Sep 20 23:29:52 2011	(r23372)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java	Wed Sep 21 00:13:44 2011	(r23373)
@@ -2,6 +2,7 @@
 
 
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -23,8 +24,7 @@
 	private  final NamespaceId _currentNamespace; 
 	private final NamespaceId _enclosingNamespace;
 	
-	private final MultiValuePersistentTable _symbols;
-	
+	protected final MultiValuePersistentTable _symbols;
 	
 	public BaseScope(NamespaceId currentNS , IStrategoConstructor type, NamespaceId enclosingNS, ISpxPersistenceManager manager) {
 		assert currentNS!= null : "Current NS Identifier is null";
@@ -55,14 +55,45 @@
 	
 	public NamespaceId getCurrentNamespace(){ return _currentNamespace; }
 	
-	public Iterable<SpxSymbol> resolve(INamespaceResolver nsResolver, IStrategoTerm id, SearchPattern pattern,ILogger logger){
-		Set<SpxSymbol> symbols = new HashSet<SpxSymbol>(); 
+	public SpxSymbol resolve(IStrategoTerm id, INamespaceResolver nsResolver, ISpxPersistenceManager manager){
+		List<SpxSymbol> lookupResult = getMembers().get(id);
+		if( lookupResult.size() > 0 ){
+			return lookupResult.get(0) ;
+		}else{
+			// Symbols could not be found in the current scope
+			// Hence, searching any enclosing scope if it is not 
+			// null. After searching global scope, it is not searching
+			// anymore.
+			if( getEnclosingNamespace() != null) {
+				INamespace namespace = getEnclosingNamespace().resolve(nsResolver);
+				return namespace.resolve(id, nsResolver, manager);
+			}	 
+		}
+		return null; // symbol is not found
+	}
+	
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id,
+			INamespaceResolver nsResolver, ISpxPersistenceManager manager) {
+		
+		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
+		List<SpxSymbol> lookupResult = getMembers().get(id);
+		retResult.addAll(lookupResult);
 		
-		return symbols;
+		if( getEnclosingNamespace() != null)
+		{
+			INamespace namespace = getEnclosingNamespace().resolve(nsResolver);
+			Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(id, nsResolver, manager);
+			
+			retResult.addAll(parentResults);
+		}	 
+		
+		return retResult;
 	}
 	
 	public IStrategoConstructor type() {
 		return type;
 	}
+
+	public MultiValuePersistentTable getMembers(){return _symbols;}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Tue Sep 20 23:29:52 2011	(r23372)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Sep 21 00:13:44 2011	(r23373)
@@ -9,26 +9,23 @@
 
 interface INamespace extends Serializable {
     
-	public NamespaceId getEnclosingNamespace();
+	NamespaceId getEnclosingNamespace();
 
-	public NamespaceId getCurrentNamespace();
+	NamespaceId getCurrentNamespace();
 	
-	public void define(SpxSymbol sym , ILogger logger) ;
+	void define(SpxSymbol sym , ILogger logger) ;
     
-	public Iterable<SpxSymbol> resolve(INamespaceResolver nsResolver, IStrategoTerm id, SearchPattern pattern , ILogger logger);
+	SpxSymbol resolve(IStrategoTerm id, INamespaceResolver nsResolver,ISpxPersistenceManager manager );
     
-	IStrategoConstructor type(); 
-}
-
-enum SearchPattern
-{
-	ALL,
-	ONE
+	Iterable<SpxSymbol> resolveAll(IStrategoTerm id, INamespaceResolver nsResolver,ISpxPersistenceManager manager);
+	
+	IStrategoConstructor type();
+	
+	MultiValuePersistentTable getMembers();
 }
 
-
 interface INamespaceResolver {
 	
-	public INamespace resolveScope(NamespaceId nsId);
+	public INamespace resolveNamespace(NamespaceId nsId);
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java	Tue Sep 20 23:29:52 2011	(r23372)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java	Wed Sep 21 00:13:44 2011	(r23373)
@@ -13,7 +13,19 @@
 	}
 	
 	
-
+	@Override
+	public SpxSymbol resolve(org.spoofax.interpreter.terms.IStrategoTerm id, INamespaceResolver nsResolver, ISpxPersistenceManager logger) 
+	{
+		return null;
+	};
+	
+	
+	
+	@Override
+	public Iterable<SpxSymbol> resolveAll(org.spoofax.interpreter.terms.IStrategoTerm id, INamespaceResolver nsResolver, ISpxPersistenceManager logger) 
+	{
+		return null;
+	};
 	
 	
 	/**
@@ -34,4 +46,6 @@
 											);
 		return scope;
 	}
+
+
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Tue Sep 20 23:29:52 2011	(r23372)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Wed Sep 21 00:13:44 2011	(r23373)
@@ -32,7 +32,7 @@
 	}
 	
 	
-	public INamespace resolveScope(NamespaceId id) {
+	public INamespace resolveNamespace(NamespaceId id) {
 		return namespaces.get(id); 
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Tue Sep 20 23:29:52 2011	(r23372)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Sep 21 00:13:44 2011	(r23373)
@@ -16,8 +16,8 @@
 	
 	public String UniqueID(){ return _uId.toString();};
 	
-	public INamespace resolve(SpxPrimarySymbolTable sTable) {
-		return sTable.resolveScope(this);
+	public INamespace resolve(INamespaceResolver sTable) {
+		return sTable.resolveNamespace(this);
 	}
 
 	@Override

From M.A.Akhter at student.tudelft.nl  Wed Sep 21 12:49:54 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 21 Sep 2011 10:49:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23374 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110921104954.E7F22CC560@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Sep 21 10:49:54 2011
New Revision: 23374
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23374&sc=1

Log:
[+] more clean up + error checking 
[+] additional filtering by type is added in symbol table .

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java
      - copied, changed from r23373, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java	Wed Sep 21 00:13:44 2011	(r23373)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java	Wed Sep 21 10:49:54 2011	(r23374)
@@ -55,20 +55,23 @@
 	
 	public NamespaceId getCurrentNamespace(){ return _currentNamespace; }
 	
-	public SpxSymbol resolve(IStrategoTerm id, INamespaceResolver nsResolver, ISpxPersistenceManager manager){
+	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespaceResolver nsResolver, ISpxPersistenceManager manager){
 		List<SpxSymbol> lookupResult = getMembers().get(id);
-		if( lookupResult.size() > 0 ){
-			return lookupResult.get(0) ;
-		}else{
-			// Symbols could not be found in the current scope
-			// Hence, searching any enclosing scope if it is not 
-			// null. After searching global scope, it is not searching
-			// anymore.
-			if( getEnclosingNamespace() != null) {
-				INamespace namespace = getEnclosingNamespace().resolve(nsResolver);
-				return namespace.resolve(id, nsResolver, manager);
-			}	 
+		if( lookupResult!=null){
+			List<SpxSymbol> expectedTypedSymbol = SpxSymbol.filterByType(type, lookupResult);
+			if(expectedTypedSymbol.size() >0 )
+				return lookupResult.get(0) ;
 		}
+
+		// Symbols could not be found in the current scope
+		// Hence, searching any enclosing scope if it is not 
+		// null. After searching global scope, it is not searching
+		// anymore.
+		if( getEnclosingNamespace() != null) {
+			INamespace namespace = getEnclosingNamespace().resolve(nsResolver);
+			return namespace.resolve(id, type, nsResolver, manager);
+		}	 
+		
 		return null; // symbol is not found
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Sep 21 00:13:44 2011	(r23373)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Sep 21 10:49:54 2011	(r23374)
@@ -15,7 +15,7 @@
 	
 	void define(SpxSymbol sym , ILogger logger) ;
     
-	SpxSymbol resolve(IStrategoTerm id, INamespaceResolver nsResolver,ISpxPersistenceManager manager );
+	SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespaceResolver nsResolver,ISpxPersistenceManager manager );
     
 	Iterable<SpxSymbol> resolveAll(IStrategoTerm id, INamespaceResolver nsResolver,ISpxPersistenceManager manager);
 	

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java (from r23373, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageSymbol.java	Wed Sep 21 00:13:44 2011	(r23373, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java	Wed Sep 21 10:49:54 2011	(r23374)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
 class PackageScope  extends BaseScope {
@@ -14,7 +15,7 @@
 	
 	
 	@Override
-	public SpxSymbol resolve(org.spoofax.interpreter.terms.IStrategoTerm id, INamespaceResolver nsResolver, ISpxPersistenceManager logger) 
+	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type,INamespaceResolver nsResolver, ISpxPersistenceManager logger) 
 	{
 		return null;
 	};
@@ -22,12 +23,13 @@
 	
 	
 	@Override
-	public Iterable<SpxSymbol> resolveAll(org.spoofax.interpreter.terms.IStrategoTerm id, INamespaceResolver nsResolver, ISpxPersistenceManager logger) 
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id,INamespaceResolver nsResolver, ISpxPersistenceManager manager) 
 	{
 		return null;
 	};
 	
 	
+	
 	/**
 	 * Creates an instance of GlobalScope. Point of caution : GlobalScope is valid  
 	 * for the current project. 
@@ -46,6 +48,6 @@
 											);
 		return scope;
 	}
-
-
+	
+	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Sep 21 00:13:44 2011	(r23373)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Sep 21 10:49:54 2011	(r23374)
@@ -1,5 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.UUID;
 
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -86,4 +88,16 @@
 	void setData(IStrategoTerm data) { _data = data; }
 
 	void setNamespace(NamespaceId id){ _namespace = id;}
+	
+	boolean equalType (IStrategoTerm term) { return _type == term; }
+	
+	static List<SpxSymbol> filterByType( IStrategoTerm expectedType , Iterable<SpxSymbol> symbols)
+	{
+		List<SpxSymbol> retSymbols = new ArrayList<SpxSymbol>();
+		
+		for(SpxSymbol s : symbols){
+			if( s.equalType(expectedType) ){ retSymbols.add(s) ;}
+		}
+		return retSymbols;
+	}
 }
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Sep 21 14:54:15 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 21 Sep 2011 12:54:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23375 - in
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax:
	interpreter/terms terms
Message-ID: <20110921125415.3E4B17F82B7@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Sep 21 12:54:14 2011
New Revision: 23375
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23375&sc=1

Log:
* added serialization support to Terms

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoConstructor.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoPlaceholder.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoWrapped.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/UniqueValueTerm.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTerm.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTerm.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -8,9 +8,10 @@
 package org.spoofax.interpreter.terms;
 
 import java.io.IOException;
+import java.io.Serializable;
 import java.io.Writer;
 
-public interface IStrategoTerm extends ISimpleTerm {
+public interface IStrategoTerm extends ISimpleTerm, Serializable{
 
     public static final int APPL = 1;
     public static final int LIST = 2;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -24,6 +24,8 @@
  */
 public abstract class LazyTerm implements IStrategoAppl, IStrategoInt, IStrategoList, IStrategoReal, IStrategoString, IStrategoTuple {
 	
+	private static final long serialVersionUID = 4886871162797987326L;
+	
 	private IStrategoTerm term;
 	
 	public final IStrategoTerm getWrapped() {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -21,6 +21,8 @@
  */
 public class StrategoAnnotation extends StrategoWrapped {
 	
+	private static final long serialVersionUID = 2918341202178665547L;
+
 	private final ITermFactory factory;
 	
 	public StrategoAnnotation(ITermFactory factory, IStrategoTerm term, IStrategoList annotations) {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -17,7 +17,9 @@
 
 public class StrategoAppl extends StrategoTerm implements IStrategoAppl {
 
-    private final IStrategoConstructor ctor;
+  private static final long serialVersionUID = -2522680523775044390L;
+
+	private final IStrategoConstructor ctor;
 
     private IStrategoTerm[] kids;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoConstructor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoConstructor.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoConstructor.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -18,7 +18,9 @@
 
 public final class StrategoConstructor extends StrategoTerm implements IStrategoConstructor {
 
-    private final String name;
+    private static final long serialVersionUID = -4477361122406081825L;
+
+	private final String name;
     
     private final int arity;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -17,6 +17,8 @@
 
 public class StrategoInt extends StrategoTerm implements IStrategoInt {
 
+    private static final long serialVersionUID = 2915870332171452430L;
+	
     private final int value;
     
     public StrategoInt(int value, IStrategoList annotations, int storageType) {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -20,6 +20,8 @@
  */
 public class StrategoList extends StrategoTerm implements IStrategoList, Iterable<IStrategoTerm> {
 	
+	private static final long serialVersionUID = 624120573663698628L;
+
 	private static final int UNKNOWN_SIZE = -1;
     
     /**

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoPlaceholder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoPlaceholder.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoPlaceholder.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -13,7 +13,9 @@
  */
 public class StrategoPlaceholder extends StrategoAppl implements IStrategoPlaceholder {
 
-    public StrategoPlaceholder(IStrategoConstructor ctor, IStrategoTerm template, IStrategoList annotations, int storageType) {
+    private static final long serialVersionUID = -1212433450601997725L;
+
+	public StrategoPlaceholder(IStrategoConstructor ctor, IStrategoTerm template, IStrategoList annotations, int storageType) {
         super(ctor, new IStrategoTerm[] { template }, annotations, storageType);
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -17,6 +17,8 @@
 
 public class StrategoReal extends StrategoTerm implements IStrategoReal {
 
+    private static final long serialVersionUID = 9005617684098182139L;
+	
     private final double value;
     
     public StrategoReal(double value, IStrategoList annotations, int storageType) {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -17,6 +17,8 @@
 
 public class StrategoString extends StrategoTerm implements IStrategoString {
 	
+    private static final long serialVersionUID = 237308007762215350L;
+	
     private final String value;
     
     public StrategoString(String value, IStrategoList annotations, int storageType) {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -17,6 +17,8 @@
 
 public abstract class StrategoTerm extends AbstractSimpleTerm implements IStrategoTerm, Cloneable {
 	
+	private static final long serialVersionUID = -2803845954655431574L;
+
 	private static final int UNKNOWN_HASH = -1;
 	
 	private static final int MUTABLE_HASH = MUTABLE;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -16,6 +16,8 @@
 
 public class StrategoTuple extends StrategoTerm implements IStrategoTuple {
 
+    private static final long serialVersionUID = -6034069486754146955L;
+	
     private IStrategoTerm[] kids;
     
     public StrategoTuple(IStrategoTerm[] kids, IStrategoList annotations, int storageType) {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoWrapped.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoWrapped.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoWrapped.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -23,6 +23,9 @@
  */
 public class StrategoWrapped extends StrategoTerm implements IStrategoAppl, IStrategoInt, IStrategoList, IStrategoReal, IStrategoString, IStrategoTuple {
 	
+	
+	private static final long serialVersionUID = 3470735405007721813L;
+	
 	private final IStrategoTerm wrapped;
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/UniqueValueTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/UniqueValueTerm.java	Wed Sep 21 10:49:54 2011	(r23374)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/UniqueValueTerm.java	Wed Sep 21 12:54:14 2011	(r23375)
@@ -15,6 +15,8 @@
  */
 public final class UniqueValueTerm extends AbstractSimpleTerm implements IStrategoInt {
 	
+	private static final long serialVersionUID = 2464633689395266636L;
+
 	private static final AtomicInteger counter = new AtomicInteger();
 	
 	private final int value = counter.incrementAndGet();

From M.A.Akhter at student.tudelft.nl  Wed Sep 21 15:28:34 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 21 Sep 2011 13:28:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23376 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110921132834.DBC287F82D8@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Sep 21 13:28:34 2011
New Revision: 23376
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23376&sc=1

Log:
- (more) clean up . moving interfaces to its own files

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IIndexer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISymbolResolver.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IIndexer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IIndexer.java	Wed Sep 21 13:28:34 2011	(r23376)
@@ -0,0 +1,10 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+
+
+interface IIndexer 
+{	
+	public void index(IStrategoString projectName , IStrategoAppl appl) throws Exception ;
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISymbolResolver.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISymbolResolver.java	Wed Sep 21 13:28:34 2011	(r23376)
@@ -0,0 +1,9 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+interface ISymbolResolver<T> 
+{	
+	public T get(IStrategoString projectName , IStrategoTerm key) throws Exception;
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Sep 21 12:54:14 2011	(r23375)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Sep 21 13:28:34 2011	(r23376)
@@ -8,15 +8,6 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-interface IIndexer 
-{	
-	public void index(IStrategoString projectName , IStrategoAppl appl) throws Exception ;
-}
-
-interface ISymbolResolver<T> 
-{	
-	public T get(IStrategoString projectName , IStrategoTerm key) throws Exception;
-}
 
 /**
  * Semantic Index to store the symbols of SPXlang projects. 
@@ -26,9 +17,6 @@
  */
 public class SpxSemanticIndex {
 
-	//TODO : have to do something about exception handling . Bored copying 
-	// same exception handling code again and again. 
-	
 	/**
 	 * Registry keeps the mapping of projectName to its own facade
 	 * to create and perform various operations related to semantic index.

From tobivollebregt at gmail.com  Wed Sep 21 22:51:21 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 21 Sep 2011 20:51:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23377 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110921205121.BCE80CC6BF@mx4.tudelft.nl>

Author: tvo
Date: Wed Sep 21 20:51:21 2011
New Revision: 23377
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23377&sc=1

Log:
rushNextUpdate was never set to false

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Wed Sep 21 13:28:34 2011	(r23376)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Wed Sep 21 20:51:21 2011	(r23377)
@@ -455,6 +455,7 @@
 			}
 			
 			if (this.rushNextUpdate) {
+				this.rushNextUpdate = false;
 				this.updateJob = queue.queue(this, parseController, 0);
 			} else {
 				this.updateJob = queue.queue(this, parseController, OBSERVER_DELAY);

From M.A.Akhter at student.tudelft.nl  Thu Sep 22 16:56:05 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 22 Sep 2011 14:56:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23378 - in
	spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator: lib
	src/sdf2imp/project
Message-ID: <20110922145605.16E707F8030@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Sep 22 14:56:04 2011
New Revision: 23378
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23378&sc=1

Log:
updating spoofaxgenerator.jar, so that metatooling project can use it in Spoofaxlang Wizard

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/lib/spoofaxgenerator.jar
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-adapters.str
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-definitions.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/lib/spoofaxgenerator.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-adapters.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-adapters.str	Wed Sep 21 20:51:21 2011	(r23377)
+++ spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-adapters.str	Thu Sep 22 14:56:04 2011	(r23378)
@@ -57,7 +57,9 @@
 		create-builders-definition = 
     where( 
 	    	package-name  := <BasePackage <+ default-package-name>;
-	    	language-name := <get-sdf-main-module>
+	    	language-name := <get-sdf-main-module>;
+	    	extensions := <require-option(EditorExtensions |"File extensions (-e)")>;
+      	extension  := <string-tokenize(|[',']); Hd> extensions
 			);	 
 !${module Builders  
 	 	
@@ -80,7 +82,7 @@
 	prettyprint-entitylang:
 		(selected, position, ast, path, project-path) -> (filename, result)
 		with
-			filename := <guarantee-extension(|"pp.spo")> path;
+			filename := <guarantee-extension(|"pp.{extension}")> path;
 			result   := <pp-entitylang>selected // we just return the input term
 }
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str	Wed Sep 21 20:51:21 2011	(r23377)
+++ spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str	Thu Sep 22 14:56:04 2011	(r23378)
@@ -29,7 +29,7 @@
 	// By default, it includes all the directories ( and their subdirectories) of the project during build. Hence, It is  
 	// always recommended to explicitly specify the sources to include. 							  
 	src:
-		test|**
+		src|**
 		
 				
 	codegen:
@@ -43,7 +43,9 @@
 		//stroutputmode : jar
 	
 	// Other project references are specified in this configuration section.
+	// Specify the name of the project from current workspace to include 
+	// Tested only with projects located in the local file system. 
 	//projectreferences:
-	//	C:/work/projects/spoofax/spx-imp/source-codes/workspaces/spx-examples/SpoofaxEntityLanguage
-	//../DatabaseSPXLang
+	//	 
+	//		<project-name>* 
 ]
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-definitions.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-definitions.str	Wed Sep 21 20:51:21 2011	(r23377)
+++ spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-definitions.str	Thu Sep 22 14:56:04 2011	(r23378)
@@ -32,9 +32,9 @@
 imports {package-name}.generated 
 	
 context-free syntax    
-	"module" ID Definition*       	-> Start       ${$ "Module"  $}$ 
-	"entity" ID "${$" Property* "$}$" 	-> Definition  ${$ "Entity"  $}$
-	ID  ":" Type               		  -> Property     ${$ "Property"$}$ 
+	"module" ID Definition*             -> Start${$ "Module"$}$ 
+	"entity" ID "${$" Property* "$}$"    -> Definition${$"Entity"$}$
+	ID  ":" Type               		      -> Property${$"Property"$}$ 
 	
 rules 
 	// Semantic analyses
@@ -59,13 +59,13 @@
 	// Generates java codes from {language-name} language.
 	to-java: Module(x, d*) ->
 		$[package [x];
-    	[d'*]
+      [d'*]
 		 ]
     with
       d'* := <to-java> d*
   
 	to-java: Entity(x, p*) ->
-    $[ class [x] ${$
+    $[class [x] ${$
            [p'*]
        $}$
 		]
@@ -74,15 +74,15 @@
 
 	to-java: Property(x, type) -> 
 		$[
-			private [<to-java>type] [x];
+           private [<to-java>type] [x];
       
-			public [<to-java>type] get_[x] ${$
-          return [x];
-      $}$
+           public [<to-java>type] get_[x] ${$
+              return [x];
+           $}$
       
-			public void set_[x] ([<to-java>type] [x]) ${$
-          this.[x] = [x];    
-			$}$
+           public void set_[x] ([<to-java>type] [x]) ${$
+              this.[x] = [x];    
+           $}$
 		]     
   	
 		to-java: t* -> <map(to-java)> t*
@@ -91,16 +91,16 @@
 	
 	// Pretty-prints Abstract Syntax Tree to {language-name} language. 
 	pp-entitylang: Module(x, d*) ->
-		$[ module [x]
-				[d'*]
+		$[module [x]
+     [d'*]
 		]
 		with
 		d'* := <pp-entitylang> d*
   
 	pp-entitylang: Entity(x, p*) ->
-		$[ entity [x] ${$
-				[p'*]
-				$}$
+		$[entity [x] ${$
+         [p'*]
+     $}$
 			]
 		with
 			p'* := <pp-entitylang> p*

From m.dejonge at tudelft.nl  Thu Sep 22 17:46:11 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 22 Sep 2011 15:46:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23379 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20110922154611.9066D108C04C@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Sep 22 15:46:10 2011
New Revision: 23379
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23379&sc=1

Log:
sdf2parenthesize fallback

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Sep 22 14:56:04 2011	(r23378)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Sep 22 15:46:10 2011	(r23379)
@@ -330,10 +330,12 @@
             </dependset>
             <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
             <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
         </target>
 
         <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
-            <java classname="run" failonerror="true">
+            <java classname="run" failonerror="false">
                 <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
@@ -353,6 +355,10 @@
                 <arg value="include/${sdfmodule}"/>
             </java>
         </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
         
         <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>

From tobivollebregt at gmail.com  Thu Sep 22 21:26:22 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 22 Sep 2011 19:26:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23380 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
Message-ID: <20110922192622.B8EDF2B8020@mx2.tudelft.nl>

Author: tvo
Date: Thu Sep 22 19:26:22 2011
New Revision: 23380
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23380&sc=1

Log:
make Context.cancel protected - needed in HybridInterpreter
(see next commit)

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	Thu Sep 22 15:46:10 2011	(r23379)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	Thu Sep 22 19:26:22 2011	(r23380)
@@ -218,7 +218,7 @@
         asyncCancelled = false;
     }
 
-    private void cancel() {
+    protected void cancel() {
         asyncCancelled = false;
         getIOAgent().closeAllFiles();
         throw new CancellationException("Stratego interpreter cancelled");

From tobivollebregt at gmail.com  Thu Sep 22 21:26:47 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 22 Sep 2011 19:26:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23381 - in
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt: . lang
Message-ID: <20110922192647.F41047F8026@mx1.tudelft.nl>

Author: tvo
Date: Thu Sep 22 19:26:47 2011
New Revision: 23381
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23381&sc=1

Log:
After one Context has been cancelled, uncancel both(!) contexts.

Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/Context.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Thu Sep 22 19:26:22 2011	(r23380)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Thu Sep 22 19:26:47 2011	(r23381)
@@ -498,6 +498,12 @@
 			super.setFactory(factory);
 			compiledContext.setFactory(factory);
 		}
+
+		@Override
+		protected void cancel() {
+			getCompiledContext().asyncCancelReset();
+			super.cancel();
+		}
 	}
 	
 	/**
@@ -550,6 +556,12 @@
 				setCurrent(oldCurrent);
 			}
 		}
+
+		@Override
+		protected void cancel() {
+			getContext().asyncCancelReset();
+			super.cancel();
+		}
 	}
 
 	public void asyncCancel() {

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/Context.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/Context.java	Thu Sep 22 19:26:22 2011	(r23380)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/Context.java	Thu Sep 22 19:26:47 2011	(r23381)
@@ -262,7 +262,7 @@
         asyncCancelled = false;
     }
 
-	private void cancel() {
+	protected void cancel() {
 		asyncCancelled = false;
 		getIOAgent().closeAllFiles();
 		throw new CancellationException("Stratego interpreter cancelled");

From M.A.Akhter at student.tudelft.nl  Fri Sep 23 03:28:40 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 23 Sep 2011 01:28:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23382 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	jdbm/helper org/spoofax/interpreter/library/language
	org/spoofax/interpreter/library/languag...
Message-ID: <20110923012840.9D4D82B801E@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep 23 01:28:38 2011
New Revision: 23382
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23382&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clear.java
      - copied, changed from r23371, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/DefaultSerializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/DefaultSerializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/DefaultSerializer.java	Thu Sep 22 19:26:47 2011	(r23381)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/helper/DefaultSerializer.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -24,7 +24,7 @@
 import jdbm.SerializerOutput;
 
 /**
- * Default java serializer. Constructor is privite, use  DefaultSerializer.INSTANCE
+ * Default java serializer. Constructor is private, use  DefaultSerializer.INSTANCE
  *
  * @author <a href="mailto:boisvert at intalio.com">Alex Boisvert</a>
  */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Sep 22 19:26:47 2011	(r23381)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -26,11 +26,12 @@
 		
 		SpxSemanticIndex spxIndex= new SpxSemanticIndex();
 		
+		//TODO : generalize and reduce/refactor primitives
 		//primitives for index initialization and management
 		add(new SPX_index_init(spxIndex));
 		add(new SPX_index_close(spxIndex));
 		add(new SPX_index_save(spxIndex));
-		add(new SPX_index_clearall(spxIndex));
+		add(new SPX_index_clear(spxIndex));
 		
 		//primitives to index spoofaxlang compilation unit 
 		add(new SPX_index_compilation_unit(spxIndex));
@@ -48,6 +49,8 @@
 		
 		add(new SPX_index_get_module_declarations_of(spxIndex));
 		add(new SPX_index_get_package_declarations_of(spxIndex));
+		add(new SPX_index_import_references(spxIndex));
+		add(new SPX_index_get_imports(spxIndex));
 	}
 
 	public String getOperatorRegistryName() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Thu Sep 22 19:26:47 2011	(r23381)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -1,38 +1,46 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import java.io.Serializable;
+import java.util.HashSet;
+import java.util.Set;
 
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.terms.StrategoListIterator;
 
 public abstract class IdentifiableConstruct implements Serializable
 {
 	private static final long serialVersionUID = 1055862481052307186L;
-	protected static final String qnameContructorName = "QName";
+	private static final String qnameContructorName = "QName";
+	private static IStrategoConstructor qnameCon;
 	
-	protected final IStrategoList id;
+	final IStrategoList id;
+	final Set<IStrategoTerm> imports; 
 	
 	public IdentifiableConstruct(IStrategoList id) {
 		assert id != null;
 		
 		this.id = id;
+		this.imports = new HashSet<IStrategoTerm>();
 	}
 	
 	public IStrategoList getId(){ return id; }
 
 	public abstract IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade);  
 
-	static IStrategoAppl toIdTerm ( ITermFactory factory ,  String constructorName , IStrategoList id)
+	static IStrategoAppl toIdTerm ( SpxSemanticIndexFacade facade , IStrategoConstructor namespaceCon, IStrategoList id)
 	{
-		IStrategoConstructor cons = factory.makeConstructor(constructorName, 1);
+		ITermFactory factory = facade.getTermFactory();
+		
 		IStrategoConstructor qnameCons = factory.makeConstructor(qnameContructorName, 1);
 		IStrategoAppl qnameAppl = factory.makeAppl(qnameCons, id);
 		
-		return factory.makeAppl(cons, qnameAppl);
+		return factory.makeAppl(namespaceCon, qnameAppl);
 	}
 	
 	protected IStrategoTerm forceImploderAttachment(IStrategoTerm term) {
@@ -65,16 +73,35 @@
 	 * 
 	 * @return underlying {@link IStrategoList} qualified name
 	 */
-	protected static IStrategoList getID(ITermFactory fac, IStrategoAppl qName) {
+	protected static IStrategoList getID(SpxSemanticIndexFacade facade, IStrategoAppl qName) {
 		
-		final IStrategoConstructor qnameCon = fac.makeConstructor(qnameContructorName, 1);
+		if ( qnameCon != null)
+			qnameCon = facade.getTermFactory().makeConstructor(qnameContructorName, 1);
 		
 		if(qName.getConstructor() == qnameCon)
 			return (IStrategoList)qName.getSubterm(0);
 		
 		throw new IllegalArgumentException("Invalid QName : " + qName);
 	}
-
+	
+	
+	void appendImports ( IStrategoList  imports) {
+		
+		for (IStrategoTerm i: StrategoListIterator.iterable(imports)) {
+			this.imports.add(i);
+		}
+	}
+	
+	public IStrategoList getImports( SpxSemanticIndexFacade idxFacade) 
+	{
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		IStrategoList result = termFactory.makeList();
+		
+		for (IStrategoTerm t: imports)
+			result = termFactory.makeListCons(t, result);
+		return result;
+	}
+	
 	/**
 	 * Constructs {@link IStrategoList} from {@code decls}  
 	 * 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java	Thu Sep 22 19:26:47 2011	(r23381)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -208,7 +208,7 @@
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		
 		IStrategoConstructor ctr = idxFacade.getLanguageDescriptorCon();
-		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageIdTerm(termFactory, this.getId());
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageIdTerm(idxFacade, this.getId());
 		
 		IStrategoTerm retTerm = termFactory.makeAppl(ctr, packageQNameAppl , this.languageNames , this.languageIDs , this.esvDeclaredStartSymbols , this.sdfDeclaredStartSymbols);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Thu Sep 22 19:26:47 2011	(r23381)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -10,8 +10,7 @@
 public class ModuleDeclaration extends IdentifiableConstruct 
 {
 	private static final long serialVersionUID = -6249406731326662111L;
-	static final String _moduleIdContructorName = "Module";
-	
+
 	static final int ModuleTypedQNameIndex = 0;
 	static final int ModulePathIndex = 1;
 	static final int PackageTypedQNameIndex = 2;
@@ -89,19 +88,21 @@
 		return true;
 	}
 	
-	public static IStrategoList getModuleId(ITermFactory fac, IStrategoAppl moduleQName )
+	
+	public static IStrategoList getModuleId(SpxSemanticIndexFacade facade, IStrategoAppl moduleQName )
 	{
-		final IStrategoConstructor moduleQNameCons = fac.makeConstructor(_moduleIdContructorName, 1);
+		IStrategoConstructor moduleCon  = facade.getModuleQNameCon();
 		
-		if(moduleQNameCons == moduleQName.getConstructor())
-			return getID(fac, (IStrategoAppl)moduleQName.getSubterm(ModuleTypedQNameIndex));	
+		if(moduleCon   == moduleQName.getConstructor())
+			return getID(facade, (IStrategoAppl)moduleQName.getSubterm(ModuleTypedQNameIndex));	
 		
 		throw new IllegalArgumentException("Invalid module qname : "+ moduleQName.toString());
 	}
 	
-	public static IStrategoAppl toModuleIdTerm(ITermFactory termFactory , ModuleDeclaration decl)
+	
+	public static IStrategoAppl toModuleIdTerm(SpxSemanticIndexFacade facade , ModuleDeclaration decl)
 	{
-		return toIdTerm(termFactory, _moduleIdContructorName, decl.getId());
+		return toIdTerm(facade, facade.getModuleQNameCon() , decl.getId());
 	}
 
 	/* Transforms {@link ModuleDeclaration} to following term : 
@@ -117,14 +118,13 @@
 
 		IStrategoConstructor moduleDeclCons = idxFacade.getModuleDeclCon();
 		
-		IStrategoAppl moduleQNameAppl =toModuleIdTerm( termFactory ,  this);
+		IStrategoAppl moduleQNameAppl =toModuleIdTerm( idxFacade,  this);
 		IStrategoString resAbsPathTerm = termFactory.makeString(resourceAbsPath) ;
-		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageIdTerm(termFactory, this.enclosingPackageID);
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageIdTerm(idxFacade, this.enclosingPackageID);
 		
 		IStrategoTerm retTerm = termFactory.makeAppl(moduleDeclCons,moduleQNameAppl,resAbsPathTerm,packageQNameAppl);
 		
 		return this.forceImploderAttachment(retTerm);
 	}
-	
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Thu Sep 22 19:26:47 2011	(r23381)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -13,12 +13,14 @@
 public class PackageDeclaration extends IdentifiableConstruct
 {
 	private static final long serialVersionUID = -9081890582103567413L;
-	private static final String _packageIdContructorName = "Package";
+	
 	
 	static final int PACKAGE_ID_INDEX = 0;
 	static final int SPX_COMPILATION_UNIT_PATH = 1;
 	
 	final Set<String> resourceAbsPaths = new HashSet<String>();
+	final Set<IStrategoList> importedScopes  =  new HashSet<IStrategoList>();
+	
 	
 	PackageDeclaration(IStrategoList id)
 	{
@@ -69,7 +71,7 @@
 		
 		IStrategoTerm retTerm = termFactory.makeAppl(
 				packageDeclCons, 
-				toPackageIdTerm(termFactory, this),
+				toPackageIdTerm(idxFacade, this),
 				absPathList 
 		);
 		
@@ -82,13 +84,13 @@
 	 * @param packageQName
 	 * @return
 	 */
-	public static IStrategoList getPackageId(ITermFactory fac,IStrategoAppl packageQName)
+	public static IStrategoList getPackageId(SpxSemanticIndexFacade facade,IStrategoAppl packageQName)
 	{
-		final IStrategoConstructor packageQNameCon = fac.makeConstructor(_packageIdContructorName, 1);
+		final IStrategoConstructor packageQNameCon = facade.getPackageQNameCon();
 		
 		if(packageQNameCon == packageQName.getConstructor())
 		{
-			return getID(fac, (IStrategoAppl)packageQName.getSubterm(0));	
+			return getID( facade, (IStrategoAppl)packageQName.getSubterm(0));	
 		}
 		
 		throw new IllegalArgumentException("Invalid Package Typed QName : "+ packageQName);
@@ -101,14 +103,14 @@
 	 * @param decl
 	 * @return
 	 */
-	public static IStrategoAppl toPackageIdTerm (ITermFactory termFactory , PackageDeclaration decl)
+	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, PackageDeclaration decl)
 	{
-		return toPackageIdTerm (termFactory, decl.getId());
+		return toPackageIdTerm (facade, decl.getId());
 	}
 	
-	public static IStrategoAppl toPackageIdTerm (ITermFactory termFactory , IStrategoList id)
+	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, IStrategoList id)
 	{
-		return toIdTerm(termFactory, _packageIdContructorName, id);
+		return toIdTerm(facade ,  facade.getPackageQNameCon(), id);
 	}
 	
 	/**

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clear.java (from r23371, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clearall.java	Tue Sep 20 14:15:02 2011	(r23371, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clear.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -16,15 +16,16 @@
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
-public class SPX_index_clearall extends AbstractPrimitive {
+public class SPX_index_clear extends AbstractPrimitive {
 
-	private static String NAME = "SPX_index_clearall";
-	private static int PROJECT_NAME_INDEX = 0;
+	private final static String NAME = "SPX_index_clear";
+	
+	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int NO_ARGS = 1;
 	
 	private final SpxSemanticIndex index;
 
-	public SPX_index_clearall(SpxSemanticIndex index) {
+	public SPX_index_clear(SpxSemanticIndex index) {
 		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Thu Sep 22 19:26:47 2011	(r23381)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -46,6 +46,7 @@
 		if (Tools.isTermString(tvars[PROJECT_NAME_INDEX])
 				&& Tools.isTermString(tvars[COMPILATION_UNIT_PATH_INDEX])
 				&& Tools.isTermAppl(tvars[COMPILATION_UNIT_AST_INDEX])) {
+			
 			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[COMPILATION_UNIT_PATH_INDEX];
 			IStrategoAppl  compilationUnitRTree = (IStrategoAppl)tvars[COMPILATION_UNIT_AST_INDEX];

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Thu Sep 22 19:26:47 2011	(r23381)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -2,6 +2,10 @@
 
 import java.io.IOException;
 
+import jdbm.PrimaryStoreMap;
+import jdbm.RecordManager;
+import jdbm.RecordManagerFactory;
+
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -22,10 +26,14 @@
 	 * to create and perform various operations related to semantic index.
 	 */
 	private SpxSemanticIndexFacadeRegistry _facadeRegistry;
-
+	public PrimaryStoreMap<Long, String> tempMap;
+	public RecordManager tempManager;
+	
 	public SpxSemanticIndex()
 	{
 		_facadeRegistry = new SpxSemanticIndexFacadeRegistry();
+		
+		
 	}
 	
 	/**
@@ -96,6 +104,18 @@
 		}
 	}
 	
+	public boolean indexImportReferences(IStrategoString projectName,
+			final IStrategoAppl importReferences) throws Exception {
+	
+		IIndexer idx = new IIndexer() {
+			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				idxFacade.indexImportReferences(importReferences);
+			}
+		};
+		return indexSymbol(projectName, importReferences,  idx);
+	
+	}
 	
 	// Index module definition . 
 	public boolean indexModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleDefinition) throws Exception
@@ -213,6 +233,18 @@
 		return resolve(projectName, moduleTypedQname, resolver);
 	}
 	
+	
+	public IStrategoTerm getImports(IStrategoString projectName, final IStrategoAppl namespaceID) throws Exception{
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname)  throws Exception {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				return idxFacade.getImportReferences((IStrategoAppl)namespaceID);
+			}
+		};
+		
+		return resolve(projectName, namespaceID, resolver);
+	}
+	
 	public IStrategoTerm getModuleDeclarations(IStrategoString projectName, IStrategoTerm retTerm) throws Exception {
 		
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
@@ -359,5 +391,5 @@
 			throw new IllegalStateException("Spoofaxlang Semantic index not initialized");
 	}
 
-	
+		
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Sep 22 19:26:47 2011	(r23381)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Sep 23 01:28:38 2011	(r23382)
@@ -33,10 +33,10 @@
 	private final IStrategoConstructor _moduleDeclCon;
 	private final IStrategoConstructor _packageDeclCon;
 	private final IStrategoConstructor _languageDescriptorCon;
-
-	private static final String All= "*";
+	private final IStrategoConstructor _moduleQNameCon; 
+	private final IStrategoConstructor _packageQNameCon; 
 	
-
+	private static final String All= "*";
 	
 	/**
 	 * Initializes the SemanticIndexFactory
@@ -60,6 +60,8 @@
 		_moduleDeclCon 			= _termFactory.makeConstructor("ModuleDecl", 3);
 		_packageDeclCon 		= _termFactory.makeConstructor("PackageDecl", 2);
 		_languageDescriptorCon  = _termFactory.makeConstructor("LanguageDescriptor", 5);
+		_moduleQNameCon = _termFactory.makeConstructor("Module", 1);
+		_packageQNameCon = _termFactory.makeConstructor("Package", 1);
 		
 		_persistenceManager = new SpxPersistenceManager(_projectName , _agent.getWorkingDir(),agent);
 	}
@@ -178,7 +180,7 @@
 		return retTerm;
 	}
 	
-	
+
 	/**
 	 * Removes CompilationUnit located in {@code spxCompilationUnitPath} file path.  
 	 * 
@@ -210,7 +212,7 @@
 				(IStrategoString)packageDeclaration.getSubterm(PackageDeclaration.SPX_COMPILATION_UNIT_PATH)  // package location absolute path  
 		);
 	}
-	
+
 	/**
 	 * Indexes {@link PackageDeclaration}
 	 * 
@@ -220,7 +222,7 @@
 	public void indexPackageDeclaration(IStrategoAppl packageIdAppl, IStrategoString spxCompilationUnitPath){
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
 		
-		IStrategoList packageId = PackageDeclaration.getPackageId(getTermFactory(), packageIdAppl);
+		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageIdAppl);
 		
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
 		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
@@ -238,6 +240,45 @@
 	}
 	
 	/**
+	 * @param importReferences
+	 */
+	public void indexImportReferences(IStrategoAppl importReferences) {
+		IStrategoAppl namespaceId = (IStrategoAppl) importReferences.getSubterm(0);
+		IStrategoList imports = (IStrategoList) importReferences.getSubterm(1);
+		
+		if (namespaceId.getConstructor() == getModuleDeclCon()) {
+			ModuleDeclaration moduleDecl = lookupModuleDecl(namespaceId);
+			
+			moduleDecl.appendImports(imports);
+			
+			getPersistenceManager().spxModuleTable().define(moduleDecl);
+		} else if (namespaceId.getConstructor() == getPackageDeclCon()) {
+
+			PackageDeclaration pDecl = this.lookupPackageDecl(namespaceId);
+			
+			pDecl.appendImports(imports);
+			
+			getPersistenceManager().spxPackageTable().definePackageDeclaration(	pDecl);
+		} else
+			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
+	}
+
+	
+	public IStrategoTerm getImportReferences(IStrategoAppl namespaceId) {
+		IdentifiableConstruct ns; 
+
+		if (namespaceId.getConstructor() == getModuleDeclCon()) {
+			ns = lookupModuleDecl(namespaceId);
+		} else if (namespaceId.getConstructor() == getPackageDeclCon()) {
+			ns = this.lookupPackageDecl(namespaceId);
+		} else
+			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
+		
+		return ns.getImports(this);
+	}
+	
+
+	/**
 	 * Indexes LanguageDescriptor for a particular Package specified in {@code langaugeDescriptor}
 	 * 
 	 * @param languageDescriptor
@@ -246,7 +287,7 @@
 	{
 		verifyConstructor(languageDescriptor.getConstructor(), getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
 
-		IStrategoList qualifiedPackageId = PackageDeclaration.getPackageId(getTermFactory(), (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
+		IStrategoList qualifiedPackageId = PackageDeclaration.getPackageId(this, (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
 
 		table.verifyPackageIDExists(qualifiedPackageId) ;
@@ -284,16 +325,27 @@
 	 */
 	public IStrategoTerm getPackageDeclaration(IStrategoAppl packageTypedQName) throws IllegalArgumentException
 	{
-		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
+		PackageDeclaration decl = lookupPackageDecl(packageTypedQName);
 		
-		IStrategoList packageId = PackageDeclaration.getPackageId(getTermFactory(), packageTypedQName);
+		return decl.toTerm(this);
+	}
+
+	
+	/**
+	 * @param packageTypedQName
+	 * @return
+	 * @throws IllegalArgumentException
+	 */
+	private PackageDeclaration lookupPackageDecl(IStrategoAppl packageTypedQName) throws IllegalArgumentException {
 		
+		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
+		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageTypedQName);
 		PackageDeclaration decl = table.getPackageDeclaration(packageId);
 		
 		if (decl == null)
 			throw new IllegalArgumentException( "Unknown Package Id"+ packageTypedQName.toString());
 		
-		return decl.toTerm(this);
+		return decl;
 	}
 	
 	public IStrategoList getPackageDeclarations(IStrategoString filePath) {
@@ -328,16 +380,28 @@
 	 */
 	public IStrategoTerm getModuleDeclaration(IStrategoAppl moduleTypeQName) throws IllegalArgumentException
 	{
+		ModuleDeclaration decl = lookupModuleDecl(moduleTypeQName);
+
+		return decl.toTerm(this);
+	}
+
+	/**
+	 * @param moduleTypeQName
+	 * @return
+	 */
+	private ModuleDeclaration lookupModuleDecl(IStrategoAppl moduleTypeQName) {
+		
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 		
-		IStrategoList moduleId = ModuleDeclaration.getModuleId(getTermFactory(), moduleTypeQName);
+		IStrategoList moduleId = ModuleDeclaration.getModuleId(this, moduleTypeQName);
 		
 		ModuleDeclaration decl = table.getModuleDeclaration(moduleId);
 		
 		if (decl == null)
 			throw new IllegalArgumentException( "Unknown Module Id"+ moduleTypeQName.toString());
 		
-		return decl.toTerm(this);
+		
+		return decl;
 	}
 	
 	public IStrategoTerm getModuleDeclarationsOf(IStrategoTerm res) {
@@ -377,7 +441,7 @@
 	public IStrategoList getModuleDeclarations(IStrategoAppl packageQName) {
 		logMessage("getModuleDeclarations | Arguments : " + packageQName);
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
-		IStrategoList packageID = PackageDeclaration.getPackageId(getTermFactory(), packageQName);
+		IStrategoList packageID = PackageDeclaration.getPackageId(this, packageQName);
 		
 		_persistenceManager.spxPackageTable().verifyPackageIDExists(packageID ) ;
 		
@@ -398,22 +462,15 @@
 	 */
 	public IStrategoTerm getModuleDefinition(IStrategoAppl moduleTypedQName) throws IllegalArgumentException
 	{
+		ModuleDeclaration decl = lookupModuleDecl(moduleTypedQName);
+
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 		
-		IStrategoList qualifiedModuleId = ModuleDeclaration.getModuleId(getTermFactory(), moduleTypedQName);
-		
-		ModuleDeclaration decl = table.getModuleDeclaration(qualifiedModuleId);
+		IStrategoList qualifiedModuleId = ModuleDeclaration.getModuleId(this, moduleTypedQName);
+		IStrategoTerm moduleAterm =table.getModuleDefinition(qualifiedModuleId) ;
+		IStrategoTerm moduleAnnotatedAterm  = table.getAnalyzedModuleDefinition(qualifiedModuleId);
 		
-		if (decl != null)
-		{	
-			IStrategoTerm moduleAterm =table.getModuleDefinition(qualifiedModuleId) ;
-			IStrategoTerm moduleAnnotatedAterm  = table.getAnalyzedModuleDefinition(qualifiedModuleId);
-			
-			ModuleDefinition def = new ModuleDefinition( decl , (IStrategoAppl)moduleAterm, (IStrategoAppl)moduleAnnotatedAterm);
-			return def.toTerm(this);
-		}
-		else
-			throw new IllegalArgumentException( "Unknown Module Id"+ moduleTypedQName.toString());
+		return new ModuleDefinition( decl , (IStrategoAppl)moduleAterm, (IStrategoAppl)moduleAnnotatedAterm).toTerm(this);
 	}
 	
 	/**
@@ -425,7 +482,7 @@
 	 * @throws Exception  If package Id is valid but does not have any language descriptor registered
 	 */
 	public IStrategoTerm getLanguageDescriptor ( IStrategoAppl packageTypedQName) throws IllegalArgumentException, Exception{
-		IStrategoList  packageQName = PackageDeclaration.getPackageId(getTermFactory(), packageTypedQName);
+		IStrategoList  packageQName = PackageDeclaration.getPackageId(this, packageTypedQName);
 
 		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
 		table.verifyPackageIDExists(packageQName) ;
@@ -468,12 +525,12 @@
 	{
 		verifyConstructor(moduleDefinition.getConstructor() , _moduleDefCon , "Illegal Module Definition" );
 		
-		indexModuleDefinition(	(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.ModuleTypedQNameIndex), 
-								(IStrategoString) moduleDefinition.getSubterm(ModuleDeclaration.ModulePathIndex), 
-								(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.PackageTypedQNameIndex),
-								(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.AstIndex),
-								(IStrategoAppl)   moduleDefinition.getSubterm(ModuleDeclaration.AnalyzedAstIndex)
-								);
+		indexModuleDefinition(
+				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.ModuleTypedQNameIndex),
+				(IStrategoString) moduleDefinition.getSubterm(ModuleDeclaration.ModulePathIndex),
+				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.PackageTypedQNameIndex),
+				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.AstIndex),
+				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.AnalyzedAstIndex));
 	}
 
 	/**
@@ -491,8 +548,8 @@
 
 		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
 
-		IStrategoList moduleId = ModuleDeclaration.getModuleId( this.getTermFactory(), moduleQName);
-		IStrategoList packageId = PackageDeclaration.getPackageId(this.getTermFactory(), packageQName);
+		IStrategoList moduleId = ModuleDeclaration.getModuleId( this, moduleQName);
+		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageQName);
 		
 		_persistenceManager.spxPackageTable().verifyPackageIDExists(packageId) ;
 		
@@ -533,20 +590,18 @@
 	 * 
 	 * @throws IOException
 	 */
-	public void reinitSymbolTable() throws IOException {
-		
+	public void reinitSymbolTable() throws IOException {	
 		if (! isPersistenceManagerClosed())
 			_persistenceManager.clearAll();
 	}
 
+	
 	/**
 	 * Checks whether the underlying persistence manager is already open. 
 	 * 
 	 * @return true if PersistenceManage is open. Otherwise returns false.
 	 */
-	boolean isPersistenceManagerClosed() { 
-		return _persistenceManager.IsClosed();
-	}
+	boolean isPersistenceManagerClosed() { 	return _persistenceManager.IsClosed(); }
 	/**
 	 * @return the PackageDeclaration Constructor
 	 */
@@ -557,10 +612,15 @@
 	/**
 	 * @return the ModuleDefinition Constructor
 	 */
-	public IStrategoConstructor getModuleDefCon() {	return _moduleDefCon; }
+	IStrategoConstructor getModuleDefCon() {	return _moduleDefCon; }
+
+	IStrategoConstructor getLanguageDescriptorCon() { return _languageDescriptorCon;	}
+
+	IStrategoConstructor getModuleQNameCon() {return _moduleQNameCon; }
+
+	IStrategoConstructor getPackageQNameCon() {	return _packageQNameCon;}
+
 
-	public IStrategoConstructor getLanguageDescriptorCon() { return _languageDescriptorCon;	}
-	
 	/**
 	 * @param spxCompilationUnitAST
 	 * @return
@@ -623,5 +683,4 @@
 	private void logMessage(String message) {
 		_persistenceManager.logMessage("SpxSemanticIndexFacade", message);
 	}
-
 }

From m.dejonge at tudelft.nl  Fri Sep 23 09:19:43 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 23 Sep 2011 07:19:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23383 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <20110923071943.A5F1D108C004@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Sep 23 07:19:42 2011
New Revision: 23383
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23383&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	Fri Sep 23 01:28:38 2011	(r23382)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	Fri Sep 23 07:19:42 2011	(r23383)
@@ -22,7 +22,6 @@
 import org.spoofax.jsglr.client.MultiBadTokenException;
 import org.spoofax.jsglr.client.ParseTimeoutException;
 import org.spoofax.jsglr.client.RegionRecovery;
-import org.spoofax.jsglr.client.SGLR;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
 import org.spoofax.jsglr.client.imploder.Token;

From M.A.Akhter at student.tudelft.nl  Fri Sep 23 11:30:55 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 23 Sep 2011 09:30:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23384 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110923093055.E1707CC116@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep 23 09:30:55 2011
New Revision: 23384
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23384&sc=1

Log:
primitive to index references

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java	Fri Sep 23 09:30:55 2011	(r23384)
@@ -0,0 +1,63 @@
+/**
+ * 
+ */
+package org.spoofax.interpreter.library.language.spxlang;
+
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.net.URI;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Md. Adil Akhter
+ *
+ */
+public class SPX_index_import_references extends AbstractPrimitive {
+
+	private final static String NAME = "SPX_index_import_references";
+	
+	private final static int PROJECT_NAME_INDEX    = 0;
+	private final static int IMPORT_REFERENCES_INDEX = 1;
+	
+	private final static int NO_ARGS = 3;
+	
+	private final SpxSemanticIndex index;
+	
+	public SPX_index_import_references(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		boolean successStatement = false;
+		
+		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[IMPORT_REFERENCES_INDEX])) {
+			
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl importReferences   = (IStrategoAppl) tvars[IMPORT_REFERENCES_INDEX];
+			
+			try
+			{
+				successStatement = index.indexImportReferences(projectName, importReferences);
+			}
+			catch(Exception ex)
+			{ 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+			}
+		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
+		return successStatement;	
+	}
+}
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Fri Sep 23 11:31:50 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 23 Sep 2011 09:31:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23385 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20110923093151.01292108C00B@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Sep 23 09:31:50 2011
New Revision: 23385
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23385&sc=1

Log:
primitive to get all the import references

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java	Fri Sep 23 09:31:50 2011	(r23385)
@@ -0,0 +1,64 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * Primitive to retrieve ModuleDeclaration from {@link SpxSemanticIndex}
+ * 
+ * @author Md. Adil Akhter
+ * Created On : Sep 11, 2011
+ */
+public class SPX_index_get_imports extends AbstractPrimitive {
+
+	private static String NAME = "SPX_index_get_imports";
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int NAMESPACE_ID_INDEX = 1;
+	
+	private final static int NO_ARGS = 2;
+	
+	private final SpxSemanticIndex index;
+
+	public SPX_index_get_imports(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
+		this.index = index;
+	}
+	
+	/* Retrieve Spoofaxlang ModuleDeclaration with Module ID 
+	 * specified in {@code tvars}.    
+	 * 
+	 * {@code tvars} contains name of the project and typed qualified ModuleID  
+	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		boolean successStatement = false;
+		if ( (NO_ARGS == tvars.length) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[NAMESPACE_ID_INDEX])) 
+		{
+			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl namespaceID = (IStrategoAppl)tvars[NAMESPACE_ID_INDEX];
+			try {
+				IStrategoTerm t = index.getImports(projectName, namespaceID);
+				env.setCurrent(t);
+				successStatement = true;
+			} 
+			catch(Exception ex)
+			{
+				// Logging any exception throw from the underlying symbol table. 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+			}
+		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Incokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
+		return successStatement;
+	}
+
+}

From M.A.Akhter at student.tudelft.nl  Sat Sep 24 13:09:07 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 24 Sep 2011 11:09:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23386 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	spxlang tests
Message-ID: <20110924110907.4B512CC170@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Sep 24 11:09:06 2011
New Revision: 23386
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23386&sc=1

Log:
+ refactoring 
+ unit tests are added

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IIndexer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IIndexer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IIndexer.java	Fri Sep 23 09:31:50 2011	(r23385)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IIndexer.java	Sat Sep 24 11:09:06 2011	(r23386)
@@ -2,9 +2,15 @@
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 
 
 interface IIndexer 
 {	
 	public void index(IStrategoString projectName , IStrategoAppl appl) throws Exception ;
 }
+
+interface IIndexManageCommand
+{
+	public void executeCommnad(IStrategoTerm projectName , Object... objects) throws Exception;
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Fri Sep 23 09:31:50 2011	(r23385)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Sat Sep 24 11:09:06 2011	(r23386)
@@ -4,7 +4,6 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -16,31 +15,44 @@
 public abstract class IdentifiableConstruct implements Serializable
 {
 	private static final long serialVersionUID = 1055862481052307186L;
-	private static final String qnameContructorName = "QName";
-	private static IStrategoConstructor qnameCon;
 	
-	final IStrategoList id;
-	final Set<IStrategoTerm> imports; 
+	protected final IStrategoList id;
+	protected final Set<IStrategoTerm> importReferences; 
 	
 	public IdentifiableConstruct(IStrategoList id) {
-		assert id != null;
-		
+		assert id != null :  " ID can not be null " ;
+
 		this.id = id;
-		this.imports = new HashSet<IStrategoTerm>();
+		this.importReferences = new HashSet<IStrategoTerm>();
 	}
 	
-	public IStrategoList getId(){ return id; }
-
-	public abstract IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade);  
-
-	static IStrategoAppl toIdTerm ( SpxSemanticIndexFacade facade , IStrategoConstructor namespaceCon, IStrategoList id)
-	{
-		ITermFactory factory = facade.getTermFactory();
+	public IStrategoList getId(){ return id; }  
+	
+	public abstract IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade);
+	
+	public void addImportRefernces ( IStrategoList  imports) {
+	
+		for (IStrategoTerm i: StrategoListIterator.iterable(imports)) {
+			this.importReferences.add(i);
+		}
+	}
+	
+	protected Set<IStrategoTerm> getEnclosedImportReferences(SpxSemanticIndexFacade idxFacade) { return new HashSet<IStrategoTerm>(); } 
+	
+	public Set<IStrategoTerm> getImportReferneces() {return importReferences ; }
+	
+	IStrategoList getImports(SpxSemanticIndexFacade idxFacade) {	
+		ITermFactory termFactory = idxFacade.getTermFactory();
 		
-		IStrategoConstructor qnameCons = factory.makeConstructor(qnameContructorName, 1);
-		IStrategoAppl qnameAppl = factory.makeAppl(qnameCons, id);
+		HashSet<IStrategoTerm> allImportRefs = new HashSet<IStrategoTerm>();
+		allImportRefs.addAll(this.importReferences);
+		allImportRefs.addAll(getEnclosedImportReferences(idxFacade));
 		
-		return factory.makeAppl(namespaceCon, qnameAppl);
+		IStrategoList result = termFactory.makeList();
+		for (IStrategoTerm t: allImportRefs)
+			result = idxFacade.getTermFactory().makeListCons(t, result);
+	
+		return result;
 	}
 	
 	protected IStrategoTerm forceImploderAttachment(IStrategoTerm term) {
@@ -61,46 +73,7 @@
 	 * 
 	 * @return {@link String} representing the absolute path of the  Construct
 	 */
-	protected String getFileLocation() {
-		return null;
-	}
-	
-	/**
-	 * Returns {@link IStrategoList} representation of qualified ID of the {@link IdentifiableConstruct}  
-	 * 
-	 * @param fac an instance of {@link ITermFactory}
-	 * @param qName Typed qualified Name of the construct 
-	 * 
-	 * @return underlying {@link IStrategoList} qualified name
-	 */
-	protected static IStrategoList getID(SpxSemanticIndexFacade facade, IStrategoAppl qName) {
-		
-		if ( qnameCon != null)
-			qnameCon = facade.getTermFactory().makeConstructor(qnameContructorName, 1);
-		
-		if(qName.getConstructor() == qnameCon)
-			return (IStrategoList)qName.getSubterm(0);
-		
-		throw new IllegalArgumentException("Invalid QName : " + qName);
-	}
-	
-	
-	void appendImports ( IStrategoList  imports) {
-		
-		for (IStrategoTerm i: StrategoListIterator.iterable(imports)) {
-			this.imports.add(i);
-		}
-	}
-	
-	public IStrategoList getImports( SpxSemanticIndexFacade idxFacade) 
-	{
-		ITermFactory termFactory = idxFacade.getTermFactory();
-		IStrategoList result = termFactory.makeList();
-		
-		for (IStrategoTerm t: imports)
-			result = termFactory.makeListCons(t, result);
-		return result;
-	}
+	protected String getFileLocation() { return null; }
 	
 	/**
 	 * Constructs {@link IStrategoList} from {@code decls}  
@@ -109,19 +82,44 @@
 	 * @param decls A collection of ModuleDeclataions 
 	 * @return {@link IStrategoList}
 	 */
-	public static <T extends IdentifiableConstruct> IStrategoList toTerm( SpxSemanticIndexFacade idxFacade , Iterable<T> decls)
-	{
+	public static <T extends IdentifiableConstruct> IStrategoList toTerm( SpxSemanticIndexFacade idxFacade , Iterable<T> decls){
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		IStrategoList result = termFactory.makeList();
 		
-		if(decls!=null)
-		{	
+		if(decls!=null){	
 			for ( T decl: decls)
 				result = termFactory.makeListCons(decl.toTerm(idxFacade), result);
 		}
+		
 		return result;
 	}
+
+	static IStrategoAppl toIdTerm ( SpxSemanticIndexFacade facade , IStrategoConstructor namespaceCon, IStrategoList id)
+	{
+		ITermFactory factory = facade.getTermFactory();
+		
+		IStrategoConstructor qnameCons = facade.getQNameCon();
+		IStrategoAppl qnameAppl = factory.makeAppl(qnameCons, id);
+		return factory.makeAppl(namespaceCon, qnameAppl);
+	}
+
+	/**
+	 * Returns {@link IStrategoList} representation of qualified ID of the {@link IdentifiableConstruct}  
+	 * 
+	 * @param fac an instance of {@link ITermFactory}
+	 * @param qName Typed qualified Name of the construct 
+	 * 
+	 * @return underlying {@link IStrategoList} qualified name
+	 */
+	protected static IStrategoList getID(SpxSemanticIndexFacade facade, IStrategoAppl qName) {
+		
+		if(qName.getConstructor() == facade.getQNameCon())
+			return (IStrategoList)qName.getSubterm(0);
+		
+		throw new IllegalArgumentException("Invalid QName : " + qName);
+	}
 	
+
 	/* (non-Javadoc)
 	 * @see java.lang.Object#hashCode()
 	 */
@@ -132,6 +130,15 @@
 		result = prime * result + ((id == null) ? 0 : id.hashCode());
 		return result;
 	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "IdentifiableConstruct [id=" + id + "]";
+	}
+	
 
 	/* (non-Javadoc)
 	 * @see java.lang.Object#equals(java.lang.Object)
@@ -153,12 +160,4 @@
 		return true;
 	}
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "IdentifiableConstruct [id=" + id + "]";
-	}
-	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Fri Sep 23 09:31:50 2011	(r23385)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Sat Sep 24 11:09:06 2011	(r23386)
@@ -14,18 +14,10 @@
 {
 	private static final long serialVersionUID = -9081890582103567413L;
 	
-	
 	static final int PACKAGE_ID_INDEX = 0;
 	static final int SPX_COMPILATION_UNIT_PATH = 1;
 	
 	final Set<String> resourceAbsPaths = new HashSet<String>();
-	final Set<IStrategoList> importedScopes  =  new HashSet<IStrategoList>();
-	
-	
-	PackageDeclaration(IStrategoList id)
-	{
-		super(id);
-	}
 	
 	public PackageDeclaration(String resourceAbsPath, IStrategoList id) {
 		super(id);
@@ -33,26 +25,74 @@
 		resourceAbsPaths.add(resourceAbsPath); 
 	}
 	
-	public void add(String resAbsolutePath)
+	/**
+	 * Initializes an instance of {@link PackageDeclaration}
+	 * 
+	 * @param id
+	 */
+	PackageDeclaration(IStrategoList id){
+		super(id);
+	}
+	
+	public void addFileUri(String resAbsolutePath)
 	{
 		resourceAbsPaths.add(resAbsolutePath);
 	}
 	
-	public void remove(String resAbsolutePath)
-	{
-		resourceAbsPaths.remove(resAbsolutePath);
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		PackageDeclaration other = (PackageDeclaration) obj;
+		if (resourceAbsPaths == null) {
+			if (other.resourceAbsPaths != null)
+				return false;
+		} else if (!resourceAbsPaths.equals(other.resourceAbsPaths))
+			return false;
+		return true;
 	}
 	
+	
 	public Set<String> getAllFilePaths()
 	{
 		return resourceAbsPaths;
 	}
 	
-	public boolean doesNotExistInAnyFile()
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime
+				* result
+				+ ((resourceAbsPaths == null) ? 0 : resourceAbsPaths.hashCode());
+		return result;
+	}
+	
+	public boolean isNotExistedInAnyFile()
 	{
 		return (resourceAbsPaths == null) || (resourceAbsPaths.size() == 0) ; 
 	}
 	
+	public void removeFileUri(String resAbsolutePath){resourceAbsPaths.remove(resAbsolutePath);}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "PackageDeclaration [id=" + id + ", resourceAbsPaths=" + resourceAbsPaths + "]";
+	}
+	
 	/* (non-Javadoc)
 	 * @see org.spoofax.interpreter.library.language.spxlang.BaseConstructDeclaration#toTerm(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
@@ -78,14 +118,31 @@
 		return this.forceImploderAttachment(retTerm);
 	}
 	
+
+	@Override
+	protected Set<IStrategoTerm> getEnclosedImportReferences(SpxSemanticIndexFacade idxFacade) {
+
+		Set<IStrategoTerm> retImportDecls = super.getEnclosedImportReferences(idxFacade);
+
+		Iterable<ModuleDeclaration> moduldeDecls = idxFacade
+				.getPersistenceManager().spxModuleTable()
+				.getModuleDeclarationsByPackageId(this.getId());
+
+		for (ModuleDeclaration m : moduldeDecls) {
+			retImportDecls.addAll(m.getImportReferneces());
+		}
+
+		return retImportDecls;
+	}
+	
 	/**
 	 * Gets PackageID from Typed Package QName
+	 * 
 	 * @param fac
 	 * @param packageQName
 	 * @return
 	 */
-	public static IStrategoList getPackageId(SpxSemanticIndexFacade facade,IStrategoAppl packageQName)
-	{
+	public static IStrategoList getPackageId(SpxSemanticIndexFacade facade,IStrategoAppl packageQName){
 		final IStrategoConstructor packageQNameCon = facade.getPackageQNameCon();
 		
 		if(packageQNameCon == packageQName.getConstructor())
@@ -97,23 +154,6 @@
 	}
 	
 	/**
-	 * Converts to typed Package Qualified Name
-	 *  
-	 * @param termFactory
-	 * @param decl
-	 * @return
-	 */
-	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, PackageDeclaration decl)
-	{
-		return toPackageIdTerm (facade, decl.getId());
-	}
-	
-	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, IStrategoList id)
-	{
-		return toIdTerm(facade ,  facade.getPackageQNameCon(), id);
-	}
-	
-	/**
 	 * Creates a new instance of {@link PackageDeclaration} . It acts as a copy
 	 * constructor to clone {@code decl}.
 	 * 
@@ -127,49 +167,25 @@
 		PackageDeclaration newDecl = new PackageDeclaration(decl.getId());
 		for( String str : decl.getAllFilePaths())
 		{
-			newDecl.add(str); 
+			newDecl.addFileUri(str); 
 		}
 		return newDecl;
 	}
-	
-	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "PackageDeclaration [id=" + id + ", resourceAbsPaths=" + resourceAbsPaths + "]";
-	}
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = super.hashCode();
-		result = prime
-				* result
-				+ ((resourceAbsPaths == null) ? 0 : resourceAbsPaths.hashCode());
-		return result;
+	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, IStrategoList id)
+	{
+		return toIdTerm(facade ,  facade.getPackageQNameCon(), id);
 	}
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
+	/**
+	 * Converts to typed Package Qualified Name
+	 *  
+	 * @param termFactory
+	 * @param decl
+	 * @return
 	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (!super.equals(obj))
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		PackageDeclaration other = (PackageDeclaration) obj;
-		if (resourceAbsPaths == null) {
-			if (other.resourceAbsPaths != null)
-				return false;
-		} else if (!resourceAbsPaths.equals(other.resourceAbsPaths))
-			return false;
-		return true;
+	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, PackageDeclaration decl)
+	{
+		return toPackageIdTerm (facade, decl.getId());
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Fri Sep 23 09:31:50 2011	(r23385)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Sat Sep 24 11:09:06 2011	(r23386)
@@ -17,9 +17,11 @@
 
 /**
  * SymbolTable for Spx Packages 
+ * 
  * @author Md. Adil Akhter
  * Created On : Sep 1, 2011
  */
+
 public class SpxPackageLookupTable  implements ICompilationUnitRecordListener{
 
 	// Symbol table that stores package declarations 
@@ -179,7 +181,7 @@
 		
 		if ( decl != null)
 		{
-			decl.add(absPath);
+			decl.addFileUri(absPath);
 			this.definePackageDeclaration(decl);
 			return true;
 		}
@@ -193,7 +195,7 @@
 		PackageDeclaration decl  = PackageDeclaration.newInstance( _packageLookupTable.get(key));
 		
 		if ( decl != null){
-			decl.remove(absPath);
+			decl.removeFileUri(absPath);
 			// redefining it again 
 			this.definePackageDeclaration(decl);
 			return true;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Sep 23 09:31:50 2011	(r23385)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sat Sep 24 11:09:06 2011	(r23386)
@@ -1,10 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import java.io.IOException;
-
-import jdbm.PrimaryStoreMap;
-import jdbm.RecordManager;
-import jdbm.RecordManagerFactory;
+import java.util.HashMap;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -21,21 +18,20 @@
  */
 public class SpxSemanticIndex {
 
+	//TODO : generalize and refactor common operations. Only expose few public operations and generalize others.  
+	
 	/**
 	 * Registry keeps the mapping of projectName to its own facade
 	 * to create and perform various operations related to semantic index.
 	 */
-	private SpxSemanticIndexFacadeRegistry _facadeRegistry;
-	public PrimaryStoreMap<Long, String> tempMap;
-	public RecordManager tempManager;
+	private final SpxSemanticIndexFacadeRegistry _facadeRegistry;
 	
 	public SpxSemanticIndex()
 	{
 		_facadeRegistry = new SpxSemanticIndexFacadeRegistry();
-		
-		
 	}
 	
+	
 	/**
 	 * Initializing Index for the project specified by the projectName
 	 * @param projectName Name of the project
@@ -44,13 +40,20 @@
 	 * @return true if the operation is successful ; false otherwise.
 	 * @throws IOException 
 	 */
-	public boolean initialize(IStrategoTerm projectName,  ITermFactory termFactory, IOAgent agent) throws IOException 
+	public boolean initialize(IStrategoTerm projectName,  ITermFactory termFactory, IOAgent agent)  throws Exception
 	{
-		try
-		{	// Adding a new entry of the facade for the project 
-			// in the registry. 
-			_facadeRegistry.add(projectName, termFactory, agent) ;
 
+		try
+		{	
+			new IIndexManageCommand(){
+				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
+					// Adding a new entry of the facade for the project 
+					// in the registry. 
+					_facadeRegistry.add(projectName, (ITermFactory)objects[0], (IOAgent)objects[1]) ;
+					
+				}
+			}.executeCommnad(projectName, termFactory , agent);
+			
 			return true; 
 		}
 		catch(IllegalStateException e)
@@ -65,7 +68,7 @@
 		}	
 	}
 	
-	private boolean indexSymbol(IStrategoString projectName , IStrategoAppl appl , IIndexer indexer) throws Exception
+	private boolean executeIndexer(IStrategoString projectName , IStrategoAppl appl , IIndexer indexer) throws Exception
 	{
 		boolean successStatement = false;
 		try {
@@ -113,7 +116,7 @@
 				idxFacade.indexImportReferences(importReferences);
 			}
 		};
-		return indexSymbol(projectName, importReferences,  idx);
+		return executeIndexer(projectName, importReferences,  idx);
 	
 	}
 	
@@ -126,10 +129,9 @@
 				idxFacade.indexModuleDefinition(moduleDefinition);
 			}
 		};
-		return indexSymbol(projectName, moduleDefinition,  idx);
+		return executeIndexer(projectName, moduleDefinition,  idx);
 	}
 	
-	
 	public boolean indexPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageDecl) throws Exception {
 		IIndexer idx = new IIndexer() {
 			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
@@ -138,10 +140,9 @@
 				}
 		};
 
-		return indexSymbol(projectName, packageDecl,  idx);
+		return executeIndexer(projectName, packageDecl,  idx);
 	}
 
-	
 	public boolean indexLanguageDescriptor(IStrategoString projectName,	final IStrategoAppl languageDescriptor) throws Exception {
 		IIndexer idx = new IIndexer() {
 			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception  {
@@ -151,7 +152,7 @@
 		};
 		
 
-		return indexSymbol(projectName, languageDescriptor,  idx);
+		return executeIndexer(projectName, languageDescriptor,  idx);
 	}
 	
 	/**
@@ -185,7 +186,6 @@
 		}	
 		return successStatement;
 	}
-
 	
 	public IStrategoTerm getCompilationUnit(IStrategoString projectName, IStrategoString spxCompilationUnitPath) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
@@ -199,7 +199,6 @@
 		return resolve(projectName, spxCompilationUnitPath, resolver);
 	}
 	
-	
 	public IStrategoTerm getPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
@@ -233,7 +232,6 @@
 		return resolve(projectName, moduleTypedQname, resolver);
 	}
 	
-	
 	public IStrategoTerm getImports(IStrategoString projectName, final IStrategoAppl namespaceID) throws Exception{
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
 			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname)  throws Exception {
@@ -256,7 +254,6 @@
 		
 		return resolve(projectName, retTerm, resolver);
 	}
-
 	
 	public IStrategoTerm getModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception {
 		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
@@ -303,12 +300,18 @@
 		return successStatement;
 	}
 	
-	public boolean clearall(IStrategoString projectName) throws SpxSymbolTableException, IOException {
+	public boolean clearall(IStrategoString projectName) throws Exception {
 		boolean retValue = false; 
 		try
 		{
-			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-			idxFacade.reinitSymbolTable();
+			new IIndexManageCommand(){
+				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					idxFacade.reinitSymbolTable();
+
+				}
+			}.executeCommnad(projectName);
+			
 			retValue = true;
 		}
 		catch(IllegalStateException e)
@@ -331,13 +334,18 @@
 	 * @throws IOException 
 	 * @throws SpxSymbolTableException 
 	 */
-	public boolean save(IStrategoTerm projectName) throws IllegalStateException, IOException, SpxSymbolTableException
+	public boolean save(IStrategoTerm projectName) throws Exception
 	{
 		boolean retValue = false; 
 		try
 		{
-			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-			idxFacade.persistChanges();
+			new IIndexManageCommand(){
+				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					idxFacade.persistChanges();
+
+				}
+			}.executeCommnad(projectName);
 			retValue = true;
 		}
 		catch(IllegalStateException e)
@@ -353,13 +361,24 @@
 		return retValue;
 	}
 	
-	
-	
-	public boolean close(IStrategoTerm projectName) throws IOException {
-		_facadeRegistry.removeFacade(projectName);
+	public boolean close(IStrategoTerm projectName) throws Exception {
+		new IIndexManageCommand(){
+			public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
+				_facadeRegistry.removeFacade(projectName);
+
+			}
+		}.executeCommnad(projectName);
+
 		return true;
 	}
 	
+	
+	public void executeCommand( IStrategoTerm commandName, IStrategoTerm projectName, Object...  objects )
+	{
+		// gets the command from the hashmap indexed by commandname 
+		// pass all the arguments 
+		// execute the commands 
+	}
 	/**
 	 * Closes any underlying open connection and clean up unmanaged resources. 
 	 * 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Sep 23 09:31:50 2011	(r23385)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Sep 24 11:09:06 2011	(r23386)
@@ -5,6 +5,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
+import java.util.HashMap;
 
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
@@ -19,25 +20,17 @@
 import org.spoofax.terms.attachments.TermAttachmentStripper;
 
 public class SpxSemanticIndexFacade {
-
-	private final ISpxPersistenceManager _persistenceManager;
 	
+	private final ISpxPersistenceManager _persistenceManager;
 	private final String _projectName ; 
 	private final ITermFactory _termFactory;
 	private final IOAgent _agent;
-	
 	private final TermAttachmentStripper _stripper;
 	private final TermConverter _converter;
-	
-	private final IStrategoConstructor _moduleDefCon;
-	private final IStrategoConstructor _moduleDeclCon;
-	private final IStrategoConstructor _packageDeclCon;
-	private final IStrategoConstructor _languageDescriptorCon;
-	private final IStrategoConstructor _moduleQNameCon; 
-	private final IStrategoConstructor _packageQNameCon; 
-	
 	private static final String All= "*";
 	
+	private final HashMap<ConstructorDef , IStrategoConstructor> _knownCons;
+	
 	/**
 	 * Initializes the SemanticIndexFactory
 	 * @param projectName name of the project 
@@ -56,16 +49,11 @@
 		_converter = new TermConverter(_termFactory);
 		_converter.setOriginEnabled(true);
 		
-		_moduleDefCon  			= _termFactory.makeConstructor("ModuleDef", 5);
-		_moduleDeclCon 			= _termFactory.makeConstructor("ModuleDecl", 3);
-		_packageDeclCon 		= _termFactory.makeConstructor("PackageDecl", 2);
-		_languageDescriptorCon  = _termFactory.makeConstructor("LanguageDescriptor", 5);
-		_moduleQNameCon = _termFactory.makeConstructor("Module", 1);
-		_packageQNameCon = _termFactory.makeConstructor("Package", 1);
-		
+		_knownCons = new HashMap<ConstructorDef ,IStrategoConstructor>();
 		_persistenceManager = new SpxPersistenceManager(_projectName , _agent.getWorkingDir(),agent);
+		
+		initKnownConstructors();
 	}
-
 	/**
 	 * Returns the TermFactory 
 	 * @return
@@ -243,40 +231,39 @@
 	 * @param importReferences
 	 */
 	public void indexImportReferences(IStrategoAppl importReferences) {
+		
 		IStrategoAppl namespaceId = (IStrategoAppl) importReferences.getSubterm(0);
 		IStrategoList imports = (IStrategoList) importReferences.getSubterm(1);
 		
-		if (namespaceId.getConstructor() == getModuleDeclCon()) {
+		if (namespaceId.getConstructor() == getModuleQNameCon()) {
 			ModuleDeclaration moduleDecl = lookupModuleDecl(namespaceId);
 			
-			moduleDecl.appendImports(imports);
+			moduleDecl.addImportRefernces(imports);
 			
 			getPersistenceManager().spxModuleTable().define(moduleDecl);
-		} else if (namespaceId.getConstructor() == getPackageDeclCon()) {
+		} else if (namespaceId.getConstructor() == getPackageQNameCon()) {
 
 			PackageDeclaration pDecl = this.lookupPackageDecl(namespaceId);
 			
-			pDecl.appendImports(imports);
+			pDecl.addImportRefernces(imports);
 			
 			getPersistenceManager().spxPackageTable().definePackageDeclaration(	pDecl);
 		} else
 			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
 	}
 
-	
 	public IStrategoTerm getImportReferences(IStrategoAppl namespaceId) {
 		IdentifiableConstruct ns; 
 
-		if (namespaceId.getConstructor() == getModuleDeclCon()) {
+		if (namespaceId.getConstructor() == getModuleQNameCon()) {
 			ns = lookupModuleDecl(namespaceId);
-		} else if (namespaceId.getConstructor() == getPackageDeclCon()) {
+		} else if (namespaceId.getConstructor() == getPackageQNameCon()) {
 			ns = this.lookupPackageDecl(namespaceId);
 		} else
 			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
 		
 		return ns.getImports(this);
 	}
-	
 
 	/**
 	 * Indexes LanguageDescriptor for a particular Package specified in {@code langaugeDescriptor}
@@ -405,7 +392,6 @@
 	}
 	
 	public IStrategoTerm getModuleDeclarationsOf(IStrategoTerm res) {
-		
 		IStrategoTerm retValue ;
 		
 		if(Tools.isTermAppl(res))
@@ -523,7 +509,7 @@
 	 */
 	public void indexModuleDefinition(IStrategoAppl moduleDefinition) throws IllegalArgumentException
 	{
-		verifyConstructor(moduleDefinition.getConstructor() , _moduleDefCon , "Illegal Module Definition" );
+		verifyConstructor(moduleDefinition.getConstructor() , getModuleDefCon() , "Illegal Module Definition" );
 		
 		indexModuleDefinition(
 				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.ModuleTypedQNameIndex),
@@ -602,23 +588,6 @@
 	 * @return true if PersistenceManage is open. Otherwise returns false.
 	 */
 	boolean isPersistenceManagerClosed() { 	return _persistenceManager.IsClosed(); }
-	/**
-	 * @return the PackageDeclaration Constructor
-	 */
-	public IStrategoConstructor getPackageDeclCon() { return _packageDeclCon; }
-	
-	public IStrategoConstructor getModuleDeclCon() { return _moduleDeclCon; }
-
-	/**
-	 * @return the ModuleDefinition Constructor
-	 */
-	IStrategoConstructor getModuleDefCon() {	return _moduleDefCon; }
-
-	IStrategoConstructor getLanguageDescriptorCon() { return _languageDescriptorCon;	}
-
-	IStrategoConstructor getModuleQNameCon() {return _moduleQNameCon; }
-
-	IStrategoConstructor getPackageQNameCon() {	return _packageQNameCon;}
 
 
 	/**
@@ -683,4 +652,90 @@
 	private void logMessage(String message) {
 		_persistenceManager.logMessage("SpxSemanticIndexFacade", message);
 	}
+	
+	public IStrategoConstructor getPackageDeclCon() { return _knownCons.get(ConstructorDef.newInstance("PackageDecl",2)); }
+	
+	public IStrategoConstructor getModuleDeclCon() { return _knownCons.get(ConstructorDef.newInstance("ModuleDecl", 3));  }
+
+	public IStrategoConstructor getModuleDefCon() {	return _knownCons.get(ConstructorDef.newInstance("ModuleDef" , 5)); }
+
+	public IStrategoConstructor getLanguageDescriptorCon() { return _knownCons.get(ConstructorDef.newInstance("LanguageDescriptor" , 5));}
+
+	public IStrategoConstructor getModuleQNameCon() {return _knownCons.get(ConstructorDef.newInstance("Module" , 1));}
+
+	public IStrategoConstructor getPackageQNameCon() {return _knownCons.get(ConstructorDef.newInstance("Package" , 1));}
+	
+	public IStrategoConstructor getQNameCon() {return _knownCons.get(ConstructorDef.newInstance("QName" , 1));}
+	
+	public IStrategoConstructor getImportDeclCon() {return _knownCons.get(ConstructorDef.newInstance("ImportDecl",2));}
+	
+	
+	private void initKnownConstructors() {
+		ConstructorDef.newInstance("ModuleDef" , 5).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("ModuleDecl", 3).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("PackageDecl",2).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("ImportDecl",2).index(_knownCons, _termFactory);	
+		ConstructorDef.newInstance("LanguageDescriptor", 5).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Module", 1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Package", 1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("QName", 1).index(_knownCons, _termFactory);
+	}
+	
+	private static class ConstructorDef
+	{
+		private String _name ;
+		private int _arity;
+		ConstructorDef( String name , int arity) {  _name =  name ; _arity = arity; }
+		
+		static ConstructorDef newInstance( String name , int arity) {  return new ConstructorDef(name, arity); }
+		
+		private IStrategoConstructor toStrategoConstructor(ITermFactory fac) {  return fac.makeConstructor(_name, _arity);}
+		
+		void index( HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac)
+		{
+			cons.put(this, this.toStrategoConstructor(fac)) ;
+		}
+
+	
+		@Override
+		public String toString() {
+			return "ConstructorDef [_name=" + _name + ", _arity=" + _arity
+					+ "]";
+		}
+
+		/* (non-Javadoc)
+		 * @see java.lang.Object#hashCode()
+		 */
+		@Override
+		public int hashCode() {
+			final int prime = 31;
+			int result = 1;
+			result = prime * result + _arity;
+			result = prime * result + ((_name == null) ? 0 : _name.hashCode());
+			return result;
+		}
+
+		/* (non-Javadoc)
+		 * @see java.lang.Object#equals(java.lang.Object)
+		 */
+		@Override
+		public boolean equals(Object obj) {
+			if (this == obj)
+				return true;
+			if (obj == null)
+				return false;
+			if (getClass() != obj.getClass())
+				return false;
+			ConstructorDef other = (ConstructorDef) obj;
+			if (_arity != other._arity)
+				return false;
+			if (_name == null) {
+				if (other._name != null)
+					return false;
+			} else if (!_name.equals(other._name))
+				return false;
+			return true;
+		}
+		
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Fri Sep 23 09:31:50 2011	(r23385)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Sat Sep 24 11:09:06 2011	(r23386)
@@ -75,7 +75,7 @@
 		
 		PackageDeclaration  p1 = new PackageDeclaration(absPathString2, idp1);
 		PackageDeclaration  p2 = new PackageDeclaration(absPathString2, idp2);
-		p2.add(absPathString1);
+		p2.addFileUri(absPathString1);
 		
 		symtable.definePackageDeclaration(p1);
 		symtable.definePackageDeclaration(p2);
@@ -114,7 +114,7 @@
 		
 		PackageDeclaration p1 = new PackageDeclaration(absPathString2, idp1);
 		PackageDeclaration  p2 = new PackageDeclaration(absPathString2, idp2);
-		p2.add(absPathString1);
+		p2.addFileUri(absPathString1);
 		
 		symtable.definePackageDeclaration(p1);
 		symtable.definePackageDeclaration(p2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Fri Sep 23 09:31:50 2011	(r23385)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Sat Sep 24 11:09:06 2011	(r23386)
@@ -21,19 +21,13 @@
 	
 	final String absPathString1 = "c:/temp/test1.spx" ;
 	final String absPathString2 = "c:/temp/test2.spx" ;
+
+	private Interpreter interpreter(){ return itp;	}
+
+	private IOAgent ioAgent() { return itp.getIOAgent(); }
 	
-	private Interpreter interpreter()
-	{
-		 return itp;
-	}
+	private ITermFactory termFactory() { return factory; 	}
 	
-	private ITermFactory termFactory() {
-		return factory;
-	}
-
-	private IOAgent ioAgent() {
-		return itp.getIOAgent(); 
-	}
 	
 	@Override
 	protected void setUp() throws Exception {
@@ -47,109 +41,38 @@
 		_facade.reinitSymbolTable();
 	}
 	
+	
 	@Override 
 	protected void tearDown() throws Exception {
 		_facade.close();
 	}
 	
-	public void testListenerRemovingRecordsFromChildSymbolTables()
-	{
-		
-	}	
-	
-	public void testUnknownPackageNameThrowsIllegalArgumentException() 
-	{
-		ITermFactory f = termFactory() ;
-
-		String moduleName =  "m1" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
-		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
-		
-		try{
-		_facade.indexModuleDefinition( mQnameAppl ,f.makeString(absPathString1) ,pQnameAppl , ast, analyzed_ast);
-		}
-		catch(IllegalArgumentException ex)
-		{
-			
-		}
-	}
-	
-	public void testIndexPackageDeclaration() 
-	{
-		ITermFactory f = termFactory() ;
-
-		String moduleName =  "m1" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
-		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
-		
-		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
-		
-		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
-		
-		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration"); 
-	}
-	
-	public void testIndexPackageDeclarationInMultipleFiles() 
-	{
-		ITermFactory f = termFactory() ;
-
-		String moduleName =  "m1" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
-		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
-		
-		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
-		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString2));
-		
-		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
-		
-		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
-		
-		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
-	}
 	
-	public void testIndexModuleDeclaration() 
+	public void testGetModuleDeclarationsByFileUri()
 	{
-		ITermFactory f = termFactory() ;
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
 
-		String moduleName =  "m1" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
-		
-		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
-		
-		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
-		_facade.indexModuleDefinition(mQnameAppl, f.makeString(absPathString1), pQnameAppl, ast, analyzed_ast);
-		
+		indexTestPackageDecl(packageName1, absPathString1);
+		indexTestModuleDefs ( "p1m1" , packageName1 , absPathString1);
+		indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
 		
-		IStrategoAppl moduleDeclaration = (IStrategoAppl)_facade.getModuleDeclaration( mQnameAppl );
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName2, absPathString1);
+		indexTestModuleDefs ( "p2m2" , packageName2 , absPathString1);
 		
-		_facade.verifyConstructor(moduleDeclaration.getConstructor(), _facade.getModuleDeclCon(), "Wrong Module Declaration Constructs");
-	}
-	
-	private void indexTestModuleDefs( String moduleName , String packageQName , String filePath)
-	{
-		String moduleQName = packageQName  + ", \""+ moduleName  +"\"" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageQName+"]))");
+		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName3, absPathString2);
+		indexTestModuleDefs ( "p3m2" , packageName3 , absPathString2);
 		
-		IStrategoAppl mQnameAppl = (IStrategoAppl)termFactory().parseFromString("Module(QName(["+moduleQName+ "]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(termFactory(), moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(termFactory(), moduleName);
+		IStrategoList actuals = null;
+		//following invocation should return 2 ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString1));
 		
-		_facade.indexModuleDefinition(mQnameAppl, termFactory().makeString(filePath), pQnameAppl, ast, analyzed_ast);
-	}
-	
-	private IStrategoAppl indexTestPackageDecl(String packageName , String fileName) {
+		assertEquals(3, actuals.getSubtermCount());
 		
-		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageName+"]))");
-		_facade.indexPackageDeclaration(pQnameAppl, termFactory().makeString(fileName));
-		return pQnameAppl;
+		//following invocation should return 1  ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString2));
+		assertEquals(1, actuals.getSubtermCount());
 	}
 	
 	public void testGetModuleDeclarationsByPackageId()
@@ -204,56 +127,172 @@
 		
 	}
 	
-	public void testGetModuleDeclarationsByFileUri()
+	public void testGetPackageDeclarationsByUri()
 	{
 		String packageName1 =  	"\"languages\", \"entitylang\"" ;
 
 		indexTestPackageDecl(packageName1, absPathString1);
-		indexTestModuleDefs ( "p1m1" , packageName1 , absPathString1);
-		indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
 		
 		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
 		indexTestPackageDecl(packageName2, absPathString1);
-		indexTestModuleDefs ( "p2m2" , packageName2 , absPathString1);
 		
 		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
 		indexTestPackageDecl(packageName3, absPathString2);
-		indexTestModuleDefs ( "p3m2" , packageName3 , absPathString2);
 		
-		IStrategoList actuals = null;
-		//following invocation should return 2 ModuleDeclarations
-		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString1));
 		
-		assertEquals(3, actuals.getSubtermCount());
+		IStrategoList actuals = null;
+
 		
-		//following invocation should return 1  ModuleDeclarations
-		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString2));
+		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString2));
 		assertEquals(1, actuals.getSubtermCount());
+		
+
+		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString1));
+		assertEquals(2, actuals.getSubtermCount());
 	}
 	
-	
-	public void testGetPackageDeclarationsByUri()
+	public void testIndexingImportReferences()
 	{
-		String packageName1 =  	"\"languages\", \"entitylang\"" ;
 
-		indexTestPackageDecl(packageName1, absPathString1);
-		
+		String packageName1 =  	"\"languages\", \"entitylang1\"" ;
 		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
-		indexTestPackageDecl(packageName2, absPathString1);
 		
-		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
-		indexTestPackageDecl(packageName3, absPathString2);
+		IStrategoAppl pQnameAppl1 = indexTestPackageDecl(packageName1, absPathString1);
+		IStrategoAppl pQnameAppl2 = indexTestPackageDecl(packageName2, absPathString1);
+		
+		String packageName3 =  	"\"languages\", \"entitylang3\"" ;
+		IStrategoAppl pQnameAppl3 = indexTestPackageDecl(packageName3, absPathString1);
+		IStrategoAppl mQnameAppl2  = indexTestModuleDefs ( "m2" , packageName3 , absPathString1);
+		
+		IStrategoAppl importDecl1 = this.termFactory().makeAppl(_facade.getImportDeclCon(), pQnameAppl3,  this.termFactory().makeList(pQnameAppl1) );
+		this._facade.indexImportReferences(importDecl1);
+		
+		IStrategoAppl importDecl2 = this.termFactory().makeAppl(_facade.getImportDeclCon(), mQnameAppl2,  this.termFactory().makeList(pQnameAppl2) );
+		this._facade.indexImportReferences(importDecl2);
 		
 		
 		IStrategoList actuals = null;
+		
+		actuals = (IStrategoList) _facade.getImportReferences(pQnameAppl1);
+		
+		assertEquals(0, actuals.size());
+		
 
+		actuals = (IStrategoList) _facade.getImportReferences( mQnameAppl2 );
+		assertEquals(1, actuals.size());
 		
-		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString2));
-		assertEquals(1, actuals.getSubtermCount());
+		//following invocation should return both the import reference of itself and enclosing
+		//modules' import references. 
+		//Hence, it will return both pQnameAppl1 and pQnameAppl2
+		actuals = (IStrategoList) _facade.getImportReferences( pQnameAppl3 );
 		
+		assertEquals(2, actuals.size());
+	}
+	
+	
+	public void testIndexModuleDeclaration() 
+	{
+		ITermFactory f = termFactory() ;
 
-		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString1));
-		assertEquals(2, actuals.getSubtermCount());
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		_facade.indexModuleDefinition(mQnameAppl, f.makeString(absPathString1), pQnameAppl, ast, analyzed_ast);
+		
+		
+		IStrategoAppl moduleDeclaration = (IStrategoAppl)_facade.getModuleDeclaration( mQnameAppl );
+		
+		_facade.verifyConstructor(moduleDeclaration.getConstructor(), _facade.getModuleDeclCon(), "Wrong Module Declaration Constructs");
+	}	
+	
+	public void testIndexPackageDeclaration() 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		
+		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
+		
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration"); 
+	}
+	
+	public void testIndexPackageDeclarationInMultipleFiles() 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString2));
+		
+		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
+		
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
+		
+		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
+	}
+	
+	public void testListenerRemovingRecordsFromChildSymbolTables()
+	{
+		
+	}
+	
+	public void testUnknownPackageNameThrowsIllegalArgumentException() 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		try{
+		_facade.indexModuleDefinition( mQnameAppl ,f.makeString(absPathString1) ,pQnameAppl , ast, analyzed_ast);
+		}
+		catch(IllegalArgumentException ex)
+		{
+			
+		}
+	}
+	
+	private IStrategoAppl indexTestModuleDefs( String moduleName , String packageQName , String filePath)
+	{
+		String moduleQName = packageQName  + ", \""+ moduleName  +"\"" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageQName+"]))");
+		
+		IStrategoAppl mQnameAppl = (IStrategoAppl)termFactory().parseFromString("Module(QName(["+moduleQName+ "]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(termFactory(), moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(termFactory(), moduleName);
+		
+		_facade.indexModuleDefinition(mQnameAppl, termFactory().makeString(filePath), pQnameAppl, ast, analyzed_ast);
+		
+		return mQnameAppl;
+	}
+	
+	private IStrategoAppl indexTestPackageDecl(String packageName , String fileName) {
+		
+		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageName+"]))");
+		_facade.indexPackageDeclaration(pQnameAppl, termFactory().makeString(fileName));
+		return pQnameAppl;
 	}
+	
+	
+	
 
 }

From L.C.L.Kats at tudelft.nl  Sun Sep 25 13:03:06 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 25 Sep 2011 11:03:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23387 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing
Message-ID: <20110925110315.354B52B8014@mx2.tudelft.nl>

Author: LennartKats
Date: Sun Sep 25 11:03:05 2011
New Revision: 23387
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23387&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	Sat Sep 24 11:09:06 2011	(r23386)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	Sun Sep 25 11:03:05 2011	(r23387)
@@ -1,12 +1,9 @@
 package org.strategoxt.imp.runtime.services;
 
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
 import org.eclipse.imp.ui.DefaultPartListener;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.ActionContributionItem;
 import org.eclipse.jface.action.IAction;
-import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.MenuItem;
@@ -15,7 +12,6 @@
 import org.eclipse.ui.IWorkbenchWindowPulldownDelegate;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java	Sat Sep 24 11:09:06 2011	(r23386)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java	Sun Sep 25 11:03:05 2011	(r23387)
@@ -13,7 +13,6 @@
 import org.eclipse.jface.text.IRegion;
 import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.TextAttribute;
-import org.eclipse.swt.SWT;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.widgets.Display;
 import org.spoofax.interpreter.terms.ISimpleTerm;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Sat Sep 24 11:09:06 2011	(r23386)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Sun Sep 25 11:03:05 2011	(r23387)
@@ -130,6 +130,7 @@
 					} catch (IOException e) {
 						Debug.log("Could not parse tested code fragment", e);
 					} catch (SGLRException e) {
+						// TODO: attach ErrorMessage(_) term with error?
 						Debug.log("Could not parse tested code fragment", e);
 					} catch (CloneNotSupportedException e) {
 						Environment.logException("Could not parse tested code fragment", e);

From L.C.L.Kats at tudelft.nl  Sun Sep 25 14:09:56 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 25 Sep 2011 12:09:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23388 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110925121041.4D8312B8014@mx2.tudelft.nl>

Author: LennartKats
Date: Sun Sep 25 12:09:55 2011
New Revision: 23388
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23388&sc=1

Log:
new-libs

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From m.dejonge at tudelft.nl  Mon Sep 26 17:56:44 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 26 Sep 2011 15:56:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23389 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20110926155644.E6BD7CC100@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Sep 26 15:56:44 2011
New Revision: 23389
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23389&sc=1

Log:
- extra tab for indentation disturbs layout for preceding operators

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java	Sun Sep 25 12:09:55 2011	(r23388)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java	Mon Sep 26 15:56:44 2011	(r23389)
@@ -100,7 +100,6 @@
 
 	/**
 	 * Indentation of the start line of the node, consist of spaces and tabs.
-	 * In case other tokens precede the node, an extra TAB is added
 	 */
 	public String getIndentation() {
 		String indent = getIndentString();
@@ -448,7 +447,7 @@
 			else if(character == ' ' || character == '\t')
 				indentation = character + indentation;
 			else
-				indentation = "\t"; //node does not start on line, next line has more indent
+				indentation = ""; //node does not start on line
 		}
 		return indentation;
 	}

From tobivollebregt at gmail.com  Mon Sep 26 19:09:36 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 26 Sep 2011 17:09:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23390 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf: editor trans
Message-ID: <20110926170936.A8C6F2B801A@mx2.tudelft.nl>

Author: tvo
Date: Mon Sep 26 17:09:36 2011
New Revision: 23390
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23390&sc=1

Log:
SDF editor: add transform to generate unformatted syntax templates
(similar to `Show pretty printer rules')

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/generate-syntax-templates.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	Mon Sep 26 15:56:44 2011	(r23389)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	Mon Sep 26 17:09:36 2011	(r23390)
@@ -4,11 +4,14 @@
   SDF-Builders.generated
 
 builders
-  
+
   provider : include/sdf.jar
-  
+
   observer : editor-analyze
-  
+
+  builder : "Show abstract syntax (for selection)" =
+    generate-aterm (realtime) (openeditor) (meta)
+
   // builder : "Show current term (for selection)" =
   //   generate-ast (realtime) (openeditor)
 
@@ -18,5 +21,5 @@
   // builder : "Show abstract syntax signature (for selection)" =
   //  generate-rtg (realtime) (openeditor)
 
-  builder : "Show abstract syntax (for selection)" =
-    generate-aterm (realtime) (openeditor) (meta)
+  builder : "Show syntax templates (for selection)" =
+    generate-syntax-templates (realtime) (openeditor)

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/generate-syntax-templates.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/generate-syntax-templates.str	Mon Sep 26 17:09:36 2011	(r23390)
@@ -0,0 +1,105 @@
+module generate-syntax-templates
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-aterm
+  libstratego-gpp
+  lib/editor-common.generated
+
+overlays
+  CONS(t) = term(default(appl(unquoted("cons"), [fun(quoted(t))])))
+
+rules
+
+  generate-syntax-templates:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    where
+      filename := <guarantee-extension(|"generated.spx")> path;
+      // If we can find at least one context-free-syntax block, use only
+      // context-free productions, otherwise use all productions.
+      cf-prod* := < collect-all(?context-free-syntax(<id>)); concat; not([])
+                 <+ collect-all(?prod(_, _, _)) > selected;
+      template* := <filter(prod-to-template); separate-by(|"\n")> cf-prod*;
+      result := $[package example
+                  module example
+                  templates
+                    [template*]]
+
+  prod-to-template:
+    prod(sym*, sort(sort), a) ->
+      $[[sort][<pp-cons> a] = [open][open][elem*][close][close][<pp-attrs> a]]
+    where
+      (open, close) := <get-delimiters> sym*;
+      elem* := <map(sym-to-template-elem(|open, close)); separate-by(|" ")> sym*
+
+  prod-to-template =
+    debug(!"Could not generate template from production: "); fail
+
+rules // Splitting SDF attributes into (cons, rest) and pretty printing them
+
+  pp-cons =
+    if attrs(getfirst(?CONS(cons))) then
+      !$[.[<un-double-quote> cons]]
+    else
+      !""
+    end
+
+  pp-attrs:
+    no-attrs() -> ""
+
+  pp-attrs:
+    attrs(t) ->
+      < remove-all(?CONS(_));
+        map(pp-attr); separate-by(|","); concat-strings;
+        // Wrap in {}-delimiters if and only if not empty.
+        ("" <+ <concat-strings> [" {", <id>, "}"]) > t
+
+  pp-attr:
+    term(default(t)) -> <implode-aterm; pp-aterm-box; box2text-string(|100)> t
+
+  pp-attr:
+    assoc(t) -> <pp-assoc> t
+
+  pp-attr: avoid() -> "avoid"
+  pp-attr: prefer() -> "prefer"
+  pp-attr: reject() -> "reject"
+  pp-attr: bracket() -> "bracket"
+
+  pp-assoc: assoc() -> "assoc"
+  pp-assoc: left() -> "left"
+  pp-assoc: right() -> "right"
+  pp-assoc: non-assoc() -> "non-assoc"
+
+rules // Converting SDF symbols to syntax template elements
+
+  get-delimiters =
+    if one(lit(string-as-chars(one('<' + '>')))) then
+      !("[", "]")
+    else
+      !("<", ">")
+    end
+
+  sym-to-template-elem(|open, close):
+    lit(t) -> <un-double-quote> t
+
+  sym-to-template-elem(|open, close):
+    sort(t) -> $[[open][t][close]]
+
+  sym-to-template-elem(|open, close):
+    opt(sort(t)) -> $[[open][t]?[close]]
+
+  sym-to-template-elem(|open, close):
+    iter-star(sort(t)) -> $[[open][t]*[close]]
+
+  sym-to-template-elem(|open, close):
+    iter(sort(t)) -> $[[open][t]+[close]]
+
+  sym-to-template-elem(|open, close):
+    iter-star-sep(sort(t),lit(s)) -> $[[open][t]*; separator=[s][close]]
+
+  sym-to-template-elem(|open, close):
+    iter-sep(sort(t),lit(s)) -> $[[open][t]+; separator=[s][close]]
+
+  sym-to-template-elem(|open, close) =
+    debug(!"Could not generate template element from symbol: "); fail

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Mon Sep 26 15:56:44 2011	(r23389)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Mon Sep 26 17:09:36 2011	(r23390)
@@ -6,6 +6,7 @@
   libstratego-sglr
   libstrc
   analysis
+  generate-syntax-templates
   lib/editor-common.generated
 
 rules

From tobivollebregt at gmail.com  Tue Sep 27 00:34:45 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 26 Sep 2011 22:34:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23392 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110926223445.1C841108C004@mx3.tudelft.nl>

Author: tvo
Date: Mon Sep 26 22:34:44 2011
New Revision: 23392
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23392&sc=1

Log:
unused

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Sep 26 22:34:37 2011	(r23391)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Sep 26 22:34:44 2011	(r23392)
@@ -85,8 +85,6 @@
  */
 public class StrategoObserver implements IDynamicLanguageService, IModelListener, IAsyncCancellable {
 	
-	public long time = System.currentTimeMillis();
-	
 	// TODO: separate delay for error markers?
 	public static final int OBSERVER_DELAY = 600;
 	

From tobivollebregt at gmail.com  Tue Sep 27 00:34:51 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 26 Sep 2011 22:34:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23393 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	. services
Message-ID: <20110926223451.D83D7108C009@mx3.tudelft.nl>

Author: tvo
Date: Mon Sep 26 22:34:51 2011
New Revision: 23393
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23393&sc=1

Log:
* Deadline support for MonitorStateWatchDog

* Start MSWD for analysis jobs in deployed editors too
  (less code paths and why not allow cancelling there?)

* Change MSWD API so that it actually works in all the places
  where beginProtect wasn't called...

* This fixes canceling of builders, for example.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/MonitorStateWatchDog.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/MonitorStateWatchDog.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/MonitorStateWatchDog.java	Mon Sep 26 22:34:44 2011	(r23392)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/MonitorStateWatchDog.java	Mon Sep 26 22:34:51 2011	(r23393)
@@ -8,9 +8,12 @@
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Tobi Vollebregt
  */
 public class MonitorStateWatchDog {
 
+	private static final int NO_TIMEOUT = -1;
+
 	private static final int RUNNING_CHECK_INTERVAL = 500;
 
 	private static final int CANCELLED_CHECK_INTERVAL = 20;
@@ -20,30 +23,42 @@
 	private final IProgressMonitor progressMonitor;
 
 	private final IAsyncCancellable canceller;
-	
+
+	private final long deadline;
+
 	private volatile boolean isProtecting;
 
+	private volatile boolean isAsyncCancelling;
+
 	public MonitorStateWatchDog(Job runningJob, IProgressMonitor progressMonitor, IAsyncCancellable canceller) {
+		this(runningJob, progressMonitor, canceller, NO_TIMEOUT);
+	}
+
+	public MonitorStateWatchDog(Job runningJob, IProgressMonitor progressMonitor, IAsyncCancellable canceller, int timeoutMillis) {
 		this.runningJob = runningJob;
 		this.progressMonitor = progressMonitor;
 		this.canceller = canceller;
+		this.deadline = timeoutMillis == NO_TIMEOUT ? 0L : System.currentTimeMillis() + timeoutMillis;
+		beginProtect();
 	}
-	
+
 	/**
-	 * Begins protecting this job, cancelling it if the monitor is cancelled.
+	 * Begins protecting this job, canceling it if the monitor is cancelled.
 	 * Must be balanced with a call to {@link #endProtect()}.
 	 */
-	public void beginProtect() {
+	private void beginProtect() {
 		if (isProtecting)
 			throw new IllegalStateException("Already protecting");
 		if (progressMonitor.isCanceled())
 			return; // already cancelled; no need to kill it
 		isProtecting = true;
-		Job job = new WatchDogJob();
+		WatchDogJob job = new WatchDogJob();
 		job.setSystem(true);
-		job.schedule(RUNNING_CHECK_INTERVAL);
+		// Eclipse adds extra latency to non-interactive jobs.
+		job.setPriority(Job.INTERACTIVE);
+		job.schedule(job.sleepHint());
 	}
-	
+
 	/**
 	 * Ends the protection of a job. Does not throw any exception.
 	 */
@@ -52,40 +67,58 @@
 		// if (!isProtecting) throw new IllegalStateException("Not protecting");
 		isProtecting = false;
 	}
-	
+
 	private class WatchDogJob extends Job {
-		
+
 		public WatchDogJob() {
 			super("MonitorStateWatchDog for " + runningJob.getName());
 		}
 
 		@Override
 		protected IStatus run(IProgressMonitor monitor) {
-			while (isProtecting && runningJob.getState() != Job.NONE) {
-				if (progressMonitor.isCanceled() && isProtecting) {
-					asyncCancel();
-					break;
-				}
-				try {
-					Thread.sleep(RUNNING_CHECK_INTERVAL);
-				} catch (InterruptedException e) {
-					break;
-				}
+			if (isAsyncCancelling) {
+				stillCancelling();
+			} else if (isProtecting && runningJob.getState() != Job.NONE) {
+				stillRunning();
 			}
 			return Status.OK_STATUS;
 		}
-	}
 
-	private void asyncCancel() {
-		canceller.asyncCancel();
-		while (runningJob.getState() != Job.NONE && isProtecting) {
-			try {
-				Thread.sleep(CANCELLED_CHECK_INTERVAL);
-			} catch (InterruptedException e) {
-				break;
+		private void stillRunning() {
+			if (shouldBeCanceled()) {
+				// canceled: start polling until job stopped running
+				canceller.asyncCancel();
+				progressMonitor.setCanceled(true);
+				isAsyncCancelling = true;
+				schedule(CANCELLED_CHECK_INTERVAL);
+			} else {
+				// not canceled (yet): re-schedule to check again
+				schedule(sleepHint());
+			}
+		}
+
+		private void stillCancelling() {
+			if (isProtecting && runningJob.getState() != Job.NONE) {
+				// re-schedule to check again
+				schedule(CANCELLED_CHECK_INTERVAL);
+			} else {
+				// finished: job stopped running and endProtect() was called
+				canceller.asyncCancelReset();
+			}
+		}
+
+		private boolean shouldBeCanceled() {
+			return progressMonitor.isCanceled()
+					|| (deadline > 0L && System.currentTimeMillis() > deadline);
+		}
+
+		private long sleepHint() {
+			if (deadline > 0) {
+				long pending = deadline - System.currentTimeMillis();
+				return Math.max(0L, Math.min(RUNNING_CHECK_INTERVAL, pending));
 			}
+			return RUNNING_CHECK_INTERVAL;
 		}
-		canceller.asyncCancelReset();
 	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	Mon Sep 26 22:34:44 2011	(r23392)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	Mon Sep 26 22:34:51 2011	(r23393)
@@ -26,14 +26,12 @@
  */
 public class StrategoAnalysisQueue {
 
-	/**
+	/*
 	 * TODO: - remove background jobs if a foreground job is started for the
 	 * same file - stop analyzing on a workspace close (/eclipse exit) -
 	 * interrupt background jobs for foreground jobs ?
 	 */
 
-	private static final long serialVersionUID = 1L;
-
 	private final PriorityBlockingQueue<UpdateJob> queue;
 	
 	private final ConcurrentHashMap<IPath,UpdateJob> pendingUpdates = new ConcurrentHashMap<IPath, UpdateJob>();
@@ -60,13 +58,10 @@
 
 		protected UpdateJob(StrategoAnalysisJob job, IPath path, int priority, boolean isSystem,
 				long delay) {
-			super("");
+			super(JOB_DESCRIPTION + path);
 			this.job = job;
 			this.delay = delay;
 			this.path = path;
-		
-			// Should be set before scheduling the job
-			this.setName(JOB_DESCRIPTION + path);
 
 			setSystem(isSystem);
 			setPriority(priority);
@@ -79,8 +74,6 @@
 
 			running = true;
 			protector = new MonitorStateWatchDog(this, monitor, job.getObserver());
-			if (!isSystem())
-				protector.beginProtect();
 
 			IStatus status;
 			try {
@@ -95,8 +88,7 @@
 				Environment.logException("Error running scheduled analysis", e);
 				status = Status.CANCEL_STATUS;
 			} finally {
-				if (!isSystem())
-					protector.endProtect();
+				protector.endProtect();
 				
 				// Run next task
 				running = false;

From tobivollebregt at gmail.com  Tue Sep 27 00:34:37 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 26 Sep 2011 22:34:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23391 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime:
	src/org/strategoxt/imp/runtime/services
	test/org/strategoxt/imp/runtime/services
Message-ID: <20110926223437.D21B7CC107@mx4.tudelft.nl>

Author: tvo
Date: Mon Sep 26 22:34:37 2011
New Revision: 23391
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23391&sc=1

Log:
Factor a ContentProposerAstReuser out of ContentProposerParser

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerAstReuser.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestContentProposerAstReuser.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerAstReuser.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerAstReuser.java	Mon Sep 26 22:34:37 2011	(r23391)
@@ -0,0 +1,126 @@
+package org.strategoxt.imp.runtime.services;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.eclipse.jface.text.Position;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class ContentProposerAstReuser {
+
+	private final Pattern identifierLexical;
+
+	private IStrategoTerm lastCompletionAst;
+
+	private IStrategoTerm lastCompletionNode;
+
+	private String lastCompletionPrefix;
+
+	private String lastDocument;
+
+	private Position lastSelection;
+
+	private IStrategoTerm completionNode;
+
+	private String completionPrefix;
+
+	public ContentProposerAstReuser(Pattern identifierLexical) {
+		this.identifierLexical = identifierLexical;
+	}
+
+	public IStrategoTerm getCompletionNode() {
+		return completionNode;
+	}
+
+	public String getCompletionPrefix() {
+		return completionPrefix;
+	}
+
+	public void storeAstForReuse(IStrategoTerm lastCompletionAst, IStrategoTerm lastCompletionNode, String lastCompletionPrefix) {
+		this.lastCompletionAst = lastCompletionAst;
+		this.lastCompletionNode = lastCompletionNode;
+		this.lastCompletionPrefix = lastCompletionPrefix;
+	}
+
+	/**
+	 * Reuse the previous AST if the user just added or deleted a single character.
+	 */
+	public IStrategoTerm tryReusePreviousAst(Position selection, String document) {
+		final int offset = selection.getOffset();
+		if (offset != 0 && lastCompletionNode != null) {
+			final int lastOffset = lastSelection.getOffset();
+			if (lastSelection.getLength() == 0 && selection.getLength() == 0) {
+				// No selection present.
+				if (lastDocument.length() == document.length() - 1 && lastOffset == offset - 1) {
+					// Reuse document, ignoring latest typed character
+					String newCharacter = document.substring(offset - 1, offset);
+					String previousDocument = lastDocument.substring(0, offset - 1) + newCharacter + lastDocument.substring(offset - 1);
+					if (documentsSufficientlyEqual(document, previousDocument, offset)) {
+						return reusePreviousAst(selection, document, lastCompletionPrefix + newCharacter);
+					}
+				} else if (lastCompletionPrefix.length() > 0
+						&& lastDocument.length() == document.length() + 1 && lastOffset == offset + 1) {
+					// Reuse document, ignoring previously typed character
+					String oldCharacter = lastDocument.substring(offset, offset + 1);
+					String currentDocument = document.substring(0, offset) + oldCharacter + document.substring(offset);
+					if (documentsSufficientlyEqual(currentDocument, lastDocument, offset + 1)) {
+						return reusePreviousAst(selection, document, lastCompletionPrefix.substring(0, lastCompletionPrefix.length() - 1));
+					}
+				} else if (lastDocument.equals(document) && offset == lastOffset) {
+					return reusePreviousAst(selection, document, lastCompletionPrefix);
+				}
+			}
+			else {
+				// Selection present.
+				// Probably not worth bothering with reuse here.
+			}
+		}
+		return dontReusePreviousAst(selection, document);
+	}
+
+	/**
+	 * @return Whether doc1 and doc2 are equal disregarding the last
+	 * identifierLexical immediately before offset. If there is no
+	 * identifierLexical at that place in either document, false is returned.
+	 */
+	private boolean documentsSufficientlyEqual(String doc1, String doc2, int offset) {
+		String s1 = removeLastOccurrenceOfPatternBeforeIndex(identifierLexical, doc1, offset);
+		String s2 = removeLastOccurrenceOfPatternBeforeIndex(identifierLexical, doc2, offset);
+		if (s1 == null || s2 == null) return false;
+		return s1.equals(s2);
+	}
+
+	/**
+	 * @return s with the occurrence of p immediately before endIndex removed,
+	 * or null if p does not match before endIndex. Note: only examines the
+	 * last 50 characters of s.
+	 */
+	private static String removeLastOccurrenceOfPatternBeforeIndex(Pattern p, String s, int endIndex) {
+		int beginIndex = Math.max(0, endIndex - 50);
+		Matcher m = p.matcher(s.substring(beginIndex, endIndex));
+		while (m.find()) {
+			if (m.end() == endIndex - beginIndex) {
+				return s.substring(0, beginIndex + m.start()) + s.substring(endIndex);
+			}
+		}
+		return null;
+	}
+
+	private IStrategoTerm reusePreviousAst(Position selection, String document, String prefix) {
+		lastDocument = document;
+		lastSelection = selection;
+		lastCompletionPrefix = prefix;
+		completionNode = lastCompletionNode;
+		completionPrefix = prefix;
+		return lastCompletionAst;
+	}
+
+	private IStrategoTerm dontReusePreviousAst(Position selection, String document) {
+		lastDocument = document;
+		lastSelection = selection;
+		lastCompletionAst = null;
+		lastCompletionNode = null;
+		lastCompletionPrefix = null;
+		return null;
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Mon Sep 26 17:09:36 2011	(r23390)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Mon Sep 26 22:34:37 2011	(r23391)
@@ -10,13 +10,11 @@
 import static org.strategoxt.imp.runtime.services.ContentProposer.COMPLETION_TOKEN;
 
 import java.io.IOException;
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.jface.text.Position;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.shared.SGLRException;
@@ -33,6 +31,7 @@
  * Content completion parsing and tree construction
  *
  * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Tobi Vollebregt
  */
 public class ContentProposerParser {
 
@@ -48,17 +47,9 @@
 
 	private SGLRParseController parser;
 
-	private IStrategoTerm lastParserAst;
+	private ContentProposerAstReuser astReuser;
 
-	private IStrategoTerm lastCompletionAst;
-
-	private IStrategoTerm lastCompletionNode;
-
-	private String lastCompletionPrefix;
-
-	private String lastDocument;
-
-	private Position lastSelection;
+	private IStrategoTerm completionAst;
 
 	private IStrategoTerm completionNode;
 
@@ -66,6 +57,7 @@
 
 	public ContentProposerParser(Pattern identifierLexical) {
 		this.identifierLexical = identifierLexical;
+		this.astReuser = new ContentProposerAstReuser(identifierLexical);
 	}
 
 	protected SGLRParseController getParser() {
@@ -81,32 +73,58 @@
 	}
 
 	public boolean isFatalSyntaxError() {
-		return lastCompletionAst == null && lastParserAst == null && completionNode == null;
+		return completionAst == null;
 	}
 
 	public IStrategoTerm parse(IParseController icontroller, Position selection, String document, boolean avoidReparse) {
 		final int offset = selection.getOffset();
 
-		lastCompletionNode = completionNode;
-		lastCompletionPrefix = completionPrefix;
+		completionAst = null;
 		completionNode = null;
+		completionPrefix = null;
 
 		SGLRParseController controller = this.parser = getParser(icontroller);
-		IStrategoTerm ast = tryReusePreviousAst(selection, document);
-		if (ast != null) return ast;
 
+		// Try to reuse previous AST.
+		completionAst = astReuser.tryReusePreviousAst(selection, document);
+
+		if (completionAst != null) {
+			// We're lucky => re-put completionNode with the new prefix and return.
+			completionPrefix = astReuser.getCompletionPrefix();
+			completionNode = astReuser.getCompletionNode();
+
+			completionNode = putCompletionNode(completionNode, completionPrefix, false);
+			completionAst = getRoot(completionNode);
+
+			return completionAst;
+		}
+
+		// Build document with completion token.
 		String documentWithToken = document.substring(0, offset) + COMPLETION_TOKEN + document.substring(offset + selection.getLength());
-		ast = parse(controller, offset, documentWithToken, avoidReparse);
-		if (ast == null) return null;
 
-		IStrategoTerm result = identifyCompletionNode(ast, offset, document, COMPLETION_TOKEN);
-		if (completionNode == null) result = addNoContextNode(ast, offset, document);
-		return result;
+		// Parse.
+		completionAst = parse(controller, documentWithToken, avoidReparse);
+		if (completionAst != null) {
+			completionPrefix = readPrefix(offset, document);
+			completionNode = identifyAndPutCompletionNode(completionAst, completionPrefix, COMPLETION_TOKEN);
+
+			if (completionNode == null) {
+				// Can't find COMPLETION_TOKEN...
+				completionNode = putNoContextCompletionNode(completionAst, completionPrefix, offset);
+			}
+			completionAst = getRoot(completionNode);
+
+			astReuser.storeAstForReuse(completionAst, completionNode, completionPrefix);
+
+			return completionAst;
+		}
+
+		return null;
 	}
 
-	private IStrategoTerm parse(SGLRParseController controller, int offset, String document, boolean avoidReparse) {
+	private static IStrategoTerm parse(SGLRParseController controller, String document, boolean avoidReparse) {
 		JSGLRI parser = controller.getParser();
-		IStrategoTerm result;
+		IStrategoTerm result = null;
 
 		controller.scheduleParserUpdate(REINIT_PARSE_DELAY, true); // cancel current parse
 		Debug.startTimer();
@@ -123,173 +141,92 @@
 				} finally {
 					Debug.stopTimer("Completion parsed");
 				}
-				lastParserAst = controller.getCurrentAst();
-				lastCompletionAst = result;
 			}
 		} catch (SGLRException e) {
 			Environment.logException("Could not reparse input for content completion", e);
-			result = forceUseOldAst(controller, offset, document);
 		} catch (IOException e) {
 			Environment.logException("Could not reparse input for content completion", e);
-			result = forceUseOldAst(controller, offset, document);
 		} finally {
 			controller.getParseLock().unlock();
 		}
+		// Replaces former forceUseOldAst
+		if (result == null) result = controller.getCurrentAst();
 		return result;
 	}
 
-	/**
-	 * Reuse the previous AST if the user just added or deleted a single character.
-	 */
-	private IStrategoTerm tryReusePreviousAst(Position selection, String document) {
-		final int offset = selection.getOffset();
-		if (offset != 0 && lastCompletionNode != null) {
-			final int lastOffset = lastSelection.getOffset();
-			if (lastSelection.getLength() == 0 && selection.getLength() == 0) {
-				// No selection present.
-				if (lastDocument.length() == document.length() - 1 && lastOffset == offset - 1) {
-					// Reuse document, ignoring latest typed character
-					String newCharacter = document.substring(offset - 1, offset);
-					String previousDocument = lastDocument.substring(0, offset - 1) + newCharacter + lastDocument.substring(offset - 1);
-					if (documentsSufficientlyEqual(document, previousDocument, offset)) {
-						return reusePreviousAst(selection, document, lastCompletionPrefix + newCharacter);
-					}
-				} else if (lastCompletionPrefix.length() > 0
-						&& lastDocument.length() == document.length() + 1 && lastOffset == offset + 1) {
-					// Reuse document, ignoring previously typed character
-					String oldCharacter = lastDocument.substring(offset, offset + 1);
-					String currentDocument = document.substring(0, offset) + oldCharacter + document.substring(offset);
-					if (documentsSufficientlyEqual(currentDocument, lastDocument, offset + 1)) {
-						return reusePreviousAst(selection, document, lastCompletionPrefix.substring(0, lastCompletionPrefix.length() - 1));
-					}
-				} else if (lastDocument.equals(document) && offset == lastOffset) {
-					return reusePreviousAst(selection, document, lastCompletionPrefix);
-				}
-			}
-			else {
-				// Selection present.
-				// Probably not worth bothering with reuse here.
-			}
-		}
-		lastDocument = document;
-		lastSelection = selection;
-		return null;
-	}
-
-	/**
-	 * @return Whether doc1 and doc2 are equal disregarding the last
-	 * identifierLexical immediately before offset. If there is no
-	 * identifierLexical at that place in either document, false is returned.
-	 */
-	private boolean documentsSufficientlyEqual(String doc1, String doc2, int offset) {
-		String s1 = removeLastOccurrenceOfPatternBeforeIndex(identifierLexical, doc1, offset);
-		String s2 = removeLastOccurrenceOfPatternBeforeIndex(identifierLexical, doc2, offset);
-		if (s1 == null || s2 == null) return false;
-		return s1.equals(s2);
-	}
-
-	/**
-	 * @return s with the occurrence of p immediately before endIndex removed,
-	 * or null if p does not match before endIndex. Note: only examines the
-	 * last 50 characters of s.
-	 */
-	private static String removeLastOccurrenceOfPatternBeforeIndex(Pattern p, String s, int endIndex) {
-		int beginIndex = Math.max(0, endIndex - 50);
-		Matcher m = p.matcher(s.substring(beginIndex, endIndex));
-		while (m.find()) {
-			if (m.end() == endIndex - beginIndex) {
-				return s.substring(0, beginIndex + m.start()) + s.substring(endIndex);
-			}
-		}
-		return null;
-	}
-
-	private IStrategoTerm reusePreviousAst(Position selection, String document, String prefix) {
-		completionPrefix = prefix;
-		lastDocument = document;
-		lastSelection = selection;
-		completionNode = lastCompletionNode;
-		putCompletionNode(completionNode, prefix, false);
-		return lastCompletionAst;
-	}
-
-	private IStrategoTerm forceUseOldAst(SGLRParseController parser, int offset, String document) {
-		if (parser.getCurrentAst() != lastParserAst) { // parser has a more recent AST
-			lastParserAst = parser.getCurrentAst();
-			lastCompletionAst = parser.getCurrentAst();
-			completionNode = null;
-		} else {
-			if (completionNode == null)
-				return null;
-			putCompletionNode(completionNode, readPrefix(offset, document), false);
-		}
-		return lastCompletionAst;
-	}
-
 	private static SGLRParseController getParser(IParseController controller) {
 		if (controller instanceof DynamicParseController)
 			controller = ((DynamicParseController) controller).getWrapped();
 		return (SGLRParseController) controller;
 	}
 
-	private IStrategoTerm identifyCompletionNode(final IStrategoTerm ast, final int offset, final String document, final String completionToken) {
+	private static IStrategoTerm identifyAndPutCompletionNode(final IStrategoTerm ast, final String prefix, final String completionToken) {
 		class Visitor extends TermVisitor {
-			IStrategoTerm result = ast;
+			IStrategoTerm newCompletionNode;
+
 			public void preVisit(IStrategoTerm term) {
 				if (isTermString(term)) {
 					String value = ((IStrategoString) term).stringValue();
 					if (value.indexOf(completionToken) > -1) {
-						putCompletionNode(term, readPrefix(offset, document), false);
-						result = getRoot(completionNode);
+						newCompletionNode = putCompletionNode(term, prefix, false);
 					}
 				}
 			}
-			
+
 			@Override
 			public void postVisit(IStrategoTerm term) {
 				// Visit annotations; testing language puts ast nodes in there
 				if (!term.getAnnotations().isEmpty())
 					visit(term.getAnnotations());
 			}
-		}
+		};
 		Visitor visitor = new Visitor();
 		visitor.visit(ast);
-		return visitor.result;
+		return visitor.newCompletionNode;
 	}
 
 	/**
 	 * Creates a new abstract syntax tree with the given node
-	 * replaced by a COMPLETION(prefix) term,
-	 * and assigns completionNode.
+	 * replaced by a COMPLETION(prefix) term.
 	 */
-	private void putCompletionNode(IStrategoTerm node, final String prefix, final boolean noContext) {
+	private static IStrategoTerm putCompletionNode(IStrategoTerm node, final String prefix, final boolean noContext) {
 		final ParentTermFactory factory = new ParentTermFactory(Environment.getTermFactory());
 
 		final IStrategoTerm targetNode = tryGetCompletionNodeWrappingTerm(node);
 
-		new TermTransformer(factory, true) {
+		class Transformer extends TermTransformer {
+			IStrategoTerm newCompletionNode;
+
+			public Transformer() {
+				super(factory, true);
+			}
+
 			@Override
 			public IStrategoTerm preTransform(IStrategoTerm current) {
 				if (current == targetNode) {
 					IStrategoTerm prefixTerm = factory.makeString(prefix);
-					completionPrefix = prefix;
 					IStrategoTerm completionTerm = factory.makeAppl(COMPLETION_CONSTRUCTOR, prefixTerm);
-					completionNode = noContext ? factory.makeAppl(COMPLETION_UNKNOWN, completionTerm) : completionTerm;
-					factory.copyAttachments(current, completionNode, true);
+					newCompletionNode = noContext ? factory.makeAppl(COMPLETION_UNKNOWN, completionTerm) : completionTerm;
+					factory.copyAttachments(current, newCompletionNode, true);
 					factory.copyAttachments(current, completionTerm, true);
 					factory.copyAttachments(current, prefixTerm, true);
-					return completionNode;
+					return newCompletionNode;
 				} else {
 					return current;
 				}
 			}
-		}.transform(getRoot(node));
+		}
+
+		Transformer trans = new Transformer();
+		trans.transform(getRoot(node));
+
+		if (!noContext && getParent(trans.newCompletionNode) != null)
+			trans.newCompletionNode = getParent(trans.newCompletionNode); // add a bit of context
 
-		if (!noContext && getParent(completionNode) != null)
-			completionNode = getParent(completionNode); // add a bit of context
+		return trans.newCompletionNode;
 	}
 
-	private IStrategoTerm tryGetCompletionNodeWrappingTerm(IStrategoTerm node) {
+	private static IStrategoTerm tryGetCompletionNodeWrappingTerm(IStrategoTerm node) {
 		if (tryGetConstructor(node) != COMPLETION_CONSTRUCTOR) {
 			for (IStrategoTerm child : node.getAllSubterms()) {
 				if (tryGetConstructor(child) == COMPLETION_CONSTRUCTOR)
@@ -300,7 +237,11 @@
 		return node;
 	}
 
-	private IStrategoTerm addNoContextNode(IStrategoTerm ast, final int offset, String document) {
+	/**
+	 * Add NOCONTEXT(COMPLETION(...)) node based on token positions.
+	 * This is used if completionToken can't be found in the AST.
+	 */
+	private static IStrategoTerm putNoContextCompletionNode(final IStrategoTerm ast, final String prefix, final int offset) {
 		class Visitor extends TermVisitor {
 			IStrategoTerm targetNode, lastNode;
 
@@ -315,11 +256,10 @@
 		Visitor visitor = new Visitor();
 		visitor.visit(ast);
 		if (visitor.targetNode != null) {
-			putCompletionNode(visitor.targetNode, readPrefix(offset, document), true);
+			return putCompletionNode(visitor.targetNode, prefix, true);
 		} else {
-			putCompletionNode(visitor.lastNode, readPrefix(offset, document), true);
+			return putCompletionNode(visitor.lastNode, prefix, true);
 		}
-		return ast;
 	}
 
 	/**
@@ -339,5 +279,4 @@
 		}
 		return document.substring(0, offset);
 	}
-
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestContentProposerAstReuser.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestContentProposerAstReuser.java	Mon Sep 26 22:34:37 2011	(r23391)
@@ -0,0 +1,65 @@
+package org.strategoxt.imp.runtime.services;
+
+import static org.junit.Assert.*;
+
+import java.util.regex.Pattern;
+
+import org.eclipse.jface.text.Position;
+import org.junit.Before;
+import org.junit.Test;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.TermFactory;
+
+public class TestContentProposerAstReuser {
+
+	private static final Pattern identifierLexical = Pattern.compile("[A-Za-z0-9]+");
+
+	private final IStrategoTerm term = TermFactory.EMPTY_LIST;
+
+	private ContentProposerAstReuser cpar;
+
+	@Before
+	public void setUp() {
+		cpar = new ContentProposerAstReuser(identifierLexical);
+		assertNull(cpar.tryReusePreviousAst(new Position(3), "hel"));
+		cpar.storeAstForReuse(term, term, "hel");
+	}
+
+	@Test
+	public void completionNodeAndPrefix() {
+		assertNull(cpar.getCompletionNode());
+		assertNull(cpar.getCompletionPrefix());
+	}
+
+	@Test
+	public void reuseWithoutMove() {
+		assertSame(term, cpar.tryReusePreviousAst(new Position(3), "hel"));
+		assertSame(term, cpar.getCompletionNode());
+		assertEquals("hel", cpar.getCompletionPrefix());
+	}
+
+	@Test
+	public void reuseWithMoveForward() {
+		assertSame(term, cpar.tryReusePreviousAst(new Position(4), "hell"));
+	}
+
+	@Test
+	public void reuseWithMoveBackward() {
+		assertSame(term, cpar.tryReusePreviousAst(new Position(2), "he"));
+	}
+
+	@Test
+	public void reuseWithMoveForwardMuch() {
+		assertNull(cpar.tryReusePreviousAst(new Position(5), "hello"));
+	}
+
+	@Test
+	public void reuseWithMoveBackwardMuch() {
+		assertNull(cpar.tryReusePreviousAst(new Position(1), "h"));
+	}
+
+	@Test
+	public void reuseWithChangedText() {
+		assertNull(cpar.tryReusePreviousAst(new Position(3), "foo"));
+	}
+}

From m.dejonge at tudelft.nl  Tue Sep 27 13:14:10 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 27 Sep 2011 11:14:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23394 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20110927111410.495A4108C018@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Sep 27 11:14:09 2011
New Revision: 23394
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23394&sc=1

Log:
bugfix nullpointer exception

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSeparationPrimitive.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSeparationPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSeparationPrimitive.java	Mon Sep 26 22:34:51 2011	(r23393)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginSeparationPrimitive.java	Tue Sep 27 11:14:09 2011	(r23394)
@@ -20,6 +20,8 @@
 	protected IStrategoTerm call(IContext env, IStrategoTerm origin) {
 		LayoutStructure docStructure = new LayoutStructure(origin);
 		String separation = docStructure.getSeparation();
+		if(separation == null)
+			return null; //not a list element
 		ITermFactory factory = env.getFactory();		
 		return factory.makeString(separation);
 	}

From tobivollebregt at gmail.com  Tue Sep 27 14:48:23 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 27 Sep 2011 12:48:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23395 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20110927124823.4DB9DCC0B4@mx4.tudelft.nl>

Author: tvo
Date: Tue Sep 27 12:48:23 2011
New Revision: 23395
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23395&sc=1

Log:
Testing language: fix editor-hover

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Tue Sep 27 11:14:09 2011	(r23394)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Tue Sep 27 12:48:23 2011	(r23395)
@@ -82,18 +82,13 @@
     (selected, position, ast, path, project-path) -> (filename, selected)
     with
       filename := <guarantee-extension(|"aterm")> path
-  
-  // FIXME: this doesn't work as far as I can see (TVO 20110905)
-  // 1) editor-hover is passed QuotePart when hovering over input
-  // 2) only Input, not Output, is in the pattern
-  // 3) a* == ast, not a* == [ast | _], and the Input/Output node is
-  //    not available because the QuotePart is passed... 
+
   editor-hover:
-    (Input(_, _, _, _){a*}, _, _, _, _) -> hover
+    (QuotePart(_), position, ast, _, _) -> hover
     where
-      !a* => [ast | _];
-      hover := <spt-pp-aterm ; hover-input-string>ast 
-  
+      _{ast2} := <parent-at-position(|position)> ast;
+      hover := <spt-pp-aterm ; hover-input-string>ast2
+
   hover-input-string =
   	if ?error(_, _) then
       extract-parse-error
@@ -108,7 +103,6 @@
         ]
     end 
 
-
   spt-pp-aterm =
     pp-aterm-box ; box2text-string(|80)
     

From m.dejonge at tudelft.nl  Wed Sep 28 14:34:00 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 28 Sep 2011 12:34:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23396 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20110928123400.EBEE77F80BF@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Sep 28 12:34:00 2011
New Revision: 23396
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23396&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_enable_desugared_origins.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_enable_desugared_origins.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_enable_desugared_origins.java	Tue Sep 27 12:48:23 2011	(r23395)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_enable_desugared_origins.java	Wed Sep 28 12:34:00 2011	(r23396)
@@ -20,7 +20,7 @@
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
     	ITermFactory factory = env.getFactory();
-    	if (!(factory instanceof OriginTermFactory)){
+    	if (factory instanceof OriginTermFactory){
        		((OriginTermFactory)env.getFactory()).setAssignDesugaredOrigins(true);    		
     	}
     	else{

From m.dejonge at tudelft.nl  Wed Sep 28 14:45:30 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 28 Sep 2011 12:45:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23397 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20110928124530.5D5742B802A@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Sep 28 12:45:30 2011
New Revision: 23397
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23397&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_enable_desugared_origins.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_enable_desugared_origins.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_enable_desugared_origins.java	Wed Sep 28 12:34:00 2011	(r23396)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_enable_desugared_origins.java	Wed Sep 28 12:45:30 2011	(r23397)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.jsglr.origin;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -14,18 +15,19 @@
 public class SSL_EXT_enable_desugared_origins extends AbstractPrimitive {
     
     public SSL_EXT_enable_desugared_origins() {
-        super("SSL_EXT_enable_desugared_origins", 0, 0);
+        super("SSL_EXT_enable_desugared_origins", 0, 1);
     }
 
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
     	ITermFactory factory = env.getFactory();
+    	boolean enable = Tools.asJavaInt(tvars[0]) != 0;
     	if (factory instanceof OriginTermFactory){
-       		((OriginTermFactory)env.getFactory()).setAssignDesugaredOrigins(true);    		
+       		((OriginTermFactory)env.getFactory()).setAssignDesugaredOrigins(enable);    		
     	}
-    	else{
+    	else if (enable){
     		OriginTermFactory originFactory = new ImploderOriginTermFactory(factory);
-    		originFactory.setAssignDesugaredOrigins(true);
+    		originFactory.setAssignDesugaredOrigins(enable);
     		env.setFactory(originFactory);
     	}
     	return true;

From tobivollebregt at gmail.com  Wed Sep 28 16:18:06 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 28 Sep 2011 14:18:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23398 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: syntax
	trans/codegen/template trans/context/sdf trans/editor
	trans/normalize trans/unit-tests/templatelang
Message-ID: <20110928141806.8224A108C025@mx3.tudelft.nl>

Author: tvo
Date: Wed Sep 28 14:18:06 2011
New Revision: 23398
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23398&sc=1

Log:
* Ported TemplateLang tests to SPT
  - Added "fake" builders to support the tests
  - Added extra start symbols

* TemplateLang syntax tweaks (for slightly better AST)

* Fix TemplateLang shallowing escaped backslash in a template

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.meta
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf.meta
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.meta
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Sep 28 12:45:30 2011	(r23397)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Sep 28 14:18:06 2011	(r23398)
@@ -3,6 +3,14 @@
   SPXCommon
 
 exports
+  context-free start-symbols
+    %% for testing
+    SdfProduction TemplateProduction Template
+
+  context-free syntax
+    %% testing language does not accept parameterized sorts
+    Production[[SDF]] -> SdfProduction
+
   context-free syntax
     %% tweaks for content completion
     CONTENTCOMPLETE -> TemplateProduction {recover, cons("WATER")}
@@ -122,18 +130,22 @@
     Backslash2 -/- [\[\]\\]
 
   lexical syntax
+    %% combine sequences of escaped chars 
+    EscapedChar1+ -> TemplateEscape1
+    EscapedChar2+ -> TemplateEscape2
+
     %% this are the escapes which StringTemplate has
-    "\\<"  -> TemplateEscape1
-    "\\>"  -> TemplateEscape1
-    "\\\\" -> TemplateEscape1
-    "\\["  -> TemplateEscape2
-    "\\]"  -> TemplateEscape2
-    "\\\\" -> TemplateEscape2
-
-    "<" EscapedChar* ">"    -> TemplateEscape1
-    "<\\\\>" [\ \t\r]* [\n] -> TemplateEscape1
-    "[" EscapedChar* "]"    -> TemplateEscape2
-    "[\\\\]" [\ \t\r]* [\n] -> TemplateEscape2
+    "\\<"  -> EscapedChar1
+    "\\>"  -> EscapedChar1
+    "\\\\" -> EscapedChar1
+    "\\["  -> EscapedChar2
+    "\\]"  -> EscapedChar2
+    "\\\\" -> EscapedChar2
+
+    "<" EscapedChar* ">"    -> EscapedChar1
+    "<\\\\>" [\ \t\r]* [\n] -> EscapedChar1
+    "[" EscapedChar* "]"    -> EscapedChar2
+    "[\\\\]" [\ \t\r]* [\n] -> EscapedChar2
 
     %% double-backslash isn't allowed in <<>> / [[]] templates
     %% (would clash with <\\> / [\\] line continuation construct)
@@ -141,6 +153,7 @@
 
     %% escapes allowed in a placeholder-like construct
     "\\ "  -> EscapedChar
+    "\\'"  -> EscapedChar
     "\\\"" -> EscapedChar
     "\\t"  -> EscapedChar
     "\\r"  -> EscapedChar
@@ -149,9 +162,13 @@
     UnicodeEscapedChar -> EscapedChar
 
     "\\" ~[] -> EscapedChar {recover, cons("WATER")}
-    "<" ~[\>]+ ">" -> TemplateEscape1 {recover, cons("WATER")}
-    "[" ~[\]]+ "]" -> TemplateEscape2 {recover, cons("WATER")}
+    "<" ~[\>]+ ">" -> EscapedChar1 {recover, cons("WATER")}
+    "[" ~[\]]+ "]" -> EscapedChar2 {recover, cons("WATER")}
 
   lexical restrictions
-    TemplateEscapeQ    -/- [\\]
+    TemplateEscape1 -/- [\\]
+    TemplateEscape1 -/- [\<].[\\]
+    TemplateEscape2 -/- [\\]
+    TemplateEscape2 -/- [\[].[\\]
+    TemplateEscapeQ -/- [\\]
     UnicodeEscapedChar -/- [0-9A-Fa-f]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Sep 28 12:45:30 2011	(r23397)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Sep 28 14:18:06 2011	(r23398)
@@ -13,6 +13,14 @@
 
 strategies
 
+  test-templatelang-to-esv:
+    (_, _, ast, _, _) -> Module(modulename, NoImports(), [Completions("", listOfCompletions)])
+    with
+    	<?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), _)])])> ast;
+    	<?CompilationUnit([], [Package(_, [<template-module-to-esv>])]); alltd(String(double-quote))> ast => listOfCompletions
+
+strategies
+
 	/** @type Module -> List(Completions) */
 	template-module-to-esv:
 		Module(_, _, section*) -> <template-sections-to-esv> section*

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Sep 28 12:45:30 2011	(r23397)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Sep 28 14:18:06 2011	(r23398)
@@ -1,6 +1,7 @@
 module to-sdf
 imports
   libstratego-lib
+  libstratego-sglr
   include/SpoofaxLang
 imports
 	common
@@ -14,6 +15,18 @@
 
 strategies
 
+  test-templatelang-to-sdf:
+    (_, _, ast, _, _) -> "module"#([unparameterized(modulename), [], [exports(grammars)]])
+    with
+      init-template-options;
+      <?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), sections)])])> ast;
+      (options, t-sections) := <partition(?TemplateOptions(<id>))> sections;
+      <try([declare-template-options-main])> options;
+      <template-sections-to-sdf /*;alltd(quoted(double-quote))*/> t-sections;
+      (\[x] -> x\ + \[x, y] -> conc-grammars(x, y)\) => grammars
+
+strategies
+
   /** @type List(TemplateSection) -> List(grammar) */
   template-sections-to-sdf:
     section* -> sdf-section'*
@@ -191,13 +204,13 @@
     collect-one(?Separator(<remove-whitespace>)); escape; double-quote
 
   placeholder-to-sdf:
-    Placeholder(_, sort(S'), Option(), _) -> A|[ S'? ]|
+    Placeholder(_, sort(S), Option(), _) -> A|[ S? ]|
 
   sort-to-contentcomplete:
-    S' -> p|[ CONTENTCOMPLETE -> S' {cons("WATER"), avoid} ]|
+    sort(S) -> p|[ CONTENTCOMPLETE -> S {cons("\"WATER\""), avoid} ]|
 
   sort-to-insertion:
-    S'@sort(x) -> p|[ -> S' {cons("INSERTION"), recover} ]|
+    sort(S) -> p|[ -> S {cons("\"INSERTION\""), recover} ]|
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Sep 28 12:45:30 2011	(r23397)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Sep 28 14:18:06 2011	(r23398)
@@ -13,6 +13,17 @@
 
 strategies
 
+  test-templatelang-to-str:
+    (_, _, ast, _, _) -> result
+    with
+      init-template-options;
+      <?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), sections)])])> ast;
+      (options, t-sections) := <partition(?TemplateOptions(<id>))> sections;
+      <try([declare-template-options-main])> options;
+      <template-sections-to-stratego; alltd(Str(escape; double-quote))> t-sections => result
+
+strategies
+
   template-sections-to-stratego =
     template-sections-to-stratego-string;
     parse-stratego-string;

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Wed Sep 28 12:45:30 2011	(r23397)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Wed Sep 28 14:18:06 2011	(r23398)
@@ -105,10 +105,12 @@
       <Declaration> qualified-sort-name
     <+
       (
-      	(GetEnclosingModuleName;get-module-abs-filepath <+ LegacyModuleResolvedPath) => file;
+        // in SPT tests, file may be unavailable
+      	if (GetEnclosingModuleName;get-module-abs-filepath <+ LegacyModuleResolvedPath) => file then
+      	  rules( DeclarationFile: qualified-sort-name -> file )
+      	end;
       	rules(
-       		Declaration		 :    qualified-sort-name  -> prod
-        	DeclarationFile:    qualified-sort-name  -> file
+       		Declaration		 :    qualified-sort-name  -> prod
         	// Added following two dynamic rules for the ESV Def. analysis
         	SortDeclaration  :  qualified-sort-name -> x
        		SortProductionLHS:+ qualified-sort-name -> lhs

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Wed Sep 28 12:45:30 2011	(r23397)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Wed Sep 28 14:18:06 2011	(r23398)
@@ -1,25 +1,25 @@
 module editor/main
 
 imports
-	lib/editor-common.generated
-	codegen/compile
-imports 
-	common
-	config
-	utils/cache	
-	utils/debug
-	editor/resolve/-
+  lib/editor-common.generated
+  codegen/compile
+imports
+  common
+  config
+  utils/cache
+  utils/debug
+  editor/resolve/-
 
 rules
-	// Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
   editor-resolve:
     (node, position, ast, path, project-path) -> elem
     where
-    	<editor-resolve> node => elem	
-    	 
-    	
-    		 
-    	
+      <editor-resolve> node => elem
+
+
+
+
   // Returns "hover help" information for a particular node in the editor.
   // For references, this rule is invoked using the resolved term.
   editor-hover:
@@ -30,20 +30,23 @@
   // (the completion identifier in the AST provides additional context information)
   editor-complete:
     (node, position, ast, path, project-path) ->[]
-  
+
 
 rules
-	//editor-analyze	
- 	editor-analyze: 
- 		(ast, path, project-path) -> (ast, errors, warnings, infos) // TODO : ast -> get the analyzed AST 
-    with 
-			 editor-init
-			;rules(ProjectPath := project-path)
-			;initialize-configuration
-			;abs-path := <concat-strings;string-replace(|"\\", "/")>[project-path, "/" ,path]
-			;<debug>$[Compiling following SPX file: [<pp-aterm>abs-path]]    
-		with 
-			<cache-currently-analyzing-ast>(abs-path  , ast)	 
-		with 
-			<compile-packages-of> abs-path  => ( errors, warnings, infos)
-			 
\ No newline at end of file
+  // editor-analyze
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, infos) // TODO : ast -> get the analyzed AST
+    with
+       editor-init
+      ;rules(ProjectPath := project-path)
+      ;if <string-ends-with(|".spt")> path then
+         // executed when testing
+         !([], [], []) => (errors, warnings, infos)
+       else
+         // not executed when testing
+         initialize-configuration
+        ;abs-path := <concat-strings;string-replace(|"\\", "/")>[project-path, "/" ,path]
+        ;<debug>$[Compiling following SPX file: [<pp-aterm>abs-path]]
+        ;<cache-currently-analyzing-ast>(abs-path  , ast)
+        ;<compile-packages-of> abs-path  => ( errors, warnings, infos)
+      end

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Wed Sep 28 12:45:30 2011	(r23397)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Wed Sep 28 14:18:06 2011	(r23398)
@@ -6,6 +6,14 @@
 
 strategies
 
+  test-templatelang-desugar-sdf:
+    (_, _, ast, _, _) -> <templatelang-desugar-sdf-top> ast
+
+  test-templatelang-desugar:
+    (_, _, ast, _, _) -> <templatelang-desugar-top> ast
+
+strategies
+
   templatelang-desugar-sdf-top = alltd(templatelang-desugar-sdf)
 
   templatelang-desugar-top = innermost(templatelang-desugar)
@@ -55,6 +63,7 @@
           unescape =
             string-as-chars(rec x(
                \['\', ' ' | tail] -> [' '  | <x> tail]\
+            <+ \['\', '\' | tail] -> ['\'  | <x> tail]\
             <+ \['\', '"' | tail] -> ['"'  | <x> tail]\
             <+ \['\', '\''| tail] -> ['\'' | <x> tail]\
             <+ \['\', 't' | tail] -> ['\t' | <x> tail]\

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt	Wed Sep 28 14:18:06 2011	(r23398)
@@ -0,0 +1,25 @@
+module desugar-sdf
+
+language SpoofaxLang
+start symbol SdfProduction
+
+test transform no-attrs() into attrs([]) [[ X = ]]
+build test-templatelang-desugar to
+  SdfProduction("X", [], attrs([]))
+
+test transform SdfProductionWithCons without attrs into prod [[ X.Y = ]]
+build test-templatelang-desugar-sdf to 
+  prod([], sort("X"), attrs([term(default(appl(unquoted("cons"),[fun(quoted("\"Y\""))])))]))
+
+test transform SdfProductionWithCons with attrs into prod [[ X.Y = {left} ]]
+build test-templatelang-desugar-sdf to
+  // NOTE: order of attributes is not important, but this cannot be tested 
+  prod([], sort("X"), attrs([term(default(appl(unquoted("cons"),[fun(quoted("\"Y\""))]))),assoc(left)]))
+
+test transform SdfProduction without attrs into prod [[ X = ]]
+build test-templatelang-desugar-sdf to
+  prod([], sort("X"), no-attrs())
+
+test transform SdfProduction with attrs into prod [[ X = {right} ]]
+build test-templatelang-desugar-sdf to
+  prod([], sort("X"), attrs([assoc(right)]))

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar.spt	Wed Sep 28 14:18:06 2011	(r23398)
@@ -0,0 +1,37 @@
+module templatelang-desugar
+
+language SpoofaxLang
+start symbol Template
+
+test transform NoOptions() into Options([]) [[ <<<Z>>> ]]
+build test-templatelang-desugar to
+  Template([Placeholder(_, _, _, Options([]))])
+
+// NOTE: Do not replace the tab in the next line with a space!
+test replace tabs with two spaces [[ <<	ddd>> ]]
+build test-templatelang-desugar to Template([Layout("  "),String("ddd")])
+
+// FIXME: Add tab char, see also spoofax-431.spt
+test unescape common escape chars [[ <<<\ \'\"\r\n>>> ]]
+build test-templatelang-desugar to Template([String(" '\"\r\n")])
+
+test unescape escaped brackets (1) [[ <<\<\>\\>> ]]
+build test-templatelang-desugar to Template([String("<>\\")])
+
+test unescape escaped brackets (2) [[[ [[\[\]\\]] ]]]
+build test-templatelang-desugar to Template([String("[]\\")])
+
+test unescape line ending (1) [[ <<<\\>  
+>> ]]
+build test-templatelang-desugar to Template([String("")])
+
+test unescape line ending (2) [[[ [[[\\]  
+]] ]]]
+build test-templatelang-desugar to Template([String("")])
+
+test unescape unicode codepoints [[ <<<\u41\u61>>> ]]
+build test-templatelang-desugar to Template([String("Aa")])
+
+test un-double-quote and unescape separators [[ <<<Z*; separator="\n">>> ]]
+build test-templatelang-desugar to Template(
+  [Placeholder(_, _, _, Options([Separator("\n")]))])

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt	Wed Sep 28 14:18:06 2011	(r23398)
@@ -0,0 +1,21 @@
+module templatelang-parse
+
+language SpoofaxLang
+start symbol Template
+
+test parse common escape chars [[ <<<\ \'\"\t\r\n>>> ]]
+parse to Template([Escape("<\\ \\'\\\"\\t\\r\\n>")])
+
+test parse escaped brackets (1) [[ <<\<\>\\>> ]]
+parse to Template([Escape("\\<\\>\\\\")])
+
+test parse escaped brackets (2) [[[ [[\[\]\\]] ]]]
+parse to Template([Escape("\\[\\]\\\\")])
+
+test parse line ending (1) [[ <<<\\>
+>> ]]
+parse to Template([Escape("<\\\\>\n")])
+
+test parse line ending (2) [[[ [[[\\]
+]] ]]]
+parse to Template([Escape("[\\\\]\n")])

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt	Wed Sep 28 14:18:06 2011	(r23398)
@@ -0,0 +1,26 @@
+module templatelang-spoofax-431
+// http://yellowgrass.org/issue/Spoofax/431
+
+// NOTE: file must be saved using UNIX-style line endings,
+//       and tabs must not be converted to spaces!
+
+language SpoofaxLang
+
+// this test succeeds
+test tab char (1) [[ <<	>> ]] // tab char!
+parse to Template([Layout("	")]) // tab char!
+
+// this test fails
+// test tab char (2) [[ <<	>> ]] // tab char!
+// parse to Template([Layout("\t")])
+
+// but this test fails(!)
+// test newline char (1) [[ <<
+// >> ]]
+// parse to Template([Newline("
+// ")])
+
+// and this test succeeds(!)
+test newline char (2) [[ <<
+>> ]]
+parse to Template([Newline("\n")])

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt	Wed Sep 28 14:18:06 2011	(r23398)
@@ -0,0 +1,129 @@
+module templatelang-to-esv
+
+language SpoofaxLang
+target language EditorService
+
+setup no newlines [[
+  package example
+  module example
+  templates
+]]
+
+// FIXME: Test with other newlines setting.
+//        There is no way to automatically run the tests with all three
+//        settings without repeating all tests, unfortunately.
+
+// setup leading newlines [[
+//   module example
+//   template options
+//     newlines : leading
+//   templates
+// ]]
+
+// setup trailing newlines [[
+//   module example
+//   template options
+//     newlines : trailing
+//   templates
+// ]]
+
+target setup [[
+  module example
+  completions
+]]
+
+test empty [[
+  X.Y = <<>>
+]]
+build test-templatelang-to-esv to [[
+
+]]
+
+test placeholder [[
+  X.Y = <<<Z>>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = <Z:Z> (blank)
+]]
+
+test placeholder (text) [[
+  X.Y = <<< display text : Z>>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = < display text :Z> (blank)
+]]
+
+test placeholder (option) [[
+  X.Y = <<<Z?>>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = (cursor) (blank)
+]]
+
+test placeholder (plus) [[
+  X.Y = <<<Z+>>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = (cursor) (blank)
+]]
+
+test placeholder (star) [[
+  X.Y = <<<Z*>>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = (cursor) (blank)
+]]
+
+test placeholder (plus, separator) [[
+  X.Y = <<<Z+; separator=", ">>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = (cursor) (blank)
+]]
+
+test placeholder (star, separator) [[
+  X.Y = <<<Z*; separator=" + ">>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = (cursor) (blank)
+]]
+
+test placeholder and literals [[
+  X.Y = <<foo <Z> bar>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = "foo " <Z:Z> " bar" (blank)
+]]
+
+test placeholder (option) and literals [[
+  X.Y = <<foo <Z?> bar>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = "foo " (cursor) " bar" (blank)
+]]
+
+test n placeholders => one (cursor)-directive (1) [[
+  X.Y = <<<A?> <B?>>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = (cursor) (blank)
+]]
+
+test n placeholders => one (cursor)-directive (2) [[
+  X.Y = <<<A?> <B?> <C?>>>
+]]
+build test-templatelang-to-esv to [[
+  completion template X: "Y" = (cursor) (blank)
+]]
+
+test statement [[
+  Statement.IfThen = <<
+    if <Exp> then
+      <Statement*; separator="\n">
+    end
+  >>
+]]
+build test-templatelang-to-esv to [[
+  completion template Statement: "IfThen" =
+    "if " <Exp:Exp> " then\n\t" (cursor) "\nend" (blank)
+]]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf.spt	Wed Sep 28 14:18:06 2011	(r23398)
@@ -0,0 +1,80 @@
+module templatelang-to-sdf
+
+language SpoofaxLang
+target language SDF
+
+setup [[
+  package example
+  module example
+  templates
+]]
+
+target setup header [[
+  module example
+  exports
+    context-free syntax
+]]
+
+test empty [[
+  X.Y = <<>>
+  Z.Y = <<>>  // double test to be able to re-use the footer for this test
+]]
+build test-templatelang-to-sdf to [[
+  -> X {cons("Y")}
+  -> Z {cons("Y")}
+]]
+
+test placeholder [[
+  X.Y = <<<Z>>>
+]]
+build test-templatelang-to-sdf to [[
+  Z -> X {cons("Y")}
+]]
+
+test placeholder (text) [[
+  X.Y = <<<this text is ignored : Z>>>
+]]
+build test-templatelang-to-sdf to [[
+  Z -> X {cons("Y")}
+]]
+
+test placeholder (option) [[
+  X.Y = <<<Z?>>>
+]]
+build test-templatelang-to-sdf to [[
+  Z? -> X {cons("Y")}
+]]
+
+test placeholder (plus) [[
+  X.Y = <<<Z+>>>
+]]
+build test-templatelang-to-sdf to [[
+  Z+ -> X {cons("Y")}
+]]
+
+test placeholder (star) [[
+  X.Y = <<<Z*>>>
+]]
+build test-templatelang-to-sdf to [[
+  Z* -> X {cons("Y")}
+]]
+
+test placeholder (plus, separator) [[
+  X.Y = <<<Z+; separator=", ">>>
+]]
+build test-templatelang-to-sdf to [[
+  {Z ","}+ -> X {cons("Y")}
+]]
+
+test placeholder (star, separator) [[
+  X.Y = <<<Z*; separator=" + ">>>
+]]
+build test-templatelang-to-sdf to [[
+  {Z "+"}* -> X {cons("Y")}
+]]
+
+target setup footer [[
+  context-free syntax
+    CONTENTCOMPLETE -> X {cons("WATER"), avoid}
+    CONTENTCOMPLETE -> Z {cons("WATER"), avoid}
+]]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Wed Sep 28 14:18:06 2011	(r23398)
@@ -0,0 +1,53 @@
+module templatelang-to-str-1
+
+language SpoofaxLang
+target language Stratego-Sugar
+
+// FIXME: This testsuite should really eval the generated stratego code on sample
+//        input, instead of testing the exact form of the generated stratego code.
+//        This is currently not really possible, however ...
+
+setup [[
+  package example
+  module example
+  templates
+]]
+
+target setup header [[
+  module prettyprinter
+  imports
+    libstratego-lib
+  strategies
+    pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
+    pp-list(s|t) = map(s); separate-by(|t); concat-strings
+    pp-ih(|t) = ?"" <+ string-replace(|"\n", t); <conc-strings> (t, <id>)
+  strategies
+    prettyprint-X: Y(a) -> zz with
+      // The strategies invoked here differ per test
+      // The footer contains a last, common line.
+]]
+
+test placeholder [[ X.Y = <<<Z>>> ]]
+build test-templatelang-to-str to [[ a' := <prettyprint-Z> a; ]]
+
+test placeholder (text) [[ X.Y = <<<this text is ignored : Z>>> ]]
+build test-templatelang-to-str to [[ a' := <prettyprint-Z> a; ]]
+
+test placeholder (plus) [[ X.Y = <<<Z+>>> ]]
+build test-templatelang-to-str to [[ a' := <pp-list(prettyprint-Z|" ")> a; ]]
+
+test placeholder (star) [[ X.Y = <<<Z*>>> ]]
+build test-templatelang-to-str to [[ a' := <pp-list(prettyprint-Z|" ")> a; ]]
+
+test placeholder (plus, separator) [[ X.Y = <<<Z+; separator=", ">>> ]]
+build test-templatelang-to-str to [[ a' := <pp-list(prettyprint-Z|", ")> a; ]]
+
+test placeholder (star, separator) [[ X.Y = <<<Z*; separator=" + ">>> ]]
+build test-templatelang-to-str to [[ a' := <pp-list(prettyprint-Z|" + ")> a; ]]
+
+target setup footer [[
+	  zz := <concat-strings> [a']
+
+  strategies
+    prettyprint-Z = is-string
+]]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Wed Sep 28 14:18:06 2011	(r23398)
@@ -0,0 +1,79 @@
+module templatelang-to-str-2
+
+language SpoofaxLang
+target language Stratego-Sugar
+
+// FIXME: This testsuite should really eval the generated stratego code on sample
+//        input, instead of testing the exact form of the generated stratego code.
+//        This is currently not really possible, however ...
+
+setup common input [[
+  package example
+  module example
+  templates
+    Statement.IfThen = <<
+      if <Exp> then
+        <Statement*; separator="\n">
+      end
+    >>
+]]
+
+target setup header [[
+  module prettyprinter
+  imports
+    libstratego-lib
+  strategies
+    pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
+    pp-list(s|t) = map(s); separate-by(|t); concat-strings
+]]
+
+test no newlines [[
+  template options
+    newlines : none
+]]
+build test-templatelang-to-str to [[
+    pp-ih(|t) = ?"" <+ string-replace(|"\n", t); <conc-strings> (t, <id>)
+
+  strategies
+	  prettyprint-Statement: IfThen(a, b) -> zz
+	  with a' := <prettyprint-Exp> a;
+	       b' := <pp-list(prettyprint-Statement|"\n")> b;
+	       zz := <concat-strings> ["if ", a', " then", <pp-ih(|"\n  ")> b', "\nend"]
+]]
+
+test leading newlines [[
+  template options
+    newlines : leading
+]]
+build test-templatelang-to-str to [[
+    pp-ih(|t) = ?"" <+
+      string-replace(|"\n", t);
+      if not(string-starts-with(|t)) then
+        <conc-strings> (t, <id>)
+      end
+
+  strategies
+    prettyprint-Statement: IfThen(a, b) -> zz
+    with a' := <prettyprint-Exp> a;
+         b' := <pp-list(prettyprint-Statement|"\n")> b;
+         zz := <concat-strings> ["\nif ", a', " then", <pp-ih(|"\n  ")> b', "\nend"]
+]]
+
+test trailing newlines [[
+  template options
+    newlines : trailing
+]]
+build test-templatelang-to-str to [[
+    pp-ih(|t) = ?"" <+ all-lines(<conc-strings>(t, <id>))
+
+  strategies
+    prettyprint-Statement: IfThen(a, b) -> zz
+    with a' := <prettyprint-Exp> a;
+         b' := <pp-list(prettyprint-Statement|"\n")> b;
+         zz := <concat-strings> ["if ", a', " then\n", <pp-ih(|"  ")> b', "end\n"]
+]]
+
+target setup footer [[
+  strategies
+    prettyprint-Exp = is-string
+]]

From tobivollebregt at gmail.com  Wed Sep 28 16:47:05 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 28 Sep 2011 14:47:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23399 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110928144705.773732B800B@mx2.tudelft.nl>

Author: tvo
Date: Wed Sep 28 14:47:04 2011
New Revision: 23399
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23399&sc=1

Log:
new-libs (should fix build?)

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From tobivollebregt at gmail.com  Thu Sep 29 11:07:59 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 29 Sep 2011 09:07:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23400 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/syntax
Message-ID: <20110929090759.097BDCC12E@mx4.tudelft.nl>

Author: tvo
Date: Thu Sep 29 09:07:58 2011
New Revision: 23400
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23400&sc=1

Log:
remove temp files

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/RegExp.aterm
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.aterm
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/test.aterm

From M.A.Akhter at student.tudelft.nl  Thu Sep 29 13:22:00 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 29 Sep 2011 11:22:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23401 -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
Message-ID: <20110929112200.49BF3108C03A@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Sep 29 11:21:58 2011
New Revision: 23401
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23401&sc=1

Log:
Following text added in Spoofaxlang project wizard : (beta version)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java	Thu Sep 29 09:07:58 2011	(r23400)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java	Thu Sep 29 11:21:58 2011	(r23401)
@@ -42,8 +42,8 @@
 	 */
 	public NewSpxEditorWizardPage() {
 		super("wizardPage");
-		setTitle("Spoofax/IMP(SpoofaxLang) Editor Project");
-		setDescription("This wizard creates a new Spoofax/IMP editor project (powered by SpoofaxLang).");
+		setTitle("Spoofax/IMP(SpoofaxLang) Editor Project (beta version)");
+		setDescription("This wizard creates a new Spoofax/IMP editor project (Powered by SpoofaxLang). Currently it is in in beta version.");
 	}
 
 	/**

From M.A.Akhter at student.tudelft.nl  Thu Sep 29 13:22:33 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 29 Sep 2011 11:22:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23402 -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
Message-ID: <20110929112233.740FDCC23C@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Sep 29 11:22:31 2011
New Revision: 23402
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23402&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java	Thu Sep 29 11:21:58 2011	(r23401)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java	Thu Sep 29 11:22:31 2011	(r23402)
@@ -43,7 +43,7 @@
 	public NewSpxEditorWizardPage() {
 		super("wizardPage");
 		setTitle("Spoofax/IMP(SpoofaxLang) Editor Project (beta version)");
-		setDescription("This wizard creates a new Spoofax/IMP editor project (Powered by SpoofaxLang). Currently it is in in beta version.");
+		setDescription("This wizard creates a new Spoofax/IMP editor project (Powered by SpoofaxLang). Currently it is in beta version.");
 	}
 
 	/**

From v.vergu at gmail.com  Thu Sep 29 19:18:27 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Thu, 29 Sep 2011 17:18:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23403 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF
Message-ID: <20110929171827.6E1C12B8006@mx2.tudelft.nl>

Author: VladVergu
Date: Thu Sep 29 17:18:27 2011
New Revision: 23403
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23403&sc=1

Log:
Renamed 'qualifer' to 'qualifier' so that we clients can actually receive updates for this plugin.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Thu Sep 29 11:22:31 2011	(r23402)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Thu Sep 29 17:18:27 2011	(r23403)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: SpoofaxTesting UI Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.testing.ui;singleton:=true
-Bundle-Version: 1.0.0.qualifer
+Bundle-Version: 1.0.0.qualifier
 Bundle-Activator: org.strategoxt.imp.testing.ui.Activator
 Require-Bundle: org.eclipse.ui,
  org.eclipse.core.runtime,

From m.dejonge at tudelft.nl  Fri Sep 30 12:34:23 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 30 Sep 2011 10:34:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23404 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/sdf2imp/util
	org.strategoxt.imp.generator/src/syntax org.s...
Message-ID: <20110930103423.9A1B77F8040@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Sep 30 10:34:23 2011
New Revision: 23404
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23404&sc=1

Log:
layout-preservation, sugar-preservation:
- bug fixes/improvements
- parenthesize strategy
- resugar strategy (for desugarings that break homomorphism assumption)
- override reconstruction strategy (for language constructs that violate homomorphism property)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Thu Sep 29 17:18:27 2011	(r23403)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Fri Sep 30 10:34:23 2011	(r23404)
@@ -87,13 +87,25 @@
           ~//                 after it has been analyzed/desugared by the observer.
           ~//
           ~// Refactorings are used for transformations that modify the original source code,
-          ~// while preserving the layout. A custom pretty-print strategy is used to format newly inserted nodes.
+          ~// while preserving the layout and syntactic sugar. 
+          ~// A custom pretty-print strategy (T -> String) is used to format newly inserted nodes,
+          ~// a parenthesize strategy (T -> T) surrounds subterms with "Parenthetical(T)" when brackets are required,
+          ~// resugar rules are required for desugarings that are not local-to-local or desugarings that duplicate terms
+          ~// as the 'l' in \l -> []\ => {l: ( l -> [] )}.
+          ~// Finally, text-reconstruction can be overruled with a strategy (T-old, T-new) -> <try(custom-pp)> T-new,
+          ~// the resulting text will be indented according to its location.
+          ~// This is sometimes needed in case the node text can not be reconstructed by replacing child texts 
+          ~// in the original formatting.
+          ~//   
           ~// Refactorings can be specified as shown below, whereby Property* indicates on which constructs the
           ~// refactoring is specified (<sort>.<constructor>).
           ~//
           ~// refactorings
           ~//
-          ~//   pretty-print: prettyprint
+          ~//   pretty-print: prettyprint          
+          ~//   parenthesize: parenthesize
+          ~//   resugar: resugar-node
+          ~//   override reconstruction: disallow-reconstruction 
           ~// 
           ~//   refactoring Property*: "Extract Entity" =  extract-entity (source)
           ~//     shortcut: Shift+Alt+M

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Sep 29 17:18:27 2011	(r23403)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Fri Sep 30 10:34:23 2011	(r23404)
@@ -32,108 +32,112 @@
   
 rules //interface
 
-// backwards compatibility
-//TODO: change refactoring esv, geen pp-table meer
-construct-textual-change(pp|pp-table)=
-	construct-textual-change(pp <+ (ast2abox(|[pp-table]); box2text-string(|100)))
-
 /*
  * Constructs the textual change associated with 
  * the transformation that replaces a (sub)term 'oldnode' with a new (sub)term 'newnode'.
- * @param custom pp strategy used to construct the text fragment for nodes that miss origin information
+ * @param custom pp strategy used to construct the text fragment for nodes that miss origin information T -> String
  * pp strategy is assumed to be homomorphic (except for lists separators that require parent node information)
+ * @parenthesize strategy to resolve parse ambiguities that possible invalidate homomorpism T -> T
+ * @prevents application of homomorphism assumption (or-node, node) -> _ 
+ * @resugars when desugaring is non local or 1:n, thereby preventing incorrect reconstruction 
  * @type (original-node, new-node) -> (Int,Int, String)
  */	
-construct-textual-change(pp):
+construct-textual-change(pp, parenthesize, override-reconstruction, resugar):
 	t@(oldnode, newnode) -> (start-offset, end-offset, newText)
 	where
 		<is-tuple> t;
 		<has-origin-term> oldnode		
 	with
-		reconstructed-text := <topdown(try(strip-annos)); construct-text-from-old(pp)> (oldnode, newnode); 
-		r-text := <origin-set-relation>(newnode, reconstructed-text);
-		(start-offset, end-offset, newText) := <ast-change-to-text-change(pp)> REPLACEMENT(oldnode, r-text)
+		parenthesized-node := <try(parenthesize)> newnode;
+		reconstructed-text := <topdown(try(strip-annos)); construct-text-from-old(pp, override-reconstruction, resugar)> (oldnode, parenthesized-node); 
+		r-text := <origin-set-relation>(parenthesized-node, reconstructed-text);
+		(start-offset, end-offset, newText) := <ast-change-to-text-change(pp, override-reconstruction, resugar)> REPLACEMENT(oldnode, r-text)
 		
-
-construct-textual-change(pp):
+rules
+	
+construct-textual-change(pp, parenthesize, override-reconstruction, resugar):
 	t@(oldnode, newnode) -> (0, 0, "")
 	where
 		<is-tuple> t;
 		<equal> (oldnode, newnode)
 
-construct-textual-change(pp) =
-	map(construct-textual-change(pp))
+construct-textual-change(pp, parenthesize, override-reconstruction, resugar)=
+	map(construct-textual-change(pp, parenthesize, override-reconstruction, resugar))
 
 //treat olnode as a candidate origin term to protect against loss of origin (and to preserve sugar in first diff)
-construct-text-from-old(pp):
+construct-text-from-old(pp, override-reconstruction, resugar):
 	(oldnode, newnode) -> reconstructed-text
 	where
-		reconstructed-text := <construct-text-from-origin(pp)> (oldnode, newnode) <+ //possible desugared
-		reconstructed-text := <construct-text-from-origin(pp)> (<where(not(is-origin-term)); origin-term> oldnode, newnode) <+
-		reconstructed-text := <construct-text(pp)> newnode
+		reconstructed-text := <construct-text-from-origin(pp, override-reconstruction, resugar)> (oldnode, newnode) <+ //possible desugared
+		reconstructed-text := <construct-text-from-origin(pp, override-reconstruction, resugar)> (<where(not(is-origin-term)); origin-term> oldnode, newnode) <+
+		reconstructed-text := <construct-text(pp, override-reconstruction, resugar)> newnode
+
+rules // backwards compatibility
+
+construct-textual-change(pp) = construct-textual-change(pp, id, fail, fail)
+
+construct-textual-change(pp|pp-table)=
+	construct-textual-change(pp <+ (ast2abox(|[pp-table]); box2text-string(|100)))
 
 rules //text-reconstruction
 
-construct-text(pp) = 
-	pp-default(construct-text(pp)) <+ //Parenthesis, None, ...
-	construct-text-from-origin-desugared(pp) <+
-	construct-text-from-origin(pp) <+
-	construct-text-by-pp(pp) <+
+construct-text(pp, override-reconstruction, resugar) = 
+	pp-default(construct-text(pp, override-reconstruction, resugar)) <+ //Parenthesis, None, ...
+	construct-text-from-origin-desugared(pp, override-reconstruction, resugar) <+ 
+	construct-text-from-origin(pp, override-reconstruction, resugar) <+
+	construct-text-by-pp(pp, override-reconstruction, resugar) <+
 	pp
 
-construct-text-from-origin-desugared(pp):
-	node -> <construct-text-from-origin(pp)> (origin-desugared-node, node)
+construct-text-from-origin-desugared(pp, override-reconstruction, resugar):
+	node -> <construct-text-from-origin(pp, override-reconstruction, resugar)> (origin-desugared-node, node)
 	where 
 		origin-desugared-node := <origin-term-desugared; topdown(try(strip-annos))> node
-	//TODO: apply-resugaring here?
-		//; <debug(!"          desugared: ")> origin-desugared-node
-		//; <origin-term; debug(!"origin of desugared: ")> origin-desugared-node
 
-construct-text-from-origin(pp):
-	node -> <construct-text-from-origin(pp)> (origin-node, node)
+construct-text-from-origin(pp, override-reconstruction, resugar):
+	node -> <construct-text-from-origin(pp, override-reconstruction, resugar)> (origin-node, node)
 	where
 		origin-node := <origin-term> node
  
 //list must be constructed with comments that preceed the first element or succeed the last element
 //(otherwise insert-at-end gives problems)
-construct-text-from-origin(pp):
-	lst -> <construct-text-with-comments(pp|"")> (origin-lst, lst)
+construct-text-from-origin(pp, override-reconstruction, resugar):
+	lst -> <construct-text-with-comments(pp, override-reconstruction, resugar|"")> (origin-lst, lst)
 	where
 		origin-lst := <find-origin-sublist> lst
 
-construct-text-from-origin(pp):
-	t@(origin-node, node) -> text
+construct-text-from-origin(pp, override-reconstruction, resugar):
+	t@(origin-node, node) -> <correct-indentation(|origin-node)> text
 	where //guarantees that node can be formatted from the origin node, preventing non-termination
 		<is-tuple> t; //debug(!"ast-changes?: ");
 		<has-origin-term> origin-node;
-		ast-changes := <collect-ast-changes> (origin-node, node); 
+		ast-changes := <collect-ast-changes(override-reconstruction, resugar)> (origin-node, node); 
 		<is-terminating-diff(|node)> ast-changes //prevent non termination
 		//; debug(!"ast-changes!: ")
 	with
-		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; //debug(!"txt-changes: ");
+		text-changes := <map(ast-change-to-text-change(pp, override-reconstruction, resugar))> ast-changes; //debug(!"txt-changes: ");
 		text := <apply-text-changes>(text-changes, <origin-text> origin-node, <origin-start-offset> origin-node)
 
-construct-text-by-pp(pp):
+construct-text-by-pp(pp, override-reconstruction, resugar):
 	node -> text
-	where
+	where 
 		text := <
-			all(alltd(construct-text-with-comments(pp|<DEFAULT-INDENT>))); 
+			all(alltd(construct-text-with-comments(pp, override-reconstruction, resugar|<DEFAULT-INDENT>))); 
 			topdown(try(pp-default(pp))); //handle brackets
 			pp
 		> node
 
-construct-text-with-comments(pp|default-indent) = 
-	construct-text-with-comments-desugared(pp|default-indent) <+
-	construct-text-with-comments-origin(pp|default-indent)
+construct-text-with-comments(pp, override-reconstruction, resugar|default-indent) = 
+	construct-text-with-comments-desugared(pp, override-reconstruction, resugar|default-indent) <+
+	construct-text-with-comments-origin(pp, override-reconstruction, resugar|default-indent)
 
-construct-text-with-comments-desugared(pp|default-indent):
-	node -> <construct-text-with-comments(pp|default-indent)> (origin-desugared-node, node)
+construct-text-with-comments-desugared(pp, override-reconstruction, resugar|default-indent):
+	node -> <construct-text-with-comments(pp, override-reconstruction, resugar|default-indent)> (origin-desugared-node, node)
 	where 
-		origin-desugared-node := <origin-term-desugared; topdown(try(strip-annos))> node;
+		origin-desugared-node := <origin-term-desugared; topdown(try(strip-annos))> node; 
 		<same-signature> (origin-desugared-node, node)
 
-construct-text-with-comments-origin(pp|default-indent):
-	node -> <construct-text-with-comments(pp|default-indent)> (origin-node, node)
+construct-text-with-comments-origin(pp, override-reconstruction, resugar|default-indent):
+	node -> <construct-text-with-comments(pp, override-reconstruction, resugar|default-indent)> (origin-node, node)
 	where
 		origin-node := <origin-term <+ find-origin-sublist> node
 
@@ -141,17 +145,17 @@
 // on this moment the parenthesis will be placed on the layouted text, 
 // which is awful. It should be: {indent + comments before}{(}{node-text}{)}{comments after} 
 
-construct-text-with-comments(pp|default-indent):
+construct-text-with-comments(pp, override-reconstruction, resugar|default-indent):
 	t@(origin-node, node) -> node-text
 	where 
 		<is-tuple> t;
 		<has-origin-term> origin-node
 	with //termination check is not needed (we need to Replace to keep comments), since it is called on a subterm in construct-text-by-pp
-		ast-changes := <collect-ast-changes> (origin-node, node); //debug(!"--ast-changes: ");
-		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; //debug(!"--txt-changes: ");
+		ast-changes := <collect-ast-changes(override-reconstruction, resugar)> (origin-node, node); //debug(!"--ast-changes: ");
+		text-changes := <map(ast-change-to-text-change(pp, override-reconstruction, resugar))> ast-changes; //debug(!"--txt-changes: ");
 		full-text := <origin-text-with-layout> origin-node; 
 		full-text-start-offset := <origin-layout-prefix-start-offset> origin-node; 
-		modified-full-text := <apply-text-changes>(text-changes, full-text, full-text-start-offset);
+		modified-full-text := <apply-text-changes>(text-changes, full-text, full-text-start-offset); 
 		node-text := <replace-indentation(|default-indent, <origin-indent <+ !""> origin-node)> modified-full-text
 
 signature constructors //signatures for AST changes
@@ -162,15 +166,33 @@
 
 rules //ast-diff
 
-collect-ast-changes = 
+collect-ast-changes(override-reconstruction, resugar) = 
 	where(is-tuple); 
 	try(remove-superfluous-parentethical);
 	(collect-ast-changes-eq <+
-	collect-ast-changes-rec-node <+
-	collect-ast-changes-rec-list <+
-	collect-ast-changes-resugared <+
+	collect-ast-changes-not-homomorphic(override-reconstruction) <+
+	collect-ast-changes-resugared(override-reconstruction, resugar) <+
+	collect-ast-changes-rec-node(override-reconstruction, resugar) <+
+	collect-ast-changes-rec-list(override-reconstruction, resugar) <+
+	collect-ast-changes-sugared(override-reconstruction, resugar) <+
 	collect-ast-changes-replace)
 
+//1: helps to keep syntactic sugar
+//2: prevent incorrect reconstruction in case local and global information gets mixed
+collect-ast-changes-resugared(override-reconstruction, resugar):
+	(origin-node, node) -> ast-changes
+	where 
+		<not(is-origin-term)> origin-node; //otherwise resugaring does not make sense
+		origin-resugared := <origin-track-forced(resugar)> origin-node;
+		<not(equal)>(origin-node, origin-resugared);
+		ast-changes := <collect-ast-changes(override-reconstruction, resugar)> (origin-resugared, <try(resugar)> node)
+
+collect-ast-changes-not-homomorphic(override-reconstruction):
+	(origin-node, node) -> [REPLACEMENT(origin-node, <origin-set-relation>(node, custom-node))]
+	where
+		custom-node := <override-reconstruction> (origin-node, node); //typical the node itself or a textual representation
+		<check-change-origin> REPLACEMENT(origin-node, node)
+
 remove-superfluous-parentethical:
 	(origin-node, Parenthetical(node)) -> (origin-node, node)
 	where //apparently, parenthesis already in source
@@ -181,39 +203,63 @@
 	where
 		<equal> (origin-node, node)
 
-collect-ast-changes-rec-node:
+collect-ast-changes-rec-node(override-reconstruction, resugar):
 	(origin-node, node) -> ast-changes
 	where
-		<same-signature <+ ?([_],[_])> (origin-node, node);
+		<same-signature <+ ?([_],[_])> (origin-node, node); //TODO: not injection?
+		<is-related-to(|origin-node) <+ (is-related-to-fuzzy(|origin-node))> node;
 		arg-tuples := <zip>(<get-arguments> origin-node, <get-arguments> node); 
-		ast-changes := <map(collect-ast-changes); flatten-list> arg-tuples 
+		ast-changes := <map(collect-ast-changes(override-reconstruction, resugar)); flatten-list> arg-tuples 
  
-collect-ast-changes-rec-list:
+collect-ast-changes-rec-list(override-reconstruction, resugar):
 	(origin-lst, lst) -> ast-changes
 	where 
-		<is-list> lst;
-		<is-list> origin-lst;
+		<is-list; not(?[])> lst;
+		<is-list; not(?[])> origin-lst;
 		<not(violates-homomorphism-list)> (origin-lst, lst)
 	where
 		ast-changes := <
-			list-diff(|origin-lst);
+			list-diff(override-reconstruction, resugar|origin-lst); 
 			filter(not(?INSERT_BEFORE(_, [])));
 			filter(not(?INSERT_AT_END(_, [])))
-		> (origin-lst, lst)
+		> (origin-lst, lst); 
+		<map(check-change-origin)> ast-changes 
 
-collect-ast-changes-resugared:
-	(origin-node, node) -> ast-changes
+check-change-origin:
+	r at REPLACEMENT(or, _) -> r
 	where
-		ast-changes := <collect-ast-changes-rec-node> (origin-node, <origin-term> node)
+		<has-origin-term> or
+
+check-change-origin:
+	d at DELETION(or) -> d
+	where
+		<has-origin-term> or
+
+check-change-origin:
+	ins at INSERT_AT_END(or, trm) -> ins
+	where
+		<has-origin-term; origin-separation> or <+ <?[]> trm
+
+check-change-origin:
+	ins at INSERT_BEFORE(or, trm) -> ins
+	where
+		<has-origin-term; origin-separation> or <+ <?[]> trm
+		
+collect-ast-changes-sugared(override-reconstruction, resugar):
+	(origin-node, node) -> ast-changes
 	where
 		<is-origin-term-desugared> node;
 		<not(is-origin-term)> node
-
+	where
+		ast-changes := <collect-ast-changes-rec-node(override-reconstruction, resugar)> (<origin-term> origin-node, <origin-term> node)
+		  
 collect-ast-changes-replace:
 	(origin-node, node) -> [REPLACEMENT(origin-node, node)]
 	where
-		<has-origin-term> origin-node;
-		<not(is-list)> node //list-text can only be constructed in a context  
+		<check-change-origin> REPLACEMENT(origin-node, node);
+		<not(is-list) <+ ?[] <+ ?[_] <+ has-origin-sublist> node 
+		//list-text with more then one element can only be constructed in a context 
+		// or from origin 
 
 rules //validity
 
@@ -234,44 +280,50 @@
 	
 rules //list diff
 
-list-diff(|origin-lst) = 
-	(list-diff-fuzzy(|origin-lst) <+
-	list-diff-origin-related(|origin-lst)) 
+list-diff(override-reconstruction, resugar|origin-lst) = 
+	(list-diff-fuzzy(override-reconstruction, resugar|origin-lst) <+
+	list-diff-origin-related(override-reconstruction, resugar|origin-lst)) 
 	
-list-diff-fuzzy(|origin-lst):
+list-diff-fuzzy(override-reconstruction, resugar|origin-lst):
 	([origin-elem|origin-rest], [new-elem|new-rest]) -> ast-changes
 	where
 		<is-deletion(|new-rest)> origin-elem;
 		<is-insertion(|origin-rest)> new-elem;
-		<is-related-to-fuzzy(|origin-elem)> new-elem //fuzzy to prevent deletion + insertion
-	with
+		//<is-related-to-fuzzy(|origin-elem)> new-elem //fuzzy to prevent deletion + insertion
 		ast-changes := <flatten-list>[
-			<collect-ast-changes>(origin-elem, new-elem)|
-			<list-diff(|origin-lst)> (origin-rest, new-rest)
+			<collect-ast-changes(override-reconstruction, resugar)>(origin-elem, new-elem)|
+			<list-diff(override-reconstruction, resugar|origin-lst)> (origin-rest, new-rest)
 		]
 
-list-diff-origin-related(|origin-lst): 
+list-diff-origin-related(override-reconstruction, resugar|origin-lst): 
 	(origin-elems, new-elems) -> ast-changes
 	where 
 		deleted-elems := <take-while(is-deletion(|new-elems))> origin-elems;  
 		origin-rest := <drop-while(is-deletion(|new-elems))> origin-elems;
-		<not(?[])> deleted-elems 
-	with
-		ast-changes := <flatten-list>[DELETION(deleted-elems)|<list-diff(|origin-lst)> (origin-rest, new-elems)]
+		<not(?[])> deleted-elems;
+		<check-change-origin> DELETION(deleted-elems);
+		ast-changes := <flatten-list>[DELETION(deleted-elems)|<list-diff(override-reconstruction, resugar|origin-lst)> (origin-rest, new-elems)]
 
-list-diff-origin-related(|origin-lst):
+list-diff-origin-related(override-reconstruction, resugar|origin-lst):
 	([origin-elem|origin-rest], new-elems) -> ast-changes
 	where
-		(inserted, elem, rest) := <split-fetch-keep(is-related-to(|origin-elem))> new-elems
-	with
+		(inserted, elem, rest) := <split-fetch-keep(is-related-to(|origin-elem))> new-elems;
+		<check-change-origin> INSERT_BEFORE(origin-elem, inserted);
 		ast-changes := <flatten-list>[
 			INSERT_BEFORE(origin-elem, inserted), 
-			<collect-ast-changes>(origin-elem, elem)|
-			<list-diff(|origin-lst)> (origin-rest, rest)
+			<collect-ast-changes(override-reconstruction, resugar)>(origin-elem, elem)|
+			<list-diff(override-reconstruction, resugar|origin-lst)> (origin-rest, rest)
 		]
 
-list-diff-origin-related(|origin-lst):
+list-diff-origin-related(override-reconstruction, resugar|origin-lst):
 	([], new-elems) -> [INSERT_AT_END(origin-lst, new-elems)]
+	where
+		<check-change-origin> INSERT_AT_END(origin-lst, new-elems)
+		
+list-diff-origin-related(override-reconstruction, resugar|origin-lst):
+	([], new-elems) -> [INSERT_AT_END(<last> origin-lst, new-elems)]
+	where
+		<check-change-origin> INSERT_AT_END(<last> origin-lst, new-elems)
 
 
 rules //helper rules text construction
@@ -282,6 +334,9 @@
 		at-suffix(sublst := <origin-sublist-term; ?[_,_|_]>) <+
 		sublst := <init; find-origin-sublist> lst
 
+has-origin-sublist =
+	where(find-origin-sublist)
+
 is-terminating-diff(|newnode):
 	ast-changes -> ast-changes
 	where
@@ -335,11 +390,28 @@
 	where
 		<is-related-to(|origin-node)> node
 
-//related via child
+//related via subterms
 is-related-to-fuzzy(|origin-node):
 	node -> node
 	where 
-		<not(has-origin-term)> node;
-		arg-tuples := <zip>(<get-arguments> origin-node, <get-arguments> node);
-		<map(is-related-to <+ (Snd; not(has-origin-term)))> arg-tuples;
-		<fetch(is-related-to)> arg-tuples
\ No newline at end of file
+		<oncetd(origin-subfragment(|origin-node)) <+ topdown(not(has-origin-term))> node
+
+origin-subfragment(|origin-node):
+	node -> node
+	where
+		start-offset := <origin-start-offset> node;
+		end-offset := <origin-end-offset> node;
+		<leq> (<origin-leftmost-offset> origin-node, start-offset);
+		<leq> (end-offset, <origin-rightmost-offset> origin-node)
+
+origin-leftmost-offset = 
+	origin-start-offset <+
+	get-arguments; 
+	fetch-elem(origin-leftmost-offset)
+	
+
+origin-rightmost-offset = 
+	origin-end-offset <+
+	get-arguments;
+	reverse; 
+	fetch-elem(origin-rightmost-offset)
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Thu Sep 29 17:18:27 2011	(r23403)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Fri Sep 30 10:34:23 2011	(r23404)
@@ -6,25 +6,25 @@
 		
 rules //rules that translate AST-changes to Textual changes
 
-ast-change-to-text-change(pp):
+ast-change-to-text-change(pp, override-reconstruction, resugar):
 	DELETION(origin-lst) -> tc-deletion
 	with 
 		tc-deletion := <create-textchange-delete> origin-lst
 
-ast-change-to-text-change(pp):
+ast-change-to-text-change(pp, override-reconstruction, resugar):
 	REPLACEMENT(origin-node, new-node) ->  tc-replacement 
 	with 
-		tc-replacement := <create-textchange-replace(pp)> (origin-node, new-node) 
+		tc-replacement := <create-textchange-replace(pp, override-reconstruction, resugar)> (origin-node, new-node) 
 
-ast-change-to-text-change(pp):
+ast-change-to-text-change(pp, override-reconstruction, resugar):
 	INSERT_BEFORE(origin-elem, new-elems) -> tc-insert-before
 	with
-		tc-insert-before := <create-textchange-insert-before(pp)> (origin-elem, new-elems)
+		tc-insert-before := <create-textchange-insert-before(pp, override-reconstruction, resugar)> (origin-elem, new-elems)
 
-ast-change-to-text-change(pp):
+ast-change-to-text-change(pp, override-reconstruction, resugar):
 	INSERT_AT_END(origin-elem, new-elems) -> tc-insert-at-end
 	with
-		tc-insert-at-end := <create-textchange-insert-at-end(pp)> (origin-elem, new-elems)
+		tc-insert-at-end := <create-textchange-insert-at-end(pp, override-reconstruction, resugar)> (origin-elem, new-elems)
 	
 create-textchange-delete:
 	origin-elems -> (start-offset, end-offset, "")
@@ -32,52 +32,52 @@
 		start-offset := <origin-deletion-start-offset> origin-elems; 
 		end-offset   := <origin-deletion-end-offset> origin-elems
 		
-create-textchange-replace(pp):
+create-textchange-replace(pp, override-reconstruction, resugar):
 	(origin-node, new-node) -> (start-offset, end, indented-text)
-	where 
+	where  
 		start-offset := <origin-start-offset> origin-node;
 		end   := <origin-end-offset> origin-node;
-		text  := <construct-text(pp)> new-node; //TODO: comments new node?
-		indented-text := <adapt-indentation(|origin-node, new-node)> text
+		text  := <construct-text(pp, override-reconstruction, resugar)> new-node;
+		indented-text := <adapt-indentation(|origin-node)> text
 
-create-textchange-insert-before(pp):
+create-textchange-insert-before(pp, override-reconstruction, resugar):
 	(origin-node, new-elems) -> (offset, offset, insert-text)
-	where
+	where 
 		offset := <origin-insert-before-offset> origin-node;
-		new-elems-text := <map(construct-text-list-element(pp|origin-node))> new-elems;
+		new-elems-text := <map(construct-text-list-element(pp, override-reconstruction, resugar|origin-node))> new-elems;
 		insert-text := <concat-strings> new-elems-text
 
-create-textchange-insert-at-end(pp):
+create-textchange-insert-at-end(pp, override-reconstruction, resugar):
 	(origin-node, new-elems) -> (offset, offset, insert-text)
-	where
+	where 
 		offset := <origin-insert-at-end-offset> origin-node;
 		new-elems-text := <at-init(
-			construct-text-list-element(pp|origin-node), 
-			construct-text-list-element-last(pp|origin-node))
+			construct-text-list-element(pp, override-reconstruction, resugar|origin-node), 
+			construct-text-list-element-last(pp, override-reconstruction, resugar|origin-node))
 		> new-elems;
 		insert-text := <add-separation-before> (origin-node, <concat-strings> new-elems-text)
 
 rules //helper rules layout
 
-construct-text-list-element(pp|origin-node):
+construct-text-list-element(pp, override-reconstruction, resugar|origin-node):
 	elem -> elem-text
 	where
-		text := <construct-text(pp)> elem; 
-		layout-before := <layout-prefix> elem; 
-		indented-prefix-text := <conc-strings; adapt-indentation(|origin-node, elem)> (layout-before, text); 
-		comments-after := <comments-after; adapt-indentation(|origin-node, elem)> elem; 
+		text := <construct-text(pp, override-reconstruction, resugar)> elem; 
+		layout-before := <layout-prefix; correct-indentation(|elem)> elem;
+		indented-prefix-text := <conc-strings; adapt-indentation(|origin-node)> (layout-before, text); 
+		comments-after := <comments-after; correct-indentation(|elem); adapt-indentation(|origin-node)> elem;
 		separation := <origin-separation> origin-node;
 		layout-after := <create-separation-after> (separation, comments-after);
 		elem-text := <conc-strings> (indented-prefix-text, layout-after)
 
-construct-text-list-element-last(pp|origin-node):
+construct-text-list-element-last(pp, override-reconstruction, resugar|origin-node):
 	elem -> elem-text
 	where
-		text := <construct-text(pp)> elem;
-		layout-before := <layout-prefix> elem;
-		indented-prefix-text := <conc-strings; adapt-indentation(|origin-node, elem)> (layout-before, text);
-		comments-after := <comments-after; adapt-indentation(|origin-node, elem)> elem;
-		elem-text := <concat-strings> [indented-prefix-text, " ", comments-after]
+		text := <construct-text(pp, override-reconstruction, resugar)> elem;
+		layout-before := <layout-prefix; correct-indentation(|elem)> elem;
+		indented-prefix-text := <conc-strings; adapt-indentation(|origin-node)> (layout-before, text);
+		comments-after := <comments-after; correct-indentation(|elem); adapt-indentation(|origin-node)> elem;
+		elem-text := <concat-strings; trim-trailing-whitespace> [indented-prefix-text, " ", comments-after]
 
 
 rules //helper rules indentation
@@ -86,12 +86,18 @@
  * replaces indent of the new constructed text (retrieved from new-node)
  * with indent appropriate for insertion position (retrieved from origin-node) 
  */
-adapt-indentation(|origin-node, new-node):
+adapt-indentation(|origin-node):
 	text -> indented-text
-	where 
+	where
 		indent-string-new := <origin-indent> origin-node; 
-		indent-string-old := <origin-indent <+ !""> new-node;
-		indented-text := <replace-indentation(|indent-string-new, indent-string-old)> text
+		indented-text := <replace-indentation(|indent-string-new, "")> text
+
+correct-indentation(|origin-node):
+	txt -> indent-corrected-text
+	where
+		indent-string := <origin-indent <+ !""> origin-node;
+		indent-corrected-text := <replace-indentation(|"", indent-string)> txt
+
 		
 replace-indentation(|new-indent, old-indent):
 	text -> indented-text
@@ -178,7 +184,8 @@
 	where
 		<not(string-ends-with(|"\n"))> comments-after;
 		(start-separation, end-separation) := <split-before>(separation, "\n");
-		txt-between := <concat-strings> [start-separation, comments-after, end-separation]
+		comments-after-separated := <?"" <+ <conc-strings>(" ", <id>)> comments-after;
+		txt-between := <concat-strings> [start-separation, comments-after-separated, end-separation]
 
 //("  ", "/*bla*/") -> " /*bla*/  "
 //(",  ", "/*bla*/") -> " /*bla*/,  "
@@ -239,9 +246,10 @@
 	assert-valid-offset
 	
 assert-no-overlap:
-	txt-changes@[(_, end-offset, _), (start-offset, _, _)|_] -> txt-changes
+	txt-changes@[(start-offset, end-offset, _), (start-offset', _, _)|_] -> txt-changes
 	with
-		<leq> (end-offset, start-offset);
+		<lt> (start-offset, start-offset');
+		<leq> (end-offset, start-offset');
 		<at-tail(assert-no-overlap)> txt-changes
 		
 assert-no-overlap =

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str	Thu Sep 29 17:18:27 2011	(r23403)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str	Fri Sep 30 10:34:23 2011	(r23404)
@@ -12,7 +12,7 @@
 origin-term-fuzzy = prim("SSL_EXT_origin_term_fuzzy", <id>)
 
 origin-text   = origin-support-sublist(prim("SSL_EXT_origin_text", <id>))
-origin-offset = origin-support-sublist(prim("SSL_EXT_origin_offset", <id>)) //exclusive already in Spoofax. TODO: inclusive in Spoofax
+origin-offset = origin-support-sublist(prim("SSL_EXT_origin_offset", <id>)) 
 origin-indent = origin-support-sublist(prim("SSL_EXT_origin_indentation", <id>))
 origin-separation = origin-support-sublist(prim("SSL_EXT_origin_separation", <id>)) //only succeeds if list >=2 elems
 origin-layout-prefix = origin-support-sublist(prim("SSL_EXT_origin_layout_prefix", <id>))
@@ -50,10 +50,13 @@
 	where
 		origin-tracked-node := <!Some(<id>); all(!new-node); ?Some(<id>)> origin-node
 
+origin-track-forced(s) =
+	![<id>]; all(s); ?[<id>]
+
 rules //support default values for non-origin elements
 			
 TABSIZE = !4
-DEFAULT-INDENT = !"  "
+DEFAULT-INDENT = !"\t" //HACK: this is used in case multiline subterm texts are pretty-printed
 
 layout-prefix = origin-layout-prefix <+ !""
 comments-after = origin-comments-after <+ !""
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf	Thu Sep 29 17:18:27 2011	(r23403)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf	Fri Sep 30 10:34:23 2011	(r23404)
@@ -16,6 +16,9 @@
   	
   	"pp-table" ":" StrategoCall     -> SemanticRule {cons("PPTable"), deprecated("use 'pretty-print' instead")}
   	"pretty-print" ":" StrategoCall -> SemanticRule {cons("PrettyPrint")}
+ 	"parenthesize" ":" StrategoCall -> SemanticRule {cons("Parenthesize")}
+ 	"override" "reconstruction" ":" StrategoCall -> SemanticRule {cons("OverrideReconstruction")}
+ 	"resugar" ":" StrategoCall -> SemanticRule {cons("Resugar")}
 
     "refactoring" SemanticNode* ":" String "=" StrategoCall BuilderOption* UIOption* 
     								-> SemanticRule {cons("Refactoring")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Thu Sep 29 17:18:27 2011	(r23403)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Fri Sep 30 10:34:23 2011	(r23404)
@@ -112,12 +112,10 @@
 	private static Set<IRefactoring> collectRefactorings(Descriptor d, SGLRParseController controller) throws BadDescriptorException {
 		Set<IRefactoring> refactorings = new LinkedHashSet<IRefactoring>();
 		StrategoObserver feedback = d.createService(StrategoObserver.class, controller);
-		IStrategoAppl ppStrategyTerm = TermReader.findTerm(d.getDocument(), "PrettyPrint");
-		String ppStrategy = null;
-		if(ppStrategyTerm != null)
-			ppStrategy=termContents(termAt(ppStrategyTerm, 0));
-		else
-			ppStrategy = ("pp-" + d.getLanguage().getName() + "-string").toLowerCase();
+		String ppStrategy = getPPStrategy(d);
+		String parenthesize = getParenthesizeStrategy(d);
+		String overrideReconstruction = getOverrideReconstructionStrategy(d);
+		String resugar = getResugarStrategy(d);
 		for (IStrategoAppl aRefactoring : collectTerms(d.getDocument(), "Refactoring")) {
 			IStrategoTerm[] semanticNodes = termAt(aRefactoring,0).getAllSubterms();
 			String caption = termContents(termAt(aRefactoring, 1));
@@ -159,6 +157,9 @@
 						cursor, 
 						source, 
 						ppStrategy,
+						parenthesize,
+						overrideReconstruction,
+						resugar,
 						semanticNodes,
 						inputFields,
 						actionDefinitionId
@@ -168,7 +169,40 @@
 		}
 		return refactorings;
 	}
-	
+
+	public static String getPPStrategy(Descriptor d) throws BadDescriptorException {
+		String ppStrategy = getHelperStrategyName(d, "PrettyPrint");
+		if(ppStrategy == null)
+			ppStrategy = ("pp-" + d.getLanguage().getName() + "-string").toLowerCase();
+		return ppStrategy;
+	}
+
+	public static String getParenthesizeStrategy(Descriptor d) throws BadDescriptorException {
+		String parenthesizeStrategy = getHelperStrategyName(d, "Parenthesize");
+		if(parenthesizeStrategy == null)
+			parenthesizeStrategy = ("parenthesize-" + d.getLanguage().getName());
+		return parenthesizeStrategy;
+	}
+
+	public static String getOverrideReconstructionStrategy(Descriptor d) throws BadDescriptorException {
+		String overrideReconstructionStrategy = getHelperStrategyName(d, "OverrideReconstruction");
+		return overrideReconstructionStrategy;
+	}
+
+	public static String getResugarStrategy(Descriptor d) throws BadDescriptorException {
+		String resugarStrategy = getHelperStrategyName(d, "Resugar");
+		return resugarStrategy;
+	}
+
+	public static String getHelperStrategyName(Descriptor d, String strategyTermCons) {
+		IStrategoAppl strategyTerm = TermReader.findTerm(d.getDocument(), strategyTermCons);
+		String strategyName = null;
+		if(strategyTerm != null)
+			strategyName=termContents(termAt(strategyTerm, 0));
+		return strategyName;
+	}
+
+
 	private static String getKeyBinding(IStrategoTerm userInteractions) {
 		IStrategoTerm keybinding = TermReader.findTerm(userInteractions, "KeyBinding");
 		if(keybinding != null)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Thu Sep 29 17:18:27 2011	(r23403)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Fri Sep 30 10:34:23 2011	(r23404)
@@ -36,6 +36,7 @@
 import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.OriginAttachment;
 import org.strategoxt.imp.generator.construct_textual_change_1_0;
+import org.strategoxt.imp.generator.construct_textual_change_4_0;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
@@ -48,7 +49,13 @@
 	private final String actionDefinitionId;
 
 	private final String ppStrategy;
-	
+
+	private final String parenthesizeStrategy;
+
+	private final String overrideReconstructionStrategy;
+
+	private final String resugarStrategy;
+
 	private final StrategoObserver observer;
 
 	private final String caption;
@@ -106,11 +113,14 @@
 	}
 
 	public StrategoRefactoring(StrategoObserver observer, String caption, String builderRule,
-			boolean cursor, boolean source, String ppStrategy,
+			boolean cursor, boolean source, String ppStrategy, String parenthesize, String violatesHomomorphism, String resugar,
 			IStrategoTerm[] semanticNodes, ArrayList<StrategoRefactoringIdentifierInput> inputFields, String actionDefinitionId) {
 		this.cursor=cursor;
 		this.source=source;
-		this.ppStrategy=ppStrategy;
+		this.ppStrategy = ppStrategy;
+		this.parenthesizeStrategy = parenthesize;
+		this.overrideReconstructionStrategy = violatesHomomorphism;
+		this.resugarStrategy = resugar;
 		this.observer = observer;
 		this.caption = caption;
 		this.builderRule = builderRule;
@@ -173,7 +183,7 @@
 			textReplaceTerm = getTextReplacement(astChanges);
 			if (textReplaceTerm == null) {
 				observer.reportRewritingFailed();
-				String errorMessage = "Text-reconstruction unexpectedly fails, did you specify a valid pp-table?: \n"+ observer.getLog();
+				String errorMessage = "Text-reconstruction unexpectedly fails, did you specify a suitable pretty-print strategy?: \n"+ observer.getLog();
 				Environment.logException(errorMessage);
 				return RefactoringStatus.createFatalErrorStatus(errorMessage);
 			}
@@ -331,20 +341,27 @@
 	}
 	
 	private IStrategoTerm getTextReplacement(IStrategoTerm resultTuple) {
-		IStrategoTerm textreplace=construct_textual_change_1_0.instance.invoke(
+		IStrategoTerm textreplace=construct_textual_change_4_0.instance.invoke(
 				observer.getRuntime().getCompiledContext(), 
 				resultTuple, 
-				new Strategy() {
-					@Override
-					public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-						if (ppStrategy!=null)
-							return observer.invokeSilent(ppStrategy, current, getResource());
-						return null;
-					}
-				}
+				createStrategy(ppStrategy),
+				createStrategy(parenthesizeStrategy),
+				createStrategy(overrideReconstructionStrategy),
+				createStrategy(resugarStrategy)
 			);
 		return textreplace;
 	}
+
+	public Strategy createStrategy(final String sname) {
+		return new Strategy() {
+			@Override
+			public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+				if (sname!=null)
+					return observer.invokeSilent(sname, current, getResource());
+				return null;
+			}
+		};
+	}
 	
 	private TextFileChange createTextChange(IStrategoTerm originalTerm, IStrategoTerm textReplaceTerm) {
 		final int startLocation=Tools.asJavaInt(termAt(textReplaceTerm, 0));

From tobivollebregt at gmail.com  Fri Sep 30 15:01:09 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 30 Sep 2011 13:01:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23405 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/template unit-tests/templatelang
Message-ID: <20110930130109.B29E9CC10F@mx4.tudelft.nl>

Author: tvo
Date: Fri Sep 30 13:01:09 2011
New Revision: 23405
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23405&sc=1

Log:
TemplateLang fixes

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Fri Sep 30 10:34:23 2011	(r23404)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Fri Sep 30 13:01:09 2011	(r23405)
@@ -16,14 +16,14 @@
   test-templatelang-to-esv:
     (_, _, ast, _, _) -> Module(modulename, NoImports(), [Completions("", listOfCompletions)])
     with
-    	<?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), _)])])> ast;
-    	<?CompilationUnit([], [Package(_, [<template-module-to-esv>])]); alltd(String(double-quote))> ast => listOfCompletions
+      <?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), _)])])> ast;
+      <?CompilationUnit([], [Package(_, [<template-module-to-esv>])]); alltd(String(double-quote))> ast => listOfCompletions
 
 strategies
 
-	/** @type Module -> List(Completions) */
-	template-module-to-esv:
-		Module(_, _, section*) -> <template-sections-to-esv> section*
+  /** @type Module -> List(Completions) */
+  template-module-to-esv:
+    Module(_, _, section*) -> <template-sections-to-esv> section*
 
   /** @type List(TemplateSection) -> List(Completions) */
   template-sections-to-esv:
@@ -41,19 +41,19 @@
 
   /** @type TemplateSection -> List(CompletionTemplate) */
   template-section-to-esv:
-  	TemplateSection(prod*) -> completion*
-  	with
-  	  contracts(
-  	    // FIXME: remove TemplateProductionWithCons/3 when desugaring is performed before code generation.
-  	    contract-requires(ListOf(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _)) | prod*)
-  	  )
-  	with
-  	  // FIXME: desugaring should have been performed before the current strategy is invoked.
-  	  completion* := <templatelang-desugar-top; filter(template-to-completion-template)> prod*
-  	with
-  	  contracts(
-  	    contract-requires(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion*)
-  	  )
+    TemplateSection(prod*) -> completion*
+    with
+      contracts(
+        // FIXME: remove TemplateProductionWithCons/3 when desugaring is performed before code generation.
+        contract-requires(ListOf(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _)) | prod*)
+      )
+    with
+      // FIXME: desugaring should have been performed before the current strategy is invoked.
+      completion* := <templatelang-desugar-top; filter(template-to-completion-template)> prod*
+    with
+      contracts(
+        contract-requires(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion*)
+      )
 
 /*internal*/ strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Fri Sep 30 10:34:23 2011	(r23404)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Fri Sep 30 13:01:09 2011	(r23405)
@@ -4,7 +4,7 @@
   libstratego-sglr
   include/SpoofaxLang
 imports
-	common
+  common
   context/template/declare
   normalize/templatelang
   utils/annotations
@@ -31,7 +31,7 @@
   template-sections-to-sdf:
     section* -> sdf-section'*
     with
-    	contracts(
+      contracts(
         contract-requires(ListOf(?TemplateSection(_)) | section*)
       )
     with
@@ -41,7 +41,7 @@
     with
       contracts(
         contract-requires(ListOf(?context-free-syntax(_) + ?lexical-restrictions(_)) | sdf-section'*)
-    	)
+      )
 
 /*internal*/ strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Fri Sep 30 10:34:23 2011	(r23404)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Fri Sep 30 13:01:09 2011	(r23405)
@@ -6,8 +6,8 @@
   include/SpoofaxLang
 imports
   context/str/parse
-	context/template/declare
-	normalize/templatelang
+  context/template/declare
+  normalize/templatelang
   utils/sdf2conflicts
   utils/templatelang
 
@@ -54,8 +54,8 @@
     with
       // All sorts used in pp minus all sorts for which a pp strategy has been
       // created will get a `prettyprint-sort = is-string' default strategy.
-      sorts-used-in-pp := <collect-om(sort-used-in-prettyprinting); nub> section'*;
-      sorts-decl-in-pp := <collect-om(sort-decl-in-prettyprinting); nub> section'*;
+      sorts-used-in-pp := <collect-om(sort-used-in-prettyprinting); nub> section'*; // FIXME: global data
+      sorts-decl-in-pp := <collect-om(sort-decl-in-prettyprinting); nub> section'*; // FIXME: global data
       sorts-without-pp := <diff> (sorts-used-in-pp, sorts-decl-in-pp);
       strategy* := <map(sort-to-prettyprint-strategy); separate-by(|"\n\n")> sorts-without-pp
     with
@@ -98,16 +98,16 @@
 
   // Optimization for single-string-element templates
   template-to-prettyprint-strategy:
-    TemplateProduction(sort, Template([String(t)]), attr*) ->
+    TemplateProduction(sort, Template([String(t)]), attrs(attr*)) ->
     $[prettyprint-[sort]:
         [cons]() -> "[result]"]
     where
-      cons   := <collect-one(?sdf-cons(<un-double-quote>))> attr*
+      cons   := <getfirst(?sdf-cons(<un-double-quote>))> attr*
     with
       result := <templatelang-escape> t
 
   template-to-prettyprint-strategy:
-    TemplateProduction(sort, Template(elem*), attr*) ->
+    TemplateProduction(sort, Template(elem*), attrs(attr*)) ->
     <trim-chars(' ' + '\t' + '\r' + '\n')> // Workaround Stratego/856
     $[prettyprint-[sort]:
         [cons]([arg'*]) -> zz
@@ -116,7 +116,7 @@
     where
       not(!elem* => [String(_)])
     where
-      cons    := <collect-one(?sdf-cons(<un-double-quote>))> attr*
+      cons    := <getfirst(?sdf-cons(<un-double-quote>))> attr*
     with
       elem'*  := <try-re-indent;
                   !(<id>, 0);
@@ -132,19 +132,34 @@
                   separate-by(|", ")> elem'*;
       result  := <concat-strings>["zz := <concat-strings> [", part*, "]"];
       confl*  := <bagof-SubtermConflicts> Symbol(cons, <length> arg*);
-      if !confl* => [] then
-        let*  := <filter(template-element-to-prettyprint)> elem'*
-      else
-        let*  := <filter(?Placeholder(_, _, _, _));
-                  add-indices; map((dec, id));
-                  filter(template-element-to-parenthesize(|confl*))> elem'*
-      end;
+      // if !confl* => [] then
+        let*  := <filter(template-element-to-prettyprint)> elem'*;
+      // else
+      //   let*  := <filter(?Placeholder(_, _, _, _));
+      //             add-indices; map((dec, id));
+      //             filter(template-element-to-parenthesize(|confl*))> elem'*
+      // end;
       let'*   := <separate-by(|";\n")> [let*, result]
 
+  // Injection (no cons, no bracket, exactly one placeholder)
+  template-to-prettyprint-strategy:
+    TemplateProduction(sort, Template(elem*), attrs(attr*)) ->
+    $[prettyprint-[sort]:
+        a -> a'
+        with
+          [let']]
+    where
+      not(<getfirst(?sdf-cons(<un-double-quote>))> attr*);
+      not(<getfirst(?bracket())> attr*)
+    where
+      <one(?Placeholder(w, x, y, z))> elem*
+    with
+      let' := <template-element-to-prettyprint> Placeholder(w, x{"a"}, y, z)
+
   // Production without cons but with bracket annotation
   // (cons + bracket -> no need to parenthesize)
   template-to-prettyprint-strategy:
-    TemplateProduction(sort, Template(elem*), attr*) ->
+    TemplateProduction(sort, Template(elem*), attrs(attr*)) ->
     ${parenthesize-{sort}(not-allowed) =
         if not-allowed then
           <concat-strings> ["{open}", <prettyprint-{sort}>, "{close}"]
@@ -152,8 +167,8 @@
           prettyprint-{sort}
         end}
     where
-      not(<collect-one(?sdf-cons(<un-double-quote>))> attr*);
-      <collect-one(?bracket())> attr*
+      not(<getfirst(?sdf-cons(<un-double-quote>))> attr*);
+      <getfirst(?bracket())> attr*
     where
       <length> <filter(?Placeholder(_, _, _, _))> elem* => 1
       <+ debug(!"Bracket production must have exactly one placeholder: "); fail
@@ -204,7 +219,7 @@
   template-element-to-prettyprint:
     Placeholder(_, sort(x){name}, <Star() + Plus()>, Options(opt*)) -> t
     with
-      if sep := <collect-one(?Separator(<id>))> opt* then
+      if sep := <getfirst(?Separator(<id>))> opt* then
         t := $[[name]' := <pp-list(prettyprint-[x]|"[<escape> sep]")> [name]]
       else
         t := $[[name]' := <pp-list(prettyprint-[x]|" ")> [name]]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt	Fri Sep 30 13:01:09 2011	(r23405)
@@ -0,0 +1,16 @@
+module templatelang-to-str-3
+
+language SpoofaxLang
+target language Stratego-Sugar
+
+setup [[
+  package example
+  module example
+  templates
+]]
+
+test injection (1) [[ QId = <<<ID>>> ]]
+build test-templatelang-to-str succeeds
+
+test injection (2) [[ QId = <<#<ID>#>> ]]
+build test-templatelang-to-str succeeds

From m.dejonge at tudelft.nl  Fri Sep 30 16:11:59 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 30 Sep 2011 14:11:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23406 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime: .
	src/org/strategoxt/imp/runtime
	src/org/strategoxt/imp/runtime/services
Message-ID: <20110930141159.E095C7F8007@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Sep 30 14:11:58 2011
New Revision: 23406
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23406&sc=1

Log:
collecting editor scenarios

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/PreferenceInitializer.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SpoofaxPreferencePage.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Fri Sep 30 13:01:09 2011	(r23405)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Fri Sep 30 14:11:58 2011	(r23406)
@@ -337,5 +337,19 @@
             schemeId="org.eclipse.ui.defaultAcceleratorConfiguration"
             sequence="F3"/>
    </extension>
+   <extension
+         point="org.eclipse.ui.preferencePages">
+      <page
+            class="org.strategoxt.imp.runtime.SpoofaxPreferencePage"
+            id="org.strategoxt.imp.runtime.SpoofaxPreferencePage"
+            name="Spoofax Preferences">
+      </page>
+   </extension>
+   <extension
+         point="org.eclipse.core.runtime.preferences">
+      <initializer
+            class="org.strategoxt.imp.runtime.PreferenceInitializer">
+      </initializer>
+   </extension>
    
 </plugin>

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/PreferenceInitializer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/PreferenceInitializer.java	Fri Sep 30 14:11:58 2011	(r23406)
@@ -0,0 +1,23 @@
+package org.strategoxt.imp.runtime;
+
+import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
+import org.eclipse.jface.preference.IPreferenceStore;
+
+import org.strategoxt.imp.runtime.RuntimeActivator;
+
+/**
+ * Class used to initialize default preference values.
+ */
+public class PreferenceInitializer extends AbstractPreferenceInitializer {
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
+	 */
+	@Override
+	public void initializeDefaultPreferences() {
+		IPreferenceStore store = RuntimeActivator.getInstance().getPreferenceStore();
+		store.setDefault(SpoofaxPreferencePage.COLLECT_EDIT_SCENARIOS, false);
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SpoofaxPreferencePage.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SpoofaxPreferencePage.java	Fri Sep 30 14:11:58 2011	(r23406)
@@ -0,0 +1,45 @@
+package org.strategoxt.imp.runtime;
+
+import org.eclipse.jface.preference.*;
+import org.eclipse.ui.IWorkbenchPreferencePage;
+import org.eclipse.ui.IWorkbench;
+import org.strategoxt.imp.runtime.RuntimeActivator;
+
+/**
+ * 
+ */
+public class SpoofaxPreferencePage
+	extends FieldEditorPreferencePage
+	implements IWorkbenchPreferencePage {
+
+	public static final String COLLECT_EDIT_SCENARIOS = "collectEditScenariosPreference";
+
+	public SpoofaxPreferencePage() {
+		super(GRID);
+		setPreferenceStore(RuntimeActivator.getInstance().getPreferenceStore());
+		setDescription("Preferences for language development with Spoofax");
+	}
+	
+	/**
+	 * Creates the field editors. Field editors are abstractions of
+	 * the common GUI blocks needed to manipulate various types
+	 * of preferences. Each field editor knows how to save and
+	 * restore itself.
+	 */
+	@Override
+	public void createFieldEditors() {
+		addField(
+			new BooleanFieldEditor(
+				COLLECT_EDIT_SCENARIOS,
+				"&Collect Edit Scenarios",
+				getFieldEditorParent()));
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)
+	 */
+	public void init(IWorkbench workbench) {
+		//
+	}
+	
+}
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Fri Sep 30 13:01:09 2011	(r23405)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Fri Sep 30 14:11:58 2011	(r23406)
@@ -78,6 +78,8 @@
 	private boolean allowAutoRemoveFence;
 	
 	private Stack<Integer> lastAutoInsertionOpenFences = new Stack<Integer>();
+	
+	private EditScenarioCollector editScenarioCollector;
 
 	public AutoEditStrategy(ILanguageSyntaxProperties syntax) {
 		this.syntax = syntax;
@@ -97,6 +99,7 @@
 		
 		this.maxOpenFenceLength = maxOpenFenceLength;
 		this.maxCloseFenceLength = maxCloseFenceLength;
+		editScenarioCollector = new EditScenarioCollector();
 	}
 	
 	public void initialize(IParseController controller) {
@@ -118,8 +121,10 @@
 		try {
 			String input = new String(new char[] { event.character });
 			Point selection = getEditor().getSelection(); 
-			if(controller instanceof SGLRParseController)
+			if(controller instanceof SGLRParseController) {
 				((SGLRParseController)controller).getParser().setCursorLocation(selection.x);
+				editScenarioCollector.collectEditorFile(((SGLRParseController)controller).getCurrentAst());
+			}
 			ISourceViewer viewer = getEditor().getServiceControllerManager().getSourceViewer();
 			if (event.widget instanceof StyledText
 					&& indentAfterNewline(viewer, viewer.getDocument(), selection.x, selection.y, input)) {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java	Fri Sep 30 14:11:58 2011	(r23406)
@@ -0,0 +1,223 @@
+package org.strategoxt.imp.runtime.services;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.util.UUID;
+
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.jface.preference.IPreferenceStore;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.strategoxt.imp.runtime.RuntimeActivator;
+import org.strategoxt.imp.runtime.SpoofaxPreferencePage;
+import org.strategoxt.imp.runtime.stratego.SourceAttachment;
+
+public class EditScenarioCollector {
+	
+	private int editNumber;
+	private String editSession;
+	private ITokenizer oldTokens;
+	
+	public EditScenarioCollector(){
+		oldTokens = null;
+		editNumber = 1;
+		editSession = UUID.randomUUID().toString();
+	}
+	
+	public void collectEditorFile(IStrategoTerm parseResult) {
+		IPreferenceStore store = RuntimeActivator.getInstance().getPreferenceStore();
+		if(!store.getBoolean(SpoofaxPreferencePage.COLLECT_EDIT_SCENARIOS)){
+			return;
+		}
+		
+		final ITokenizer tokens = ImploderAttachment.getTokenizer(parseResult);
+		if (hasTokenChanges(tokens, oldTokens)) {
+			int editDistance = editDistance(tokens, oldTokens);
+			int nrOfSyntaxErrors = countSyntaxErrors(tokens);
+			final IResource resource = SourceAttachment.getResource(parseResult);
+			if (resource == null)
+				return;
+			String editNumberString = ""+editNumber;
+			for (int i = editNumberString.length(); i < 5; i++) {
+				editNumberString = "0" + editNumberString;
+			}
+			final String fileName = "edit_" + editNumberString + "_err_" + nrOfSyntaxErrors + "_dist_"+ editDistance + "." + resource.getFileExtension();
+			final IPath projectPath = resource.getProject().getLocation();
+			final IPath editSessionPath = projectPath.append("edit-scenarios").append(editSession);
+			try {
+				if (!editSessionPath.toFile().exists()) {
+					editSessionPath.toFile().mkdirs();
+				}
+				IPath filePath = editSessionPath.append(fileName).removeTrailingSeparator();
+				File file = filePath.toFile();
+				assert (!file.exists());
+				file.createNewFile();
+				PrintStream prs = new PrintStream(file);
+				prs.print(tokens.getInput());
+				prs.close();
+			} catch (FileNotFoundException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+			oldTokens = tokens;
+			editNumber ++;
+		}
+	}
+
+	public int countSyntaxErrors(final ITokenizer tokens) {
+		int nrOfSyntaxErrors = 0;
+		for (int i = 0; i < tokens.getTokenCount(); i++) {
+			String error = tokens.getTokenAt(i).getError();
+			if (error != null && !error.startsWith(ITokenizer.ERROR_WARNING_PREFIX)) {
+				nrOfSyntaxErrors += 1;
+			}
+		}
+		return nrOfSyntaxErrors;
+	}
+
+	public boolean hasTokenChanges(ITokenizer tokens, ITokenizer oldTokens) {
+		if(tokens == null)
+			return false;
+		if(oldTokens == null)
+			return true;
+		int tokIndex = 0;
+		int oldTokIndex = 0;
+		while (tokIndex < tokens.getTokenCount() && oldTokIndex < oldTokens.getTokenCount()) {
+			oldTokIndex = skipLayoutTokens(oldTokens, oldTokIndex);
+			tokIndex = skipLayoutTokens(tokens, tokIndex);
+			assert(tokIndex < tokens.getTokenCount() && oldTokIndex < oldTokens.getTokenCount());
+			if (oldTokens.getTokenAt(oldTokIndex).getKind() == tokens.getTokenAt(tokIndex).getKind()){
+				tokIndex ++; 
+				oldTokIndex++;
+			}
+			else{
+				return true;
+			}
+		}
+		return !isLayoutSuffix(tokens, tokIndex) || !isLayoutSuffix(oldTokens, oldTokIndex); 
+	}
+	
+	public int editDistance(ITokenizer tokens, ITokenizer oldTokens){
+		if(tokens == null || oldTokens == null){
+			return -1;
+		}
+		String input = tokens.getInput().replaceAll("[ \t\n\f\r]+", "");
+		String inputOld = oldTokens.getInput().replaceAll("[ \t\n\f\r]+", "");
+		int startIndexDiff = 0;
+		while(
+			startIndexDiff < input.length() && 
+			startIndexDiff < inputOld.length() &&
+			input.charAt(startIndexDiff) == inputOld.charAt(startIndexDiff)
+		){
+			startIndexDiff++;
+		}		
+		int endIndexDiff = input.length()-1;
+		int endIndexDiffOld = inputOld.length()-1;
+		while(
+			endIndexDiff >= startIndexDiff && 
+			endIndexDiffOld >= startIndexDiff &&
+			input.charAt(endIndexDiff) == inputOld.charAt(endIndexDiffOld)
+		){
+			endIndexDiff--;
+			endIndexDiffOld--;
+		}
+		return Math.max(endIndexDiff - startIndexDiff, endIndexDiffOld - startIndexDiff) + 1;
+	}
+	
+
+	/*
+	public int editDistance(ITokenizer tokens, ITokenizer oldTokens){
+		if(tokens == null || oldTokens == null)
+			return -1;
+		
+		//Find DiffStart
+		int tokIndex = 0;
+		int oldTokIndex = 0;
+		int diffStart = -1;
+		int oldDiffStart = -1;		
+		while (tokIndex < tokens.getTokenCount() && oldTokIndex < oldTokens.getTokenCount()) {
+			oldTokIndex = skipLayoutTokens(oldTokens, oldTokIndex);
+			tokIndex = skipLayoutTokens(tokens, tokIndex);
+			assert(tokIndex < tokens.getTokenCount() && oldTokIndex < oldTokens.getTokenCount());
+			if (oldTokens.getTokenAt(oldTokIndex).toString().equals(tokens.getTokenAt(tokIndex).toString())){
+			//if (oldTokens.getTokenAt(oldTokIndex).getKind() == tokens.getTokenAt(tokIndex).getKind()){
+				tokIndex ++; 
+				oldTokIndex++;
+			}
+			else{
+				diffStart = tokIndex;
+				oldDiffStart = oldTokIndex;
+				break;
+			}
+		}
+		if(diffStart == -1){
+			assert(oldDiffStart == -1);
+			diffStart = skipLayoutTokens(tokens, tokIndex);
+			oldDiffStart = skipLayoutTokens(oldTokens, oldTokIndex);
+		}		
+		
+		//Find Diff End
+		int diffEnd = diffStart;
+		int oldDiffEnd = oldDiffStart;
+		tokIndex = tokens.getTokenCount()-1;
+		oldTokIndex = oldTokens.getTokenCount()-1;
+		while (tokIndex >= diffStart && oldTokIndex >= oldDiffStart) {
+			oldTokIndex = skipLayoutTokensBackWards(oldTokens, oldTokIndex);
+			tokIndex = skipLayoutTokensBackWards(tokens, tokIndex);
+			assert(tokIndex >= 0 && oldTokIndex >=0);
+			if (oldTokens.getTokenAt(oldTokIndex).toString().equals(tokens.getTokenAt(tokIndex).toString())){
+			//if (oldTokens.getTokenAt(oldTokIndex).getKind() == tokens.getTokenAt(tokIndex).getKind()){
+				tokIndex --; 
+				oldTokIndex--;
+			}
+			else{
+				diffEnd = tokIndex;
+				oldDiffEnd = oldTokIndex;
+				break;
+			}
+		}
+		
+		//Return edit distance defined as ... 
+		return Math.max(diffEnd-diffStart, oldDiffEnd-oldDiffStart) + 1;
+	}*/
+	
+	public int skipLayoutTokens(ITokenizer tokens, int tokIndex) {
+		while (
+				tokIndex < tokens.getTokenCount()-1 &&
+				(
+					tokens.getTokenAt(tokIndex).getKind() == IToken.TK_LAYOUT 
+					//|| tokens.getTokenAt(tokIndex).getEndOffset()<= tokens.getTokenAt(tokIndex).getStartOffset()
+				)
+			){
+			tokIndex ++;
+		}
+		return tokIndex;
+	}
+
+	public int skipLayoutTokensBackWards(ITokenizer tokens, int tokIndex) {
+		while (
+			tokIndex > 0 && (
+				tokens.getTokenAt(tokIndex).getKind() == IToken.TK_LAYOUT) 
+				//|| tokens.getTokenAt(tokIndex).getEndOffset()<= tokens.getTokenAt(tokIndex).getStartOffset()
+		){
+			tokIndex --;
+		}
+		return tokIndex;
+	}
+
+	public boolean isLayoutSuffix(final ITokenizer tokens, int tokIndex) {
+		while(tokIndex < tokens.getTokenCount()){
+			if(tokens.getTokenAt(tokIndex).getKind() != IToken.TK_LAYOUT && tokens.getTokenAt(tokIndex).getKind() != IToken.TK_EOF)
+				return false;
+		}
+		return true;
+	}
+}

From m.dejonge at tudelft.nl  Fri Sep 30 19:10:07 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 30 Sep 2011 17:10:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23407 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime: . META-INF
	src/org/strategoxt/imp/runtime/services
Message-ID: <20110930171007.2DE3CCC26E@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Sep 30 17:10:06 2011
New Revision: 23407
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23407&sc=1

Log:
Refactorings moved to context menu

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringContributionFactory.java   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/.classpath	Fri Sep 30 14:11:58 2011	(r23406)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/.classpath	Fri Sep 30 17:10:06 2011	(r23407)
@@ -1,8 +1,8 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
-	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="test"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="test"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Fri Sep 30 14:11:58 2011	(r23406)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Fri Sep 30 17:10:06 2011	(r23407)
@@ -24,7 +24,8 @@
  org.strategoxt.imp.spoofax.generator,
  org.spoofax.terms,
  org.strategoxt.strj,
- org.strategoxt.imp.debug.core
+ org.strategoxt.imp.debug.core,
+ org.eclipse.core.expressions;bundle-version="3.4.200"
 Export-Package: org.strategoxt.imp.runtime,
  org.strategoxt.imp.runtime.dynamicloading,
  org.strategoxt.imp.runtime.parser,

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Fri Sep 30 14:11:58 2011	(r23406)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Fri Sep 30 17:10:06 2011	(r23407)
@@ -275,13 +275,6 @@
                toolbarPath="spoofax"
                tooltip="Apply transformation to file in current editor"/>
                <!-- TODO: icon="icons/builder.png" -->
-         <action
-               class="org.strategoxt.imp.runtime.services.RefactoringButtonDelegate"
-               id="org.strategoxt.imp.runtime.stratego.refactoring"
-               label="Refactor"
-               style="pulldown"
-               toolbarPath="spoofax"
-               tooltip="Apply refactoring to file in current editor"/>
       </actionSet>
    </extension>
    <extension
@@ -351,5 +344,13 @@
             class="org.strategoxt.imp.runtime.PreferenceInitializer">
       </initializer>
    </extension>
+   <extension
+         point="org.eclipse.ui.menus">
+      <menuContribution
+            allPopups="true"
+            class="org.strategoxt.imp.runtime.services.RefactoringContributionFactory"
+            locationURI="popup:org.eclipse.ui.popup.any?before=additions">
+      </menuContribution>
+   </extension>
    
 </plugin>

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringContributionFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringContributionFactory.java	Fri Sep 30 17:10:06 2011	(r23407)
@@ -0,0 +1,53 @@
+package org.strategoxt.imp.runtime.services;
+
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.jface.action.IAction;
+import org.eclipse.jface.action.MenuManager;
+import org.eclipse.jface.dialogs.ErrorDialog;
+import org.eclipse.ui.menus.ExtensionContributionFactory;
+import org.eclipse.ui.menus.IContributionRoot;
+import org.eclipse.ui.services.IServiceLocator;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.RuntimeActivator;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+
+public class RefactoringContributionFactory extends ExtensionContributionFactory {
+	
+	public RefactoringContributionFactory() {
+		// TODO Auto-generated constructor stub
+	}
+
+	@Override
+	public void createContributionItems(IServiceLocator serviceLocator, IContributionRoot additions) {
+		final EditorState editor = EditorState.getActiveEditor();
+		if (editor == null) return;
+		IRefactoringMap refactorings = getRefactorings(editor);
+		if (refactorings.getAll().size() == 0) return;
+		MenuManager submenu = new MenuManager("Refactor");
+		additions.addContributionItem(submenu, null);		
+		for (final IRefactoring refactoring : refactorings.getAll()) {
+			IAction action = refactoring.getAction();
+			action.setEnabled(refactoring.isDefinedOnSelection(editor));
+			submenu.add(action);
+		}
+	}
+	
+	private IRefactoringMap getRefactorings(EditorState editor) {
+		IRefactoringMap refactorings;
+		try {
+			refactorings = editor.getDescriptor().createService(IRefactoringMap.class, editor.getParseController());
+		} catch (BadDescriptorException e) {
+			Environment.logException("Could not load refactorings", e);
+			openError("Could not load refactorings");
+			throw new RuntimeException(e);
+		}
+		return refactorings;
+	}
+
+	protected void openError(String message) {
+		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
+		ErrorDialog.openError(null, "Spoofax/IMP builder", null, status);
+	}
+}

