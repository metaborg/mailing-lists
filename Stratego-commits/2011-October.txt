From tobivollebregt at gmail.com  Sun Oct  2 14:13:13 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Sun, 02 Oct 2011 12:13:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23408 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/template unit-tests/templatelang
Message-ID: <20111002121313.B4F9A2B8023@mx2.tudelft.nl>

Author: tvo
Date: Sun Oct  2 12:13:13 2011
New Revision: 23408
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23408&sc=1

Log:
TemplateLang: Remove pointless complexity from pretty printer generator.

(Why would generated pretty printer differ depending on where newlines are put in generated SDF???)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Fri Sep 30 17:10:06 2011	(r23407)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Sun Oct  2 12:13:13 2011	(r23408)
@@ -40,7 +40,8 @@
         pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
         pp-list(s|t) = map(s); separate-by(|t); concat-strings
 
-        [ih]
+        // ih = indent helper, t = indent string
+        pp-ih(|t) = ?"" <+ all-lines(<conc-strings>(t, <id>)); <conc-strings> (<id>, "\n")
 
       [section''*]
 
@@ -58,22 +59,6 @@
       sorts-decl-in-pp := <collect-om(sort-decl-in-prettyprinting); nub> section'*; // FIXME: global data
       sorts-without-pp := <diff> (sorts-used-in-pp, sorts-decl-in-pp);
       strategy* := <map(sort-to-prettyprint-strategy); separate-by(|"\n\n")> sorts-without-pp
-    with
-      ih := <newlines-switch(
-        // No newlines: need to prepend a newline+indent if the string is non-empty.
-        !$[// ih = indent helper, t = indent string (including "\n")
-           pp-ih(|t) = ?"" <+ string-replace(|"\n", t); <conc-strings> (t, <id>)],
-        // Leading newlines: easy, since indent is (per definition) also leading.
-        !$[// ih = indent helper, t = indent string (including "\n")
-           pp-ih(|t) = ?"" <+
-             string-replace(|"\n", t);
-             if not(string-starts-with(|t)) then
-               <conc-strings> (t, <id>)
-             end],
-        // Trailing newlines: harder, since indent and newline are separated.
-        !$[// ih = indent helper, t = indent string (excluding "\n")
-           pp-ih(|t) = ?"" <+ all-lines(<conc-strings>(t, <id>))]
-      )>
 
   template-section-to-stratego-string:
     TemplateSection(prod*) ->
@@ -124,8 +109,11 @@
                   ?(<id>, _)> elem*;
       arg*    := <filter(template-element-to-cons-arg)> elem'*;
       arg'*   := <separate-by(|", ")> arg*;
-      part*   := <newlines-switch(trim-layout, trim-trailing-layout,
-                                  trim-leading-layout ; trim-trailing-indent);
+      part*   := <try(\[Newline(_) | tail] -> tail\); // strip first newline, but KEEP INDENT!
+                  // FIXME: might want to replace Newline,Indent with Newline, thereby
+                  //        making multi-line templates implicitly newline-separated.
+                  try(at-suffix(\[Newline(t), Indent(_)] -> [/*Newline(t)*/]\)); // strip last newline
+                  trim-trailing-layout;
                   listtd(template-element-to-stratego);
                   concatenate-consecutive-strings;
                   map(try(?String(<templatelang-escape; double-quote>)));
@@ -146,7 +134,7 @@
     TemplateProduction(sort, Template(elem*), attrs(attr*)) ->
     $[prettyprint-[sort]:
         a -> a'
-        with
+        where
           [let']]
     where
       not(<getfirst(?sdf-cons(<un-double-quote>))> attr*);
@@ -189,18 +177,8 @@
     Placeholder(_, sort(_){name}, _, _) -> name
 
   template-element-to-stratego =
-    newlines-switch(
-      // No newlines
-      \[Newline(_), Indent(indent), Placeholder(_, sort(_){name}, _, _){Blank()} | tail] ->
-        [$[<pp-ih(|"\n[indent]")> [name]'] | tail]\,
-      // Leading newlines
-      \[Newline(_), Indent(indent), Placeholder(_, sort(_){name}, _, _){Blank()} | tail] ->
-        [$[<pp-ih(|"\n[indent]")> [name]'] | tail]\,
-      // Trailing newlines
-      \[Indent(indent), Placeholder(_, sort(_){name}, _, _){Blank()}, Newline(_) | tail] ->
+      \[Indent(indent), Placeholder(_, sort(_){name}, _, _), Newline(_) | tail] ->
         [$[<pp-ih(|"[indent]")> [name]'] | tail]\
-    )
-    // Anything else.
     <+
       [template-element-to-stratego' | id]
     <+

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Fri Sep 30 17:10:06 2011	(r23407)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Sun Oct  2 12:13:13 2011	(r23408)
@@ -7,11 +7,14 @@
 //        input, instead of testing the exact form of the generated stratego code.
 //        This is currently not really possible, however ...
 
+// TODO: All tests are now equal, remove the duplicates?
+
 setup common input [[
   package example
   module example
   templates
     Statement.IfThen = <<
+      <MetaAnno*; separator="\n">
       if <Exp> then
         <Statement*; separator="\n">
       end
@@ -25,6 +28,8 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
+    pp-ih(|t) = ?"" <+ all-lines(<conc-strings>(t, <id>)); <conc-strings> (<id>, "\n")
+  strategies
 ]]
 
 test no newlines [[
@@ -32,13 +37,12 @@
     newlines : none
 ]]
 build test-templatelang-to-str to [[
-    pp-ih(|t) = ?"" <+ string-replace(|"\n", t); <conc-strings> (t, <id>)
-
-  strategies
-	  prettyprint-Statement: IfThen(a, b) -> zz
-	  with a' := <prettyprint-Exp> a;
-	       b' := <pp-list(prettyprint-Statement|"\n")> b;
-	       zz := <concat-strings> ["if ", a', " then", <pp-ih(|"\n  ")> b', "\nend"]
+  prettyprint-Statement: IfThen(a, b, c) -> zz
+    with
+      a' := <pp-list(prettyprint-MetaAnno|"\n")> a;
+      b' := <prettyprint-Exp> b;
+      c' := <pp-list(prettyprint-Statement|"\n")> c;
+      zz := <concat-strings> [<pp-ih(|"")> a', "if ", b', " then\n", <pp-ih(|"  ")> c', "end"]
 ]]
 
 test leading newlines [[
@@ -46,17 +50,12 @@
     newlines : leading
 ]]
 build test-templatelang-to-str to [[
-    pp-ih(|t) = ?"" <+
-      string-replace(|"\n", t);
-      if not(string-starts-with(|t)) then
-        <conc-strings> (t, <id>)
-      end
-
-  strategies
-    prettyprint-Statement: IfThen(a, b) -> zz
-    with a' := <prettyprint-Exp> a;
-         b' := <pp-list(prettyprint-Statement|"\n")> b;
-         zz := <concat-strings> ["\nif ", a', " then", <pp-ih(|"\n  ")> b', "\nend"]
+  prettyprint-Statement: IfThen(a, b, c) -> zz
+    with
+      a' := <pp-list(prettyprint-MetaAnno|"\n")> a;
+      b' := <prettyprint-Exp> b;
+      c' := <pp-list(prettyprint-Statement|"\n")> c;
+      zz := <concat-strings> [<pp-ih(|"")> a', "if ", b', " then\n", <pp-ih(|"  ")> c', "end"]
 ]]
 
 test trailing newlines [[
@@ -64,16 +63,16 @@
     newlines : trailing
 ]]
 build test-templatelang-to-str to [[
-    pp-ih(|t) = ?"" <+ all-lines(<conc-strings>(t, <id>))
-
-  strategies
-    prettyprint-Statement: IfThen(a, b) -> zz
-    with a' := <prettyprint-Exp> a;
-         b' := <pp-list(prettyprint-Statement|"\n")> b;
-         zz := <concat-strings> ["if ", a', " then\n", <pp-ih(|"  ")> b', "end\n"]
+  prettyprint-Statement: IfThen(a, b, c) -> zz
+    with
+      a' := <pp-list(prettyprint-MetaAnno|"\n")> a;
+      b' := <prettyprint-Exp> b;
+      c' := <pp-list(prettyprint-Statement|"\n")> c;
+      zz := <concat-strings> [<pp-ih(|"")> a', "if ", b', " then\n", <pp-ih(|"  ")> c', "end"]   
 ]]
 
 target setup footer [[
   strategies
+    prettyprint-MetaAnno = is-string
     prettyprint-Exp = is-string
 ]]

From tobivollebregt at gmail.com  Sun Oct  2 17:32:34 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Sun, 02 Oct 2011 15:32:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23409 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/template unit-tests/templatelang
Message-ID: <20111002153234.618CCCC5A1@mx4.tudelft.nl>

Author: tvo
Date: Sun Oct  2 15:32:32 2011
New Revision: 23409
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23409&sc=1

Log:
TemplateLang fixes

* Indentation of placeholder at end of template went wrong
* Too much newlines were added after placeholder at end of template

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Sun Oct  2 12:13:13 2011	(r23408)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Sun Oct  2 15:32:32 2011	(r23409)
@@ -39,9 +39,9 @@
 
         pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
         pp-list(s|t) = map(s); separate-by(|t); concat-strings
-
+        pp-guarantee-newline = string-ends-with(|"\n") <+ <conc-strings> (<id>, "\n")
         // ih = indent helper, t = indent string
-        pp-ih(|t) = ?"" <+ all-lines(<conc-strings>(t, <id>)); <conc-strings> (<id>, "\n")
+        pp-ih(|t) = ?"" <+ prefix-lines(|t); pp-guarantee-newline
 
       [section''*]
 
@@ -180,6 +180,10 @@
       \[Indent(indent), Placeholder(_, sort(_){name}, _, _), Newline(_) | tail] ->
         [$[<pp-ih(|"[indent]")> [name]'] | tail]\
     <+
+      // At the end, the Newline(_) may have been stripped.
+      \[Indent(indent), Placeholder(_, sort(_){name}, _, _)] ->
+        [$[<pp-ih(|"[indent]")> [name]']]\
+    <+
       [template-element-to-stratego' | id]
     <+
       []

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Sun Oct  2 12:13:13 2011	(r23408)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Sun Oct  2 15:32:32 2011	(r23409)
@@ -20,7 +20,8 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
-    pp-ih(|t) = ?"" <+ string-replace(|"\n", t); <conc-strings> (t, <id>)
+    pp-guarantee-newline = string-ends-with(|"\n") <+ <conc-strings> (<id>, "\n")
+    pp-ih(|t) = ?"" <+ prefix-lines(|t); pp-guarantee-newline
   strategies
     prettyprint-X: Y(a) -> zz with
       // The strategies invoked here differ per test

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Sun Oct  2 12:13:13 2011	(r23408)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Sun Oct  2 15:32:32 2011	(r23409)
@@ -28,7 +28,8 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
-    pp-ih(|t) = ?"" <+ all-lines(<conc-strings>(t, <id>)); <conc-strings> (<id>, "\n")
+    pp-guarantee-newline = string-ends-with(|"\n") <+ <conc-strings> (<id>, "\n")
+    pp-ih(|t) = ?"" <+ prefix-lines(|t); pp-guarantee-newline
   strategies
 ]]
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt	Sun Oct  2 12:13:13 2011	(r23408)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt	Sun Oct  2 15:32:32 2011	(r23409)
@@ -9,8 +9,52 @@
   templates
 ]]
 
+target setup header [[
+  module prettyprinter
+  imports
+    libstratego-lib
+  strategies
+    pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
+    pp-list(s|t) = map(s); separate-by(|t); concat-strings
+    pp-guarantee-newline = string-ends-with(|"\n") <+ <conc-strings> (<id>, "\n")
+    pp-ih(|t) = ?"" <+ prefix-lines(|t); pp-guarantee-newline
+  strategies
+]]
+
 test injection (1) [[ QId = <<<ID>>> ]]
 build test-templatelang-to-str succeeds
 
 test injection (2) [[ QId = <<#<ID>#>> ]]
 build test-templatelang-to-str succeeds
+
+test indentation of placeholder at end of template [[
+  Start.Configuration = <<
+    configuration
+      <Setting*; separator="\n">
+  >>
+]]
+build test-templatelang-to-str to [[
+  prettyprint-Start :
+    Configuration(a) -> zz
+    with a' := <pp-list(prettyprint-Setting|"\n")> a
+         ; zz := <concat-strings> ["configuration\n", <pp-ih(|"  ")> a']
+]]
+
+// silly test; there might be a real use case though
+test indentation of placeholder at start of template [[
+  Start.Configuration = <<
+      <Setting*; separator="\n">
+    configuration
+  >>
+]]
+build test-templatelang-to-str to [[
+  prettyprint-Start :
+    Configuration(a) -> zz
+    with a' := <pp-list(prettyprint-Setting|"\n")> a
+         ; zz := <concat-strings> [<pp-ih(|"  ")> a', "configuration"]
+]]
+
+target setup footer [[
+  strategies
+    prettyprint-Setting = is-string        
+]]

From L.C.L.Kats at tudelft.nl  Mon Oct  3 10:02:59 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 03 Oct 2011 08:02:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23410 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.sdf/trans
	org.strategoxt.imp.editors.spoofax/trans/analyze/sdf
Message-ID: <20111003080259.E6BFC7F8096@mx1.tudelft.nl>

Author: LennartKats
Date: Mon Oct  3 08:02:58 2011
New Revision: 23410
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23410&sc=1

Log:
Warning for pitfall: constructors in lexical syntax

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Sun Oct  2 15:32:32 2011	(r23409)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Mon Oct  3 08:02:58 2011	(r23410)
@@ -17,8 +17,8 @@
       editor-init;
       analyze-ast;
       // We only collect-om since we don't want inner warning dupes
-      error*   := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-error)>), conc)> ast;
-      warning* := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-warning)>), conc)> ast;
+      error*   := <collect-om(fetch-sdf-errors, conc)> ast;
+      warning* := <collect-om(fetch-sdf-warnings, conc)> ast;
       if <file-exists> $[[project-path]/.disable-global-analysis] then
         serror* := []
       else
@@ -32,6 +32,14 @@
         warning'* := warning*
       end
 
+  fetch-sdf-errors =
+    ?context-free-syntax(<collect-om(context-free-syntax-error)>)
+  + ?lexical-syntax(<collect-om(lexical-syntax-error)>)
+  
+  fetch-sdf-warnings =
+    ?context-free-syntax(<collect-om(context-free-syntax-warning)>)
+  + ?lexical-syntax(<collect-om(lexical-syntax-warning)>)
+
   editor-complete:
     (node, position, ast, path, project-path) -> proposals
     where
@@ -65,6 +73,8 @@
   context-free-syntax-sort-error:
     'sorts(_) -> [] // ignored
 
+  lexical-syntax-error = fail
+
 rules // Local checks
 
   context-free-syntax-warning:
@@ -88,6 +98,9 @@
     t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Single argument expected for {cons("Name")} attribute])
     where
       not(<length> a* => 1)
+  
+  lexical-syntax-warning:
+    t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Constructor only expected in context-free syntax])
 
   context-free-syntax-warning:
     t @ term(default(annotated(_, _))) -> (t, $[Use round parentheses () for attribute arguments])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Sun Oct  2 15:32:32 2011	(r23409)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Mon Oct  3 08:02:58 2011	(r23410)
@@ -29,12 +29,14 @@
 		with
 	    // We only collect-om since we don't want inner warning dupes
 	    error*   := <flatten-list><collect-om( ?context-free-syntax       (<collect-om(context-free-syntax-error)>)
+                                           + ?lexical-syntax            (<collect-om(lexical-syntax-error)>)
 	    																		 + ?context-free-start-symbols(<collect-om(context-free-start-symbols-error)>)
 	    																		 + ?kernel-start-symbols      (<collect-om(context-free-start-symbols-error)>)
 	    																		 + ?lexical-start-symbols     (<collect-om(context-free-start-symbols-error)>)		
 	                                         + ?TemplateSection           (<collect-om(context-free-templates-error)>), conc)
 	                              > ast;
 	    warning* := <collect-om( ?context-free-syntax (<collect-om(context-free-syntax-warning)>)
+                             + ?lexical-syntax      (<collect-om(lexical-syntax-warning)>)
 	    											 + ?TemplateSection     (<collect-om(context-free-templates-warning)>), conc)
 	    						> ast;
 	    if <file-exists> $[[<get-project-path>]/.disable-global-analysis] then
@@ -105,6 +107,8 @@
 		s at sort(x) -> (s, $[Unknown Start Symbol :  "[x]". Please specify it as a Start Symbol in Language Description(esv)])
 		where 
 			<not(fetch-elem(?Sort(x)))>start-symbols-found-in-esv-def 	
+  
+  lexical-syntax-error = fail
    
 rules // Local checks
 	
@@ -130,6 +134,9 @@
     t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Single argument expected for {cons("Name")} attribute])
     where
       not(<length> a* => 1)
+  
+  lexical-syntax-warning:
+    t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Constructor only expected in context-free syntax])
 
   context-free-syntax-warning:
     t @ term(default(annotated(_, _))) -> (t, $[Use round parentheses () for attribute arguments])

From L.C.L.Kats at tudelft.nl  Mon Oct  3 10:03:23 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 03 Oct 2011 08:03:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23411 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111003080323.22D6B2B8012@mx2.tudelft.nl>

Author: LennartKats
Date: Mon Oct  3 08:03:22 2011
New Revision: 23411
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23411&sc=1

Log:
Better error message if AST is null

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Mon Oct  3 08:02:58 2011	(r23410)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Mon Oct  3 08:03:22 2011	(r23411)
@@ -178,7 +178,7 @@
 		try {
 			try {
 				if (node == null) {
-					openError(editor, "Editor is still analyzing");
+					openError(editor, "Editor is still parsing or analyzing");
 					return;
 				}
 				

From m.dejonge at tudelft.nl  Mon Oct  3 10:40:15 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 03 Oct 2011 08:40:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23412 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111003084015.B5E69CC219@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Oct  3 08:40:15 2011
New Revision: 23412
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23412&sc=1

Log:
store cursor loc in scenario name

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Mon Oct  3 08:03:22 2011	(r23411)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Mon Oct  3 08:40:15 2011	(r23412)
@@ -123,7 +123,7 @@
 			Point selection = getEditor().getSelection(); 
 			if(controller instanceof SGLRParseController) {
 				((SGLRParseController)controller).getParser().setCursorLocation(selection.x);
-				editScenarioCollector.collectEditorFile(((SGLRParseController)controller).getCurrentAst());
+				editScenarioCollector.collectEditorFile(((SGLRParseController)controller).getCurrentAst(), selection.x);
 			}
 			ISourceViewer viewer = getEditor().getServiceControllerManager().getSourceViewer();
 			if (event.widget instanceof StyledText

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java	Mon Oct  3 08:03:22 2011	(r23411)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java	Mon Oct  3 08:40:15 2011	(r23412)
@@ -25,11 +25,15 @@
 	
 	public EditScenarioCollector(){
 		oldTokens = null;
+		startNewEditSession();
+	}
+
+	public void startNewEditSession() {
 		editNumber = 1;
 		editSession = UUID.randomUUID().toString();
 	}
 	
-	public void collectEditorFile(IStrategoTerm parseResult) {
+	public void collectEditorFile(IStrategoTerm parseResult, int cursorLoc) {
 		IPreferenceStore store = RuntimeActivator.getInstance().getPreferenceStore();
 		if(!store.getBoolean(SpoofaxPreferencePage.COLLECT_EDIT_SCENARIOS)){
 			return;
@@ -46,7 +50,7 @@
 			for (int i = editNumberString.length(); i < 5; i++) {
 				editNumberString = "0" + editNumberString;
 			}
-			final String fileName = "edit_" + editNumberString + "_err_" + nrOfSyntaxErrors + "_dist_"+ editDistance + "." + resource.getFileExtension();
+			final String fileName = "edit_" + editNumberString + "_err_" + nrOfSyntaxErrors + "_dist_"+ editDistance + "_cursor_" + cursorLoc +"." + resource.getFileExtension();
 			final IPath projectPath = resource.getProject().getLocation();
 			final IPath editSessionPath = projectPath.append("edit-scenarios").append(editSession);
 			try {
@@ -69,6 +73,9 @@
 			}
 			oldTokens = tokens;
 			editNumber ++;
+			if(editNumber > 10000){
+				startNewEditSession();
+			}
 		}
 	}
 

From v.vergu at gmail.com  Mon Oct  3 17:45:36 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Mon, 03 Oct 2011 15:45:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23413 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.testing org.strategoxt.imp.testing.ui
	org.strategoxt.imp.testing.ui/META-INF org.strategoxt.imp...
Message-ID: <20111003154536.69F5F108C009@mx3.tudelft.nl>

Author: VladVergu
Date: Mon Oct  3 15:45:35 2011
New Revision: 23413
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23413&sc=1

Log:
- added UI refresh supression until we separate the model and the view properly
- removed extension point priority from schema
- added preference page for Spoofax-Testing to select plugin providing UI
- refactored external strategies to use an ITestListener wrapper (reduces clones + isolates reflexive calls)
- bumped version number to 1.0.1 because of API changes
- commented out debug statements in Test-get-input and test-runner (caused large IO on ambiguities)

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/helper/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/helper/ListenerWrapper.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/PreferenceConstants.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/PreferenceInitializer.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/SpoofaxTestingPreferencePage.java   (contents, props changed)
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestListener.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunViewPart.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/ITestListener.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Oct  3 15:45:35 2011	(r23413)
@@ -276,7 +276,7 @@
          id="org.strategoxt.imp.testing"
          download-size="0"
          install-size="0"
-         version="1.0.0.qualifier"/>
+         version="1.0.1.qualifier"/>
 
    <plugin
          id="org.spoofax.terms"
@@ -353,6 +353,6 @@
          id="org.strategoxt.imp.testing.ui"
          download-size="0"
          install-size="0"
-         version="1.0.0.qualifier"/>
+         version="1.0.1.qualifier"/>
 
 </feature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/META-INF/MANIFEST.MF	Mon Oct  3 15:45:35 2011	(r23413)
@@ -2,14 +2,15 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: SpoofaxTesting UI Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.testing.ui;singleton:=true
-Bundle-Version: 1.0.0.qualifier
+Bundle-Version: 1.0.1.qualifier
 Bundle-Activator: org.strategoxt.imp.testing.ui.Activator
 Require-Bundle: org.eclipse.ui,
  org.eclipse.core.runtime,
- org.strategoxt.imp.testing,
+ org.strategoxt.imp.testing;bundle-version="1.0.1",
  org.eclipse.core.resources,
  org.eclipse.ui.forms,
  org.strategoxt.strj,
  org.strategoxt.imp.runtime
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/plugin.xml	Mon Oct  3 15:45:35 2011	(r23413)
@@ -12,8 +12,7 @@
    <extension
          point="org.strategoxt.imp.testing.testlistener">
       <client
-            class="org.strategoxt.imp.testing.ui.model.TestListener"
-            priority="11">
+            class="org.strategoxt.imp.testing.ui.model.TestListener">
       </client>
    </extension>
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestListener.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestListener.java	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/model/TestListener.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -20,6 +20,7 @@
 			Activator.logError("Could not open view", e);
 			return null;
 		}
+		
 	}
 
 	public void reset() {
@@ -78,4 +79,18 @@
 		});
 	}
 
+	public void disableRefresh() {
+		TestRunViewPart vp = getViewPart();
+		if(vp!=null)
+			vp.disableRefresh(true);
+		
+	}
+
+	public void enableRefresh() {
+		TestRunViewPart vp = getViewPart();
+		if(vp!=null)
+			vp.disableRefresh(false);
+		
+	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunViewPart.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunViewPart.java	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.ui/src/org/strategoxt/imp/testing/ui/views/TestRunViewPart.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -33,7 +33,7 @@
 public class TestRunViewPart extends ViewPart {
 
 	public final static String VIEW_ID = "org.strategoxt.imp.testing.ui.views.testrunviewpart";
-	
+
 	private final FormToolkit toolkit = new FormToolkit(Display.getCurrent());
 	private TestRun testrun = null;
 	private Label lblRatio;
@@ -100,8 +100,7 @@
 		treeViewer.addDoubleClickListener(new IDoubleClickListener() {
 
 			public void doubleClick(DoubleClickEvent event) {
-				Object selectObject = ((IStructuredSelection) treeViewer
-						.getSelection()).getFirstElement();
+				Object selectObject = ((IStructuredSelection) treeViewer.getSelection()).getFirstElement();
 
 				String file = null;
 				int offset = 0;
@@ -119,11 +118,9 @@
 					IResource res;
 					try {
 						res = EditorIOAgent.getResource(f);
-						EditorState.asyncOpenEditor(Display.getDefault(),
-								(IFile) res, offset, true);
+						EditorState.asyncOpenEditor(Display.getDefault(), (IFile) res, offset, true);
 					} catch (FileNotFoundException e) {
-						org.strategoxt.imp.runtime.Environment.logException(
-								"File not found", e);
+						org.strategoxt.imp.runtime.Environment.logException("File not found", e);
 					}
 				}
 			}
@@ -149,8 +146,7 @@
 		if (testrun == null) {
 			lblRatio.setText("0 / 0");
 		} else {
-			lblRatio.setText(String.format("%d / %d    ",
-					(nrTests - nrFailedTests), nrTests));
+			lblRatio.setText(String.format("%d / %d    ", (nrTests - nrFailedTests), nrTests));
 		}
 		pb.setMaximum(nrTests);
 	}
@@ -165,7 +161,7 @@
 	 * Create the actions.
 	 */
 	private void createActions() {
-		onlyFailedTestsAction = new Action("Show only failed tests",Action.AS_CHECK_BOX) {
+		onlyFailedTestsAction = new Action("Show only failed tests", Action.AS_CHECK_BOX) {
 			public void run() {
 				if (onlyFailedTestsAction.isChecked()) {
 					treeViewer.addFilter(failedTestsFilter);
@@ -178,10 +174,10 @@
 
 	}
 
-	private void createFilters(){
+	private void createFilters() {
 		failedTestsFilter = new FailedTestsFilter();
 	}
-	
+
 	/**
 	 * Initialize the toolbar.
 	 */
@@ -193,7 +189,7 @@
 	 */
 	private void initializeMenu() {
 		IMenuManager mgr = getViewSite().getActionBars().getMenuManager();
-        mgr.add(onlyFailedTestsAction);
+		mgr.add(onlyFailedTestsAction);
 	}
 
 	@Override
@@ -224,29 +220,37 @@
 
 	public void addTestsuite(String name, String filename) {
 		testrun.addTestsuite(name, filename);
-		refresh();
+		if(!refreshDisabled)
+			refresh();
 	}
 
 	public void addTestcase(String testsuite, String description, int offset) {
 		TestsuiteRun ts = testrun.getTestsuite(testsuite);
 		ts.addTestCase(description, offset);
-		refresh();
+		if(!refreshDisabled)
+			refresh();
 	}
 
 	public void startTestcase(String testsuite, String description) {
-		TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(
-				description);
+		TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(description);
 		tcr.start();
 	}
 
-	public void finishTestcase(String testsuite, String description,
-			boolean succeeded) {
-		TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(
-				description);
+	public void finishTestcase(String testsuite, String description, boolean succeeded) {
+		TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(description);
 		tcr.finished(succeeded);
 		if (!succeeded)
 			nrFailedTests++;
 		pb.step(nrFailedTests);
-		refresh();
+		if(!refreshDisabled)
+			refresh();
+	}
+
+	private boolean refreshDisabled = false;
+
+	public void disableRefresh(boolean b) {
+		refreshDisabled = b;
+		if(!b)
+			refresh();
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Mon Oct  3 15:45:35 2011	(r23413)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: SpoofaxTesting Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.testing; singleton:=true
-Bundle-Version: 1.0.0.qualifier
+Bundle-Version: 1.0.1.qualifier
 Bundle-Activator: org.strategoxt.imp.testing.Activator
 Import-Package: org.osgi.framework
 Require-Bundle: org.strategoxt.imp.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/ITestListener.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/ITestListener.java	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/ITestListener.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -3,6 +3,8 @@
  */
 package org.strategoxt.imp.testing.listener;
 
+import java.util.Map;
+
 /**
  * @author vladvergu
  * 
@@ -10,14 +12,19 @@
 public interface ITestListener {
 
 	static final String EXTENSION_ID = "org.strategoxt.imp.testing.testlistener";
-	
-	void reset();
 
-	void addTestcase(String testsuite, String description, int offset);
+	void reset() throws Exception;
+
+	void addTestcase(String testsuite, String description, int offset) throws Exception;
+
+	void addTestsuite(String name, String filename) throws Exception;
+
+	void startTestcase(String testsuite, String description) throws Exception;
+
+	void finishTestcase(String testsuite, String description, boolean succeeded) throws Exception;
 
-	void addTestsuite(String name, String filename);
+	void disableRefresh() throws Exception;
 
-	void startTestcase(String testsuite, String description);
+	void enableRefresh() throws Exception;
 
-	void finishTestcase(String testsuite, String description, boolean succeeded);
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/helper/ListenerWrapper.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/listener/helper/ListenerWrapper.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -0,0 +1,163 @@
+/**
+ * 
+ */
+package org.strategoxt.imp.testing.listener.helper;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.spi.RegistryContributor;
+import org.eclipse.ui.PlatformUI;
+import org.strategoxt.imp.testing.listener.ITestListener;
+import org.strategoxt.imp.testing.preferences.PreferenceConstants;
+import org.strategoxt.imp.testing.preferences.PreferenceInitializer;
+
+/**
+ * 
+ * Provides wrapper methods for the client-end of the ITestListener extension point. The purpose of this class is to
+ * abstract the implementation details of discovering the client (and using reflexive calls) from the Strategies.
+ * 
+ * This class is a singleton
+ * 
+ * @author vladvergu
+ * 
+ */
+public final class ListenerWrapper implements ITestListener {
+
+	private static ITestListener instance;
+
+	public static ITestListener instance() throws CoreException {
+		if (instance == null)
+			instance = new ListenerWrapper();
+
+		return instance;
+	}
+
+	private ListenerWrapper() {
+	}
+
+	private Object getWrapped() throws CoreException {
+		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
+				ITestListener.EXTENSION_ID);
+
+		Object candidateListener = null;
+		String preferredView = PlatformUI.getPreferenceStore().getString(PreferenceConstants.P_LISTENER_ID);
+		if (preferredView.equals(""))
+			preferredView = PreferenceInitializer.DEFAULT_LISTENER_ID;
+
+		for (IConfigurationElement e : config) {
+			if (((RegistryContributor) e.getContributor()).getActualName().equals(preferredView)) {
+				candidateListener = e.createExecutableExtension("class");
+				break;
+			}
+		}
+
+		return candidateListener;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.strategoxt.imp.testing.listener.ITestListener#reset()
+	 */
+	public void reset() throws SecurityException, NoSuchMethodException, IllegalArgumentException,
+			IllegalAccessException, InvocationTargetException, CoreException {
+
+		Object wrapped = getWrapped();
+		// Using reflection, because if I use a cast, I get a ClassCastException
+		// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+		Method m = wrapped.getClass().getMethod("reset", new Class[] {});
+		if (!Modifier.isAbstract(m.getModifiers())) {
+			m.invoke(wrapped);
+		}
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.strategoxt.imp.testing.listener.ITestListener#addTestcase(java.lang.String, java.lang.String, int)
+	 */
+	public void addTestcase(String testsuite, String description, int offset) throws IllegalArgumentException,
+			IllegalAccessException, InvocationTargetException, SecurityException, NoSuchMethodException, CoreException {
+
+		Object wrapped = getWrapped();
+		Method m = wrapped.getClass().getMethod("addTestcase", new Class[] { String.class, String.class, int.class });
+		if (!Modifier.isAbstract(m.getModifiers())) {
+			m.invoke(wrapped, testsuite, description, offset);
+		}
+
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.strategoxt.imp.testing.listener.ITestListener#addTestsuite(java.lang.String, java.lang.String)
+	 */
+	public void addTestsuite(String name, String filename) throws IllegalArgumentException, IllegalAccessException,
+			InvocationTargetException, SecurityException, NoSuchMethodException, CoreException {
+
+		Object wrapped = getWrapped();
+		Method m = wrapped.getClass().getMethod("addTestsuite", new Class[] { String.class, String.class });
+		if (!Modifier.isAbstract(m.getModifiers())) {
+			m.invoke(wrapped, name, filename);
+		}
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.strategoxt.imp.testing.listener.ITestListener#startTestcase(java.lang.String, java.lang.String)
+	 */
+	public void startTestcase(String testsuite, String description) throws SecurityException, NoSuchMethodException,
+			IllegalArgumentException, IllegalAccessException, InvocationTargetException, CoreException {
+
+		Object wrapped = getWrapped();
+		Method m = wrapped.getClass().getMethod("startTestcase", new Class[] { String.class, String.class });
+		if (!Modifier.isAbstract(m.getModifiers())) {
+			m.invoke(wrapped, testsuite, description);
+		}
+
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.strategoxt.imp.testing.listener.ITestListener#finishTestcase(java.lang.String, java.lang.String,
+	 * boolean)
+	 */
+	public void finishTestcase(String testsuite, String description, boolean succeeded)
+			throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, SecurityException,
+			NoSuchMethodException, CoreException {
+
+		Object wrapped = getWrapped();
+		Method m = wrapped.getClass().getMethod("finishTestcase",
+				new Class[] { String.class, String.class, boolean.class });
+		if (!Modifier.isAbstract(m.getModifiers())) {
+			m.invoke(wrapped, testsuite, description, succeeded);
+
+		}
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.strategoxt.imp.testing.listener.ITestListener#disableRefresh()
+	 */
+	public void disableRefresh() {
+		// the test provider doesn't use this hack
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.strategoxt.imp.testing.listener.ITestListener#enableRefresh()
+	 */
+	public void enableRefresh() {
+		// the test provider doesn't use this hack
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/PreferenceConstants.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/PreferenceConstants.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -0,0 +1,10 @@
+package org.strategoxt.imp.testing.preferences;
+
+/**
+ * Constant definitions for plug-in preferences
+ */
+public class PreferenceConstants {
+
+	public static final String P_LISTENER_ID = "listener.id";
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/PreferenceInitializer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/PreferenceInitializer.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -0,0 +1,25 @@
+package org.strategoxt.imp.testing.preferences;
+
+import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
+import org.eclipse.jface.preference.IPreferenceStore;
+import org.eclipse.ui.PlatformUI;
+
+/**
+ * Class used to initialize default preference values.
+ */
+public class PreferenceInitializer extends AbstractPreferenceInitializer {
+
+	public final static String DEFAULT_LISTENER_ID = "org.strategoxt.imp.testing.ui";
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
+	 */
+	public void initializeDefaultPreferences() {
+		System.out.println("CALLING DEFAULTS....");
+		IPreferenceStore store = PlatformUI.getPreferenceStore();
+		store.setDefault(PreferenceConstants.P_LISTENER_ID, DEFAULT_LISTENER_ID);
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/SpoofaxTestingPreferencePage.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/preferences/SpoofaxTestingPreferencePage.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -0,0 +1,61 @@
+package org.strategoxt.imp.testing.preferences;
+
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.spi.RegistryContributor;
+import org.eclipse.jface.preference.ComboFieldEditor;
+import org.eclipse.jface.preference.FieldEditorPreferencePage;
+import org.eclipse.ui.IWorkbench;
+import org.eclipse.ui.IWorkbenchPreferencePage;
+import org.eclipse.ui.PlatformUI;
+import org.strategoxt.imp.testing.listener.ITestListener;
+
+/**
+ * This class represents a preference page that is contributed to the Preferences dialog. By subclassing
+ * <samp>FieldEditorPreferencePage</samp>, we can use the field support built into JFace that allows us to create a page
+ * that is small and knows how to save, restore and apply itself.
+ * <p>
+ * This page is used to modify preferences only. They are stored in the preference store that belongs to the main
+ * plug-in class. That way, preferences can be accessed directly via the preference store.
+ */
+
+public class SpoofaxTestingPreferencePage extends FieldEditorPreferencePage implements IWorkbenchPreferencePage {
+
+	public SpoofaxTestingPreferencePage() {
+		super(GRID);
+		setPreferenceStore(PlatformUI.getPreferenceStore());
+		setDescription("Spoofax-Testing preferences");
+	}
+
+	/**
+	 * Creates the field editors. Field editors are abstractions of the common GUI blocks needed to manipulate various
+	 * types of preferences. Each field editor knows how to save and restore itself.
+	 */
+	public void createFieldEditors() {
+
+		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
+				ITestListener.EXTENSION_ID);
+		String[][] providers = new String[config.length][2];
+
+		int i = 0;
+		for (IConfigurationElement e : config) {
+			RegistryContributor contributor = (RegistryContributor) e.getContributor();
+			providers[i][0] = contributor.getName();
+			providers[i][1] = contributor.getActualName();
+			i++;
+		}
+
+		addField(new ComboFieldEditor(PreferenceConstants.P_LISTENER_ID, "&Plug-in to use as a view", providers,
+				getFieldEditorParent()));
+
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)
+	 */
+	public void init(IWorkbench workbench) {
+	}
+
+}
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testcase_0_3.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -2,20 +2,13 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-
-import org.eclipse.core.runtime.IConfigurationElement;
-import org.eclipse.core.runtime.ISafeRunnable;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Platform;
-import org.eclipse.core.runtime.SafeRunner;
-import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.testing.Activator;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.testing.listener.ITestListener;
+import org.strategoxt.imp.testing.listener.helper.ListenerWrapper;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
@@ -29,75 +22,20 @@
 		if (!isTermString(arg0) || !isTermString(arg1))
 			return null;
 
-		final String ts = ((IStrategoString) arg0).stringValue();
-		final String desc = ((IStrategoString) arg1).stringValue();
-		final int offset = ((IStrategoInt) arg2).intValue();
-
-		// Display.getDefault().syncExec(new Runnable() {
-		// public void run() {
-		// try {
-		// IViewPart a =
-		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-		// // Using reflection, because if I use a cast, I get a ClassCastException
-		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
-		// Method m = a.getClass().getMethod("addTestcase", new Class[] {String.class, String.class, int.class}) ;
-		// m.invoke(a, ts, desc, offset);
-		// } catch(Exception e) {
-		// e.printStackTrace();
-		// }
-		// }
-		// });
-		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
-				ITestListener.EXTENSION_ID);
-		try {
-			Object candidateListener = null;
-			int maxPrio = 0;
-			// determine the listener with the highest priority
-			for (IConfigurationElement e : config) {
-				int prio = 0;
-				try {
-					prio = Integer.parseInt(e.getAttribute("priority"));
-				} catch (NumberFormatException fex) {
-				}
-				if (prio > maxPrio) {
-					maxPrio = prio;
-					candidateListener = e.createExecutableExtension("class");
-				}
-			}
-			if (candidateListener != null) {
-				final Object listener = candidateListener;
-
-				ISafeRunnable runner = new ISafeRunnable() {
-
-					public void run() throws Exception {
-						// Using reflection, because if I use a cast, I get a ClassCastException
-						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = listener.getClass().getMethod("addTestcase",
-								new Class[] { String.class, String.class, int.class });
-						if (!Modifier.isAbstract(m.getModifiers())) {
-							m.invoke(listener, ts, desc, offset);
-						}
-					}
-
-					public void handleException(Throwable exception) {
-						//
-					}
-				};
-				SafeRunner.run(runner);
-			} else {
-				Activator
-						.getInstance()
-						.getLog()
-						.log(new Status(IStatus.INFO, Activator.kPluginID,
-								"No TestListeners available to listen for test status"));
-			}
-		} catch (Exception cex) {
-			Activator
-					.getInstance()
-					.getLog()
-					.log(new Status(IStatus.ERROR, Activator.kPluginID,
-							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+		String ts = ((IStrategoString) arg0).stringValue();
+		String desc = ((IStrategoString) arg1).stringValue();
+		int offset = ((IStrategoInt) arg2).intValue();
+
+		try{
+			ITestListener listener = ListenerWrapper.instance();
+			listener.addTestcase(ts, desc, offset);
+		} catch (Exception e) {
+			ITermFactory factory = context.getFactory();
+			Environment.logException("Failed to add test case to listener. Maybe no listeners?", e);
+			return factory.makeAppl(factory.makeConstructor("Error", 1), factory
+					.makeString("Failed to add test case to listener. Maybe no listeners?: " + e.getLocalizedMessage()));
 		}
+		
 		return current;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_add_testsuite_0_2.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -2,19 +2,12 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-
-import org.eclipse.core.runtime.IConfigurationElement;
-import org.eclipse.core.runtime.ISafeRunnable;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Platform;
-import org.eclipse.core.runtime.SafeRunner;
-import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.testing.Activator;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.testing.listener.ITestListener;
+import org.strategoxt.imp.testing.listener.helper.ListenerWrapper;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
@@ -27,73 +20,19 @@
 		if (!isTermString(arg0) || !isTermString(arg1))
 			return null;
 
-		final String name = ((IStrategoString) arg0).stringValue();
-		final String filename = ((IStrategoString) arg1).stringValue();
+		String name = ((IStrategoString) arg0).stringValue();
+		String filename = ((IStrategoString) arg1).stringValue();
 
-		// Display.getDefault().syncExec(new Runnable() {
-		// public void run() {
-		// try {
-		// IViewPart a =
-		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-		// // Using reflection, because if I use a cast, I get a ClassCastException
-		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
-		// Method m = a.getClass().getMethod("addTestsuite", new Class[] {String.class, String.class}) ;
-		// m.invoke(a, name, filename);
-		// } catch(Exception e) {
-		// e.printStackTrace();
-		// }
-		// }
-		// });
-		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
-				ITestListener.EXTENSION_ID);
 		try {
-			Object candidateListener = null;
-			int maxPrio = 0;
-			// determine the listener with the highest priority
-			for (IConfigurationElement e : config) {
-				int prio = 0;
-				try {
-					prio = Integer.parseInt(e.getAttribute("priority"));
-				} catch (NumberFormatException fex) {
-				}
-				if (prio > maxPrio) {
-					maxPrio = prio;
-					candidateListener = e.createExecutableExtension("class");
-				}
-			}
-			if (candidateListener != null) {
-				final Object listener = candidateListener;
-
-				ISafeRunnable runner = new ISafeRunnable() {
-
-					public void run() throws Exception {
-						// Using reflection, because if I use a cast, I get a ClassCastException
-						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = listener.getClass().getMethod("addTestsuite", new Class[] { String.class, String.class });
-						if (!Modifier.isAbstract(m.getModifiers())) {
-							m.invoke(listener, name, filename);
-						}
-					}
-
-					public void handleException(Throwable exception) {
-						//
-					}
-				};
-				SafeRunner.run(runner);
-			} else {
-				Activator
-						.getInstance()
-						.getLog()
-						.log(new Status(IStatus.INFO, Activator.kPluginID,
-								"No TestListeners available to listen for test status"));
-			}
-		} catch (Exception cex) {
-			Activator
-					.getInstance()
-					.getLog()
-					.log(new Status(IStatus.ERROR, Activator.kPluginID,
-							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+			ITestListener listener = ListenerWrapper.instance();
+			listener.addTestsuite(name, filename);
+		} catch (Exception e) {
+			ITermFactory factory = context.getFactory();
+			Environment.logException("Failed to add test suite to listener. Maybe no listeners?", e);
+			return factory.makeAppl(factory.makeConstructor("Error", 1), factory
+					.makeString("Failed to add test suite to listener. Maybe no listeners?: " + e.getLocalizedMessage()));
 		}
+
 		return current;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_finish_testcase_0_3.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -2,20 +2,13 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-
-import org.eclipse.core.runtime.IConfigurationElement;
-import org.eclipse.core.runtime.ISafeRunnable;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Platform;
-import org.eclipse.core.runtime.SafeRunner;
-import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.testing.Activator;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.testing.listener.ITestListener;
+import org.strategoxt.imp.testing.listener.helper.ListenerWrapper;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
@@ -29,84 +22,25 @@
 		if (!isTermString(arg0) || !isTermString(arg1))
 			return null;
 
-		final String ts = ((IStrategoString) arg0).stringValue();
-		final String desc = ((IStrategoString) arg1).stringValue();
-		final String appl = ((IStrategoAppl) arg2).getConstructor().getName();
-
-		// Display.getDefault().syncExec(new Runnable() {
-		// public void run() {
-		// try {
-		// IViewPart a =
-		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-		// // Using reflection, because if I use a cast, I get a ClassCastException
-		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
-		// Method m = a.getClass().getMethod("finishTestcase", new Class[] {String.class, String.class, boolean.class})
-		// ;
-		// if(appl.equals("True")) {
-		// m.invoke(a, ts, desc, true);
-		// } else {
-		// m.invoke(a, ts, desc, false);
-		// }
-		// } catch(Exception e) {
-		// e.printStackTrace();
-		// }
-		// }
-		// });
-		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
-				ITestListener.EXTENSION_ID);
+		String ts = ((IStrategoString) arg0).stringValue();
+		String desc = ((IStrategoString) arg1).stringValue();
+		String appl = ((IStrategoAppl) arg2).getConstructor().getName();
+
 		try {
-			Object candidateListener = null;
-			int maxPrio = 0;
-			// determine the listener with the highest priority
-			for (IConfigurationElement e : config) {
-				int prio = 0;
-				try {
-					prio = Integer.parseInt(e.getAttribute("priority"));
-				} catch (NumberFormatException fex) {
-				}
-				if (prio > maxPrio) {
-					maxPrio = prio;
-					candidateListener = e.createExecutableExtension("class");
-				}
-			}
-			if (candidateListener != null) {
-				final Object listener = candidateListener;
-
-				ISafeRunnable runner = new ISafeRunnable() {
-
-					public void run() throws Exception {
-						// Using reflection, because if I use a cast, I get a ClassCastException
-						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = listener.getClass().getMethod("finishTestcase",
-								new Class[] { String.class, String.class, boolean.class });
-						if (!Modifier.isAbstract(m.getModifiers())) {
-							if (appl.equals("True")) {
-								m.invoke(listener, ts, desc, true);
-							} else {
-								m.invoke(listener, ts, desc, false);
-							}
-						}
-					}
-
-					public void handleException(Throwable exception) {
-						//
-					}
-				};
-				SafeRunner.run(runner);
-			} else {
-				Activator
-						.getInstance()
-						.getLog()
-						.log(new Status(IStatus.INFO, Activator.kPluginID,
-								"No TestListeners available to listen for test status"));
-			}
-		} catch (Exception cex) {
-			Activator
-					.getInstance()
-					.getLog()
-					.log(new Status(IStatus.ERROR, Activator.kPluginID,
-							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+			ITestListener listener = ListenerWrapper.instance();
+			if (appl.equals("True"))
+				listener.finishTestcase(ts, desc, true);
+			else
+				listener.finishTestcase(ts, desc, false);
+		} catch (Exception e) {
+			ITermFactory factory = context.getFactory();
+			Environment.logException("Failed to finish test case to listener. Maybe no listeners?", e);
+			return factory.makeAppl(
+					factory.makeConstructor("Error", 1),
+					factory.makeString("Failed to finish test case to listener. Maybe no listeners?: "
+							+ e.getLocalizedMessage()));
 		}
+
 		return current;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_init_0_0.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -1,17 +1,10 @@
 package org.strategoxt.imp.testing.strategies;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-
-import org.eclipse.core.runtime.IConfigurationElement;
-import org.eclipse.core.runtime.ISafeRunnable;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Platform;
-import org.eclipse.core.runtime.SafeRunner;
-import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.testing.Activator;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.testing.listener.ITestListener;
+import org.strategoxt.imp.testing.listener.helper.ListenerWrapper;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
@@ -21,70 +14,14 @@
 
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		// Display.getDefault().syncExec(new Runnable() {
-		// public void run() {
-		// try {
-		// IViewPart a =
-		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-		// // Using reflection, because if I use a cast, I get a ClassCastException
-		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
-		// Method m = a.getClass().getMethod("reset", new Class[] {}) ;
-		// m.invoke(a);
-		// } catch(Exception e) {
-		// e.printStackTrace();
-		// }
-		// }
-		// });
-		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
-				ITestListener.EXTENSION_ID);
-
 		try {
-			Object candidateListener = null;
-			int maxPrio = 0;
-			// determine the listener with the highest priority
-			for (IConfigurationElement e : config) {
-				int prio = 0;
-				try {
-					prio = Integer.parseInt(e.getAttribute("priority"));
-				} catch (NumberFormatException fex) {
-				}
-				if (prio > maxPrio) {
-					maxPrio = prio;
-					candidateListener = e.createExecutableExtension("class");
-				}
-			}
-			if (candidateListener != null) {
-				final Object listener = candidateListener;
-
-				ISafeRunnable runner = new ISafeRunnable() {
-
-					public void run() throws Exception {
-						// Using reflection, because if I use a cast, I get a ClassCastException
-						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = listener.getClass().getMethod("reset", new Class[] {});
-						if (!Modifier.isAbstract(m.getModifiers())) {
-							m.invoke(listener);
-						}
-					}
-
-					public void handleException(Throwable exception) {
-						//
-					}
-				};
-				SafeRunner.run(runner);
-			} else {
-				Activator
-						.getInstance()
-						.getLog()
-						.log(new Status(IStatus.INFO, Activator.kPluginID,
-								"No TestListeners available to listen for test status"));
-			}
-		} catch (Exception cex) {
-			Activator
-					.getInstance()
-					.getLog()
-					.log(new Status(IStatus.ERROR, Activator.kPluginID,
-							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+			ITestListener listener = ListenerWrapper.instance();
+			listener.reset();
+		} catch (Exception e) {
+			ITermFactory factory = context.getFactory();
+			Environment.logException("Failed to reset test listener. Maybe no listeners?", e);
+			return factory.makeAppl(factory.makeConstructor("Error", 1), factory
+					.makeString("Failed to reset test listener. Maybe no listeners?: " + e.getLocalizedMessage()));
 		}
 
 		return current;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testlistener_start_testcase_0_2.java	Mon Oct  3 15:45:35 2011	(r23413)
@@ -2,19 +2,12 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-
-import org.eclipse.core.runtime.IConfigurationElement;
-import org.eclipse.core.runtime.ISafeRunnable;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Platform;
-import org.eclipse.core.runtime.SafeRunner;
-import org.eclipse.core.runtime.Status;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.testing.Activator;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.testing.listener.ITestListener;
+import org.strategoxt.imp.testing.listener.helper.ListenerWrapper;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
@@ -27,73 +20,21 @@
 		if (!isTermString(arg0) || !isTermString(arg1))
 			return null;
 
-		final String ts = ((IStrategoString) arg0).stringValue();
-		final String desc = ((IStrategoString) arg1).stringValue();
+		String ts = ((IStrategoString) arg0).stringValue();
+		String desc = ((IStrategoString) arg1).stringValue();
 
-		// Display.getDefault().syncExec(new Runnable() {
-		// public void run() {
-		// try {
-		// IViewPart a =
-		// PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
-		// // Using reflection, because if I use a cast, I get a ClassCastException
-		// // cannot cast type <x> to <x>. Probably because of some different classloader issue.
-		// Method m = a.getClass().getMethod("startTestcase", new Class[] {String.class, String.class}) ;
-		// m.invoke(a, ts, desc);
-		// } catch(Exception e) {
-		// e.printStackTrace();
-		// }
-		// }
-		// });
-		IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(
-				ITestListener.EXTENSION_ID);
 		try {
-			Object candidateListener = null;
-			int maxPrio = 0;
-			// determine the listener with the highest priority
-			for (IConfigurationElement e : config) {
-				int prio = 0;
-				try {
-					prio = Integer.parseInt(e.getAttribute("priority"));
-				} catch (NumberFormatException fex) {
-				}
-				if (prio > maxPrio) {
-					maxPrio = prio;
-					candidateListener = e.createExecutableExtension("class");
-				}
-			}
-			if (candidateListener != null) {
-				final Object listener = candidateListener;
-
-				ISafeRunnable runner = new ISafeRunnable() {
-
-					public void run() throws Exception {
-						// Using reflection, because if I use a cast, I get a ClassCastException
-						// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-						Method m = listener.getClass().getMethod("startTestcase", new Class[] { String.class, String.class });
-						if (!Modifier.isAbstract(m.getModifiers())) {
-							m.invoke(listener, ts, desc);
-						}
-					}
-
-					public void handleException(Throwable exception) {
-						//
-					}
-				};
-				SafeRunner.run(runner);
-			} else {
-				Activator
-						.getInstance()
-						.getLog()
-						.log(new Status(IStatus.INFO, Activator.kPluginID,
-								"No TestListeners available to listen for test status"));
-			}
-		} catch (Exception cex) {
-			Activator
-					.getInstance()
-					.getLog()
-					.log(new Status(IStatus.ERROR, Activator.kPluginID,
-							"Failed to notify listeners of updated test status. Maybe no listeners?", cex));
+			ITestListener listener = ListenerWrapper.instance();
+			listener.startTestcase(ts, desc);
+		} catch (Exception e) {
+			ITermFactory factory = context.getFactory();
+			Environment.logException("Failed to start test case to listener. Maybe no listeners?", e);
+			return factory.makeAppl(
+					factory.makeConstructor("Error", 1),
+					factory.makeString("Failed to start test case to listener. Maybe no listeners?: "
+							+ e.getLocalizedMessage()));
 		}
+
 		return current;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml	Mon Oct  3 15:45:35 2011	(r23413)
@@ -10,5 +10,19 @@
        <extension id="org.strategoxt.imp.testing.parser" name="Spoofax-Testing Parser" point="org.eclipse.imp.runtime.parser">
           <parser class="org.strategoxt.imp.testing.SpoofaxTestingParseController" language="Spoofax-Testing">
           </parser>
+       </extension>
+       <extension
+             point="org.eclipse.ui.preferencePages">
+          <page
+                class="org.strategoxt.imp.testing.preferences.SpoofaxTestingPreferencePage"
+                id="org.strategoxt.imp.testing.preferences.SpoofaxTestingPreferencePage"
+                name="Spoofax Testing">
+          </page>
+       </extension>
+       <extension
+             point="org.eclipse.core.runtime.preferences">
+          <initializer
+                class="org.strategoxt.imp.testing.preferences.PreferenceInitializer">
+          </initializer>
        </extension>    
     </plugin>

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/schema/testlistener.exsd	Mon Oct  3 15:45:35 2011	(r23413)
@@ -59,13 +59,6 @@
                </appInfo>
             </annotation>
          </attribute>
-         <attribute name="priority" type="string">
-            <annotation>
-               <documentation>
-                  Specifies the priority (integer) of this listener. Only the listener with the higher priority will be notified of test status changes.
-               </documentation>
-            </annotation>
-         </attribute>
       </complexType>
    </element>
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Mon Oct  3 15:45:35 2011	(r23413)
@@ -104,8 +104,8 @@
     <+
       // UNDONE: parsing from Stratego is no longer supported atm
       // parsed' := <spt-parse-string> s
-      warn(|"No ast annotation found")
-    ; parsed' := FailsParsing()
+      // warn(|"No ast annotation found")
+    parsed' := FailsParsing()
 
   check-expectation(|ast, selections, messages) :
     <not(FailsParsing)> -> parse-failed

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Mon Oct  3 08:40:15 2011	(r23412)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Mon Oct  3 15:45:35 2011	(r23413)
@@ -29,9 +29,9 @@
   
   test-runner =
     testlistener-init 
-  ; find-all-testsuites-in-project ;debug(!"1: ")
-  ; map(testlistener-add-testsuite(|<get-testsuite-name-from-file>,<id>)) ;debug(!"2: ")
-  ; map(try(run-testsuite)) ;debug(!"3: ")
+  ; find-all-testsuites-in-project //;debug(!"1: ")
+  ; map(testlistener-add-testsuite(|<get-testsuite-name-from-file>,<id>)) //;debug(!"2: ")
+  ; map(try(run-testsuite)) //;debug(!"3: ")
   ; !None()
 
   test-runner-file:

From L.C.L.Kats at tudelft.nl  Mon Oct  3 17:54:17 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 03 Oct 2011 15:54:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23414 - in
	spoofax-imp/trunk/org.strategoxt.imp.metatooling: .
	src/org/strategoxt/imp/metatooling/wizards
Message-ID: <20111003155417.7C2BE7F801C@mx1.tudelft.nl>

Author: LennartKats
Date: Mon Oct  3 15:54:17 2011
New Revision: 23414
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23414&sc=1

Log:
changed new project wizard names

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml	Mon Oct  3 15:45:35 2011	(r23413)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml	Mon Oct  3 15:54:17 2011	(r23414)
@@ -28,7 +28,7 @@
             class="org.strategoxt.imp.metatooling.wizards.NewEditorWizard"
             icon="icons/sample.gif"
             id="org.strategoxt.imp.metatooling.wizards.NewEditorWizard"
-            name="Spoofax/IMP editor project"
+            name="Spoofax editor project"
             project="true">
       </wizard>
    </extension>
@@ -41,7 +41,7 @@
             class="org.strategoxt.imp.metatooling.wizards.NewSpxEditorWizard"
             icon="icons/sample.gif"
             id="org.strategoxt.imp.metatooling.wizards.NewSpxEditorWizard"
-            name="Spoofax/IMP(Spoofaxlang) editor project"
+            name="SpoofaxLang editor project (beta)"
             project="true">
       </wizard>
    </extension>

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	Mon Oct  3 15:45:35 2011	(r23413)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	Mon Oct  3 15:54:17 2011	(r23414)
@@ -42,8 +42,8 @@
 	 */
 	public NewEditorWizardPage() {
 		super("wizardPage");
-		setTitle("Spoofax/IMP Editor Project");
-		setDescription("This wizard creates a new Spoofax/IMP editor project.");
+		setTitle("Spoofax Editor Project");
+		setDescription("This wizard creates a new Spoofax editor project.");
 	}
 
 	/**
@@ -307,4 +307,4 @@
 	public String getInputExtensions() {
 		return inputExtensions.getText().trim();
 	}
-}
\ No newline at end of file
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java	Mon Oct  3 15:45:35 2011	(r23413)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizardPage.java	Mon Oct  3 15:54:17 2011	(r23414)
@@ -42,8 +42,8 @@
 	 */
 	public NewSpxEditorWizardPage() {
 		super("wizardPage");
-		setTitle("Spoofax/IMP(SpoofaxLang) Editor Project (beta version)");
-		setDescription("This wizard creates a new Spoofax/IMP editor project (Powered by SpoofaxLang). Currently it is in beta version.");
+		setTitle("SpoofaxLang Editor Project (beta)");
+		setDescription("This wizard creates a new Spoofax editor project (using SpoofaxLang). Currently in beta.");
 	}
 
 	/**
@@ -307,4 +307,4 @@
 	public String getInputExtensions() {
 		return inputExtensions.getText().trim();
 	}
-}
\ No newline at end of file
+}

From seba at informatik.uni-marburg.de  Mon Oct  3 19:03:09 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 03 Oct 2011 17:03:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23415 - in
	sugarj/trunk: compiler/org/sugarj/driver editor/META-INF
	editor/editor/java/org/sugarj/builder
	editor/editor/java/org/sugarj/editor stdlib/org/sugarj/init
Message-ID: <20111003170309.77B312B8003@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Mon Oct  3 17:03:08 2011
New Revision: 23415
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23415&sc=1

Log:
number of bugfixes

Modified:
   sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/Result.java
   sugarj/trunk/editor/META-INF/MANIFEST.MF
   sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
   sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv

Modified: sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java	Mon Oct  3 15:54:17 2011	(r23414)
+++ sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java	Mon Oct  3 17:03:08 2011	(r23415)
@@ -230,7 +230,7 @@
     if (left != null && right != null)
       ImploderAttachment.putImploderAttachment(
           term,
-          false,
+          term.isList(),
           sort, 
           left,
           right);

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Mon Oct  3 15:54:17 2011	(r23414)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Mon Oct  3 17:03:08 2011	(r23415)
@@ -61,7 +61,7 @@
  */
 public class Driver{
   
-  public final static String CACHE_VERSION = "editor-base-0.14";
+  public final static String CACHE_VERSION = "editor-base-0.15";
   
   private final static int PENDING_TIMEOUT = 120000;
 
@@ -117,6 +117,7 @@
   private ModuleKeyCache<Path> sdfCache = null;
   private ModuleKeyCache<Path> strCache = null;
   
+  private Path currentGrammarTBL;
   private Path currentTransProg;
   
   private boolean interrupt = false;
@@ -209,7 +210,8 @@
       synchronized (currentlyProcessing) {
         // TODO we need better circular dependency handling
         if (currentlyProcessing.contains(sourceFile))
-          throw new IllegalStateException("circular processing");
+          ;
+          // throw new IllegalStateException("circular processing");
         currentlyProcessing.add(sourceFile);
       }
 
@@ -351,6 +353,10 @@
       compileGeneratedJavaFile();
       
       driverResult.setSugaredSyntaxTree(makeSugaredSyntaxTree());
+      
+      if (currentGrammarTBL != null)
+        driverResult.registerParseTable(currentGrammarTBL);
+      
       if (currentTransProg != null)
         driverResult.registerEditorDesugarings(currentTransProg);
 
@@ -661,7 +667,7 @@
   private IStrategoTerm currentParse(String remainingInput, boolean recovery) throws IOException,
       InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
     // recompile the current grammar definition
-    Path currentGrammarTBL = SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(environment), sdfParser, sdfContext, makePermissiveContext, sdfCache, environment);
+    currentGrammarTBL = SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(environment), sdfParser, sdfContext, makePermissiveContext, sdfCache, environment);
 //    FileCommands.deleteTempFiles(driverResult.getLastParseTable());
 //    driverResult.setLastParseTable(currentGrammarTBL);
     ParseTable table = org.strategoxt.imp.runtime.Environment.loadParseTable(currentGrammarTBL.getAbsolutePath());
@@ -834,8 +840,8 @@
 
         if (sourceFile != null && (res == null || pendingInputFiles.contains(res.getSourceFile()) || !res.isUpToDate(res.getSourceFile(), environment))) {
           if (!generateFiles) {
-            boolean b = pendingInputFiles.contains(res.getSourceFile()) || !res.isUpToDate(res.getSourceFile(), environment);
-            System.out.println(b);
+            // boolean b = res == null || pendingInputFiles.contains(res.getSourceFile()) || !res.isUpToDate(res.getSourceFile(), environment);
+            // System.out.println(b);
             setErrorMessage(toplevelDecl, "module outdated, compile first: " + importModule);
           }
           else {

Modified: sugarj/trunk/compiler/org/sugarj/driver/Result.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Result.java	Mon Oct  3 15:54:17 2011	(r23414)
+++ sugarj/trunk/compiler/org/sugarj/driver/Result.java	Mon Oct  3 17:03:08 2011	(r23415)
@@ -34,6 +34,7 @@
   private List<String> collectedErrors = new LinkedList<String>();
   private Set<BadTokenException> parseErrors = new HashSet<BadTokenException>();
   private IStrategoTerm sugaredSyntaxTree = null;
+  private Path parseTableFile;
   private Path desugaringsFile;
   private RelativeSourceLocationPath sourceFile;
   private Integer sourceFileHash;
@@ -188,6 +189,14 @@
     }
   }
   
+  void registerParseTable(Path tbl) {
+    this.parseTableFile = tbl;
+  }
+  
+  public Path getParseTable() {
+    return parseTableFile;
+  }
+  
   void registerEditorDesugarings(Path jarfile) throws IOException {
     desugaringsFile = jarfile;
     editorServices = new HashSet<IStrategoTerm>(ATermCommands.registerSemanticProvider(editorServices, jarfile));

Modified: sugarj/trunk/editor/META-INF/MANIFEST.MF
==============================================================================
--- sugarj/trunk/editor/META-INF/MANIFEST.MF	Mon Oct  3 15:54:17 2011	(r23414)
+++ sugarj/trunk/editor/META-INF/MANIFEST.MF	Mon Oct  3 17:03:08 2011	(r23415)
@@ -34,3 +34,4 @@
  org.eclipse.ui.ide;bundle-version="3.6.2"
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
 Bundle-ActivationPolicy: lazy
+Import-Package: org.spoofax.terms.attachments

Modified: sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Mon Oct  3 15:54:17 2011	(r23414)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Mon Oct  3 17:03:08 2011	(r23415)
@@ -8,6 +8,7 @@
 import java.util.Map;
 
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IMarker;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IResourceDelta;
@@ -19,6 +20,7 @@
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.ILock;
+import org.eclipse.core.runtime.jobs.ISchedulingRule;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.jdt.core.JavaCore;
@@ -58,16 +60,16 @@
     }
   }
 
-  private static Map<IProject, ILock> buildLocks = new HashMap<IProject, ILock>();
-  
-  private synchronized static ILock getLock(IProject project) {
-    ILock lock = buildLocks.get(project);
-    if (lock != null)
-      return lock;
-    lock = Job.getJobManager().newLock();
-    buildLocks.put(project, lock);
-    return lock;
-  }
+//  private static Map<IProject, ILock> buildLocks = new HashMap<IProject, ILock>();
+//  
+//  private synchronized static ILock getLock(IProject project) {
+//    ILock lock = buildLocks.get(project);
+//    if (lock != null)
+//      return lock;
+//    lock = Job.getJobManager().newLock();
+//    buildLocks.put(project, lock);
+//    return lock;
+//  }
   
   protected IProject[] build(int kind, @SuppressWarnings("rawtypes") Map args,
       IProgressMonitor monitor) {
@@ -158,7 +160,7 @@
       protected IStatus run(IProgressMonitor monitor) {
         ProcessingListener marker = new MarkingProcessingListener(getProject());
         Driver.addProcessingDoneListener(marker);
-        getLock(getProject()).acquire();
+//        getLock(getProject()).acquire();
         for (BuildInput input : inputs)
           try {
             monitor.beginTask("compile " + input.sourceFile.getRelativePath(), IProgressMonitor.UNKNOWN);
@@ -184,15 +186,20 @@
             return Status.CANCEL_STATUS;
           } catch (Exception e) {
             e.printStackTrace();
-            throw new RuntimeException("compilation of " + FileCommands.fileName(input.sourceFile) + " failed", e);
+            try {
+              IMarker m = input.resource.createMarker(IMarker.PROBLEM);
+              m.setAttribute(IMarker.MESSAGE, "compilation failed: " + e.getMessage());
+            } catch (CoreException ce) {
+            }
           } finally {
-            getLock(getProject()).release();
+//            getLock(getProject()).release();
             Driver.removeProcessingDoneListener(marker);
             monitor.done();
           }
           return Status.OK_STATUS;
       }
     };
+    buildJob.setRule(getProject());
     buildJob.schedule();
   }
 }

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java	Mon Oct  3 15:54:17 2011	(r23414)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java	Mon Oct  3 17:03:08 2011	(r23415)
@@ -78,6 +78,8 @@
           ((StrategoObserver) observer).getRuntime(); // eagerly initilize w/ current document
         } catch (InterruptedException e) {
           Environment.logException("could not reinitialize editor: interrupted", e);
+        } catch (Exception e) {
+          Environment.logException("could not reinitialize editor: exception", e);
         }
         finally {
           observer.getLock().unlock();

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Mon Oct  3 15:54:17 2011	(r23414)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Mon Oct  3 17:03:08 2011	(r23415)
@@ -5,6 +5,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -13,7 +14,11 @@
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.spoofax.jsglr.client.KeywordRecognizer;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.Token;
@@ -21,7 +26,9 @@
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.spoofax.terms.attachments.ParentAttachment;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
+import org.strategoxt.imp.runtime.services.ContentProposer;
 import org.sugarj.driver.ATermCommands;
 import org.sugarj.driver.CommandExecution;
 import org.sugarj.driver.Driver;
@@ -30,6 +37,7 @@
 import org.sugarj.driver.Log;
 import org.sugarj.driver.ModuleSystemCommands;
 import org.sugarj.driver.Result;
+import org.sugarj.driver.RetractableTreeBuilder;
 import org.sugarj.driver.path.RelativeSourceLocationPath;
 
 /**
@@ -58,6 +66,10 @@
     assert environment != null;
     
     result = getResult(filename);
+    
+    if (input.contains(ContentProposer.COMPLETION_TOKEN) && result != null && result.getParseTable() != null)
+      return parseCompletionTree(input, filename);
+      
     if (result == null)
       result = parseFailureResult();
 
@@ -151,7 +163,7 @@
   @Override
   public Set<BadTokenException> getCollectedErrors() {
     final Set<BadTokenException> empty = Collections.emptySet();
-    return result == null ? empty : new HashSet(result.getCollectedErrors());
+    return result == null ? empty : result.getParseErrors();
   }
 
 
@@ -200,4 +212,52 @@
     r.setSugaredSyntaxTree(term);
     return r;
   }
+  
+  private IStrategoTerm parseCompletionTree(String input, String filename) throws IOException, TokenExpectedException, BadTokenException, SGLRException {
+    JSGLRI jsglri = null;
+    try {
+      jsglri = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(result.getParseTable().getAbsolutePath()), "NextToplevelDeclaration");
+    } catch (InvalidParseTableException e) {
+      e.printStackTrace();
+    }
+    
+    if (jsglri == null)
+      return null;
+    
+    jsglri.setUseRecovery(true);
+    jsglri.getParser().setUseStructureRecovery(true);
+    RetractableTreeBuilder treeBuilder = new RetractableTreeBuilder();
+    jsglri.getParser().setTreeBuilder(treeBuilder);
+    
+    
+    String remainingInput = input;
+    List<IStrategoTerm> list = new LinkedList<IStrategoTerm>();
+    
+    while (true) {
+      if (remainingInput.isEmpty())
+        return null;
+
+      IStrategoTerm term = jsglri.parse(remainingInput, filename);
+      if (!ATermCommands.isApplication(term, "NextToplevelDeclaration"))
+        return null;
+      
+      IStrategoTerm nextDecl = ATermCommands.getApplicationSubterm(term, "NextToplevelDeclaration", 0);
+      list.add(nextDecl);
+      if (nextDecl.toString().contains(ContentProposer.COMPLETION_TOKEN)) {
+        IStrategoList termList = ATermCommands.makeList("NextToplevelDeclaration", list);
+        
+        IStrategoList listIt = termList;
+        while (!listIt.isEmpty()) {
+          ParentAttachment.putParent(listIt.head(), termList, listIt);
+          listIt = listIt.tail();
+        }
+        
+        return termList;
+      }
+        
+      IStrategoTerm remainingInputTerm = ATermCommands.getApplicationSubterm(term, "NextToplevelDeclaration", 1);
+      treeBuilder.retract(remainingInputTerm);
+      remainingInput = ((IStrategoString) remainingInputTerm).stringValue();
+    }
+  }
 }

Modified: sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv	Mon Oct  3 15:54:17 2011	(r23414)
+++ sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv	Mon Oct  3 17:03:08 2011	(r23415)
@@ -42,19 +42,27 @@
   ToplevelDeclaration
   EditorServiceSection
   SugarDefElem
+  SugarDec
   JavaFieldDec
   JavaMethodDec    
   JavaClassDec     
   JavaInterfaceDec
   JavaEnumDec 
+  JavaConstrDec
+  JavaNewInstance
+  JavaQNewInstance
 
 outliner
   ToplevelDeclaration
+  SugarDec
   JavaFieldDec
   JavaMethodDec    
   JavaClassDec     
   JavaInterfaceDec
   JavaEnumDec 
+  JavaConstrDec
+  JavaNewInstance
+  JavaQNewInstance
 
   completions SDF
     completion template : SugarDefElem =

From M.A.Akhter at student.tudelft.nl  Tue Oct  4 23:09:10 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 04 Oct 2011 21:09:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23416 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	jdbm jdbm/recman org/spoofax/interpreter/library/language/spxlang
	org/spoofax/interpreter/li...
Message-ID: <20111004210910.D613B7F8040@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Oct  4 21:09:10 2011
New Revision: 23416
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23416&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
      - copied, changed from r23374, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
      - copied, changed from r23372, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
      - copied, changed from r23372, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
      - copied, changed from r23374, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/
      - copied from r23371, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
      - copied, changed from r23371, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSymbolTableEntryTests.java
Replaced:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxLookupTableUnitTests.java
      - copied, changed from r23386, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ICompilationUnitRecordListener.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IIndexer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManagerFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManagerOptions.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/CacheRecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManagerFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManagerFactory.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManagerFactory.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -75,8 +75,6 @@
 	@SuppressWarnings("unchecked")
 	public static RecordManager createRecordManager(String name,
 			Properties options) throws IOException {
-
-
 		String relPath = options.getProperty( RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, RecordManagerOptions.INDEX_DIRECTORY_RELATIVE_PATH);
 		
 		RecordManager recman = new BaseRecordManager( name , relPath);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManagerOptions.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManagerOptions.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManagerOptions.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -59,7 +59,7 @@
 
     /**
      * Option to disable free space reclaim. New records are always
-     * inserted to end of file. Usefull mainly on batch imports.
+     * inserted to end of file. Useful mainly on batch imports.
      * You will need to defrag() store after you are done
      *
      * <br>Possible values: <u>false</u>|true.
@@ -75,7 +75,6 @@
      * 
      */
     public static final String CACHE_TYPE = "jdbm.cache.type";
-
     
     /**
      * Size of the MRU cache. This affects cache type "mru" and cache type "soft".
@@ -91,12 +90,8 @@
      */
 	public static final String COMPRESS = "jdbm.compress";
 
-	
-
-	
 	public static final String INDEX_RELATIVE_PATH_OPTION = "jdbm.index.relativepath" ;
 	
-	
-	// TODO : make this similar to the above implementation.
+	// FIXME : make this similar to the above implementation.
 	public static String INDEX_DIRECTORY_RELATIVE_PATH = ".index";
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/CacheRecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/CacheRecordManager.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/CacheRecordManager.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -34,8 +34,7 @@
  * @author <a href="cg at cdegroot.com">Cees de Groot</a>
  * @version $Id: CacheRecordManager.java,v 1.9 2005/06/25 23:12:32 doomdark Exp $
  */
-public class CacheRecordManager
-    extends RecordManagerImpl
+public class CacheRecordManager extends RecordManagerImpl
 {
 
     /**

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java (from r23374, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseScope.java	Wed Sep 21 10:49:54 2011	(r23374, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,10 +1,13 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 
+import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
+import jdbm.PrimaryMap;
+
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
@@ -14,89 +17,137 @@
  * @author Md. Adil Akhter
  * Created On : Aug 27, 2011
  */
-abstract class BaseScope implements INamespace {
+public abstract class BaseNamespace implements INamespace {
 	
 	private static final long serialVersionUID = 2052337390283813190L;
 	
 	protected final IStrategoConstructor type;
 	protected final String  src;
-	
-	private  final NamespaceId _currentNamespace; 
-	private final NamespaceId _enclosingNamespace;
+
+	private  final NamespaceUri _currentNamespaceId; 
+	private final NamespaceUri _enclosingNamespaceId;
 	
 	protected final MultiValuePersistentTable _symbols;
+
+	public NamespaceUri namespaceUri() {return _currentNamespaceId;}
 	
-	public BaseScope(NamespaceId currentNS , IStrategoConstructor type, NamespaceId enclosingNS, ISpxPersistenceManager manager) {
-		assert currentNS!= null : "Current NS Identifier is null";
+	protected NamespaceUri enclosingNamespaceUri() { return _enclosingNamespaceId ; } 
+	
+	public BaseNamespace(NamespaceUri currentNamespace , IStrategoConstructor type, ISpxPersistenceManager manager, NamespaceUri enclosingNamespace) {
+		assert currentNamespace!= null : "Current Namespace Identifier is null";
 		assert type!= null      : "Non-null Type is expected";
 		
-		_currentNamespace = currentNS;
-		_enclosingNamespace = enclosingNS; 
+		_currentNamespaceId = currentNamespace;
+		_enclosingNamespaceId = enclosingNamespace; 
 		
 		this.type = type;
 		
-		src = type().toString() + _enclosingNamespace.UniqueID(); 
+		src = (_enclosingNamespaceId!= null) ? type.toString() + _enclosingNamespaceId.uniqueID()+".idx" :  type.toString()  + "___globalsymbols.idx" ; 
 			
-		_symbols = new MultiValuePersistentTable( manager.getProjectName()+src , manager);
+		_symbols = new MultiValuePersistentTable( manager.getProjectName()+src);
 	}
 
-	public void define(SpxSymbol sym,ILogger logger){
-		sym.setNamespace(_currentNamespace);
+	public void define(SpxSymbolTableEntry entry, ILogger logger){
 		
-		logger.logMessage(src, "Defining Symbol "+ sym);
+		entry.value.setNamespace(_currentNamespaceId);
 		
-		_symbols.define(sym);
-	}
+		logger.logMessage(src, "define | Defining Symbol "+ entry.value + " in "+ _currentNamespaceId);
 		
+		_symbols.define(entry);
+	}
+
 	/* 
 	 * Returns the enclosing scope of the current scope.
 	 * */
-	public NamespaceId getEnclosingNamespace() { return _enclosingNamespace; }
+	public INamespace getEnclosingNamespace(INamespaceResolver rs) { return _enclosingNamespaceId.resolve(rs); }
 	
-	public NamespaceId getCurrentNamespace(){ return _currentNamespace; }
+	public INamespace getCurrentNamespace(INamespaceResolver rs){ return _enclosingNamespaceId.resolve(rs); }
 	
-	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespaceResolver nsResolver, ISpxPersistenceManager manager){
+	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException{
+		
+		assert type instanceof IStrategoConstructor : "Type is expected to be IStrategoConstructor" ;
+			
 		List<SpxSymbol> lookupResult = getMembers().get(id);
 		if( lookupResult!=null){
-			List<SpxSymbol> expectedTypedSymbol = SpxSymbol.filterByType(type, lookupResult);
+			List<SpxSymbol> expectedTypedSymbol = SpxSymbol.filterByType((IStrategoConstructor)type, lookupResult);
+		
 			if(expectedTypedSymbol.size() >0 )
 				return lookupResult.get(0) ;
 		}
-
+	
 		// Symbols could not be found in the current scope
-		// Hence, searching any enclosing scope if it is not 
+		// Hence, searching any enclosing(parent) scope if it is not 
 		// null. After searching global scope, it is not searching
 		// anymore.
-		if( getEnclosingNamespace() != null) {
-			INamespace namespace = getEnclosingNamespace().resolve(nsResolver);
-			return namespace.resolve(id, type, nsResolver, manager);
+		INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
+		if( namespace  != null) {
+			//checks whether searching to the enclosing scope is allowed.
+			if( shouldSearchInEnclosingNamespace( searchedBy))
+				return namespace.resolve(id, type, searchedBy, facade);
 		}	 
 		
 		return null; // symbol is not found
 	}
 	
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id,
-			INamespaceResolver nsResolver, ISpxPersistenceManager manager) {
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
 		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
 		List<SpxSymbol> lookupResult = getMembers().get(id);
 		retResult.addAll(lookupResult);
 		
-		if( getEnclosingNamespace() != null)
-		{
-			INamespace namespace = getEnclosingNamespace().resolve(nsResolver);
-			Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(id, nsResolver, manager);
-			
-			retResult.addAll(parentResults);
-		}	 
+		INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
 		
+		if( namespace  != null){
+			//checks whether searching to the enclosing scope is allowed.
+			if( shouldSearchInEnclosingNamespace( searchedBy)){	
+				Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(id, this ,facade);
+				retResult.addAll(parentResults);
+			}
+		}	 
 		return retResult;
 	}
 	
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy,SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException{
+		
+		return SpxSymbol.filterByType((IStrategoConstructor) type, this.resolveAll(id, searchedBy, spxFacade)) ;
+	}
+	
+	
+	/* Resolving symbol for given type and symbol id .
+	 * 
+	 * (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.INamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException{
+		return resolveAll(searchingFor, type,  this, spxFacade);
+	}
+	
+	
 	public IStrategoConstructor type() {
 		return type;
 	}
 
 	public MultiValuePersistentTable getMembers(){return _symbols;}
+
+	public boolean isInternalNamespace() { return false;  }
+
+	protected boolean shouldSearchInInternalNamespace( INamespace searchedBy) {
+		// If searchedBy Namespace is enclosingNamespace of CurrentNamespace 
+		// Search for internal symbol scopes as well
+		return searchedBy.namespaceUri() == this.enclosingNamespaceUri()  || searchedBy.namespaceUri() == this.namespaceUri();  
+	}
+	
+	protected boolean shouldSearchInEnclosingNamespace(INamespace searchedBy) {
+		// search enclosing Namesapce only if searchedBy is not enclosing Namespace
+		return (searchedBy.namespaceUri() != this.enclosingNamespaceUri() ); 
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "BaseNamespace [type=" + type + ", _currentNamespaceId=" + _currentNamespaceId.id() + "]";
+	}
 }
\ No newline at end of file

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java (from r23372, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalScope.java	Tue Sep 20 23:29:52 2011	(r23372, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -5,39 +5,39 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-class GlobalScope extends BaseScope {
+public class GlobalNamespace extends BaseNamespace {
 	
 	private static final long serialVersionUID = -9194490383911401603L;
-	private static final String CTOR_NAME = "Global" ;
 	
-	public GlobalScope(NamespaceId id , IStrategoConstructor type, ISpxPersistenceManager manager){
-		super(id ,type, null, manager);
+	public GlobalNamespace(NamespaceUri id , IStrategoConstructor type, ISpxPersistenceManager manager){
+		super(id ,type, manager, null);
 	}
 	
 	/**
-	 * Creates an instance of GlobalScope. Point of caution : GlobalScope is valid  
-	 * for the current project. 
+	 * Creates an instance of GlobalScope. 
 	 * 
 	 * @param facade
 	 * @return
 	 */
-	public static INamespace createInstance(SpxSemanticIndexFacade facade) 
-	{
-		ITermFactory termFactory = facade.getTermFactory();
-
-		NamespaceId id = new NamespaceId(getGlobalScopeId(facade));
+	public static INamespace createInstance(SpxSemanticIndexFacade facade){
+		SpxPrimarySymbolTable  symbol_table = facade.persistenceManager().spxSymbolTable();
+		IStrategoList spoofaxNamespaceUri = getGlobalNamespaceId(facade);
 		
-		GlobalScope scope = new GlobalScope(id, 
-											termFactory.makeConstructor(CTOR_NAME, 0), 
-											facade.getPersistenceManager()
-											);
-		return scope;
+		NamespaceUri uri; 
+		if ( symbol_table == null )
+			uri  = new NamespaceUri(spoofaxNamespaceUri);
+		else
+			uri =  symbol_table.toNamespaceUri(spoofaxNamespaceUri); 
+
+		return new GlobalNamespace(uri, 
+				facade.getGlobalNamespaceTypeCon(), 
+				facade.persistenceManager()
+		);
+
 	}
-	
-	
-	static IStrategoList getGlobalScopeId(SpxSemanticIndexFacade facade){
+	public static IStrategoList getGlobalNamespaceId(SpxSemanticIndexFacade facade){
 		ITermFactory termFactory = facade.getTermFactory();
 		
-		return termFactory.makeList(termFactory.makeString(CTOR_NAME));
+		return termFactory.makeList(facade.getGlobalNamespaceTypeCon());
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -2,30 +2,37 @@
 
 import java.io.Serializable;
 import java.net.URI;
+import java.util.UUID;
 
 import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-interface INamespace extends Serializable {
+public interface INamespace extends Serializable {
     
-	NamespaceId getEnclosingNamespace();
+	INamespace getEnclosingNamespace(INamespaceResolver resolver);
 
-	NamespaceId getCurrentNamespace();
+	INamespace getCurrentNamespace(INamespaceResolver resolver);
 	
-	void define(SpxSymbol sym , ILogger logger) ;
+	void define(SpxSymbolTableEntry entry, ILogger logger) ;
     
-	SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespaceResolver nsResolver,ISpxPersistenceManager manager );
+	SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
     
-	Iterable<SpxSymbol> resolveAll(IStrategoTerm id, INamespaceResolver nsResolver,ISpxPersistenceManager manager);
+	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
+	
+	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
+	
+	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, INamespace searchedBy ,  SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
 	
 	IStrategoConstructor type();
 	
 	MultiValuePersistentTable getMembers();
-}
-
-interface INamespaceResolver {
 	
-	public INamespace resolveNamespace(NamespaceId nsId);
+	NamespaceUri namespaceUri();
+	
+	boolean isInternalNamespace() ;
 }
 
+
+

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceFactory.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -0,0 +1,7 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+
+public interface INamespaceFactory {
+	
+	public Iterable<INamespace> newNamespaces(SpxSemanticIndexFacade idxFacade); 
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -0,0 +1,12 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+
+public interface INamespaceResolver {
+	
+	public INamespace resolveNamespace(IStrategoList id);
+	
+	public INamespace resolveNamespace(NamespaceUri nsId);
+	
+	public boolean containsNamespace(IStrategoList id) ;
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -21,6 +21,8 @@
 	
 	public SpxModuleLookupTable spxModuleTable();
 	
+	public SpxPrimarySymbolTable spxSymbolTable();
+	
 	public void commit() throws IOException;
 	
 	public boolean IsClosed();
@@ -28,6 +30,8 @@
 	public void clearAll() throws IOException;
 	
 	public String getProjectName();
+	
+	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade);
 }
 
 interface ILogger{ 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -4,6 +4,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -17,40 +18,83 @@
 	private static final long serialVersionUID = 1055862481052307186L;
 	
 	protected final IStrategoList id;
-	protected final Set<IStrategoTerm> importReferences; 
+	protected final Set<IStrategoList> importReferences; 
+	protected final Set<IStrategoTerm> legacyImportReferences;
 	
 	public IdentifiableConstruct(IStrategoList id) {
 		assert id != null :  " ID can not be null " ;
 
 		this.id = id;
-		this.importReferences = new HashSet<IStrategoTerm>();
+		this.importReferences = new HashSet<IStrategoList>();
+		this.legacyImportReferences = new HashSet<IStrategoTerm>();
 	}
 	
 	public IStrategoList getId(){ return id; }  
 	
 	public abstract IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade);
 	
-	public void addImportRefernces ( IStrategoList  imports) {
+	public void addImportRefernces (SpxSemanticIndexFacade idxFacade, IStrategoList  imports) throws NotImplementedException, SpxSymbolTableException {
 	
 		for (IStrategoTerm i: StrategoListIterator.iterable(imports)) {
-			this.importReferences.add(i);
+			if(i instanceof IStrategoAppl)
+				addManagedImport(idxFacade, i); 
+			else
+				addLegacyImport(i);
 		}
 	}
+
+	/**
+	 * @param i
+	 */
+	private void addLegacyImport(IStrategoTerm i) {
+		this.legacyImportReferences.add(i);
+	}
+
+	/**
+	 * @param idxFacade
+	 * @param i
+	 * @throws IllegalArgumentException
+	 * @throws NotImplementedException
+	 */
+	private void addManagedImport(SpxSemanticIndexFacade idxFacade,
+			IStrategoTerm i) throws SpxSymbolTableException,
+			NotImplementedException {
+		IStrategoAppl packageRef = (IStrategoAppl)i;
+		if( packageRef.getConstructor() ==  idxFacade.getPackageQNameCon()){
+			IStrategoList id = PackageDeclaration.getPackageId(idxFacade, packageRef);
+			PackageDeclaration decl = idxFacade.lookupPackageDecl(id);
+			if(decl != null ){	
+				this.importReferences.add(id);
+				decl.addImportedTo(this.getId());
+			}
+		}
+		else 
+			throw new NotImplementedException("Unknown Import Reference. Not implemented for : " + packageRef.toString());
+	}
+	
+	private IStrategoTerm tranformToSpxImport(SpxSemanticIndexFacade idxFacade, IStrategoTerm i){
+		IStrategoTerm retTerm = i ; 
+		if( i instanceof IStrategoList)
+			retTerm = idxFacade.getTermFactory().makeAppl(
+					idxFacade.getPackageQNameCon(), i);
+
+		return retTerm;	
+	}
 	
-	protected Set<IStrategoTerm> getEnclosedImportReferences(SpxSemanticIndexFacade idxFacade) { return new HashSet<IStrategoTerm>(); } 
+	protected Set<IStrategoTerm> getEnclosedImportReferences(SpxSemanticIndexFacade idxFacade) throws SpxSymbolTableException { return new HashSet<IStrategoTerm>(); } 
 	
-	public Set<IStrategoTerm> getImportReferneces() {return importReferences ; }
+	public Set<IStrategoList> getImportReferneces() { return importReferences; }
 	
 	IStrategoList getImports(SpxSemanticIndexFacade idxFacade) {	
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		
 		HashSet<IStrategoTerm> allImportRefs = new HashSet<IStrategoTerm>();
 		allImportRefs.addAll(this.importReferences);
-		allImportRefs.addAll(getEnclosedImportReferences(idxFacade));
+		allImportRefs.addAll(this.legacyImportReferences);
 		
 		IStrategoList result = termFactory.makeList();
 		for (IStrategoTerm t: allImportRefs)
-			result = idxFacade.getTermFactory().makeListCons(t, result);
+			result = idxFacade.getTermFactory().makeListCons(tranformToSpxImport(idxFacade,t), result);
 	
 		return result;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,5 +1,8 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -7,7 +10,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class ModuleDeclaration extends IdentifiableConstruct 
+public class ModuleDeclaration extends IdentifiableConstruct implements INamespaceFactory  
 {
 	private static final long serialVersionUID = -6249406731326662111L;
 
@@ -18,6 +21,9 @@
 	static final int AnalyzedAstIndex = 4;
 	
 	final String resourceAbsPath; 
+
+	final IStrategoList enclosingPackageID;
+	
 	
 	/* (non-Javadoc)
 	 * @see org.spoofax.interpreter.library.language.spxlang.IdentifiableConstruct#getFileLocation()
@@ -27,8 +33,6 @@
 		return resourceAbsPath;
 	}
 
-	final IStrategoList enclosingPackageID;
-	
 	public ModuleDeclaration(String resourceAbsPath, IStrategoList id , IStrategoList packageID) {
 		super(id);
 		
@@ -88,7 +92,6 @@
 		return true;
 	}
 	
-	
 	public static IStrategoList getModuleId(SpxSemanticIndexFacade facade, IStrategoAppl moduleQName )
 	{
 		IStrategoConstructor moduleCon  = facade.getModuleQNameCon();
@@ -99,7 +102,6 @@
 		throw new IllegalArgumentException("Invalid module qname : "+ moduleQName.toString());
 	}
 	
-	
 	public static IStrategoAppl toModuleIdTerm(SpxSemanticIndexFacade facade , ModuleDeclaration decl)
 	{
 		return toIdTerm(facade, facade.getModuleQNameCon() , decl.getId());
@@ -126,5 +128,24 @@
 		
 		return this.forceImploderAttachment(retTerm);
 	}
+
+	public Iterable<INamespace> newNamespaces(SpxSemanticIndexFacade idxFacade) {
+		
+		List<INamespace> namespaces = new ArrayList<INamespace>();
+		
+		SpxPrimarySymbolTable  table =  idxFacade.persistenceManager().spxSymbolTable() ;
+		
+		NamespaceUri namespaceUri = table.toNamespaceUri(id) ;
+		NamespaceUri packageUri = table.toNamespaceUri(enclosingPackageID) ;
+		
+		namespaces.add(ModuleNamespace.createInstance(namespaceUri, packageUri,idxFacade));
+		
+		return namespaces; 
+	}
+	
+	NamespaceUri getNamespaceUri(SpxSemanticIndexFacade idxFacade)
+	{
+		return idxFacade.persistenceManager().spxSymbolTable().toNamespaceUri(id) ;
+	}
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -8,10 +8,10 @@
 import org.spoofax.interpreter.terms.TermConverter;
 
 /**
+ * Class represents ModuleDefinition 
  * @author Md. Adil Akhter
  * Created On : Sep 7, 2011
  */
-
 class ModuleDefinition  extends ModuleDeclaration 
 {
 	private static final long serialVersionUID = -5355795992567198473L;
@@ -47,8 +47,9 @@
 	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
 
 		ITermFactory termFactory = idxFacade.getTermFactory();
-		TermConverter termConverter = idxFacade.getTermConverter();
 		
+		TermConverter termConverter = idxFacade.getTermConverter();
+		 
 		IStrategoTerm moduleDeclarationTerm = super.toTerm(idxFacade);
 		IStrategoConstructor moduleDefCons = idxFacade.getModuleDefCon();
 		

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java (from r23372, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleScope.java	Tue Sep 20 23:29:52 2011	(r23372, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -8,21 +8,23 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
- * @author Md. Adil Akhter
- * Created On : Aug 21, 2011
+ * Instantiates a new ModuleNamespace . Each ModuleNamespace is associated with a ModuleDeclaration.
+ *  
+ * NOTE: Internal ModuleNamespaces does not have any physical ModuleDeclaration associated.    
  */
-
-class ModuleScope extends BaseScope
+public class ModuleNamespace extends BaseNamespace
 {
-	private static final String CTOR_NAME = "Module" ;
 	private static final long serialVersionUID = 5255913747644738988L;
 	
-	public ModuleScope(NamespaceId currentNS, IStrategoConstructor type,NamespaceId enclosingNS, ISpxPersistenceManager manager) {
-		super(currentNS, type, enclosingNS, manager);
-		
-	}
-	
+	boolean isInternalNamespace = false;
 	
+	public ModuleNamespace(NamespaceUri currentNamespaceUri, IStrategoConstructor namespaceType ,NamespaceUri enclosingNamespaceUri,  ISpxPersistenceManager manager) {
+		super(currentNamespaceUri, namespaceType, manager, enclosingNamespaceUri);
+	}
+
+	@Override 
+	public boolean isInternalNamespace() { return isInternalNamespace; }; 
+
 	/**
 	 * Creates an instance of GlobalScope. Point of caution : GlobalScope is valid  
 	 * for the current project. 
@@ -30,15 +32,10 @@
 	 * @param facade
 	 * @return
 	 */
-	public static INamespace createInstance(NamespaceId id, NamespaceId enclosingNsId, SpxSemanticIndexFacade facade) 
-	{
-		ITermFactory termFactory = facade.getTermFactory();
-
-		PackageScope scope = new PackageScope(id, 
-											termFactory.makeConstructor(CTOR_NAME, 1),
-											enclosingNsId,
-											facade.getPersistenceManager()
-											);
-		return scope;
+	public static INamespace createInstance(NamespaceUri id, NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade facade) {
+	
+		return new ModuleNamespace(id, facade.getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.persistenceManager());
 	}
+	
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,9 +1,15 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import java.io.IOException;
+import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.UUID;
 
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 import jdbm.PrimaryMap;
@@ -17,23 +23,21 @@
  * @author Md. Adil Akhter
  * Created On : Aug 22, 2011
  */
-class MultiValuePersistentTable {
+class MultiValuePersistentTable implements Serializable{
 
-	final PrimaryMap<IStrategoTerm,ArrayList<SpxSymbol>> symbols;
+	private static final long serialVersionUID = -473055635199728599L;
+	private final HashMap<SpxSymbolKey, List<SpxSymbol>> symbols;
 	
-	public MultiValuePersistentTable(String name, ISpxPersistenceManager manager){
-		
-		symbols = manager.loadHashMap(name);
+	public MultiValuePersistentTable(String name){
+		symbols = new HashMap<SpxSymbolKey , List<SpxSymbol>>();
 	}
 	
 	/**
-	 * removes all the entries from current map
+	 * Removes all the entries from this symbol-table
 	 * 
 	 * @throws IOException 
 	 */
-	public void clear() throws IOException{
-		symbols.clear();
-	}
+	public void clear() throws IOException{ symbols.clear(); }
 
 	
 	/**
@@ -44,14 +48,14 @@
 	 * @param key - The key that the symbol will be mapped to .
 	 * @param symbol - The symbol to store. 
 	 */
-	public void define(SpxSymbol symbol){
-		IStrategoTerm key = symbol.Id();
+	public void define(SpxSymbolTableEntry entry){
+		SpxSymbolKey key = entry.key;
 		
 		if ( symbols.containsKey(key)){
-			symbols.get(key).add(symbol);
+			symbols.get(key).add(entry.value);
 		}else{
-			ArrayList<SpxSymbol> values = new ArrayList<SpxSymbol>(); 
-			values.add(symbol);
+			List<SpxSymbol> values = new ArrayList<SpxSymbol>(); 
+			values.add(entry.value);
 			symbols.put( key , values );
 		}
 	}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -0,0 +1,64 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.io.Serializable;
+import java.util.UUID;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * @author Md. Adil Akhter
+ * 
+ */
+public final class NamespaceUri implements Serializable
+{
+	private static final long serialVersionUID = -7525948560476092228L;
+	private final IStrategoList _id;
+	private final UUID _uId ;
+
+	public NamespaceUri(IStrategoList id){_id = id ; _uId = UUID.randomUUID();}
+	
+	public IStrategoList id(){ return _id ; }
+	
+	public String uniqueID(){ return _uId.toString();};
+	
+	public INamespace resolve(INamespaceResolver sTable) {
+		return sTable.resolveNamespace((NamespaceUri)this);
+	}
+	
+	public boolean equalSpoofaxId(IStrategoList spoofaxUri){
+		return _id.equals(spoofaxUri);
+	}
+	
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		//result = prime * result + ((_id == null) ? 0 : _id.hashCode());
+		result = prime * result + ((_uId == null) ? 0 : _uId.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		NamespaceUri other = (NamespaceUri) obj;
+		if (_uId == null) {
+			if (other._uId != null)
+				return false;
+		} else if (!_uId.equals(other._uId))
+			return false;
+		return true;
+	}
+
+	@Override
+	public String toString() {
+		return "NamespaceId (_id=" + _id + ", _uId=" + _uId + ")";
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,6 +1,8 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -10,14 +12,15 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class PackageDeclaration extends IdentifiableConstruct
+public class PackageDeclaration extends IdentifiableConstruct implements INamespaceFactory
 {
 	private static final long serialVersionUID = -9081890582103567413L;
 	
 	static final int PACKAGE_ID_INDEX = 0;
 	static final int SPX_COMPILATION_UNIT_PATH = 1;
 	
-	final Set<String> resourceAbsPaths = new HashSet<String>();
+	private final Set<String> resourceAbsPaths = new HashSet<String>();
+	private final Set<IStrategoList> importedToReferences = new HashSet<IStrategoList>();
 	
 	public PackageDeclaration(String resourceAbsPath, IStrategoList id) {
 		super(id);
@@ -34,16 +37,25 @@
 		super(id);
 	}
 	
-	public void addFileUri(String resAbsolutePath)
-	{
+	public Set<IStrategoList> getImortedToPackageReferences(){return importedToReferences;}
+	
+	public void removeImportedToPackageReference(PackageDeclaration decl) {
+		this.importedToReferences.remove(decl.getId());
+	}
+	
+	public void addFileUri(String resAbsolutePath){
 		resourceAbsPaths.add(resAbsolutePath);
 	}
 	
+	public void addImportedTo(IStrategoList packageId){
+		importedToReferences.add(packageId);
+	}
+	
 	/* (non-Javadoc)
 	 * @see java.lang.Object#equals(java.lang.Object)
 	 */
 	@Override
-	public boolean equals(Object obj) {
+	public boolean equals(Object obj){
 		if (this == obj)
 			return true;
 		if (!super.equals(obj))
@@ -59,9 +71,7 @@
 		return true;
 	}
 	
-	
-	public Set<String> getAllFilePaths()
-	{
+	public Set<String> getAllFilePaths(){
 		return resourceAbsPaths;
 	}
 	
@@ -69,7 +79,7 @@
 	 * @see java.lang.Object#hashCode()
 	 */
 	@Override
-	public int hashCode() {
+	public int hashCode(){
 		final int prime = 31;
 		int result = super.hashCode();
 		result = prime
@@ -78,8 +88,7 @@
 		return result;
 	}
 	
-	public boolean isNotExistedInAnyFile()
-	{
+	public boolean isNotExistedInAnyFile(){
 		return (resourceAbsPaths == null) || (resourceAbsPaths.size() == 0) ; 
 	}
 	
@@ -97,14 +106,13 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.BaseConstructDeclaration#toTerm(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
 	@Override
-	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade){
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		
 		IStrategoConstructor packageDeclCons = idxFacade.getPackageDeclCon();
 		IStrategoList absPathList = termFactory.makeList();
 		
-		for(String resourceAbsPath : resourceAbsPaths)
-		{
+		for(String resourceAbsPath : resourceAbsPaths){
 			IStrategoString absPathTerm = termFactory.makeString(resourceAbsPath);
 			absPathList  = termFactory.makeListCons(absPathTerm, absPathList);
 		}	
@@ -117,36 +125,18 @@
 		
 		return this.forceImploderAttachment(retTerm);
 	}
-	
-
-	@Override
-	protected Set<IStrategoTerm> getEnclosedImportReferences(SpxSemanticIndexFacade idxFacade) {
-
-		Set<IStrategoTerm> retImportDecls = super.getEnclosedImportReferences(idxFacade);
-
-		Iterable<ModuleDeclaration> moduldeDecls = idxFacade
-				.getPersistenceManager().spxModuleTable()
-				.getModuleDeclarationsByPackageId(this.getId());
-
-		for (ModuleDeclaration m : moduldeDecls) {
-			retImportDecls.addAll(m.getImportReferneces());
-		}
-
-		return retImportDecls;
-	}
-	
+		
 	/**
 	 * Gets PackageID from Typed Package QName
 	 * 
 	 * @param fac
 	 * @param packageQName
-	 * @return
+	 * @return {@link IStrategoList}
 	 */
 	public static IStrategoList getPackageId(SpxSemanticIndexFacade facade,IStrategoAppl packageQName){
 		final IStrategoConstructor packageQNameCon = facade.getPackageQNameCon();
 		
-		if(packageQNameCon == packageQName.getConstructor())
-		{
+		if(packageQNameCon == packageQName.getConstructor()){
 			return getID( facade, (IStrategoAppl)packageQName.getSubterm(0));	
 		}
 		
@@ -172,8 +162,7 @@
 		return newDecl;
 	}
 
-	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, IStrategoList id)
-	{
+	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, IStrategoList id){
 		return toIdTerm(facade ,  facade.getPackageQNameCon(), id);
 	}
 
@@ -184,8 +173,15 @@
 	 * @param decl
 	 * @return
 	 */
-	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, PackageDeclaration decl)
-	{
+	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, PackageDeclaration decl){
 		return toPackageIdTerm (facade, decl.getId());
 	}
+
+	/* (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.INamespaceFactory#newInstances(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
+	public Iterable<INamespace> newNamespaces(SpxSemanticIndexFacade idxFacade) {
+	
+		return PackageNamespace.createInstances(id , idxFacade);
+	}
 }
\ No newline at end of file

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java (from r23374, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageScope.java	Wed Sep 21 10:49:54 2011	(r23374, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,53 +1,232 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-class PackageScope  extends BaseScope {
 
-	private static final String CTOR_NAME = "Package" ;
+/**
+ * Implementation of a PackageNamesapce. 
+ * @author Md. Adil Akhter
+ */
+public class PackageNamespace  extends BaseNamespace {
+
 	private static final long serialVersionUID = 7324156752002137217L;
+	private static final String INTERNAL_NAMESPACENAME = "__internal";
+	
+	// Not serializing it to disk since we already have this information in SpxSemanticIndex
+	private transient Set<NamespaceUri> importedNamespaceUris;
+	private transient Set<NamespaceUri> enclosedNamespaceUris;
 	
-	public PackageScope(NamespaceId currentNS, IStrategoConstructor type, NamespaceId enclosingNS, ISpxPersistenceManager manager) {
-		super(currentNS, type, enclosingNS, manager);
+	private PackageNamespace(NamespaceUri currentNamespace, IStrategoConstructor type, NamespaceUri enclosingNamespace, ISpxPersistenceManager manager) {
+		super(currentNamespace, type, manager, enclosingNamespace);
 	}
 	
+	private void ensureEnclosedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
+		if( enclosedNamespaceUris == null){
+			enclosedNamespaceUris = new HashSet<NamespaceUri>();
+			
+			Iterable<ModuleDeclaration> mDecls = facade.getModuleDeclarations( this.namespaceUri().id());
+			if(mDecls !=null){
+				for(ModuleDeclaration m : mDecls){
+					enclosedNamespaceUris.add(m.getNamespaceUri(facade));
+				}	
+			}
+		}
+	}
 	
+	private void ensureImportedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
+		if( importedNamespaceUris == null){
+			
+			importedNamespaceUris= new HashSet<NamespaceUri>();
+			
+			SpxPrimarySymbolTable symTable =  facade.persistenceManager().spxSymbolTable();
+			
+			//getting the package declaration and retrieving it imported references 
+			PackageDeclaration decl = facade.lookupPackageDecl(this.namespaceUri().id());
+			Iterable<IStrategoList> importedIds = decl.getImportReferneces();
+			
+			for(IStrategoList l : importedIds){
+				importedNamespaceUris.add(symTable.toNamespaceUri(l));; 
+			}	
+		}
+	}
+	/* Resolving symbol in PackageNamespace following few   
+	 * basic rules. First it try to resolve symbol in its enclosed namespace , then it try to resolve 
+	 * the symbol in its enclosing namespace and at last, it looks for the symbol in the imported 
+	 * namespaces.
+	 * 
+	 * @see org.spoofax.interpreter.library.language.spxlang.BaseNamespace#resolve(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.INamespace, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
 	@Override
-	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type,INamespaceResolver nsResolver, ISpxPersistenceManager logger) 
-	{
-		return null;
-	};
-	
-	
-	
+	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
+		
+		ensureEnclosedNamespaceUrisLoaded(facade);
+		SpxSymbol retSymbol = resolveSymbolinNamespaces(this.enclosedNamespaceUris, id, type, searchedBy, facade);
+
+		if (retSymbol == null) {
+			// Searching in package's local symbols. If not found, search
+			// in the enclosing namespaces i.e. in Global Namespace
+			retSymbol = super.resolve(id, type, this, facade);
+
+			if (retSymbol == null) {
+				// try to resolve in the imported namespaces
+				ensureImportedNamespaceUrisLoaded(facade);
+				retSymbol = resolveSymbolinNamespaces(this.importedNamespaceUris, id, type, searchedBy, facade);
+
+			}
+		}
+		return retSymbol;
+	}
+
 	@Override
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id,INamespaceResolver nsResolver, ISpxPersistenceManager manager) 
-	{
-		return null;
-	};
-	
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm key,INamespace originNamespace, SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
+		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
+		
+		retResult.addAll((Set<SpxSymbol>)super.resolveAll(key, this, facade));
+		
+		ensureEnclosedNamespaceUrisLoaded(facade);
+		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, originNamespace, facade)) ;
+		
+		ensureImportedNamespaceUrisLoaded(facade);
+		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, originNamespace, facade)) ;
+		
+		return retResult;
+	}
 	
 	
 	/**
-	 * Creates an instance of GlobalScope. Point of caution : GlobalScope is valid  
-	 * for the current project. 
+	 * Creates an instance of PackageScope. Also creates internal symbol scopes
 	 * 
 	 * @param facade
 	 * @return
 	 */
-	public static INamespace createInstance(NamespaceId id, NamespaceId enclosingNsId, SpxSemanticIndexFacade facade) 
-	{
-		ITermFactory termFactory = facade.getTermFactory();
+	public static Iterable<INamespace> createInstances(IStrategoList id, SpxSemanticIndexFacade facade){
 		
-		PackageScope scope = new PackageScope(id, 
-											termFactory.makeConstructor(CTOR_NAME, 1),
-											enclosingNsId,
-											facade.getPersistenceManager()
-											);
-		return scope;
+		SpxPrimarySymbolTable  table =  facade.persistenceManager().spxSymbolTable() ;
+		
+		NamespaceUri globalNsUri =  table.toNamespaceUri(GlobalNamespace.getGlobalNamespaceId(facade));
+		NamespaceUri currentPackageUri = table.toNamespaceUri(id);
+	
+		List<INamespace> namespaces = new ArrayList<INamespace>();
+		PackageNamespace ns = new PackageNamespace(currentPackageUri, facade.getPackageNamespaceTypeCon(), globalNsUri,facade.persistenceManager());
+		
+		namespaces.add(ns);
+		namespaces.add(createInternalNamespace(currentPackageUri , facade));
+		
+		return namespaces;
 	}
 	
 	
+	/**
+	 * @param key
+	 * @param type
+	 * @param searchedOrigin
+	 * @param facade
+	 * @param retSymbol
+	 * @param namespaceResolver
+	 * @throws SpxSymbolTableException 
+	 */
+	private SpxSymbol resolveSymbolinNamespaces(Iterable<NamespaceUri> resolvableUris  ,IStrategoTerm key, IStrategoTerm type, INamespace searchedOrigin, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
+		
+		SpxSymbol retSymbol = null;
+		INamespaceResolver namespaceResolver = facade.persistenceManager().spxSymbolTable();
+		 
+		for( NamespaceUri uri : resolvableUris){
+
+			INamespace thisNamespace = uri.resolve(namespaceResolver);
+			
+			if (disallowLookupIn(thisNamespace , searchedOrigin)){	
+				// Current Namespace is an internal Namespace and
+				// Internal Namespace Search is disabled for searchedBy 
+				// hence, ignoring it.
+				continue;
+			}
+			
+			retSymbol = thisNamespace.resolve(key, type, this, facade) ;
+			if(retSymbol != null)
+				break;
+		}
+		
+		return retSymbol;
+	}
+	
+	private Set<SpxSymbol> resolveAllSymbolsInNamespaces(Iterable<NamespaceUri> resolvableUris  ,IStrategoTerm key, INamespace searchOrigin, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
+		
+		Set<SpxSymbol> retSymbol = new HashSet<SpxSymbol>();
+		INamespaceResolver namespaceResolver = facade.persistenceManager().spxSymbolTable();
+		 
+		for( NamespaceUri uri : resolvableUris){
+
+			INamespace thisNamespace = uri.resolve(namespaceResolver);
+			
+			if (disallowLookupIn(thisNamespace , searchOrigin)){	
+				// Current Namespace is an internal Namespace and
+				// Internal Namespace Search is disabled for searchedBy 
+				// hence, ignoring it.
+				continue;
+			}
+			retSymbol.addAll((Set<SpxSymbol>)thisNamespace.resolveAll(key, searchOrigin, facade));
+		}
+		
+		return retSymbol;
+	}
+	
+	private boolean disallowLookupIn( INamespace namespace , INamespace originNamespace)
+	{
+		boolean resolveInCurrentNamespaceIsNotAllowed = namespace.isInternalNamespace() && !shouldSearchInInternalNamespace(originNamespace) ;
+		boolean currentNamespaceIsSearchedOrigin = namespace.namespaceUri() == originNamespace.namespaceUri();  // disallowing repeatative resolve of the namespace from where search originated.
+		
+		return resolveInCurrentNamespaceIsNotAllowed || currentNamespaceIsSearchedOrigin;
+	
+	}
+	
+	/**
+	 * Creates a new Internal namespace for the current package namespace.
+	 * @param enclosingNamespaceId
+	 * @param idxFacade
+	 * @return
+	 */
+	private static INamespace createInternalNamespace( NamespaceUri enclosingNamespaceId , SpxSemanticIndexFacade idxFacade)
+	{
+		NamespaceUri internalNamespaceUri = packageInternalNamespace(
+				enclosingNamespaceId, idxFacade);
+		
+		//termFactory.makeList(spoofaxNamespaceId.getAllSubterms() , "");
+		ModuleNamespace internalNamespace = (ModuleNamespace)ModuleNamespace.createInstance(internalNamespaceUri, enclosingNamespaceId, idxFacade);
+		internalNamespace.isInternalNamespace = true;
+		
+		return internalNamespace;
+	}
+
+
+	/**
+	 * @param enclosingNamespaceId
+	 * @param idxFacade
+	 * @return
+	 */
+	public static NamespaceUri packageInternalNamespace(
+			NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade idxFacade) {
+		
+		ITermFactory termFactory =  idxFacade.getTermFactory();
+		SpxPrimarySymbolTable  table =  idxFacade.persistenceManager().spxSymbolTable() ;
+		
+		List<IStrategoTerm> subTerms = new ArrayList<IStrategoTerm>();
+		
+		IStrategoList spoofaxNamespaceId = enclosingNamespaceId.id() ;
+		
+		subTerms.addAll(Arrays.asList(spoofaxNamespaceId.getAllSubterms()));
+		subTerms.add(termFactory.makeString(INTERNAL_NAMESPACENAME));
+		
+		IStrategoList internalModuleID  = termFactory.makeList(subTerms);
+		NamespaceUri internalModuleUri  = table.toNamespaceUri(internalModuleID);
+		return internalModuleUri;
+	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -28,7 +28,7 @@
 	private final static int PROJECT_NAME_INDEX    = 0;
 	private final static int IMPORT_REFERENCES_INDEX = 1;
 	
-	private final static int NO_ARGS = 3;
+	private final static int NO_ARGS = 2;
 	
 	private final SpxSemanticIndex index;
 	
@@ -46,12 +46,10 @@
 			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 			IStrategoAppl importReferences   = (IStrategoAppl) tvars[IMPORT_REFERENCES_INDEX];
 			
-			try
-			{
+			try{
 				successStatement = index.indexImportReferences(projectName, importReferences);
 			}
-			catch(Exception ex)
-			{ 
+			catch(Exception ex){ 
 				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
 			}
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -12,11 +12,13 @@
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
 import jdbm.RecordListener;
+import jdbm.SecondaryHashMap;
+import jdbm.SecondaryKeyExtractor;
 
 public class SpxCompilationUnitTable {
 	
-	private PrimaryHashMap<String , SpxCompilationUnitInfo> _infoMap;
-	private PrimaryStoreMap<Long,IStrategoTerm> _spxUnitStoreMap;
+	private final PrimaryHashMap<String , SpxCompilationUnitInfo> _infoMap;
+	private final PrimaryStoreMap<Long,IStrategoTerm> _spxUnitStoreMap;
 	
     /**
      * Listeners which are notified about changes in records
@@ -150,7 +152,8 @@
 	void remove(String absPathString) throws IOException{
 		SpxCompilationUnitInfo removedValue = _infoMap.remove(absPathString);
 		
-		if ( removedValue != null)
+		if ((removedValue != null)
+				&& _spxUnitStoreMap.containsKey(removedValue.getRecId()))
 			_spxUnitStoreMap.remove(removedValue.getRecId());
 		
 		if(!recordListeners.isEmpty())
@@ -178,8 +181,10 @@
 	
 	public void clear() throws IOException{
 		Iterator<String> keyIter = _infoMap.keySet().iterator();
-		while (keyIter.hasNext())
-			remove(keyIter.next());
+		if( keyIter != null){
+			while (keyIter.hasNext())
+				remove(keyIter.next());
+		}
 	}
 	
 	/**
@@ -197,4 +202,13 @@
 	private void removeRecordListener(RecordListener<String, SpxCompilationUnitInfo> listener) {	
 		recordListeners.remove(listener);
 	}
+	
+}
+
+interface ICompilationUnitRecordListener
+{
+	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener();
 }
+
+
+

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -13,11 +13,11 @@
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 
-public class SpxModuleLookupTable implements ICompilationUnitRecordListener{
+public class SpxModuleLookupTable implements ICompilationUnitRecordListener, IPackageDeclarationRecordListener{
 	
 	private final PrimaryHashMap<IStrategoList, ModuleDeclaration> _moduleLookupMap; 
 	
-	/* TODO : Using separate HashMap due to the consideration of converting them store map
+	/* FIXME : Using separate HashMap due to the consideration of converting them store map
 	 * to load module AST lazily. 
 	 */
 	private final PrimaryHashMap<IStrategoList, IStrategoAppl> _moduleDefinition; 
@@ -252,20 +252,40 @@
 
 	private boolean containsUri ( String absPath ) { return _moduleByFileAbsPath.containsKey(absPath);}
 	 
-	public Iterable<ModuleDeclaration> getModuleDeclarationsByPackageId(IStrategoList packageID)
+	public Iterable<ModuleDeclaration> getModuleDeclarationsByPackageId(IStrategoList packageID) throws SpxSymbolTableException
 	{
 		List<ModuleDeclaration> ret = new ArrayList<ModuleDeclaration>();
 		
 		Iterable<IStrategoList> foundModuleDecls = _moduleByPackageId.get(packageID);
 		
-		if(foundModuleDecls  != null)
-		{
+		if(foundModuleDecls  != null){
 			for ( IStrategoList l: foundModuleDecls)
 				ret.add(_moduleByPackageId.getPrimaryValue(l));
+		}else{
+			throw new SpxSymbolTableException( "Unknown Package Id "+ packageID.toString());
 		}
+		
 		return ret;
 	}
 	
+	private void removeModuleDeclarationByPackageId(IStrategoList packageId){
+		_manager.logMessage(SRC + ".removeModuleDeclarationByPackageId", "removing all the enclosed module of package "+ packageId);
+		
+		List<IStrategoList> toRemove = new ArrayList<IStrategoList>();
+		Iterable<IStrategoList> foundModuleDecls = _moduleByPackageId.get(packageId);
+		
+		if(foundModuleDecls  != null){
+			for ( IStrategoList l: foundModuleDecls)
+				toRemove.add(l);
+		}
+		
+		_manager.logMessage(SRC + ".removeModuleDeclarationByPackageId", "removing all the following modules  "+ toRemove);
+		
+		for( IStrategoList moduleId:toRemove)
+			this.remove(moduleId);
+		
+		_manager.logMessage(SRC + ".removeModuleDeclarationByPackageId", "operation successful");
+	}
 	
 	public IStrategoList packageId(IStrategoList moduleId)
 	{
@@ -284,18 +304,27 @@
 	 * @param absUri String representation of absolute path of the file 
 	 * 
 	 */
-	public void removeModuleDeclarationsByUri( String absUri)
+	public void removeModuleDeclarationsByUri(String absUri)
 	{	
-		ArrayList<IStrategoList> list = new ArrayList<IStrategoList>();
+		ArrayList<IStrategoList> delList = new ArrayList<IStrategoList>();
+		
+		_manager.logMessage(SRC + ".removeModuleDeclarationsByUri", "Removing all the module declared in "+ absUri);
 		
-		// constructing a temporary list to be removed from 
-		// the symbol table. 
-		for ( IStrategoList l: _moduleByFileAbsPath.get(absUri))
-			list.add(l);
+		if( _moduleByFileAbsPath.get(absUri) != null ){	
+			// constructing a temporary list to be removed from 
+			// the symbol table. 
+			for ( IStrategoList l: _moduleByFileAbsPath.get(absUri))
+				delList.add(l);
+
+		}
+
+		_manager.logMessage(SRC + ".removeModuleDeclarationsByUri", " Found  "+ delList + " to remove from the table.");
 		
 		// removing the package declaration from the lookup table.
-		for(Object o : list.toArray())
-			_moduleLookupMap.remove(o);
+		for(Object o : delList.toArray())
+			remove((IStrategoList)o);
+		
+		_manager.logMessage(SRC + ".removeModuleDeclarationsByUri", " removed "+ delList + " to remove from the table.");
 	}
 	
 	
@@ -307,9 +336,10 @@
 		_manager.logMessage(SRC + ".clear", "Removing "+ this.size()+" entries ");
 		
 		Iterator<IStrategoList> keyIter = _moduleLookupMap.keySet().iterator();
-		
-		while (keyIter.hasNext())
-			remove(keyIter.next());
+		if(keyIter!=null){
+			while (keyIter.hasNext())
+				remove(keyIter.next());
+		}
 	}
 	
 	
@@ -350,4 +380,27 @@
 	public Iterable<ModuleDeclaration> getModuleDeclarations() {
 		return this._moduleLookupMap.values();
 	}
+
+	
+	public RecordListener<IStrategoList, PackageDeclaration> getPackageDeclarationRecordListener() {
+		return new RecordListener<IStrategoList, PackageDeclaration>(){
+
+			public void recordInserted(IStrategoList packageID,
+					PackageDeclaration value) throws IOException {
+				// do nothing
+				
+			}
+
+			public void recordUpdated(IStrategoList packageID,
+					PackageDeclaration oldValue, PackageDeclaration newValue)
+					throws IOException {
+				// do nothing 
+			}
+
+			public void recordRemoved(IStrategoList packageID,
+					PackageDeclaration value) throws IOException {
+				
+				removeModuleDeclarationByPackageId(packageID) ;
+			}};
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -4,6 +4,7 @@
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Set;
 
 import jdbm.PrimaryHashMap;
@@ -16,102 +17,125 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 
 /**
- * SymbolTable for Spx Packages 
+ * SymbolTable for Spx Packages
  * 
  * @author Md. Adil Akhter
- * Created On : Sep 1, 2011
  */
 
-public class SpxPackageLookupTable  implements ICompilationUnitRecordListener{
+public class SpxPackageLookupTable implements ICompilationUnitRecordListener{
 
-	// Symbol table that stores package declarations 
+	// Symbol table that stores package declarations
 	private final PrimaryHashMap<IStrategoList, PackageDeclaration> _packageLookupTable;
-	private final SecondaryHashMap <String , IStrategoList , PackageDeclaration> _uriMap;
+	private final SecondaryHashMap<String, IStrategoList, PackageDeclaration> _uriMap;
 
-	//Symbol table for language descriptor
+	// Symbol table for language descriptor
 	private final PrimaryHashMap<IStrategoList, LanguageDescriptor> _languageDescriptors;
-	private final SecondaryHashMap <String , IStrategoList , LanguageDescriptor> _packagesByLangaugeName;
-	
-	private final String SRC  = this.getClass().getSimpleName();
+	private final SecondaryHashMap<String, IStrategoList, LanguageDescriptor> _packagesByLangaugeName;
+
+	private final String SRC = this.getClass().getSimpleName();
 	private final ISpxPersistenceManager _manager;
+	
+
+    /**
+     * Listeners which are notified about changes in records
+     */
+    protected List<RecordListener<IStrategoList, PackageDeclaration>> recordListeners = new ArrayList<RecordListener<IStrategoList, PackageDeclaration>>();
+
 	/**
-	 * Instantiates a lookup table for the base constructs (e.g. , packages and modules)of  Spoofaxlang.
-	 *  
-	 * @param tableName name of the table 
-	 * @param manager an instance of {@link ISpxPersistenceManager}
+	 * Instantiates a lookup table for the base constructs (e.g. , packages and
+	 * modules)of Spoofaxlang.
+	 * 
+	 * @param tableName
+	 *            name of the table
+	 * @param manager
+	 *            an instance of {@link ISpxPersistenceManager}
 	 */
-	public SpxPackageLookupTable(ISpxPersistenceManager manager)
-	{
+	public SpxPackageLookupTable(ISpxPersistenceManager manager) {
 		assert manager != null;
-		
-		String tableName = SRC+ "_"+ manager.getProjectName();
-		
+
+		String tableName = SRC + "_" + manager.getProjectName();
+
 		_manager = manager;
-		_packageLookupTable = manager.loadHashMap(manager.getProjectName() + "._lookupPackageMap.idx");
-		
-		// readonly secondary view of the the lookup table . 
-		_uriMap = _packageLookupTable.secondaryHashMapManyToOne(tableName+ "._urimap.idx", 
-				
-				new SecondaryKeyExtractor<Iterable<String>, IStrategoList, PackageDeclaration>() {
-					/**
-					 * Returns the Secondary key of the primary lookup table. 
-					 *   
-					 * @param key current primary key 
-					 * @param value value to be mapped using primary key
-					 * @return secondary key to map the value with . 
-					 */
-					public Iterable<String> extractSecondaryKey(IStrategoList key, PackageDeclaration value) {
-						
-						return value.getAllFilePaths();
-					}
-			}
-		);
-		
+		_packageLookupTable = manager.loadHashMap(manager.getProjectName()
+				+ "._lookupPackageMap.idx");
+
+		// readonly secondary view of the the lookup table .
+		_uriMap = _packageLookupTable.secondaryHashMapManyToOne(
+						tableName + "._urimap.idx",
+						new SecondaryKeyExtractor<Iterable<String>, IStrategoList, PackageDeclaration>() {
+							/**
+							 * Returns the Secondary key of the primary lookup
+							 * table.
+							 * 
+							 * @param key
+							 *            current primary key
+							 * @param value
+							 *            value to be mapped using primary key
+							 * @return secondary key to map the value with .
+							 */
+							public Iterable<String> extractSecondaryKey(
+									IStrategoList key, PackageDeclaration value) {
+
+								return value.getAllFilePaths();
+							}
+						});
+
 		initListeners();
-	
-		// initializing language Descriptor for the package   
+
+		// initializing language Descriptor for the package
 		_languageDescriptors = manager.loadHashMap(tableName+ "._languageDescriptors.idx");
-		
-		_packagesByLangaugeName = _languageDescriptors.secondaryHashMapManyToOne(tableName+ "._packagesByLangaugeName.idx", 
-				
-				new SecondaryKeyExtractor<Iterable<String>, IStrategoList, LanguageDescriptor>() {
-					/**
-					 * Returns the Secondary keys as Language Name Strings  
-					 *   
-					 * @param key current primary key 
-					 * @param value value to be mapped using primary key
-					 * @return secondary key to map the value with . 
-					 */
-					public Iterable<String> extractSecondaryKey(IStrategoList key, LanguageDescriptor value) {
-						return value.asLanguageNameStrings();
-					}
-			}
-		);
+
+		_packagesByLangaugeName = _languageDescriptors
+				.secondaryHashMapManyToOne( tableName + "._packagesByLangaugeName.idx",
+						new SecondaryKeyExtractor<Iterable<String>, IStrategoList, LanguageDescriptor>() {
+							/**
+							 * Returns the Secondary keys as Language Name
+							 * Strings
+							 * 
+							 * @param key
+							 *            current primary key
+							 * @param value
+							 *            value to be mapped using primary key
+							 * @return secondary key to map the value with .
+							 */
+							public Iterable<String> extractSecondaryKey(
+									IStrategoList key, LanguageDescriptor value) {
+								return value.asLanguageNameStrings();
+							}
+						});
 	}
-	
-	
+
 	/**
-	 * adding a record listener to remove/cleanup symbol table and make it consistent in several scenario.
+	 * adding a record listener to remove/cleanup symbol table and make it
+	 * consistent in several scenario.
 	 */
 	private void initListeners() {
-		_packageLookupTable.addRecordListener(
-				new RecordListener<IStrategoList , PackageDeclaration>(){
-
+		_packageLookupTable
+				.addRecordListener(new RecordListener<IStrategoList, PackageDeclaration>() {
 					public void recordInserted(IStrategoList key,
 							PackageDeclaration value) throws IOException {
-						// do nothing 
+						// do nothing
 					}
+
 					public void recordUpdated(IStrategoList key,
 							PackageDeclaration oldValue,
 							PackageDeclaration newValue) throws IOException {
-						
-							if(newValue.getAllFilePaths().size() == 0)
-							{
-								// since there is no URI left for the Package 
-								// removing it from the table.
-								_packageLookupTable.remove(key);
-								_languageDescriptors.remove(key);
+
+						if (newValue.getAllFilePaths().size() == 0) {
+							_manager.logMessage(SRC + ".recordUpdated", "Removing Package " + newValue + " from symbol table as it is not associated with any compunit.");
+
+							// since there is no URI left for the Package
+							// removing it from the table.
+							remove(key);
+							_languageDescriptors.remove(key);
+						}
+						else{
+							if(!recordListeners.isEmpty()){	
+								for( RecordListener<IStrategoList, PackageDeclaration> rl: recordListeners){
+									rl.recordUpdated(key, oldValue, newValue);
+								}
 							}
+						}
 					}
 
 					public void recordRemoved(IStrategoList key,
@@ -120,100 +144,129 @@
 						// removing language descriptors
 						_languageDescriptors.remove(key);
 
+						_manager.logMessage(SRC + ".recordUpdated", "Removing Package " + key + ".");
+
+						if(!recordListeners.isEmpty()){	
+							for( RecordListener<IStrategoList, PackageDeclaration> rl: recordListeners){
+								rl.recordRemoved(key, value);
+							}
+						}
 					}
-				}
-		);
-	
+				});
 	}
-	
-	private boolean containsUri ( String absPath ) { return _uriMap.containsKey(absPath);}
-	
-	/** 
-	 * Returns no of entries in this symbol table. 
+
+	private boolean containsUri(String absPath) {
+		return _uriMap.containsKey(absPath);
+	}
+
+	/**
+	 * Returns no of entries in this symbol table.
 	 * 
 	 * @return {@link Integer}
 	 */
-	public int size(){ return _packageLookupTable.size(); }
-	
+	public int size() {
+		return _packageLookupTable.size();
+	}
+
 	/**
-	 * Defines {@code PackageDeclaration} in current symbol table 
+	 * Defines {@code PackageDeclaration} in current symbol table
 	 * 
-	 * @param packageDeclaration an Instance of {@link PackageDeclaration}
+	 * @param packageDeclaration
+	 *            an Instance of {@link PackageDeclaration}
 	 */
-	public void definePackageDeclaration( PackageDeclaration packageDeclaration )
-	{
-		assert packageDeclaration 		  != null;
+	public void definePackageDeclaration(PackageDeclaration packageDeclaration) {
+		assert packageDeclaration != null;
 		assert packageDeclaration.getId() != null;
+
+		_packageLookupTable.put(packageDeclaration.getId(), packageDeclaration);
 		
-		_manager.logMessage(SRC+".definePackageDeclaration", "Indexing package declaration : "+ packageDeclaration);
-		
-		_packageLookupTable.put( packageDeclaration.getId(), packageDeclaration);
+		_manager.logMessage(SRC + ".definePackageDeclaration", "Indexed/Reindexed package declaration : " + packageDeclaration);
 	}
-	
+
 	/**
-	 * Defines {@link LanguageDescriptor}  for the Spx Package with {@code packageId} 
+	 * Defines {@link LanguageDescriptor} for the Spx Package with
+	 * {@code packageId}
 	 * 
-	 * @param packageId Qualified ID of the package
-	 * @param newDesc {@link LanguageDescriptor} of package with ID  - {@code newDesc}
+	 * @param packageId
+	 *            Qualified ID of the package
+	 * @param newDesc
+	 *            {@link LanguageDescriptor} of package with ID -
+	 *            {@code newDesc}
 	 */
-	public void defineLanguageDescriptor ( IStrategoList packageId, LanguageDescriptor newDesc) 
-	{
-		if( containsPackage (packageId))
-		{
+	public void defineLanguageDescriptor(IStrategoList packageId, LanguageDescriptor newDesc) {
+		if (containsPackage(packageId)) {
 			this._languageDescriptors.put(packageId, newDesc);
-		}
-		else
-			throw new IllegalArgumentException("Unknown Package ID : "+ packageId.toString());	
+		} else
+			throw new IllegalArgumentException("Unknown Package ID : "
+					+ packageId.toString());
 	}
-	
+
 	/**
-	 * Adds a SPX Package Declaration location 
+	 * Adds a SPX Package Declaration location
 	 * 
-	 * @param packageId Package ID represented by {@link IStrategoList} 
+	 * @param packageId
+	 *            Package ID represented by {@link IStrategoList}
 	 * @param absPath
 	 * @return
 	 */
-	public boolean addPackageDeclarationLocation( IStrategoList packageId , String absPath )
-	{
-		assert packageId!= null & absPath != null ;
-		
-		PackageDeclaration decl  = PackageDeclaration.newInstance( _packageLookupTable.get(packageId) );
-		
-		if ( decl != null)
-		{
+	public boolean addPackageDeclarationLocation(IStrategoList packageId, String absPath) {
+		assert packageId != null && absPath != null;
+
+		PackageDeclaration decl = PackageDeclaration.newInstance(_packageLookupTable.get(packageId));
+
+		if (decl != null) {
+			
+			_manager.logMessage(SRC + ".addPackageDeclarationLocation", "adding "+ absPath + " to following package : "+ packageId );
+			
 			decl.addFileUri(absPath);
-			this.definePackageDeclaration(decl);
+			this.definePackageDeclaration(decl); // redefining package 
 			return true;
 		}
 		return false;
 	}
-	
-	public boolean removePackageDeclarationLocation( IStrategoList key , String absPath )
-	{
-		assert key!= null & absPath != null ;
-		
-		PackageDeclaration decl  = PackageDeclaration.newInstance( _packageLookupTable.get(key));
-		
-		if ( decl != null){
+
+	public void removePackageDeclarationLocation(IStrategoList pId,String absPath) {
+		assert pId != null && absPath != null;
+
+		PackageDeclaration decl = PackageDeclaration.newInstance(_packageLookupTable.get(pId));
+
+		if (decl != null) {
+			
 			decl.removeFileUri(absPath);
-			// redefining it again 
-			this.definePackageDeclaration(decl);
-			return true;
+			this.definePackageDeclaration(decl); // redefining packagedeclaration
+			_manager.logMessage(SRC + ".removePackageDeclarationLocation", "removed "+ absPath + " from following package : "+ decl );
 		}
-		return false;
+		else
+			throw new IllegalArgumentException("Unknown PackageID : "+ pId);
+		
 	}
-	
+
+	void removeImportedToReferences(PackageDeclaration decl) {
+		assert decl != null;
+		PackageDeclaration packageDecl;
+
+		for (IStrategoList id : decl.getImortedToPackageReferences()) {
+			packageDecl = this.getPackageDeclaration(id);
+			if (packageDecl != null) {
+				packageDecl.removeImportedToPackageReference(decl);
+			}
+		}
+
+	}
+
 	public PackageDeclaration getPackageDeclaration(IStrategoList id) {
 		return _packageLookupTable.get(id);
 	}
-	
-	
-	public Iterable<PackageDeclaration> getPackageDeclarations(){
+
+	public Iterable<PackageDeclaration> getPackageDeclarations() {
 		return _packageLookupTable.values();
 	}
+
 	/**
-	 * Returns language descriptor associated with id 
-	 * @param id package id whose language descriptor is to be returned
+	 * Returns language descriptor associated with id
+	 * 
+	 * @param id
+	 *            package id whose language descriptor is to be returned
 	 * @return {@link LanguageDescriptor}
 	 */
 	public LanguageDescriptor getLangaugeDescriptor(IStrategoList id) {
@@ -221,130 +274,162 @@
 	}
 
 	/**
-	 * Removes a PackageDeclaration from the table 
+	 * Removes a PackageDeclaration from the table
 	 * 
-	 * @param id Package Id whose language descriptor is to be returned 
-	 * and removed from the table. 
-	 * @return associated {@link PackageDeclaration}}
+	 * @param id
+	 *            Package Id whose language descriptor is to be returned and
+	 *            removed from the table.
+	 * @return associated {@link PackageDeclaration}
+	 * @throws IOException 
 	 */
-	public PackageDeclaration remove(IStrategoList id){
-		_manager.logMessage(SRC+".remove", "Removing Package " + id + " from symbol table.");
+	public PackageDeclaration remove(IStrategoList id) throws IOException {
+		_manager.logMessage(SRC + ".remove", "Removing Package " + id + " from symbol table.");
+
+		PackageDeclaration decl = _packageLookupTable.remove(id);
+		
+		this.removeImportedToReferences(decl);
 		
-		return _packageLookupTable.remove(id);
+		_manager.logMessage(SRC + ".remove", "Removed Package " + id + " from symbol table.");
+		return decl;
 	}
+
 	/**
 	 * Returns Package located in the uri specified by {@code absUri}
+	 * 
 	 * @param absUri
-	 * @return {@link Iterable}}
+	 * @return {@link Iterable}
 	 */
-	public Iterable<PackageDeclaration> packageDeclarationsByUri( String absUri)
-	{
+	public Iterable<PackageDeclaration> packageDeclarationsByUri(String absUri) {
 		Set<PackageDeclaration> ret = new HashSet<PackageDeclaration>();
-		Iterable<IStrategoList> retList =_uriMap.get(absUri);
-		if(retList != null)
-		{
-			for ( IStrategoList l: retList)
+		Iterable<IStrategoList> retList = _uriMap.get(absUri);
+		if (retList != null) {
+			for (IStrategoList l : retList)
 				ret.add(_uriMap.getPrimaryValue(l));
 		}
 
 		return ret;
 	}
-	
-	void verifyUriExists(String uri){
-		if(!containsUri(uri)){ 
-			throw new IllegalArgumentException("Unknown Package Uri " + uri) ;
+
+	void verifyUriExists(String uri) {
+		if (!containsUri(uri)) {
+			throw new IllegalArgumentException("Unknown Package Uri " + uri);
 		}
 	}
-	
-	void verifyPackageIDExists ( IStrategoList packageId) {
-		if(!containsPackage(packageId)) { throw new IllegalArgumentException("Unknown Package ID : "+ packageId);}
-	}  
-	
+
+	void verifyPackageIDExists(IStrategoList packageId) {
+		if (!containsPackage(packageId)) {
+			throw new IllegalArgumentException("Unknown Package ID : "
+					+ packageId);
+		}
+	}
+
 	/**
-	 * Removes all packages located in the {@code absUri} 
+	 * Removes all packages located in the {@code absUri}
 	 * 
-	 * @param absUri Absolute Path of the File 
+	 * @param absUri
+	 *            Absolute Path of the File
 	 */
-	public void removePackageDeclarationsByUri( String absUri)
-	{	
+	public void removePackageDeclarationsByUri(String absUri) {
+		_manager.logMessage(SRC + ".removePackageDeclarationsByUri", "Removing following Uri for all the package declarations :"+ absUri);
+		
 		ArrayList<IStrategoList> list = new ArrayList<IStrategoList>();
+		Iterable<IStrategoList> toRemove = _uriMap.get(absUri);
 
-		Iterable<IStrategoList> toRemove =_uriMap.get(absUri);
-
-		if(toRemove != null)
-		{
-			// constructing a temporary list to be removed from 
-			// the symbol table. 
-			for ( IStrategoList l: toRemove)
+		if (toRemove != null) {
+			// constructing a temporary list to be removed from
+			// the symbol table.
+			for (IStrategoList l : toRemove) {
 				list.add(l);
+			}
 		}
-		
+
+		_manager.logMessage(SRC + ".removePackageDeclarationsByUri", "Found entries  "+ list + " to update." );
+
+
 		// removing the package declaration from the lookup table.
-		for(Object o : list.toArray())
-			remove((IStrategoList)o);
+		for (IStrategoList id : list)
+			removePackageDeclarationLocation(id, absUri);
 	}
-	
+
 	/**
-	 * Clears this symbol table. 
+	 * Clears this symbol table.
+	 * @throws IOException 
 	 */
-	public synchronized void clear() {
-		
-		_manager.logMessage(SRC+".clear", "Removing "+ this.size() + " entries from symbol table ") ;
+	public synchronized void clear() throws IOException {
+		_manager.logMessage(SRC + ".clear", "Removing " + this.size() + " entries from symbol table ");
+
 		Iterator<IStrategoList> keyIter = _packageLookupTable.keySet().iterator();
-		
-		while (keyIter.hasNext())
-			remove(keyIter.next());
-	} 
+		if(keyIter != null) {
+			while (keyIter.hasNext())
+				remove(keyIter.next());
+		}
+	}
 
 	/**
 	 * Checks whether the package with packageId exists in the symbol table.
+	 * 
 	 * @param packageId
 	 * @return
 	 */
-	public boolean containsPackage( IStrategoList packageId)
-	{
+	public boolean containsPackage(IStrategoList packageId) {
 		return _packageLookupTable.containsKey(packageId);
 	}
 
 	/**
-	 * Returns the packages indexed using languageName 
+	 * Returns the packages indexed using languageName
 	 * 
 	 * @param langaugeName
 	 * @return
 	 */
-	public Iterable<IStrategoList> getPackageIdsByLangaugeName( String langaugeName )
-	{
+	public Iterable<IStrategoList> getPackageIdsByLangaugeName(
+			String langaugeName) {
 		return _packagesByLangaugeName.get(langaugeName);
 	}
-	
-	public Iterable<IStrategoList> getPackageIdsByLangaugeName( IStrategoString langaugeName )
-	{
+
+	public Iterable<IStrategoList> getPackageIdsByLangaugeName(
+			IStrategoString langaugeName) {
 		return getPackageIdsByLangaugeName(Tools.asJavaString(langaugeName));
 	}
 
 	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener() {
-		
 		return new RecordListener<String, SpxCompilationUnitInfo>() {
-			
-			public void recordUpdated(String key, SpxCompilationUnitInfo oldValue,SpxCompilationUnitInfo newValue) throws IOException {
-				
-				if(oldValue.getVersionNo() != newValue.getVersionNo()){
-					//Whenever compilation unit version no is updated , 
-					//remove all the related module declaration 
-					//from the symbol table , since it is obsolete now. 
-					recordRemoved(key, oldValue); 
+			public void recordUpdated(String key,
+					SpxCompilationUnitInfo oldValue,
+					SpxCompilationUnitInfo newValue) throws IOException {
+
+				if (oldValue.getVersionNo() != newValue.getVersionNo()) {
+					// Whenever compilation unit version no is updated ,
+					// remove all the related module declaration
+					// from the symbol table , since it is obsolete now.
+					recordRemoved(key, oldValue);
 				}
 
 			}
-			
-			public void recordRemoved(String key, SpxCompilationUnitInfo value) throws IOException {
+
+			public void recordRemoved(String key, SpxCompilationUnitInfo value)
+					throws IOException {
 				removePackageDeclarationsByUri(key);
-				
+
 			}
-			
-			public void recordInserted(String key, SpxCompilationUnitInfo value) throws IOException {
-				//do nothing 
+
+			public void recordInserted(String key, SpxCompilationUnitInfo value)
+					throws IOException {
+				// do nothing
 			}
 		};
 	}
+
+	public void addRecordListener( final IPackageDeclarationRecordListener rl){
+		this.recordListeners.add(rl.getPackageDeclarationRecordListener());
+	}
+
+	public void removeRecordListener( final IPackageDeclarationRecordListener rl){
+		this.recordListeners.remove(rl.getPackageDeclarationRecordListener());
+	}
+}
+
+
+interface IPackageDeclarationRecordListener
+{
+	public RecordListener<IStrategoList, PackageDeclaration> getPackageDeclarationRecordListener();
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -3,15 +3,14 @@
 import java.io.IOException;
 import java.util.Properties;
 
-import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
 import jdbm.RecordManager;
 import jdbm.RecordManagerFactory;
 import jdbm.RecordManagerOptions;
 
+import org.spoofax.interpreter.library.IOAgent;
+
 /**
  * PersistenceManager responsible for initializing and maintaining various 
  * symbol table needed for SpoofaxLang Implementation. 
@@ -28,26 +27,28 @@
 	private static final String SRC =   "SpxPersistenceManager" ;
 	
 	
-	private final RecordManager _recordManager;
-	private final String _indexDirectory;  
+	private final RecordManager _recordManager; 
+	private final String _indexDirectory;   
 	private final IOAgent _agent;
 	private final String _projectName ;
 	
 	private SpxCompilationUnitTable _spxUnitsTable;  
 	private SpxPackageLookupTable _spxPackageTable;
 	private SpxModuleLookupTable _spxModuleTable;
+	private SpxPrimarySymbolTable _spxSymbolTable;
+
 
 	/**
 	 * Instantiates a new instance of SpxPersistenceManager. Main Responsibility of this class  
 	 * is to store symbol table in disk and manage it . 
 	 * 
-	 * @param projectName
-	 * @param projectAbsPath
-	 * @param ioAgent
+	 * @param spxSemanticIndexFacade
 	 * @throws IOException
 	 */
-	public SpxPersistenceManager(String projectName, String projectAbsPath , IOAgent ioAgent) throws IOException{
-		this(projectName, projectAbsPath+ "/.Index" ,ioAgent, null );
+	public SpxPersistenceManager(SpxSemanticIndexFacade spxSemanticIndexFacade) throws IOException{
+		this(spxSemanticIndexFacade, null);
+	
+		//TODO FIXME: dont like this coupling. rethink and refactor. 
 	}
 	
 	
@@ -58,58 +59,62 @@
 	 * @param options
 	 * @throws IOException
 	 */
-	SpxPersistenceManager (String projectName ,String indexDirectory,  IOAgent ioAgent,Properties options) throws IOException
-	{
-		this._agent = ioAgent;
-		this._projectName = projectName;
-		this._indexDirectory = indexDirectory;
+	private SpxPersistenceManager (SpxSemanticIndexFacade spxSemanticIndexFacade,Properties options) throws IOException {
+		assert spxSemanticIndexFacade != null : "SpxSemanticIndexFacade is expected to be nonnull" ;
+		
+		this._agent = spxSemanticIndexFacade.getIOAgent();
+		this._projectName = spxSemanticIndexFacade.getProjectNameString() ;
+		this._indexDirectory = _agent.getWorkingDir()+ "/.Index";
 		
 		if( options  == null)
 			options = new Properties();// Creating empty properties collection if it is null
 		
-		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, indexDirectory + "/" + projectName + ".idx");
-		
-		_recordManager = RecordManagerFactory.createRecordManager(projectName , options);
-		
-		initTables(projectName);
-		initListeners();
+		//setting properties of RecordManager
+		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, _indexDirectory + "/" + _projectName + ".idx");
+		options.put(RecordManagerOptions.CACHE_TYPE, "auto");
+		//options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "true");
+
+		_recordManager = RecordManagerFactory.createRecordManager(_projectName , options);
 		
-		logMessage(SRC+".ctor" , "Instantiation of PersistenceManager is done. Index Directory : "+ _indexDirectory );
+		logMessage(SRC + ".ctor" , "Instantiation of PersistenceManager is done. Index Directory : "+ _indexDirectory );
 	}
 
+
 	/**
 	 * Initializes Symbol Tables for {@code projectName} Project
 	 * 
 	 * @param projectName name of the Project 
 	 */
-	private void initTables(String projectName) {
+	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade) {
 		
 		_spxUnitsTable   = new SpxCompilationUnitTable(this);
 		_spxPackageTable = new SpxPackageLookupTable(this);
 		_spxModuleTable  = new SpxModuleLookupTable(this);
-	
-		// TODO : add primary symbol table
+		_spxSymbolTable = new SpxPrimarySymbolTable(facade);
+		
+		initListeners();
 	}
 	
 	
 	/**
-	 * Initializes RecordListeners
+	 * Initializes RecordListeners i.e. chain record listeners among the tables 
+	 * to keep the consistency of inter-table symbols.
 	 */
 	private void initListeners()
 	{
-		// chain record listeners among the tables to keep the consistency in inter-table symbols. 
 		// If compilation unit is removed, automatically remove packages.
-		// If package is removed , automatically remove the modules that is located 
-		// in that particular compilation units 
-		
 		_spxUnitsTable.addRecordListener((ICompilationUnitRecordListener)_spxPackageTable);
+		
+		// also automatically remove the modules that is located 
+		// in that particular compilation units 
 		_spxUnitsTable.addRecordListener((ICompilationUnitRecordListener)_spxModuleTable);
 		
 		
-		//TODO : Chain package removed event so that whenever a package is removed from
-		//symbol table, remove enclosing module declaration.  Currently it is linked with 
-		//the record listener of the SpxCompilationUnit. Hence, whenever a SpxCompilationUnit
-		//is updated , it updates both package and module table and underlying symbols .
+		// whenever a package is deleted from the SpxPackageLookupTable, all the enclosed 
+		// modules are also deleted. 
+		// Hence, adding following record listener to do that automatically rather invoking
+		// it explicitly.
+		_spxPackageTable.addRecordListener((IPackageDeclarationRecordListener)_spxModuleTable);
 	}
 	
 	/**
@@ -166,24 +171,13 @@
 		this.close();
 	}
 
-	public SpxCompilationUnitTable spxCompilcationUnitTable() {
-		
-		return _spxUnitsTable;
-	}
+	public SpxCompilationUnitTable spxCompilcationUnitTable() { return _spxUnitsTable; }
 
-	public boolean IsClosed() {
-		
-		return _recordManager.IsClosed();
-		
-	}
+	public boolean IsClosed() { return _recordManager.IsClosed(); }
 
-	public SpxPackageLookupTable spxPackageTable() {
-		return _spxPackageTable;
-	}
+	public SpxPackageLookupTable spxPackageTable() { return _spxPackageTable; }
 
-	public SpxModuleLookupTable spxModuleTable() {
-		return _spxModuleTable;
-	}	
+	public SpxModuleLookupTable spxModuleTable() { return _spxModuleTable; }	
 
 	public void clearAll() throws IOException{
 		try
@@ -191,6 +185,7 @@
 			this._spxUnitsTable.clear();	
 			this._spxPackageTable.clear();
 			this._spxModuleTable.clear();
+			this._spxSymbolTable.clear();
 			
 			logMessage(SRC + ".clearAll", "SymbolTable is cleaned successfully. ");
 		}catch(IOException ex)
@@ -207,21 +202,23 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager#logMessage(java.lang.String, java.lang.String)
 	 */
 	public void logMessage(String origin, String message) {
-		if(DEBUG)
-		{		
+		if(DEBUG){		
 			try {
 				_agent.getWriter(IOAgent.CONST_STDOUT).write(
 						"[" + this._projectName + "." + origin + "]   " + message
 								+ "\n");
 			} 
-			catch (IOException e) {
-				
-			}
+			catch (IOException e) {}
 		}
 	}
 
 	public String getProjectName() {
 		return _projectName;
 	}
+
+
+	public SpxPrimarySymbolTable spxSymbolTable() {
+		return _spxSymbolTable;
+	}
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,47 +1,132 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.util.Iterator;
+import java.util.Set;
+
 import jdbm.PrimaryMap;
 import jdbm.SecondaryHashMap;
 import jdbm.SecondaryKeyExtractor;
 
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SpxPrimarySymbolTable implements INamespaceResolver{
 	
 	private final ISpxPersistenceManager _manager; // Persistence Manager
-	
-	private final PrimaryMap <NamespaceId,INamespace> namespaces;
-	private final SecondaryHashMap <IStrategoList,NamespaceId,INamespace> namespaceByStrategoId;
-	
-	public SpxPrimarySymbolTable (String tableName, ISpxPersistenceManager manager){
-		_manager = manager;
+	private final PrimaryMap <NamespaceUri,INamespace> namespaces;
+	private final SecondaryHashMap <IStrategoList,NamespaceUri,INamespace> namespaceByStrategoId;
+	private transient INamespace _activeNamespace ;
+	
+	//TODO implement remove package and remove module event handlers
+	public SpxPrimarySymbolTable (SpxSemanticIndexFacade facade){
+		assert facade != null  : "SpxSemanticIndexFacade  is expected to non-null" ;
+		_manager = facade.persistenceManager();
+
+		String tableName = _manager.getProjectName() + "primary_symbol_table.idx";
 		
 		namespaces  = _manager.loadHashMap(tableName + "namespaces.idx");
-		
 		namespaceByStrategoId = namespaces.secondaryHashMap(tableName+ ".namespaceByStrategoId.idx", 
-				new SecondaryKeyExtractor<IStrategoList,NamespaceId,INamespace>()
+				new SecondaryKeyExtractor<IStrategoList,NamespaceUri,INamespace>()
 				{
-					public IStrategoList extractSecondaryKey(NamespaceId k,INamespace v) {
-						return k.ID(); 
+					public IStrategoList extractSecondaryKey(NamespaceUri k,INamespace v) {
+						return k.id(); 
 					}
 				});
+		
+		addGlobalNamespace(facade);
+	}
+	
+	/**
+	 * Adding Global Namespace in symbol-table by default.
+	 * @param facade
+	 */
+	public void addGlobalNamespace(SpxSemanticIndexFacade facade){
+		
+		this.defineNamespace(GlobalNamespace.createInstance(facade));
 	}
 	
-	public Iterable<INamespace> getNamespaces(IStrategoList id){
-		return namespaceByStrategoId.getPrimaryValues(id);
+	public void defineNamespace(INamespace namespace) {
+		// if not already defined, defining this namespace
+		if (!containsNamespace(namespace))
+			this.namespaces.put(namespace.namespaceUri(), namespace);
 	}
 	
+	NamespaceUri toNamespaceUri(IStrategoList spoofaxId) {
+		NamespaceUri uri = getNamespaceUri(spoofaxId);
+		if(uri == null) {
+			uri = new NamespaceUri(spoofaxId);
+		}
+		return uri;
+	}
+	
+	public INamespace resolveNamespace(IStrategoList id){
+		Iterator<INamespace> resolvedNamespaces = namespaceByStrategoId.getPrimaryValues(id).iterator();
+		if(resolvedNamespaces.hasNext())
+			return resolvedNamespaces.next();
+		else
+			return null;
+	}
 	
-	public INamespace resolveNamespace(NamespaceId id) {
+	public INamespace resolveNamespace(NamespaceUri id) {
 		return namespaces.get(id); 
 	}
 	
-	public void define(IStrategoList namespaceId , SpxSymbol symbol)
-	{
+	public NamespaceUri getNamespaceUri(IStrategoList id) {
+		Iterable<NamespaceUri> uriIterator = namespaceByStrategoId.get(id);
+		if(uriIterator != null)
+			for( NamespaceUri uri : uriIterator)
+				return uri;
 		
+		return null;
 	}
-}
+	
+	public boolean containsNamespace(IStrategoList id) { return namespaceByStrategoId.containsKey(id);}
+	
+	public boolean containsNamespace(NamespaceUri namespaceId) { return namespaces.containsKey(namespaceId);}
+	
+	public boolean containsNamespace(INamespace namespace) { return this.containsNamespace(namespace.namespaceUri());}
 
+	public void clear(){  namespaces.clear();  }
+	
+	public int size() { return namespaces.size();}
+	 
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "SpxPrimarySymbolTable ( defined namespaces : " + namespaces.keySet() + ")";
+	}
+	
+	public Set<NamespaceUri> getAllNamespaces() { return namespaces.keySet() ; }
+
+	public void defineSymbol(SpxSemanticIndexFacade facade, IStrategoList namespaceId ,  SpxSymbolTableEntry symTableEntry) {
+		
+		ensureActiveNamespaceLoaded(namespaceId);
+	
+		_activeNamespace.define(symTableEntry, facade.persistenceManager()); 
+	}
+	
+	private void ensureActiveNamespaceLoaded(IStrategoList namespaceId){
+		if(_activeNamespace== null ||!_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId))
+			//Keeping a transient reference to the current/active Namespace
+			//More likely that there are other symbols to be defined in the
+			//current and active namespace. In that case, it will imporve 
+			//performance as namespace resolving avoided by means of extra 
+			//caching
+			_activeNamespace = this.resolveNamespace(namespaceId);
+	}
+	
+
+
+	public Iterable<SpxSymbol> resolveSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
+		ensureActiveNamespaceLoaded(namespaceId);
+		
+		return _activeNamespace.resolveAll(symbolId, symbolType ,spxSemanticIndexFacade);
+	} 
+}
 
 
 
@@ -56,15 +141,6 @@
 
 /*
  
-// Ctor x Scope x ID x Symbol -> Definition 
-symbol : Term x  Term x Term x Term -> def 
-
-- define symbol 
-{
-    scope = symbolTable.getActiveScope( scope) 
-    scope.defineSymbol ( Ctor , ID , Symbol) ;
-
-}
 
 - symbol FindSymbol( Scope, ID , CTOR )
 {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,7 +1,10 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import java.io.IOException;
-import java.util.HashMap;
+
+import jdbm.PrimaryHashMap;
+import jdbm.RecordManager;
+import jdbm.RecordManagerFactory;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -26,6 +29,7 @@
 	 */
 	private final SpxSemanticIndexFacadeRegistry _facadeRegistry;
 	
+		
 	public SpxSemanticIndex()
 	{
 		_facadeRegistry = new SpxSemanticIndexFacadeRegistry();
@@ -45,7 +49,7 @@
 
 		try
 		{	
-			new IIndexManageCommand(){
+			new SpxIndexManageCommand(){
 				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
 					// Adding a new entry of the facade for the project 
 					// in the registry. 
@@ -68,7 +72,7 @@
 		}	
 	}
 	
-	private boolean executeIndexer(IStrategoString projectName , IStrategoAppl appl , IIndexer indexer) throws Exception
+	private boolean executeIndexer(IStrategoString projectName , IStrategoAppl appl , SpxIndexer indexer) throws Exception
 	{
 		boolean successStatement = false;
 		try {
@@ -110,20 +114,20 @@
 	public boolean indexImportReferences(IStrategoString projectName,
 			final IStrategoAppl importReferences) throws Exception {
 	
-		IIndexer idx = new IIndexer() {
+		SpxIndexer idx = new SpxIndexer() {
 			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexImportReferences(importReferences);
 			}
 		};
-		return executeIndexer(projectName, importReferences,  idx);
-	
+		
+		return idx.executeIndexer(projectName, importReferences);
 	}
 	
 	// Index module definition . 
 	public boolean indexModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleDefinition) throws Exception
 	{
-		IIndexer idx = new IIndexer() {
+		SpxIndexer idx = new SpxIndexer() {
 			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexModuleDefinition(moduleDefinition);
@@ -133,7 +137,7 @@
 	}
 	
 	public boolean indexPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageDecl) throws Exception {
-		IIndexer idx = new IIndexer() {
+		SpxIndexer idx = new SpxIndexer() {
 			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexPackageDeclaration(packageDecl);
@@ -144,15 +148,13 @@
 	}
 
 	public boolean indexLanguageDescriptor(IStrategoString projectName,	final IStrategoAppl languageDescriptor) throws Exception {
-		IIndexer idx = new IIndexer() {
-			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception  {
+		return new SpxIndexer() {
+			public void index(IStrategoString projectName, IStrategoAppl appl)
+					throws Exception {
 				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 				idxFacade.indexLanguageDescriptor(languageDescriptor);
-				}
-		};
-		
-
-		return executeIndexer(projectName, languageDescriptor,  idx);
+			}
+		}.executeIndexer(projectName, languageDescriptor);
 	}
 	
 	/**
@@ -304,7 +306,7 @@
 		boolean retValue = false; 
 		try
 		{
-			new IIndexManageCommand(){
+			new SpxIndexManageCommand(){
 				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
 					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 					idxFacade.reinitSymbolTable();
@@ -339,7 +341,7 @@
 		boolean retValue = false; 
 		try
 		{
-			new IIndexManageCommand(){
+			new SpxIndexManageCommand(){
 				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
 					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 					idxFacade.persistChanges();
@@ -362,7 +364,7 @@
 	}
 	
 	public boolean close(IStrategoTerm projectName) throws Exception {
-		new IIndexManageCommand(){
+		new SpxIndexManageCommand(){
 			public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
 				_facadeRegistry.removeFacade(projectName);
 
@@ -410,5 +412,32 @@
 			throw new IllegalStateException("Spoofaxlang Semantic index not initialized");
 	}
 
+	private abstract class SpxIndexer 
+	{	
+		public boolean executeIndexer(IStrategoString projectName , IStrategoAppl appl) throws Exception{
+			boolean successStatement = false;
+			try {
+				index(projectName, appl);
+				successStatement  = true;
+			}
+			catch(IllegalStateException e)
+			{
+				tryCleanupResources(projectName);
+				throw e;
+			}
+			catch(Error er)
+			{
+				tryCleanupResources(projectName);
+				throw er;
+			}
+			return successStatement;
+		}
 		
+		public abstract void index(IStrategoString projectName , IStrategoAppl appl) throws Exception ;
+	}
+
+	private static abstract class SpxIndexManageCommand 
+	{
+		public abstract void executeCommnad(IStrategoTerm projectName , Object... objects) throws Exception;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -14,23 +14,30 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.terms.TermConverter;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.terms.attachments.TermAttachmentSerializer;
 import org.spoofax.terms.attachments.TermAttachmentStripper;
 
 public class SpxSemanticIndexFacade {
 	
+	//TODO :  refactor this class  to multiple adapters one for package, one for modules 
+	//TODO FIXME : combine symbol table and index
+	
 	private final ISpxPersistenceManager _persistenceManager;
 	private final String _projectName ; 
 	private final ITermFactory _termFactory;
 	private final IOAgent _agent;
 	private final TermAttachmentStripper _stripper;
+	private final TermAttachmentSerializer _termAttachmentSerializer;
 	private final TermConverter _converter;
-	private static final String All= "*";
-	
-	private final HashMap<ConstructorDef , IStrategoConstructor> _knownCons;
+	private static final String All     = "*";
+	private static final String CURRENT = ".";
 	
+	public TermAttachmentSerializer getTermAttachmentSerializer() {return _termAttachmentSerializer;}
+
 	/**
 	 * Initializes the SemanticIndexFactory
 	 * @param projectName name of the project 
@@ -49,11 +56,16 @@
 		_converter = new TermConverter(_termFactory);
 		_converter.setOriginEnabled(true);
 		
-		_knownCons = new HashMap<ConstructorDef ,IStrategoConstructor>();
-		_persistenceManager = new SpxPersistenceManager(_projectName , _agent.getWorkingDir(),agent);
+		_termAttachmentSerializer = new TermAttachmentSerializer(_termFactory);
 		
+		_knownCons = new HashMap<ConstructorDef ,IStrategoConstructor>();
 		initKnownConstructors();
+		
+		_persistenceManager = new SpxPersistenceManager(this);
+		_persistenceManager.initializeSymbolTables(this._projectName, this);
 	}
+	
+		
 	/**
 	 * Returns the TermFactory 
 	 * @return
@@ -78,51 +90,51 @@
 	 * Returns an instance of the Persistence Manager active for the current Facade
 	 * @return
 	 */
-	ISpxPersistenceManager getPersistenceManager(){	return _persistenceManager; }
-
-	
-	String fromFileURI(URI uri) {
-		File file = new File(uri);
-		return file.toString();
-	}
+	public ISpxPersistenceManager persistenceManager(){	return _persistenceManager; }
 
-	IOAgent getIOAgent() {
-		return _agent;
-	}
 	
 	/**
-	 * Prints error message
-	 * @param errMessage
+	 * Returns CompilationUnit located in {@code spxCompilationUnitPath} as {@link IStrategoTerm}
+	 * 
+	 * @param spxCompilationUnitPath Location to the CompilationUnit
+	 * @return {@link IStrategoTerm} 
 	 */
-	void printError(String errMessage){
-		_agent.printError(errMessage);
+	public IStrategoTerm getCompilationUnit(IStrategoString spxCompilationUnitPath)
+	{
+		IStrategoAppl retTerm = null; 
+		URI resUri = toFileURI(spxCompilationUnitPath);
+		
+		logMessage("SpxSemanticIndexFacade.getCompilationUnit . Arguments : " + spxCompilationUnitPath);
+		
+		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+		
+		IStrategoAppl term = (IStrategoAppl)table.get(resUri);
+		
+		if ( term != null)
+			retTerm = forceImploderAttachment(term, resUri);
+		
+		logMessage("SpxSemanticIndexFacade.getCompilationUnit :  Returning Following APPL for uri " + resUri +  " : "+ retTerm);
+		
+		return retTerm;
 	}
-	
+
 	/**
-	 * Force an imploder attachment for a term.
-	 * This ensures that there is always some form of position info,
-	 * and makes sure that origin info is not added to the term.
-	 * (The latter would be bad since we cache in {@link #term}.)
+	 * Removes CompilationUnit located in {@code spxCompilationUnitPath} file path.  
+	 * 
+	 * @param spxCompilationUnitPath file path
+	 * @throws IOException
 	 */
-	public static IStrategoAppl forceImploderAttachment(IStrategoAppl term , URI file) {
-		return forceImploderAttachment(term, term, file);
-	}
-	
-	public static IStrategoAppl forceImploderAttachment(IStrategoTerm id, IStrategoAppl term , URI file) {
+	public void removeCompilationUnit( IStrategoString spxCompilationUnitPath ) throws IOException
+	{
+		URI resUri = toFileURI(spxCompilationUnitPath);
 		
-		ImploderAttachment attach = ImploderAttachment.get(id);
-		if (attach != null) {
-			ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(), attach.getRightToken());
-		} else {
-			String fn = file == null ? null : file.toString();
-			term.putAttachment(ImploderAttachment.createCompactPositionAttachment(
-					fn, 0, 0, 0, -1));
-		}
-		return term;
+		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+		
+		table.remove(resUri);
 	}
 	
 	/**
-	 * Adds CompilationUnit in the symbol table.
+	 * Indexes CompilationUnit in the symbol table.
 	 * 
 	 * @param spxCompilationUnitPath path of the SpxCompilation Unit. It can be a relative path (  relative to project) or absolute path. 
 	 * @param spxCompilationUnitAST SPXCompilationUnit AST 
@@ -143,45 +155,57 @@
 		table.define(resUri, astTerm);
 	}
 
+	
 	/**
-	 * Returns CompilationUnit located in {@code spxCompilationUnitPath} as {@link IStrategoTerm}
+	 * Indexes {@code moduleDefinition}
 	 * 
-	 * @param spxCompilationUnitPath Location to the CompilationUnit
-	 * @return {@link IStrategoTerm} 
+	 * @param moduleDefinition
+	 * @throws IllegalArgumentException
 	 */
-	public IStrategoTerm getCompilationUnit(IStrategoString spxCompilationUnitPath)
+	public void indexModuleDefinition(IStrategoAppl moduleDefinition) throws IllegalArgumentException
 	{
-		IStrategoAppl retTerm = null; 
-		URI resUri = toFileURI(spxCompilationUnitPath);
-		
-		logMessage("SpxSemanticIndexFacade.getCompilationUnit . Arguments : " + spxCompilationUnitPath);
-		
-		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
-		
-		IStrategoAppl term = (IStrategoAppl)table.get(resUri);
-		
-		if ( term != null)
-			retTerm = forceImploderAttachment(term, resUri);
-		
-		logMessage("SpxSemanticIndexFacade.getCompilationUnit :  Returning Following APPL for uri " + resUri +  " : "+ retTerm);
+		verifyConstructor(moduleDefinition.getConstructor() , getModuleDefCon() , "Illegal Module Definition" );
 		
-		return retTerm;
+		indexModuleDefinition(
+				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.ModuleTypedQNameIndex),
+				(IStrategoString) moduleDefinition.getSubterm(ModuleDeclaration.ModulePathIndex),
+				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.PackageTypedQNameIndex),
+				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.AstIndex),
+				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.AnalyzedAstIndex));
 	}
-	
 
 	/**
-	 * Removes CompilationUnit located in {@code spxCompilationUnitPath} file path.  
+	 * Indexes Module Definition, e.g. ModuleDef :  Module * String * Package * Term * Term -> Def
 	 * 
-	 * @param spxCompilationUnitPath file path
-	 * @throws IOException
+	 * @param moduleQName
+	 * @param spxCompilationUnitPath
+	 * @param packageQName
+	 * @param ast
+	 * @param analyzedAst
 	 */
-	public void removeCompilationUnit( IStrategoString spxCompilationUnitPath ) throws IOException
-	{
-		URI resUri = toFileURI(spxCompilationUnitPath);
+	public void indexModuleDefinition(IStrategoAppl moduleQName,
+			IStrategoString spxCompilationUnitPath, IStrategoAppl packageQName,
+			IStrategoAppl ast, IStrategoAppl analyzedAst) {
+
+		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
+
+		IStrategoList moduleId = ModuleDeclaration.getModuleId( this, moduleQName);
+		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageQName);
 		
-		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+		_persistenceManager.spxPackageTable().verifyPackageIDExists(packageId) ;
 		
-		table.remove(resUri);
+		moduleId = (IStrategoList) toCompactPositionInfo(moduleId);
+		packageId = (IStrategoList) toCompactPositionInfo(packageId);
+		ast = (IStrategoAppl) ast;
+		analyzedAst = (IStrategoAppl)analyzedAst;
+		spxCompilationUnitPath = (IStrategoString) spxCompilationUnitPath;
+
+		ModuleDeclaration mDecl = new ModuleDeclaration(toAbsulatePath(spxCompilationUnitPath), moduleId, packageId);
+		// updating/adding module to index 
+		table.define(mDecl , ast, analyzedAst);
+		
+		//Defining ModuleNamespace for Symbol-Table
+		defineNamespace(mDecl);
 	}
 
 	/**
@@ -190,17 +214,15 @@
 	 * @param packageDeclaration
 	 */
 	public void indexPackageDeclaration(IStrategoAppl packageDeclaration){
-		verifyConstructor(
-				packageDeclaration.getConstructor(), 
-				getPackageDeclCon(), 
-				"Illegal PackageDeclaration");
+		verifyConstructor( packageDeclaration.getConstructor(), getPackageDeclCon(), "Illegal PackageDeclaration");
 	
 		indexPackageDeclaration(
 				(IStrategoAppl)  packageDeclaration.getSubterm(PackageDeclaration.PACKAGE_ID_INDEX), // package id
 				(IStrategoString)packageDeclaration.getSubterm(PackageDeclaration.SPX_COMPILATION_UNIT_PATH)  // package location absolute path  
 		);
 	}
-
+	
+	
 	/**
 	 * Indexes {@link PackageDeclaration}
 	 * 
@@ -208,63 +230,129 @@
 	 * @param spxCompilationUnitPath
 	 */
 	public void indexPackageDeclaration(IStrategoAppl packageIdAppl, IStrategoString spxCompilationUnitPath){
+		
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
+		SpxCompilationUnitTable spxTable = _persistenceManager.spxCompilcationUnitTable();
 		
 		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageIdAppl);
 		
+		//verify valid package URI. Checking whether compilation unit exist with this URI
+		// in compilation unit table.
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
+		String absFilePath = toAbsulatePath(spxCompilationUnitPath);
+		spxTable.verifyUriExists(absFilePath);
+
 		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
 		
+		
 		if(table.containsPackage(packageId)){
- 			table.addPackageDeclarationLocation(
-					packageId, 
-					toAbsulatePath(spxCompilationUnitPath));
+			// Package is already there in the index. Hence,just adding the Uri where 
+			// this package declaration is found.
+			table.addPackageDeclarationLocation(packageId,absFilePath);
+ 			
 		}else{	
-			PackageDeclaration pDecl = new PackageDeclaration(
-					toAbsulatePath(spxCompilationUnitPath), 
-					packageId);
+			// Defining PackageDeclaration in the Index
+			PackageDeclaration pDecl = new PackageDeclaration(absFilePath,packageId);
 			table.definePackageDeclaration(pDecl);
+			
+			defineNamespace(pDecl); 
 		}
 	}
 	
+	
+	// SymbolDef : namespace * type * id * value -> Def  
+	public void indexSymbol(IStrategoAppl symbolDefinition) throws SpxSymbolTableException, IOException{	
+		final int NAMESPACE_ID_INDEX  = 0;
+		verifyConstructor(symbolDefinition.getConstructor(), getSymbolTableEntryDefCon(), "Illegal SymbolDefinition argument");
+		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)symbolDefinition.getSubterm(SpxSymbolTableEntry.SYMBOL_ID_INDEX));
+
+		// Constructing Spx Symbol-Table Entry from the provided symbolDefinition argument.  
+		// Note: TermAttachment or Annotation are stripped from the ID Term since, in symbol-table, term attachments 
+		// is not require and will make the equals operation a bit complicated. 
+		SpxSymbolTableEntry entry = 
+			SpxSymbolTableEntry.newEntry()
+						  .with(
+								  strip(symbolDefinition.getSubterm(SpxSymbolTableEntry.SYMBOL_ID_INDEX))
+						   )
+						  .instanceOf(typeCtor)	
+					      .uses(this._termAttachmentSerializer)
+					      .data(symbolDefinition.getSubterm(SpxSymbolTableEntry.DATA_INDEX))
+					      .build();
+					   		
+		
+		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		symbolTable.defineSymbol(this, getNamespaceId((IStrategoAppl)symbolDefinition.getSubterm(NAMESPACE_ID_INDEX)), entry);
+	}
+	
+	
+	// (namespace * idTolookupFor * type constructor)
+	public Iterable<IStrategoTerm> resolveSymbols(IStrategoTuple symbolLookupTerm) throws SpxSymbolTableException{
+		if (symbolLookupTerm.getSubtermCount() != 3)
+			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + symbolLookupTerm.getSubtermCount());
+		
+		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)symbolLookupTerm.getSubterm(2));
+		return resolveSymbols( 
+				(IStrategoAppl)symbolLookupTerm.get(0),
+				symbolLookupTerm.get(1),
+				typeCtor
+		); 
+			 
+	}
+
 	/**
-	 * @param importReferences
+	 * @param symbolLookupTerm
+	 * @return
+	 * @throws IllegalArgumentException
 	 */
-	public void indexImportReferences(IStrategoAppl importReferences) {
-		
-		IStrategoAppl namespaceId = (IStrategoAppl) importReferences.getSubterm(0);
-		IStrategoList imports = (IStrategoList) importReferences.getSubterm(1);
-		
-		if (namespaceId.getConstructor() == getModuleQNameCon()) {
-			ModuleDeclaration moduleDecl = lookupModuleDecl(namespaceId);
-			
-			moduleDecl.addImportRefernces(imports);
-			
-			getPersistenceManager().spxModuleTable().define(moduleDecl);
-		} else if (namespaceId.getConstructor() == getPackageQNameCon()) {
+	private IStrategoConstructor verifyKnownContructorExists(IStrategoAppl symbolType) throws IllegalArgumentException {
+		IStrategoConstructor typeCtor = getConstructor( symbolType.getConstructor().getName(), symbolType.getConstructor().getArity()) ;
+		if(typeCtor == null) {
+			throw new IllegalArgumentException("Illegal Argument . Unknown Symbol Type. Found " + symbolType.getConstructor());
+		}
+		return typeCtor;
+	}
 
-			PackageDeclaration pDecl = this.lookupPackageDecl(namespaceId);
-			
-			pDecl.addImportRefernces(imports);
-			
-			getPersistenceManager().spxPackageTable().definePackageDeclaration(	pDecl);
-		} else
-			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
+	
+	public Iterable<IStrategoTerm> resolveSymbols(IStrategoAppl namespaceToStartSearchWith , IStrategoTerm symbolId , IStrategoConstructor symbolType ) throws SpxSymbolTableException{	
+		return SpxSymbol.toTerms(this, lookupSpxSymbols(namespaceToStartSearchWith, symbolId, symbolType));
 	}
 
-	public IStrategoTerm getImportReferences(IStrategoAppl namespaceId) {
-		IdentifiableConstruct ns; 
+	/**
+	 * @param namespaceToStartSearchWith
+	 * @param symbolId
+	 * @param symbolType
+	 * @return
+	 * @throws SpxSymbolTableException
+	 */
+	private Iterable<SpxSymbol> lookupSpxSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType)
+			throws SpxSymbolTableException {
+		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 
-		if (namespaceId.getConstructor() == getModuleQNameCon()) {
-			ns = lookupModuleDecl(namespaceId);
-		} else if (namespaceId.getConstructor() == getPackageQNameCon()) {
-			ns = this.lookupPackageDecl(namespaceId);
-		} else
-			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
+		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
 		
-		return ns.getImports(this);
+		Iterable<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(this, namespaceID, strip(symbolId), symbolType);
+		return resolvedSymbols;
 	}
-
+	
+	
+	/**
+	 * @param namespaceTypedQname
+	 * @return
+	 * @throws SpxSymbolTableException
+	 */
+	private IStrategoList getNamespaceId(IStrategoAppl namespaceTypedQname) throws SpxSymbolTableException {
+		IStrategoList namespaceId;
+		
+		
+		if (namespaceTypedQname.getConstructor() == getModuleQNameCon() || namespaceTypedQname.getConstructor() == getPackageQNameCon()) {
+			namespaceId = IdentifiableConstruct.getID(this, (IStrategoAppl) namespaceTypedQname.getSubterm(0));
+		} else if (namespaceTypedQname.getConstructor() == getGlobalNamespaceTypeCon()) {
+			namespaceId = GlobalNamespace.getGlobalNamespaceId(this);
+		} else
+			throw new SpxSymbolTableException("Unknown namespace uri : " + namespaceTypedQname);
+		return namespaceId;
+	}	
+	
 	/**
 	 * Indexes LanguageDescriptor for a particular Package specified in {@code langaugeDescriptor}
 	 * 
@@ -279,29 +367,98 @@
 
 		table.verifyPackageIDExists(qualifiedPackageId) ;
 
-		//TODO : move the following logic to extract information and 
+		//FIXME : move the following logic to extract information and 
 		//construct instance in respective classes . e.g. in LanguageDesrciptor class
 		qualifiedPackageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)qualifiedPackageId);
 
 		IStrategoList lNames = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageNamesIndex));
 		IStrategoList lIds = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageIdsIndex));
 		IStrategoList lEsvStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.EsvStartSymbolsIndex));
-		IStrategoList lSDFStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.SdfStartSymbolsIndex));
+		IStrategoList lSdfStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.SdfStartSymbolsIndex));
 
 		LanguageDescriptor current = table.getLangaugeDescriptor(qualifiedPackageId);
-		if( current != null)
-		{	
+		if( current != null){	
 			current.addEsvDeclaredStartSymbols(this.getTermFactory(), lEsvStartSymbols);
-			current.addSDFDeclaredStartSymbols(this.getTermFactory(), lSDFStartSymbols );
+			current.addSDFDeclaredStartSymbols(this.getTermFactory(), lSdfStartSymbols );
 			current.addLanguageIDs(this.getTermFactory(), lIds);
 			current.addLanguageNames(this.getTermFactory(), lNames);
 		}
 		else
-			current = LanguageDescriptor.newInstance(this.getTermFactory() , qualifiedPackageId , lIds, lNames,lSDFStartSymbols , lEsvStartSymbols);
+			current = LanguageDescriptor.newInstance(this.getTermFactory() , qualifiedPackageId , lIds, lNames,lSdfStartSymbols , lEsvStartSymbols);
 
 		table.defineLanguageDescriptor(qualifiedPackageId, current);
 
 	}
+
+	
+	/**
+	 * @param importReferences
+	 */
+	public void indexImportReferences(IStrategoAppl importReferences) throws SpxSymbolTableException{
+		
+		IStrategoAppl namespaceId = (IStrategoAppl) importReferences.getSubterm(0);
+		IStrategoList imports = (IStrategoList) importReferences.getSubterm(1);
+		IStrategoList packageId; 
+		
+		
+		if (namespaceId.getConstructor() == getModuleQNameCon()) {
+			packageId = persistenceManager()
+					.spxModuleTable()
+					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
+			
+			
+		} else if (namespaceId.getConstructor() == getPackageQNameCon()) {
+			packageId = PackageDeclaration.getPackageId(this, namespaceId);
+		} else
+			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
+
+		PackageDeclaration packageDeclaration= this.lookupPackageDecl(packageId);
+		
+		packageDeclaration.addImportRefernces(this, imports);
+		persistenceManager().spxPackageTable().definePackageDeclaration(packageDeclaration);
+	}
+	
+	/**
+	 * @param mDecl
+	 */
+	private void defineNamespace(INamespaceFactory nsFactory) {
+		SpxPrimarySymbolTable symTable =  this.persistenceManager().spxSymbolTable();
+		
+		for( INamespace ns : nsFactory.newNamespaces(this) ) {  symTable.defineNamespace(ns) ; }
+	}
+	
+
+	/**
+	 * Returning all the import reference of the current package / module construct. Package/ Module  
+	 * are the scoped symbol for the current implementation of the spoofaxlang. Whenever 
+	 * looking for a import reference of a module, it returns the import refernece of it enclosing 
+	 * namespace , i.e. package. 
+	 * 
+	 * Currently this lookup is hard-coded . Later , plan is to move to more generic and dynamic 
+	 * lookup environment. 
+	 * 
+	 * @param namespaceId
+	 * @return {@link IStrategoTerm}
+	 * @throws SpxSymbolTableException 
+	 */
+	public IStrategoTerm getImportReferences(IStrategoAppl namespaceId) throws SpxSymbolTableException {
+		IdentifiableConstruct ns; 
+
+		if (namespaceId.getConstructor() == getModuleQNameCon()) {
+			IStrategoList packageId = persistenceManager()
+					.spxModuleTable()
+					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
+			ns = lookupPackageDecl(packageId);
+		} else if (namespaceId.getConstructor() == getPackageQNameCon()) {
+			ns = this.lookupPackageDecl(namespaceId);
+		} else
+			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
+		
+		return ns.getImports(this);
+	}
+	
+	
+	
 	
 	/**
 	 * Returns the package declaration indexed with {@code packageIdAppl} typed qualified name.
@@ -310,7 +467,7 @@
 	 * @return
 	 * @throws Exception 
 	 */
-	public IStrategoTerm getPackageDeclaration(IStrategoAppl packageTypedQName) throws IllegalArgumentException
+	public IStrategoTerm getPackageDeclaration(IStrategoAppl packageTypedQName) throws SpxSymbolTableException
 	{
 		PackageDeclaration decl = lookupPackageDecl(packageTypedQName);
 		
@@ -323,23 +480,20 @@
 	 * @return
 	 * @throws IllegalArgumentException
 	 */
-	private PackageDeclaration lookupPackageDecl(IStrategoAppl packageTypedQName) throws IllegalArgumentException {
+	public PackageDeclaration lookupPackageDecl(IStrategoAppl packageTypedQName) throws SpxSymbolTableException {
 		
-		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
 		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageTypedQName);
-		PackageDeclaration decl = table.getPackageDeclaration(packageId);
-		
-		if (decl == null)
-			throw new IllegalArgumentException( "Unknown Package Id"+ packageTypedQName.toString());
 		
-		return decl;
+		return lookupPackageDecl(packageId);
 	}
 	
+	
+
 	public IStrategoList getPackageDeclarations(IStrategoString filePath) {
 
 		logMessage("getPackageDeclarationsByUri | Arguments : " + filePath);
 
-		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
+		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
 		String filepathString = asJavaString(filePath);
 		
 		Iterable<PackageDeclaration> decls; 
@@ -348,7 +502,7 @@
 		}else{
 
 			String absFilePath = toAbsulatePath(filePath);
-			table.verifyUriExists(absFilePath);
+			table.verifyUriExists(absFilePath); // verifying file path exists 
 			decls = table.packageDeclarationsByUri(absFilePath);
 		}
 		
@@ -364,8 +518,9 @@
 	 * @param moduleTypeQName
 	 * @return
 	 * @throws IllegalArgumentException If {@link ModuleDeclaration} with {@code moduleTypeQName} is not found 
+	 * @throws SpxSymbolTableException 
 	 */
-	public IStrategoTerm getModuleDeclaration(IStrategoAppl moduleTypeQName) throws IllegalArgumentException
+	public IStrategoTerm getModuleDeclaration(IStrategoAppl moduleTypeQName) throws IllegalArgumentException, SpxSymbolTableException
 	{
 		ModuleDeclaration decl = lookupModuleDecl(moduleTypeQName);
 
@@ -375,23 +530,29 @@
 	/**
 	 * @param moduleTypeQName
 	 * @return
+	 * @throws SpxSymbolTableException 
 	 */
-	private ModuleDeclaration lookupModuleDecl(IStrategoAppl moduleTypeQName) {
+	public ModuleDeclaration lookupModuleDecl(IStrategoAppl moduleTypeQName) throws SpxSymbolTableException {
 		
-		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
 		
 		IStrategoList moduleId = ModuleDeclaration.getModuleId(this, moduleTypeQName);
 		
 		ModuleDeclaration decl = table.getModuleDeclaration(moduleId);
 		
 		if (decl == null)
-			throw new IllegalArgumentException( "Unknown Module Id"+ moduleTypeQName.toString());
+			throw new SpxSymbolTableException( "Unknown Module Id "+ moduleTypeQName.toString());
 		
 		
 		return decl;
 	}
 	
-	public IStrategoTerm getModuleDeclarationsOf(IStrategoTerm res) {
+	/**
+	 * @param res
+	 * @return
+	 * @throws SpxSymbolTableException 
+	 */
+	public IStrategoTerm getModuleDeclarationsOf(IStrategoTerm res) throws SpxSymbolTableException {
 		IStrategoTerm retValue ;
 		
 		if(Tools.isTermAppl(res))
@@ -407,7 +568,7 @@
 	public IStrategoList getModuleDeclarations (IStrategoString filePath){
 		logMessage("getModuleDeclarations | Arguments : " + filePath);
 		
-		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
 		String filepathString = asJavaString(filePath);
 		
 		Iterable<ModuleDeclaration> decls; 
@@ -424,33 +585,47 @@
 		return result;
 	}
 
-	public IStrategoList getModuleDeclarations(IStrategoAppl packageQName) {
+	/**
+	 * Returns IStrategoList of {@link ModuleDeclaration} enclosed in a Package.
+	 * 
+	 * @param packageQName Qualified Name of Package
+	 * @return {@link IStrategoList}
+	 * @throws SpxSymbolTableException 
+	 */
+	public IStrategoList getModuleDeclarations(IStrategoAppl packageQName) throws SpxSymbolTableException {
 		logMessage("getModuleDeclarations | Arguments : " + packageQName);
-		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
-		IStrategoList packageID = PackageDeclaration.getPackageId(this, packageQName);
 		
-		_persistenceManager.spxPackageTable().verifyPackageIDExists(packageID ) ;
+		IStrategoList packageID = PackageDeclaration.getPackageId(this, packageQName);
 		
-		Iterable<ModuleDeclaration> decls = table.getModuleDeclarationsByPackageId(packageID);
+		Iterable<ModuleDeclaration> decls = getModuleDeclarations(packageID);
 		logMessage("getModuleDeclarations | Found following result from SymbolTable : " + decls);
+		
 		IStrategoList result =  ModuleDeclaration.toTerm(this, decls);
 		logMessage("getModuleDeclarations | Returning IStrategoList : " + result );
 		
 		return result;
 	}	
 	
+	public Iterable<ModuleDeclaration> getModuleDeclarations(IStrategoList pacakgeID) throws SpxSymbolTableException
+	{
+		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
+		_persistenceManager.spxPackageTable().verifyPackageIDExists(pacakgeID) ;
+		
+		return table.getModuleDeclarationsByPackageId(pacakgeID);
+	}
 	/** 
 	 * Returns ModuleDefinition for the Module with ID :  {@code moduleTypedQName}
 	 * 
 	 * @param moduleTypedQName
 	 * @return
 	 * @throws IllegalArgumentException
+	 * @throws SpxSymbolTableException 
 	 */
-	public IStrategoTerm getModuleDefinition(IStrategoAppl moduleTypedQName) throws IllegalArgumentException
+	public IStrategoTerm getModuleDefinition(IStrategoAppl moduleTypedQName) throws IllegalArgumentException, SpxSymbolTableException
 	{
 		ModuleDeclaration decl = lookupModuleDecl(moduleTypedQName);
 
-		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
 		
 		IStrategoList qualifiedModuleId = ModuleDeclaration.getModuleId(this, moduleTypedQName);
 		IStrategoTerm moduleAterm =table.getModuleDefinition(qualifiedModuleId) ;
@@ -470,7 +645,7 @@
 	public IStrategoTerm getLanguageDescriptor ( IStrategoAppl packageTypedQName) throws IllegalArgumentException, Exception{
 		IStrategoList  packageQName = PackageDeclaration.getPackageId(this, packageTypedQName);
 
-		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
+		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
 		table.verifyPackageIDExists(packageQName) ;
 		
 		LanguageDescriptor desc = table.getLangaugeDescriptor(packageQName);
@@ -488,65 +663,36 @@
 	 */
 	public void removePackageDeclaration(
 			IStrategoString spxCompilationUnitPath , 
-			IStrategoList packageId){
+			IStrategoAppl namespaceID){
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
 		
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
-		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
+		IStrategoList packageId = (IStrategoList)toCompactPositionInfo(PackageDeclaration.getPackageId(this, namespaceID));
 		
 		table.verifyPackageIDExists(packageId) ;
 		
 		table.removePackageDeclarationLocation(
 				packageId, 
-				asJavaString(spxCompilationUnitPath));
-	}
-
-	/**
-	 * Indexes {@code moduleDefinition}
-	 * 
-	 * @param moduleDefinition
-	 * @throws IllegalArgumentException
-	 */
-	public void indexModuleDefinition(IStrategoAppl moduleDefinition) throws IllegalArgumentException
-	{
-		verifyConstructor(moduleDefinition.getConstructor() , getModuleDefCon() , "Illegal Module Definition" );
-		
-		indexModuleDefinition(
-				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.ModuleTypedQNameIndex),
-				(IStrategoString) moduleDefinition.getSubterm(ModuleDeclaration.ModulePathIndex),
-				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.PackageTypedQNameIndex),
-				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.AstIndex),
-				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.AnalyzedAstIndex));
+				toAbsulatePath(spxCompilationUnitPath));
 	}
 
+	
 	/**
-	 * Indexes Module Definition, e.g. ModuleDef :  Module * String * Package * Term * Term -> Def
+	 * looks up for a package declaration given its ID. 
 	 * 
-	 * @param moduleQName
-	 * @param spxCompilationUnitPath
-	 * @param packageQName
-	 * @param ast
-	 * @param analyzedAst
+	 * @param packageId
+	 * @return
+	 * @throws SpxSymbolTableException
 	 */
-	public void indexModuleDefinition(IStrategoAppl moduleQName,
-			IStrategoString spxCompilationUnitPath, IStrategoAppl packageQName,
-			IStrategoAppl ast, IStrategoAppl analyzedAst) {
-
-		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
-
-		IStrategoList moduleId = ModuleDeclaration.getModuleId( this, moduleQName);
-		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageQName);
+	PackageDeclaration lookupPackageDecl(IStrategoList packageId) throws SpxSymbolTableException {
 		
-		_persistenceManager.spxPackageTable().verifyPackageIDExists(packageId) ;
+		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
+		PackageDeclaration decl = table.getPackageDeclaration(packageId);
 		
-		moduleId = (IStrategoList) toCompactPositionInfo(moduleId);
-		packageId = (IStrategoList) toCompactPositionInfo(packageId);
-		ast = (IStrategoAppl) ast;
-		analyzedAst = (IStrategoAppl)analyzedAst;
-		spxCompilationUnitPath = (IStrategoString) spxCompilationUnitPath;
-
+		if (decl == null)
+			throw new SpxSymbolTableException( "Unknown Package Id : "+ packageId.toString());
 		
-		table.define(new ModuleDeclaration(toAbsulatePath(spxCompilationUnitPath), moduleId, packageId), ast, analyzedAst);
+		return decl;
 	}
 	
 	/**
@@ -577,8 +723,13 @@
 	 * @throws IOException
 	 */
 	public void reinitSymbolTable() throws IOException {	
+		
 		if (! isPersistenceManagerClosed())
-			_persistenceManager.clearAll();
+			persistenceManager().clearAll();
+		
+		persistenceManager().commit();
+		
+		persistenceManager().initializeSymbolTables(this.getProjectNameString(), this);
 	}
 
 	
@@ -653,45 +804,111 @@
 		_persistenceManager.logMessage("SpxSemanticIndexFacade", message);
 	}
 	
-	public IStrategoConstructor getPackageDeclCon() { return _knownCons.get(ConstructorDef.newInstance("PackageDecl",2)); }
 	
-	public IStrategoConstructor getModuleDeclCon() { return _knownCons.get(ConstructorDef.newInstance("ModuleDecl", 3));  }
+	String fromFileURI(URI uri) {
+		File file = new File(uri);
+		return file.toString();
+	}
 
-	public IStrategoConstructor getModuleDefCon() {	return _knownCons.get(ConstructorDef.newInstance("ModuleDef" , 5)); }
+	IOAgent getIOAgent() {
+		return _agent;
+	}
+	
+	/**
+	 * Prints error message
+	 * @param errMessage
+	 */
+	void printError(String errMessage){
+		_agent.printError(errMessage);
+	}
+	
+	/**
+	 * Force an imploder attachment for a term.
+	 * This ensures that there is always some form of position info,
+	 * and makes sure that origin info is not added to the term.
+	 * (The latter would be bad since we cache in {@link #term}.)
+	 */
+	public static IStrategoAppl forceImploderAttachment(IStrategoAppl term , URI file) {
+		return forceImploderAttachment(term, term, file);
+	}
+	
+	public static IStrategoAppl forceImploderAttachment(IStrategoTerm id, IStrategoAppl term , URI file) {
+		
+		ImploderAttachment attach = ImploderAttachment.get(id);
+		if (attach != null) {
+			ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(), attach.getRightToken());
+		} else {
+			String fn = file == null ? null : file.toString();
+			term.putAttachment(ImploderAttachment.createCompactPositionAttachment(
+					fn, 0, 0, 0, -1));
+		}
+		return term;
+	}
 
-	public IStrategoConstructor getLanguageDescriptorCon() { return _knownCons.get(ConstructorDef.newInstance("LanguageDescriptor" , 5));}
+	//TODO : better handling of the known constructors
+	
+	public IStrategoConstructor getPackageDeclCon() { return getConstructor("PackageDecl",2);}
+	
+	public IStrategoConstructor getModuleDeclCon() { return getConstructor("ModuleDecl", 3); }
+
+	public IStrategoConstructor getModuleDefCon() {	return getConstructor("ModuleDef" , 5);}
+
+	public IStrategoConstructor getLanguageDescriptorCon() { return getConstructor("LanguageDescriptor" , 5);}
 
-	public IStrategoConstructor getModuleQNameCon() {return _knownCons.get(ConstructorDef.newInstance("Module" , 1));}
+	public IStrategoConstructor getModuleQNameCon() {return getConstructor("Module" , 1); }
 
-	public IStrategoConstructor getPackageQNameCon() {return _knownCons.get(ConstructorDef.newInstance("Package" , 1));}
+	public IStrategoConstructor getPackageQNameCon() { return getConstructor("Package" , 1);}
+	
+	public IStrategoConstructor getQNameCon() { return getConstructor("QName" , 1); }
+	
+	public IStrategoConstructor getImportDeclCon() {return getConstructor("ImportDecl",2);}
 	
-	public IStrategoConstructor getQNameCon() {return _knownCons.get(ConstructorDef.newInstance("QName" , 1));}
+	public IStrategoConstructor getGlobalNamespaceTypeCon() {return getConstructor("Global",0);}
 	
-	public IStrategoConstructor getImportDeclCon() {return _knownCons.get(ConstructorDef.newInstance("ImportDecl",2));}
+	public IStrategoConstructor getPackageNamespaceTypeCon() {return getConstructor("Package",0);}
 	
+	public IStrategoConstructor getModuleNamespaceTypeCon() {return getConstructor("Module",0);}
+	
+	public IStrategoConstructor getSymbolTableEntryDefCon() {return getConstructor("SymbolDef",4);}
+	
+	
+	public IStrategoConstructor getConstructor(String symbolTypeCons, int arity) {
+		return _knownCons.get(ConstructorDef.newInstance(symbolTypeCons ,arity));
+	}
 	
 	private void initKnownConstructors() {
-		ConstructorDef.newInstance("ModuleDef" , 5).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("ModuleDecl", 3).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("ModuleDef"  ,5).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("ModuleDecl" ,3).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("SymbolDef"  ,4).index(_knownCons, _termFactory);
+
 		ConstructorDef.newInstance("PackageDecl",2).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("ImportDecl",2).index(_knownCons, _termFactory);	
+		ConstructorDef.newInstance("ImportDecl" ,2).index(_knownCons, _termFactory);
+		
 		ConstructorDef.newInstance("LanguageDescriptor", 5).index(_knownCons, _termFactory);
+		
 		ConstructorDef.newInstance("Module", 1).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("Package", 1).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("QName", 1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Package",1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("QName",  1).index(_knownCons, _termFactory);
+				
+		ConstructorDef.newInstance("Global", 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Package",0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Module", 0).index(_knownCons, _termFactory);
 	}
 	
+	private final HashMap<ConstructorDef , IStrategoConstructor> _knownCons;
+	
 	private static class ConstructorDef
 	{
 		private String _name ;
 		private int _arity;
+		
 		ConstructorDef( String name , int arity) {  _name =  name ; _arity = arity; }
 		
 		static ConstructorDef newInstance( String name , int arity) {  return new ConstructorDef(name, arity); }
 		
 		private IStrategoConstructor toStrategoConstructor(ITermFactory fac) {  return fac.makeConstructor(_name, _arity);}
 		
-		void index( HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac)
+		void index(HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac)
 		{
 			cons.put(this, this.toStrategoConstructor(fac)) ;
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Mon Oct  3 17:03:08 2011	(r23415)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,36 +1,198 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.io.IOException;
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
 
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.attachments.TermAttachmentSerializer;
 
-class NamespaceId 
-{
-	private final IStrategoList _id;
-	private final UUID _uId ;
+
+
+class BaseSymbol implements Serializable{
+
+	private static final long serialVersionUID = 3160588874266553126L;
+	
+	protected IStrategoTerm _id;
+	
+	public BaseSymbol(IStrategoTerm id){_id = id ; }
+	
+	IStrategoTerm Id(){return _id;}
+	
+	void setId(IStrategoTerm id){_id = id;}
+	
+	protected static boolean verifyEquals(IStrategoConstructor ctor1 , IStrategoConstructor ctor2){
+		if( (ctor1.getArity() == ctor2.getArity()) && (ctor1.getName().equals(ctor2.getName()))){
+			return true;
+		}
+		return false;
+	}
+	
+	protected static boolean verifyEquals(IStrategoTerm current, IStrategoTerm other){
+		boolean retValue = false;
+		if ( current instanceof IStrategoAppl){
+			if(other instanceof IStrategoAppl) {
+				IStrategoAppl currentAppl = (IStrategoAppl)current;
+				IStrategoAppl otherAppl = (IStrategoAppl)other;
+
+				if( verifyEquals(currentAppl.getConstructor() , otherAppl.getConstructor()) )
+				{
+					IStrategoTerm[] currentTerms= currentAppl.getAllSubterms();
+					IStrategoTerm[] otherTerms = currentAppl.getAllSubterms();
+
+					retValue = verifyEquals(currentTerms, otherTerms);
+				}	
+			}
+		}	
+		else if( current instanceof IStrategoTuple){
+			if(other instanceof IStrategoTuple) {
+				retValue = verifyEquals(current.getAllSubterms(), other.getAllSubterms());
+			}
+		}	
+		else if( current instanceof IStrategoList){
+			if(other instanceof IStrategoList) {
+				retValue = verifyEquals(current.getAllSubterms(), other.getAllSubterms());
+			}
+		}
+		else
+			retValue = current.match(other);
+
+		return retValue;
+	}
+
+	/**
+	 * @param retValue
+	 * @param currentTerms
+	 * @param otherTerms
+	 * @return
+	 */
+	private static boolean verifyEquals( IStrategoTerm[] currentTerms, IStrategoTerm[] otherTerms) {
+		boolean retValue = false;
+		
+		if( currentTerms.length == otherTerms.length){
+			for ( int i = 0 ; i< currentTerms.length ; i++){
+				if( !verifyEquals(currentTerms[i], otherTerms[i])){
+					retValue = false;
+					break;
+				}
+				else { retValue = true;}
+			}
+		}
+		return retValue;
+	}		
+}
+
+public class SpxSymbol extends BaseSymbol implements Serializable{
+	private static final long serialVersionUID = -5293805213473800423L;
+	
+	private String _data;
+	private String _type;
+	private NamespaceUri _namespace; // refer to the namespace uri . 
+	
+	public SpxSymbol (IStrategoTerm id){super(id);}
+	
+	public SpxSymbol (IStrategoTerm id , String type){ 
+		this(id) ;
+
+		_type = type;
+	}
+	
+	public String type() {return _type; }
+
+	public String getDataString () {return _data;}
+	
+	public NamespaceUri namespaceUri() { return _namespace; }
+	
+	void setType(String type) {	_type = type; }
+
+	IStrategoTerm deserializedDataToTerm(ITermFactory fac , TermAttachmentSerializer serializer) { 
+		IStrategoTerm deserializedAtermWithAnnotation = fac.parseFromString(_data);
+		IStrategoTerm deserializedAterm  = serializer.fromAnnotations(deserializedAtermWithAnnotation, true);
+		
+		return deserializedAterm;
+	}
+	
+	void serializerDataString(TermAttachmentSerializer serializer, IStrategoTerm data) throws IOException { 
+		IStrategoTerm annotatedTerm = serializer.toAnnotations(data);
+		
+		StringBuilder sb = new StringBuilder();
+		annotatedTerm.writeAsString(sb ,Integer.MAX_VALUE);
+		
+		_data = sb.toString(); 
+	}
 	
-	public NamespaceId(IStrategoList id){_id = id ; _uId = UUID.randomUUID();}
+	public IStrategoConstructor typeCons(SpxSemanticIndexFacade facade){
+		return facade.getConstructor( type() , 0);
+	}
 	
-	public IStrategoList ID(){ return _id ; }
+	void setNamespace(NamespaceUri id){ _namespace = id;}
 	
-	public String UniqueID(){ return _uId.toString();};
+	boolean equalType (IStrategoConstructor term) { return _type.equals(term.getName()); }
 	
-	public INamespace resolve(INamespaceResolver sTable) {
-		return sTable.resolveNamespace(this);
+	static List<SpxSymbol> filterByType(IStrategoConstructor expectedType , Iterable<SpxSymbol> symbols){
+		List<SpxSymbol> retSymbols = new ArrayList<SpxSymbol>();
+		if( symbols != null){
+			for(SpxSymbol s : symbols){
+				if( s.equalType(expectedType) ){ retSymbols.add(s) ;}
+			}
+		}
+		return retSymbols;
 	}
+	
+	public IStrategoTerm toTerm (SpxSemanticIndexFacade facade){
+		final ITermFactory termFactory = facade.getTermFactory();
+		
+		//Type 
+		IStrategoConstructor spxTypeCtor = this.typeCons(facade);
+		
+		//Data
+		IStrategoTerm deserializedDataToTerm = this.deserializedDataToTerm(termFactory, facade.getTermAttachmentSerializer());
+		
+		//Enclosing Namespace 
+		IStrategoConstructor qnameCons = facade.getQNameCon();
+		IStrategoAppl nsQNameAppl = termFactory.makeAppl(qnameCons, namespaceUri().id());
+		
+		//ID/Key 
+		IStrategoTerm id = this.Id(); //TODO : It might require term conversion.
 
+		return (IStrategoTerm)termFactory.makeAppl( facade.getSymbolTableEntryDefCon(),
+				nsQNameAppl,  //ns qname 
+				spxTypeCtor,  // type
+				id,			  //id	
+				deserializedDataToTerm )	;
+	}
+	
+	static Iterable<IStrategoTerm> toTerms(SpxSemanticIndexFacade facade , Iterable<SpxSymbol> symbols){
+		List<IStrategoTerm> terms  = new ArrayList<IStrategoTerm>();
+		
+		
+		if( symbols != null)
+			for( SpxSymbol s : symbols) { terms.add( s.toTerm(facade));}
+		return terms;
+	} 
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
 	@Override
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;
-		result = prime * result + ((_id == null) ? 0 : _id.hashCode());
-		result = prime * result + ((_uId == null) ? 0 : _uId.hashCode());
+		result = prime * result + ((_data == null) ? 0 : _data.hashCode());
+		result = prime * result + ((_type == null) ? 0 : _type.hashCode());
 		return result;
 	}
 
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
 	@Override
 	public boolean equals(Object obj) {
 		if (this == obj)
@@ -39,65 +201,73 @@
 			return false;
 		if (getClass() != obj.getClass())
 			return false;
-		NamespaceId other = (NamespaceId) obj;
+	
+		SpxSymbol other = (SpxSymbol) obj;
 		if (_id == null) {
 			if (other._id != null)
 				return false;
-		} else if (!_id.match(other._id))
+		}else if (! verifyEquals(this._id, other._id)){ 
 			return false;
-		if (_uId == null) {
-			if (other._uId != null)
+		}
+		if (_data == null) {
+			if (other._data != null)
 				return false;
-		} else if (!_uId.equals(other._uId))
+		} else if (!_data.equals(other._data))
+			return false;
+		
+		if (_type == null) {
+			if (other._type != null)
+				return false;
+		} else if (!_type.equals(other._type))
 			return false;
 		return true;
 	}
-
-	@Override
-	public String toString() {
-		return "NamespaceId [_id=" + _id + ", _uId=" + _uId + "]";
-	}
 }
 
-
-class SpxSymbol{
-
-	private static final long serialVersionUID = -5293805213473800423L;
-
-	private IStrategoList _id;
-	private IStrategoTerm _data;
-	private IStrategoTerm _type;
+class SpxSymbolKey extends BaseSymbol implements Serializable{
 	
-	private NamespaceId _namespace;
+	//TODO : verify it is working with two stage serialization.
+	//Again easy way out is to serialize it to String and persist that 
+	//in disk. 
 	
-	public SpxSymbol (IStrategoList id){_id = id;}
+	//Since we dont care about term attachments of the key, we are stripping any term attachment.
+	private static final long serialVersionUID = 7804281029276443583L;
 	
-	public SpxSymbol (IStrategoList id , IStrategoTerm type){ 
-		this(id) ;
-		_type = type;
-	}
-	
-	IStrategoList Id(){return _id;}
-	
-	IStrategoTerm Type() {return _type; }
-
-	IStrategoTerm Data() { return _data; }
+	public SpxSymbolKey(IStrategoTerm id){ super(id); }
 	
-	NamespaceId Namespace() { return _namespace; }
-
-	void setData(IStrategoTerm data) { _data = data; }
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((_id == null) ? 0 : _id.hashCode());
+		return result;
+	}
 
-	void setNamespace(NamespaceId id){ _namespace = id;}
-	
-	boolean equalType (IStrategoTerm term) { return _type == term; }
-	
-	static List<SpxSymbol> filterByType( IStrategoTerm expectedType , Iterable<SpxSymbol> symbols)
-	{
-		List<SpxSymbol> retSymbols = new ArrayList<SpxSymbol>();
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
 		
-		for(SpxSymbol s : symbols){
-			if( s.equalType(expectedType) ){ retSymbols.add(s) ;}
+		SpxSymbolKey other = (SpxSymbolKey) obj;
+		if (_id == null) {
+			if (other._id != null)
+				return false;
+		}else if(!verifyEquals(this._id, other._id)){ 
+			return false;
 		}
-		return retSymbols;
+		
+		return true;
+	}
+
+	@Override
+	public String toString() {
+		return "SpxIndexKey [_id=" + _id +"]";
 	}
-}
\ No newline at end of file
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableEntry.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableEntry.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -0,0 +1,68 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.attachments.TermAttachmentSerializer;
+
+// consider making it an internal class of 
+// SpxPrimarySymbolTable
+public final class SpxSymbolTableEntry
+{
+	public SpxSymbolKey key;
+	public SpxSymbol value;
+	
+	static final int NAMESPACE_ID_INDEX  = 0;
+	static final int TYPE_INDEX = 1;
+	static final int DATA_INDEX = 3;
+	static final int SYMBOL_ID_INDEX = 2;
+
+    public SpxSymbolTableEntry(SpxSymbolKey paramK, SpxSymbol paramV) {
+      this.key = paramK;
+      this.value = paramV;
+    }
+    
+    public static SpxSymbolTableEntry.EntryBuilder newEntry() {return new SpxSymbolTableEntry.EntryBuilder();} 
+    
+    public static class EntryBuilder{
+    	private IStrategoTerm _spoofaxkey ;
+    	private IStrategoConstructor _type ;
+    	private IStrategoTerm _data;
+    	
+    	// Instance of TermAttachmentSerializer to serialize terms
+    	private TermAttachmentSerializer _serializer;
+    	
+    	public EntryBuilder with(IStrategoTerm id){ 
+    		_spoofaxkey = id;
+    		return this;
+    	}
+    	
+    	public EntryBuilder instanceOf(IStrategoConstructor type){
+    		_type = type;
+    		return this;
+    	}
+    	
+    	public EntryBuilder data(IStrategoTerm data) {
+    		_data = data;
+    		return this;
+    	}
+    	
+    	public EntryBuilder uses(TermAttachmentSerializer serializer){
+    		_serializer = serializer;
+    		return this;
+    	}
+    	
+    	public SpxSymbolTableEntry build() throws IOException {
+    		
+    		SpxSymbolKey key = new SpxSymbolKey( _spoofaxkey );
+    		
+    		
+    		SpxSymbol symbol = new SpxSymbol(_spoofaxkey) ;
+    		symbol.serializerDataString(_serializer, _data);
+    		symbol.setType(_type.getName());
+    		
+    		return new SpxSymbolTableEntry(key , symbol );
+		}
+    }
+}
\ No newline at end of file

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxLookupTableUnitTests.java (from r23386, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxLookupTableUnitTests.java	Sat Sep 24 11:09:06 2011	(r23386, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxLookupTableUnitTests.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests;
+package org.spoofax.interpreter.library.language.spxlang.tests;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -15,6 +15,8 @@
 import org.spoofax.interpreter.library.language.spxlang.SpxModuleLookupTable;
 import org.spoofax.interpreter.library.language.spxlang.SpxPackageLookupTable;
 import org.spoofax.interpreter.library.language.spxlang.SpxPersistenceManager;
+import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -25,6 +27,9 @@
 
 public class SpxLookupTableUnitTests  extends AbstractInterpreterTest{
 	
+	private final String _projectName = "test";
+	private IStrategoString projectNameTerm;
+	
 	private ISpxPersistenceManager manager ;
 	private SpxPackageLookupTable symtable;
 	private SpxModuleLookupTable mSymTable;
@@ -51,7 +56,10 @@
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
-		manager = new SpxPersistenceManager( "test" , "c:/temp" , ioAgent());
+		projectNameTerm = termFactory().makeString(_projectName);
+		SpxSemanticIndexFacade facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
+		manager = new SpxPersistenceManager(facade);
+		
 		symtable = new SpxPackageLookupTable(manager);
 		mSymTable = new SpxModuleLookupTable(manager);
 		
@@ -65,7 +73,7 @@
 		manager.commitAndClose();
 	}
 	
-	public void testShouldReturngPackageDeclarationbyUri() 
+	public void testShouldReturngPackageDeclarationbyUri() throws IOException 
 	{
 		symtable.clear();
 		
@@ -125,8 +133,7 @@
 		assertEquals(expected, actual);
 	}
 	
-	public void testUpdatingFileUrisShouldPersists()
-	{
+	public void testUpdatingFileUrisShouldPersists() throws IOException {
 		symtable.clear();
 		
 		//package declaration 
@@ -155,12 +162,12 @@
 		//getting actual test run result and comparing with expected 
 		Set<PackageDeclaration> decls= (Set<PackageDeclaration>)symtable.packageDeclarationsByUri(absPathString1);
 		
-		PackageDeclaration test = symtable.getPackageDeclaration(idp1) ;
+		symtable.getPackageDeclaration(idp1) ;
 		
 		assertEquals(expectedPackageDecls , decls.size());
 	}
 	
-	public void testRemovePackageDeclarationsByFileUri()
+	public void testRemovePackageDeclarationsByFileUri() throws IOException
 	{
 		symtable.clear();
 			
@@ -183,7 +190,7 @@
 		assertEquals(symtable.size(), 1);
 	}
 		
-	public void testNoFileUriShouldRemovePackageDeclaration()
+	public void testNoFileUriShouldRemovePackageDeclaration() throws IOException
 	{
 		symtable.clear();
 		
@@ -212,7 +219,7 @@
 		
 	}
 
-	public void testLanguageDescriptorIsPersisted()
+	public void testLanguageDescriptorIsPersisted() throws IOException
 	{
 		symtable.clear();
 		
@@ -242,7 +249,7 @@
 		assertEquals(idp1, actual.get(0));
 	}	
 	
-	public void testUpdatingLanguageDescriptorIsPersisted()
+	public void testUpdatingLanguageDescriptorIsPersisted() throws IOException
 	{
 		symtable.clear();
 		
@@ -277,7 +284,7 @@
 		assertEquals(idp1, actual.get(0));
 	}	
 	
-	public void testShouldThrowIllegalArgumentExceptionIfUnknownPackageId()
+	public void testShouldThrowIllegalArgumentExceptionIfUnknownPackageId() throws IOException
 	{
 		symtable.clear();
 		
@@ -392,7 +399,7 @@
 		
 	}
 	
-	public void testShouldReturnModuleByPackageId() throws IOException
+	public void testShouldReturnModuleByPackageId() throws IOException, SpxSymbolTableException
 	{
 		ITermFactory f = this.termFactory();
 		SpxModuleLookupTable lookupTable = mSymTable;
@@ -537,13 +544,11 @@
 		
 		assertEquals(1, lookupTable.size());
 	}
-	static IStrategoTerm getModuleDefinition( ITermFactory f, String moduleName )
-	{
-		
-		String text = "Module(" + 
-		"None()"+
-		", SPXModuleName(\""+moduleName+"\")"+
-		", [])" ;
+
+	static IStrategoTerm getModuleDefinition(ITermFactory f, String moduleName) {
+
+		String text = "Module(" + "None()" + ", SPXModuleName(\"" + moduleName
+				+ "\")" + ", [])";
 
 		return f.parseFromString(text);
 	}

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java (from r23371, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/tests/SpxSemanticIndexFacadeTest.java	Tue Sep 20 14:15:02 2011	(r23371, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -1,10 +1,19 @@
-package org.spoofax.interpreter.library.language.tests;
+package org.spoofax.interpreter.library.language.spxlang.tests;
+
+import java.io.IOException;
 
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.LanguageLibrary;
+import org.spoofax.interpreter.library.language.spxlang.GlobalNamespace;
+import org.spoofax.interpreter.library.language.spxlang.INamespace;
 import org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.NamespaceUri;
+import org.spoofax.interpreter.library.language.spxlang.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.PackageNamespace;
+import org.spoofax.interpreter.library.language.spxlang.SpxPrimarySymbolTable;
 import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -12,28 +21,22 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.test.AbstractInterpreterTest;
 
-public class SpxSemanticIndexFacadeTest extends AbstractInterpreterTest{
+public class SpxPrimarySymbolTableTest extends AbstractInterpreterTest{
 	
-	private final String _projectName = "test";
+	private final String _projectName = "_test-symbol-table";
 	
 	private IStrategoString projectNameTerm; 
 	private SpxSemanticIndexFacade _facade;
+	private SpxPrimarySymbolTable symbol_table;
 	
-	final String absPathString1 = "c:/temp/test1.spx" ;
-	final String absPathString2 = "c:/temp/test2.spx" ;
-	
-	private Interpreter interpreter()
-	{
-		 return itp;
-	}
-	
-	private ITermFactory termFactory() {
-		return factory;
-	}
+	final String absPathString1 = "c:/temp/file1.spx" ;
+	final String absPathString2 = "c:/temp/file2.spx" ;
 
-	private IOAgent ioAgent() {
-		return itp.getIOAgent(); 
-	}
+	private Interpreter interpreter(){ return itp;	}
+
+	private IOAgent ioAgent() { return itp.getIOAgent(); }
+	
+	private ITermFactory termFactory() { return factory; 	}
 	
 	@Override
 	protected void setUp() throws Exception {
@@ -41,219 +44,169 @@
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
 		projectNameTerm = termFactory().makeString(_projectName);
-		
 	
 		_facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
 		_facade.reinitSymbolTable();
-	}
-	
-	@Override 
-	protected void tearDown() throws Exception {
-		_facade.close();
-	}
-	
-	public void testListenerRemovingRecordsFromChildSymbolTables()
-	{
 		
-	}	
-	
-	public void testUnknownPackageNameThrowsIllegalArgumentException() 
-	{
-		ITermFactory f = termFactory() ;
-
-		String moduleName =  "m1" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
-		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
 		
-		try{
-		_facade.indexModuleDefinition( mQnameAppl ,f.makeString(absPathString1) ,pQnameAppl , ast, analyzed_ast);
-		}
-		catch(IllegalArgumentException ex)
-		{
-			
-		}
+		symbol_table = _facade.persistenceManager().spxSymbolTable();
 	}
-	
-	public void testIndexPackageDeclaration() 
-	{
-		ITermFactory f = termFactory() ;
 
-		String moduleName =  "m1" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
-		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
-		
-		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
-		
-		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
-		
-		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration"); 
+	@Override 
+	protected void tearDown() throws Exception { 
+		_facade.close(); 
 	}
 	
-	public void testIndexPackageDeclarationInMultipleFiles() 
-	{
+	private void indexCompilationUnit() throws IOException
+	{	
 		ITermFactory f = termFactory() ;
-
-		String moduleName =  "m1" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
-		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
-		
-		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
-		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString2));
-		
-		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
 		
-		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
+		_facade.indexCompilationUnit(f.makeString(absPathString1),
+				(IStrategoAppl) getCompilationUnit(f));
 		
-		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
+		_facade.indexCompilationUnit(f.makeString(absPathString2),
+				(IStrategoAppl) getCompilationUnit(f));
 	}
+
+	
+	private PackageDeclaration packageDeclaration1;
+	private PackageDeclaration packageDeclaration2;
+	
+	private ModuleDeclaration moduleDeclarationP1M1;
+	private ModuleDeclaration moduleDeclarationP1M2;
+	private ModuleDeclaration moduleDeclarationP2M1;
 	
-	public void testIndexModuleDeclaration() 
+	private void setupScopeTree() throws IOException, SpxSymbolTableException 
 	{
-		ITermFactory f = termFactory() ;
-
-		String moduleName =  "m1" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		String packageName1 =  	"\"lang\", \"p1\"" ;
+		String packageName2 =  	"\"lang\", \"p2\"" ;
 		
-		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		indexCompilationUnit();
 		
-		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
-		_facade.indexModuleDefinition(mQnameAppl, f.makeString(absPathString1), pQnameAppl, ast, analyzed_ast);
+		// Indexing Package Declaration . That will create a package namespace and an internal namespace
+		packageDeclaration1 = indexTestPackageDecl(packageName1, absPathString1);
+		packageDeclaration2 = indexTestPackageDecl(packageName2, absPathString2);
 		
+		moduleDeclarationP1M1 = indexTestModuleDefs ( "p1m1" , packageName1 , absPathString1);
+		moduleDeclarationP1M2 = indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
+		moduleDeclarationP2M1 = indexTestModuleDefs ( "p2m1" , packageName2 , absPathString2);
+	}
+	/**
+	 * @return
+	 */
+	private int noOfGlobalNamespaceInSymbolTable() {
+		int noOfGlobalNamespace = 0 ;
 		
-		IStrategoAppl moduleDeclaration = (IStrategoAppl)_facade.getModuleDeclaration( mQnameAppl );
-		
-		_facade.verifyConstructor(moduleDeclaration.getConstructor(), _facade.getModuleDeclCon(), "Wrong Module Declaration Constructs");
+		Iterable<NamespaceUri> uris = symbol_table.getAllNamespaces();
+		for( NamespaceUri uri : uris){
+			if ( uri.equalSpoofaxId(GlobalNamespace.getGlobalNamespaceId(_facade)))
+				noOfGlobalNamespace = noOfGlobalNamespace  +1 ;
+		}
+		return noOfGlobalNamespace;
 	}
-	
-	private void indexTestModuleDefs( String moduleName , String packageQName , String filePath)
-	{
-		String moduleQName = packageQName  + ", \""+ moduleName  +"\"" ;
-		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageQName+"]))");
+
+	public void testOnlyOneGlobalNamespaceExists() {
 		
-		IStrategoAppl mQnameAppl = (IStrategoAppl)termFactory().parseFromString("Module(QName(["+moduleQName+ "]))");
-		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(termFactory(), moduleName);
-		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(termFactory(), moduleName);
+		assertEquals(1, noOfGlobalNamespaceInSymbolTable());
 		
-		_facade.indexModuleDefinition(mQnameAppl, termFactory().makeString(filePath), pQnameAppl, ast, analyzed_ast);
-	}
-	
-	private IStrategoAppl indexTestPackageDecl(String packageName , String fileName) {
+		//Trying to add Global Namespace Multiple Times 
+		symbol_table.addGlobalNamespace(_facade);
+		symbol_table.addGlobalNamespace(_facade);
+		symbol_table.addGlobalNamespace(_facade);
 		
-		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageName+"]))");
-		_facade.indexPackageDeclaration(pQnameAppl, termFactory().makeString(fileName));
-		return pQnameAppl;
+		//Still expecting there will be just one Global Namespace for the project 
+		assertEquals(1, noOfGlobalNamespaceInSymbolTable());
 	}
 	
-	public void testGetModuleDeclarationsByPackageId()
+	
+	public void testResolveNamespace() throws IOException, SpxSymbolTableException
 	{
-		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+		setupScopeTree();
 		
-		IStrategoAppl pQnameAppl = indexTestPackageDecl(packageName1, absPathString1);
-		indexTestModuleDefs ( "m1" , packageName1 , absPathString1);
-		indexTestModuleDefs ( "m2" , packageName1 , absPathString1);
+		INamespace namespace;
+		NamespaceUri internalNamespaceUri;
 		
-		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
-		IStrategoAppl pQnameAppl2 = indexTestPackageDecl(packageName2, absPathString1);
-		indexTestModuleDefs ( "m2" , packageName2 , absPathString1);
+		namespace = symbol_table.resolveNamespace(packageDeclaration1.getId());
+		assertTrue(namespace.namespaceUri().id().equals(packageDeclaration1.getId()));
 		
-		IStrategoList actuals = null;
+		internalNamespaceUri = PackageNamespace.packageInternalNamespace(namespace.namespaceUri(), _facade);
+		namespace = symbol_table.resolveNamespace(internalNamespaceUri.id());
+		assertTrue(namespace.namespaceUri().id().equals(internalNamespaceUri.id()));
 		
-		//following invocation should return 2 ModuleDeclarations
-		actuals = _facade.getModuleDeclarations( pQnameAppl );
 		
-		assertEquals(2, actuals.getSubtermCount());
+		namespace = symbol_table.resolveNamespace(packageDeclaration1.getId());
+		assertTrue(namespace.namespaceUri().id().equals(packageDeclaration1.getId()));
 		
-		//following invocation should return 1 ModuleDeclarations
-		actuals = _facade.getModuleDeclarations( pQnameAppl2 );
+		internalNamespaceUri = PackageNamespace.packageInternalNamespace(namespace.namespaceUri(), _facade);
+		namespace = symbol_table.resolveNamespace(internalNamespaceUri.id());
+		assertTrue(namespace.namespaceUri().id().equals(internalNamespaceUri.id()));
 		
-		assertEquals(1, actuals.getSubtermCount());
-	}
+		namespace = symbol_table.resolveNamespace(packageDeclaration2.getId());
+		assertTrue(namespace.namespaceUri().id().equals(packageDeclaration2.getId()));
+		
+		namespace = symbol_table.resolveNamespace(moduleDeclarationP1M1.getId());
+		assertTrue(namespace.namespaceUri().id().equals(moduleDeclarationP1M1.getId()));
+
+		namespace = symbol_table.resolveNamespace(moduleDeclarationP1M2.getId());
+		assertTrue(namespace.namespaceUri().id().equals(moduleDeclarationP1M2.getId()));
+
+
+		namespace = symbol_table.resolveNamespace(moduleDeclarationP2M1.getId());
+		assertTrue(namespace.namespaceUri().id().equals(moduleDeclarationP2M1.getId()));
 
-	public void testGetModuleDeclarationsWithUnknownPackageID()
+
+	}
+	
+	public void testNoOfNamespaceDefined() throws IOException, SpxSymbolTableException 
 	{
-		String packageName1 =  	"\"languages\", \"entitylang\"" ;
-		
-		indexTestPackageDecl(packageName1, absPathString1);
-		indexTestModuleDefs ( "m1" , packageName1 , absPathString1);
-		indexTestModuleDefs ( "m2" , packageName1 , absPathString1);
-		
-		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
-		indexTestPackageDecl(packageName2, absPathString1);
-		indexTestModuleDefs ( "m2" , packageName2 , absPathString1);
-		
-		
-		String unknown =  	"\"languages\", \"unknown\"" ;
-		IStrategoAppl pUnknownQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+unknown+"]))");
-		IStrategoList actuals = null;
-		
-		try{
-			//following invocation should return 2 ModuleDeclarations
-			actuals = _facade.getModuleDeclarations( pUnknownQnameAppl );
-		}catch(IllegalArgumentException ex)
-		{
-			
-		}
+		setupScopeTree();
 		
+		// Expected #namespace = 1 global namespace + 2 namespaces for Package p1 
+		// +2 namespaces for Package P2 + 2 for Modules of P1 + 1 for Modules of P2 
+		assertEquals( 1 + 2 + 2 + 2 + 1 ,symbol_table.size());
 	}
 	
-	public void testGetModuleDeclarationsByFileUri()
+	
+	static IStrategoTerm getCompilationUnit( ITermFactory f)
 	{
-		String packageName1 =  	"\"languages\", \"entitylang\"" ;
-
-		indexTestPackageDecl(packageName1, absPathString1);
-		indexTestModuleDefs ( "p1m1" , packageName1 , absPathString1);
-		indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
-		
-		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
-		indexTestPackageDecl(packageName2, absPathString1);
-		indexTestModuleDefs ( "p2m2" , packageName2 , absPathString1);
-		
-		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
-		indexTestPackageDecl(packageName3, absPathString2);
-		indexTestModuleDefs ( "p3m2" , packageName3 , absPathString2);
-		
-		IStrategoList actuals = null;
-		//following invocation should return 2 ModuleDeclarations
-		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString1));
-		
-		assertEquals(3, actuals.getSubtermCount());
+		String text = "CompilationUnit("
+			+"[]" 
+			+", [ Package("
+			+"      QName([\"languages\", \"entitylang\"])"
+			+"    , [ Module("
+			+"          None() "
+			+"        , SPXModuleName(\"Entitylang-Descriptor\")"
+			+"        , [" 
+			+"          ]"
+			+"        )"
+			+"      ]"
+			+"    )"
+			+"  ]"
+			+")" ;
 		
-		//following invocation should return 1  ModuleDeclarations
-		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString2));
-		assertEquals(1, actuals.getSubtermCount());
+		return f.parseFromString(text);
 	}
 	
-	
-	public void testGetPackageDeclarationsByUri()
+	private ModuleDeclaration indexTestModuleDefs( String moduleName , String packageQName , String filePath) throws SpxSymbolTableException
 	{
-		String packageName1 =  	"\"languages\", \"entitylang\"" ;
-
-		indexTestPackageDecl(packageName1, absPathString1);
+		String moduleQName = packageQName  + ", \""+ moduleName  +"\"" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageQName+"]))");
 		
-		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
-		indexTestPackageDecl(packageName2, absPathString1);
+		IStrategoAppl mQnameAppl = (IStrategoAppl)termFactory().parseFromString("Module(QName(["+moduleQName+ "]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(termFactory(), moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(termFactory(), moduleName);
 		
-		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
-		indexTestPackageDecl(packageName3, absPathString2);
+		_facade.indexModuleDefinition(mQnameAppl, termFactory().makeString(filePath), pQnameAppl, ast, analyzed_ast);
 		
+		return _facade.lookupModuleDecl(mQnameAppl);
+	}
+	
+	private PackageDeclaration indexTestPackageDecl(String packageName , String fileName) throws SpxSymbolTableException {
 		
-		IStrategoList actuals = null;
-
+		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageName+"]))");
+		_facade.indexPackageDeclaration(pQnameAppl, termFactory().makeString(fileName));
 		
-		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString2));
-		assertEquals(1, actuals.getSubtermCount());
 		
-
-		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString1));
-		assertEquals(2, actuals.getSubtermCount());
+		return _facade.lookupPackageDecl(pQnameAppl);
 	}
-
 }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -0,0 +1,372 @@
+package org.spoofax.interpreter.library.language.spxlang.tests;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.LanguageLibrary;
+import org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.test.AbstractInterpreterTest;
+
+public class SpxSemanticIndexFacadeTest extends AbstractInterpreterTest{
+	
+	private final String _projectName = "test-sybol-table";
+	
+	private IStrategoString projectNameTerm; 
+	private SpxSemanticIndexFacade _facade;
+	
+	final String absPathString1 = "c:/temp/test1.spx" ;
+	final String absPathString2 = "c:/temp/test2.spx" ;
+
+	private Interpreter interpreter(){ return itp;	}
+
+	private IOAgent ioAgent() { return itp.getIOAgent(); }
+	
+	private ITermFactory termFactory() { return factory; 	}
+	
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
+		interpreter().addOperatorRegistry(new LanguageLibrary());
+		
+		projectNameTerm = termFactory().makeString(_projectName);
+		
+	
+		_facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
+		_facade.reinitSymbolTable();
+		indexCompilationUnit();
+	}
+	
+	@Override 
+	protected void tearDown() throws Exception { _facade.close(); }
+	
+	public void testGetModuleDeclarationsByFileUri()
+	{
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+
+		indexTestPackageDecl(packageName1, absPathString1);
+		indexTestModuleDefs ( "p1m1" , packageName1 , absPathString1);
+		indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
+		
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName2, absPathString1);
+		indexTestModuleDefs ( "p2m2" , packageName2 , absPathString1);
+		
+		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName3, absPathString2);
+		indexTestModuleDefs ( "p3m2" , packageName3 , absPathString2);
+		
+		IStrategoList actuals = null;
+		//following invocation should return 2 ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString1));
+		
+		assertEquals(3, actuals.getSubtermCount());
+		
+		//following invocation should return 1  ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( termFactory().makeString(absPathString2));
+		assertEquals(1, actuals.getSubtermCount());
+		
+		
+		//Test Namespaces 
+		_facade.persistenceManager().spxSymbolTable().getAllNamespaces();
+	}
+	
+	public void testGetModuleDeclarationsByPackageId() throws SpxSymbolTableException
+	{
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+		
+		IStrategoAppl pQnameAppl = indexTestPackageDecl(packageName1, absPathString1);
+		indexTestModuleDefs ( "m1" , packageName1 , absPathString1);
+		indexTestModuleDefs ( "m2" , packageName1 , absPathString1);
+		
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		IStrategoAppl pQnameAppl2 = indexTestPackageDecl(packageName2, absPathString1);
+		indexTestModuleDefs ( "m2" , packageName2 , absPathString1);
+		
+		IStrategoList actuals = null;
+		
+		//following invocation should return 2 ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( pQnameAppl );
+		
+		assertEquals(2, actuals.getSubtermCount());
+		
+		//following invocation should return 1 ModuleDeclarations
+		actuals = _facade.getModuleDeclarations( pQnameAppl2 );
+		
+		assertEquals(1, actuals.getSubtermCount());
+	}
+
+	public void testGetModuleDeclarationsWithUnknownPackageID() throws SpxSymbolTableException
+	{
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+		indexTestPackageDecl(packageName1, absPathString1);
+		indexTestModuleDefs ( "m1" , packageName1 , absPathString1);
+		indexTestModuleDefs ( "m2" , packageName1 , absPathString1);
+		
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName2, absPathString1);
+		indexTestModuleDefs ( "m2" , packageName2 , absPathString1);
+		
+		
+		String unknown =  	"\"languages\", \"unknown\"" ;
+		IStrategoAppl pUnknownQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+unknown+"]))");
+		IStrategoList actuals = null;
+		
+		try{
+			//following invocation should return 2 ModuleDeclarations
+			actuals = _facade.getModuleDeclarations( pUnknownQnameAppl );
+		}catch(IllegalArgumentException ex)
+		{
+			
+		}
+		
+	}
+
+	public void testGetPackageDeclarationsByUri()
+	{
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+
+		indexTestPackageDecl(packageName1, absPathString1);
+		
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName2, absPathString1);
+		
+		String packageName3 =  	"\"languages\", \"entitylang2\"" ;
+		indexTestPackageDecl(packageName3, absPathString2);
+		
+		IStrategoList actuals = null;
+		
+		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString2));
+		assertEquals(1, actuals.getSubtermCount());
+
+		actuals = _facade.getPackageDeclarations(termFactory().makeString(absPathString1));
+		assertEquals(2, actuals.getSubtermCount());
+		
+		
+	}
+	
+	public void testIndexingImportReferences() throws SpxSymbolTableException
+	{
+
+		String packageName1 =  	"\"languages\", \"entitylang1\"" ;
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		
+		IStrategoAppl pQnameAppl1 = indexTestPackageDecl(packageName1, absPathString1);
+		IStrategoAppl pQnameAppl2 = indexTestPackageDecl(packageName2, absPathString1);
+		
+		String packageName3 =  	"\"languages\", \"entitylang3\"" ;
+		IStrategoAppl pQnameAppl3 = indexTestPackageDecl(packageName3, absPathString1);
+		IStrategoAppl mQnameAppl2  = indexTestModuleDefs ( "m2" , packageName3 , absPathString1);
+		
+		IStrategoAppl importDecl1 = this.termFactory().makeAppl(_facade.getImportDeclCon(), pQnameAppl3,  this.termFactory().makeList(pQnameAppl1) );
+		this._facade.indexImportReferences(importDecl1);
+		
+		IStrategoAppl importDecl2 = this.termFactory().makeAppl(_facade.getImportDeclCon(), mQnameAppl2,  this.termFactory().makeList(pQnameAppl2) );
+		this._facade.indexImportReferences(importDecl2);
+		
+		
+		IStrategoList actuals = null;
+		
+		actuals = (IStrategoList) _facade.getImportReferences(pQnameAppl1);
+		
+		assertEquals(0, actuals.size());
+		
+
+		actuals = (IStrategoList) _facade.getImportReferences( mQnameAppl2 );
+		assertEquals(2, actuals.size());
+		
+		//following invocation should return both the import reference of itself and enclosing
+		//modules' import references. 
+		//Hence, it will return both pQnameAppl1 and pQnameAppl2
+		actuals = (IStrategoList) _facade.getImportReferences( pQnameAppl3 );
+		
+		assertEquals(2, actuals.size());
+
+		PackageDeclaration decl =  _facade.lookupPackageDecl(pQnameAppl1);
+		
+		assertEquals(1, decl.getImortedToPackageReferences().size());
+	}
+	
+	public void testIndexModuleDeclaration() throws IllegalArgumentException, SpxSymbolTableException 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		_facade.indexModuleDefinition(mQnameAppl, f.makeString(absPathString1), pQnameAppl, ast, analyzed_ast);
+		
+		
+		IStrategoAppl moduleDeclaration = (IStrategoAppl)_facade.getModuleDeclaration( mQnameAppl );
+		
+		_facade.verifyConstructor(moduleDeclaration.getConstructor(), _facade.getModuleDeclCon(), "Wrong Module Declaration Constructs");
+	}	
+	
+	public void testIndexPackageDeclaration() throws SpxSymbolTableException 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		
+		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
+		
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration"); 
+	}
+	
+	public void testIndexPackageDeclarationInMultipleFiles() throws SpxSymbolTableException {
+		ITermFactory f = termFactory() ;
+		
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString2));
+		
+		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
+		
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
+	
+		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
+	}
+	
+	public void testIndexremovePackageDeclaredinMultipleFiles() throws SpxSymbolTableException 
+	{
+		ITermFactory f = termFactory() ;
+		
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))");
+		
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		//setting up index
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString1));
+		_facade.indexPackageDeclaration(pQnameAppl, f.makeString(absPathString2));
+		_facade.indexModuleDefinition(mQnameAppl, f.makeString(absPathString2), pQnameAppl, ast, analyzed_ast);
+		
+		
+		//getting package declaration
+		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
+		
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
+		
+		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
+		
+		//removing uri from the declaration
+		_facade.removePackageDeclaration( f.makeString(absPathString1), pQnameAppl);
+		packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
+		assertEquals(1, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
+		
+		// removing uri from the declaration . This time there will not be any uri left. Hence
+		// the package will be deleted as well as it all enlosed modules.
+		_facade.removePackageDeclaration( f.makeString(absPathString2), pQnameAppl);
+		
+		try {
+			_facade.getPackageDeclaration(pQnameAppl);
+		} catch (SpxSymbolTableException ex) { // hence , not found in the
+												// symbol table
+
+		}
+
+		try {
+			_facade.getModuleDeclaration(mQnameAppl);
+		} catch (SpxSymbolTableException ex) { // hence , not found in the
+												// symbol table
+		}
+
+	}
+	
+	public void indexCompilationUnit() throws IOException
+	{	
+		ITermFactory f = termFactory() ;
+		
+		_facade.indexCompilationUnit(f.makeString(absPathString1),
+				(IStrategoAppl) getCompilationUnit(f));
+		
+		_facade.indexCompilationUnit(f.makeString(absPathString2),
+				(IStrategoAppl) getCompilationUnit(f));
+	}
+	
+	static IStrategoTerm getCompilationUnit( ITermFactory f)
+	{
+		String text = "CompilationUnit("
+			+"[]" 
+			+", [ Package("
+			+"      QName([\"languages\", \"entitylang\"])"
+			+"    , [ Module("
+			+"          None() "
+			+"        , SPXModuleName(\"Entitylang-Descriptor\")"
+			+"        , [" 
+			+"          ]"
+			+"        )"
+			+"      ]"
+			+"    )"
+			+"  ]"
+			+")" ;
+		
+		return f.parseFromString(text);
+	}
+	
+	public void testUnknownPackageNameThrowsIllegalArgumentException() 
+	{
+		ITermFactory f = termFactory() ;
+
+		String moduleName =  "m1" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)f.parseFromString("Package(QName([\"languages\", \"entitylang\"]))"); 
+		IStrategoAppl mQnameAppl = (IStrategoAppl)f.parseFromString("Module(QName([\"languages\", \"entitylang\" , \""+ moduleName  +"\"]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(f, moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(f, moduleName);
+		
+		try{
+		_facade.indexModuleDefinition( mQnameAppl ,f.makeString(absPathString1) ,pQnameAppl , ast, analyzed_ast);
+		}
+		catch(IllegalArgumentException ex)
+		{
+			
+		}
+	}
+	
+	private IStrategoAppl indexTestModuleDefs( String moduleName , String packageQName , String filePath)
+	{
+		String moduleQName = packageQName  + ", \""+ moduleName  +"\"" ;
+		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageQName+"]))");
+		
+		IStrategoAppl mQnameAppl = (IStrategoAppl)termFactory().parseFromString("Module(QName(["+moduleQName+ "]))");
+		IStrategoAppl ast = (IStrategoAppl)SpxLookupTableUnitTests.getModuleDefinition(termFactory(), moduleName);
+		IStrategoAppl analyzed_ast = (IStrategoAppl)SpxLookupTableUnitTests.getAnalyzedModuleDefinition(termFactory(), moduleName);
+		
+		_facade.indexModuleDefinition(mQnameAppl, termFactory().makeString(filePath), pQnameAppl, ast, analyzed_ast);
+		
+		return mQnameAppl;
+	}
+	
+	private IStrategoAppl indexTestPackageDecl(String packageName , String fileName) {
+		
+		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageName+"]))");
+		_facade.indexPackageDeclaration(pQnameAppl, termFactory().makeString(fileName));
+		return pQnameAppl;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSymbolTableEntryTests.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSymbolTableEntryTests.java	Tue Oct  4 21:09:10 2011	(r23416)
@@ -0,0 +1,70 @@
+package org.spoofax.interpreter.library.language.spxlang.tests;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.LanguageLibrary;
+import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableEntry;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.test.AbstractInterpreterTest;
+
+public class SpxSymbolTableEntryTests extends AbstractInterpreterTest{
+	private final String _projectName = "test-sybol-table";
+	
+	private IStrategoString projectNameTerm; 
+	private SpxSemanticIndexFacade _facade;
+	
+	final String absPathString1 = "c:/temp/test1.spx" ;
+	final String absPathString2 = "c:/temp/test2.spx" ;
+
+	private Interpreter interpreter(){ return itp;	}
+
+	private IOAgent ioAgent() { return itp.getIOAgent(); }
+	
+	private ITermFactory termFactory() { return factory; 	}
+	
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
+		interpreter().addOperatorRegistry(new LanguageLibrary());
+		
+		projectNameTerm = termFactory().makeString(_projectName);
+		
+	
+		_facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
+		_facade.reinitSymbolTable();
+	}
+	
+	public void testSpoofaxSymbolTableEntryBuilder() throws IOException{
+
+		String packageName1 =  	"\"languages\", \"entitylang\"" ;
+		IStrategoAppl data = indexTestPackageDecl(packageName1, absPathString1);
+		IStrategoTerm id =  termFactory().parseFromString(packageName1);
+		
+		SpxSymbolTableEntry entry = 
+			SpxSymbolTableEntry.newEntry()
+						  .with(id)
+						  .instanceOf(_facade.getGlobalNamespaceTypeCon())	
+					      .uses(_facade.getTermAttachmentSerializer())
+					      .data(data)
+					      .build();
+		
+		assertTrue(entry.value != null);
+		assertTrue(entry.value.namespaceUri() == null);
+		assertEquals(_facade.getGlobalNamespaceTypeCon().getName() , entry.value.type());
+		assertEquals(_facade.getGlobalNamespaceTypeCon(), entry.value.typeCons(_facade));
+		assertTrue(entry.key != null);
+	}
+	
+	private IStrategoAppl indexTestPackageDecl(String packageName , String fileName) {
+		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageName+"]))");
+		return pQnameAppl;
+	}
+
+	
+}

From M.A.Akhter at student.tudelft.nl  Wed Oct  5 14:18:04 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 05 Oct 2011 12:18:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23417 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111005121804.AC7462B801F@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Oct  5 12:18:04 2011
New Revision: 23417
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23417&sc=1

Log:
+ fixed bugs

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct  5 12:18:04 2011	(r23417)
@@ -42,9 +42,9 @@
 		
 		this.type = type;
 		
-		src = (_enclosingNamespaceId!= null) ? type.toString() + _enclosingNamespaceId.uniqueID()+".idx" :  type.toString()  + "___globalsymbols.idx" ; 
+		src = (_enclosingNamespaceId!= null) ? type.toString() + _currentNamespaceId.uniqueID()+".idx" :  type.toString()  + "___globalsymbols.idx" ; 
 			
-		_symbols = new MultiValuePersistentTable( manager.getProjectName()+src);
+		_symbols = new MultiValuePersistentTable();
 	}
 
 	public void define(SpxSymbolTableEntry entry, ILogger logger){
@@ -59,7 +59,7 @@
 	/* 
 	 * Returns the enclosing scope of the current scope.
 	 * */
-	public INamespace getEnclosingNamespace(INamespaceResolver rs) { return _enclosingNamespaceId.resolve(rs); }
+	public INamespace getEnclosingNamespace(INamespaceResolver rs) { return (_enclosingNamespaceId != null) ? _enclosingNamespaceId.resolve(rs) : null; }
 	
 	public INamespace getCurrentNamespace(INamespaceResolver rs){ return _enclosingNamespaceId.resolve(rs); }
 	
@@ -67,7 +67,7 @@
 		
 		assert type instanceof IStrategoConstructor : "Type is expected to be IStrategoConstructor" ;
 			
-		List<SpxSymbol> lookupResult = getMembers().get(id);
+		List<SpxSymbol> lookupResult = getMembers().resolve(id);
 		if( lookupResult!=null){
 			List<SpxSymbol> expectedTypedSymbol = SpxSymbol.filterByType((IStrategoConstructor)type, lookupResult);
 		
@@ -93,7 +93,7 @@
 		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
-		List<SpxSymbol> lookupResult = getMembers().get(id);
+		List<SpxSymbol> lookupResult = getMembers().resolve(id);
 		retResult.addAll(lookupResult);
 		
 		INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
@@ -135,12 +135,12 @@
 	protected boolean shouldSearchInInternalNamespace( INamespace searchedBy) {
 		// If searchedBy Namespace is enclosingNamespace of CurrentNamespace 
 		// Search for internal symbol scopes as well
-		return searchedBy.namespaceUri() == this.enclosingNamespaceUri()  || searchedBy.namespaceUri() == this.namespaceUri();  
+		return searchedBy.namespaceUri().equals(this.enclosingNamespaceUri()) || searchedBy.namespaceUri().equals(this.namespaceUri());  
 	}
 	
 	protected boolean shouldSearchInEnclosingNamespace(INamespace searchedBy) {
 		// search enclosing Namesapce only if searchedBy is not enclosing Namespace
-		return (searchedBy.namespaceUri() != this.enclosingNamespaceUri() ); 
+		return !(searchedBy.namespaceUri().equals(this.enclosingNamespaceUri())); 
 	}
 
 	/* (non-Javadoc)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Oct  5 12:18:04 2011	(r23417)
@@ -92,8 +92,7 @@
 		return true;
 	}
 	
-	public static IStrategoList getModuleId(SpxSemanticIndexFacade facade, IStrategoAppl moduleQName )
-	{
+	public static IStrategoList getModuleId(SpxSemanticIndexFacade facade, IStrategoAppl moduleQName ){
 		IStrategoConstructor moduleCon  = facade.getModuleQNameCon();
 		
 		if(moduleCon   == moduleQName.getConstructor())

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Wed Oct  5 12:18:04 2011	(r23417)
@@ -27,8 +27,8 @@
 
 	private static final long serialVersionUID = -473055635199728599L;
 	private final HashMap<SpxSymbolKey, List<SpxSymbol>> symbols;
-	
-	public MultiValuePersistentTable(String name){
+
+	public MultiValuePersistentTable(){
 		symbols = new HashMap<SpxSymbolKey , List<SpxSymbol>>();
 	}
 	
@@ -60,5 +60,11 @@
 		}
 	}
 	
-	public List<SpxSymbol> get(IStrategoTerm id){ return symbols.get(id); }
+	public List<SpxSymbol> resolve(IStrategoTerm id){
+		
+		SpxSymbolKey key = new SpxSymbolKey(id);
+		List<SpxSymbol> resolvedSymbols = symbols.get(key);
+		
+		return (resolvedSymbols == null) ? new ArrayList<SpxSymbol>() : resolvedSymbols ; 
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Wed Oct  5 12:18:04 2011	(r23417)
@@ -13,7 +13,9 @@
 
 
 /**
- * Implementation of a PackageNamesapce. 
+ * Implementation of a PackageNamesapce.  Every PackageDeclaration is associated with a PackageNamespace 
+ * which has 0 or more ModuleNamepsaces enclosed. 
+ * 
  * @author Md. Adil Akhter
  */
 public class PackageNamespace  extends BaseNamespace {
@@ -33,7 +35,11 @@
 		if( enclosedNamespaceUris == null){
 			enclosedNamespaceUris = new HashSet<NamespaceUri>();
 			
+			//add internal ModuleDeclaration 
+			//enclosedNamespaceUris.add()	
+			
 			Iterable<ModuleDeclaration> mDecls = facade.getModuleDeclarations( this.namespaceUri().id());
+	
 			if(mDecls !=null){
 				for(ModuleDeclaration m : mDecls){
 					enclosedNamespaceUris.add(m.getNamespaceUri(facade));
@@ -92,12 +98,15 @@
 		
 		retResult.addAll((Set<SpxSymbol>)super.resolveAll(key, this, facade));
 		
+		//searching in the enclosed namespace. For PackageNamespace, all the enclosed ModuleNamespace is searched. 
 		ensureEnclosedNamespaceUrisLoaded(facade);
 		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, originNamespace, facade)) ;
 		
+		//searching in the imported namespaces. 
 		ensureImportedNamespaceUrisLoaded(facade);
 		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, originNamespace, facade)) ;
 		
+		//returning the result 
 		return retResult;
 	}
 	
@@ -173,7 +182,7 @@
 				// hence, ignoring it.
 				continue;
 			}
-			retSymbol.addAll((Set<SpxSymbol>)thisNamespace.resolveAll(key, searchOrigin, facade));
+			retSymbol.addAll((Set<SpxSymbol>)thisNamespace.resolveAll(key, this, facade));
 		}
 		
 		return retSymbol;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct  5 12:18:04 2011	(r23417)
@@ -264,8 +264,17 @@
 	public void indexSymbol(IStrategoAppl symbolDefinition) throws SpxSymbolTableException, IOException{	
 		final int NAMESPACE_ID_INDEX  = 0;
 		verifyConstructor(symbolDefinition.getConstructor(), getSymbolTableEntryDefCon(), "Illegal SymbolDefinition argument");
-		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)symbolDefinition.getSubterm(SpxSymbolTableEntry.SYMBOL_ID_INDEX));
-
+		IStrategoConstructor typeCtor = null;
+		
+		try{
+			typeCtor = verifyKnownContructorExists((IStrategoAppl)symbolDefinition.getSubterm(SpxSymbolTableEntry.TYPE_INDEX));
+		}catch(IllegalArgumentException ex){
+			// It seems like the constructor does not exist in local type declarations. 
+			// Hence, defining it to be used further.
+			IStrategoConstructor ctor = ((IStrategoAppl)symbolDefinition.getSubterm(SpxSymbolTableEntry.SYMBOL_ID_INDEX)).getConstructor();
+			ConstructorDef.newInstance(ctor.getName() , ctor.getArity()).index(_knownCons, ctor);
+		}
+		
 		// Constructing Spx Symbol-Table Entry from the provided symbolDefinition argument.  
 		// Note: TermAttachment or Annotation are stripped from the ID Term since, in symbol-table, term attachments 
 		// is not require and will make the equals operation a bit complicated. 
@@ -289,14 +298,12 @@
 	public Iterable<IStrategoTerm> resolveSymbols(IStrategoTuple symbolLookupTerm) throws SpxSymbolTableException{
 		if (symbolLookupTerm.getSubtermCount() != 3)
 			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + symbolLookupTerm.getSubtermCount());
-		
 		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)symbolLookupTerm.getSubterm(2));
 		return resolveSymbols( 
 				(IStrategoAppl)symbolLookupTerm.get(0),
 				symbolLookupTerm.get(1),
 				typeCtor
 		); 
-			 
 	}
 
 	/**
@@ -342,8 +349,6 @@
 	 */
 	private IStrategoList getNamespaceId(IStrategoAppl namespaceTypedQname) throws SpxSymbolTableException {
 		IStrategoList namespaceId;
-		
-		
 		if (namespaceTypedQname.getConstructor() == getModuleQNameCon() || namespaceTypedQname.getConstructor() == getPackageQNameCon()) {
 			namespaceId = IdentifiableConstruct.getID(this, (IStrategoAppl) namespaceTypedQname.getSubterm(0));
 		} else if (namespaceTypedQname.getConstructor() == getGlobalNamespaceTypeCon()) {
@@ -910,9 +915,14 @@
 		
 		void index(HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac)
 		{
-			cons.put(this, this.toStrategoConstructor(fac)) ;
+			
+			this.index(cons, this.toStrategoConstructor(fac));
+		}
+		
+		void index(HashMap<ConstructorDef , IStrategoConstructor> cons , IStrategoConstructor ctor)
+		{
+			cons.put(this, ctor) ;
 		}
-
 	
 		@Override
 		public String toString() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Oct  5 12:18:04 2011	(r23417)
@@ -14,17 +14,26 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.terms.attachments.TermAttachmentSerializer;
 
-
-
 class BaseSymbol implements Serializable{
 
 	private static final long serialVersionUID = 3160588874266553126L;
 	
-	protected IStrategoTerm _id;
+	protected transient IStrategoTerm _id;
+	//protected  IStrategoTerm _id;
+	protected String _idString;
 	
-	public BaseSymbol(IStrategoTerm id){_id = id ; }
+	public BaseSymbol(IStrategoTerm id){
+		_id = id ;
+		_idString = id.toString(Integer.MAX_VALUE);
+	
+	}
 	
-	IStrategoTerm Id(){return _id;}
+	IStrategoTerm Id(ITermFactory _fac ){
+		if (_id == null){
+			_id = _fac.parseFromString(_idString);
+		}
+		return _id;
+	}
 	
 	void setId(IStrategoTerm id){_id = id;}
 	
@@ -67,13 +76,7 @@
 		return retValue;
 	}
 
-	/**
-	 * @param retValue
-	 * @param currentTerms
-	 * @param otherTerms
-	 * @return
-	 */
-	private static boolean verifyEquals( IStrategoTerm[] currentTerms, IStrategoTerm[] otherTerms) {
+	protected static boolean verifyEquals( IStrategoTerm[] currentTerms, IStrategoTerm[] otherTerms) {
 		boolean retValue = false;
 		
 		if( currentTerms.length == otherTerms.length){
@@ -87,6 +90,45 @@
 		}
 		return retValue;
 	}		
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((_idString == null) ? 0 : _idString.hashCode());
+		//result = prime * result + ((_idString == null) ? 0 : _id.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		BaseSymbol other = (BaseSymbol) obj;
+//		if (_id == null) {
+//			if (other._id != null)
+//				return false;
+//		}else if(!verifyEquals(this._id, other._id)){ 
+//			return false;
+//		}
+		if (_idString == null) {
+			if (other._idString != null)
+				return false;
+		}else if( !this._idString.equals(other._idString ) ){
+			return false;
+		}
+		return true;
+	}
 }
 
 public class SpxSymbol extends BaseSymbol implements Serializable{
@@ -160,7 +202,7 @@
 		IStrategoAppl nsQNameAppl = termFactory.makeAppl(qnameCons, namespaceUri().id());
 		
 		//ID/Key 
-		IStrategoTerm id = this.Id(); //TODO : It might require term conversion.
+		IStrategoTerm id = this.Id(termFactory); //TODO : It might require term conversion.
 
 		return (IStrategoTerm)termFactory.makeAppl( facade.getSymbolTableEntryDefCon(),
 				nsQNameAppl,  //ns qname 
@@ -234,40 +276,9 @@
 	private static final long serialVersionUID = 7804281029276443583L;
 	
 	public SpxSymbolKey(IStrategoTerm id){ super(id); }
-	
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + ((_id == null) ? 0 : _id.hashCode());
-		return result;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		
-		SpxSymbolKey other = (SpxSymbolKey) obj;
-		if (_id == null) {
-			if (other._id != null)
-				return false;
-		}else if(!verifyEquals(this._id, other._id)){ 
-			return false;
-		}
-		
-		return true;
-	}
 
 	@Override
 	public String toString() {
-		return "SpxIndexKey [_id=" + _id +"]";
+		return "SpxIndexKey {_id=" + _id +"}";
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableEntry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableEntry.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableEntry.java	Wed Oct  5 12:18:04 2011	(r23417)
@@ -13,11 +13,10 @@
 	public SpxSymbolKey key;
 	public SpxSymbol value;
 	
-	static final int NAMESPACE_ID_INDEX  = 0;
-	static final int TYPE_INDEX = 1;
+	static final int SYMBOL_ID_INDEX = 1;
+	static final int TYPE_INDEX = 2;
 	static final int DATA_INDEX = 3;
-	static final int SYMBOL_ID_INDEX = 2;
-
+	
     public SpxSymbolTableEntry(SpxSymbolKey paramK, SpxSymbol paramV) {
       this.key = paramK;
       this.value = paramV;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 12:18:04 2011	(r23417)
@@ -15,6 +15,7 @@
 import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
 import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -91,20 +92,10 @@
 		moduleDeclarationP1M2 = indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
 		moduleDeclarationP2M1 = indexTestModuleDefs ( "p2m1" , packageName2 , absPathString2);
 	}
+
 	/**
-	 * @return
+	 * Validates that Global Namespace is defined only once 
 	 */
-	private int noOfGlobalNamespaceInSymbolTable() {
-		int noOfGlobalNamespace = 0 ;
-		
-		Iterable<NamespaceUri> uris = symbol_table.getAllNamespaces();
-		for( NamespaceUri uri : uris){
-			if ( uri.equalSpoofaxId(GlobalNamespace.getGlobalNamespaceId(_facade)))
-				noOfGlobalNamespace = noOfGlobalNamespace  +1 ;
-		}
-		return noOfGlobalNamespace;
-	}
-
 	public void testOnlyOneGlobalNamespaceExists() {
 		
 		assertEquals(1, noOfGlobalNamespaceInSymbolTable());
@@ -119,6 +110,12 @@
 	}
 	
 	
+	/**
+	 * Tests resolving Namespace from Symbol-Table 
+	 * 
+	 * @throws IOException
+	 * @throws SpxSymbolTableException
+	 */
 	public void testResolveNamespace() throws IOException, SpxSymbolTableException
 	{
 		setupScopeTree();
@@ -157,8 +154,7 @@
 
 	}
 	
-	public void testNoOfNamespaceDefined() throws IOException, SpxSymbolTableException 
-	{
+	public void testNoOfNamespaceDefined() throws IOException, SpxSymbolTableException {
 		setupScopeTree();
 		
 		// Expected #namespace = 1 global namespace + 2 namespaces for Package p1 
@@ -166,6 +162,40 @@
 		assertEquals( 1 + 2 + 2 + 2 + 1 ,symbol_table.size());
 	}
 	
+	public void testDefiningGlobalSymbol() throws IOException, SpxSymbolTableException {
+		
+		setupScopeTree();
+
+		// defining a composite key 
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		// defining following composite ID :  (Global() , "TestId")
+		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId")); 
+		// defining Data 
+		IStrategoTerm data = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);
+		// setting Type to Global() 
+		IStrategoAppl typeAppl = namespaceAppl ; 
+		
+		// Defining Symbol-Table entry 
+		IStrategoAppl symbolDef = createEntry(namespaceAppl , symbolId , typeAppl  , data);
+		
+		// Indexing Symbol
+		_facade.indexSymbol(symbolDef);
+		
+		// Resolving Symbol 
+		_facade.resolveSymbols( 
+				termFactory().makeTuple( 
+					ModuleDeclaration.toModuleIdTerm(_facade, moduleDeclarationP1M1),
+					symbolId,
+					typeAppl 
+				));
+	}
+	
+	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
+		
+		IStrategoConstructor ctor = _facade.getSymbolTableEntryDefCon();
+		IStrategoAppl symbolEntryAppl = (IStrategoAppl)termFactory().makeAppl(ctor, namespaceAppl , id , typeAppl,data);
+		return symbolEntryAppl;
+	}
 	
 	static IStrategoTerm getCompilationUnit( ITermFactory f)
 	{
@@ -187,6 +217,8 @@
 		return f.parseFromString(text);
 	}
 	
+	private IStrategoTerm getId(String idString) { return termFactory().parseFromString(idString);}
+	
 	private ModuleDeclaration indexTestModuleDefs( String moduleName , String packageQName , String filePath) throws SpxSymbolTableException
 	{
 		String moduleQName = packageQName  + ", \""+ moduleName  +"\"" ;
@@ -209,4 +241,15 @@
 		
 		return _facade.lookupPackageDecl(pQnameAppl);
 	}
+	
+	private int noOfGlobalNamespaceInSymbolTable() {
+		int noOfGlobalNamespace = 0 ;
+		
+		Iterable<NamespaceUri> uris = symbol_table.getAllNamespaces();
+		for( NamespaceUri uri : uris){
+			if ( uri.equalSpoofaxId(GlobalNamespace.getGlobalNamespaceId(_facade)))
+				noOfGlobalNamespace = noOfGlobalNamespace  +1 ;
+		}
+		return noOfGlobalNamespace;
+	}
 }

From M.A.Akhter at student.tudelft.nl  Wed Oct  5 20:57:39 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 05 Oct 2011 18:57:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23418 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111005185739.EFBF62B8004@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Oct  5 18:57:39 2011
New Revision: 23418
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23418&sc=1

Log:
+1 Unit Test

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Wed Oct  5 12:18:04 2011	(r23417)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Wed Oct  5 18:57:39 2011	(r23418)
@@ -56,9 +56,7 @@
 	 * @throws IllegalArgumentException
 	 * @throws NotImplementedException
 	 */
-	private void addManagedImport(SpxSemanticIndexFacade idxFacade,
-			IStrategoTerm i) throws SpxSymbolTableException,
-			NotImplementedException {
+	private void addManagedImport(SpxSemanticIndexFacade idxFacade,	IStrategoTerm i) throws SpxSymbolTableException {
 		IStrategoAppl packageRef = (IStrategoAppl)i;
 		if( packageRef.getConstructor() ==  idxFacade.getPackageQNameCon()){
 			IStrategoList id = PackageDeclaration.getPackageId(idxFacade, packageRef);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Wed Oct  5 12:18:04 2011	(r23417)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Wed Oct  5 18:57:39 2011	(r23418)
@@ -26,20 +26,31 @@
 	// Not serializing it to disk since we already have this information in SpxSemanticIndex
 	private transient Set<NamespaceUri> importedNamespaceUris;
 	private transient Set<NamespaceUri> enclosedNamespaceUris;
+	private transient PackageDeclaration assiciatedPackageDeclaration;
 	
+	/**
+	 * @param currentNamespace
+	 * @param type
+	 * @param enclosingNamespace
+	 * @param manager
+	 */
 	private PackageNamespace(NamespaceUri currentNamespace, IStrategoConstructor type, NamespaceUri enclosingNamespace, ISpxPersistenceManager manager) {
 		super(currentNamespace, type, manager, enclosingNamespace);
 	}
 	
+	/**
+	 * 
+	 * @param facade
+	 * @throws SpxSymbolTableException
+	 */
 	private void ensureEnclosedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
 		if( enclosedNamespaceUris == null){
 			enclosedNamespaceUris = new HashSet<NamespaceUri>();
 			
-			//add internal ModuleDeclaration 
-			//enclosedNamespaceUris.add()	
+			//add internal Module's namespace uri  
+			packageInternalNamespace(this.namespaceUri() , facade);
 			
 			Iterable<ModuleDeclaration> mDecls = facade.getModuleDeclarations( this.namespaceUri().id());
-	
 			if(mDecls !=null){
 				for(ModuleDeclaration m : mDecls){
 					enclosedNamespaceUris.add(m.getNamespaceUri(facade));
@@ -48,6 +59,27 @@
 		}
 	}
 	
+
+	/**
+	 * Restricts transitive imports. If {@code searchOrigin}  {@link INamespace} imports 
+	 * current {@link INamespace}, then in order to avoid transitive lookup , resolving in 
+	 * the imported {@link INamespace}s is avoided.     
+	 * 
+	 * @param facade
+	 * @param searchOrigin
+	 * @return
+	 * @throws SpxSymbolTableException
+	 */
+	boolean isTransitiveImportLookup(SpxSemanticIndexFacade facade , INamespace searchOrigin) throws SpxSymbolTableException{
+		
+		if(assiciatedPackageDeclaration == null)
+			assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
+		
+		Set<IStrategoList> importedToPackages = assiciatedPackageDeclaration.getImortedToPackageReferences();
+		
+		return importedToPackages.contains(searchOrigin);
+	}
+	
 	private void ensureImportedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
 		if( importedNamespaceUris == null){
 			
@@ -56,8 +88,10 @@
 			SpxPrimarySymbolTable symTable =  facade.persistenceManager().spxSymbolTable();
 			
 			//getting the package declaration and retrieving it imported references 
-			PackageDeclaration decl = facade.lookupPackageDecl(this.namespaceUri().id());
-			Iterable<IStrategoList> importedIds = decl.getImportReferneces();
+			if(assiciatedPackageDeclaration == null)
+				assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
+			
+			Iterable<IStrategoList> importedIds = assiciatedPackageDeclaration.getImportReferneces();
 			
 			for(IStrategoList l : importedIds){
 				importedNamespaceUris.add(symTable.toNamespaceUri(l));; 
@@ -83,10 +117,11 @@
 			retSymbol = super.resolve(id, type, this, facade);
 
 			if (retSymbol == null) {
-				// try to resolve in the imported namespaces
-				ensureImportedNamespaceUrisLoaded(facade);
-				retSymbol = resolveSymbolinNamespaces(this.importedNamespaceUris, id, type, searchedBy, facade);
-
+				if ( !isTransitiveImportLookup(facade , searchedBy)) {
+					// try to resolve in the imported namespaces
+					ensureImportedNamespaceUrisLoaded(facade);
+					retSymbol = resolveSymbolinNamespaces(this.importedNamespaceUris, id, type, searchedBy, facade);
+				}
 			}
 		}
 		return retSymbol;
@@ -102,15 +137,16 @@
 		ensureEnclosedNamespaceUrisLoaded(facade);
 		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, originNamespace, facade)) ;
 		
-		//searching in the imported namespaces. 
-		ensureImportedNamespaceUrisLoaded(facade);
-		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, originNamespace, facade)) ;
 		
+		if ( !isTransitiveImportLookup(facade , originNamespace)) {
+			//searching in the imported namespaces. 
+			ensureImportedNamespaceUrisLoaded(facade);
+			retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, originNamespace, facade)) ;
+		}
 		//returning the result 
 		return retResult;
 	}
 	
-	
 	/**
 	 * Creates an instance of PackageScope. Also creates internal symbol scopes
 	 * 
@@ -188,8 +224,8 @@
 		return retSymbol;
 	}
 	
-	private boolean disallowLookupIn( INamespace namespace , INamespace originNamespace)
-	{
+	private boolean disallowLookupIn( INamespace namespace , INamespace originNamespace){
+		
 		boolean resolveInCurrentNamespaceIsNotAllowed = namespace.isInternalNamespace() && !shouldSearchInInternalNamespace(originNamespace) ;
 		boolean currentNamespaceIsSearchedOrigin = namespace.namespaceUri() == originNamespace.namespaceUri();  // disallowing repeatative resolve of the namespace from where search originated.
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 12:18:04 2011	(r23417)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 18:57:39 2011	(r23418)
@@ -180,16 +180,24 @@
 		
 		// Indexing Symbol
 		_facade.indexSymbol(symbolDef);
+	
 		
 		// Resolving Symbol 
-		_facade.resolveSymbols( 
+		Iterable<IStrategoTerm> resolvedSymbols = 
+			_facade.resolveSymbols( 
 				termFactory().makeTuple( 
 					ModuleDeclaration.toModuleIdTerm(_facade, moduleDeclarationP1M1),
 					symbolId,
 					typeAppl 
 				));
+		
+		int actualCount = 0 ;
+		for( IStrategoTerm t : resolvedSymbols ) { actualCount += 1; }
+		assertEquals( 1 , actualCount);
 	}
 	
+	
+	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
 		
 		IStrategoConstructor ctor = _facade.getSymbolTableEntryDefCon();

From M.A.Akhter at student.tudelft.nl  Wed Oct  5 21:42:30 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 05 Oct 2011 19:42:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23419 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111005194230.7C3AB2B8004@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Oct  5 19:42:30 2011
New Revision: 23419
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23419&sc=1

Log:
+ throwing exception if namespace is unresolved. 
+ 2 more unit tests added

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct  5 18:57:39 2011	(r23418)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct  5 19:42:30 2011	(r23419)
@@ -59,9 +59,9 @@
 	/* 
 	 * Returns the enclosing scope of the current scope.
 	 * */
-	public INamespace getEnclosingNamespace(INamespaceResolver rs) { return (_enclosingNamespaceId != null) ? _enclosingNamespaceId.resolve(rs) : null; }
+	public INamespace getEnclosingNamespace(INamespaceResolver rs) throws SpxSymbolTableException { return (_enclosingNamespaceId != null) ? _enclosingNamespaceId.resolve(rs) : null; }
 	
-	public INamespace getCurrentNamespace(INamespaceResolver rs){ return _enclosingNamespaceId.resolve(rs); }
+	public INamespace getCurrentNamespace(INamespaceResolver rs) throws SpxSymbolTableException{ return _currentNamespaceId.resolve(rs); }
 	
 	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException{
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Oct  5 18:57:39 2011	(r23418)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Oct  5 19:42:30 2011	(r23419)
@@ -11,9 +11,9 @@
 
 public interface INamespace extends Serializable {
     
-	INamespace getEnclosingNamespace(INamespaceResolver resolver);
+	INamespace getEnclosingNamespace(INamespaceResolver resolver) throws SpxSymbolTableException;
 
-	INamespace getCurrentNamespace(INamespaceResolver resolver);
+	INamespace getCurrentNamespace(INamespaceResolver resolver) throws SpxSymbolTableException;
 	
 	void define(SpxSymbolTableEntry entry, ILogger logger) ;
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java	Wed Oct  5 18:57:39 2011	(r23418)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java	Wed Oct  5 19:42:30 2011	(r23419)
@@ -23,8 +23,13 @@
 	
 	public String uniqueID(){ return _uId.toString();};
 	
-	public INamespace resolve(INamespaceResolver sTable) {
-		return sTable.resolveNamespace((NamespaceUri)this);
+	public INamespace resolve(INamespaceResolver sTable) throws SpxSymbolTableException {
+		INamespace retNamespace = sTable.resolveNamespace((NamespaceUri)this);
+		
+		if(retNamespace == null) {
+			throw new SpxSymbolTableException("Unknown Namespace Uri. Namespace can not be resolved from symbol-table") ;
+		}
+		return retNamespace;
 	}
 	
 	public boolean equalSpoofaxId(IStrategoList spoofaxUri){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Wed Oct  5 18:57:39 2011	(r23418)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Wed Oct  5 19:42:30 2011	(r23419)
@@ -102,21 +102,28 @@
 	
 	public Set<NamespaceUri> getAllNamespaces() { return namespaces.keySet() ; }
 
-	public void defineSymbol(SpxSemanticIndexFacade facade, IStrategoList namespaceId ,  SpxSymbolTableEntry symTableEntry) {
+	public void defineSymbol(SpxSemanticIndexFacade facade, IStrategoList namespaceId ,  SpxSymbolTableEntry symTableEntry) throws SpxSymbolTableException {
 		
 		ensureActiveNamespaceLoaded(namespaceId);
 	
 		_activeNamespace.define(symTableEntry, facade.persistenceManager()); 
 	}
 	
-	private void ensureActiveNamespaceLoaded(IStrategoList namespaceId){
-		if(_activeNamespace== null ||!_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId))
+	private void ensureActiveNamespaceLoaded(IStrategoList namespaceId) throws SpxSymbolTableException{
+		if(_activeNamespace== null ||!_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
 			//Keeping a transient reference to the current/active Namespace
 			//More likely that there are other symbols to be defined in the
 			//current and active namespace. In that case, it will imporve 
 			//performance as namespace resolving avoided by means of extra 
 			//caching
 			_activeNamespace = this.resolveNamespace(namespaceId);
+			if(_activeNamespace ==null){
+				throw new SpxSymbolTableException("Unknown namespaceId: "+ namespaceId+". Namespace can not be resolved from symbol-table") ;
+			}
+				
+		}
+		
+		
 	}
 	
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct  5 18:57:39 2011	(r23418)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct  5 19:42:30 2011	(r23419)
@@ -271,8 +271,8 @@
 		}catch(IllegalArgumentException ex){
 			// It seems like the constructor does not exist in local type declarations. 
 			// Hence, defining it to be used further.
-			IStrategoConstructor ctor = ((IStrategoAppl)symbolDefinition.getSubterm(SpxSymbolTableEntry.SYMBOL_ID_INDEX)).getConstructor();
-			ConstructorDef.newInstance(ctor.getName() , ctor.getArity()).index(_knownCons, ctor);
+			IStrategoConstructor ctor = ((IStrategoAppl)symbolDefinition.getSubterm(SpxSymbolTableEntry.TYPE_INDEX)).getConstructor();
+			typeCtor = ConstructorDef.newInstance(ctor.getName() , ctor.getArity()).index(_knownCons, ctor);
 		}
 		
 		// Constructing Spx Symbol-Table Entry from the provided symbolDefinition argument.  
@@ -913,15 +913,16 @@
 		
 		private IStrategoConstructor toStrategoConstructor(ITermFactory fac) {  return fac.makeConstructor(_name, _arity);}
 		
-		void index(HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac)
+		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac)
 		{
 			
-			this.index(cons, this.toStrategoConstructor(fac));
+			return this.index(cons, this.toStrategoConstructor(fac));
 		}
 		
-		void index(HashMap<ConstructorDef , IStrategoConstructor> cons , IStrategoConstructor ctor)
+		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , IStrategoConstructor ctor)
 		{
 			cons.put(this, ctor) ;
+			return ctor;
 		}
 	
 		@Override

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 18:57:39 2011	(r23418)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 19:42:30 2011	(r23419)
@@ -162,6 +162,24 @@
 		assertEquals( 1 + 2 + 2 + 2 + 1 ,symbol_table.size());
 	}
 	
+	public void testUnknownNamespaceShouldThrowSpxSymbolTableException() throws IOException{
+			
+		// defining following composite ID :  (Global() , "TestId")
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId")); 
+		IStrategoAppl typeAppl = namespaceAppl ; 
+		IStrategoAppl pQnameUnknown = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+"\"lang\", \"unknown\"" +"]))");
+		try{
+			setupScopeTree();
+			_facade.resolveSymbols( 
+					termFactory().makeTuple( 
+						pQnameUnknown,
+						symbolId,
+						typeAppl 
+					));
+			
+		}catch(SpxSymbolTableException ex) {}
+	}
 	public void testDefiningGlobalSymbol() throws IOException, SpxSymbolTableException {
 		
 		setupScopeTree();
@@ -196,7 +214,48 @@
 		assertEquals( 1 , actualCount);
 	}
 	
+	public void testDefiningGlobalSymbols() throws IOException, SpxSymbolTableException {
+		setupScopeTree();
 	
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		
+		IStrategoTerm symbolId1 = termFactory().makeTuple( namespaceAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "TestId") 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		IStrategoTerm symbolId2 = symbolId1 ; 
+	 	IStrategoTerm data2 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl2 = termFactory().makeAppl(termFactory().makeConstructor("STRDef", 0)); // setting Type  
+		
+		IStrategoTerm symbolId3 = symbolId1 ; 
+	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl3 = typeAppl1;  
+		
+		
+		// Defining Symbol-Table entries  
+		IStrategoAppl symbolDef1 = createEntry(namespaceAppl , symbolId1 , typeAppl1  , data1);
+		IStrategoAppl symbolDef2 = createEntry(namespaceAppl , symbolId2 , typeAppl2  , data2);
+		IStrategoAppl symbolDef3 = createEntry(namespaceAppl , symbolId3 , typeAppl3  , data3);
+		
+		_facade.indexSymbol(symbolDef1);
+		_facade.indexSymbol(symbolDef2);
+		_facade.indexSymbol(symbolDef3);
+		
+		// Resolving Symbol 
+		Iterable<IStrategoTerm> resolvedSymbols =  _facade.resolveSymbols( 
+				termFactory().makeTuple( 
+				ModuleDeclaration.toModuleIdTerm(_facade, moduleDeclarationP1M1),
+				symbolId1,
+				typeAppl3 
+			));
+		
+		int actualCount = 0 ;
+		for(IStrategoTerm t : resolvedSymbols) { 
+			actualCount += 1; 
+		}
+		
+		assertEquals( 2 , actualCount);
+	}
 	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
 		

From tobivollebregt at gmail.com  Wed Oct  5 21:48:53 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 05 Oct 2011 19:48:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23420 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/template unit-tests/templatelang
Message-ID: <20111005194853.7134A2B801F@mx2.tudelft.nl>

Author: tvo
Date: Wed Oct  5 19:48:53 2011
New Revision: 23420
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23420&sc=1

Log:
TemplateLang tweaks

completion templates:
* only multi-valued placeholders on otherwise blank line are considered for (cursor)
* first non-layout template element can not be (cursor) (this is a hack...)

sdf:
* generate CONTENTCOMPLETE injections with recover attribute (needs to be configurable...)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Oct  5 19:42:30 2011	(r23419)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Oct  5 19:48:53 2011	(r23420)
@@ -49,7 +49,9 @@
       )
     with
       // FIXME: desugaring should have been performed before the current strategy is invoked.
-      completion* := <templatelang-desugar-top; filter(template-to-completion-template)> prod*
+      completion* := <templatelang-desugar-top;
+                      declare-template-definition-main;
+                      filter(template-to-completion-template)> prod*
     with
       contracts(
         contract-requires(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion*)
@@ -70,6 +72,11 @@
 
   template-elements-to-completion-parts =
     map(try(placeholder-to-completion-part));
+    // HACK
+    try(\[Cursor() | tail] -> tail\
+      + \[Newline(_), Cursor() | tail] -> tail\
+      + \[Newline(_), Layout(_), Cursor() | tail] -> tail\);
+    // END HACK
     remove-cursor-except-first;
     try-re-indent;
     trim-layout;
@@ -81,10 +88,17 @@
     CanNotBeBlank < !None() + !Blank()
 
   placeholder-to-completion-part:
-    Placeholder(Text(name), sort(sort), None(), _) -> PlaceholderWithSort($[<[name]:], sort)
+    Placeholder(Text(name), sort(sort), _, _){} -> PlaceholderWithSort($[<[name]:], sort)
 
   placeholder-to-completion-part:
-    Placeholder(None(), sort(sort), None(), _) -> t with t :=
+    Placeholder(None(), sort(sort), _, _){} -> t with t :=
+      PlaceholderWithSort($[<[<try(generate-placeholder)> sort]:], sort)
+
+  placeholder-to-completion-part:
+    Placeholder(Text(name), sort(sort), None(), _){Blank()} -> PlaceholderWithSort($[<[name]:], sort)
+
+  placeholder-to-completion-part:
+    Placeholder(None(), sort(sort), None(), _){Blank()} -> t with t :=
       PlaceholderWithSort($[<[<try(generate-placeholder)> sort]:], sort)
 
   // FIXME: does this make sense?
@@ -111,13 +125,13 @@
     concat-strings
 
   placeholder-to-completion-part:
-    Placeholder(_, _, Option(), _) -> Cursor()
+    Placeholder(_, _, Option(), _){Blank()} -> Cursor()
 
   placeholder-to-completion-part:
-    Placeholder(_, _, Plus(), _) -> Cursor()
+    Placeholder(_, _, Plus(), _){Blank()} -> Cursor()
 
   placeholder-to-completion-part:
-    Placeholder(_, _, Star(), _) -> Cursor()
+    Placeholder(_, _, Star(), _){Blank()} -> Cursor()
 
   text-to-completion-part:
     Newline(_) -> String("\n")

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Oct  5 19:42:30 2011	(r23419)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Oct  5 19:48:53 2011	(r23420)
@@ -207,7 +207,7 @@
     Placeholder(_, sort(S), Option(), _) -> A|[ S? ]|
 
   sort-to-contentcomplete:
-    sort(S) -> p|[ CONTENTCOMPLETE -> S {cons("\"WATER\""), avoid} ]|
+    sort(S) -> p|[ CONTENTCOMPLETE -> S {recover} ]|
 
   sort-to-insertion:
     sort(S) -> p|[ -> S {cons("\"INSERTION\""), recover} ]|

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt	Wed Oct  5 19:42:30 2011	(r23419)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt	Wed Oct  5 19:48:53 2011	(r23420)
@@ -54,38 +54,53 @@
 ]]
 
 test placeholder (option) [[
-  X.Y = <<<Z?>>>
+  X.Y = <<
+    foo
+    <Z?>
+  >>
 ]]
 build test-templatelang-to-esv to [[
-  completion template X: "Y" = (cursor) (blank)
+  completion template X: "Y" = "foo\n" (cursor) (blank)
 ]]
 
 test placeholder (plus) [[
-  X.Y = <<<Z+>>>
+  X.Y = <<
+    foo
+    <Z+>
+  >>
 ]]
 build test-templatelang-to-esv to [[
-  completion template X: "Y" = (cursor) (blank)
+  completion template X: "Y" = "foo\n" (cursor) (blank)
 ]]
 
 test placeholder (star) [[
-  X.Y = <<<Z*>>>
+  X.Y = <<
+    foo
+    <Z*>
+  >>
 ]]
 build test-templatelang-to-esv to [[
-  completion template X: "Y" = (cursor) (blank)
+  completion template X: "Y" = "foo\n" (cursor) (blank)
 ]]
 
 test placeholder (plus, separator) [[
-  X.Y = <<<Z+; separator=", ">>>
+  X.Y = <<
+    foo
+    <Z+; separator=", ">
+  >>
 ]]
 build test-templatelang-to-esv to [[
-  completion template X: "Y" = (cursor) (blank)
+  completion template X: "Y" = "foo\n" (cursor) (blank)
 ]]
 
 test placeholder (star, separator) [[
-  X.Y = <<<Z*; separator=" + ">>>
+  X.Y = <<
+    foo
+    <Z*; separator=" + ">
+  >>
 ]]
 build test-templatelang-to-esv to [[
-  completion template X: "Y" = (cursor) (blank)
+  completion template X: "Y" = "foo\n" (cursor) (blank)
 ]]
 
 test placeholder and literals [[
@@ -96,21 +111,32 @@
 ]]
 
 test placeholder (option) and literals [[
-  X.Y = <<foo <Z?> bar>>
+  X.Y = <<
+    foo
+    <Z?>
+    bar
+  >>
 ]]
 build test-templatelang-to-esv to [[
-  completion template X: "Y" = "foo " (cursor) " bar" (blank)
+  completion template X: "Y" = "foo\n" (cursor) "\nbar" (blank)
 ]]
 
 test n placeholders => one (cursor)-directive (1) [[
-  X.Y = <<<A?> <B?>>>
+  X.Y = <<
+    <A?>
+    <B?>
+  >>
 ]]
 build test-templatelang-to-esv to [[
   completion template X: "Y" = (cursor) (blank)
 ]]
 
 test n placeholders => one (cursor)-directive (2) [[
-  X.Y = <<<A?> <B?> <C?>>>
+  X.Y = <<
+    <A?>
+    <B?>
+    <C?>
+  >>
 ]]
 build test-templatelang-to-esv to [[
   completion template X: "Y" = (cursor) (blank)
@@ -127,3 +153,16 @@
   completion template Statement: "IfThen" =
     "if " <Exp:Exp> " then\n\t" (cursor) "\nend" (blank)
 ]]
+
+test Mobl MetaAnno [[
+  FunctionDef.FunctionNoReturnType = <<
+    <MetaAnno*; separator="\n">
+    function <QId>(<FArg*; separator=", ">) {
+      <Statement*; separator="\n">
+    }
+  >>
+]]
+build test-templatelang-to-esv to [[
+  completion template FunctionDef: "FunctionNoReturnType" =
+    "function " <QId:QId> "(" <FArg:FArg> ") {\n\t" (cursor) "\n}" (blank)
+]]

From tobivollebregt at gmail.com  Wed Oct  5 21:52:20 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 05 Oct 2011 19:52:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23421 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111005195220.E7AB97F8028@mx1.tudelft.nl>

Author: tvo
Date: Wed Oct  5 19:52:20 2011
New Revision: 23421
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23421&sc=1

Log:
Completion at the end of blocks seems to work better this way.

(would be nice if it was documented whether offsets are supposed to be inclusive or exclusive...)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Oct  5 19:48:53 2011	(r23420)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Oct  5 19:52:20 2011	(r23421)
@@ -75,7 +75,7 @@
 		IStrategoTerm ast = parser.parse(controller, selection, document, avoidReparse);
 		int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
 		Set<String> sorts = new AstSortInspector(ast).getSortsAtOffset(
-				offset - prefixLength, offset + COMPLETION_TOKEN.length() - 1);
+				offset - prefixLength, offset + COMPLETION_TOKEN.length());
 		if (parser.getCompletionNode() == null)
 			return getParseFailureProposals(controller, document, offset, sorts, viewer);
 

From M.A.Akhter at student.tudelft.nl  Wed Oct  5 22:37:42 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 05 Oct 2011 20:37:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23422 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111005203742.8DEA17F8004@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Oct  5 20:37:41 2011
New Revision: 23422
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23422&sc=1

Log:
+ more unit test  on symbol resolving

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Oct  5 19:52:20 2011	(r23421)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Oct  5 20:37:41 2011	(r23422)
@@ -101,7 +101,7 @@
 		throw new IllegalArgumentException("Invalid module qname : "+ moduleQName.toString());
 	}
 	
-	public static IStrategoAppl toModuleIdTerm(SpxSemanticIndexFacade facade , ModuleDeclaration decl)
+	public static IStrategoAppl toModuleQNameAppl(SpxSemanticIndexFacade facade , ModuleDeclaration decl)
 	{
 		return toIdTerm(facade, facade.getModuleQNameCon() , decl.getId());
 	}
@@ -119,7 +119,7 @@
 
 		IStrategoConstructor moduleDeclCons = idxFacade.getModuleDeclCon();
 		
-		IStrategoAppl moduleQNameAppl =toModuleIdTerm( idxFacade,  this);
+		IStrategoAppl moduleQNameAppl =toModuleQNameAppl( idxFacade,  this);
 		IStrategoString resAbsPathTerm = termFactory.makeString(resourceAbsPath) ;
 		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageIdTerm(idxFacade, this.enclosingPackageID);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct  5 19:52:20 2011	(r23421)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct  5 20:37:41 2011	(r23422)
@@ -298,32 +298,16 @@
 	public Iterable<IStrategoTerm> resolveSymbols(IStrategoTuple symbolLookupTerm) throws SpxSymbolTableException{
 		if (symbolLookupTerm.getSubtermCount() != 3)
 			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + symbolLookupTerm.getSubtermCount());
+		
 		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)symbolLookupTerm.getSubterm(2));
-		return resolveSymbols( 
-				(IStrategoAppl)symbolLookupTerm.get(0),
-				symbolLookupTerm.get(1),
-				typeCtor
-		); 
+		return SpxSymbol.toTerms( this,
+				resolveSymbols( 
+						(IStrategoAppl)symbolLookupTerm.get(0),
+						symbolLookupTerm.get(1),
+						typeCtor)
+				); 
 	}
-
-	/**
-	 * @param symbolLookupTerm
-	 * @return
-	 * @throws IllegalArgumentException
-	 */
-	private IStrategoConstructor verifyKnownContructorExists(IStrategoAppl symbolType) throws IllegalArgumentException {
-		IStrategoConstructor typeCtor = getConstructor( symbolType.getConstructor().getName(), symbolType.getConstructor().getArity()) ;
-		if(typeCtor == null) {
-			throw new IllegalArgumentException("Illegal Argument . Unknown Symbol Type. Found " + symbolType.getConstructor());
-		}
-		return typeCtor;
-	}
-
 	
-	public Iterable<IStrategoTerm> resolveSymbols(IStrategoAppl namespaceToStartSearchWith , IStrategoTerm symbolId , IStrategoConstructor symbolType ) throws SpxSymbolTableException{	
-		return SpxSymbol.toTerms(this, lookupSpxSymbols(namespaceToStartSearchWith, symbolId, symbolType));
-	}
-
 	/**
 	 * @param namespaceToStartSearchWith
 	 * @param symbolId
@@ -331,7 +315,7 @@
 	 * @return
 	 * @throws SpxSymbolTableException
 	 */
-	private Iterable<SpxSymbol> lookupSpxSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType)
+	public Iterable<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType)
 			throws SpxSymbolTableException {
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 
@@ -340,6 +324,22 @@
 		Iterable<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(this, namespaceID, strip(symbolId), symbolType);
 		return resolvedSymbols;
 	}
+
+
+	/**
+	 * @param symbolLookupTerm
+	 * @return
+	 * @throws IllegalArgumentException
+	 */
+	private IStrategoConstructor verifyKnownContructorExists(IStrategoAppl symbolType) throws IllegalArgumentException {
+		IStrategoConstructor typeCtor = getConstructor( symbolType.getConstructor().getName(), symbolType.getConstructor().getArity()) ;
+		if(typeCtor == null) {
+			throw new IllegalArgumentException("Illegal Argument . Unknown Symbol Type. Found " + symbolType.getConstructor());
+		}
+		return typeCtor;
+	}
+
+	
 	
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Oct  5 19:52:20 2011	(r23421)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Oct  5 20:37:41 2011	(r23422)
@@ -28,7 +28,7 @@
 	
 	}
 	
-	IStrategoTerm Id(ITermFactory _fac ){
+	public IStrategoTerm Id(ITermFactory _fac ){
 		if (_id == null){
 			_id = _fac.parseFromString(_idString);
 		}
@@ -37,14 +37,14 @@
 	
 	void setId(IStrategoTerm id){_id = id;}
 	
-	protected static boolean verifyEquals(IStrategoConstructor ctor1 , IStrategoConstructor ctor2){
+	public static boolean verifyEquals(IStrategoConstructor ctor1 , IStrategoConstructor ctor2){
 		if( (ctor1.getArity() == ctor2.getArity()) && (ctor1.getName().equals(ctor2.getName()))){
 			return true;
 		}
 		return false;
 	}
 	
-	protected static boolean verifyEquals(IStrategoTerm current, IStrategoTerm other){
+	public static boolean verifyEquals(IStrategoTerm current, IStrategoTerm other){
 		boolean retValue = false;
 		if ( current instanceof IStrategoAppl){
 			if(other instanceof IStrategoAppl) {
@@ -76,7 +76,7 @@
 		return retValue;
 	}
 
-	protected static boolean verifyEquals( IStrategoTerm[] currentTerms, IStrategoTerm[] otherTerms) {
+	public static boolean verifyEquals( IStrategoTerm[] currentTerms, IStrategoTerm[] otherTerms) {
 		boolean retValue = false;
 		
 		if( currentTerms.length == otherTerms.length){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 19:52:20 2011	(r23421)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 20:37:41 2011	(r23422)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang.tests;
 
 import java.io.IOException;
+import java.util.List;
 
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
@@ -13,6 +14,7 @@
 import org.spoofax.interpreter.library.language.spxlang.PackageNamespace;
 import org.spoofax.interpreter.library.language.spxlang.SpxPrimarySymbolTable;
 import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.SpxSymbol;
 import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -178,7 +180,7 @@
 						typeAppl 
 					));
 			
-		}catch(SpxSymbolTableException ex) {}
+		}catch(SpxSymbolTableException ex) { }
 	}
 	public void testDefiningGlobalSymbol() throws IOException, SpxSymbolTableException {
 		
@@ -204,7 +206,7 @@
 		Iterable<IStrategoTerm> resolvedSymbols = 
 			_facade.resolveSymbols( 
 				termFactory().makeTuple( 
-					ModuleDeclaration.toModuleIdTerm(_facade, moduleDeclarationP1M1),
+					ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 					symbolId,
 					typeAppl 
 				));
@@ -242,19 +244,80 @@
 		_facade.indexSymbol(symbolDef3);
 		
 		// Resolving Symbol 
-		Iterable<IStrategoTerm> resolvedSymbols =  _facade.resolveSymbols( 
-				termFactory().makeTuple( 
-				ModuleDeclaration.toModuleIdTerm(_facade, moduleDeclarationP1M1),
+		Iterable<SpxSymbol> resolvedSymbols = _facade.resolveSymbols( 
+				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				typeAppl3 
-			));
+				_facade.getConstructor("SDFDef", 0) 
+				);
 		
 		int actualCount = 0 ;
-		for(IStrategoTerm t : resolvedSymbols) { 
-			actualCount += 1; 
+		for(SpxSymbol s : resolvedSymbols) { 
+			actualCount += 1;
+			assertEquals("SDFDef", s.type()); 
+			
 		}
-		
 		assertEquals( 2 , actualCount);
+		
+		resolvedSymbols = _facade.resolveSymbols( 
+				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
+				symbolId1,
+				_facade.getConstructor("STRDef", 0) 
+				);
+		
+		actualCount = 0 ;
+		for(SpxSymbol s : resolvedSymbols) { 
+			actualCount += 1;
+			assertEquals("STRDef", s.type()); 
+			
+		}
+		
+		assertEquals( 1 , actualCount);
+		
+	}
+	
+	public void testResolveModuleSymbols() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+		
+		IStrategoAppl currentAppl = ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP1M2);
+		
+		IStrategoTerm symbolId1 = termFactory().makeTuple(currentAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "TestId") 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(currentAppl , symbolId1 , typeAppl1  , data1));
+		
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
+				symbolId1,
+				_facade.getConstructor("SDFDef", 0) 
+				);
+		
+		assertEquals(1, resolvedSymbols.size());
+		
+		SpxSymbol actual = resolvedSymbols.get(0);
+		assertEquals("SDFDef", actual.type());
+		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
+		assertTrue( SpxSymbol.verifyEquals( currentAppl.getSubterm(0).getSubterm(0) , actual.namespaceUri().id()) );
+	}
+	
+	public void testShouldNotResolveModuleSymbolsFromOtherPackage() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+		
+		IStrategoAppl currentAppl = ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP1M2);
+		
+		IStrategoTerm symbolId1 = termFactory().makeTuple(currentAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "TestId") 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(currentAppl , symbolId1 , typeAppl1  , data1));
+		
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP2M1),
+				symbolId1,
+				_facade.getConstructor("SDFDef", 0) 
+				);
+		
+		assertEquals(0, resolvedSymbols.size());
 	}
 	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){

From M.A.Akhter at student.tudelft.nl  Wed Oct  5 23:12:38 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 05 Oct 2011 21:12:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23423 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111005211238.0B7B7108C022@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Oct  5 21:12:37 2011
New Revision: 23423
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23423&sc=1

Log:
+ avoiding cycle in the scope tree.
+ added unit tests to verify - module internal symbols can only be resolved from that modulenamespace

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct  5 20:37:41 2011	(r23422)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct  5 21:12:37 2011	(r23423)
@@ -97,10 +97,12 @@
 		retResult.addAll(lookupResult);
 		
 		INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
-		
-		if( namespace  != null){
+		//checking whether resolved namespace is Null. In that case, all the scopes are covered.
+		//also checking that the resolved namespace is not equal to the current namespace 
+		//that we already have searched - to avoid any cycle in the hierarchy.
+		if( namespace  != null && !namespace.equals(this)){
 			//checks whether searching to the enclosing scope is allowed.
-			if( shouldSearchInEnclosingNamespace( searchedBy)){	
+			if( shouldSearchInEnclosingNamespace(searchedBy)){	
 				Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(id, this ,facade);
 				retResult.addAll(parentResults);
 			}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java	Wed Oct  5 20:37:41 2011	(r23422)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java	Wed Oct  5 21:12:37 2011	(r23423)
@@ -208,7 +208,7 @@
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		
 		IStrategoConstructor ctr = idxFacade.getLanguageDescriptorCon();
-		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageIdTerm(idxFacade, this.getId());
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(idxFacade, this.getId());
 		
 		IStrategoTerm retTerm = termFactory.makeAppl(ctr, packageQNameAppl , this.languageNames , this.languageIDs , this.esvDeclaredStartSymbols , this.sdfDeclaredStartSymbols);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Oct  5 20:37:41 2011	(r23422)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java	Wed Oct  5 21:12:37 2011	(r23423)
@@ -105,6 +105,11 @@
 	{
 		return toIdTerm(facade, facade.getModuleQNameCon() , decl.getId());
 	}
+	
+	public static IStrategoAppl toModuleQNameAppl(SpxSemanticIndexFacade facade , IStrategoList id)
+	{
+		return toIdTerm(facade, facade.getModuleQNameCon() , id);
+	}
 
 	/* Transforms {@link ModuleDeclaration} to following term : 
 	 * 		ModuleDecl :  Module * String * Package -> Def
@@ -121,7 +126,7 @@
 		
 		IStrategoAppl moduleQNameAppl =toModuleQNameAppl( idxFacade,  this);
 		IStrategoString resAbsPathTerm = termFactory.makeString(resourceAbsPath) ;
-		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageIdTerm(idxFacade, this.enclosingPackageID);
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(idxFacade, this.enclosingPackageID);
 		
 		IStrategoTerm retTerm = termFactory.makeAppl(moduleDeclCons,moduleQNameAppl,resAbsPathTerm,packageQNameAppl);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Wed Oct  5 20:37:41 2011	(r23422)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java	Wed Oct  5 21:12:37 2011	(r23423)
@@ -162,10 +162,12 @@
 		return newDecl;
 	}
 
-	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, IStrategoList id){
+	public static IStrategoAppl toPackageQNameAppl (SpxSemanticIndexFacade facade, IStrategoList id){
 		return toIdTerm(facade ,  facade.getPackageQNameCon(), id);
 	}
 
+	
+	
 	/**
 	 * Converts to typed Package Qualified Name
 	 *  
@@ -174,7 +176,7 @@
 	 * @return
 	 */
 	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, PackageDeclaration decl){
-		return toPackageIdTerm (facade, decl.getId());
+		return toPackageQNameAppl (facade, decl.getId());
 	}
 
 	/* (non-Javadoc)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Wed Oct  5 20:37:41 2011	(r23422)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Wed Oct  5 21:12:37 2011	(r23423)
@@ -260,18 +260,24 @@
 	public static NamespaceUri packageInternalNamespace(
 			NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade idxFacade) {
 		
-		ITermFactory termFactory =  idxFacade.getTermFactory();
 		SpxPrimarySymbolTable  table =  idxFacade.persistenceManager().spxSymbolTable() ;
 		
+		IStrategoList internalModuleID  = packageInternalModuleId(enclosingNamespaceId.id() , idxFacade);
+		NamespaceUri internalModuleUri  = table.toNamespaceUri(internalModuleID);
+		return internalModuleUri;
+	}
+	
+	public static IStrategoList packageInternalModuleId(IStrategoList id, SpxSemanticIndexFacade idxFacade) {
+		ITermFactory termFactory =  idxFacade.getTermFactory();
+		
 		List<IStrategoTerm> subTerms = new ArrayList<IStrategoTerm>();
 		
-		IStrategoList spoofaxNamespaceId = enclosingNamespaceId.id() ;
+		IStrategoList spoofaxNamespaceId = id;
 		
 		subTerms.addAll(Arrays.asList(spoofaxNamespaceId.getAllSubterms()));
 		subTerms.add(termFactory.makeString(INTERNAL_NAMESPACENAME));
 		
-		IStrategoList internalModuleID  = termFactory.makeList(subTerms);
-		NamespaceUri internalModuleUri  = table.toNamespaceUri(internalModuleID);
-		return internalModuleUri;
+		return termFactory.makeList(subTerms);
+		
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 20:37:41 2011	(r23422)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 21:12:37 2011	(r23423)
@@ -182,6 +182,7 @@
 			
 		}catch(SpxSymbolTableException ex) { }
 	}
+	
 	public void testDefiningGlobalSymbol() throws IOException, SpxSymbolTableException {
 		
 		setupScopeTree();
@@ -320,6 +321,57 @@
 		assertEquals(0, resolvedSymbols.size());
 	}
 	
+	public void testShouldNotResolveModuleInternalSymbolsFromPackage() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+		
+		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
+				PackageNamespace.packageInternalModuleId(
+						this.packageDeclaration2.getId(), 
+						_facade)
+				);
+		IStrategoTerm symbolId1 = termFactory().makeTuple(internalModuleAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "1") 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(internalModuleAppl , symbolId1 , typeAppl1  , data1));
+		
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				PackageDeclaration.toPackageQNameAppl(_facade, this.packageDeclaration2.getId()),
+				symbolId1,
+				_facade.getConstructor("SDFDef", 0) 
+				);
+		
+		assertEquals(0, resolvedSymbols.size());
+	}
+	
+	public void testShouldResolveModuleInternalSymbolsFromModule() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+		
+		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
+				PackageNamespace.packageInternalModuleId(
+						this.packageDeclaration2.getId(), 
+						_facade)
+				);
+		IStrategoTerm symbolId1 = termFactory().makeTuple(internalModuleAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "1") 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(internalModuleAppl , symbolId1 , typeAppl1  , data1));
+		
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				internalModuleAppl,
+				symbolId1,
+				_facade.getConstructor("SDFDef", 0) 
+				);
+		
+		assertEquals(1, resolvedSymbols.size());
+		
+		SpxSymbol actual = resolvedSymbols.get(0);
+		assertEquals("SDFDef", actual.type());
+		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
+		assertTrue( SpxSymbol.verifyEquals( internalModuleAppl.getSubterm(0).getSubterm(0) , actual.namespaceUri().id()) );
+	}
+	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
 		
 		IStrategoConstructor ctor = _facade.getSymbolTableEntryDefCon();

From M.A.Akhter at student.tudelft.nl  Thu Oct  6 00:19:47 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 05 Oct 2011 22:19:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23424 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111005221947.915B8108C004@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Oct  5 22:19:47 2011
New Revision: 23424
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23424&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Wed Oct  5 21:12:37 2011	(r23423)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Wed Oct  5 22:19:47 2011	(r23424)
@@ -117,24 +117,6 @@
 	 */
 	protected String getFileLocation() { return null; }
 	
-	/**
-	 * Constructs {@link IStrategoList} from {@code decls}  
-	 * 
-	 * @param idxFacade an instance of {@link SpxSemanticIndexFacade }
-	 * @param decls A collection of ModuleDeclataions 
-	 * @return {@link IStrategoList}
-	 */
-	public static <T extends IdentifiableConstruct> IStrategoList toTerm( SpxSemanticIndexFacade idxFacade , Iterable<T> decls){
-		ITermFactory termFactory = idxFacade.getTermFactory();
-		IStrategoList result = termFactory.makeList();
-		
-		if(decls!=null){	
-			for ( T decl: decls)
-				result = termFactory.makeListCons(decl.toTerm(idxFacade), result);
-		}
-		
-		return result;
-	}
 
 	static IStrategoAppl toIdTerm ( SpxSemanticIndexFacade facade , IStrategoConstructor namespaceCon, IStrategoList id)
 	{

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct  5 21:12:37 2011	(r23423)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct  5 22:19:47 2011	(r23424)
@@ -295,7 +295,7 @@
 	
 	
 	// (namespace * idTolookupFor * type constructor)
-	public Iterable<IStrategoTerm> resolveSymbols(IStrategoTuple symbolLookupTerm) throws SpxSymbolTableException{
+	public IStrategoTerm resolveSymbols(IStrategoTuple symbolLookupTerm) throws SpxSymbolTableException{
 		if (symbolLookupTerm.getSubtermCount() != 3)
 			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + symbolLookupTerm.getSubtermCount());
 		
@@ -309,14 +309,17 @@
 	}
 	
 	/**
-	 * @param namespaceToStartSearchWith
-	 * @param symbolId
-	 * @param symbolType
-	 * @return
+	 * Resolves symbols from {@link SpxPrimarySymbolTable}.
+	 * 
+	 * @param namespaceToStartSearchWith Starts search from this namespace. 
+	 * @param symbolId symbol Id to resolve
+	 * @param symbolType Type of Symbols to look for
+	 * 
+	 * @return {@link IStrategoList} representation of resolved {@code symbols} 
+	 * 
 	 * @throws SpxSymbolTableException
 	 */
-	public Iterable<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType)
-			throws SpxSymbolTableException {
+	public Iterable<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType) throws SpxSymbolTableException {
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
@@ -339,9 +342,6 @@
 		return typeCtor;
 	}
 
-	
-	
-	
 	/**
 	 * @param namespaceTypedQname
 	 * @return
@@ -394,7 +394,6 @@
 		table.defineLanguageDescriptor(qualifiedPackageId, current);
 
 	}
-
 	
 	/**
 	 * @param importReferences
@@ -462,9 +461,6 @@
 		return ns.getImports(this);
 	}
 	
-	
-	
-	
 	/**
 	 * Returns the package declaration indexed with {@code packageIdAppl} typed qualified name.
 	 * 
@@ -511,7 +507,7 @@
 			decls = table.packageDeclarationsByUri(absFilePath);
 		}
 		
-		IStrategoList result =  PackageDeclaration.toTerm(this, decls);
+		IStrategoList result =  Utils.toTerm(this, decls);
 		logMessage("getPackageDeclarationsByUri | Returning IStrategoList : " + result );
 
 		return result;
@@ -585,7 +581,7 @@
 			decls = table.getModuleDeclarationsByUri(absFilePath);
 		}
 		
-		IStrategoList result =  ModuleDeclaration.toTerm(this, decls);
+		IStrategoList result =  Utils.toTerm(this, decls);
 		logMessage("getModuleDeclarations | Returning IStrategoList : " + result );
 		return result;
 	}
@@ -605,7 +601,7 @@
 		Iterable<ModuleDeclaration> decls = getModuleDeclarations(packageID);
 		logMessage("getModuleDeclarations | Found following result from SymbolTable : " + decls);
 		
-		IStrategoList result =  ModuleDeclaration.toTerm(this, decls);
+		IStrategoList result =  Utils.toTerm(this, decls);
 		logMessage("getModuleDeclarations | Returning IStrategoList : " + result );
 		
 		return result;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Oct  5 21:12:37 2011	(r23423)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Oct  5 22:19:47 2011	(r23424)
@@ -211,13 +211,15 @@
 				deserializedDataToTerm )	;
 	}
 	
-	static Iterable<IStrategoTerm> toTerms(SpxSemanticIndexFacade facade , Iterable<SpxSymbol> symbols){
-		List<IStrategoTerm> terms  = new ArrayList<IStrategoTerm>();
-		
+	static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Iterable<SpxSymbol> symbols){
+		IStrategoList result = facade.getTermFactory().makeList();
 		
 		if( symbols != null)
-			for( SpxSymbol s : symbols) { terms.add( s.toTerm(facade));}
-		return terms;
+			for( SpxSymbol s : symbols) { 
+				result = facade.getTermFactory().makeListCons(  s.toTerm(facade) , result);
+			}
+		
+		return result;
 	} 
 	
 	/* (non-Javadoc)

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Wed Oct  5 22:19:47 2011	(r23424)
@@ -0,0 +1,30 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public final class Utils {
+	private Utils() {
+		
+	}
+	
+
+	/**
+	 * Constructs {@link IStrategoList} from {@code decls}  
+	 * 
+	 * @param idxFacade an instance of {@link SpxSemanticIndexFacade }
+	 * @param decls A collection of ModuleDeclataions 
+	 * @return {@link IStrategoList}
+	 */
+	public static <T extends IdentifiableConstruct> IStrategoList toTerm( SpxSemanticIndexFacade idxFacade , Iterable<T> decls){
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		IStrategoList result = termFactory.makeList();
+		
+		if(decls!=null){	
+			for ( T decl: decls)
+				result = termFactory.makeListCons(decl.toTerm(idxFacade), result);
+		}
+		
+		return result;
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 21:12:37 2011	(r23423)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 22:19:47 2011	(r23424)
@@ -203,18 +203,47 @@
 		_facade.indexSymbol(symbolDef);
 	
 		
+		
 		// Resolving Symbol 
-		Iterable<IStrategoTerm> resolvedSymbols = 
-			_facade.resolveSymbols( 
-				termFactory().makeTuple( 
-					ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
-					symbolId,
-					typeAppl 
-				));
-		
-		int actualCount = 0 ;
-		for( IStrategoTerm t : resolvedSymbols ) { actualCount += 1; }
-		assertEquals( 1 , actualCount);
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
+				symbolId,
+				namespaceAppl.getConstructor()
+				);
+		
+		assertEquals( 1 , resolvedSymbols.size());
+	}
+	
+	public void testUnknownConstructorInResolveSymbolShouldThrowException() throws IOException, SpxSymbolTableException {
+		
+		setupScopeTree();
+
+		// defining a composite key 
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		// defining following composite ID :  (Global() , "TestId")
+		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId")); 
+		// defining Data 
+		IStrategoTerm data = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);
+		// setting Type to Global() 
+		IStrategoAppl typeAppl = namespaceAppl ; 
+		
+		
+		// Defining Symbol-Table entry 
+		IStrategoAppl symbolDef = createEntry(namespaceAppl , symbolId , typeAppl  , data);
+		
+		// Indexing Symbol
+		_facade.indexSymbol(symbolDef);
+		try{
+		// Resolving Symbol 
+		_facade.resolveSymbols(
+				termFactory().makeTuple(
+						ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
+						symbolId,
+						termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0))
+				)
+		);
+		}catch(IllegalArgumentException ex){}
+	
 	}
 	
 	public void testDefiningGlobalSymbols() throws IOException, SpxSymbolTableException {

From M.A.Akhter at student.tudelft.nl  Thu Oct  6 01:26:39 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 05 Oct 2011 23:26:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23425 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111005232639.DFE172B801F@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Oct  5 23:26:39 2011
New Revision: 23425
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23425&sc=1

Log:
+ unit tests to verify cycle detection is working as expected

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Wed Oct  5 22:19:47 2011	(r23424)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java	Wed Oct  5 23:26:39 2011	(r23425)
@@ -34,7 +34,6 @@
 	public abstract IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade);
 	
 	public void addImportRefernces (SpxSemanticIndexFacade idxFacade, IStrategoList  imports) throws NotImplementedException, SpxSymbolTableException {
-	
 		for (IStrategoTerm i: StrategoListIterator.iterable(imports)) {
 			if(i instanceof IStrategoAppl)
 				addManagedImport(idxFacade, i); 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Wed Oct  5 22:19:47 2011	(r23424)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Wed Oct  5 23:26:39 2011	(r23425)
@@ -26,7 +26,6 @@
 	// Not serializing it to disk since we already have this information in SpxSemanticIndex
 	private transient Set<NamespaceUri> importedNamespaceUris;
 	private transient Set<NamespaceUri> enclosedNamespaceUris;
-	private transient PackageDeclaration assiciatedPackageDeclaration;
 	
 	/**
 	 * @param currentNamespace
@@ -63,7 +62,7 @@
 	/**
 	 * Restricts transitive imports. If {@code searchOrigin}  {@link INamespace} imports 
 	 * current {@link INamespace}, then in order to avoid transitive lookup , resolving in 
-	 * the imported {@link INamespace}s is avoided.     
+	 * the imported {@link INamespace}s is avoided.  It also detects cyclic import references.    
 	 * 
 	 * @param facade
 	 * @param searchOrigin
@@ -72,12 +71,11 @@
 	 */
 	boolean isTransitiveImportLookup(SpxSemanticIndexFacade facade , INamespace searchOrigin) throws SpxSymbolTableException{
 		
-		if(assiciatedPackageDeclaration == null)
-			assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
+		PackageDeclaration	assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
 		
 		Set<IStrategoList> importedToPackages = assiciatedPackageDeclaration.getImortedToPackageReferences();
 		
-		return importedToPackages.contains(searchOrigin);
+		return importedToPackages.contains(searchOrigin.namespaceUri().id());
 	}
 	
 	private void ensureImportedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
@@ -88,8 +86,7 @@
 			SpxPrimarySymbolTable symTable =  facade.persistenceManager().spxSymbolTable();
 			
 			//getting the package declaration and retrieving it imported references 
-			if(assiciatedPackageDeclaration == null)
-				assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
+			PackageDeclaration assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
 			
 			Iterable<IStrategoList> importedIds = assiciatedPackageDeclaration.getImportReferneces();
 			

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Oct  5 22:19:47 2011	(r23424)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Oct  5 23:26:39 2011	(r23425)
@@ -146,7 +146,11 @@
 		_type = type;
 	}
 	
-	public String type() {return _type; }
+	public String type() {
+		assert _type != null : "Non-Null _type is expected. ";
+		
+		return _type; 
+	}
 
 	public String getDataString () {return _data;}
 	
@@ -176,13 +180,23 @@
 	
 	void setNamespace(NamespaceUri id){ _namespace = id;}
 	
-	boolean equalType (IStrategoConstructor term) { return _type.equals(term.getName()); }
+	boolean equalType (IStrategoConstructor term) { 
+		return _type.equals(term.getName()); 
+	}
 	
+	/**
+	 * Return symbols that has type equals expectedType. In case of expectedType equals null,
+	 * it returns all the symbols.
+	 * 
+	 * @param expectedType
+	 * @param symbols
+	 * @return {@link List} of {@link SpxSymbol}
+	 */
 	static List<SpxSymbol> filterByType(IStrategoConstructor expectedType , Iterable<SpxSymbol> symbols){
 		List<SpxSymbol> retSymbols = new ArrayList<SpxSymbol>();
 		if( symbols != null){
 			for(SpxSymbol s : symbols){
-				if( s.equalType(expectedType) ){ retSymbols.add(s) ;}
+				if( (expectedType==null) ||  s.equalType(expectedType) ){ retSymbols.add(s) ;}
 			}
 		}
 		return retSymbols;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 22:19:47 2011	(r23424)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 23:26:39 2011	(r23425)
@@ -110,8 +110,7 @@
 		//Still expecting there will be just one Global Namespace for the project 
 		assertEquals(1, noOfGlobalNamespaceInSymbolTable());
 	}
-	
-	
+
 	/**
 	 * Tests resolving Namespace from Symbol-Table 
 	 * 
@@ -376,6 +375,8 @@
 	public void testShouldResolveModuleInternalSymbolsFromModule() throws IOException, SpxSymbolTableException{
 		setupScopeTree();
 		
+		
+		
 		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
 				PackageNamespace.packageInternalModuleId(
 						this.packageDeclaration2.getId(), 
@@ -401,6 +402,55 @@
 		assertTrue( SpxSymbol.verifyEquals( internalModuleAppl.getSubterm(0).getSubterm(0) , actual.namespaceUri().id()) );
 	}
 	
+	public void testShouldNotResolveSymbolFromImportedNamespaceInCyclicReference() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+		
+		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId())));
+		
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId());
+		
+		IStrategoTerm symbolId1 = packageQNameAppl; // defining following packageID
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(packageQNameAppl , symbolId1 , typeAppl1  , data1));
+		
+		
+		
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
+				symbolId1,
+				_facade.getConstructor("SDFDef", 0) 
+				);
+		
+		assertEquals(0, resolvedSymbols.size());
+	}
+	
+	public void testShouldResolveSymbolFromImportedNamespace() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+		
+		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId())));
+		
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId());
+		
+		IStrategoTerm symbolId1 = packageQNameAppl; // defining following packageID
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(packageQNameAppl , symbolId1 , typeAppl1  , data1));
+		
+		
+		
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
+				symbolId1,
+				_facade.getConstructor("ModuleDef", 0) 
+				);
+		
+		assertEquals(1, resolvedSymbols.size());
+	}
+	
+	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
 		
 		IStrategoConstructor ctor = _facade.getSymbolTableEntryDefCon();

From M.A.Akhter at student.tudelft.nl  Thu Oct  6 02:09:14 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 06 Oct 2011 00:09:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23426 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests
Message-ID: <20111006000914.D5D002B8004@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Oct  6 00:09:14 2011
New Revision: 23426
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23426&sc=1

Log:
+ unit tests to verify transitive imports is working as expected. in spoofaxlang, transitive import is not allowed. Symbol resolve also conforms to the same rule.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct  5 23:26:39 2011	(r23425)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Thu Oct  6 00:09:14 2011	(r23426)
@@ -74,10 +74,12 @@
 	
 	private PackageDeclaration packageDeclaration1;
 	private PackageDeclaration packageDeclaration2;
+	private PackageDeclaration packageDeclaration3;
 	
 	private ModuleDeclaration moduleDeclarationP1M1;
 	private ModuleDeclaration moduleDeclarationP1M2;
 	private ModuleDeclaration moduleDeclarationP2M1;
+	private ModuleDeclaration moduleDeclarationP3M1;
 	
 	private void setupScopeTree() throws IOException, SpxSymbolTableException 
 	{
@@ -90,9 +92,11 @@
 		packageDeclaration1 = indexTestPackageDecl(packageName1, absPathString1);
 		packageDeclaration2 = indexTestPackageDecl(packageName2, absPathString2);
 		
+		
 		moduleDeclarationP1M1 = indexTestModuleDefs ( "p1m1" , packageName1 , absPathString1);
 		moduleDeclarationP1M2 = indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
 		moduleDeclarationP2M1 = indexTestModuleDefs ( "p2m1" , packageName2 , absPathString2);
+	
 	}
 
 	/**
@@ -374,9 +378,6 @@
 	
 	public void testShouldResolveModuleInternalSymbolsFromModule() throws IOException, SpxSymbolTableException{
 		setupScopeTree();
-		
-		
-		
 		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
 				PackageNamespace.packageInternalModuleId(
 						this.packageDeclaration2.getId(), 
@@ -451,6 +452,48 @@
 	}
 	
 	
+	public void testShouldNotAllowTransitiveImports() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+		
+		String packageName3 =  	"\"lang\", \"p3\"" ;
+		
+		packageDeclaration3   = indexTestPackageDecl(packageName3, absPathString2);
+		moduleDeclarationP3M1 = indexTestModuleDefs ( "p3m1" , packageName3 , absPathString2);
+		
+		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId())));
+		this.packageDeclaration2.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration3.getId())));
+		
+		IStrategoAppl moduleQnameAppl = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId());
+		
+		IStrategoTerm symbolId1 = moduleQnameAppl; // defining following packageID
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl , symbolId1 , typeAppl1  , data1));
+		
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()),
+				symbolId1,
+				_facade.getConstructor("ModuleDef", 0) 
+				);
+		
+		assertEquals(0, resolvedSymbols.size());
+		
+		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()),
+				symbolId1,
+				_facade.getConstructor("ModuleDef", 0) 
+				);
+		
+		assertEquals(1, resolvedSymbols.size());
+		
+		SpxSymbol actual = resolvedSymbols.get(0);
+		assertEquals("ModuleDef", actual.type());
+		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
+		assertTrue( SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
+	}
+	
+	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
 		
 		IStrategoConstructor ctor = _facade.getSymbolTableEntryDefCon();

From M.A.Akhter at student.tudelft.nl  Thu Oct  6 10:18:47 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 06 Oct 2011 08:18:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23427 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111006081848.34C772B8004@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Oct  6 08:18:45 2011
New Revision: 23427
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23427&sc=1

Log:
+ Unit Tests

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java	Thu Oct  6 00:09:14 2011	(r23426)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java	Thu Oct  6 08:18:45 2011	(r23427)
@@ -64,6 +64,6 @@
 
 	@Override
 	public String toString() {
-		return "NamespaceId (_id=" + _id + ", _uId=" + _uId + ")";
+		return "NamespaceId [ID =" + _id + "]";
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Thu Oct  6 00:09:14 2011	(r23426)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Thu Oct  6 08:18:45 2011	(r23427)
@@ -242,8 +242,10 @@
 	@Override
 	public int hashCode() {
 		final int prime = 31;
-		int result = 1;
+		int result = super.hashCode();
 		result = prime * result + ((_data == null) ? 0 : _data.hashCode());
+		result = prime * result
+				+ ((_namespace == null) ? 0 : _namespace.hashCode());
 		result = prime * result + ((_type == null) ? 0 : _type.hashCode());
 		return result;
 	}
@@ -255,24 +257,21 @@
 	public boolean equals(Object obj) {
 		if (this == obj)
 			return true;
-		if (obj == null)
+		if (!super.equals(obj))
 			return false;
 		if (getClass() != obj.getClass())
 			return false;
-	
 		SpxSymbol other = (SpxSymbol) obj;
-		if (_id == null) {
-			if (other._id != null)
-				return false;
-		}else if (! verifyEquals(this._id, other._id)){ 
-			return false;
-		}
 		if (_data == null) {
 			if (other._data != null)
 				return false;
 		} else if (!_data.equals(other._data))
 			return false;
-		
+		if (_namespace == null) {
+			if (other._namespace != null)
+				return false;
+		} else if (!_namespace.equals(other._namespace))
+			return false;
 		if (_type == null) {
 			if (other._type != null)
 				return false;
@@ -280,6 +279,14 @@
 			return false;
 		return true;
 	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "SpxSymbol [ Id : " + this._idString + " Type= " + _type + ", Namespace=" + _namespace + "]";
+	}
 }
 
 class SpxSymbolKey extends BaseSymbol implements Serializable{

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Thu Oct  6 00:09:14 2011	(r23426)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Thu Oct  6 08:18:45 2011	(r23427)
@@ -490,10 +490,90 @@
 		SpxSymbol actual = resolvedSymbols.get(0);
 		assertEquals("ModuleDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
-		assertTrue( SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
+		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
 	
 	
+	public void testShouldNotFailIncaseOfCyclicImports() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+		
+		String packageName3 =  	"\"lang\", \"p3\"" ;
+		
+		packageDeclaration3   = indexTestPackageDecl(packageName3, absPathString2);
+		moduleDeclarationP3M1 = indexTestModuleDefs ( "p3m1" , packageName3 , absPathString2);
+		
+		//Setting up following import hierarchy : P1 -> P2 -> P3 -> p1
+		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId())));
+		this.packageDeclaration2.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration3.getId())));
+		this.packageDeclaration3.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId())));
+		
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		IStrategoAppl moduleQnameAppl3 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId());
+		
+		// Defining Symbol1 in P1
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId1 , typeAppl1  , data1));
+		
+		// Defining Symbol3 in P3
+		IStrategoTerm symbolId3 = moduleQnameAppl1; 
+	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl3 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
+		
+		
+		
+		
+		//Resolving Symbol in Package 1
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
+				symbolId3,	//looking for 
+				_facade.getConstructor("ModuleDef", 0) // with type 
+				);
+		
+		
+		assertEquals(1, resolvedSymbols.size());
+		
+		SpxSymbol actual = resolvedSymbols.get(0); // resolved from the current namespace - Module 1 of Package 1 
+		assertEquals("ModuleDef", actual.type());
+		assertTrue(SpxSymbol.verifyEquals(symbolId3, actual.Id(_facade.getTermFactory())));
+		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP1M1.getId() , actual.namespaceUri().id()) );
+		
+		//Resolving Symbol in Package 2
+		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()), // search origin
+				symbolId3, // loooking for 
+				_facade.getConstructor("ModuleDef", 0) // with type 
+				);
+		
+		assertEquals(1, resolvedSymbols.size());
+		actual = resolvedSymbols.get(0); // Resolved from the imported namespace - Module 1 of Package 3
+		assertEquals("ModuleDef", actual.type());
+		assertTrue(SpxSymbol.verifyEquals(symbolId3, actual.Id(_facade.getTermFactory())));
+		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
+		
+		
+		//Resolving Symbol in Package 3
+		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
+				symbolId3, // loooking for 
+				_facade.getConstructor("ModuleDef", 0) // with type 
+				);
+		
+		// current import chain is as following : p1-> p2 ->p3->p1
+		// symbol 1 is defined in P1 
+		// symbol 3 is defined in P3
+		// Symbol 1 Id and Type = Symbol 3 ID and Type
+		// Hence, while resolving for symbol1/symbol3 in Package3 , it will return following :
+		// Symbol3  -> due to the fact that it is enclosed symbol of the current namespace
+		// Symbol1  -> due to the import reference from P3 -> P 1
+		assertEquals(2, resolvedSymbols.size());
+		
+	}
+	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
 		
 		IStrategoConstructor ctor = _facade.getSymbolTableEntryDefCon();

From seba at informatik.uni-marburg.de  Thu Oct  6 12:02:11 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 06 Oct 2011 10:02:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23428 - in
	sugarj/trunk: compiler/org/sugarj/driver
	editor/editor/java/org/sugarj/builder
	editor/editor/java/org/sugarj/editor feature
	stdlib/org/sugarj/languages stdlib/o...
Message-ID: <20111006100211.E527C2B8034@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Thu Oct  6 10:02:11 2011
New Revision: 23428
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23428&sc=1

Log:
eliminate more bugs

Modified:
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/ModuleSystemCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/Result.java
   sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
   sugarj/trunk/feature/feature.xml
   sugarj/trunk/stdlib/org/sugarj/languages/SugarJ.def
   sugarj/trunk/stdlib/org/sugarj/transformations/EditorServiceExtension.str
   sugarj/trunk/update-site/site.xml

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Oct  6 08:18:45 2011	(r23427)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Oct  6 10:02:11 2011	(r23428)
@@ -61,7 +61,7 @@
  */
 public class Driver{
   
-  public final static String CACHE_VERSION = "editor-base-0.15";
+  public final static String CACHE_VERSION = "editor-base-0.16";
   
   private final static int PENDING_TIMEOUT = 120000;
 
@@ -357,8 +357,12 @@
       if (currentGrammarTBL != null)
         driverResult.registerParseTable(currentGrammarTBL);
       
-      if (currentTransProg != null)
+      if (currentTransProg != null) {
+        driverResult.addEditorService(
+            ATermCommands.atermFromString(
+              "Builders(\"sugarj checking\", [SemanticObserver(Strategy(\"sugarj-analyze\"))])"));
         driverResult.registerEditorDesugarings(currentTransProg);
+      }
 
       driverResult.writeDependencyFile(depOutFile);
 
@@ -888,8 +892,10 @@
         interp, 
         driverResult,
         environment);
+    ModuleSystemCommands.registerSearchedClassFiles(modulePath, driverResult, environment);
 
     Path sdf = ModuleSystemCommands.importSdf(modulePath, environment);
+    ModuleSystemCommands.registerSearchedSdfFiles(modulePath, driverResult, environment);
     if (sdf != null) {
       success = true;
       availableSDFImports.add(modulePath);
@@ -897,6 +903,7 @@
     }
     
     Path str = ModuleSystemCommands.importStratego(modulePath, environment);
+    ModuleSystemCommands.registerSearchedStrategoFiles(modulePath, driverResult, environment);
     if (str != null) {
       success = true;
       availableSTRImports.add(modulePath);
@@ -904,6 +911,7 @@
     }
     
     success |= ModuleSystemCommands.importEditorServices(modulePath, driverResult, environment);
+    ModuleSystemCommands.registerSearchedEditorServicesFiles(modulePath, driverResult, environment);
     
     return success;
   }
@@ -1162,10 +1170,6 @@
   }
   
   private void initEditorServices() throws IOException, TokenExpectedException, BadTokenException, SGLRException {
-    driverResult.addEditorService(
-        ATermCommands.atermFromString(
-          "Builders(\"sugarj checking\", [SemanticObserver(Strategy(\"sugarj-analyze\"))])"));
-    
     IStrategoTerm initEditor = editorServicesParser.parse(new FileInputStream(StdLib.initEditor.getPath()), StdLib.initEditor.getPath());
     
     IStrategoTerm services = ATermCommands.getApplicationSubterm(initEditor, "Module", 2);

Modified: sugarj/trunk/compiler/org/sugarj/driver/ModuleSystemCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/ModuleSystemCommands.java	Thu Oct  6 08:18:45 2011	(r23427)
+++ sugarj/trunk/compiler/org/sugarj/driver/ModuleSystemCommands.java	Thu Oct  6 10:02:11 2011	(r23428)
@@ -48,6 +48,10 @@
     return true;
   }
   
+  public static void registerSearchedClassFiles(String modulePath, Result driverResult, Environment environment) throws IOException {
+    registerSearchedFiles(modulePath, ".class", driverResult, environment);
+  }
+  
   /**
    * 
    * @param modulePath
@@ -67,6 +71,11 @@
     return sdf;
   }
   
+  public static void registerSearchedSdfFiles(String modulePath, Result driverResult, Environment environment) throws IOException {
+    registerSearchedFiles(modulePath, ".sdf", driverResult, environment);
+  }
+
+  
   /**
    * 
    * @param modulePath
@@ -86,6 +95,11 @@
     return str;
   }
   
+  public static void registerSearchedStrategoFiles(String modulePath, Result driverResult, Environment environment) throws IOException {
+    registerSearchedFiles(modulePath, ".str", driverResult, environment);
+  }
+
+  
   /**
    * 
    * @param modulePath
@@ -113,6 +127,12 @@
     }
   }
   
+  public static void registerSearchedEditorServicesFiles(String modulePath, Result driverResult, Environment environment) throws IOException {
+    registerSearchedFiles(modulePath, ".serv", driverResult, environment);
+  }
+
+  
+  
   public static RelativeSourceLocationPath locateSourceFile(String modulePath, Set<SourceLocation> sourcePath) {
     if (modulePath.startsWith("org/sugarj"))
       return null;
@@ -205,4 +225,22 @@
     
     return null;
   }
+  
+  
+  
+  public static void registerSearchedFiles(String relativePath, String extension, Result driverResult, Environment environment) throws IOException {
+    RelativePath binFile = environment.new RelativePathBin(relativePath + extension);
+    driverResult.addFileDependency(binFile);
+    
+    for (Path searchPath : environment.getIncludePath()) {
+      String relPath = relativePath;
+      if (relPath.startsWith(searchPath.getAbsolutePath())) {
+        int sepOffset = relativePath.endsWith(Environment.sep) ? 0 : 1;
+        relPath = relPath.substring(searchPath.getAbsolutePath().length() + sepOffset);
+      }
+      
+      RelativePath p = new RelativePath(searchPath, relPath + extension);
+      driverResult.addFileDependency(p);
+    }
+  }
 }

Modified: sugarj/trunk/compiler/org/sugarj/driver/Result.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Result.java	Thu Oct  6 08:18:45 2011	(r23427)
+++ sugarj/trunk/compiler/org/sugarj/driver/Result.java	Thu Oct  6 10:02:11 2011	(r23428)
@@ -58,6 +58,11 @@
     this.generateFiles = generateFiles;
   }
   
+  void addFileDependency(Path file) throws IOException {
+    allDependentFiles.add(file);
+    generatedFileHashes.put(file, FileCommands.fileHash(file));
+  }
+  
   void addDependency(Path depFile, Environment env) throws IOException {
     dependencies.put(depFile, FileCommands.fileHash(depFile));
     allDependentFiles.addAll(readDependencyFile(depFile, env).getFileDependencies(env));

Modified: sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Thu Oct  6 08:18:45 2011	(r23427)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Thu Oct  6 10:02:11 2011	(r23428)
@@ -2,7 +2,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -12,6 +11,7 @@
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IResourceDelta;
+import org.eclipse.core.resources.IResourceDeltaVisitor;
 import org.eclipse.core.resources.IResourceVisitor;
 import org.eclipse.core.resources.IncrementalProjectBuilder;
 import org.eclipse.core.runtime.CoreException;
@@ -19,8 +19,6 @@
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
-import org.eclipse.core.runtime.jobs.ILock;
-import org.eclipse.core.runtime.jobs.ISchedulingRule;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.jdt.core.JavaCore;
@@ -95,18 +93,28 @@
   }
 
   private void incrementalBuild(IResourceDelta delta, IProgressMonitor monitor) {
-    fullBuild(monitor);
-    // System.out.println("incremental build on " + delta);
-    // try {
-    // delta.accept(new IResourceDeltaVisitor() {
-    // public boolean visit(IResourceDelta delta) {
-    // System.out.println("changed: " + delta.getResource().getRawLocation());
-    // return true; // visit children too
-    // }
-    // });
-    // } catch (CoreException e) {
-    // e.printStackTrace();
-    // }
+    boolean rebuild = true;
+    try {
+      class ShouldRebuildResourceDeltaVisitor implements IResourceDeltaVisitor {
+        boolean rebuild = false;
+        public boolean visit(IResourceDelta delta) {
+          if ("sugj".equals(delta.getFullPath().getFileExtension()))
+            rebuild = true;
+          
+          // continue rebuild has not been required so far
+          return !rebuild;
+        }
+      };
+      
+      ShouldRebuildResourceDeltaVisitor visitor = new ShouldRebuildResourceDeltaVisitor();
+      delta.accept(visitor);
+      rebuild = visitor.rebuild;
+    } catch (CoreException e) {
+      e.printStackTrace();
+    }
+    
+    if (rebuild)
+      fullBuild(monitor);
   }
 
   private void fullBuild(IProgressMonitor monitor) {

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Thu Oct  6 08:18:45 2011	(r23427)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Thu Oct  6 10:02:11 2011	(r23428)
@@ -17,7 +17,6 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.spoofax.jsglr.client.KeywordRecognizer;
 import org.spoofax.jsglr.client.imploder.IToken;
@@ -65,16 +64,22 @@
     
     assert environment != null;
     
-    result = getResult(filename);
-    
-    if (input.contains(ContentProposer.COMPLETION_TOKEN) && result != null && result.getParseTable() != null)
-      return parseCompletionTree(input, filename);
-      
+
+    this.result = null;
+    Result result = getResult(filename);
+
     if (result == null)
       result = parseFailureResult();
 
-    if (result.isUpToDateShallow(input.hashCode(), environment))
+    if (input.contains(ContentProposer.COMPLETION_TOKEN) && result != null && result.getParseTable() != null) {
+      this.result = result;
+      return parseCompletionTree(input, filename, result);
+    }
+
+    if (result.isUpToDateShallow(input.hashCode(), environment)) {
+      this.result = result;
       return result.getSugaredSyntaxTree();
+    }
     
     if (!isPending(filename)) 
       scheduleParse(input, filename);
@@ -124,6 +129,7 @@
           org.strategoxt.imp.runtime.Environment.logException(e);
         } finally {
           monitor.done();
+          SugarJParser.this.result = result;
           if (result != null) {
             SugarJParser.putResult(filename, result);
             getController().scheduleParserUpdate(0, false);
@@ -173,7 +179,6 @@
   }
 
   private static Result getResult(String file) {
-    
     synchronized (results) {
       return results.get(file);
     }
@@ -213,7 +218,7 @@
     return r;
   }
   
-  private IStrategoTerm parseCompletionTree(String input, String filename) throws IOException, TokenExpectedException, BadTokenException, SGLRException {
+  private IStrategoTerm parseCompletionTree(String input, String filename, Result result) throws IOException, TokenExpectedException, BadTokenException, SGLRException {
     JSGLRI jsglri = null;
     try {
       jsglri = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(result.getParseTable().getAbsolutePath()), "NextToplevelDeclaration");

Modified: sugarj/trunk/feature/feature.xml
==============================================================================
--- sugarj/trunk/feature/feature.xml	Thu Oct  6 08:18:45 2011	(r23427)
+++ sugarj/trunk/feature/feature.xml	Thu Oct  6 10:02:11 2011	(r23428)
@@ -2,7 +2,7 @@
 <feature
       id="org.sugarj.editor"
       label="Sugarclipse"
-      version="1.3.0.qualifier"
+      version="1.3.1.qualifier"
       provider-name="sugarj.org">
 
    <description url="http://sugarj.org">

Modified: sugarj/trunk/stdlib/org/sugarj/languages/SugarJ.def
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/languages/SugarJ.def	Thu Oct  6 08:18:45 2011	(r23427)
+++ sugarj/trunk/stdlib/org/sugarj/languages/SugarJ.def	Thu Oct  6 10:02:11 2011	(r23428)
@@ -168,13 +168,14 @@
     "{" CheckingRule* "}"              -> ChecksBody    {cons("ChecksBody")}
 
   context-free syntax
-    "errors" CheckingRuleBody                          -> CheckingRule     {cons("CheckingRuleErrors")}
-    "warnings" CheckingRuleBody                        -> CheckingRule     {cons("CheckingRuleWarnings")}
-    "notes" CheckingRuleBody                           -> CheckingRule     {cons("CheckingRuleNotes")}
+    "errors" CheckingRuleBody*                          -> CheckingRule     {cons("CheckingRuleErrors")}
+    "warnings" CheckingRuleBody*                        -> CheckingRule     {cons("CheckingRuleWarnings")}
+    "notes" CheckingRuleBody*                           -> CheckingRule     {cons("CheckingRuleNotes")}
     StrategoTerm "=" StrategoTerm                          -> CheckingRuleBody {cons("RuleNoCond")}
     StrategoTerm "=" StrategoTerm "where" StrategoStrategy -> CheckingRuleBody {cons("Rule")}
     StrategoTerm "=" StrategoTerm StrategoRuleCond+        -> CheckingRuleBody {cons("Rule"), avoid}
 
+    "rules" StrategoDef*        -> CheckingRule {cons("Rules")}
 
   lexical syntax
          -> "}" {recover, reject}

Modified: sugarj/trunk/stdlib/org/sugarj/transformations/EditorServiceExtension.str
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/transformations/EditorServiceExtension.str	Thu Oct  6 08:18:45 2011	(r23427)
+++ sugarj/trunk/stdlib/org/sugarj/transformations/EditorServiceExtension.str	Thu Oct  6 10:02:11 2011	(r23428)
@@ -21,23 +21,26 @@
 rules
   
   desugar = changed-tree(checks-to-sugar)
-  
+
   checks-to-sugar : 
     ChecksDec(ChecksDecHead(mods, name), ChecksBody(rs)) -> SugarDec(SugarDecHead(mods, name), SugarBody(<map(checkingrule-to-sugar)> rs))
+
+  checkingrule-to-sugar :
+    Rules(rs) -> transformation-elem(Rules(rs))
   
   checkingrule-to-sugar :
-    CheckingRuleErrors(r) -> transformation-elem(
-                                   Rules([RDefNoArgs("constraint-error", r)])
+    CheckingRuleErrors(rs) -> transformation-elem(
+                                   Rules(<map(!RDefNoArgs("constraint-error", <id>))> rs)
                                  )
 
   checkingrule-to-sugar :
-    CheckingRuleWarnings(r) -> transformation-elem(
-                                     Rules([RDefNoArgs("constraint-warning", r)])
+    CheckingRuleWarnings(rs) -> transformation-elem(
+                                   Rules(<map(!RDefNoArgs("constraint-warning", <id>))> rs)
                                    )
 
   checkingrule-to-sugar :
-    CheckingRuleNotes(r) -> transformation-elem(
-                                  Rules([RDefNoArgs("constraint-note", r)])
+    CheckingRuleNotes(rs) -> transformation-elem(
+                                   Rules(<map(!RDefNoArgs("constraint-note", <id>))> rs)
                                 )
 
 

Modified: sugarj/trunk/update-site/site.xml
==============================================================================
--- sugarj/trunk/update-site/site.xml	Thu Oct  6 08:18:45 2011	(r23427)
+++ sugarj/trunk/update-site/site.xml	Thu Oct  6 10:02:11 2011	(r23428)
@@ -3,7 +3,7 @@
    <description name="SugarJ" url="sugarj.org/update">
       SugarJ
    </description>
-   <feature url="features/org.sugarj.editor_1.3.0.201109121151.jar" id="org.sugarj.editor" version="1.3.0.201109121151">
+   <feature url="features/org.sugarj.editor_1.3.1.201110051528.jar" id="org.sugarj.editor" version="1.3.1.201110051528">
       <category name="SugarJ"/>
    </feature>
    <category-def name="SugarJ" label="SugarJ">

From M.A.Akhter at student.tudelft.nl  Thu Oct  6 14:12:27 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 06 Oct 2011 12:12:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23429 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20111006121227.4E4962B8030@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Oct  6 12:12:26 2011
New Revision: 23429
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23429&sc=1

Log:
+ further pruning in scope-tree during symbol resolving

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Thu Oct  6 10:02:11 2011	(r23428)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Thu Oct  6 12:12:26 2011	(r23429)
@@ -42,7 +42,7 @@
 		
 		this.type = type;
 		
-		src = (_enclosingNamespaceId!= null) ? type.toString() + _currentNamespaceId.uniqueID()+".idx" :  type.toString()  + "___globalsymbols.idx" ; 
+		src = (_enclosingNamespaceId!= null) ? type.getName() + _currentNamespaceId.id() :  type.getName()   ; 
 			
 		_symbols = new MultiValuePersistentTable();
 	}
@@ -91,6 +91,8 @@
 	
 	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
 		
+		facade.persistenceManager().logMessage(this.src, "Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
+		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
 		List<SpxSymbol> lookupResult = getMembers().resolve(id);
@@ -140,6 +142,13 @@
 		return searchedBy.namespaceUri().equals(this.enclosingNamespaceUri()) || searchedBy.namespaceUri().equals(this.namespaceUri());  
 	}
 	
+	/**
+	 * Base Condition of the lookup : 
+	 * Allow search enclosing Namesapce only if searchedBy is not enclosing Namespace. 
+	 *  
+	 * @param searchedBy
+	 * @return True if enclosing Namespace != searachedBy  ; otherwise false.
+	 */
 	protected boolean shouldSearchInEnclosingNamespace(INamespace searchedBy) {
 		// search enclosing Namesapce only if searchedBy is not enclosing Namespace
 		return !(searchedBy.namespaceUri().equals(this.enclosingNamespaceUri())); 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Thu Oct  6 10:02:11 2011	(r23428)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Thu Oct  6 12:12:26 2011	(r23429)
@@ -13,6 +13,7 @@
 		super(id ,type, manager, null);
 	}
 	
+	
 	/**
 	 * Creates an instance of GlobalScope. 
 	 * 
@@ -35,6 +36,7 @@
 		);
 
 	}
+	
 	public static IStrategoList getGlobalNamespaceId(SpxSemanticIndexFacade facade){
 		ITermFactory termFactory = facade.getTermFactory();
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Thu Oct  6 10:02:11 2011	(r23428)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Thu Oct  6 12:12:26 2011	(r23429)
@@ -12,11 +12,16 @@
  *  
  * NOTE: Internal ModuleNamespaces does not have any physical ModuleDeclaration associated.    
  */
-public class ModuleNamespace extends BaseNamespace
+public final class ModuleNamespace extends BaseNamespace
 {
 	private static final long serialVersionUID = 5255913747644738988L;
-	
-	boolean isInternalNamespace = false;
+	/**
+	 * A Flag to refer to the Internal Namespace of the enclosing Namespace. 
+	 * When it is set to true, only way to access the enclosed symbol is through 
+	 * this Namespace or the Enclosing PackageNamespace. Other 
+	 * ModuleNamespace cannot resolve any symbols of this internal  Namespace.
+	 */
+	boolean isInternalNamespace = false;   
 	
 	public ModuleNamespace(NamespaceUri currentNamespaceUri, IStrategoConstructor namespaceType ,NamespaceUri enclosingNamespaceUri,  ISpxPersistenceManager manager) {
 		super(currentNamespaceUri, namespaceType, manager, enclosingNamespaceUri);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Thu Oct  6 10:02:11 2011	(r23428)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Thu Oct  6 12:12:26 2011	(r23429)
@@ -18,8 +18,10 @@
  * 
  * @author Md. Adil Akhter
  */
-public class PackageNamespace  extends BaseNamespace {
+public final class PackageNamespace  extends BaseNamespace {
 
+	//TODO improvement : Implement a Query Pattern for symbol resolving . 
+	
 	private static final long serialVersionUID = 7324156752002137217L;
 	private static final String INTERNAL_NAMESPACENAME = "__internal";
 	
@@ -124,25 +126,57 @@
 		return retSymbol;
 	}
 
+	/* Resolves all the symbol with the {@code key} as ID in the current Scope-Tree 
+	 * based  implementation of the Symbol Table.
+	 * 
+	 * @see org.spoofax.interpreter.library.language.spxlang.BaseNamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.INamespace, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
 	@Override
 	public Iterable<SpxSymbol> resolveAll(IStrategoTerm key,INamespace originNamespace, SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
-		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
+		facade.persistenceManager().logMessage(this.src, "Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + key + " origin Namespace: " + originNamespace.namespaceUri().id() );
 		
-		retResult.addAll((Set<SpxSymbol>)super.resolveAll(key, this, facade));
+		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
 		//searching in the enclosed namespace. For PackageNamespace, all the enclosed ModuleNamespace is searched. 
 		ensureEnclosedNamespaceUrisLoaded(facade);
 		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, originNamespace, facade)) ;
 		
+		// searching in current namespace and enclosing namespaces
+		List<SpxSymbol> lookupResult = getMembers().resolve(key);
+		retResult.addAll(lookupResult);
+		
+		
+		// searching in the enclosing Namespace. checks whether searching to the enclosing scope is allowed.
+		// In case of imported package's resolving global lookup is avoided 
+		// since it is take care of the namespace when search started. 
+		if( allowSearchingGlobalScope(originNamespace)){
+			INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
+			Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(key, this ,facade);
+			retResult.addAll(parentResults);
+		}	 
 		
+		//searching in the imported namespaces. Also  detect transitive and cyclic import references.  
 		if ( !isTransitiveImportLookup(facade , originNamespace)) {
-			//searching in the imported namespaces. 
 			ensureImportedNamespaceUrisLoaded(facade);
 			retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, originNamespace, facade)) ;
 		}
 		//returning the result 
 		return retResult;
 	}
+
+	
+	private boolean allowSearchingGlobalScope(INamespace searchedBy) {
+		boolean retValue =  super.shouldSearchInEnclosingNamespace(searchedBy);
+		if(retValue) {
+			// Primary goal of this extra check is to prune search tree. 
+			// Only allowing Searching in the global namespace if search started in one of the 
+			// enclosing modules of this Package or it is indeed a package namespace.
+			// By this way, global namespace ( which could contain considerable amount of symbol) 
+			// lookup will be performed only once. 
+			retValue =  (this == searchedBy)  ||  enclosedNamespaceUris.contains(searchedBy.namespaceUri());
+		}
+		return retValue;	
+	}
 	
 	/**
 	 * Creates an instance of PackageScope. Also creates internal symbol scopes
@@ -167,13 +201,14 @@
 	}
 	
 	
-	/**
+	/** 
+	 * Resolving a Symbol in the Namespaces specified in {@code resolvableUris} 
+	 * @param resolvableUris 
 	 * @param key
 	 * @param type
 	 * @param searchedOrigin
 	 * @param facade
-	 * @param retSymbol
-	 * @param namespaceResolver
+	 * @return a {@link SpxSymbol} matched with the search criteria mentioned 
 	 * @throws SpxSymbolTableException 
 	 */
 	private SpxSymbol resolveSymbolinNamespaces(Iterable<NamespaceUri> resolvableUris  ,IStrategoTerm key, IStrategoTerm type, INamespace searchedOrigin, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
@@ -230,6 +265,7 @@
 	
 	}
 	
+	
 	/**
 	 * Creates a new Internal namespace for the current package namespace.
 	 * @param enclosingNamespaceId

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Thu Oct  6 10:02:11 2011	(r23428)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Thu Oct  6 12:12:26 2011	(r23429)
@@ -197,7 +197,7 @@
 		
 	}
 
-	/* Logs Message 
+	/* Logs Message if {@code DEBUG} is turned on.
 	 * 
 	 * @see org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager#logMessage(java.lang.String, java.lang.String)
 	 */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Thu Oct  6 10:02:11 2011	(r23428)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Thu Oct  6 12:12:26 2011	(r23429)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import java.util.Iterator;
+import java.util.List;
 import java.util.Set;
 
 import jdbm.PrimaryMap;
@@ -12,7 +13,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SpxPrimarySymbolTable implements INamespaceResolver{
-	
+	private final String SRC = this.getClass().getSimpleName();
 	private final ISpxPersistenceManager _manager; // Persistence Manager
 	private final PrimaryMap <NamespaceUri,INamespace> namespaces;
 	private final SecondaryHashMap <IStrategoList,NamespaceUri,INamespace> namespaceByStrategoId;
@@ -122,16 +123,16 @@
 			}
 				
 		}
-		
-		
 	}
 	
-
-
 	public Iterable<SpxSymbol> resolveSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
+		_manager.logMessage(SRC, "Resolving symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
+		
 		ensureActiveNamespaceLoaded(namespaceId);
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_activeNamespace.resolveAll(symbolId, symbolType ,spxSemanticIndexFacade);
 		
-		return _activeNamespace.resolveAll(symbolId, symbolType ,spxSemanticIndexFacade);
+		_manager.logMessage(SRC, "Resolved Symbols : " + resolvedSymbols);
+		return resolvedSymbols;
 	} 
 }
 

From M.A.Akhter at student.tudelft.nl  Thu Oct  6 14:12:45 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 06 Oct 2011 12:12:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23430 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20111006121245.3A1CBCC0E2@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Oct  6 12:12:44 2011
New Revision: 23430
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23430&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Thu Oct  6 12:12:26 2011	(r23429)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Thu Oct  6 12:12:44 2011	(r23430)
@@ -5,7 +5,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class GlobalNamespace extends BaseNamespace {
+public final class GlobalNamespace extends BaseNamespace {
 	
 	private static final long serialVersionUID = -9194490383911401603L;
 	

From M.A.Akhter at student.tudelft.nl  Thu Oct  6 16:26:48 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 06 Oct 2011 14:26:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23431 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111006142648.230E32B8006@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Oct  6 14:26:46 2011
New Revision: 23431
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23431&sc=1

Log:
+ EventHandler added to remove PackageNamespace and ModuleNamespace whenever PackageDeclaration and ModuleDeclaration is removed. 
+ 2 Unit Test to verify that event handler is working as expected

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Thu Oct  6 12:12:44 2011	(r23430)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Thu Oct  6 14:26:46 2011	(r23431)
@@ -17,6 +17,12 @@
 	
 	private final PrimaryHashMap<IStrategoList, ModuleDeclaration> _moduleLookupMap; 
 	
+	 /**
+     * Listeners which are notified about changes in records
+     */
+    protected List<RecordListener<IStrategoList, ModuleDeclaration>> recordListeners = new ArrayList<RecordListener<IStrategoList, ModuleDeclaration>>();
+
+    
 	/* FIXME : Using separate HashMap due to the consideration of converting them store map
 	 * to load module AST lazily. 
 	 */
@@ -109,6 +115,13 @@
 						// cleanup other table to make it consistent 
 						_moduleDefinition.remove(key);
 						_moduleAnalyzedDefinition.remove(key);
+						
+						if(!recordListeners.isEmpty()){	
+							for( RecordListener<IStrategoList, ModuleDeclaration> rl: recordListeners){
+								rl.recordRemoved(key, value);
+							}
+						}
+
 					}
 				
 				}
@@ -403,4 +416,17 @@
 				removeModuleDeclarationByPackageId(packageID) ;
 			}};
 	}
+	
+	public void addRecordListener( final IModuleDeclarationRecordListener rl){
+		this.recordListeners.add(rl.getModuleDeclarationRecordListener());
+	}
+
+	public void removeRecordListener( final IModuleDeclarationRecordListener rl){
+		this.recordListeners.remove(rl.getModuleDeclarationRecordListener());
+	}
+}
+
+interface IModuleDeclarationRecordListener{
+	
+	public RecordListener<IStrategoList, ModuleDeclaration> getModuleDeclarationRecordListener();
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Thu Oct  6 12:12:44 2011	(r23430)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Thu Oct  6 14:26:46 2011	(r23431)
@@ -115,6 +115,10 @@
 		// Hence, adding following record listener to do that automatically rather invoking
 		// it explicitly.
 		_spxPackageTable.addRecordListener((IPackageDeclarationRecordListener)_spxModuleTable);
+		
+		//removing respective package or module namespace associated with the construct declaration  
+		_spxPackageTable.addRecordListener((IPackageDeclarationRecordListener)_spxSymbolTable);
+		_spxModuleTable.addRecordListener((IModuleDeclarationRecordListener) _spxSymbolTable);
 	}
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Thu Oct  6 12:12:44 2011	(r23430)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Thu Oct  6 14:26:46 2011	(r23431)
@@ -1,10 +1,12 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
 import jdbm.PrimaryMap;
+import jdbm.RecordListener;
 import jdbm.SecondaryHashMap;
 import jdbm.SecondaryKeyExtractor;
 
@@ -12,7 +14,7 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class SpxPrimarySymbolTable implements INamespaceResolver{
+public class SpxPrimarySymbolTable implements INamespaceResolver , IPackageDeclarationRecordListener,IModuleDeclarationRecordListener {
 	private final String SRC = this.getClass().getSimpleName();
 	private final ISpxPersistenceManager _manager; // Persistence Manager
 	private final PrimaryMap <NamespaceUri,INamespace> namespaces;
@@ -69,6 +71,14 @@
 			return null;
 	}
 	
+	public void removeNamespace(IStrategoList id){
+		INamespace resolveNamespace  = resolveNamespace(id) ;
+		
+		if(resolveNamespace != null){
+			this.namespaces.remove(resolveNamespace.namespaceUri());
+		}
+	}
+	
 	public INamespace resolveNamespace(NamespaceUri id) {
 		return namespaces.get(id); 
 	}
@@ -133,6 +143,53 @@
 		
 		_manager.logMessage(SRC, "Resolved Symbols : " + resolvedSymbols);
 		return resolvedSymbols;
+	}
+	
+	
+
+	public RecordListener<IStrategoList, PackageDeclaration> getPackageDeclarationRecordListener() {
+		return new RecordListener<IStrategoList, PackageDeclaration>(){
+
+			public void recordInserted(IStrategoList packageID,
+					PackageDeclaration value) throws IOException {
+				// do nothing
+				
+			}
+
+			public void recordUpdated(IStrategoList packageID,
+					PackageDeclaration oldValue, PackageDeclaration newValue)
+					throws IOException {
+				// do nothing 
+			}
+
+			public void recordRemoved(IStrategoList packageID,
+					PackageDeclaration value) throws IOException {
+				
+				removeNamespace(packageID) ;
+			}};
+	}
+
+	public RecordListener<IStrategoList, ModuleDeclaration> getModuleDeclarationRecordListener() {
+		return new RecordListener<IStrategoList, ModuleDeclaration>() {
+
+			public void recordInserted(IStrategoList key, ModuleDeclaration value) throws IOException {
+				// do nothing 
+				
+			}
+
+			public void recordUpdated(IStrategoList key,  ModuleDeclaration oldValue, ModuleDeclaration newValue)
+					throws IOException {
+				// do nothing 
+				
+			}
+
+			public void recordRemoved(IStrategoList moduleId, ModuleDeclaration value)
+					throws IOException {
+				removeNamespace(moduleId) ;
+				
+			}
+			
+		};
 	} 
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Oct  6 12:12:44 2011	(r23430)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Oct  6 14:26:46 2011	(r23431)
@@ -763,8 +763,7 @@
 	 * @param uri URI of the Resource. 
 	 * @return Absolute Path represented by the URI  
 	 */
-	private String toAbsulatePath( IStrategoString uri)
-	{
+	public String toAbsulatePath( IStrategoString uri){
 		URI resUri = toFileURI(uri);
 		
 		return new File(resUri).getAbsolutePath().trim();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Thu Oct  6 12:12:44 2011	(r23430)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Thu Oct  6 14:26:46 2011	(r23431)
@@ -1,6 +1,9 @@
 package org.spoofax.interpreter.library.language.spxlang.tests;
 
+import java.io.File;
 import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.List;
 
 import org.spoofax.interpreter.core.Interpreter;
@@ -18,7 +21,6 @@
 import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -81,8 +83,7 @@
 	private ModuleDeclaration moduleDeclarationP2M1;
 	private ModuleDeclaration moduleDeclarationP3M1;
 	
-	private void setupScopeTree() throws IOException, SpxSymbolTableException 
-	{
+	private void setupScopeTree() throws IOException, SpxSymbolTableException {
 		String packageName1 =  	"\"lang\", \"p1\"" ;
 		String packageName2 =  	"\"lang\", \"p2\"" ;
 		
@@ -96,9 +97,39 @@
 		moduleDeclarationP1M1 = indexTestModuleDefs ( "p1m1" , packageName1 , absPathString1);
 		moduleDeclarationP1M2 = indexTestModuleDefs ( "p1m2" , packageName1 , absPathString1);
 		moduleDeclarationP2M1 = indexTestModuleDefs ( "p2m1" , packageName2 , absPathString2);
+	}
+	
 	
+	public void testRemovingPackageDeclarationShouldAlsoRemoveNamespace() throws IOException, SpxSymbolTableException, URISyntaxException{
+		
+		setupScopeTree();
+		
+		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace(packageDeclaration1.getId());
+		assertNotNull(ns);
+		
+		IStrategoString uriTerm = termFactory().makeString(absPathString1) ;
+		_facade.persistenceManager().spxPackageTable().removePackageDeclarationLocation(
+				packageDeclaration1.getId(), 
+				_facade.toAbsulatePath(uriTerm) 
+			);
+
+		ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace(packageDeclaration1.getId());
+		assertNull(ns);
 	}
+	
+	public void testRemovingModuleDeclarationShouldAlsoRemoveNamespace() throws IOException, SpxSymbolTableException, URISyntaxException{
+		
+		setupScopeTree();
+		
+		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace(moduleDeclarationP1M1.getId());
+		assertNotNull(ns);
+		
+		_facade.persistenceManager().spxModuleTable().remove(moduleDeclarationP1M1.getId());
 
+		ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace(moduleDeclarationP1M1.getId());
+		assertNull(ns);
+	}
+	
 	/**
 	 * Validates that Global Namespace is defined only once 
 	 */

From M.A.Akhter at student.tudelft.nl  Thu Oct  6 20:17:03 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 06 Oct 2011 18:17:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23432 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang spxlang/tests
Message-ID: <20111006181703.D6025CC08F@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Oct  6 18:17:03 2011
New Revision: 23432
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23432&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_symbol_definition.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Oct  6 14:26:46 2011	(r23431)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -41,6 +41,7 @@
 		add(new SPX_index_package_declaration(spxIndex));
 		add(new SPX_index_language_descriptor(spxIndex));
 		add(new SPX_index_module_definition(spxIndex));
+		add(new SPX_index_symbol_definition(spxIndex));
 		
 		add(new SPX_index_get_language_descriptor(spxIndex));
 		add(new SPX_index_get_package_declaration(spxIndex));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Thu Oct  6 14:26:46 2011	(r23431)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -64,6 +64,7 @@
 	public INamespace getCurrentNamespace(INamespaceResolver rs) throws SpxSymbolTableException{ return _currentNamespaceId.resolve(rs); }
 	
 	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException{
+		facade.persistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		assert type instanceof IStrategoConstructor : "Type is expected to be IStrategoConstructor" ;
 			
@@ -83,7 +84,7 @@
 		if( namespace  != null) {
 			//checks whether searching to the enclosing scope is allowed.
 			if( shouldSearchInEnclosingNamespace( searchedBy))
-				return namespace.resolve(id, type, searchedBy, facade);
+				return namespace.resolve(id, type, this, facade);
 		}	 
 		
 		return null; // symbol is not found
@@ -91,7 +92,7 @@
 	
 	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
 		
-		facade.persistenceManager().logMessage(this.src, "Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
+		facade.persistenceManager().logMessage(this.src, "resolveAll(Base) | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Thu Oct  6 14:26:46 2011	(r23431)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -106,6 +106,7 @@
 	 */
 	@Override
 	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
+		facade.persistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		ensureEnclosedNamespaceUrisLoaded(facade);
 		SpxSymbol retSymbol = resolveSymbolinNamespaces(this.enclosedNamespaceUris, id, type, searchedBy, facade);
@@ -113,7 +114,7 @@
 		if (retSymbol == null) {
 			// Searching in package's local symbols. If not found, search
 			// in the enclosing namespaces i.e. in Global Namespace
-			retSymbol = super.resolve(id, type, this, facade);
+			retSymbol = super.resolve(id, type, searchedBy, facade);
 
 			if (retSymbol == null) {
 				if ( !isTransitiveImportLookup(facade , searchedBy)) {
@@ -133,7 +134,7 @@
 	 */
 	@Override
 	public Iterable<SpxSymbol> resolveAll(IStrategoTerm key,INamespace originNamespace, SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
-		facade.persistenceManager().logMessage(this.src, "Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + key + " origin Namespace: " + originNamespace.namespaceUri().id() );
+		facade.persistenceManager().logMessage(this.src, "resolveAll | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + key + " origin Namespace: " + originNamespace.namespaceUri().id() );
 		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
@@ -141,20 +142,10 @@
 		ensureEnclosedNamespaceUrisLoaded(facade);
 		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, originNamespace, facade)) ;
 		
-		// searching in current namespace and enclosing namespaces
-		List<SpxSymbol> lookupResult = getMembers().resolve(key);
-		retResult.addAll(lookupResult);
+		//searching in the current scope and its enclosing scope
+		retResult.addAll((Set<SpxSymbol>)super.resolveAll(key, originNamespace, facade));
 		
 		
-		// searching in the enclosing Namespace. checks whether searching to the enclosing scope is allowed.
-		// In case of imported package's resolving global lookup is avoided 
-		// since it is take care of the namespace when search started. 
-		if( allowSearchingGlobalScope(originNamespace)){
-			INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
-			Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(key, this ,facade);
-			retResult.addAll(parentResults);
-		}	 
-		
 		//searching in the imported namespaces. Also  detect transitive and cyclic import references.  
 		if ( !isTransitiveImportLookup(facade , originNamespace)) {
 			ensureImportedNamespaceUrisLoaded(facade);
@@ -164,8 +155,8 @@
 		return retResult;
 	}
 
-	
-	private boolean allowSearchingGlobalScope(INamespace searchedBy) {
+	@Override
+	protected boolean shouldSearchInEnclosingNamespace(INamespace searchedBy) {
 		boolean retValue =  super.shouldSearchInEnclosingNamespace(searchedBy);
 		if(retValue) {
 			// Primary goal of this extra check is to prune search tree. 
@@ -173,7 +164,7 @@
 			// enclosing modules of this Package or it is indeed a package namespace.
 			// By this way, global namespace ( which could contain considerable amount of symbol) 
 			// lookup will be performed only once. 
-			retValue =  (this == searchedBy)  ||  enclosedNamespaceUris.contains(searchedBy.namespaceUri());
+			retValue =  enclosedNamespaceUris.contains(searchedBy.namespaceUri());
 		}
 		return retValue;	
 	}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -0,0 +1,58 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class SPX_index_resolve_symbol extends AbstractPrimitive {
+	private static String NAME = "SPX_index_resolve_symbols";
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int SEARCH_CRITERIA_INDEX = 1;
+
+	private final static int NO_ARGS = 2;
+
+	private final SpxSemanticIndex index;
+
+	public SPX_index_resolve_symbol(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
+		this.index = index;
+	}
+
+	/* Retrieve Spoofaxlang ModuleDefinition with Module ID 
+	 * specified in {@code tvars}.    
+	 * 
+	 * {@code tvars} contains name of the project and typed qualified ModuleID  
+	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		boolean successStatement = false;
+	
+		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[SEARCH_CRITERIA_INDEX])) 
+		{
+			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoTuple searchCriteria = (IStrategoTuple)tvars[SEARCH_CRITERIA_INDEX];
+		
+			try {
+				IStrategoTerm t = index.resolveSymbol(projectName, searchCriteria);
+				env.setCurrent(t);
+				successStatement = true;
+			} 
+			catch(Exception ex)
+			{
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+			}
+		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+
+		return successStatement;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -0,0 +1,58 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class SPX_index_resolve_symbols extends AbstractPrimitive {
+	private static String NAME = "SPX_index_resolve_symbols";
+	private static int PROJECT_NAME_INDEX = 0;
+	private static int SEARCH_CRITERIA_INDEX = 1;
+
+	private final static int NO_ARGS = 2;
+
+	private final SpxSemanticIndex index;
+
+	public SPX_index_resolve_symbols(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
+		this.index = index;
+	}
+
+	/* Retrieve Spoofaxlang ModuleDefinition with Module ID 
+	 * specified in {@code tvars}.    
+	 * 
+	 * {@code tvars} contains name of the project and typed qualified ModuleID  
+	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		boolean successStatement = false;
+	
+		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[SEARCH_CRITERIA_INDEX])) 
+		{
+			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoTuple searchCriteria = (IStrategoTuple)tvars[SEARCH_CRITERIA_INDEX];
+		
+			try {
+				IStrategoTerm t = index.resolveSymbols(projectName, searchCriteria);
+				env.setCurrent(t);
+				successStatement = true;
+			} 
+			catch(Exception ex)
+			{
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+			}
+		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+
+		return successStatement;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_symbol_definition.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_symbol_definition.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -0,0 +1,53 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class SPX_index_symbol_definition extends AbstractPrimitive {
+	private static String NAME = "SPX_index_symbol_definition";
+	
+	private final static int PROJECT_NAME_INDEX = 0;
+	private final static int SYMBOL_DEF_INDEX = 1;
+	
+	private final static int NO_ARGS = 2;
+	
+	private final SpxSemanticIndex index;
+	
+	public SPX_index_symbol_definition(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		boolean successStatement = false;
+		
+		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[SYMBOL_DEF_INDEX])) {
+			
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl symbolDef   = (IStrategoAppl) tvars[SYMBOL_DEF_INDEX];
+			
+			try
+			{
+				successStatement = index.indexSymbolDefinition(projectName, symbolDef);
+			}
+			catch(Exception ex)
+			{ 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+			}
+		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
+		return successStatement;	
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Thu Oct  6 14:26:46 2011	(r23431)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -44,13 +44,12 @@
 	 */
 	public SpxModuleLookupTable(ISpxPersistenceManager manager)
 	{
-		assert manager != null;
-		
 		String tableName = SRC+ "_"+ manager.getProjectName();
-		
+
+		assert manager != null;
 		_manager = manager;
 		_moduleLookupMap = manager.loadHashMap(tableName+ "._lookupModuleMap.idx");
-		
+
 		// read-only secondary view of the the lookup table . 
 		_moduleByFileAbsPath = _moduleLookupMap.secondaryHashMap(tableName+ "._moduleByFileAbsPath.idx", 
 				new SecondaryKeyExtractor<String, IStrategoList, ModuleDeclaration>() {
@@ -67,8 +66,7 @@
 			}
 		}
 		);
-		
-		
+
 		_moduleByPackageId = _moduleLookupMap.secondaryHashMap(tableName+ "._moduleByPackageId.idx", 
 				new SecondaryKeyExtractor<IStrategoList, IStrategoList, ModuleDeclaration>() {
 
@@ -84,10 +82,10 @@
 			}
 		}
 		);
-		
+
 		this._moduleDefinition = manager.loadHashMap(tableName+ "._moduleDefinition.idx");
 		this._moduleAnalyzedDefinition = manager.loadHashMap(tableName+ "._moduleAnalyzedDefinition.idx");
-	
+
 		initRecordListener();
 	}
 	
@@ -121,13 +119,10 @@
 								rl.recordRemoved(key, value);
 							}
 						}
-
 					}
-				
 				}
 		);
 	}
-	
 	/** Size of the Symbol Table 
 	 * 
 	 * @return

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Thu Oct  6 14:26:46 2011	(r23431)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -136,17 +136,30 @@
 	}
 	
 	public Iterable<SpxSymbol> resolveSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
-		_manager.logMessage(SRC, "Resolving symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
+		_manager.logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
 		
 		ensureActiveNamespaceLoaded(namespaceId);
 		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_activeNamespace.resolveAll(symbolId, symbolType ,spxSemanticIndexFacade);
 		
-		_manager.logMessage(SRC, "Resolved Symbols : " + resolvedSymbols);
+		_manager.logMessage(SRC, "resolveSymbols | Resolved Symbols : " + resolvedSymbols);
 		return resolvedSymbols;
 	}
 	
 	
 
+	public SpxSymbol resolveSymbol(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
+		_manager.logMessage(SRC, "resolveSymbol | Resolving symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
+		
+		ensureActiveNamespaceLoaded(namespaceId);
+		
+		SpxSymbol  resolvedSymbol = _activeNamespace.resolve(symbolId, symbolType ,_activeNamespace ,spxSemanticIndexFacade);
+		
+		_manager.logMessage(SRC, "resolveSymbol | Resolved Symbol : " + resolvedSymbol );
+		
+		return resolvedSymbol;
+	}
+	
+
 	public RecordListener<IStrategoList, PackageDeclaration> getPackageDeclarationRecordListener() {
 		return new RecordListener<IStrategoList, PackageDeclaration>(){
 
@@ -190,7 +203,9 @@
 			}
 			
 		};
-	} 
+	}
+
+	
 }
 
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Thu Oct  6 14:26:46 2011	(r23431)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -10,6 +10,7 @@
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 
 
@@ -124,6 +125,18 @@
 		return idx.executeIndexer(projectName, importReferences);
 	}
 	
+	public boolean indexSymbolDefinition(IStrategoString projectName, final IStrategoAppl symbolDef)  throws Exception{
+		
+		SpxIndexer idx = new SpxIndexer() {
+			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				idxFacade.indexSymbol(symbolDef);
+			}
+		};
+		
+		return idx.executeIndexer(projectName, symbolDef);
+	}
+	
 	// Index module definition . 
 	public boolean indexModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleDefinition) throws Exception
 	{
@@ -440,4 +453,29 @@
 	{
 		public abstract void executeCommnad(IStrategoTerm projectName , Object... objects) throws Exception;
 	}
+
+	public IStrategoTerm resolveSymbols(IStrategoString projectName, final IStrategoTuple searchCriteria)  throws Exception{
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				return idxFacade.resolveSymbols(searchCriteria);
+			}
+		};
+		
+		return resolve(projectName, searchCriteria, resolver);
+	}
+
+
+	public IStrategoTerm resolveSymbol(IStrategoString projectName, final IStrategoTuple searchCriteria) throws Exception {
+		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
+			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				return idxFacade.resolveSymbol(searchCriteria);
+			}
+		};
+		
+		return resolve(projectName, searchCriteria, resolver);
+	}	
+
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Oct  6 14:26:46 2011	(r23431)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -5,7 +5,9 @@
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
@@ -222,7 +224,6 @@
 		);
 	}
 	
-	
 	/**
 	 * Indexes {@link PackageDeclaration}
 	 * 
@@ -295,19 +296,35 @@
 	
 	
 	// (namespace * idTolookupFor * type constructor)
-	public IStrategoTerm resolveSymbols(IStrategoTuple symbolLookupTerm) throws SpxSymbolTableException{
-		if (symbolLookupTerm.getSubtermCount() != 3)
-			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + symbolLookupTerm.getSubtermCount());
+	public IStrategoTerm resolveSymbols(IStrategoTuple searchCriteria) throws SpxSymbolTableException{
+		
+		if (searchCriteria.getSubtermCount() != 3)
+			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + searchCriteria.getSubtermCount());
 		
-		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)symbolLookupTerm.getSubterm(2));
+		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)searchCriteria.getSubterm(2));
 		return SpxSymbol.toTerms( this,
 				resolveSymbols( 
-						(IStrategoAppl)symbolLookupTerm.get(0),
-						symbolLookupTerm.get(1),
+						(IStrategoAppl)searchCriteria.get(0),
+						searchCriteria.get(1),
 						typeCtor)
 				); 
 	}
 	
+	public IStrategoTerm resolveSymbol(IStrategoTuple searchCriteria) throws SpxSymbolTableException {
+	
+		if (searchCriteria.getSubtermCount() != 3)
+			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + searchCriteria.getSubtermCount());
+		
+		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)searchCriteria.getSubterm(2));
+		
+		return SpxSymbol.toTerms( this,
+				resolveSymbols( 
+						(IStrategoAppl)searchCriteria.get(0),
+						searchCriteria.get(1),
+						typeCtor)
+				);
+	}
+	
 	/**
 	 * Resolves symbols from {@link SpxPrimarySymbolTable}.
 	 * 
@@ -327,6 +344,19 @@
 		Iterable<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(this, namespaceID, strip(symbolId), symbolType);
 		return resolvedSymbols;
 	}
+	
+	public Iterable<SpxSymbol> resolveSymbol(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType) throws SpxSymbolTableException {
+		List<SpxSymbol> resolvedSymbols= new ArrayList<SpxSymbol>();
+		
+		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
+		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		
+		SpxSymbol sym = symbolTable.resolveSymbol(this, namespaceID, strip(symbolId), symbolType);
+		if(sym != null)
+			resolvedSymbols.add(sym) ;
+		
+		return resolvedSymbols;
+	}
 
 
 	/**
@@ -961,4 +991,6 @@
 		}
 		
 	}
+
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Thu Oct  6 14:26:46 2011	(r23431)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Thu Oct  6 18:17:03 2011	(r23432)
@@ -294,7 +294,7 @@
 		IStrategoAppl typeAppl2 = termFactory().makeAppl(termFactory().makeConstructor("STRDef", 0)); // setting Type  
 		
 		IStrategoTerm symbolId3 = symbolId1 ; 
-	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP1M2.toTerm(_facade);	// defining Data
 		IStrategoAppl typeAppl3 = typeAppl1;  
 		
 		
@@ -307,36 +307,54 @@
 		_facade.indexSymbol(symbolDef2);
 		_facade.indexSymbol(symbolDef3);
 		
-		// Resolving Symbol 
-		Iterable<SpxSymbol> resolvedSymbols = _facade.resolveSymbols( 
+		// Resolving Symbols
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols( 
+				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
+				symbolId1,
+				_facade.getConstructor("SDFDef", 0) 
+				);
+		
+		assertEquals(2 , resolvedSymbols.size());
+		
+		//Resolving only one Symbol
+		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbol( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
 				_facade.getConstructor("SDFDef", 0) 
 				);
 		
-		int actualCount = 0 ;
-		for(SpxSymbol s : resolvedSymbols) { 
-			actualCount += 1;
-			assertEquals("SDFDef", s.type()); 
-			
-		}
-		assertEquals( 2 , actualCount);
+		assertEquals(1 , resolvedSymbols.size());
 		
-		resolvedSymbols = _facade.resolveSymbols( 
+		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
 				_facade.getConstructor("STRDef", 0) 
 				);
 		
-		actualCount = 0 ;
-		for(SpxSymbol s : resolvedSymbols) { 
-			actualCount += 1;
-			assertEquals("STRDef", s.type()); 
-			
-		}
+		assertEquals( 1 , resolvedSymbols.size());
+		
+	}
+	
+	public void testUnknownSymbolResolveShouldReturnNull() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+		
+		IStrategoAppl currentAppl = ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP1M2);
+		
+		IStrategoTerm symbolId1 = termFactory().makeTuple(currentAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "TestId") 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(currentAppl , symbolId1 , typeAppl1  , data1));
 		
-		assertEquals( 1 , actualCount);
+		IStrategoTerm symbolUnknownId = termFactory().makeTuple(currentAppl , termFactory().makeString("_")); // defining following composite ID :  (Global() , "TestId")
 		
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
+				symbolUnknownId,
+				_facade.getConstructor("SDFDef", 0) 
+				);
+		
+		assertEquals(0, resolvedSymbols.size());
 	}
 	
 	public void testResolveModuleSymbols() throws IOException, SpxSymbolTableException{
@@ -452,7 +470,7 @@
 		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
-				_facade.getConstructor("SDFDef", 0) 
+				_facade.getConstructor("ModuleDef", 0) 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -556,8 +574,6 @@
 		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
 		
 		
-		
-		
 		//Resolving Symbol in Package 1
 		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
@@ -603,6 +619,16 @@
 		// Symbol1  -> due to the import reference from P3 -> P 1
 		assertEquals(2, resolvedSymbols.size());
 		
+		//Resolving Symbol in Package 3. It will just resolve one symbol and exit search
+		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbol(
+				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
+				symbolId3, // loooking for 
+				_facade.getConstructor("ModuleDef", 0) // with type 
+				);
+		
+		assertEquals(1, resolvedSymbols.size());
+		actual = resolvedSymbols.get(0); // Resolved from the imported namespace - Module 1 of Package 3
+		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
 	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){

From M.A.Akhter at student.tudelft.nl  Fri Oct  7 00:19:29 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 06 Oct 2011 22:19:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23433 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang
Message-ID: <20111006221929.A7D68CC0BB@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Oct  6 22:19:29 2011
New Revision: 23433
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23433&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -41,7 +41,6 @@
 		add(new SPX_index_package_declaration(spxIndex));
 		add(new SPX_index_language_descriptor(spxIndex));
 		add(new SPX_index_module_definition(spxIndex));
-		add(new SPX_index_symbol_definition(spxIndex));
 		
 		add(new SPX_index_get_language_descriptor(spxIndex));
 		add(new SPX_index_get_package_declaration(spxIndex));
@@ -52,6 +51,12 @@
 		add(new SPX_index_get_package_declarations_of(spxIndex));
 		add(new SPX_index_import_references(spxIndex));
 		add(new SPX_index_get_imports(spxIndex));
+		
+		//Primitives related to symbol-table - i.e. symbol definition and resolving 
+		add(new SPX_index_symbol_definition(spxIndex));
+		add(new SPX_index_resolve_symbol(spxIndex));
+		add(new SPX_index_resolve_symbols(spxIndex));
+		
 	}
 
 	public String getOperatorRegistryName() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -8,6 +8,7 @@
 
 import jdbm.PrimaryMap;
 
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
@@ -33,6 +34,9 @@
 	
 	protected NamespaceUri enclosingNamespaceUri() { return _enclosingNamespaceId ; } 
 	
+	public abstract IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade);
+		
+	
 	public BaseNamespace(NamespaceUri currentNamespace , IStrategoConstructor type, ISpxPersistenceManager manager, NamespaceUri enclosingNamespace) {
 		assert currentNamespace!= null : "Current Namespace Identifier is null";
 		assert type!= null      : "Non-null Type is expected";

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -1,5 +1,6 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -13,6 +14,9 @@
 		super(id ,type, manager, null);
 	}
 	
+	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade){
+		return facade.getTermFactory().makeAppl(facade.getGlobalNamespaceTypeCon());
+	} 
 	
 	/**
 	 * Creates an instance of GlobalScope. 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -4,6 +4,7 @@
 import java.net.URI;
 import java.util.UUID;
 
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -32,6 +33,8 @@
 	NamespaceUri namespaceUri();
 	
 	boolean isInternalNamespace() ;
+	
+	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade);
 }
 
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -2,6 +2,7 @@
 
 import java.net.URI;
 
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -41,6 +42,12 @@
 	
 		return new ModuleNamespace(id, facade.getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.persistenceManager());
 	}
+
+	@Override
+	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade) {
+	
+		return ModuleDeclaration.toModuleQNameAppl(facade, this.namespaceUri().id());
+	}
 	
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -6,6 +6,7 @@
 import java.util.List;
 import java.util.Set;
 
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -304,4 +305,11 @@
 		return termFactory.makeList(subTerms);
 		
 	}
+
+	@Override
+	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade) {
+	
+		return PackageDeclaration.toPackageQNameAppl(facade, this.namespaceUri().id());
+	}
+	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -12,7 +12,7 @@
 import org.spoofax.interpreter.terms.IStrategoTuple;
 
 public class SPX_index_resolve_symbol extends AbstractPrimitive {
-	private static String NAME = "SPX_index_resolve_symbols";
+	private static String NAME = "SPX_index_resolve_symbol";
 	private static int PROJECT_NAME_INDEX = 0;
 	private static int SEARCH_CRITERIA_INDEX = 1;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -35,7 +35,7 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
 		boolean successStatement = false;
 	
-		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[SEARCH_CRITERIA_INDEX])) 
+		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermTuple(tvars[SEARCH_CRITERIA_INDEX])) 
 		{
 			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 			IStrategoTuple searchCriteria = (IStrategoTuple)tvars[SEARCH_CRITERIA_INDEX];

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -261,7 +261,7 @@
 	}
 	
 	
-	// SymbolDef : namespace * type * id * value -> Def  
+	// SymbolDef : namespace * id * type *  value -> Def  
 	public void indexSymbol(IStrategoAppl symbolDefinition) throws SpxSymbolTableException, IOException{	
 		final int NAMESPACE_ID_INDEX  = 0;
 		verifyConstructor(symbolDefinition.getConstructor(), getSymbolTableEntryDefCon(), "Illegal SymbolDefinition argument");
@@ -893,7 +893,7 @@
 	
 	public IStrategoConstructor getImportDeclCon() {return getConstructor("ImportDecl",2);}
 	
-	public IStrategoConstructor getGlobalNamespaceTypeCon() {return getConstructor("Global",0);}
+	public IStrategoConstructor getGlobalNamespaceTypeCon() {return getConstructor("Globals",0);}
 	
 	public IStrategoConstructor getPackageNamespaceTypeCon() {return getConstructor("Package",0);}
 	
@@ -920,7 +920,7 @@
 		ConstructorDef.newInstance("Package",1).index(_knownCons, _termFactory);
 		ConstructorDef.newInstance("QName",  1).index(_knownCons, _termFactory);
 				
-		ConstructorDef.newInstance("Global", 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Globals", 0).index(_knownCons, _termFactory);
 		ConstructorDef.newInstance("Package",0).index(_knownCons, _termFactory);
 		ConstructorDef.newInstance("Module", 0).index(_knownCons, _termFactory);
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Thu Oct  6 18:17:03 2011	(r23432)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Thu Oct  6 22:19:29 2011	(r23433)
@@ -202,30 +202,31 @@
 		return retSymbols;
 	}
 	
-	public IStrategoTerm toTerm (SpxSemanticIndexFacade facade){
+	public IStrategoTerm toTerm (SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
 		final ITermFactory termFactory = facade.getTermFactory();
 		
 		//Type 
 		IStrategoConstructor spxTypeCtor = this.typeCons(facade);
+		IStrategoAppl spxTypeCtorAppl = termFactory.makeAppl(spxTypeCtor); 
 		
 		//Data
 		IStrategoTerm deserializedDataToTerm = this.deserializedDataToTerm(termFactory, facade.getTermAttachmentSerializer());
 		
 		//Enclosing Namespace 
 		IStrategoConstructor qnameCons = facade.getQNameCon();
-		IStrategoAppl nsQNameAppl = termFactory.makeAppl(qnameCons, namespaceUri().id());
+		IStrategoAppl nsQNameAppl = this.namespaceUri().resolve(facade.persistenceManager().spxSymbolTable()).toTypedQualifiedName(facade);
 		
 		//ID/Key 
 		IStrategoTerm id = this.Id(termFactory); //TODO : It might require term conversion.
 
 		return (IStrategoTerm)termFactory.makeAppl( facade.getSymbolTableEntryDefCon(),
 				nsQNameAppl,  //ns qname 
-				spxTypeCtor,  // type
+				spxTypeCtorAppl,  // type
 				id,			  //id	
 				deserializedDataToTerm )	;
 	}
 	
-	static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Iterable<SpxSymbol> symbols){
+	static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Iterable<SpxSymbol> symbols) throws SpxSymbolTableException{
 		IStrategoList result = facade.getTermFactory().makeList();
 		
 		if( symbols != null)

From M.A.Akhter at student.tudelft.nl  Sat Oct  8 16:05:09 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 08 Oct 2011 14:05:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23434 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang spxlang/tests
Message-ID: <20111008140509.F10747F8008@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct  8 14:05:08 2011
New Revision: 23434
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23434&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LocalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java
      - copied, changed from r23432, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_symbol_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbol.java
      - copied, changed from r23433, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java
      - copied, changed from r23433, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISymbolResolver.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_symbol_definition.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -52,10 +52,12 @@
 		add(new SPX_index_import_references(spxIndex));
 		add(new SPX_index_get_imports(spxIndex));
 		
-		//Primitives related to symbol-table - i.e. symbol definition and resolving 
-		add(new SPX_index_symbol_definition(spxIndex));
-		add(new SPX_index_resolve_symbol(spxIndex));
-		add(new SPX_index_resolve_symbols(spxIndex));
+		//Primitives related to symbol-table - i.e. symbol definition and resolving
+		add(new SPX_symtab_new_scope(spxIndex));
+		add(new SPX_symtab_destroy_scope(spxIndex));
+		add(new SPX_symtab_define_symbol(spxIndex));
+		add(new SPX_symtab_resolve_symbol(spxIndex));
+		add(new SPX_symtab_resolve_symbols(spxIndex));
 		
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -37,7 +37,7 @@
 	public abstract IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade);
 		
 	
-	public BaseNamespace(NamespaceUri currentNamespace , IStrategoConstructor type, ISpxPersistenceManager manager, NamespaceUri enclosingNamespace) {
+	protected BaseNamespace(NamespaceUri currentNamespace , IStrategoConstructor type, ISpxPersistenceManager manager, NamespaceUri enclosingNamespace) {
 		assert currentNamespace!= null : "Current Namespace Identifier is null";
 		assert type!= null      : "Non-null Type is expected";
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -10,7 +10,7 @@
 	
 	private static final long serialVersionUID = -9194490383911401603L;
 	
-	public GlobalNamespace(NamespaceUri id , IStrategoConstructor type, ISpxPersistenceManager manager){
+	private GlobalNamespace(NamespaceUri id , IStrategoConstructor type, ISpxPersistenceManager manager){
 		super(id ,type, manager, null);
 	}
 	

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LocalNamespace.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LocalNamespace.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -0,0 +1,49 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.util.UUID;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public final class LocalNamespace extends BaseNamespace{
+	private static final long serialVersionUID = 5558956449728735306L;
+
+	
+	private LocalNamespace(NamespaceUri currentNamespace,IStrategoConstructor type, ISpxPersistenceManager manager,NamespaceUri enclosingNamespace) {
+		super(currentNamespace, type, manager, enclosingNamespace);
+	
+	}
+
+
+	
+	@Override
+	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade) {
+		return facade.getTermFactory().makeAppl(facade.getLocalNamespaceTypeCon());
+	}
+	
+	/**
+	 * Creates an instance of GlobalScope. Point of caution : GlobalScope is valid  
+	 * for the current project. 
+	 * 
+	 * @param facade
+	 * @return
+	 */
+	public static INamespace createInstance(SpxSemanticIndexFacade facade,INamespace enclosingNamespace) {
+		
+		ITermFactory termFactory = facade.getTermFactory();
+		
+		UUID uniqueId= UUID.randomUUID();
+		NamespaceUri localNamespaceUri = new NamespaceUri(termFactory.makeList(termFactory.makeString("anonymous_"+uniqueId.toString())) , uniqueId);
+
+		return new LocalNamespace(localNamespaceUri , facade.getLocalNamespaceTypeCon(), facade.persistenceManager(), enclosingNamespace.namespaceUri());
+	}
+
+
+	public static IStrategoList getLocalNamespaceId(IStrategoTerm localAnonymousId) {
+
+		return (IStrategoList) localAnonymousId;
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -24,7 +24,7 @@
 	 */
 	boolean isInternalNamespace = false;   
 	
-	public ModuleNamespace(NamespaceUri currentNamespaceUri, IStrategoConstructor namespaceType ,NamespaceUri enclosingNamespaceUri,  ISpxPersistenceManager manager) {
+	private ModuleNamespace(NamespaceUri currentNamespaceUri, IStrategoConstructor namespaceType ,NamespaceUri enclosingNamespaceUri,  ISpxPersistenceManager manager) {
 		super(currentNamespaceUri, namespaceType, manager, enclosingNamespaceUri);
 	}
 
@@ -39,13 +39,11 @@
 	 * @return
 	 */
 	public static INamespace createInstance(NamespaceUri id, NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade facade) {
-	
 		return new ModuleNamespace(id, facade.getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.persistenceManager());
 	}
 
 	@Override
 	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade) {
-	
 		return ModuleDeclaration.toModuleQNameAppl(facade, this.namespaceUri().id());
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -17,9 +17,18 @@
 	private final IStrategoList _id;
 	private final UUID _uId ;
 
-	public NamespaceUri(IStrategoList id){_id = id ; _uId = UUID.randomUUID();}
+	NamespaceUri(IStrategoList id, UUID uId){_id = id ; _uId = uId; }
 	
-	public IStrategoList id(){ return _id ; }
+	public NamespaceUri(IStrategoList id){ 
+		this(id, UUID.randomUUID()); 
+	}
+	
+	public IStrategoList id(){ 
+		if( _id == null) {
+			
+		}
+		return _id ; 
+	}
 	
 	public String uniqueID(){ return _uId.toString();};
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -20,9 +20,7 @@
  * @author Md. Adil Akhter
  */
 public final class PackageNamespace  extends BaseNamespace {
-
 	//TODO improvement : Implement a Query Pattern for symbol resolving . 
-	
 	private static final long serialVersionUID = 7324156752002137217L;
 	private static final String INTERNAL_NAMESPACENAME = "__internal";
 	
@@ -192,7 +190,6 @@
 		return namespaces;
 	}
 	
-	
 	/** 
 	 * Resolving a Symbol in the Namespaces specified in {@code resolvableUris} 
 	 * @param resolvableUris 
@@ -257,7 +254,6 @@
 	
 	}
 	
-	
 	/**
 	 * Creates a new Internal namespace for the current package namespace.
 	 * @param enclosingNamespaceId
@@ -276,7 +272,6 @@
 		return internalNamespace;
 	}
 
-
 	/**
 	 * @param enclosingNamespaceId
 	 * @param idxFacade
@@ -311,5 +306,4 @@
 	
 		return PackageDeclaration.toPackageQNameAppl(facade, this.namespaceUri().id());
 	}
-	
 }
\ No newline at end of file

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java (from r23432, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_symbol_definition.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_symbol_definition.java	Thu Oct  6 18:17:03 2011	(r23432, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -12,8 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class SPX_index_symbol_definition extends AbstractPrimitive {
-	private static String NAME = "SPX_index_symbol_definition";
+public class SPX_symtab_define_symbol extends AbstractPrimitive {
+	private static String NAME = "SPX_symtab_define_symbol";
 	
 	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int SYMBOL_DEF_INDEX = 1;
@@ -22,7 +22,7 @@
 	
 	private final SpxSemanticIndex index;
 	
-	public SPX_index_symbol_definition(SpxSemanticIndex index) {
+	public SPX_symtab_define_symbol(SpxSemanticIndex index) {
 		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -0,0 +1,53 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class SPX_symtab_destroy_scope extends AbstractPrimitive {
+	private static String NAME = "SPX_symtab_destroy_scope";
+	
+	private final static int PROJECT_NAME_INDEX = 0;
+	private final static int ENCLOSING_NAMESPACE_ID = 1;
+	
+	private final static int NO_ARGS = 2;
+	
+	private final SpxSemanticIndex symTable;
+	
+	public SPX_symtab_destroy_scope(SpxSemanticIndex symTable) {
+		super(NAME, 0, NO_ARGS);
+		this.symTable = symTable;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		boolean successStatement = false;
+		
+		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[ENCLOSING_NAMESPACE_ID])) {
+			
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl namespaceAppl   = (IStrategoAppl) tvars[ENCLOSING_NAMESPACE_ID];
+			
+			try{
+				IStrategoTerm term = symTable.destroyScope(projectName, namespaceAppl);
+				successStatement = true;
+				env.setCurrent(term);
+			}
+			catch(Exception ex){ 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+			}
+		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
+		return successStatement;	
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -0,0 +1,55 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class SPX_symtab_new_scope extends AbstractPrimitive {
+	private static String NAME = "SPX_symtab_new_scope";
+	
+	private final static int PROJECT_NAME_INDEX = 0;
+	private final static int ENCLOSING_NAMESPACE_ID = 1;
+	
+	private final static int NO_ARGS = 2;
+	
+	private final SpxSemanticIndex index;
+	
+	public SPX_symtab_new_scope(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		boolean successStatement = false;
+		
+		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[ENCLOSING_NAMESPACE_ID])) {
+			
+			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
+			IStrategoAppl namespaceAppl   = (IStrategoAppl) tvars[ENCLOSING_NAMESPACE_ID];
+			
+			try
+			{
+				IStrategoTerm term = index.insertNewScope(projectName, namespaceAppl);
+				successStatement = true;
+				env.setCurrent(term);
+			}
+			catch(Exception ex)
+			{ 
+				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
+			}
+		}
+		else
+			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
+		
+		return successStatement;	
+	}
+}

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbol.java (from r23433, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbol.java	Thu Oct  6 22:19:29 2011	(r23433, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbol.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -11,8 +11,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 
-public class SPX_index_resolve_symbol extends AbstractPrimitive {
-	private static String NAME = "SPX_index_resolve_symbol";
+public class SPX_symtab_resolve_symbol extends AbstractPrimitive {
+	private static String NAME = "SPX_symtab_resolve_symbol";
 	private static int PROJECT_NAME_INDEX = 0;
 	private static int SEARCH_CRITERIA_INDEX = 1;
 
@@ -20,7 +20,7 @@
 
 	private final SpxSemanticIndex index;
 
-	public SPX_index_resolve_symbol(SpxSemanticIndex index) {
+	public SPX_symtab_resolve_symbol(SpxSemanticIndex index) {
 		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}
@@ -35,7 +35,7 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
 		boolean successStatement = false;
 	
-		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[SEARCH_CRITERIA_INDEX])) 
+		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermTuple(tvars[SEARCH_CRITERIA_INDEX])) 
 		{
 			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
 			IStrategoTuple searchCriteria = (IStrategoTuple)tvars[SEARCH_CRITERIA_INDEX];

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java (from r23433, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_resolve_symbols.java	Thu Oct  6 22:19:29 2011	(r23433, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -11,8 +11,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 
-public class SPX_index_resolve_symbols extends AbstractPrimitive {
-	private static String NAME = "SPX_index_resolve_symbols";
+public class SPX_symtab_resolve_symbols extends AbstractPrimitive {
+	private static String NAME = "SPX_symtab_resolve_symbols";
 	private static int PROJECT_NAME_INDEX = 0;
 	private static int SEARCH_CRITERIA_INDEX = 1;
 
@@ -20,7 +20,7 @@
 
 	private final SpxSemanticIndex index;
 
-	public SPX_index_resolve_symbols(SpxSemanticIndex index) {
+	public SPX_symtab_resolve_symbols(SpxSemanticIndex index) {
 		super(NAME, 0, NO_ARGS);
 		this.index = index;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -71,12 +71,14 @@
 			return null;
 	}
 	
-	public void removeNamespace(IStrategoList id){
+	public INamespace removeNamespace(IStrategoList id){
 		INamespace resolveNamespace  = resolveNamespace(id) ;
 		
 		if(resolveNamespace != null){
 			this.namespaces.remove(resolveNamespace.namespaceUri());
 		}
+		
+		return resolveNamespace;
 	}
 	
 	public INamespace resolveNamespace(NamespaceUri id) {
@@ -107,9 +109,7 @@
 	 * @see java.lang.Object#toString()
 	 */
 	@Override
-	public String toString() {
-		return "SpxPrimarySymbolTable ( defined namespaces : " + namespaces.keySet() + ")";
-	}
+	public String toString() { return "SpxPrimarySymbolTable ( defined namespaces : " + namespaces.keySet() + ")"; 	}
 	
 	public Set<NamespaceUri> getAllNamespaces() { return namespaces.keySet() ; }
 
@@ -120,6 +120,12 @@
 		_activeNamespace.define(symTableEntry, facade.persistenceManager()); 
 	}
 	
+	private void ensureActiveNamespaceUnloaded(IStrategoList namespaceId){
+	
+		if(_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
+			_activeNamespace = null;
+		}
+	}
 	private void ensureActiveNamespaceLoaded(IStrategoList namespaceId) throws SpxSymbolTableException{
 		if(_activeNamespace== null ||!_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
 			//Keeping a transient reference to the current/active Namespace
@@ -131,10 +137,9 @@
 			if(_activeNamespace ==null){
 				throw new SpxSymbolTableException("Unknown namespaceId: "+ namespaceId+". Namespace can not be resolved from symbol-table") ;
 			}
-				
 		}
 	}
-	
+
 	public Iterable<SpxSymbol> resolveSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
 		_manager.logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
 		
@@ -159,7 +164,39 @@
 		return resolvedSymbol;
 	}
 	
-
+	
+	public INamespace newAnonymousNamespace(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList enclosingNamespaceId) throws SpxSymbolTableException{
+		_manager.logMessage(SRC, "newAnonymousNamespace | Inserting a Anonymous Namespace in following enclosing namespace : "  + enclosingNamespaceId);
+		ensureActiveNamespaceLoaded(enclosingNamespaceId);
+		
+		INamespace localNamespace = LocalNamespace.createInstance(spxSemanticIndexFacade, _activeNamespace); 
+		
+		_manager.logMessage(SRC, "newAnonymousNamespace | Folloiwng namesapce is created : "  + localNamespace);
+		
+		_activeNamespace = localNamespace;
+		
+		return _activeNamespace ;
+	}
+	
+	
+	/**
+	 * Destroying Namespace with following namespaceId
+	 * 
+	 * @param spxSemanticIndexFacade
+	 * @param enclosingNamespaceId
+	 * @return
+	 * @throws SpxSymbolTableException
+	 */
+	public INamespace destroyNamespace(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId) throws SpxSymbolTableException{
+		_manager.logMessage(SRC, "destroyNamespace | Removing the following namespace : "  + namespaceId);
+		
+		INamespace ns = this.removeNamespace(namespaceId);
+		
+		ensureActiveNamespaceUnloaded(namespaceId);
+		_manager.logMessage(SRC, "newAnonymousNamespace | Folloiwng namesapce is removed : "  + ns);
+		return ns;
+	} 
+	
 	public RecordListener<IStrategoList, PackageDeclaration> getPackageDeclarationRecordListener() {
 		return new RecordListener<IStrategoList, PackageDeclaration>(){
 
@@ -204,33 +241,4 @@
 			
 		};
 	}
-
-	
-}
-
-
-
-/*
- * Seperate chaning 
- * 
- * Indexed using ID . If multiple symbol is there will return first one 
- * matching type. 
- * 
- * */
-
-
-/*
- 
-
-- symbol FindSymbol( Scope, ID , CTOR )
-{
-    scope = symbolTable.getActiveScope( scope) 
-    //stop search as soon as found atleast one symbol 
-}
- 
-- symbols FindAllSymbols(Scope , ID , CTor) 
-{
-    scope = symbolTable.getActiveScope( scope) 
-    // search symbol in all the visible scope
 }
- */
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -47,7 +47,6 @@
 	 */
 	public boolean initialize(IStrategoTerm projectName,  ITermFactory termFactory, IOAgent agent)  throws Exception
 	{
-
 		try
 		{	
 			new SpxIndexManageCommand(){
@@ -94,23 +93,6 @@
 		return successStatement;
 	}
 	
-	private <T> IStrategoTerm resolve(IStrategoString projectName , IStrategoTerm key , ISymbolResolver<T> resolver) throws Exception
-	{
-		try {
-			return (IStrategoTerm) resolver.get(projectName, key);
-		}
-		catch(IllegalStateException e)
-		{
-			tryCleanupResources(projectName);
-			throw e;
-		}
-		catch(Exception ex) { throw ex ;}
-		catch(Error er)
-		{
-			tryCleanupResources(projectName);
-			throw er;
-		}
-	}
 	
 	public boolean indexImportReferences(IStrategoString projectName,
 			final IStrategoAppl importReferences) throws Exception {
@@ -203,93 +185,147 @@
 	}
 	
 	public IStrategoTerm getCompilationUnit(IStrategoString projectName, IStrategoString spxCompilationUnitPath) throws Exception{
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm key) throws Exception  {
-		
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.getCompilationUnit((IStrategoString)key);
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm term)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.getCompilationUnit((IStrategoString)term);
 			}
-		};
-		
-		return resolve(projectName, spxCompilationUnitPath, resolver);
+		}.executeWith(projectName, spxCompilationUnitPath);
 	}
 	
 	public IStrategoTerm getPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.getPackageDeclaration((IStrategoAppl)qname);
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm term)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.getPackageDeclaration((IStrategoAppl)term);
 			}
-		};
+		}.executeWith(projectName, packageTypedQname);
 		
-		return resolve(projectName, packageTypedQname, resolver);
 	}
 
 	public IStrategoTerm getPackageDeclarationsByUri(IStrategoString projectName, IStrategoString compilationUnitUri)  throws Exception{
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm uri) throws Exception  {
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm term)
+					throws Exception {	
+					
 					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-					return idxFacade.getPackageDeclarations((IStrategoString)uri);
-			} 
-		};
-		
-		return resolve(projectName, compilationUnitUri, resolver);
+					return idxFacade.getPackageDeclarations((IStrategoString) term);
+			}
+		}.executeWith(projectName, compilationUnitUri);
 	}
 
 	public IStrategoTerm getModuleDeclaration(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception{
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname)  throws Exception {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.getModuleDeclaration((IStrategoAppl)qname);
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.getModuleDeclaration((IStrategoAppl)qname);
 			}
-		};
-		
-		return resolve(projectName, moduleTypedQname, resolver);
+		}.executeWith(projectName, moduleTypedQname);
 	}
 	
 	public IStrategoTerm getImports(IStrategoString projectName, final IStrategoAppl namespaceID) throws Exception{
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname)  throws Exception {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.getImportReferences((IStrategoAppl)namespaceID);
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm namespaceID)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.getImportReferences((IStrategoAppl)namespaceID);
 			}
-		};
-		
-		return resolve(projectName, namespaceID, resolver);
+		}.executeWith(projectName, namespaceID);
 	}
 	
 	public IStrategoTerm getModuleDeclarations(IStrategoString projectName, IStrategoTerm retTerm) throws Exception {
-		
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName ,IStrategoTerm res) throws Exception  {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.getModuleDeclarationsOf(res);
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm res)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.getModuleDeclarationsOf(res);
 			}
-		};
-		
-		return resolve(projectName, retTerm, resolver);
+		}.executeWith(projectName, retTerm);
 	}
 	
+
+	public  IStrategoTerm insertNewScope(IStrategoString projectName, IStrategoAppl namespaceAppl) throws Exception{
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm ns)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.insertNewScope((IStrategoAppl)ns);
+			}
+		}.executeWith(projectName, namespaceAppl);
+	}	
+	
+	public IStrategoTerm destroyScope(IStrategoString projectName, IStrategoAppl namespaceAppl) throws Exception {
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm ns)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.destroyScope((IStrategoAppl)ns);
+			}
+		}.executeWith(projectName, namespaceAppl);
+	}
+
 	public IStrategoTerm getModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception {
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.getModuleDefinition((IStrategoAppl)qname);
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.getModuleDefinition((IStrategoAppl)qname);
 			}
-		};
-		
-		return resolve(projectName, moduleTypedQname, resolver);
+		}.executeWith(projectName, moduleTypedQname);
 	}
 	
 	public IStrategoTerm getLanguageDescriptor(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname)
+					throws Exception {	
+					
 					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
 					return idxFacade.getLanguageDescriptor((IStrategoAppl)qname);
-			} 
-		};
-		
-		return resolve(projectName, packageTypedQname, resolver);
+			}
+		}.executeWith(projectName, packageTypedQname);
+	}
+	
+	public IStrategoTerm resolveSymbols(IStrategoString projectName, final IStrategoTuple searchCriteria)  throws Exception{
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					return idxFacade.resolveSymbols((IStrategoTuple)qname);
+			}
+		}.executeWith(projectName, searchCriteria);
+	}
+
+	public IStrategoTerm resolveSymbol(IStrategoString projectName, final IStrategoTuple searchCriteria) throws Exception {
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname) throws Exception {	
+				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				return idxFacade.resolveSymbol((IStrategoTuple)qname);
+			}
+		}.executeWith(projectName, searchCriteria);
 	}
 	
 	public boolean removeCompilationUnit(IStrategoString projectName,IStrategoString spxCompilationUnitPath) throws IllegalStateException, IOException, SpxSymbolTableException{
@@ -448,34 +484,31 @@
 		
 		public abstract void index(IStrategoString projectName , IStrategoAppl appl) throws Exception ;
 	}
+	
+	private abstract class SpxResolver 
+	{	
+		public IStrategoTerm executeWith(IStrategoString projectName , IStrategoTerm term) throws Exception{
+			try {
+				return resolve(projectName, term);
+			}
+			catch(IllegalStateException e) {
+				tryCleanupResources(projectName);
+				throw e;
+			}
+			catch(Exception ex) { throw ex ;}
+			catch(Error er){
+				tryCleanupResources(projectName);
+				throw er;
+			}
+		}
+	
+		public abstract IStrategoTerm resolve(IStrategoString projectName , IStrategoTerm term) throws Exception ;
+	}
+	
 
 	private static abstract class SpxIndexManageCommand 
 	{
 		public abstract void executeCommnad(IStrategoTerm projectName , Object... objects) throws Exception;
 	}
 
-	public IStrategoTerm resolveSymbols(IStrategoString projectName, final IStrategoTuple searchCriteria)  throws Exception{
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.resolveSymbols(searchCriteria);
-			}
-		};
-		
-		return resolve(projectName, searchCriteria, resolver);
-	}
-
-
-	public IStrategoTerm resolveSymbol(IStrategoString projectName, final IStrategoTuple searchCriteria) throws Exception {
-		ISymbolResolver<IStrategoTerm> resolver = new ISymbolResolver<IStrategoTerm>() {
-			public IStrategoTerm get(IStrategoString projectName,IStrategoTerm qname) throws Exception  {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.resolveSymbol(searchCriteria);
-			}
-		};
-		
-		return resolve(projectName, searchCriteria, resolver);
-	}	
-
-	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -24,8 +24,7 @@
 import org.spoofax.terms.attachments.TermAttachmentStripper;
 
 public class SpxSemanticIndexFacade {
-	
-	//TODO :  refactor this class  to multiple adapters one for package, one for modules 
+	//TODO :  refactor this class  to multiple facades one for package, one for modules 
 	//TODO FIXME : combine symbol table and index
 	
 	private final ISpxPersistenceManager _persistenceManager;
@@ -47,8 +46,7 @@
 	 * @param agent {@link IOAgent}
 	 * @throws IOException throws {@link IOException} from underlying {@link SpxPersistenceManager}
 	 */
-	public SpxSemanticIndexFacade(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent) throws IOException
-	{
+	public SpxSemanticIndexFacade(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent) throws IOException {
 		_projectName = asJavaString(projectName);
 		
 		_termFactory = termFactory;
@@ -101,8 +99,7 @@
 	 * @param spxCompilationUnitPath Location to the CompilationUnit
 	 * @return {@link IStrategoTerm} 
 	 */
-	public IStrategoTerm getCompilationUnit(IStrategoString spxCompilationUnitPath)
-	{
+	public IStrategoTerm getCompilationUnit(IStrategoString spxCompilationUnitPath){
 		IStrategoAppl retTerm = null; 
 		URI resUri = toFileURI(spxCompilationUnitPath);
 		
@@ -126,8 +123,7 @@
 	 * @param spxCompilationUnitPath file path
 	 * @throws IOException
 	 */
-	public void removeCompilationUnit( IStrategoString spxCompilationUnitPath ) throws IOException
-	{
+	public void removeCompilationUnit( IStrategoString spxCompilationUnitPath ) throws IOException{
 		URI resUri = toFileURI(spxCompilationUnitPath);
 		
 		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
@@ -260,6 +256,27 @@
 		}
 	}
 	
+
+	public IStrategoTerm insertNewScope(IStrategoAppl namespaceAppl) throws SpxSymbolTableException {
+		
+		IStrategoList parentId = getNamespaceId(namespaceAppl);
+		
+		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		INamespace ns = symbolTable.newAnonymousNamespace(this, parentId);
+		
+		return this.getTermFactory().makeAppl(getLocalNamespaceTypeCon(), ns.namespaceUri().id());
+	}
+	
+	public IStrategoTerm destroyScope(IStrategoAppl namespaceAppl) throws SpxSymbolTableException {
+		
+		IStrategoList id = getNamespaceId(namespaceAppl);
+		
+		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		INamespace ns = symbolTable.destroyNamespace(this, id);
+		
+		return this.getTermFactory().makeAppl(getLocalNamespaceTypeCon(), ns.namespaceUri().id());
+	}
+
 	
 	// SymbolDef : namespace * id * type *  value -> Def  
 	public void indexSymbol(IStrategoAppl symbolDefinition) throws SpxSymbolTableException, IOException{	
@@ -318,7 +335,7 @@
 		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)searchCriteria.getSubterm(2));
 		
 		return SpxSymbol.toTerms( this,
-				resolveSymbols( 
+				resolveSymbol( 
 						(IStrategoAppl)searchCriteria.get(0),
 						searchCriteria.get(1),
 						typeCtor)
@@ -380,11 +397,20 @@
 	private IStrategoList getNamespaceId(IStrategoAppl namespaceTypedQname) throws SpxSymbolTableException {
 		IStrategoList namespaceId;
 		if (namespaceTypedQname.getConstructor() == getModuleQNameCon() || namespaceTypedQname.getConstructor() == getPackageQNameCon()) {
+			
 			namespaceId = IdentifiableConstruct.getID(this, (IStrategoAppl) namespaceTypedQname.getSubterm(0));
+			
 		} else if (namespaceTypedQname.getConstructor() == getGlobalNamespaceTypeCon()) {
+			
 			namespaceId = GlobalNamespace.getGlobalNamespaceId(this);
-		} else
+			
+		} else if ( namespaceTypedQname.getConstructor() == getLocalNamespaceTypeCon()){
+			
+			namespaceId = LocalNamespace.getLocalNamespaceId(namespaceTypedQname.getSubterm(0));
+		} 
+		else
 			throw new SpxSymbolTableException("Unknown namespace uri : " + namespaceTypedQname);
+		
 		return namespaceId;
 	}	
 	
@@ -579,8 +605,11 @@
 	}
 	
 	/**
+	 * Returns the {@link IStrategoTerm} representation of the list of {@link ModuleDeclaration}
+	 * of the specified File Uri or from the enclosed Package.
+	 *  
 	 * @param res
-	 * @return
+	 * @return {@link IStrategoTerm} 
 	 * @throws SpxSymbolTableException 
 	 */
 	public IStrategoTerm getModuleDeclarationsOf(IStrategoTerm res) throws SpxSymbolTableException {
@@ -901,12 +930,13 @@
 	
 	public IStrategoConstructor getSymbolTableEntryDefCon() {return getConstructor("SymbolDef",4);}
 	
+	public IStrategoConstructor getLocalNamespaceTypeCon() { return getConstructor("Locals",1);  }
 	
 	public IStrategoConstructor getConstructor(String symbolTypeCons, int arity) {
 		return _knownCons.get(ConstructorDef.newInstance(symbolTypeCons ,arity));
 	}
-	
-	private void initKnownConstructors() {
+
+	private void initKnownConstructors(){
 		ConstructorDef.newInstance("ModuleDef"  ,5).index(_knownCons, _termFactory);
 		ConstructorDef.newInstance("ModuleDecl" ,3).index(_knownCons, _termFactory);
 		ConstructorDef.newInstance("SymbolDef"  ,4).index(_knownCons, _termFactory);
@@ -916,17 +946,17 @@
 		
 		ConstructorDef.newInstance("LanguageDescriptor", 5).index(_knownCons, _termFactory);
 		
-		ConstructorDef.newInstance("Module", 1).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("Package",1).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("QName",  1).index(_knownCons, _termFactory);
-				
+		ConstructorDef.newInstance("Module" ,  1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Package",  1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("QName"  ,  1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Locals" ,  1).index(_knownCons, _termFactory);
+		
 		ConstructorDef.newInstance("Globals", 0).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("Package",0).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("Module", 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Package", 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Module" , 0).index(_knownCons, _termFactory);
 	}
 	
 	private final HashMap<ConstructorDef , IStrategoConstructor> _knownCons;
-	
 	private static class ConstructorDef
 	{
 		private String _name ;
@@ -938,14 +968,11 @@
 		
 		private IStrategoConstructor toStrategoConstructor(ITermFactory fac) {  return fac.makeConstructor(_name, _arity);}
 		
-		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac)
-		{
-			
+		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac){
 			return this.index(cons, this.toStrategoConstructor(fac));
 		}
 		
-		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , IStrategoConstructor ctor)
-		{
+		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , IStrategoConstructor ctor){
 			cons.put(this, ctor) ;
 			return ctor;
 		}
@@ -992,5 +1019,6 @@
 		
 	}
 
+
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Thu Oct  6 22:19:29 2011	(r23433)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Sat Oct  8 14:05:08 2011	(r23434)
@@ -544,18 +544,7 @@
 	
 	
 	public void testShouldNotFailIncaseOfCyclicImports() throws IOException, SpxSymbolTableException{
-		setupScopeTree();
-		
-		String packageName3 =  	"\"lang\", \"p3\"" ;
-		
-		packageDeclaration3   = indexTestPackageDecl(packageName3, absPathString2);
-		moduleDeclarationP3M1 = indexTestModuleDefs ( "p3m1" , packageName3 , absPathString2);
-		
-		//Setting up following import hierarchy : P1 -> P2 -> P3 -> p1
-		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId())));
-		this.packageDeclaration2.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration3.getId())));
-		this.packageDeclaration3.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId())));
-		
+		createExtendedScopeTree();
 		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
 		IStrategoAppl moduleQnameAppl3 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId());
 		
@@ -631,6 +620,36 @@
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
 	
+	
+	public void createExtendedScopeTree() throws IOException, SpxSymbolTableException{
+		// Setting up a big Scope-Tree
+		setupScopeTree();
+		
+		String packageName3 =  	"\"lang\", \"p3\"" ;
+		
+		packageDeclaration3   = indexTestPackageDecl(packageName3, absPathString2);
+		moduleDeclarationP3M1 = indexTestModuleDefs ( "p3m1" , packageName3 , absPathString2);
+		
+		//Setting up following import hierarchy : P1 -> P2 -> P3 -> p1
+		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId())));
+		this.packageDeclaration2.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration3.getId())));
+		this.packageDeclaration3.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId())));
+				
+		// ------ScopeTree setup is done :  P1 imports P2 import P3 imports P1--------
+		// 
+		//                         Global 
+		//                           |
+		//							 | 
+		//         p1--------->------p2------------>-------------P3
+		//          |                |                            |     
+		//  -----------------       --------------            -----------  
+		//   |      |       |       |            |            |         |  
+		//  p1M1   p1M2 _internal   _internal    p2M1       _internal   P3M1
+		//
+		//-----------------------------------------------------------------------------
+		
+	}
+	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
 		
 		IStrategoConstructor ctor = _facade.getSymbolTableEntryDefCon();

From L.C.L.Kats at tudelft.nl  Sat Oct  8 18:12:12 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 08 Oct 2011 16:12:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23435 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF
Message-ID: <20111008161212.DF8A9108C01E@mx3.tudelft.nl>

Author: LennartKats
Date: Sat Oct  8 16:12:10 2011
New Revision: 23435
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23435&sc=1

Log:
argh, don't depend on Eclipse 3.4

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Sat Oct  8 14:05:08 2011	(r23434)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Sat Oct  8 16:12:10 2011	(r23435)
@@ -25,7 +25,7 @@
  org.spoofax.terms,
  org.strategoxt.strj,
  org.strategoxt.imp.debug.core,
- org.eclipse.core.expressions;bundle-version="3.4.200"
+ org.eclipse.core.expressions
 Export-Package: org.strategoxt.imp.runtime,
  org.strategoxt.imp.runtime.dynamicloading,
  org.strategoxt.imp.runtime.parser,

From M.A.Akhter at student.tudelft.nl  Sat Oct  8 18:52:29 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 08 Oct 2011 16:52:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23436 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests
Message-ID: <20111008165229.646052B8007@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct  8 16:52:27 2011
New Revision: 23436
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23436&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Sat Oct  8 16:12:10 2011	(r23435)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Sat Oct  8 16:52:27 2011	(r23436)
@@ -542,9 +542,9 @@
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
 	
-	
-	public void testShouldNotFailIncaseOfCyclicImports() throws IOException, SpxSymbolTableException{
+	public void testShouldNotRetrunTransitiveImportSymbols() throws IOException, SpxSymbolTableException{
 		createExtendedScopeTree();
+		
 		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
 		IStrategoAppl moduleQnameAppl3 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId());
 		
@@ -563,7 +563,8 @@
 		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
 		
 		
-		//Resolving Symbol in Package 1
+		//Resolving Symbol in Package 1. It will not find any symbol defined in Package2. Hence, 
+		//it will return just the symbol from the Package1 .
 		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
 				symbolId3,	//looking for 
@@ -577,23 +578,67 @@
 		assertEquals("ModuleDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId3, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP1M1.getId() , actual.namespaceUri().id()) );
+	}
+	
+	public void testShouldRetrunSymbolsFromImportedScope() throws IOException, SpxSymbolTableException{
+		createExtendedScopeTree();
+		
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		IStrategoAppl moduleQnameAppl3 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId());
+		
+		// Defining Symbol1 in P1
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId1 , typeAppl1  , data1));
+		
+		// Defining Symbol3 in P3
+		IStrategoTerm symbolId3 = moduleQnameAppl1; 
+	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl3 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
+		
 		
-		//Resolving Symbol in Package 2
-		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		//Resolving Symbol in Package 2 . It should return symbol from imported package3
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()), // search origin
 				symbolId3, // loooking for 
 				_facade.getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
-		actual = resolvedSymbols.get(0); // Resolved from the imported namespace - Module 1 of Package 3
+		SpxSymbol actual  = resolvedSymbols.get(0); // Resolved from the imported namespace - Module 1 of Package 3
 		assertEquals("ModuleDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId3, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
+	}
+	
+	
+	public void testShouldNotFailIncaseOfCyclicImports() throws IOException, SpxSymbolTableException{
+		createExtendedScopeTree();
+		
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		IStrategoAppl moduleQnameAppl3 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId());
+		
+		// Defining Symbol1 in P1
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId1 , typeAppl1  , data1));
+		
+		// Defining Symbol3 in P3
+		IStrategoTerm symbolId3 = moduleQnameAppl1; 
+	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl3 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
 		
 		
 		//Resolving Symbol in Package 3
-		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
 				_facade.getConstructor("ModuleDef", 0) // with type 
@@ -616,7 +661,7 @@
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
-		actual = resolvedSymbols.get(0); // Resolved from the imported namespace - Module 1 of Package 3
+		SpxSymbol actual = resolvedSymbols.get(0); // Resolved from the imported namespace - Module 1 of Package 3
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
 	

From M.A.Akhter at student.tudelft.nl  Sat Oct  8 19:03:03 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 08 Oct 2011 17:03:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23437 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111008170303.A6F597F8008@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct  8 17:03:01 2011
New Revision: 23437
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23437&sc=1

Log:
+ tests for AnonymousScope Creation

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Sat Oct  8 16:52:27 2011	(r23436)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Sat Oct  8 17:03:01 2011	(r23437)
@@ -170,7 +170,8 @@
 		ensureActiveNamespaceLoaded(enclosingNamespaceId);
 		
 		INamespace localNamespace = LocalNamespace.createInstance(spxSemanticIndexFacade, _activeNamespace); 
-		
+		this.defineNamespace(localNamespace);
+	
 		_manager.logMessage(SRC, "newAnonymousNamespace | Folloiwng namesapce is created : "  + localNamespace);
 		
 		_activeNamespace = localNamespace;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Sat Oct  8 16:52:27 2011	(r23436)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Sat Oct  8 17:03:01 2011	(r23437)
@@ -21,6 +21,7 @@
 import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -665,6 +666,20 @@
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
 	
+	public void testAnonymousScopeCreation() throws IOException, SpxSymbolTableException {
+		createExtendedScopeTree();
+		
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+	
+		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(moduleQnameAppl1);
+		
+		assertEquals(_facade.getLocalNamespaceTypeCon(), nsAppl.getConstructor());
+		
+		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		
+		assertNotNull(ns);
+		
+	}
 	
 	public void createExtendedScopeTree() throws IOException, SpxSymbolTableException{
 		// Setting up a big Scope-Tree

From M.A.Akhter at student.tudelft.nl  Sat Oct  8 19:49:33 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 08 Oct 2011 17:49:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23438 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111008174933.9EBB4CC076@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct  8 17:49:33 2011
New Revision: 23438
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23438&sc=1

Log:
+ added more tests to verify the   behaviors of the anonymous scopes

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Sat Oct  8 17:03:01 2011	(r23437)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Sat Oct  8 17:49:33 2011	(r23438)
@@ -79,13 +79,17 @@
 	public static boolean verifyEquals( IStrategoTerm[] currentTerms, IStrategoTerm[] otherTerms) {
 		boolean retValue = false;
 		
-		if( currentTerms.length == otherTerms.length){
-			for ( int i = 0 ; i< currentTerms.length ; i++){
-				if( !verifyEquals(currentTerms[i], otherTerms[i])){
-					retValue = false;
-					break;
+		if(currentTerms == null && otherTerms == null) {retValue = true;} 
+		else if( currentTerms.length == otherTerms.length){
+			if(currentTerms.length ==0) {retValue = true;}
+			else {  
+				for ( int i = 0 ; i< currentTerms.length ; i++){
+					if( !verifyEquals(currentTerms[i], otherTerms[i])){
+						retValue = false;
+						break;
+					}
+					else { retValue = true;}
 				}
-				else { retValue = true;}
 			}
 		}
 		return retValue;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Sat Oct  8 17:03:01 2011	(r23437)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Sat Oct  8 17:49:33 2011	(r23438)
@@ -681,7 +681,87 @@
 		
 	}
 	
-	public void createExtendedScopeTree() throws IOException, SpxSymbolTableException{
+	public void testDestroyAnonymousScope() throws IOException, SpxSymbolTableException {
+		createExtendedScopeTree();
+		
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+	
+		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(moduleQnameAppl1);
+		
+		assertEquals(_facade.getLocalNamespaceTypeCon(), nsAppl.getConstructor());
+		
+		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		assertNotNull(ns);
+		
+		nsAppl = (IStrategoAppl)_facade.destroyScope(moduleQnameAppl1);
+		assertNotNull(ns);
+		
+		ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		assertNull(ns);
+	}
+	
+	public void testResolveInAnonymousScopeShouldReturnEnclosingSymbols() throws IOException, SpxSymbolTableException {
+		createExtendedScopeTree();
+		
+		//adding a symbol in moduleDeclarationP1M1
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId1 , typeAppl1  , data1));
+		
+		//Creating anonymous scope
+		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(moduleQnameAppl1);
+		assertEquals(_facade.getLocalNamespaceTypeCon(), nsAppl.getConstructor());
+		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		assertNotNull(ns);
+		
+		//Resolving Symbol from ModuleP1M1. It will not find any symbol defined in localScope. Hence, 
+		//it will return just the symbol from the ModuleP1M1 .
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				nsAppl, // search origin
+				symbolId1,	//looking for 
+				_facade.getConstructor("ModuleDef", 0) // with type 
+				);
+		
+		
+		assertEquals(1, resolvedSymbols.size());
+		
+		SpxSymbol actual = resolvedSymbols.get(0); // resolved from the current namespace - Module 1 of Package 1 
+		assertEquals("ModuleDef", actual.type());
+		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
+		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP1M1.getId() , actual.namespaceUri().id()) );
+	
+		//Resolve symbol defined in GlobalScope 
+		IStrategoAppl globalNamespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		
+		IStrategoTerm symbolId2 = termFactory().makeTuple( globalNamespaceAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "TestId") 
+	 	IStrategoTerm data2 = (IStrategoAppl)moduleDeclarationP1M2.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl2 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(globalNamespaceAppl , symbolId2 , typeAppl2  , data2));
+		
+		//Resolving Symbol defined in Global Namespace. 		
+		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+				nsAppl, // search origin
+				symbolId2,	//looking for 
+				_facade.getConstructor("SDFDef", 0) // with type 
+				);
+		
+		
+		assertEquals(1, resolvedSymbols.size());
+		
+		actual = resolvedSymbols.get(0); // resolved from the current namespace - Module 1 of Package 1 
+		assertEquals("SDFDef", actual.type());
+		assertTrue(SpxSymbol.verifyEquals(symbolId2, actual.Id(_facade.getTermFactory())));
+		assertTrue(SpxSymbol.verifyEquals( GlobalNamespace.getGlobalNamespaceId(_facade) , actual.namespaceUri().id()) );
+	
+	}
+	
+	
+	
+	private void createExtendedScopeTree() throws IOException, SpxSymbolTableException{
 		// Setting up a big Scope-Tree
 		setupScopeTree();
 		

From M.A.Akhter at student.tudelft.nl  Sat Oct  8 19:59:29 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 08 Oct 2011 17:59:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23439 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang
Message-ID: <20111008175929.72EDFCC073@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct  8 17:59:29 2011
New Revision: 23439
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23439&sc=1

Log:
- cleanup

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbol.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sat Oct  8 17:49:33 2011	(r23438)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sat Oct  8 17:59:29 2011	(r23439)
@@ -56,7 +56,6 @@
 		add(new SPX_symtab_new_scope(spxIndex));
 		add(new SPX_symtab_destroy_scope(spxIndex));
 		add(new SPX_symtab_define_symbol(spxIndex));
-		add(new SPX_symtab_resolve_symbol(spxIndex));
 		add(new SPX_symtab_resolve_symbols(spxIndex));
 		
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sat Oct  8 17:49:33 2011	(r23438)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Sat Oct  8 17:59:29 2011	(r23439)
@@ -318,16 +318,6 @@
 		}.executeWith(projectName, searchCriteria);
 	}
 
-	public IStrategoTerm resolveSymbol(IStrategoString projectName, final IStrategoTuple searchCriteria) throws Exception {
-		return new SpxResolver() {
-			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname) throws Exception {	
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-				return idxFacade.resolveSymbol((IStrategoTuple)qname);
-			}
-		}.executeWith(projectName, searchCriteria);
-	}
-	
 	public boolean removeCompilationUnit(IStrategoString projectName,IStrategoString spxCompilationUnitPath) throws IllegalStateException, IOException, SpxSymbolTableException{
 		
 		boolean successStatement = false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Oct  8 17:49:33 2011	(r23438)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Oct  8 17:59:29 2011	(r23439)
@@ -314,32 +314,29 @@
 	
 	// (namespace * idTolookupFor * type constructor)
 	public IStrategoTerm resolveSymbols(IStrategoTuple searchCriteria) throws SpxSymbolTableException{
-		
-		if (searchCriteria.getSubtermCount() != 3)
+		if (searchCriteria.getSubtermCount() != 4)
 			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + searchCriteria.getSubtermCount());
 		
+		String searchMode = asJavaString(searchCriteria.get(4)).trim();
 		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)searchCriteria.getSubterm(2));
-		return SpxSymbol.toTerms( this,
-				resolveSymbols( 
+		Iterable<SpxSymbol> spxSymbols = null; 
+		if(searchMode.equalsIgnoreCase(All))
+		{
+			spxSymbols = resolveSymbols( 
 						(IStrategoAppl)searchCriteria.get(0),
 						searchCriteria.get(1),
-						typeCtor)
-				); 
-	}
-	
-	public IStrategoTerm resolveSymbol(IStrategoTuple searchCriteria) throws SpxSymbolTableException {
-	
-		if (searchCriteria.getSubtermCount() != 3)
-			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + searchCriteria.getSubtermCount());
+						typeCtor);
+		}else if(searchMode.equalsIgnoreCase(CURRENT)){
+			spxSymbols = resolveSymbol( 
+							(IStrategoAppl)searchCriteria.get(0),
+							searchCriteria.get(1),
+							typeCtor);
+		}
+		else{
+			throw new IllegalArgumentException(" Illegal symbolLookupTerm searchMode Argument ; expected * or . . Found : " + searchMode);
+		}
 		
-		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)searchCriteria.getSubterm(2));
-		
-		return SpxSymbol.toTerms( this,
-				resolveSymbol( 
-						(IStrategoAppl)searchCriteria.get(0),
-						searchCriteria.get(1),
-						typeCtor)
-				);
+		return SpxSymbol.toTerms(this, spxSymbols);
 	}
 	
 	/**

From M.A.Akhter at student.tudelft.nl  Sat Oct  8 23:05:41 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 08 Oct 2011 21:05:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23440 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20111008210541.253CB108C019@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct  8 21:05:40 2011
New Revision: 23440
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23440&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Oct  8 17:59:29 2011	(r23439)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Oct  8 21:05:40 2011	(r23440)
@@ -317,7 +317,7 @@
 		if (searchCriteria.getSubtermCount() != 4)
 			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + searchCriteria.getSubtermCount());
 		
-		String searchMode = asJavaString(searchCriteria.get(4)).trim();
+		String searchMode = asJavaString(searchCriteria.get(3)).trim();
 		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)searchCriteria.getSubterm(2));
 		Iterable<SpxSymbol> spxSymbols = null; 
 		if(searchMode.equalsIgnoreCase(All))

From M.A.Akhter at student.tudelft.nl  Sun Oct  9 02:37:08 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 09 Oct 2011 00:37:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23441 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20111009003708.B7BEF2B8016@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Oct  9 00:37:06 2011
New Revision: 23441
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23441&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sat Oct  8 21:05:40 2011	(r23440)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Sun Oct  9 00:37:06 2011	(r23441)
@@ -318,24 +318,28 @@
 			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + searchCriteria.getSubtermCount());
 		
 		String searchMode = asJavaString(searchCriteria.get(3)).trim();
-		IStrategoConstructor typeCtor = verifyKnownContructorExists((IStrategoAppl)searchCriteria.getSubterm(2));
-		Iterable<SpxSymbol> spxSymbols = null; 
-		if(searchMode.equalsIgnoreCase(All))
-		{
-			spxSymbols = resolveSymbols( 
-						(IStrategoAppl)searchCriteria.get(0),
-						searchCriteria.get(1),
-						typeCtor);
-		}else if(searchMode.equalsIgnoreCase(CURRENT)){
-			spxSymbols = resolveSymbol( 
+		IStrategoAppl typeAppl =  (IStrategoAppl)searchCriteria.getSubterm(2);
+		IStrategoConstructor typeCtor = getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
+		
+		Iterable<SpxSymbol> spxSymbols = new ArrayList<SpxSymbol>();
+		
+		if (typeCtor != null) {
+			if(searchMode.equalsIgnoreCase(All))
+			{
+				spxSymbols = resolveSymbols( 
 							(IStrategoAppl)searchCriteria.get(0),
 							searchCriteria.get(1),
 							typeCtor);
+			}else if(searchMode.equalsIgnoreCase(CURRENT)){
+				spxSymbols = resolveSymbol( 
+								(IStrategoAppl)searchCriteria.get(0),
+								searchCriteria.get(1),
+								typeCtor);
+			}
+			else{
+				throw new IllegalArgumentException(" Illegal symbolLookupTerm searchMode Argument ; expected * or . . Found : " + searchMode);
+			}
 		}
-		else{
-			throw new IllegalArgumentException(" Illegal symbolLookupTerm searchMode Argument ; expected * or . . Found : " + searchMode);
-		}
-		
 		return SpxSymbol.toTerms(this, spxSymbols);
 	}
 	

From v.vergu at gmail.com  Tue Oct 11 14:26:40 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Tue, 11 Oct 2011 12:26:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23442 -
	spoofax-imp/trunk/org.strategoxt.imp.testing
Message-ID: <20111011122640.17F2D7F8011@mx1.tudelft.nl>

Author: VladVergu
Date: Tue Oct 11 12:26:39 2011
New Revision: 23442
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23442&sc=1

Log:
Preference page as child of org.strategoxt.imp.runtime.SpoofaxPreferencePage

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml	Sun Oct  9 00:37:06 2011	(r23441)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml	Tue Oct 11 12:26:39 2011	(r23442)
@@ -14,6 +14,7 @@
        <extension
              point="org.eclipse.ui.preferencePages">
           <page
+                category="org.strategoxt.imp.runtime.SpoofaxPreferencePage"
                 class="org.strategoxt.imp.testing.preferences.SpoofaxTestingPreferencePage"
                 id="org.strategoxt.imp.testing.preferences.SpoofaxTestingPreferencePage"
                 name="Spoofax Testing">

From L.C.L.Kats at tudelft.nl  Tue Oct 11 15:15:00 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 11 Oct 2011 13:15:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23443 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime
Message-ID: <20111011131500.887D4108C01D@mx3.tudelft.nl>

Author: LennartKats
Date: Tue Oct 11 13:15:00 2011
New Revision: 23443
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23443&sc=1

Log:
Spoofax Preferences should be called Spoofax (Spoofax/443)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Tue Oct 11 12:26:39 2011	(r23442)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Tue Oct 11 13:15:00 2011	(r23443)
@@ -335,7 +335,7 @@
       <page
             class="org.strategoxt.imp.runtime.SpoofaxPreferencePage"
             id="org.strategoxt.imp.runtime.SpoofaxPreferencePage"
-            name="Spoofax Preferences">
+            name="Spoofax">
       </page>
    </extension>
    <extension

From tobivollebregt at gmail.com  Tue Oct 11 18:28:05 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 11 Oct 2011 16:28:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23444 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf: test trans
Message-ID: <20111011162805.F1D772B8012@mx2.tudelft.nl>

Author: tvo
Date: Tue Oct 11 16:28:04 2011
New Revision: 23444
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23444&sc=1

Log:
Spoofax/444: warn about Nil cons in SDF editor

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf	Tue Oct 11 13:15:00 2011	(r23443)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf	Tue Oct 11 16:28:04 2011	(r23444)
@@ -24,6 +24,8 @@
     
     %%[A][A-Z]* -> Bar {cons("X")}
     
+    "nil" -> Nil {cons("Nil")}
+    
     Start Start -> Z
     %%X Y Z -> Bar
   syntax

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Tue Oct 11 13:15:00 2011	(r23443)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Tue Oct 11 16:28:04 2011	(r23444)
@@ -98,7 +98,11 @@
     t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Single argument expected for {cons("Name")} attribute])
     where
       not(<length> a* => 1)
-  
+
+  context-free-syntax-warning:
+    term(default(appl(unquoted("cons"), [t @ fun(quoted("\"Nil\""))])))
+      -> (t, $[In Stratego, Nil is the empty list, and Nil() does not match this constructor (use a different constructor)])
+
   lexical-syntax-warning:
     t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Constructor only expected in context-free syntax])
 

From tobivollebregt at gmail.com  Wed Oct 12 12:21:13 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 12 Oct 2011 10:21:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23445 - in
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang:
	. compat/override
Message-ID: <20111012102113.E1C6F2B8018@mx2.tudelft.nl>

Author: tvo
Date: Wed Oct 12 10:21:13 2011
New Revision: 23445
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23445&sc=1

Log:
Faster flatten-list

Added:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_flatten_list_0_0.java
Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str

Added: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_flatten_list_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_flatten_list_0_0.java	Wed Oct 12 10:21:13 2011	(r23445)
@@ -0,0 +1,70 @@
+package org.strategoxt.lang;
+
+import java.util.ArrayList;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/*
+ * Optimization of `flatten-list'.
+ *
+ * If b is the size of each list and d the depth of the tree, then:
+ * The runtime complexity of this strategy is : O(b^d)
+ * The runtime complexity of flatten-list  is : O(d*b^d)
+ *
+ * The constant factor allowed by the big-O notation should be similar for
+ * both implementations (examine code) so it is expected that this strategy
+ * is typically d times faster than flatten-list.
+ *
+ * (In practice this seems to come down to a factor 3 speedup.) 
+ *
+ * @author Tobi Vollebregt
+ */
+public class SRTS_EXT_flatten_list_0_0 extends Strategy {
+
+	public static SRTS_EXT_flatten_list_0_0 instance = new SRTS_EXT_flatten_list_0_0();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+
+		ArrayList<IStrategoTerm> newList = new ArrayList<IStrategoTerm>();
+		ArrayList<IStrategoTerm> stack = new ArrayList<IStrategoTerm>();
+
+		stack.add(current);
+
+		while (!stack.isEmpty()) {
+			current = stack.remove(stack.size() - 1);
+
+			if (current.getTermType() == IStrategoTerm.LIST) {
+				IStrategoList list = (IStrategoList)current;
+				final int oldsize = stack.size();
+				while (!list.isEmpty()) {
+					stack.add(list.head());
+					list = list.tail();
+				}
+				reverse(stack, oldsize, stack.size());
+			}
+			else {
+				newList.add(current);
+			}
+		}
+
+		current = context.getFactory().makeList(newList);
+		return current;
+	}
+
+	private void reverse(ArrayList<IStrategoTerm> array, int start, int end) {
+		final int length = (end - start) / 2;
+		for (int i = 0; i < length; ++i) {
+			swap(array, start + i, end - 1 - i);
+		}
+	}
+
+	private void swap(ArrayList<IStrategoTerm> array, int i, int j) {
+		final IStrategoTerm tmp = array.get(i);
+		array.set(i, array.get(j));
+		array.set(j, tmp);
+	}
+}

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	Tue Oct 11 16:28:04 2011	(r23444)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	Wed Oct 12 10:21:13 2011	(r23445)
@@ -57,7 +57,10 @@
   
   override at-end(s) =
     SRTS-EXT-at-end(s)
-  
+
+  override flatten-list =
+    SRTS-EXT-flatten-list
+
   external SRTS-EXT-string-replace(|s1, s2)
 
   external SRTS-EXT-crush(nul, sum, s|)
@@ -67,3 +70,5 @@
   external SRTS-EXT-at-end(s|)
 
   external SRTS-EXT-repeat(s|)
+
+  external SRTS-EXT-flatten-list(|)

From seba at informatik.uni-marburg.de  Wed Oct 12 18:13:51 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Wed, 12 Oct 2011 16:13:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23446 - in
	sugarj/trunk: case-studies/pair compiler/org/sugarj/driver
	compiler/org/sugarj/driver/caching
Message-ID: <20111012161351.A6195CC108@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Wed Oct 12 16:13:50 2011
New Revision: 23446
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23446&sc=1

Log:
eliminated a caching bug

Modified:
   sugarj/trunk/case-studies/pair/Sugar.sugj
   sugarj/trunk/case-studies/pair/Test.sugj
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/caching/ModuleKey.java
   sugarj/trunk/compiler/org/sugarj/driver/caching/ModuleKeyCache.java

Modified: sugarj/trunk/case-studies/pair/Sugar.sugj
==============================================================================
--- sugarj/trunk/case-studies/pair/Sugar.sugj	Wed Oct 12 10:21:13 2011	(r23445)
+++ sugarj/trunk/case-studies/pair/Sugar.sugj	Wed Oct 12 16:13:50 2011	(r23446)
@@ -18,4 +18,8 @@
 
     desugar-pair-expr : 
       PExpr(e1, e2) -> |[ pair.Pair.create(~e1, ~e2) ]|
-}
\ No newline at end of file
+}
+
+
+
+

Modified: sugarj/trunk/case-studies/pair/Test.sugj
==============================================================================
--- sugarj/trunk/case-studies/pair/Test.sugj	Wed Oct 12 10:21:13 2011	(r23445)
+++ sugarj/trunk/case-studies/pair/Test.sugj	Wed Oct 12 16:13:50 2011	(r23446)
@@ -1,8 +1,9 @@
 package pair;
 
-import pair.Pair;
 import pair.Sugar;
 
 public class Test {
   private (String, Integer) p = ("12", 34);
-}
\ No newline at end of file
+}
+
+

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Wed Oct 12 10:21:13 2011	(r23445)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Wed Oct 12 16:13:50 2011	(r23446)
@@ -135,7 +135,7 @@
       
       FileCommands.createDir(environment.getBin());
       
-      initializeCaches(environment);
+      initializeCaches(environment, false);
     } catch (IOException e) {
       throw new RuntimeException("error while initializing driver", e);
     }
@@ -852,7 +852,9 @@
             log.log("Need to compile the imported module first ; processing it now.");
             
             try {
+              storeCaches(environment);
               Result importResult = compile(sourceFile, monitor);
+              initializeCaches(environment, true);
               if (importResult.hasFailed())
                 setErrorMessage(toplevelDecl, "problems while compiling " + importModule);
             } catch (Exception e) {
@@ -1267,7 +1269,7 @@
   
   
   @SuppressWarnings("unchecked")
-  private void initializeCaches(Environment environment) throws IOException {
+  private void initializeCaches(Environment environment, boolean force) throws IOException {
     if (environment.getCacheDir() == null)
       return;
     
@@ -1285,7 +1287,7 @@
     Path sdfCachePath = environment.new RelativePathCache("sdfCache");
     Path strCachePath = environment.new RelativePathCache("strCache");
     
-    if (sdfCache == null)
+    if (sdfCache == null || force)
       try {
         // log.log("load sdf cache from " + sdfCachePath);
           sdfCache = reallocate(
@@ -1302,7 +1304,7 @@
     else if (sdfCache == null)
       sdfCache = new ModuleKeyCache<Path>();
     
-    if (strCache == null)
+    if (strCache == null || force)
       try {
         // log.log("load str cache from " + strCachePath);
         strCache = reallocate(

Modified: sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Wed Oct 12 10:21:13 2011	(r23445)
+++ sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Wed Oct 12 16:13:50 2011	(r23446)
@@ -232,7 +232,7 @@
 
       LinkedList<Path> depList = new LinkedList<Path>();
       for (Path file : dependentFiles)
-        if (SDF_FILE_PATTERN.matcher(file.getAbsolutePath()).matches())
+        if (SDF_FILE_PATTERN.matcher(file.getAbsolutePath()).matches() && FileCommands.exists(file))
           depList.add(file);
       
       return new ModuleKey(depList, term);

Modified: sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Wed Oct 12 10:21:13 2011	(r23445)
+++ sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Wed Oct 12 16:13:50 2011	(r23446)
@@ -176,7 +176,7 @@
 
       LinkedList<Path> depList = new LinkedList<Path>();
       for (Path file : dependentFiles)
-        if (STR_FILE_PATTERN.matcher(file.getAbsolutePath()).matches())
+        if (STR_FILE_PATTERN.matcher(file.getAbsolutePath()).matches() && FileCommands.exists(file))
           depList.add(file);
       
       return new ModuleKey(depList, aterm);

Modified: sugarj/trunk/compiler/org/sugarj/driver/caching/ModuleKey.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/caching/ModuleKey.java	Wed Oct 12 10:21:13 2011	(r23445)
+++ sugarj/trunk/compiler/org/sugarj/driver/caching/ModuleKey.java	Wed Oct 12 16:13:50 2011	(r23446)
@@ -55,8 +55,11 @@
       return false;
     
     ModuleKey k = (ModuleKey) o;
-    return body.equals(k.body) && 
-      (checkGet ? imports.equals(k.imports) : imports.keySet().equals(k.imports.keySet()));
+    
+    if (!body.equals(k.body))
+      return false;
+    
+    return (checkGet ? imports.equals(k.imports) : imports.keySet().equals(k.imports.keySet()));
   }
   
   public int hashCode() {

Modified: sugarj/trunk/compiler/org/sugarj/driver/caching/ModuleKeyCache.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/caching/ModuleKeyCache.java	Wed Oct 12 10:21:13 2011	(r23445)
+++ sugarj/trunk/compiler/org/sugarj/driver/caching/ModuleKeyCache.java	Wed Oct 12 16:13:50 2011	(r23446)
@@ -13,6 +13,7 @@
     k.doPut();
     super.remove(k);
     super.put(k, v);
+    k.doGet();
   }
 
   public V putGet(ModuleKey k, V v) {

From M.A.Akhter at student.tudelft.nl  Wed Oct 12 20:48:47 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 12 Oct 2011 18:48:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23447 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111012184847.2A61F2B8024@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Oct 12 18:48:45 2011
New Revision: 23447
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23447&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolKey.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -2,8 +2,10 @@
 
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 import jdbm.PrimaryMap;
@@ -16,26 +18,23 @@
  * BaseScope  is an abstract base class that implements Scope Interface
  * 
  * @author Md. Adil Akhter
- * Created On : Aug 27, 2011
  */
 public abstract class BaseNamespace implements INamespace {
 	
 	private static final long serialVersionUID = 2052337390283813190L;
 	
-	protected final IStrategoConstructor type;
 	protected final String  src;
-
-	private  final NamespaceUri _currentNamespaceId; 
-	private final NamespaceUri _enclosingNamespaceId;
 	
-	protected final MultiValuePersistentTable _symbols;
+	private final NamespaceUri _currentNamespaceId; 
+	private final NamespaceUri _enclosingNamespaceId;
+	protected final IStrategoConstructor type;
+	protected HashMap<SpxSymbolKey, List<SpxSymbol>> symbols;
 
 	public NamespaceUri namespaceUri() {return _currentNamespaceId;}
 	
 	protected NamespaceUri enclosingNamespaceUri() { return _enclosingNamespaceId ; } 
 	
 	public abstract IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade);
-		
 	
 	protected BaseNamespace(NamespaceUri currentNamespace , IStrategoConstructor type, ISpxPersistenceManager manager, NamespaceUri enclosingNamespace) {
 		assert currentNamespace!= null : "Current Namespace Identifier is null";
@@ -48,7 +47,7 @@
 		
 		src = (_enclosingNamespaceId!= null) ? type.getName() + _currentNamespaceId.id() :  type.getName()   ; 
 			
-		_symbols = new MultiValuePersistentTable();
+		symbols = new HashMap<SpxSymbolKey, List<SpxSymbol>>();
 	}
 
 	public void define(SpxSymbolTableEntry entry, ILogger logger){
@@ -57,28 +56,57 @@
 		
 		logger.logMessage(src, "define | Defining Symbol "+ entry.value + " in "+ _currentNamespaceId);
 		
-		_symbols.define(entry);
+		defineSymbol(entry);
 	}
-
-	/* 
-	 * Returns the enclosing scope of the current scope.
-	 * */
-	public INamespace getEnclosingNamespace(INamespaceResolver rs) throws SpxSymbolTableException { return (_enclosingNamespaceId != null) ? _enclosingNamespaceId.resolve(rs) : null; }
 	
-	public INamespace getCurrentNamespace(INamespaceResolver rs) throws SpxSymbolTableException{ return _currentNamespaceId.resolve(rs); }
+	/**
+	 * Defines symbol in this namespace. Define does not replace  
+	 * old symbol mapped using the key with the new one. It just adds the 
+	 * new symbol at the end of the multivaluelist. 
+	 * 
+	 * @param key - The key that the symbol will be mapped to .
+	 * @param symbol - The symbol to store. 
+	 */
+	private void defineSymbol(SpxSymbolTableEntry entry){
+		SpxSymbolKey key = entry.key;
+		
+		if ( symbols.containsKey(key)){
+			symbols.get(key).add(entry.value);
+		}else{
+			List<SpxSymbol> values = new ArrayList<SpxSymbol>(); 
+			values.add(entry.value);
+			symbols.put( key , values );
+		}
+	}
+	
+	protected static List<SpxSymbol> lookupSymbols(Map<SpxSymbolKey, List<SpxSymbol>> members, IStrategoTerm id){
+		
+		SpxSymbolKey key = new SpxSymbolKey(id);
+		List<SpxSymbol> resolvedSymbols = members.get(key);
+		
+		return (resolvedSymbols == null) ? new ArrayList<SpxSymbol>() : resolvedSymbols ; 
+	}
+	
+	protected  static SpxSymbol lookupSymbol(Map<SpxSymbolKey, List<SpxSymbol>> members,  IStrategoTerm id , IStrategoTerm type){
+		SpxSymbolKey key = new SpxSymbolKey(id);
+		List<SpxSymbol> resolvedSymbols = members.get(key);
+		
+		if(resolvedSymbols != null && resolvedSymbols.size() > 0 ){
+			List<SpxSymbol> expectedTypedSymbol  = SpxSymbol.filterByType((IStrategoConstructor)type, resolvedSymbols);
+			if(expectedTypedSymbol.size() >0 )
+				return expectedTypedSymbol.get(expectedTypedSymbol.size()-1);
+		}
+		return null;
+	}
 	
 	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException{
 		facade.persistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		assert type instanceof IStrategoConstructor : "Type is expected to be IStrategoConstructor" ;
 			
-		List<SpxSymbol> lookupResult = getMembers().resolve(id);
-		if( lookupResult!=null){
-			List<SpxSymbol> expectedTypedSymbol = SpxSymbol.filterByType((IStrategoConstructor)type, lookupResult);
-		
-			if(expectedTypedSymbol.size() >0 )
-				return lookupResult.get(0) ;
-		}
+		SpxSymbol result = lookupSymbol(getMembers(), id , type);
+		if(result!=null)
+			return result;
 	
 		// Symbols could not be found in the current scope
 		// Hence, searching any enclosing(parent) scope if it is not 
@@ -100,7 +128,7 @@
 		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
-		List<SpxSymbol> lookupResult = getMembers().resolve(id);
+		List<SpxSymbol> lookupResult = lookupSymbols(getMembers() , id);
 		retResult.addAll(lookupResult);
 		
 		INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
@@ -132,15 +160,24 @@
 		return resolveAll(searchingFor, type,  this, spxFacade);
 	}
 	
-	
-	public IStrategoConstructor type() {
-		return type;
-	}
+	public IStrategoConstructor type() { return type; }
+
+	public Map<SpxSymbolKey, List<SpxSymbol>> getMembers(){return this.symbols;}
 
-	public MultiValuePersistentTable getMembers(){return _symbols;}
+	public void clear() { if(this.symbols != null) this.symbols.clear();}
 
+	/* 
+	 * Returns the enclosing scope of the current scope.
+	 * */
+	public INamespace getEnclosingNamespace(INamespaceResolver rs) throws SpxSymbolTableException { return (_enclosingNamespaceId != null) ? _enclosingNamespaceId.resolve(rs) : null; }
+	
+	public INamespace getCurrentNamespace(INamespaceResolver rs) throws SpxSymbolTableException{ return _currentNamespaceId.resolve(rs); }
+	
+	
+	
 	public boolean isInternalNamespace() { return false;  }
 
+	
 	protected boolean shouldSearchInInternalNamespace( INamespace searchedBy) {
 		// If searchedBy Namespace is enclosingNamespace of CurrentNamespace 
 		// Search for internal symbol scopes as well
@@ -164,6 +201,6 @@
 	 */
 	@Override
 	public String toString() {
-		return "BaseNamespace [type=" + type + ", _currentNamespaceId=" + _currentNamespaceId.id() + "]";
+		return "namespace : "+ src + "";
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -27,17 +27,15 @@
 	public static INamespace createInstance(SpxSemanticIndexFacade facade){
 		SpxPrimarySymbolTable  symbol_table = facade.persistenceManager().spxSymbolTable();
 		IStrategoList spoofaxNamespaceUri = getGlobalNamespaceId(facade);
-		
-		NamespaceUri uri; 
-		if ( symbol_table == null )
-			uri  = new NamespaceUri(spoofaxNamespaceUri);
-		else
-			uri =  symbol_table.toNamespaceUri(spoofaxNamespaceUri); 
-
-		return new GlobalNamespace(uri, 
-				facade.getGlobalNamespaceTypeCon(), 
-				facade.persistenceManager()
-		);
+		INamespace gns = symbol_table.resolveNamespace(spoofaxNamespaceUri); 
+		if(gns != null)
+			return gns;
+		else{
+			return new GlobalNamespace(symbol_table.toNamespaceUri(spoofaxNamespaceUri), 
+					facade.getGlobalNamespaceTypeCon(), 
+					facade.persistenceManager()
+			);
+		}
 
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -2,6 +2,8 @@
 
 import java.io.Serializable;
 import java.net.URI;
+import java.util.List;
+import java.util.Map;
 import java.util.UUID;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -28,13 +30,15 @@
 	
 	IStrategoConstructor type();
 	
-	MultiValuePersistentTable getMembers();
+	Map<SpxSymbolKey, List<SpxSymbol>> getMembers();
 	
 	NamespaceUri namespaceUri();
 	
 	boolean isInternalNamespace() ;
 	
 	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade);
+
+	void clear();	
 }
 
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -1,5 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.util.Set;
+
 import org.spoofax.interpreter.terms.IStrategoList;
 
 public interface INamespaceResolver {
@@ -9,4 +11,6 @@
 	public INamespace resolveNamespace(NamespaceUri nsId);
 	
 	public boolean containsNamespace(IStrategoList id) ;
+	
+	public Set<NamespaceUri> getAllNamespaces(); 
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -31,7 +31,7 @@
 	
 	public String getProjectName();
 	
-	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade);
+	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade) throws Exception;
 }
 
 interface ILogger{ 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -39,7 +39,12 @@
 	 * @return
 	 */
 	public static INamespace createInstance(NamespaceUri id, NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade facade) {
-		return new ModuleNamespace(id, facade.getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.persistenceManager());
+		SpxPrimarySymbolTable  symbol_table = facade.persistenceManager().spxSymbolTable();
+		INamespace ns = symbol_table.resolveNamespace(id); 
+		if(ns != null)
+			return ns;
+		else
+			return new ModuleNamespace(id, facade.getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.persistenceManager());
 	}
 
 	@Override

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -1,11 +1,14 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.UUID;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -23,7 +26,7 @@
  * @author Md. Adil Akhter
  * Created On : Aug 22, 2011
  */
-class MultiValuePersistentTable implements Serializable{
+public class MultiValuePersistentTable implements Serializable{
 
 	private static final long serialVersionUID = -473055635199728599L;
 	private final HashMap<SpxSymbolKey, List<SpxSymbol>> symbols;
@@ -37,7 +40,7 @@
 	 * 
 	 * @throws IOException 
 	 */
-	public void clear() throws IOException{ symbols.clear(); }
+	public void clear(){ symbols.clear(); }
 
 	
 	/**
@@ -67,4 +70,15 @@
 		
 		return (resolvedSymbols == null) ? new ArrayList<SpxSymbol>() : resolvedSymbols ; 
 	}
+	
+	public void logEntries(BufferedWriter logger) throws IOException{
+		for( SpxSymbolKey k : symbols.keySet()) {
+			logger.write("\t"+k.toString()  + " :  \n");
+			
+			for( SpxSymbol s : symbols.get(k) ){
+				logger.write( "\t\t"+ s.toString() + "\n");
+			}
+		}
+		logger.write("\n");
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -20,15 +20,18 @@
  * @author Md. Adil Akhter
  */
 public final class PackageNamespace  extends BaseNamespace {
+	
 	//TODO improvement : Implement a Query Pattern for symbol resolving . 
+	
 	private static final long serialVersionUID = 7324156752002137217L;
 	private static final String INTERNAL_NAMESPACENAME = "__internal";
-	
-	// Not serializing it to disk since we already have this information in SpxSemanticIndex
+
 	private transient Set<NamespaceUri> importedNamespaceUris;
 	private transient Set<NamespaceUri> enclosedNamespaceUris;
 	
 	/**
+	 * Instantiates a new instance of {@link PackageNamespace}
+	 * 
 	 * @param currentNamespace
 	 * @param type
 	 * @param enclosingNamespace
@@ -39,6 +42,8 @@
 	}
 	
 	/**
+	 * Ensures that the enclosed Namespaces of this {@link} PackageNamespace is already loaded. If not, then they  
+	 * are loaded. 
 	 * 
 	 * @param facade
 	 * @throws SpxSymbolTableException
@@ -59,26 +64,12 @@
 		}
 	}
 	
-
 	/**
-	 * Restricts transitive imports. If {@code searchOrigin}  {@link INamespace} imports 
-	 * current {@link INamespace}, then in order to avoid transitive lookup , resolving in 
-	 * the imported {@link INamespace}s is avoided.  It also detects cyclic import references.    
+	 * Ensures imported Namespaces are loaded of this {@link PackageNamespace} 
 	 * 
 	 * @param facade
-	 * @param searchOrigin
-	 * @return
 	 * @throws SpxSymbolTableException
 	 */
-	boolean isTransitiveImportLookup(SpxSemanticIndexFacade facade , INamespace searchOrigin) throws SpxSymbolTableException{
-		
-		PackageDeclaration	assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
-		
-		Set<IStrategoList> importedToPackages = assiciatedPackageDeclaration.getImortedToPackageReferences();
-		
-		return importedToPackages.contains(searchOrigin.namespaceUri().id());
-	}
-	
 	private void ensureImportedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
 		if( importedNamespaceUris == null){
 			
@@ -96,6 +87,27 @@
 			}	
 		}
 	}
+
+	/**
+	 * Restricts transitive imports. If {@code searchOrigin}  {@link INamespace} imports 
+	 * current {@link INamespace}, then in order to avoid transitive lookup , resolving in 
+	 * the imported {@link INamespace}s is avoided.  It also detects cyclic import references.    
+	 * 
+	 * @param facade
+	 * @param searchOrigin
+	 * @return
+	 * @throws SpxSymbolTableException
+	 */
+	boolean isTransitiveImportLookup(SpxSemanticIndexFacade facade , INamespace searchOrigin) throws SpxSymbolTableException{
+		
+		PackageDeclaration	assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
+		
+		Set<IStrategoList> importedToPackages = assiciatedPackageDeclaration.getImortedToPackageReferences();
+		
+		return importedToPackages.contains(searchOrigin.namespaceUri().id());
+	}
+	
+	
 	/* Resolving symbol in PackageNamespace following few   
 	 * basic rules. First it try to resolve symbol in its enclosed namespace , then it try to resolve 
 	 * the symbol in its enclosing namespace and at last, it looks for the symbol in the imported 
@@ -168,28 +180,6 @@
 		return retValue;	
 	}
 	
-	/**
-	 * Creates an instance of PackageScope. Also creates internal symbol scopes
-	 * 
-	 * @param facade
-	 * @return
-	 */
-	public static Iterable<INamespace> createInstances(IStrategoList id, SpxSemanticIndexFacade facade){
-		
-		SpxPrimarySymbolTable  table =  facade.persistenceManager().spxSymbolTable() ;
-		
-		NamespaceUri globalNsUri =  table.toNamespaceUri(GlobalNamespace.getGlobalNamespaceId(facade));
-		NamespaceUri currentPackageUri = table.toNamespaceUri(id);
-	
-		List<INamespace> namespaces = new ArrayList<INamespace>();
-		PackageNamespace ns = new PackageNamespace(currentPackageUri, facade.getPackageNamespaceTypeCon(), globalNsUri,facade.persistenceManager());
-		
-		namespaces.add(ns);
-		namespaces.add(createInternalNamespace(currentPackageUri , facade));
-		
-		return namespaces;
-	}
-	
 	/** 
 	 * Resolving a Symbol in the Namespaces specified in {@code resolvableUris} 
 	 * @param resolvableUris 
@@ -253,6 +243,30 @@
 		return resolveInCurrentNamespaceIsNotAllowed || currentNamespaceIsSearchedOrigin;
 	
 	}
+	/**
+	 * Creates an instance of PackageScope. Also creates internal symbol scopes
+	 * 
+	 * @param facade
+	 * @return
+	 */
+	public static Iterable<INamespace> createInstances(IStrategoList id, SpxSemanticIndexFacade facade){
+		
+		SpxPrimarySymbolTable  table =  facade.persistenceManager().spxSymbolTable() ;
+		List<INamespace> namespaces = new ArrayList<INamespace>();
+		INamespace ns = table.resolveNamespace(id); 
+		if(ns == null)
+		{				
+			NamespaceUri globalNsUri =  table.toNamespaceUri(GlobalNamespace.getGlobalNamespaceId(facade));
+			NamespaceUri currentPackageUri = table.toNamespaceUri(id);
+	
+			ns = new PackageNamespace(currentPackageUri, facade.getPackageNamespaceTypeCon(), globalNsUri,facade.persistenceManager());
+		}
+		
+		namespaces.add(ns);
+		namespaces.add(createInternalNamespace(ns.namespaceUri() , facade));
+		
+		return namespaces;
+	}
 	
 	/**
 	 * Creates a new Internal namespace for the current package namespace.
@@ -260,16 +274,18 @@
 	 * @param idxFacade
 	 * @return
 	 */
-	private static INamespace createInternalNamespace( NamespaceUri enclosingNamespaceId , SpxSemanticIndexFacade idxFacade)
+	private static INamespace createInternalNamespace( NamespaceUri enclosingNamespaceId , SpxSemanticIndexFacade facade)
 	{
-		NamespaceUri internalNamespaceUri = packageInternalNamespace(
-				enclosingNamespaceId, idxFacade);
+		SpxPrimarySymbolTable  table =  facade.persistenceManager().spxSymbolTable() ;
 		
-		//termFactory.makeList(spoofaxNamespaceId.getAllSubterms() , "");
-		ModuleNamespace internalNamespace = (ModuleNamespace)ModuleNamespace.createInstance(internalNamespaceUri, enclosingNamespaceId, idxFacade);
-		internalNamespace.isInternalNamespace = true;
+		NamespaceUri internalNamespaceUri = packageInternalNamespace(enclosingNamespaceId, facade);
+		INamespace ns = table.resolveNamespace(internalNamespaceUri) ;
 		
-		return internalNamespace;
+		if(ns == null) {	
+			ns = (ModuleNamespace)ModuleNamespace.createInstance(internalNamespaceUri, enclosingNamespaceId, facade);
+			((ModuleNamespace)ns).isInternalNamespace = true;
+		}
+		return ns;
 	}
 
 	/**
@@ -303,7 +319,6 @@
 
 	@Override
 	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade) {
-	
 		return PackageDeclaration.toPackageQNameAppl(facade, this.namespaceUri().id());
 	}
 }
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -0,0 +1,133 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.io.Serializable;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+abstract class SpxBaseSymbol implements Serializable{
+
+	private static final long serialVersionUID = 3160588874266553126L;
+	
+	private transient IStrategoTerm _id;
+	
+	//@serial
+	private String _idString;
+	
+	public String getId(){  return _idString ; }
+	
+	public SpxBaseSymbol(IStrategoTerm id){
+		_id = id ;
+		_idString = id.toString(Integer.MAX_VALUE);
+	}
+	
+	public IStrategoTerm Id(ITermFactory _fac ){
+		if (_id == null){
+			_id = _fac.parseFromString(_idString);
+		}
+		return _id;
+	}
+	
+	void setId(IStrategoTerm id){_id = id;}
+	
+	public static boolean verifyEquals(IStrategoConstructor ctor1 , IStrategoConstructor ctor2){
+		if( (ctor1.getArity() == ctor2.getArity()) && (ctor1.getName().equals(ctor2.getName()))){
+			return true;
+		}
+		return false;
+	}
+	
+	public static boolean verifyEquals(IStrategoTerm current, IStrategoTerm other){
+		boolean retValue = false;
+		if ( current instanceof IStrategoAppl){
+			if(other instanceof IStrategoAppl) {
+				IStrategoAppl currentAppl = (IStrategoAppl)current;
+				IStrategoAppl otherAppl = (IStrategoAppl)other;
+
+				if( verifyEquals(currentAppl.getConstructor() , otherAppl.getConstructor()) )
+				{
+					IStrategoTerm[] currentTerms= currentAppl.getAllSubterms();
+					IStrategoTerm[] otherTerms = currentAppl.getAllSubterms();
+
+					retValue = verifyEquals(currentTerms, otherTerms);
+				}	
+			}
+		}	
+		else if( current instanceof IStrategoTuple){
+			if(other instanceof IStrategoTuple) {
+				retValue = verifyEquals(current.getAllSubterms(), other.getAllSubterms());
+			}
+		}	
+		else if( current instanceof IStrategoList){
+			if(other instanceof IStrategoList) {
+				retValue = verifyEquals(current.getAllSubterms(), other.getAllSubterms());
+			}
+		}
+		else
+			retValue = current.match(other);
+
+		return retValue;
+	}
+
+	public static boolean verifyEquals( IStrategoTerm[] currentTerms, IStrategoTerm[] otherTerms) {
+		boolean retValue = false;
+		
+		if(currentTerms == null && otherTerms == null) {retValue = true;} 
+		else if( currentTerms.length == otherTerms.length){
+			if(currentTerms.length ==0) {retValue = true;}
+			else {  
+				for ( int i = 0 ; i< currentTerms.length ; i++){
+					if( !verifyEquals(currentTerms[i], otherTerms[i])){
+						retValue = false;
+						break;
+					}
+					else { retValue = true;}
+				}
+			}
+		}
+		return retValue;
+	}		
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((_idString == null) ? 0 : _idString.hashCode());
+		//result = prime * result + ((_idString == null) ? 0 : _id.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		SpxBaseSymbol other = (SpxBaseSymbol) obj;
+//		if (_id == null) {
+//			if (other._id != null)
+//				return false;
+//		}else if(!verifyEquals(this._id, other._id)){ 
+//			return false;
+//		}
+		if (_idString == null) {
+			if (other._idString != null)
+				return false;
+		}else if( !this._idString.equals(other._idString ) ){
+			return false;
+		}
+		return true;
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -22,8 +22,6 @@
  * Created On : Aug 22, 2011
  */
 public class SpxPersistenceManager implements ISpxPersistenceManager {
-
-	private static final boolean DEBUG = true;
 	private static final String SRC =   "SpxPersistenceManager" ;
 	
 	
@@ -32,9 +30,12 @@
 	private final IOAgent _agent;
 	private final String _projectName ;
 	
+	// Keeps a reference to the SpxCompilation Units 
 	private SpxCompilationUnitTable _spxUnitsTable;  
+	// Indexing Package and Module Definitions
 	private SpxPackageLookupTable _spxPackageTable;
 	private SpxModuleLookupTable _spxModuleTable;
+	// Symbol Table for storing program symbols 
 	private SpxPrimarySymbolTable _spxSymbolTable;
 
 
@@ -47,8 +48,6 @@
 	 */
 	public SpxPersistenceManager(SpxSemanticIndexFacade spxSemanticIndexFacade) throws IOException{
 		this(spxSemanticIndexFacade, null);
-	
-		//TODO FIXME: dont like this coupling. rethink and refactor. 
 	}
 	
 	
@@ -72,7 +71,7 @@
 		//setting properties of RecordManager
 		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, _indexDirectory + "/" + _projectName + ".idx");
 		options.put(RecordManagerOptions.CACHE_TYPE, "auto");
-		//options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "true");
+		options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "false");
 
 		_recordManager = RecordManagerFactory.createRecordManager(_projectName , options);
 		
@@ -85,13 +84,14 @@
 	 * 
 	 * @param projectName name of the Project 
 	 */
-	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade) {
+	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade) throws Exception {
 		
 		_spxUnitsTable   = new SpxCompilationUnitTable(this);
 		_spxPackageTable = new SpxPackageLookupTable(this);
 		_spxModuleTable  = new SpxModuleLookupTable(this);
 		_spxSymbolTable = new SpxPrimarySymbolTable(facade);
-		
+		_spxSymbolTable.addGlobalNamespace(facade);
+
 		initListeners();
 	}
 	
@@ -129,8 +129,7 @@
 	 * @param mapName
 	 * @return
 	 */
-	public <K,V> PrimaryHashMap<K,V> loadHashMap ( String mapName)
-	{
+	public <K,V> PrimaryHashMap<K,V> loadHashMap ( String mapName){
 		return _recordManager.hashMap(mapName) ;
 		
 	}
@@ -142,18 +141,14 @@
 	 * @param storeMapName
 	 * @return
 	 */
-	public <V> PrimaryStoreMap <Long, V> loadStoreMap( String storeMapName)
-	{
-		return _recordManager.storeMap(storeMapName);
-	}
+	public <V> PrimaryStoreMap <Long, V> loadStoreMap( String storeMapName) { return _recordManager.storeMap(storeMapName); }
 	
 	/**
 	 * Commits any unsaved changes to the disk 
 	 * @throws IOException
 	 */
-	public void commit() throws IOException
-	{
-		_recordManager.commit();
+	public void commit() throws IOException {
+		_recordManager.commit(); 
 	}
 	
 	/**
@@ -161,19 +156,12 @@
 	 * 
 	 * @throws IOException
 	 */
-	void close() throws IOException
-	{
-		_recordManager.close();	
-	}
+	void close() throws IOException { _recordManager.close(); }
 	
 	/* (non-Javadoc)
 	 * @see org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager#commitAndClose()
 	 */
-	public void commitAndClose() throws IOException
-	{	
-		this.commit();
-		this.close();
-	}
+	public void commitAndClose() throws IOException { this.commit(); this.close(); }
 
 	public SpxCompilationUnitTable spxCompilcationUnitTable() { return _spxUnitsTable; }
 
@@ -206,7 +194,7 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager#logMessage(java.lang.String, java.lang.String)
 	 */
 	public void logMessage(String origin, String message) {
-		if(DEBUG){		
+		if(Utils.DEBUG){		
 			try {
 				_agent.getWriter(IOAgent.CONST_STDOUT).write(
 						"[" + this._projectName + "." + origin + "]   " + message

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -1,9 +1,17 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.io.BufferedWriter;
+import java.io.FileWriter;
 import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
+import java.util.logging.FileHandler;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import jdbm.PrimaryMap;
 import jdbm.RecordListener;
@@ -22,7 +30,7 @@
 	private transient INamespace _activeNamespace ;
 	
 	//TODO implement remove package and remove module event handlers
-	public SpxPrimarySymbolTable (SpxSemanticIndexFacade facade){
+	public SpxPrimarySymbolTable (SpxSemanticIndexFacade facade) throws SecurityException, IOException{
 		assert facade != null  : "SpxSemanticIndexFacade  is expected to non-null" ;
 		_manager = facade.persistenceManager();
 
@@ -30,16 +38,56 @@
 		
 		namespaces  = _manager.loadHashMap(tableName + "namespaces.idx");
 		namespaceByStrategoId = namespaces.secondaryHashMap(tableName+ ".namespaceByStrategoId.idx", 
-				new SecondaryKeyExtractor<IStrategoList,NamespaceUri,INamespace>()
-				{
+				new SecondaryKeyExtractor<IStrategoList,NamespaceUri,INamespace>(){
 					public IStrategoList extractSecondaryKey(NamespaceUri k,INamespace v) {
 						return k.id(); 
 					}
 				});
-		
-		addGlobalNamespace(facade);
+
+		if(Utils.DEBUG){
+			printSymbols();
+		}	
+	}
+	
+	/**
+	 * Printing all the symbols current hashmap 
+	 * 
+	 * @throws IOException
+	 */
+	public void printSymbols() throws IOException{
+		FileWriter fstream = new FileWriter("c:/temp/log/symbols"+ now("yyyy-MM-dd")+".txt" , true);
+		BufferedWriter out = new BufferedWriter(fstream);
+		out.write("Logging state of Symbol-Table at :" + now("yyyy-MM-dd HH.mm.ss"));
+		try
+		{	
+			if(namespaces != null){
+				for(INamespace ns : namespaces.values()){
+					out.write("|" + ns +"|\n");
+					logEntries(ns,out) ;
+				}
+			}
+		}finally{out.close();}
+	}
+	
+	
+	private static  void logEntries( INamespace namespace , BufferedWriter logger) throws IOException{
+		Map<SpxSymbolKey , List<SpxSymbol>> members = namespace.getMembers();
+		for( SpxSymbolKey k : members.keySet()) {
+			logger.write("\t"+k.toString()  + " :  \n");
+			
+			for( SpxSymbol s : members.get(k) ){
+				logger.write( "\t\t"+ s.toString() + "\n");
+			}
+		}
+		logger.write("\n");
 	}
 	
+	private static String now(String dateFormat) {
+	    Calendar cal = Calendar.getInstance();
+	    SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
+	    return sdf.format(cal.getTime());
+
+	  }
 	/**
 	 * Adding Global Namespace in symbol-table by default.
 	 * @param facade
@@ -52,7 +100,7 @@
 	public void defineNamespace(INamespace namespace) {
 		// if not already defined, defining this namespace
 		if (!containsNamespace(namespace))
-			this.namespaces.put(namespace.namespaceUri(), namespace);
+ 			this.namespaces.put(namespace.namespaceUri(), namespace);
 	}
 	
 	NamespaceUri toNamespaceUri(IStrategoList spoofaxId) {
@@ -75,6 +123,8 @@
 		INamespace resolveNamespace  = resolveNamespace(id) ;
 		
 		if(resolveNamespace != null){
+			
+			_manager.logMessage(SRC, "removenamespace | removing following namespace : " + resolveNamespace);
 			this.namespaces.remove(resolveNamespace.namespaceUri());
 		}
 		
@@ -100,7 +150,13 @@
 	
 	public boolean containsNamespace(INamespace namespace) { return this.containsNamespace(namespace.namespaceUri());}
 
-	public void clear(){  namespaces.clear();  }
+	public void clear(){  
+		for( INamespace ns  : namespaces.values()){
+			ns.clear();
+		}
+			
+		namespaces.clear();  
+	}
 	
 	public int size() { return namespaces.size();}
 	 
@@ -114,7 +170,7 @@
 	public Set<NamespaceUri> getAllNamespaces() { return namespaces.keySet() ; }
 
 	public void defineSymbol(SpxSemanticIndexFacade facade, IStrategoList namespaceId ,  SpxSymbolTableEntry symTableEntry) throws SpxSymbolTableException {
-		
+		_manager.logMessage(SRC, "defineSymbol | defining symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symTableEntry.key + " Value : "+ symTableEntry.value);	
 		ensureActiveNamespaceLoaded(namespaceId);
 	
 		_activeNamespace.define(symTableEntry, facade.persistenceManager()); 
@@ -141,7 +197,7 @@
 	}
 
 	public Iterable<SpxSymbol> resolveSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
-		_manager.logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
+		_manager.logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + " of Type : "+ symbolType.getName());
 		
 		ensureActiveNamespaceLoaded(namespaceId);
 		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_activeNamespace.resolveAll(symbolId, symbolType ,spxSemanticIndexFacade);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -6,6 +6,7 @@
 import jdbm.RecordManager;
 import jdbm.RecordManagerFactory;
 
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -405,7 +406,7 @@
 	public boolean close(IStrategoTerm projectName) throws Exception {
 		new SpxIndexManageCommand(){
 			public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
-				_facadeRegistry.removeFacade(projectName);
+				_facadeRegistry.closePersistenceManager(projectName);
 
 			}
 		}.executeCommnad(projectName);
@@ -428,9 +429,8 @@
 	 */
 	private void tryCleanupResources( IStrategoTerm projectName) throws IOException{
 		
-		if ( _facadeRegistry.containsFacade(projectName))
-		{
-			SpxSemanticIndexFacade facade = _facadeRegistry.removeFacade(projectName);
+		if ( _facadeRegistry.containsFacade(projectName)) {
+			SpxSemanticIndexFacade facade = _facadeRegistry.closePersistenceManager(projectName);
 			try {
 				facade.close();
 			} catch (IOException e) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -27,7 +27,7 @@
 	//TODO :  refactor this class  to multiple facades one for package, one for modules 
 	//TODO FIXME : combine symbol table and index
 	
-	private final ISpxPersistenceManager _persistenceManager;
+	private ISpxPersistenceManager _persistenceManager;
 	private final String _projectName ; 
 	private final ITermFactory _termFactory;
 	private final IOAgent _agent;
@@ -44,9 +44,9 @@
 	 * @param projectName name of the project 
 	 * @param termFactory {@link ITermFactory}
 	 * @param agent {@link IOAgent}
-	 * @throws IOException throws {@link IOException} from underlying {@link SpxPersistenceManager}
+	 * @throws Exception 
 	 */
-	public SpxSemanticIndexFacade(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent) throws IOException {
+	public SpxSemanticIndexFacade(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent){
 		_projectName = asJavaString(projectName);
 		
 		_termFactory = termFactory;
@@ -60,11 +60,12 @@
 		
 		_knownCons = new HashMap<ConstructorDef ,IStrategoConstructor>();
 		initKnownConstructors();
-		
+	}
+	
+	public void initializePersistenceManager() throws Exception {
 		_persistenceManager = new SpxPersistenceManager(this);
 		_persistenceManager.initializeSymbolTables(this._projectName, this);
 	}
-	
 		
 	/**
 	 * Returns the TermFactory 
@@ -315,7 +316,7 @@
 	// (namespace * idTolookupFor * type constructor)
 	public IStrategoTerm resolveSymbols(IStrategoTuple searchCriteria) throws SpxSymbolTableException{
 		if (searchCriteria.getSubtermCount() != 4)
-			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + searchCriteria.getSubtermCount());
+			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 4 subterms. Found : " + searchCriteria.getSubtermCount());
 		
 		String searchMode = asJavaString(searchCriteria.get(3)).trim();
 		IStrategoAppl typeAppl =  (IStrategoAppl)searchCriteria.getSubterm(2);
@@ -780,10 +781,9 @@
 	/**
 	 * Re-initialize Symbol Tables . It clears all the existing entries from  
 	 * symbol tables.
-	 * 
-	 * @throws IOException
+	 * @throws Exception 
 	 */
-	public void reinitSymbolTable() throws IOException {	
+	public void reinitSymbolTable() throws Exception {	
 		
 		if (! isPersistenceManagerClosed())
 			persistenceManager().clearAll();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -5,6 +5,7 @@
 import java.io.IOException;
 import java.util.HashMap;
 
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -14,7 +15,7 @@
 //project name to the IndexFactory . Current Implementation 
 //will still work in multiproject situation - but will be 
 //using only one SemanticIndexFactory and require initialization. 
-class SpxSemanticIndexFacadeRegistry
+public class SpxSemanticIndexFacadeRegistry
 {
 	
 	final HashMap<String, SpxSemanticIndexFacade> _registry = new HashMap<String, SpxSemanticIndexFacade>();
@@ -24,21 +25,27 @@
 	 * has facade object in the registry , but the underlying persistence manager is closed.
 	 * 
 	 * @param projectName
-	 * @param factory
-	 * @throws IOException
+	 * @param termFactory
+	 * @throws Exception 
 	 */
-	public void add(IStrategoTerm projectName , ITermFactory factory , IOAgent agent) throws IOException
+	public void add(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent) throws Exception
 	{	
 		SpxSemanticIndexFacade fac = null;
-		
-		if ( !containsFacade(projectName))
-			fac = new SpxSemanticIndexFacade(projectName, factory, agent);
-		else
-		{
-			SpxSemanticIndexFacade f = _registry.get(projectName);
-			if( (f!= null) && f.isPersistenceManagerClosed())
-			{
-				fac = new SpxSemanticIndexFacade(projectName, factory, agent);
+		String projectNameString  = asJavaString(projectName);
+		if ( !containsFacade(projectName)) {
+			
+			fac = new SpxSemanticIndexFacade(projectName, termFactory, agent);
+			fac.initializePersistenceManager();
+		}	
+		else {
+			fac = _registry.get(projectNameString);
+			// Checks to verify whether the persistence manager is closed. 
+			// If it is , creating a new instance of PersistenceManager.
+			if( (fac != null) && fac.isPersistenceManagerClosed()){
+				fac.initializePersistenceManager();
+			}else if ( fac == null){
+				fac = new SpxSemanticIndexFacade(projectName, termFactory, agent);
+				fac.initializePersistenceManager();
 			}	
 		}
 		
@@ -55,14 +62,11 @@
 	 * @return SpxSemanticIndexFactory mapped with the projectName. If no mapping is found, it is returning null. 
 	 * @throws SpxSymbolTableException 
 	 */
-	public SpxSemanticIndexFacade getFacade( IStrategoTerm projectName) throws SpxSymbolTableException
-	{
-		String key = asJavaString(projectName);
-		
+	public SpxSemanticIndexFacade getFacade( IStrategoTerm projectName) throws SpxSymbolTableException{
+		String key = asJavaString(projectName);		
 		SpxSemanticIndexFacade facade =  _registry.get(key);
 		
-		if(facade == null || facade.isPersistenceManagerClosed())
-		{
+		if(facade == null || facade.isPersistenceManagerClosed()) {
 			throw new SpxSymbolTableException("Symbol Table is not initialized for project : " + projectName + " . Invoke SPX_index_init. ");
 		}	
 		
@@ -71,18 +75,11 @@
 
 	public void clearAll() throws IOException{
 		for(String fname : _registry.keySet())
-			remove(fname);
+			removeFacade(fname);
 	}
 	
-	public SpxSemanticIndexFacade removeFacade(IStrategoTerm projectName) throws IOException {
-		String key = asJavaString(projectName);
-		
-		return remove(key);
-	}
-	
-	private SpxSemanticIndexFacade remove(String projectName) throws IOException {
-		
-		SpxSemanticIndexFacade facade = _registry.remove(projectName);
+	private SpxSemanticIndexFacade closePersistenceManager(String projectName) throws IOException{
+		SpxSemanticIndexFacade facade = _registry.get(projectName);
 		
 		if((facade != null) &&  !facade.isPersistenceManagerClosed())
 			facade.close();
@@ -90,6 +87,19 @@
 		return facade;
 	}
 	
+	
+	
+	public SpxSemanticIndexFacade closePersistenceManager(IStrategoTerm projectNameTerm) throws IOException {
+		return closePersistenceManager(asJavaString(projectNameTerm));
+	}
+
+	private SpxSemanticIndexFacade removeFacade(String projectName) throws IOException {
+		
+		closePersistenceManager(projectName);
+		return _registry.remove(projectName);
+	}
+	
+	
 	public boolean containsFacade(IStrategoTerm projectName){
 		String key = asJavaString(projectName);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -10,132 +10,10 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.terms.attachments.TermAttachmentSerializer;
 
-class BaseSymbol implements Serializable{
-
-	private static final long serialVersionUID = 3160588874266553126L;
-	
-	protected transient IStrategoTerm _id;
-	//protected  IStrategoTerm _id;
-	protected String _idString;
-	
-	public BaseSymbol(IStrategoTerm id){
-		_id = id ;
-		_idString = id.toString(Integer.MAX_VALUE);
-	
-	}
-	
-	public IStrategoTerm Id(ITermFactory _fac ){
-		if (_id == null){
-			_id = _fac.parseFromString(_idString);
-		}
-		return _id;
-	}
-	
-	void setId(IStrategoTerm id){_id = id;}
-	
-	public static boolean verifyEquals(IStrategoConstructor ctor1 , IStrategoConstructor ctor2){
-		if( (ctor1.getArity() == ctor2.getArity()) && (ctor1.getName().equals(ctor2.getName()))){
-			return true;
-		}
-		return false;
-	}
-	
-	public static boolean verifyEquals(IStrategoTerm current, IStrategoTerm other){
-		boolean retValue = false;
-		if ( current instanceof IStrategoAppl){
-			if(other instanceof IStrategoAppl) {
-				IStrategoAppl currentAppl = (IStrategoAppl)current;
-				IStrategoAppl otherAppl = (IStrategoAppl)other;
-
-				if( verifyEquals(currentAppl.getConstructor() , otherAppl.getConstructor()) )
-				{
-					IStrategoTerm[] currentTerms= currentAppl.getAllSubterms();
-					IStrategoTerm[] otherTerms = currentAppl.getAllSubterms();
-
-					retValue = verifyEquals(currentTerms, otherTerms);
-				}	
-			}
-		}	
-		else if( current instanceof IStrategoTuple){
-			if(other instanceof IStrategoTuple) {
-				retValue = verifyEquals(current.getAllSubterms(), other.getAllSubterms());
-			}
-		}	
-		else if( current instanceof IStrategoList){
-			if(other instanceof IStrategoList) {
-				retValue = verifyEquals(current.getAllSubterms(), other.getAllSubterms());
-			}
-		}
-		else
-			retValue = current.match(other);
-
-		return retValue;
-	}
-
-	public static boolean verifyEquals( IStrategoTerm[] currentTerms, IStrategoTerm[] otherTerms) {
-		boolean retValue = false;
-		
-		if(currentTerms == null && otherTerms == null) {retValue = true;} 
-		else if( currentTerms.length == otherTerms.length){
-			if(currentTerms.length ==0) {retValue = true;}
-			else {  
-				for ( int i = 0 ; i< currentTerms.length ; i++){
-					if( !verifyEquals(currentTerms[i], otherTerms[i])){
-						retValue = false;
-						break;
-					}
-					else { retValue = true;}
-				}
-			}
-		}
-		return retValue;
-	}		
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + ((_idString == null) ? 0 : _idString.hashCode());
-		//result = prime * result + ((_idString == null) ? 0 : _id.hashCode());
-		return result;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		BaseSymbol other = (BaseSymbol) obj;
-//		if (_id == null) {
-//			if (other._id != null)
-//				return false;
-//		}else if(!verifyEquals(this._id, other._id)){ 
-//			return false;
-//		}
-		if (_idString == null) {
-			if (other._idString != null)
-				return false;
-		}else if( !this._idString.equals(other._idString ) ){
-			return false;
-		}
-		return true;
-	}
-}
-
-public class SpxSymbol extends BaseSymbol implements Serializable{
+public class SpxSymbol extends SpxBaseSymbol implements Serializable{
 	private static final long serialVersionUID = -5293805213473800423L;
 	
 	private String _data;
@@ -290,23 +168,6 @@
 	 */
 	@Override
 	public String toString() {
-		return "SpxSymbol [ Id : " + this._idString + " Type= " + _type + ", Namespace=" + _namespace + "]";
-	}
-}
-
-class SpxSymbolKey extends BaseSymbol implements Serializable{
-	
-	//TODO : verify it is working with two stage serialization.
-	//Again easy way out is to serialize it to String and persist that 
-	//in disk. 
-	
-	//Since we dont care about term attachments of the key, we are stripping any term attachment.
-	private static final long serialVersionUID = 7804281029276443583L;
-	
-	public SpxSymbolKey(IStrategoTerm id){ super(id); }
-
-	@Override
-	public String toString() {
-		return "SpxIndexKey {_id=" + _id +"}";
+		return "SpxSymbol [ Id : " + this.getId() + " Type= " + _type + ", Namespace=" + _namespace + "]";
 	}
-}
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolKey.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolKey.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -0,0 +1,17 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.io.Serializable;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class SpxSymbolKey extends SpxBaseSymbol implements Serializable{
+	
+	private static final long serialVersionUID = 7804281029276443583L;
+	
+	public SpxSymbolKey(IStrategoTerm id){ super(id); }
+
+	@Override
+	public String toString() {
+		return "SpxIndexKey {_id=" + this.getId() +"}";
+	}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableException.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableException.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableException.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -4,7 +4,6 @@
  * Custom Exception thrown to indicate symbol table lookup has been failed.  
  * 
  * @author Md. Adil Akhter
- * Created On : Sep 11, 2011
  */
 public class SpxSymbolTableException extends Exception {
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -8,7 +8,8 @@
 		
 	}
 	
-
+	static final boolean DEBUG = true;
+	
 	/**
 	 * Constructs {@link IStrategoList} from {@code decls}  
 	 * 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -0,0 +1,214 @@
+package org.spoofax.interpreter.library.language.spxlang.tests;
+
+import java.io.IOException;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+import jdbm.PrimaryHashMap;
+import jdbm.RecordManager;
+import jdbm.RecordManagerFactory;
+
+
+/**
+ * Demonstrates more advanced usage of JDBM:
+ * Secondary maps, 1:N relations.
+ * 
+ * @author Jan Kotek
+ *
+ */
+class MultiValuePersistentTable1 implements Serializable{
+	private static final long serialVersionUID = -5921814375219835440L;
+	private final HashMap<String, List<Address>> symbols;
+
+	public MultiValuePersistentTable1(){
+		symbols = new HashMap<String, List<Address>>();
+	}
+	
+	/**
+	 * Removes all the entries from this symbol-table
+	 * 
+	 * @throws IOException 
+	 */
+	public void clear(){ symbols.clear(); }
+
+	
+	/**
+	 * Defines symbol in the current symbol table. Define does not replace  
+	 * old symbol mapped using the key with the new one. It just adds the 
+	 * new symbol at the end of the multivalue-list. 
+	 * 
+	 * @param key - The key that the symbol will be mapped to .
+	 * @param symbol - The symbol to store. 
+	 */
+	public void define(String key , Address entry){
+		if ( symbols.containsKey(key)){
+			symbols.get(key).add(entry);
+		}else{
+			List<Address> values = new ArrayList<Address>(); 
+			values.add(entry);
+			symbols.put( key , values );
+		}
+	}
+	
+	public List<Address> resolve(String key){
+		
+		
+		List<Address> resolvedSymbols = symbols.get(key);
+		
+		return (resolvedSymbols == null) ? new ArrayList<Address>() : resolvedSymbols ; 
+	}
+	
+	public void logEntries() throws IOException{
+		for( String  k : symbols.keySet()) {
+			System.out.println("\t"+k.toString()  + " :  ");
+			
+			for( Address s : symbols.get(k) ){
+				System.out.println( "\t\t"+ s.toString() + "");
+			}
+		}
+		System.out.println();
+	}
+}
+
+class PersonBase  implements Serializable
+{
+	private static final long serialVersionUID = 8846122082882116001L;
+
+	/** field used for person identification (primary key)**/
+	public String name;
+	
+	String fatherName;
+	public PersonBase(String name, Address adress,String fatherName) {
+		this.name = name;
+		this.fatherName = fatherName;
+	}
+	
+	 MultiValuePersistentTable1 members = new MultiValuePersistentTable1();
+	
+	public MultiValuePersistentTable1 getMembers() { return members;}
+}
+
+class Person extends PersonBase implements Serializable{
+	
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 5872886463794139334L;
+
+	/** constructor, getters and setters are excluded for simplicity */
+	public Person(String name, Address adress,String fatherName) {
+		super(name, adress, fatherName);
+	}
+	
+	//private MultiValuePersistentTable1 members = new MultiValuePersistentTable1();
+	
+//	@Override
+//	public MultiValuePersistentTable1 getMembers() { return members;}
+	
+	public String toString(){
+		return "Person["+name+"]";
+	}
+	
+	public int hashCode() {
+		return name == null? 0 : name.hashCode();
+	}
+
+
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null || !(obj instanceof Person))
+			return false;
+		Person other = (Person) obj;
+		if (name == null) {
+			if (other.name != null)
+				return false;
+		} else if (!name.equals(other.name))
+			return false;
+		return true;
+	}
+	
+	public void setAddresses() 
+	{
+		addAddress(new Address("First street1", "Athlone","Ireland"));
+		addAddress(new Address("First street2", "Athlone","Ireland"));
+		addAddress(new Address("First street3", "Athlone","Ireland"));
+		
+	}
+	
+	private void addAddress( Address address){
+		this.getMembers().define("address", address);
+		
+	}
+}
+
+class Address implements Serializable{
+	@Override
+	public String toString() {
+		return "Address [streetName=" + streetName + ", town=" + town + ", country=" + country + "]";
+	}
+
+	String streetName;
+	String town;
+	String country;
+	
+	public Address(String streetName, String town, String country) {
+		super();
+		this.streetName = streetName;
+		this.town = town;
+		this.country = country;
+	}
+	
+	public String getId() { return streetName + "_" + town + "_" + country ;}
+	
+	
+}
+
+public class JdbmApiTests {
+	public static void main(String[] args) throws IOException {
+		String recDbName  = "personDBxx1234665";
+		//init Record Manager and dao
+		RecordManager recman = RecordManagerFactory.createRecordManager(recDbName);
+		
+		PrimaryHashMap<String,Person> personsByName = recman.hashMap("personsByName");
+		if(personsByName.size() > 0)
+			personsByName.clear();
+		
+		//create a few persons
+		Person patrick = new Person("Patrick Moore", 
+				new Address("First street", "Athlone","Ireland"),
+				null);
+		patrick.setAddresses(); 
+		personsByName.put(patrick.name, patrick);
+		
+		patrick = new Person("Patrick Moore2", 
+				new Address("First street", "Athlone","Ireland"),
+				null);
+		patrick.setAddresses(); 
+		personsByName.put(patrick.name, patrick);
+		recman.commit();
+		
+		personsByName.get("Patrick Moore").getMembers().logEntries();
+		recman.close();
+		recman = null;
+		
+		RecordManager recman2= RecordManagerFactory.createRecordManager(recDbName);
+		PrimaryHashMap<String,Person> personsByName2 = recman2.hashMap("personsByName");
+		
+		System.out.println("Number of persons: "+personsByName2.size());
+		
+		
+		
+		System.out.println("Persons with name Patrick Moore: "+personsByName2.get("Patrick Moore"));
+		
+		Person p = personsByName2.get("Patrick Moore");
+		
+		System.out.println("Found : " +p.name); 
+		p.getMembers().logEntries();
+		
+		recman2.close();
+	}
+	
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct 12 16:13:50 2011	(r23446)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct 12 18:48:45 2011	(r23447)
@@ -17,6 +17,7 @@
 import org.spoofax.interpreter.library.language.spxlang.PackageNamespace;
 import org.spoofax.interpreter.library.language.spxlang.SpxPrimarySymbolTable;
 import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacadeRegistry;
 import org.spoofax.interpreter.library.language.spxlang.SpxSymbol;
 import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -29,12 +30,12 @@
 
 public class SpxPrimarySymbolTableTest extends AbstractInterpreterTest{
 	
-	private final String _projectName = "_test-symbol-table";
+	private final String _projectName = "_test-symbol-table_1";
 	
 	private IStrategoString projectNameTerm; 
 	private SpxSemanticIndexFacade _facade;
 	private SpxPrimarySymbolTable symbol_table;
-	
+	private SpxSemanticIndexFacadeRegistry _registry;
 	final String absPathString1 = "c:/temp/file1.spx" ;
 	final String absPathString2 = "c:/temp/file2.spx" ;
 
@@ -49,9 +50,12 @@
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
+		_registry = new SpxSemanticIndexFacadeRegistry();
+		
 		projectNameTerm = termFactory().makeString(_projectName);
 	
-		_facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
+		_registry.add(projectNameTerm, termFactory(), ioAgent()); 
+		_facade = _registry.getFacade(projectNameTerm);
 		_facade.reinitSymbolTable();
 		
 		
@@ -212,7 +216,8 @@
 					termFactory().makeTuple( 
 						pQnameUnknown,
 						symbolId,
-						typeAppl 
+						typeAppl,
+						termFactory().makeString("*")
 					));
 			
 		}catch(SpxSymbolTableException ex) { }
@@ -617,7 +622,7 @@
 	}
 	
 	
-	public void testShouldNotFailIncaseOfCyclicImports() throws IOException, SpxSymbolTableException{
+	public void testShouldNotFailIncaseOfCyclicImports() throws Exception{
 		createExtendedScopeTree();
 		
 		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
@@ -638,11 +643,16 @@
 		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
 		
 		
+		_registry.closePersistenceManager(this.projectNameTerm);
+		
+		_registry.add(projectNameTerm, termFactory(), ioAgent());
+		SpxSemanticIndexFacade tfacade = _registry.getFacade(this.projectNameTerm);
+		
 		//Resolving Symbol in Package 3
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)tfacade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
-				_facade.getConstructor("ModuleDef", 0) // with type 
+				tfacade.getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		// current import chain is as following : p1-> p2 ->p3->p1
@@ -655,10 +665,10 @@
 		assertEquals(2, resolvedSymbols.size());
 		
 		//Resolving Symbol in Package 3. It will just resolve one symbol and exit search
-		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbol(
-				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
+		resolvedSymbols = (List<SpxSymbol>)tfacade.resolveSymbol(
+				ModuleDeclaration.toModuleQNameAppl(tfacade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
-				_facade.getConstructor("ModuleDef", 0) // with type 
+				tfacade.getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());

From M.A.Akhter at student.tudelft.nl  Wed Oct 12 22:28:46 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 12 Oct 2011 20:28:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23448 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111012202846.AC8CD2B8034@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Oct 12 20:28:46 2011
New Revision: 23448
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23448&sc=1

Log:


Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/MultiValuePersistentTable.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct 12 18:48:45 2011	(r23447)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct 12 20:28:46 2011	(r23448)
@@ -50,13 +50,14 @@
 		symbols = new HashMap<SpxSymbolKey, List<SpxSymbol>>();
 	}
 
-	public void define(SpxSymbolTableEntry entry, ILogger logger){
+	public INamespace define(SpxSymbolTableEntry entry, ILogger logger){
 		
 		entry.value.setNamespace(_currentNamespaceId);
 		
 		logger.logMessage(src, "define | Defining Symbol "+ entry.value + " in "+ _currentNamespaceId);
 		
-		defineSymbol(entry);
+		defineSymbol(entry); 
+		return this;
 	}
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Oct 12 18:48:45 2011	(r23447)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Oct 12 20:28:46 2011	(r23448)
@@ -18,7 +18,7 @@
 
 	INamespace getCurrentNamespace(INamespaceResolver resolver) throws SpxSymbolTableException;
 	
-	void define(SpxSymbolTableEntry entry, ILogger logger) ;
+	INamespace define(SpxSymbolTableEntry entry, ILogger logger) ;
     
 	SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Wed Oct 12 18:48:45 2011	(r23447)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Wed Oct 12 20:28:46 2011	(r23448)
@@ -148,7 +148,12 @@
 	 * @throws IOException
 	 */
 	public void commit() throws IOException {
-		_recordManager.commit(); 
+		
+		if( Utils.DEBUG) { this.spxSymbolTable().printSymbols("commit");} 
+		if(!this.IsClosed()){
+			this.spxSymbolTable().commit();
+			_recordManager.commit();
+		}	
 	}
 	
 	/**
@@ -156,7 +161,7 @@
 	 * 
 	 * @throws IOException
 	 */
-	void close() throws IOException { _recordManager.close(); }
+	void close() throws IOException { if(!this.IsClosed()) _recordManager.close(); }
 	
 	/* (non-Javadoc)
 	 * @see org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager#commitAndClose()

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Wed Oct 12 18:48:45 2011	(r23447)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Wed Oct 12 20:28:46 2011	(r23448)
@@ -45,7 +45,7 @@
 				});
 
 		if(Utils.DEBUG){
-			printSymbols();
+			printSymbols("init");
 		}	
 	}
 	
@@ -54,10 +54,10 @@
 	 * 
 	 * @throws IOException
 	 */
-	public void printSymbols() throws IOException{
+	public void printSymbols(String state) throws IOException{
 		FileWriter fstream = new FileWriter("c:/temp/log/symbols"+ now("yyyy-MM-dd")+".txt" , true);
 		BufferedWriter out = new BufferedWriter(fstream);
-		out.write("Logging state of Symbol-Table at :" + now("yyyy-MM-dd HH.mm.ss"));
+		out.write("---Logging [" +state+ "] state of Symbol-Table at :" + now("yyyy-MM-dd HH.mm.ss")+":----\n");
 		try
 		{	
 			if(namespaces != null){
@@ -151,10 +151,6 @@
 	public boolean containsNamespace(INamespace namespace) { return this.containsNamespace(namespace.namespaceUri());}
 
 	public void clear(){  
-		for( INamespace ns  : namespaces.values()){
-			ns.clear();
-		}
-			
 		namespaces.clear();  
 	}
 	
@@ -173,7 +169,7 @@
 		_manager.logMessage(SRC, "defineSymbol | defining symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symTableEntry.key + " Value : "+ symTableEntry.value);	
 		ensureActiveNamespaceLoaded(namespaceId);
 	
-		_activeNamespace.define(symTableEntry, facade.persistenceManager()); 
+		_activeNamespace = _activeNamespace.define(symTableEntry, facade.persistenceManager()); 
 	}
 	
 	private void ensureActiveNamespaceUnloaded(IStrategoList namespaceId){
@@ -182,8 +178,16 @@
 			_activeNamespace = null;
 		}
 	}
+	
+	public void commit() {
+		if(_activeNamespace != null) {
+			this.namespaces.put(_activeNamespace.namespaceUri(), _activeNamespace);
+		}
+	}
 	private void ensureActiveNamespaceLoaded(IStrategoList namespaceId) throws SpxSymbolTableException{
-		if(_activeNamespace== null ||!_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
+		if(_activeNamespace == null ||!_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
+			commit(); 
+			
 			//Keeping a transient reference to the current/active Namespace
 			//More likely that there are other symbols to be defined in the
 			//current and active namespace. In that case, it will imporve 
@@ -194,6 +198,7 @@
 				throw new SpxSymbolTableException("Unknown namespaceId: "+ namespaceId+". Namespace can not be resolved from symbol-table") ;
 			}
 		}
+		
 	}
 
 	public Iterable<SpxSymbol> resolveSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Oct 12 18:48:45 2011	(r23447)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Wed Oct 12 20:28:46 2011	(r23448)
@@ -54,7 +54,7 @@
 				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
 					// Adding a new entry of the facade for the project 
 					// in the registry. 
-					_facadeRegistry.add(projectName, (ITermFactory)objects[0], (IOAgent)objects[1]) ;
+					_facadeRegistry.initFacade(projectName, (ITermFactory)objects[0], (IOAgent)objects[1]) ;
 					
 				}
 			}.executeCommnad(projectName, termFactory , agent);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Wed Oct 12 18:48:45 2011	(r23447)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Wed Oct 12 20:28:46 2011	(r23448)
@@ -28,7 +28,7 @@
 	 * @param termFactory
 	 * @throws Exception 
 	 */
-	public void add(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent) throws Exception
+	public void initFacade(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent) throws Exception
 	{	
 		SpxSemanticIndexFacade fac = null;
 		String projectNameString  = asJavaString(projectName);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java	Wed Oct 12 18:48:45 2011	(r23447)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java	Wed Oct 12 20:28:46 2011	(r23448)
@@ -71,11 +71,39 @@
 		System.out.println();
 	}
 }
+interface IPerson{
+	public String getName();
+	public MultiValuePersistentTable1 getMembers() ;
+	public void setAddresses() ;
+}
+
+class Employee extends PersonBase implements Serializable, IPerson{
+
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = -2742987981816165179L;
+	public Employee(String name, Address adress,String fatherName) {
+		super(name, adress, fatherName);
+	}
+	@Override
+	public void setAddresses() 
+	{
+		addAddress(new Address("First street1"+ctr++, "Athlone","Ireland"));
+	}
+	
+	private void addAddress( Address address){
+		this.getMembers().define("address", address);
+		
+	}
+	
+}
 
-class PersonBase  implements Serializable
+class PersonBase  implements Serializable, IPerson
 {
 	private static final long serialVersionUID = 8846122082882116001L;
-
+	
+	public static int ctr = 0 ;
 	/** field used for person identification (primary key)**/
 	public String name;
 	
@@ -85,11 +113,33 @@
 		this.fatherName = fatherName;
 	}
 	
-	 MultiValuePersistentTable1 members = new MultiValuePersistentTable1();
+	MultiValuePersistentTable1 members = new MultiValuePersistentTable1();
 	
+
 	public MultiValuePersistentTable1 getMembers() { return members;}
+
+	/**
+	 * @return the name
+	 */
+	public String getName() {
+		return name;
+	}
+	
+	public void setAddresses() 
+	{
+		addAddress(new Address("First street1"+ctr++, "Athlone","Ireland"));
+		addAddress(new Address("First street2"+ctr++, "Athlone","Ireland"));
+		addAddress(new Address("First street3"+ctr++, "Athlone","Ireland"));
+		
+	}
+	
+	private void addAddress( Address address){
+		this.getMembers().define("address", address);
+		
+	}
 }
 
+
 class Person extends PersonBase implements Serializable{
 	
 	/**
@@ -115,7 +165,6 @@
 		return name == null? 0 : name.hashCode();
 	}
 
-
 	public boolean equals(Object obj) {
 		if (this == obj)
 			return true;
@@ -130,18 +179,6 @@
 		return true;
 	}
 	
-	public void setAddresses() 
-	{
-		addAddress(new Address("First street1", "Athlone","Ireland"));
-		addAddress(new Address("First street2", "Athlone","Ireland"));
-		addAddress(new Address("First street3", "Athlone","Ireland"));
-		
-	}
-	
-	private void addAddress( Address address){
-		this.getMembers().define("address", address);
-		
-	}
 }
 
 class Address implements Serializable{
@@ -168,11 +205,11 @@
 
 public class JdbmApiTests {
 	public static void main(String[] args) throws IOException {
-		String recDbName  = "personDBxx1234665";
+		String recDbName  = "personDBxx12346657";
 		//init Record Manager and dao
 		RecordManager recman = RecordManagerFactory.createRecordManager(recDbName);
 		
-		PrimaryHashMap<String,Person> personsByName = recman.hashMap("personsByName");
+		PrimaryHashMap<String,IPerson> personsByName = recman.hashMap("personsByName1");
 		if(personsByName.size() > 0)
 			personsByName.clear();
 		
@@ -182,30 +219,42 @@
 				null);
 		patrick.setAddresses(); 
 		personsByName.put(patrick.name, patrick);
-		
+		recman.commit();
 		patrick = new Person("Patrick Moore2", 
 				new Address("First street", "Athlone","Ireland"),
 				null);
-		patrick.setAddresses(); 
-		personsByName.put(patrick.name, patrick);
+		patrick.setAddresses();
+		recman.commit();
+		
+		Employee emp = new Employee("Patrick EMP", 
+				new Address("First street", "Athlone","NL"),
+				null);
+		emp.setAddresses();
+		emp.setAddresses();
+		personsByName.put(emp.getName(), emp);
+		
+		personsByName.get("Patrick EMP").setAddresses();
+		emp.setAddresses();
+		
+		//personsByName.put(emp.getName(), emp);
 		recman.commit();
 		
-		personsByName.get("Patrick Moore").getMembers().logEntries();
+		//personsByName.get("Patrick Moore").getMembers().logEntries();
 		recman.close();
 		recman = null;
 		
 		RecordManager recman2= RecordManagerFactory.createRecordManager(recDbName);
-		PrimaryHashMap<String,Person> personsByName2 = recman2.hashMap("personsByName");
+		PrimaryHashMap<String,IPerson> personsByName2 = recman2.hashMap("personsByName1");
 		
 		System.out.println("Number of persons: "+personsByName2.size());
 		
 		
 		
-		System.out.println("Persons with name Patrick Moore: "+personsByName2.get("Patrick Moore"));
+		System.out.println("Persons with name Patrick EMP: "+personsByName2.get("Patrick EMP"));
 		
-		Person p = personsByName2.get("Patrick Moore");
+		IPerson p = personsByName2.get("Patrick EMP");
 		
-		System.out.println("Found : " +p.name); 
+		System.out.println("Found : " +p.getName()); 
 		p.getMembers().logEntries();
 		
 		recman2.close();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct 12 18:48:45 2011	(r23447)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Wed Oct 12 20:28:46 2011	(r23448)
@@ -54,7 +54,7 @@
 		
 		projectNameTerm = termFactory().makeString(_projectName);
 	
-		_registry.add(projectNameTerm, termFactory(), ioAgent()); 
+		_registry.initFacade(projectNameTerm, termFactory(), ioAgent()); 
 		_facade = _registry.getFacade(projectNameTerm);
 		_facade.reinitSymbolTable();
 		
@@ -645,7 +645,7 @@
 		
 		_registry.closePersistenceManager(this.projectNameTerm);
 		
-		_registry.add(projectNameTerm, termFactory(), ioAgent());
+		_registry.initFacade(projectNameTerm, termFactory(), ioAgent());
 		SpxSemanticIndexFacade tfacade = _registry.getFacade(this.projectNameTerm);
 		
 		//Resolving Symbol in Package 3

From M.A.Akhter at student.tudelft.nl  Thu Oct 13 10:25:12 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 13 Oct 2011 08:25:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23449 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20111013082513.01AF97F8006@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Oct 13 08:25:12 2011
New Revision: 23449
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23449&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolKey.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Wed Oct 12 20:28:46 2011	(r23448)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Thu Oct 13 08:25:12 2011	(r23449)
@@ -8,8 +8,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import jdbm.PrimaryMap;
-
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -81,7 +79,16 @@
 	}
 	
 	protected static List<SpxSymbol> lookupSymbols(Map<SpxSymbolKey, List<SpxSymbol>> members, IStrategoTerm id){
-		
+//		String name = "John Smith"; // For example
+//		Map<String, Student> students_ = new HashMap<String, Sandbox.Student>();
+//
+//		for (Map.Entry<String, Student> entry : students_.entrySet()) {
+//		    // If the entry key is "John*", this code will match if name = "John Smith"
+//		    if (name.matches("^.*" + entry.getKey().replace("*", ".*") + ".*$")) {
+//		        // do something with the matching map entry
+//		        System.out.println("Student " + entry.getValue() + " matched " + entry.getKey());
+//		    }
+//		}
 		SpxSymbolKey key = new SpxSymbolKey(id);
 		List<SpxSymbol> resolvedSymbols = members.get(key);
 		
@@ -100,12 +107,12 @@
 		return null;
 	}
 	
-	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException{
-		facade.persistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
+	public SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException{
+		facade.persistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		assert type instanceof IStrategoConstructor : "Type is expected to be IStrategoConstructor" ;
 			
-		SpxSymbol result = lookupSymbol(getMembers(), id , type);
+		SpxSymbol result = lookupSymbol(getMembers(), searchingFor , type);
 		if(result!=null)
 			return result;
 	
@@ -117,19 +124,19 @@
 		if( namespace  != null) {
 			//checks whether searching to the enclosing scope is allowed.
 			if( shouldSearchInEnclosingNamespace( searchedBy))
-				return namespace.resolve(id, type, this, facade);
+				return namespace.resolve(searchingFor, type, this, facade);
 		}	 
 		
 		return null; // symbol is not found
 	}
 	
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
 		
-		facade.persistenceManager().logMessage(this.src, "resolveAll(Base) | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
+		facade.persistenceManager().logMessage(this.src, "resolveAll(Base) | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
-		List<SpxSymbol> lookupResult = lookupSymbols(getMembers() , id);
+		List<SpxSymbol> lookupResult = lookupSymbols(getMembers() , searchingFor);
 		retResult.addAll(lookupResult);
 		
 		INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
@@ -139,7 +146,7 @@
 		if( namespace  != null && !namespace.equals(this)){
 			//checks whether searching to the enclosing scope is allowed.
 			if( shouldSearchInEnclosingNamespace(searchedBy)){	
-				Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(id, this ,facade);
+				Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(searchingFor, this ,facade);
 				retResult.addAll(parentResults);
 			}
 		}	 
@@ -187,7 +194,7 @@
 	
 	/**
 	 * Base Condition of the lookup : 
-	 * Allow search enclosing Namesapce only if searchedBy is not enclosing Namespace. 
+	 * Allow search enclosing Namespace only if searchedBy is not enclosing Namespace. 
 	 *  
 	 * @param searchedBy
 	 * @return True if enclosing Namespace != searachedBy  ; otherwise false.

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Wed Oct 12 20:28:46 2011	(r23448)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Thu Oct 13 08:25:12 2011	(r23449)
@@ -20,7 +20,7 @@
 	
 	INamespace define(SpxSymbolTableEntry entry, ILogger logger) ;
     
-	SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
+	SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
     
 	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Wed Oct 12 20:28:46 2011	(r23448)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Oct 13 08:25:12 2011	(r23449)
@@ -34,8 +34,6 @@
 	private final TermAttachmentStripper _stripper;
 	private final TermAttachmentSerializer _termAttachmentSerializer;
 	private final TermConverter _converter;
-	private static final String All     = "*";
-	private static final String CURRENT = ".";
 	
 	public TermAttachmentSerializer getTermAttachmentSerializer() {return _termAttachmentSerializer;}
 
@@ -325,13 +323,13 @@
 		Iterable<SpxSymbol> spxSymbols = new ArrayList<SpxSymbol>();
 		
 		if (typeCtor != null) {
-			if(searchMode.equalsIgnoreCase(All))
+			if(searchMode.equalsIgnoreCase(Utils.All))
 			{
 				spxSymbols = resolveSymbols( 
 							(IStrategoAppl)searchCriteria.get(0),
 							searchCriteria.get(1),
 							typeCtor);
-			}else if(searchMode.equalsIgnoreCase(CURRENT)){
+			}else if(searchMode.equalsIgnoreCase(Utils.CURRENT)){
 				spxSymbols = resolveSymbol( 
 								(IStrategoAppl)searchCriteria.get(0),
 								searchCriteria.get(1),
@@ -556,7 +554,7 @@
 		String filepathString = asJavaString(filePath);
 		
 		Iterable<PackageDeclaration> decls; 
-		if(All == filepathString) {
+		if(Utils.All == filepathString) {
 			decls = table.getPackageDeclarations();  //returning all the package declarations found in the current project
 		}else{
 
@@ -634,7 +632,7 @@
 		String filepathString = asJavaString(filePath);
 		
 		Iterable<ModuleDeclaration> decls; 
-		if(All == filepathString) {
+		if(Utils.All == filepathString) {
 			decls = table.getModuleDeclarations();  //returning all the package declarations found in the current project
 		}else{	
 			String absFilePath = toAbsulatePath(filePath);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolKey.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolKey.java	Wed Oct 12 20:28:46 2011	(r23448)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolKey.java	Thu Oct 13 08:25:12 2011	(r23449)
@@ -4,7 +4,7 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class SpxSymbolKey extends SpxBaseSymbol implements Serializable{
+class SpxSymbolKey extends SpxBaseSymbol implements Serializable{
 	
 	private static final long serialVersionUID = 7804281029276443583L;
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Wed Oct 12 20:28:46 2011	(r23448)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Thu Oct 13 08:25:12 2011	(r23449)
@@ -7,6 +7,8 @@
 	private Utils() {
 		
 	}
+	static final String All     = "*";
+	static final String CURRENT = ".";
 	
 	static final boolean DEBUG = true;
 	

From L.C.L.Kats at tudelft.nl  Thu Oct 13 11:37:14 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 13 Oct 2011 09:37:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23450 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: syntax trans
Message-ID: <20111013093714.BBBA2108C039@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Oct 13 09:37:14 2011
New Revision: 23450
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23450&sc=1

Log:
minor syntactic changes to play nicer with Stratego expressions

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Oct 13 08:25:12 2011	(r23449)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Oct 13 09:37:14 2011	(r23450)
@@ -69,14 +69,19 @@
     ID                                   -> TestStratego {reject}
     INT                                  -> TestStratego {reject}
     
-    "build"                              -> Term {reject}
-    "resolve"                            -> Term {reject}
-    "refactor"                           -> Term {reject}
-    "complete"                           -> Term {reject}
-    "parse"                              -> Term {reject}
-    "run"                                -> Term {reject}
-    "succeeds"                           -> Term {reject}
-    "fails"                              -> Term {reject}
+    "parse"                              -> TestKeyword
+    "fails"                              -> TestKeyword
+    "succeeds"                           -> TestKeyword
+    "file"                               -> TestKeyword
+    "build"                              -> TestKeyword
+    "resolve"                            -> TestKeyword
+    "refactor"                           -> TestKeyword
+    "complete"                           -> TestKeyword
+    "run"                                -> TestKeyword
+    "to"                                 -> TestKeyword
+    
+    TestKeyword -> Term         {reject}
+    TestKeyword -> TestStratego {reject}
 
   lexical syntax
     [\ ]+   -> OptSpace
@@ -159,6 +164,7 @@
             -> "=>" {recover, reject}
             -> "->" {recover, reject}
             -> "/" {recover, reject}
+            -> "file" {recover, reject}
 
   %% test Primitive refactoring test
   %% [[ module x entity X {} ]] refactoring rename at X input Y =>

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Oct 13 08:25:12 2011	(r23449)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Oct 13 09:37:14 2011	(r23450)
@@ -56,8 +56,8 @@
       not(spt-get-observer)
   
   check-error:
-    MarkedPlaceholder(_, _, _) -> (<id>, $[Placeholders are not yet supported; 
-                                           place a 'footer' setup block at the end of the file instead])
+    MarkedPlaceholder(_, _, _) -> (<id>, ${Placeholders of the form [[...]] are not yet supported; 
+                                           place a 'footer' setup block at the end of the file instead})
   
   check-warning:
     Test(_,description(d), i, expectations) -> (d, warnings)

From seba at informatik.uni-marburg.de  Thu Oct 13 16:03:19 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 13 Oct 2011 14:03:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23451 - in
	sugarj/trunk: compiler/org/sugarj/driver update-site
Message-ID: <20111013140319.C8AE3108C009@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Thu Oct 13 14:03:18 2011
New Revision: 23451
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23451&sc=1

Log:


Modified:
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java
   sugarj/trunk/update-site/site.xml

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Oct 13 09:37:14 2011	(r23450)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Oct 13 14:03:18 2011	(r23451)
@@ -711,13 +711,10 @@
       currentTransProg = STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(environment), strParser, strjContext, strCache, environment);
 
       return STRCommands.assimilate(currentTransProg, term, interp);
-    } catch (RuntimeException e) {
+    } catch (StrategoException e) {
       String msg = e.getClass().getName() + " " + e.getLocalizedMessage() != null ? e.getLocalizedMessage() : e.toString();
       
-      if (!(e instanceof StrategoException))
-        e.printStackTrace();
-      else
-        log.logErr(msg);
+      log.logErr(msg);
 
       setErrorMessage(term, msg);
       return term;
@@ -1157,14 +1154,9 @@
     try {
       FileCommands.deleteTempFiles(currentTransProg);
       currentTransProg = STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(environment), strParser, strjContext, strCache, environment);
-    } catch (RuntimeException e) {
+    } catch (StrategoException e) {
       String msg = e.getClass().getName() + " " + e.getLocalizedMessage() != null ? e.getLocalizedMessage() : e.toString();
-      
-      if (!(e instanceof StrategoException))
-        e.printStackTrace();
-      else
-        log.logErr(msg);
-
+      log.logErr(msg);
       setErrorMessage(lastSugaredToplevelDecl, msg);
     } finally {
       log.endTask();

Modified: sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Thu Oct 13 09:37:14 2011	(r23450)
+++ sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Thu Oct 13 14:03:18 2011	(r23451)
@@ -1,11 +1,16 @@
 package org.sugarj.driver;
+
 import static org.sugarj.driver.Environment.sep;
 import static org.sugarj.driver.FileCommands.toWindowsPath;
 import static org.sugarj.driver.Log.log;
 
 import java.io.BufferedInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PrintStream;
+import java.io.Writer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -13,6 +18,7 @@
 import java.util.List;
 import java.util.regex.Pattern;
 
+import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.spoofax.jsglr.client.imploder.IToken;
@@ -23,6 +29,7 @@
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.lang.Context;
+import org.strategoxt.lang.StrategoException;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.strj.main_strj_0_0;
 import org.sugarj.driver.caching.ModuleKey;
@@ -30,6 +37,7 @@
 import org.sugarj.driver.path.Path;
 import org.sugarj.driver.path.RelativePath;
 import org.sugarj.stdlib.StdLib;
+import org.sugarj.util.LoggingOutputStream;
 
 /**
  * This class provides methods for various SDF commands. Each
@@ -69,15 +77,41 @@
         cmd.add("-I");
         cmd.add(path.getAbsolutePath());
       }
-    
+
+    final ByteArrayOutputStream log = new ByteArrayOutputStream();
+
     try {
       // XXX strj does not create Java file with non-fresh context
       Context c = org.strategoxt.strj.strj.init();
+      
+      c.setIOAgent(new IOAgent() {
+        private final PrintStream err = new PrintStream(log, true);
+        private final Writer errWriter = new org.sugarj.util.PrintStreamWriter(err);
+        
+        public Writer getWriter(int fd) {
+            if (fd == CONST_STDERR)
+              return errWriter; 
+            else 
+              return super.getWriter(fd);
+        }
+        
+        public OutputStream internalGetOutputStream(int fd) {
+            if (fd == CONST_STDERR)
+              return err; 
+            else 
+              return super.internalGetOutputStream(fd);
+        }
+      });
+      
       c.invokeStrategyCLI(main_strj_0_0.instance, "strj", cmd.toArray(new String[cmd.size()]));
     }
     catch (StrategoExit e) {
       if (e.getValue() != 0)
-        throw new RuntimeException("STRJ failed", e);
+        throw new StrategoException("STRJ failed", e);
+    } finally {
+      if (log.size() > 0 && !log.toString().contains("Compilation succeeded"))
+        throw new StrategoException(log.toString());
+
     }
   }
   
@@ -98,12 +132,14 @@
                                           String main,
                                           Context strjContext,
                                           Collection<Path> paths) throws IOException {
+    boolean success = false;
     log.beginTask("Generating", "Generate the assimilator");
     try {
       Path dir = FileCommands.newTempDir();
       FileCommands.createDir(new RelativePath(dir, "sugarj"));
       String javaFilename = FileCommands.fileName(str).replace("-", "_");
       Path java = new RelativePath(dir, "sugarj" + sep + javaFilename + ".java");
+      log.log("calling STRJ");
       strj(str, java, main, strjContext, paths);
       
       if (!JavaCommands.javac(java, dir, paths))
@@ -115,9 +151,10 @@
       FileCommands.deleteTempFiles(dir);
       FileCommands.deleteTempFiles(java);
 
+      success = jarfile != null;
       return jarfile;
     } finally {
-      log.endTask();
+      log.endTask(success);
     }
   }
     

Modified: sugarj/trunk/update-site/site.xml
==============================================================================
--- sugarj/trunk/update-site/site.xml	Thu Oct 13 09:37:14 2011	(r23450)
+++ sugarj/trunk/update-site/site.xml	Thu Oct 13 14:03:18 2011	(r23451)
@@ -3,7 +3,7 @@
    <description name="SugarJ" url="sugarj.org/update">
       SugarJ
    </description>
-   <feature url="features/org.sugarj.editor_1.3.1.201110051528.jar" id="org.sugarj.editor" version="1.3.1.201110051528">
+   <feature url="features/org.sugarj.editor_1.3.1.201110131555.jar" id="org.sugarj.editor" version="1.3.1.201110131555">
       <category name="SugarJ"/>
    </feature>
    <category-def name="SugarJ" label="SugarJ">

From M.A.Akhter at student.tudelft.nl  Fri Oct 14 03:13:06 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 14 Oct 2011 01:13:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23452 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang
Message-ID: <20111014011306.8C082CC109@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 14 01:13:04 2011
New Revision: 23452
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23452&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java
      - copied, changed from r23415, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clear.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -28,10 +28,10 @@
 		
 		//TODO : generalize and reduce/refactor primitives
 		//primitives for index initialization and management
-		add(new SPX_index_init(spxIndex));
-		add(new SPX_index_close(spxIndex));
-		add(new SPX_index_save(spxIndex));
-		add(new SPX_index_clear(spxIndex));
+		//add(new SPX_index_init(spxIndex));
+		add(new SPX_exec_index_manage_command(spxIndex));
+		//add(new SPX_index_save(spxIndex));
+		//add(new SPX_index_clear(spxIndex));
 		
 		//primitives to index spoofaxlang compilation unit 
 		add(new SPX_index_compilation_unit(spxIndex));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -25,7 +25,11 @@
 	
 	private final NamespaceUri _currentNamespaceId; 
 	private final NamespaceUri _enclosingNamespaceId;
-	protected final IStrategoConstructor type;
+	
+	/**
+	 * Stores all the symbols from the current namespace. 
+	 * @serialField
+	 */
 	protected HashMap<SpxSymbolKey, List<SpxSymbol>> symbols;
 
 	public NamespaceUri namespaceUri() {return _currentNamespaceId;}
@@ -41,8 +45,6 @@
 		_currentNamespaceId = currentNamespace;
 		_enclosingNamespaceId = enclosingNamespace; 
 		
-		this.type = type;
-		
 		src = (_enclosingNamespaceId!= null) ? type.getName() + _currentNamespaceId.id() :  type.getName()   ; 
 			
 		symbols = new HashMap<SpxSymbolKey, List<SpxSymbol>>();
@@ -168,9 +170,11 @@
 		return resolveAll(searchingFor, type,  this, spxFacade);
 	}
 	
-	public IStrategoConstructor type() { return type; }
-
-	public Map<SpxSymbolKey, List<SpxSymbol>> getMembers(){return this.symbols;}
+	public Map<SpxSymbolKey, List<SpxSymbol>> getMembers(){
+		if(symbols == null)
+			symbols = new HashMap<SpxSymbolKey, List<SpxSymbol>>();
+		
+		return this.symbols;}
 
 	public void clear() { if(this.symbols != null) this.symbols.clear();}
 
@@ -181,10 +185,7 @@
 	
 	public INamespace getCurrentNamespace(INamespaceResolver rs) throws SpxSymbolTableException{ return _currentNamespaceId.resolve(rs); }
 	
-	
-	
 	public boolean isInternalNamespace() { return false;  }
-
 	
 	protected boolean shouldSearchInInternalNamespace( INamespace searchedBy) {
 		// If searchedBy Namespace is enclosingNamespace of CurrentNamespace 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -22,13 +22,11 @@
     
 	SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
     
-	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
-	
 	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
 	
 	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, INamespace searchedBy ,  SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
 	
-	IStrategoConstructor type();
+	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
 	
 	Map<SpxSymbolKey, List<SpxSymbol>> getMembers();
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -11,6 +11,8 @@
 
 	public void commitAndClose()  throws IOException;
 	
+	public void close()  throws IOException;
+	
 	public <V> PrimaryStoreMap <Long, V> loadStoreMap( String storeMapName);
 	
 	public <K,V> PrimaryHashMap<K,V> loadHashMap ( String mapName);
@@ -25,9 +27,11 @@
 	
 	public void commit() throws IOException;
 	
-	public boolean IsClosed();
+	public boolean isClosed();
+	
+	public void clear() throws IOException;
 	
-	public void clearAll() throws IOException;
+	public void rollback() throws IOException;
 	
 	public String getProjectName();
 	

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java (from r23415, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_close.java	Mon Oct  3 17:03:08 2011	(r23415, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -4,49 +4,36 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-/**
- * Primitive to save Spoofaxlang Semantic Index in disk and close any 
- * underlying open connection . 
- * 
- * @author Md. Adil Akhter
- * Created On : Aug 25, 2011
- */
-public class SPX_index_close extends AbstractPrimitive {
-
-	private static String NAME = "SPX_index_close";
-	private final static int PROJECT_NAME_INDEX = 0;
-	private final static int NO_ARGS = 1;
+public class SPX_exec_index_manage_command extends SpxAbstractPrimitive {
+	private static String NAME = "SPX_exec_index_manage_command";
+	private final static int NO_ARGS = 2;
+	private static int COMMAND_STRING_INDEX = 1;
 	
-	private final SpxSemanticIndex index;
-
-	public SPX_index_close(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+	public SPX_exec_index_manage_command(SpxSemanticIndex index) {
+		super(index, NAME, 0, NO_ARGS);
 	}
 	
-	/* (non-Javadoc)
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		boolean retValue = false;
-		if ( tvars.length == NO_ARGS && Tools.isTermString(tvars[PROJECT_NAME_INDEX])) {
-
-			try {
-				retValue = index.close(tvars[PROJECT_NAME_INDEX]);
-			}
-			catch(Exception ex){
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-
-			}
-		}else{
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" ] Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		}
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateStringTermAt(COMMAND_STRING_INDEX);
+	}
+	
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoString commandString = (IStrategoString)tvars[COMMAND_STRING_INDEX];
+		
+		IIndexManageCommand command = 
+			SpxIndexManager.getCommandInstance(index, commandString, getProjectPath(tvars),env.getFactory(), SSLLibrary.instance(env).getIOAgent());
 
-		return retValue;
-	}	
+		command.run();
+		return true;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clear.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clear.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clear.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -16,45 +16,17 @@
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
-public class SPX_index_clear extends AbstractPrimitive {
+public class SPX_index_clear extends SpxAbstractPrimitive {
 
 	private final static String NAME = "SPX_index_clear";
-	
-	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int NO_ARGS = 1;
 	
-	private final SpxSemanticIndex index;
-
 	public SPX_index_clear(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
-	
-	
-	
-	/* (non-Javadoc)
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
+
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		boolean retValue = false;	
-		
-		if ( (tvars.length == NO_ARGS) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]))
-		{	
-			try 
-			{
-				retValue  = index.clearall((IStrategoString)tvars[PROJECT_NAME_INDEX]);
-			}
-			catch(Exception ex)
-			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}	
-				
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return retValue;
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		return index.clearall(this.getProjectPath(tvars)); 
 	}
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -6,6 +6,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -13,56 +14,39 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
- * Primitive to index spoofaxlang CompilationUnit
+ * Primitive to index spoofaxlang SpxCompilationUnit
  * 
  * @author Md. Adil Akhter
- * Created On : Aug 25, 2011
  */
-public class SPX_index_compilation_unit extends AbstractPrimitive {
-
+public class SPX_index_compilation_unit extends SpxAbstractPrimitive {
 	private static String NAME = "SPX_index_compilation_unit";
 	
-	private static int PROJECT_NAME_INDEX = 0;
 	private static int COMPILATION_UNIT_PATH_INDEX = 1;
-	private static int COMPILATION_UNIT_AST_INDEX = 2;
-	
+	private static int COMPILATION_UNIT_AST_INDEX  = 2;
 	private final static int NO_ARGS = 3;
 	
-	private final SpxSemanticIndex index;
-
 	public SPX_index_compilation_unit(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
-
-	/* (non-Javadoc)
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
+	
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) 
-	{
-		boolean successStatement = false;
-		 
-		if (Tools.isTermString(tvars[PROJECT_NAME_INDEX])
-				&& Tools.isTermString(tvars[COMPILATION_UNIT_PATH_INDEX])
-				&& Tools.isTermAppl(tvars[COMPILATION_UNIT_AST_INDEX])) {
-			
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[COMPILATION_UNIT_PATH_INDEX];
-			IStrategoAppl  compilationUnitRTree = (IStrategoAppl)tvars[COMPILATION_UNIT_AST_INDEX];
-			
-			try {
-				successStatement  = index.indexCompilationUnit(projectName ,  spxCompilationUnitPath ,  compilationUnitRTree);
-			} 
-			catch(Exception ex)
-			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]   Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-			
-		return successStatement;
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateStringTermAt(COMPILATION_UNIT_PATH_INDEX)
+					.validateApplTermAt(COMPILATION_UNIT_AST_INDEX);
 	}
 
+    /** 
+     * Retrieve Spoofaxlang ModuleDeclaration with Module ID 
+	 * specified in {@code tvars}. 
+     * in the following a Package or a Compilation Unit specified in \
+     * {@code tvars}.     
+     */
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[COMPILATION_UNIT_PATH_INDEX];
+		IStrategoAppl  compilationUnitRTree = (IStrategoAppl)tvars[COMPILATION_UNIT_AST_INDEX];
+		
+		return index.indexCompilationUnit(getProjectPath(tvars),  spxCompilationUnitPath ,  compilationUnitRTree);
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -3,8 +3,10 @@
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
@@ -14,48 +16,33 @@
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
-public class SPX_index_get_compilation_unit extends AbstractPrimitive {
+public class SPX_index_get_compilation_unit extends SpxAbstractPrimitive {
 
 	private static String NAME = "SPX_index_get_compilation_unit";
-	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int COMP_UNIT_PATH_INDEX = 1;
-	
 	private final static int NO_ARGS = 2;
-	private final SpxSemanticIndex index;
-
+	
 	public SPX_index_get_compilation_unit(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
-	}	
-
-	/* Retrieve Spoofaxlang Compilation Unit mapped by absolute path.  
-	 * 
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
+		super(index, NAME, 0, NO_ARGS);
+	}
+	
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){ 
-		boolean successStatement = false;
-		
-		if(tvars.length != NO_ARGS)
-			return successStatement;
-		
-		if ( Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermString(tvars[COMP_UNIT_PATH_INDEX])) 
-		{
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[COMP_UNIT_PATH_INDEX];
-			try {
-				IStrategoTerm t = index.getCompilationUnit(projectName ,  spxCompilationUnitPath);
-				env.setCurrent(t);
-				successStatement = true;
-			} 
-			catch(Exception ex){
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateStringTermAt(COMP_UNIT_PATH_INDEX);
 	}
 
+    /** 
+     * Retrieve Spoofaxlang ModuleDeclaration with Module ID 
+	 * specified in {@code tvars}. 
+     * in the following a Package or a Compilation Unit specified in \
+     * {@code tvars}.     
+     */
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[COMP_UNIT_PATH_INDEX];
+		IStrategoTerm t = index.getCompilationUnit(getProjectPath(tvars),  spxCompilationUnitPath);
+		env.setCurrent(t);
+		return true;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -4,6 +4,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -16,49 +17,31 @@
  * @author Md. Adil Akhter
  * Created On : Sep 11, 2011
  */
-public class SPX_index_get_imports extends AbstractPrimitive {
+public class SPX_index_get_imports extends SpxAbstractPrimitive {
 
 	private static String NAME = "SPX_index_get_imports";
-	private static int PROJECT_NAME_INDEX = 0;
 	private static int NAMESPACE_ID_INDEX = 1;
-	
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-
 	public SPX_index_get_imports(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
 	
-	/* Retrieve Spoofaxlang ModuleDeclaration with Module ID 
-	 * specified in {@code tvars}.    
-	 * 
-	 * {@code tvars} contains name of the project and typed qualified ModuleID  
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		boolean successStatement = false;
-		if ( (NO_ARGS == tvars.length) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[NAMESPACE_ID_INDEX])) 
-		{
-			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl namespaceID = (IStrategoAppl)tvars[NAMESPACE_ID_INDEX];
-			try {
-				IStrategoTerm t = index.getImports(projectName, namespaceID);
-				env.setCurrent(t);
-				successStatement = true;
-			} 
-			catch(Exception ex)
-			{
-				// Logging any exception throw from the underlying symbol table. 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Incokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(NAMESPACE_ID_INDEX);
 	}
 
+    /** 
+     * Retrieve Spoofaxlang {@code ImportDeclaratons} in a specific namespace.
+     * 
+     */
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl namespaceID = (IStrategoAppl)tvars[NAMESPACE_ID_INDEX];
+		IStrategoTerm t = index.getImports(getProjectPath(tvars), namespaceID);
+		env.setCurrent(t);
+		return true;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -4,6 +4,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -16,51 +17,31 @@
  * @author Md. Adil Akhter
  * Created On : Sep 11, 2011
  */
-public class SPX_index_get_language_descriptor extends AbstractPrimitive {
+public class SPX_index_get_language_descriptor extends SpxAbstractPrimitive {
 
 	private static String NAME = "SPX_index_get_language_descriptor";
-	
-	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int PACKAGE_ID_INDEX = 1;
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-
-	
 	public SPX_index_get_language_descriptor(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
 	
-	/* Retrieve Spoofaxlang LangaugeDescriptor for a specified Package. 
-	 * The typed qualified PackageID is specified in {@code tvars} 
-	 *
-	 * (non-Javadoc)
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
-		boolean successStatement = false;
-		
-		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[PACKAGE_ID_INDEX])) 
-		{
-			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl typedPackageIdQName = (IStrategoAppl)tvars[PACKAGE_ID_INDEX];
-			try {
-				IStrategoTerm t = index.getLanguageDescriptor(projectName, typedPackageIdQName);
-				env.setCurrent(t);
-				successStatement = true;
-			} 
-			catch(Exception ex)
-			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-	
-		return successStatement;
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(PACKAGE_ID_INDEX);
 	}
 
+    /** 
+     * Retrieve Spoofaxlang LangaugeDescriptor for a specified Package. 
+	 * The typed qualified PackageID is specified in {@code tvars}
+     */
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl typedPackageIdQName = (IStrategoAppl)tvars[PACKAGE_ID_INDEX];
+		IStrategoTerm t = index.getLanguageDescriptor(getProjectPath(tvars), typedPackageIdQName);
+		env.setCurrent(t);
+		return true;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -4,6 +4,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -16,49 +17,31 @@
  * @author Md. Adil Akhter
  * Created On : Sep 11, 2011
  */
-public class SPX_index_get_module_declaration extends AbstractPrimitive {
+public class SPX_index_get_module_declaration extends SpxAbstractPrimitive {
 
 	private static String NAME = "SPX_index_get_module_declaration";
-	private static int PROJECT_NAME_INDEX = 0;
 	private static int MODULE_ID_INDEX = 1;
-	
 	private final static int NO_ARGS = 2;
-	
-	private final SpxSemanticIndex index;
 
 	public SPX_index_get_module_declaration(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
 	
-	/* Retrieve Spoofaxlang ModuleDeclaration with Module ID 
-	 * specified in {@code tvars}.    
-	 * 
-	 * {@code tvars} contains name of the project and typed qualified ModuleID  
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		boolean successStatement = false;
-		if ( (NO_ARGS == tvars.length) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[MODULE_ID_INDEX])) 
-		{
-			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl typedModuleQName = (IStrategoAppl)tvars[MODULE_ID_INDEX];
-			try {
-				IStrategoTerm t = index.getModuleDeclaration(projectName, typedModuleQName);
-				env.setCurrent(t);
-				successStatement = true;
-			} 
-			catch(Exception ex)
-			{
-				// Logging any exception throw from the underlying symbol table. 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Incokation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(MODULE_ID_INDEX);
 	}
 
+    /** 
+     * Retrieve Spoofaxlang ModuleDeclaration with Module ID 
+	 * specified in {@code tvars}.      
+     */
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl typedModuleQName = (IStrategoAppl)tvars[MODULE_ID_INDEX];
+		IStrategoTerm t = index.getModuleDeclaration(getProjectPath(tvars), typedModuleQName);
+		env.setCurrent(t);
+		return true;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -4,6 +4,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -14,48 +15,31 @@
  * Primitive to retrieve ModuleDeclarations from {@link SpxSemanticIndex}
  * 
  * @author Md. Adil Akhter
- * Created On : Sep 11, 2011
  */
-public class SPX_index_get_module_declarations_of extends AbstractPrimitive {
-
-    private static String NAME = "SPX_index_get_module_declarations_of";
-    private static int PROJECT_NAME_INDEX = 0;
-    private static int RES_INDEX = 1;
+public class SPX_index_get_module_declarations_of extends SpxAbstractPrimitive {
 
+    private final static String NAME = "SPX_index_get_module_declarations_of";
+    private final static int RES_INDEX = 1;
     private final static int NO_ARGS = 2;
 
-    private final SpxSemanticIndex index;
-
     public SPX_index_get_module_declarations_of(SpxSemanticIndex index) {
-	super(NAME, 0, NO_ARGS);
-	this.index = index;
+    	super(index, NAME, 0, NO_ARGS);
     }
-	
-    /* Retrieve Spoofaxlang ModuleDeclarations enclosed in the following resource - {@code tvars}.    
-     * 
-     * {@code tvars} contains name of the project and typed qualified ModuleID  
-     * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-     */
+    
     @Override
-    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-    	boolean successStatement = false;
-
-    	if ((tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX])) 
-    	{
-    		IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-    		try {
-    			IStrategoTerm retTerm = index.getModuleDeclarations(projectName, tvars[RES_INDEX]);
-    			successStatement = true;
-    			env.setCurrent(retTerm);
-    		}
-    		catch(Exception ex)
-    		{
-    			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-    		}
-    	}
-    	else
-    		SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-
-    	return successStatement;
-    }
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars);
+					
+	}
+
+    /* Retrieve Spoofaxlang ModuleDeclarations enclosed 
+     * in the following a Package or a Compilation Unit specified in 
+     * {@code tvars}.  
+     */
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoTerm retTerm = index.getModuleDeclarations(getProjectPath(tvars), tvars[RES_INDEX]);
+		env.setCurrent(retTerm);
+		return true;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -1,57 +1,35 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class SPX_index_get_module_definition extends AbstractPrimitive {
+public class SPX_index_get_module_definition extends SpxAbstractPrimitive {
 	private static String NAME = "SPX_index_get_module_definition";
-	private static int PROJECT_NAME_INDEX = 0;
 	private static int MODULE_ID_INDEX = 1;
-
 	private final static int NO_ARGS = 2;
 
-	private final SpxSemanticIndex index;
-
 	public SPX_index_get_module_definition(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
 
-	/* Retrieve Spoofaxlang ModuleDefinition with Module ID 
-	 * specified in {@code tvars}.    
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(MODULE_ID_INDEX);
+	}
+	
+	/* Retrieve ModuleDefinition indexed by specified ModuleId mentioned 
+	 * in {@code tvars} 
 	 * 
-	 * {@code tvars} contains name of the project and typed qualified ModuleID  
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 * @see org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive#executePrimitive(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
 	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		boolean successStatement = false;
-	
-		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[MODULE_ID_INDEX])) 
-		{
-			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl typedModuleQName = (IStrategoAppl)tvars[MODULE_ID_INDEX];
-		
-			try {
-				IStrategoTerm t = index.getModuleDefinition(projectName, typedModuleQName);
-				env.setCurrent(t);
-				successStatement = true;
-			} 
-			catch(Exception ex)
-			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-
-		return successStatement;
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl typedModuleQName = (IStrategoAppl)tvars[MODULE_ID_INDEX];
+		IStrategoTerm t = index.getModuleDefinition(getProjectPath(tvars), typedModuleQName);
+		env.setCurrent(t);
+		return true;
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -4,6 +4,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -14,48 +15,30 @@
  * @author Md. Adil Akhter
  * Created On : Sep 11, 2011
  */
-public class SPX_index_get_package_declaration extends AbstractPrimitive {
-
+public class SPX_index_get_package_declaration extends SpxAbstractPrimitive {
 	private static String NAME = "SPX_index_get_package_declaration";
-	private static int PROJECT_NAME_INDEX = 0;
 	private static int PACKAGE_ID_INDEX = 1;
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-
 	public SPX_index_get_package_declaration(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
 	
-	/* Retrieve Spoofaxlang ModuleDeclaration with Module ID 
-	 * specified in {@code tvars}.    
-	 * 
-	 * {@code tvars} contains name of the project and typed qualified ModuleID  
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		boolean successStatement = false;
-		
-		if ( (tvars.length == NO_ARGS) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermAppl(tvars[PACKAGE_ID_INDEX])) 
-		{
-			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl typedPackageIdQName = (IStrategoAppl)tvars[PACKAGE_ID_INDEX];
-			try {
-				IStrategoTerm t = index.getPackageDeclaration(projectName, typedPackageIdQName);
-				env.setCurrent(t);
-				
-				successStatement = true;
-			} 
-			catch(Exception ex){
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(PACKAGE_ID_INDEX);
 	}
 
+	/* Gets a PackageDeclaration indexed by a package ID.
+	 *  
+	 * @see org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive#executePrimitive(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
+	 */
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl typedPackageIdQName = (IStrategoAppl)tvars[PACKAGE_ID_INDEX];
+		IStrategoTerm t = index.getPackageDeclaration(getProjectPath(tvars), typedPackageIdQName);
+		env.setCurrent(t);
+		return true;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -1,12 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
@@ -14,49 +9,29 @@
  * @author Md. Adil Akhter
  * Created On : Sep 11, 2011
  */
-public class SPX_index_get_package_declarations_of extends AbstractPrimitive {
-
+public class SPX_index_get_package_declarations_of extends SpxAbstractPrimitive {
 	private static String NAME = "SPX_index_get_package_declarations_of";
-	private static int PROJECT_NAME_INDEX = 0;
 	private static int COMPILATION_UNIT_URI_INDEX = 1;
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-
 	public SPX_index_get_package_declarations_of(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
+	}
+	
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateStringTermAt(COMPILATION_UNIT_URI_INDEX);
 	}
 	
-	/* Retrieve Spoofaxlang ModuleDeclaration with Module ID 
+	/* Retrieve Spoofaxlang  PackageDeclarations of a SpxCompilationUnit 
 	 * specified in {@code tvars}.    
-	 * 
-	 * {@code tvars} contains name of the project and typed qualified ModuleID  
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
 	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		boolean successStatement = false;
-		
-		if ( (tvars.length == NO_ARGS) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermString(tvars[COMPILATION_UNIT_URI_INDEX])) 
-		{
-			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoString  compilationUnitUri= (IStrategoString)tvars[COMPILATION_UNIT_URI_INDEX];
-			try {
-				IStrategoTerm t = index.getPackageDeclarationsByUri(projectName, compilationUnitUri);
-				env.setCurrent(t);
-				
-				successStatement = true;
-			} 
-			catch(Exception ex){
-				// Logging any exception throw from the underlying symbol table. 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invokation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoString  compilationUnitUri= (IStrategoString)tvars[COMPILATION_UNIT_URI_INDEX];
+		IStrategoTerm t = index.getPackageDeclarationsByUri(getProjectPath(tvars), compilationUnitUri);
+		env.setCurrent(t);
+		return true;
 	}
-
-}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -3,59 +3,37 @@
  */
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.asJavaString;
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
-import static org.spoofax.interpreter.core.Tools.isTermString;
-
-import java.net.URI;
-
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Md. Adil Akhter
  *
  */
-public class SPX_index_import_references extends AbstractPrimitive {
+public class SPX_index_import_references extends SpxAbstractPrimitive {
 
 	private final static String NAME = "SPX_index_import_references";
-	
-	private final static int PROJECT_NAME_INDEX    = 0;
 	private final static int IMPORT_REFERENCES_INDEX = 1;
-	
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-	
 	public SPX_index_import_references(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
+	
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(IMPORT_REFERENCES_INDEX);
+	}
+
 
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		boolean successStatement = false;
-		
-		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[IMPORT_REFERENCES_INDEX])) {
-			
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl importReferences   = (IStrategoAppl) tvars[IMPORT_REFERENCES_INDEX];
-			
-			try{
-				successStatement = index.indexImportReferences(projectName, importReferences);
-			}
-			catch(Exception ex){ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;	
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl importReferences   = (IStrategoAppl) tvars[IMPORT_REFERENCES_INDEX];
+		return index.indexImportReferences(getProjectPath(tvars), importReferences);
 	}
+	
+	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -1,11 +1,8 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.Tools;
-import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
@@ -14,39 +11,17 @@
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
-public class SPX_index_init extends AbstractPrimitive {
+public class SPX_index_init extends SpxAbstractPrimitive {
 
 	private static String NAME = "SPX_index_init";
-	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int NO_ARGS = 1;
 	
-	private final SpxSemanticIndex index;
-
 	public SPX_index_init(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS );
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS );
 	}
 
-	/* (non-Javadoc)
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		boolean retStatement  = false;
-
-		if(tvars.length == NO_ARGS && Tools.isTermString(tvars[PROJECT_NAME_INDEX])) {
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			try{
-				retStatement   = index.initialize(projectName , env.getFactory(), SSLLibrary.instance(env).getIOAgent());
-			}
-			catch(Exception ex){
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+" Invocation failed . ] Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-
-		return retStatement;
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		return index.initialize(this.getProjectPath(tvars), env.getFactory(), SSLLibrary.instance(env).getIOAgent());  
 	}
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -8,6 +8,7 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -18,40 +19,24 @@
  * @author Md. Adil Akhter
  *
  */
-public class SPX_index_language_descriptor extends AbstractPrimitive {
-
+public class SPX_index_language_descriptor extends SpxAbstractPrimitive {
 	private static String NAME = "SPX_index_language_descriptor";
-	private static int PROJECT_NAME_INDEX = 0;
 	private static int LANGUAGE_DESCRIPTOR_INDEX = 1;
 	private final static int NO_ARGS = 2;
 
-	private final SpxSemanticIndex index;
-
 	public SPX_index_language_descriptor(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
-
+	
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		boolean successStatement = false;
-
-		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[LANGUAGE_DESCRIPTOR_INDEX])) {
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(LANGUAGE_DESCRIPTOR_INDEX);
+	}
 
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl languageDescriptor= (IStrategoAppl) tvars[LANGUAGE_DESCRIPTOR_INDEX];
-			try
-			{
-				successStatement = index.indexLanguageDescriptor(projectName, languageDescriptor);
-			}
-			catch(Exception ex)
-			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;	
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl languageDescriptor= (IStrategoAppl) tvars[LANGUAGE_DESCRIPTOR_INDEX];
+		return index.indexLanguageDescriptor(getProjectPath(tvars), languageDescriptor);
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -3,56 +3,29 @@
  */
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
-import static org.spoofax.interpreter.core.Tools.isTermString;
-
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-/**
- * @author Md. Adil Akhter
- *
- */
-public class SPX_index_module_definition extends AbstractPrimitive {
-
+public class SPX_index_module_definition extends SpxAbstractPrimitive  {
 	private static String NAME = "SPX_index_module_definition";
-	private static int PROJECT_NAME_INDEX = 0;
 	private static int MODULE_DEF_INDEX = 1;
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-
 	public SPX_index_module_definition(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
+	}
+	
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(MODULE_DEF_INDEX);
 	}
 
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		boolean successStatement = false;
-		
-		if ( (tvars.length == NO_ARGS) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[MODULE_DEF_INDEX])) {
-			
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl moduleDef = (IStrategoAppl) tvars[MODULE_DEF_INDEX ];
-			
-			try
-			{
-				successStatement = index.indexModuleDefinition(projectName, moduleDef);
-			}
-			catch(Exception ex)
-			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;	
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl moduleDef = (IStrategoAppl) tvars[MODULE_DEF_INDEX];
+		return index.indexModuleDefinition(this.getProjectPath(tvars), moduleDef);
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -3,61 +3,33 @@
  */
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.asJavaString;
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
-import static org.spoofax.interpreter.core.Tools.isTermString;
-
-import java.net.URI;
-
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Md. Adil Akhter
  *
  */
-public class SPX_index_package_declaration extends AbstractPrimitive {
+public class SPX_index_package_declaration extends SpxAbstractPrimitive {
 
 	private static String NAME = "SPX_index_package_declaration";
-	
-	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int PACKAGE_DECL_INDEX = 1;
-	
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-	
 	public SPX_index_package_declaration(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
-
+	
+	@Override protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(PACKAGE_DECL_INDEX);	
+	};
+	
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		boolean successStatement = false;
-		
-		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[PACKAGE_DECL_INDEX])) {
-			
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl packageDecl   = (IStrategoAppl) tvars[PACKAGE_DECL_INDEX];
-			
-			try
-			{
-				successStatement = index.indexPackageDeclaration(projectName, packageDecl);
-			}
-			catch(Exception ex)
-			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;	
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl packageDecl   = (IStrategoAppl) tvars[PACKAGE_DECL_INDEX];
+		return index.indexPackageDeclaration(getProjectPath(tvars), packageDecl);
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -1,14 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import java.io.IOException;
-
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
@@ -18,17 +11,12 @@
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
-public class SPX_index_remove_compilation_unit extends AbstractPrimitive {
+public class SPX_index_remove_compilation_unit extends SpxAbstractPrimitive {
 
 	private static String NAME = "SPX_index_remove_compilation_unit";
-	
-	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int FILE_PATH_INDEX = 1;
-
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-
 	/**
 	 * Instantiates a new instance of {@link SPX_index_remove_compilation_unit}  that removes a
 	 * Spoofaxlang Compilation Unit entry from the symbol table given the absolute path of the resource.
@@ -36,34 +24,18 @@
 	 * @param index an instance of {@link SpxSemanticIndex}
 	 */
 	public SPX_index_remove_compilation_unit(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
-
-	/* (non-Javadoc)
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
+	
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateStringTermAt(FILE_PATH_INDEX);
+	}
+	
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) 
-	{
-		boolean successStatement = false;
-		 
-		if ( (NO_ARGS == tvars.length) && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermString(tvars[FILE_PATH_INDEX])) 
-		{
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[FILE_PATH_INDEX];
-		
-			try {
-				successStatement  = index.removeCompilationUnit(projectName ,  spxCompilationUnitPath);
-			} 
-			catch(Exception ex)
-			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoString spxCompilationUnitPath = (IStrategoString)tvars[FILE_PATH_INDEX];
+		return index.removeCompilationUnit(getProjectPath(tvars) ,  spxCompilationUnitPath);
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -6,42 +6,24 @@
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Md. Adil Akhter
  * Created On : Aug 25, 2011
  */
-public class SPX_index_save extends AbstractPrimitive {
+public class SPX_index_save extends SpxAbstractPrimitive {
 
 	private static String NAME = "SPX_index_save";
-	private static int PROJECT_NAME_INDEX = 0;
 	private final static int NO_ARGS = 1;
 	
-	private final SpxSemanticIndex index;
-
 	public SPX_index_save(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
 	
-	/* (non-Javadoc)
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		boolean retValue = false;
-		if ( (tvars.length == NO_ARGS) && Tools.isTermString(tvars[PROJECT_NAME_INDEX])) {
-			try {
-				retValue = index.save(tvars[PROJECT_NAME_INDEX]);
-			}
-			catch(Exception ex)	{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"] Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		return retValue;
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		return index.save(this.getProjectPath(tvars)); 
 	}
-
-}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -1,53 +1,27 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
-import static org.spoofax.interpreter.core.Tools.isTermString;
-
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class SPX_symtab_define_symbol extends AbstractPrimitive {
+public class SPX_symtab_define_symbol extends SpxAbstractPrimitive {
 	private static String NAME = "SPX_symtab_define_symbol";
-	
-	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int SYMBOL_DEF_INDEX = 1;
-	
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-	
-	public SPX_symtab_define_symbol(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+	public SPX_symtab_define_symbol(SpxSemanticIndex symTable) {
+		super(symTable, NAME, 0, NO_ARGS);
 	}
 
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		boolean successStatement = false;
-		
-		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[SYMBOL_DEF_INDEX])) {
-			
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl symbolDef   = (IStrategoAppl) tvars[SYMBOL_DEF_INDEX];
-			
-			try
-			{
-				successStatement = index.indexSymbolDefinition(projectName, symbolDef);
-			}
-			catch(Exception ex)
-			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;	
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(SYMBOL_DEF_INDEX);
+	}
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl symbolDef   = (IStrategoAppl) tvars[SYMBOL_DEF_INDEX];
+		return index.indexSymbolDefinition(getProjectPath(tvars), symbolDef);
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -1,53 +1,30 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
-import static org.spoofax.interpreter.core.Tools.isTermString;
-
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class SPX_symtab_destroy_scope extends AbstractPrimitive {
+public class SPX_symtab_destroy_scope extends SpxAbstractPrimitive {
 	private static String NAME = "SPX_symtab_destroy_scope";
-	
-	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int ENCLOSING_NAMESPACE_ID = 1;
-	
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex symTable;
-	
 	public SPX_symtab_destroy_scope(SpxSemanticIndex symTable) {
-		super(NAME, 0, NO_ARGS);
-		this.symTable = symTable;
+		super(symTable, NAME, 0, NO_ARGS);
 	}
 
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		boolean successStatement = false;
-		
-		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[ENCLOSING_NAMESPACE_ID])) {
-			
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl namespaceAppl   = (IStrategoAppl) tvars[ENCLOSING_NAMESPACE_ID];
-			
-			try{
-				IStrategoTerm term = symTable.destroyScope(projectName, namespaceAppl);
-				successStatement = true;
-				env.setCurrent(term);
-			}
-			catch(Exception ex){ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;	
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(ENCLOSING_NAMESPACE_ID);
+	}
+	
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl namespaceAppl   = (IStrategoAppl) tvars[ENCLOSING_NAMESPACE_ID];
+		IStrategoTerm term = index.destroyScope(getProjectPath(tvars), namespaceAppl);
+		env.setCurrent(term);
+		return true;
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -1,55 +1,30 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
-import static org.spoofax.interpreter.core.Tools.isTermString;
-
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class SPX_symtab_new_scope extends AbstractPrimitive {
+public class SPX_symtab_new_scope extends SpxAbstractPrimitive {
 	private static String NAME = "SPX_symtab_new_scope";
-	
-	private final static int PROJECT_NAME_INDEX = 0;
 	private final static int ENCLOSING_NAMESPACE_ID = 1;
-	
 	private final static int NO_ARGS = 2;
 	
-	private final SpxSemanticIndex index;
-	
 	public SPX_symtab_new_scope(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
+	}
+
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(ENCLOSING_NAMESPACE_ID);
 	}
 
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		boolean successStatement = false;
-		
-		if ((NO_ARGS == tvars.length) && isTermString(tvars[PROJECT_NAME_INDEX]) && isTermAppl(tvars[ENCLOSING_NAMESPACE_ID])) {
-			
-			IStrategoString projectName = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoAppl namespaceAppl   = (IStrategoAppl) tvars[ENCLOSING_NAMESPACE_ID];
-			
-			try
-			{
-				IStrategoTerm term = index.insertNewScope(projectName, namespaceAppl);
-				successStatement = true;
-				env.setCurrent(term);
-			}
-			catch(Exception ex)
-			{ 
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed .  Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-		
-		return successStatement;	
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl namespaceAppl   = (IStrategoAppl) tvars[ENCLOSING_NAMESPACE_ID];
+		IStrategoTerm retTerm = index.insertNewScope(getProjectPath(tvars), namespaceAppl);
+		env.setCurrent(retTerm);
+		return true;
 	}
-}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -4,6 +4,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -11,48 +12,27 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 
-public class SPX_symtab_resolve_symbols extends AbstractPrimitive {
+public class SPX_symtab_resolve_symbols extends SpxAbstractPrimitive {
 	private static String NAME = "SPX_symtab_resolve_symbols";
-	private static int PROJECT_NAME_INDEX = 0;
 	private static int SEARCH_CRITERIA_INDEX = 1;
-
 	private final static int NO_ARGS = 2;
 
-	private final SpxSemanticIndex index;
-
 	public SPX_symtab_resolve_symbols(SpxSemanticIndex index) {
-		super(NAME, 0, NO_ARGS);
-		this.index = index;
+		super(index, NAME, 0, NO_ARGS);
 	}
-
-	/* Retrieve Spoofaxlang ModuleDefinition with Module ID 
-	 * specified in {@code tvars}.    
-	 * 
-	 * {@code tvars} contains name of the project and typed qualified ModuleID  
-	 * @see org.spoofax.interpreter.library.AbstractPrimitive#call(org.spoofax.interpreter.core.IContext, org.spoofax.interpreter.stratego.Strategy[], org.spoofax.interpreter.terms.IStrategoTerm[])
-	 */
+	
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		boolean successStatement = false;
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateTupleTermAt(SEARCH_CRITERIA_INDEX);
+	}
 	
-		if ( (tvars.length == NO_ARGS)  && Tools.isTermString(tvars[PROJECT_NAME_INDEX]) && Tools.isTermTuple(tvars[SEARCH_CRITERIA_INDEX])) 
-		{
-			IStrategoString projectName    = (IStrategoString)tvars[PROJECT_NAME_INDEX];
-			IStrategoTuple searchCriteria = (IStrategoTuple)tvars[SEARCH_CRITERIA_INDEX];
-		
-			try {
-				IStrategoTerm t = index.resolveSymbols(projectName, searchCriteria);
-				env.setCurrent(t);
-				successStatement = true;
-			} 
-			catch(Exception ex)
-			{
-				SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . "+ ex.getClass().getSimpleName() +" | error message: " + ex.getMessage());
-			}
-		}
-		else
-			SSLLibrary.instance(env).getIOAgent().printError("["+NAME+"]  Invocation failed . Error :  Mismatch in provided arguments. Variables provided : "+ tvars);
-
-		return successStatement;
+	
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoTuple searchCriteria = (IStrategoTuple)tvars[SEARCH_CRITERIA_INDEX];
+		IStrategoTerm t = index.resolveSymbols(getProjectPath(tvars), searchCriteria);
+		env.setCurrent(t);
+		return true;
 	}
-}
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -0,0 +1,181 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Md. Adil Akhter
+ */
+public abstract class SpxAbstractPrimitive extends AbstractPrimitive {
+	
+	private final static int PROJECT_PATH_INDEX = 0;
+	protected final SpxSemanticIndex index;
+	
+	/**
+	 * @param name
+	 * @param svars
+	 * @param tvars
+	 */
+	public SpxAbstractPrimitive(SpxSemanticIndex index, String name, int svars, int tvars ) {
+		super(name, svars, tvars);
+		
+		this.index = index;
+	}
+	
+	
+	protected IStrategoString getProjectPath( IStrategoTerm[] tvars){
+		//TODO : get project path from EditorIOAgent instead of passing as an argument
+		
+		return (IStrategoString)tvars[PROJECT_PATH_INDEX]; 
+	}
+	
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return SpxPrimitiveValidator.newValidator()
+					.validatePrimitive(getName()).with(env, tvars)								
+												 .validateArity(getTArity())
+												 .validateStringTermAt(PROJECT_PATH_INDEX);
+	}
+	
+	protected abstract boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception;
+	
+	@Override 
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
+		boolean successStatement = false;
+		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
+		try {
+			validateArguments(env, svars, tvars);
+			
+			successStatement = executePrimitive(env, svars, tvars) ;
+		
+		}catch (IOException ex) {
+			logException(agent , ex);
+			tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
+		}
+		catch (IllegalStateException ex) {
+			logException(agent , ex);
+			tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
+		}
+		catch (Exception ex) {
+			logException(agent , ex);
+		}
+		catch (Error e) {
+			logException(agent , e);
+			tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
+			throw e;
+		}
+		return successStatement; 
+	};
+	
+	void tryCleanupResources(SpxSemanticIndexFacadeRegistry registry,IStrategoTerm projectPath , IOAgent agent){
+
+		if (registry.containsFacade(projectPath)) {
+			SpxSemanticIndexFacade facade =null; 
+			try {
+				facade = registry.getFacade(projectPath);
+				if(facade!=null){
+					facade.rollbackChanges();
+					facade.close();
+				}
+			} catch (Exception e) {
+				logMessage( agent, "Cleanup Failed due to error :"+ e.getMessage() );
+			} catch (Error e) {
+				logMessage( agent, "Cleanup Failed due to error :"+ e.getMessage() );
+			}
+		}
+	}
+	
+	
+	void logMessage(IOAgent agent , String message){ 
+		agent.printError("[" + this.getName() + "] " + message);
+	}
+		
+	
+	void logException(IOAgent agent , Throwable ex){
+		agent.printError("[" + this.getName() + "]  Invocation failed . "
+									+ ex.getClass().getSimpleName()
+									+ " | error message: " + ex.getMessage());
+	}
+	
+	static class SpxPrimitiveValidator{
+		IContext env;
+		IStrategoTerm[] tvars;
+		String primitiveName;
+
+		static SpxPrimitiveValidator newValidator() {
+			return new SpxPrimitiveValidator();
+		}
+		private  SpxPrimitiveValidator(){}
+
+		SpxPrimitiveValidator validatePrimitive( String primitiveName){
+			this.primitiveName = primitiveName;
+			return this;
+		}
+
+		SpxPrimitiveValidator with(IContext env, IStrategoTerm[] tvars) { 
+			this.env = env;
+			this.tvars = tvars;
+
+			return this;
+		}
+
+		SpxPrimitiveValidator validateArity(int expectedArity){
+			if (expectedArity != tvars.length){
+				throwException("Mismatch in argument arity."
+						+" Expected "+ expectedArity
+						+ "actual" +  tvars.length);	
+			}
+			return this;
+		}
+
+		SpxPrimitiveValidator validateStringTermAt(int ordinal){
+			if(!Tools.isTermString(tvars[ordinal])){
+				throwException("Illegal Arugments. Expected IStrategoString"
+						+" [TermString] "
+						+"at ordinal "+ ordinal
+						+"actual" +  tvars[ordinal]);
+			}
+			return this;
+		}
+
+		SpxPrimitiveValidator validateApplTermAt(int ordinal){
+			if(!Tools.isTermAppl(tvars[ordinal])){
+				throwException( "Illegal Arugments. Expected "
+						+" [TermAppl] "
+						+"at ordinal : "+ ordinal
+						+"actual : " +  tvars[ordinal]);
+			}
+			return this;
+		}
+		SpxPrimitiveValidator validateTupleTermAt(int ordinal) {
+			if(!Tools.isTermTuple(tvars[ordinal])){
+				throwException( "Illegal Arugments. Expected "
+						+" [TermTuple] "
+						+"at ordinal : "+ ordinal
+						+"actual : " +  tvars[ordinal]);
+			}
+			return this;
+		} 
+		
+		
+		void throwException(String errorMessage){
+			SSLLibrary
+				.instance(env)
+				.getIOAgent()
+				.printError("["+this.primitiveName +"] " +
+						"Error Occured during Argument Validation : " +
+						"" + errorMessage);
+
+			throw new IllegalArgumentException( errorMessage );
+		}
+		
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -52,16 +52,6 @@
 	 */
 	public void IncrementVersionNo() { _version = _version + 1; }
 
-	/**
-	 * Returns the Absolute Path of the given URI 
-	 * 
-	 * @param uri URI of the Resource. 
-	 * @return Absolute Path represented by the URI  
-	 */
-	public static String toAbsulatePath( URI uri)
-	{
-		return new File( uri).getAbsolutePath();
-	}
 	
 	public String toString() {
 		return "SpxComplicationUnitResourceInfo [ResourceId=" + _recId

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -8,7 +8,6 @@
 import java.util.Set;
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import static org.spoofax.interpreter.library.language.spxlang.SpxCompilationUnitInfo.toAbsulatePath;
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
 import jdbm.RecordListener;
@@ -70,7 +69,7 @@
 	 */
 	public void define(URI absPath , IStrategoTerm compilationUnitRTree) throws IOException
 	{	
-		String abspathString = toAbsulatePath(absPath);
+		String abspathString = Utils.uriToAbsPathString(absPath);
 		
 		if ( _infoMap.containsKey(abspathString))
 			this.update(absPath, compilationUnitRTree); //URI is already there in the symbol table . Hence updating the table
@@ -118,7 +117,7 @@
 	 */
 	private void update(URI absPath , IStrategoTerm compilationUnitAterm) throws IOException {	
 		
-		SpxCompilationUnitInfo oldValue = _infoMap.get(toAbsulatePath(absPath));
+		SpxCompilationUnitInfo oldValue = _infoMap.get(Utils.uriToAbsPathString(absPath));
 		SpxCompilationUnitInfo newValue = SpxCompilationUnitInfo.newInstance(oldValue);
 		newValue.IncrementVersionNo();
 		
@@ -126,7 +125,7 @@
 	
 		if(!recordListeners.isEmpty()){	
 			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners){
-				r.recordUpdated(toAbsulatePath(absPath), oldValue , newValue);
+				r.recordUpdated(Utils.uriToAbsPathString(absPath), oldValue , newValue);
 			}
 		}
 	}
@@ -137,8 +136,8 @@
 	 * @param absPath URI for the SPXCompilationUnit to remove
 	 * @throws IOException 
 	 */
-	public void remove(URI absPath) throws IOException{
-		String key = toAbsulatePath(absPath);
+	public void remove(URI absPathUri) throws IOException{
+		String key =  Utils.uriToAbsPathString(absPathUri); 
 		
 		remove(key);
 	}
@@ -172,7 +171,7 @@
 	 * @return
 	 */
 	public IStrategoTerm get(URI absPath){
-		String key = toAbsulatePath(absPath);
+		String key = Utils.uriToAbsPathString(absPath);
 		
 		SpxCompilationUnitInfo retUnitData= _infoMap.get(key);
 		

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -0,0 +1,145 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+interface IIndexManageCommand {
+	
+	static final String CLEAR_COMMAND_STRING = "CLEAR" ;
+	static final String INIT_COMMAND_STRING = "INIT" ;
+	static final String CLOSE_COMMAND_STRING = "CLOSE" ;
+	static final String SAVE_COMMAND_STRING = "SAVE" ;
+	static final String ROLLBACK_COMMAND_STRING = "ROLLBACK" ;
+	
+	public void run() throws Exception;
+}
+
+class SpxIndexManager implements IIndexManageCommand 
+{
+	private final SpxSemanticIndex spxSemanticIndex;
+	private final IStrategoTerm projectName; 
+	private final Object[] arguments;
+	/**
+	 * @param spxSemanticIndex
+	 */
+	SpxIndexManager(SpxSemanticIndex spxSemanticIndex , IStrategoTerm projectPath , Object... args) {
+		this.spxSemanticIndex = spxSemanticIndex;
+		this.arguments = args;
+		this.projectName = projectPath;
+	}
+	
+	protected void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectName , Object... objects) throws Exception{} ;
+	
+	public void run() throws Exception{
+		executeCommnad( spxSemanticIndex , projectName, arguments); 
+		
+	}
+	
+
+	static IIndexManageCommand getCommandInstance(final SpxSemanticIndex spxSemanticIndex , IStrategoString commandName, 
+			IStrategoString projectName, Object... objects){
+		
+		return getCommandInstance(spxSemanticIndex ,Tools.asJavaString(commandName) , projectName, objects);
+	}
+
+	static IIndexManageCommand getCommandInstance(
+			final SpxSemanticIndex spxSemanticIndex, 
+			String commandName, 
+			IStrategoString projectPath,
+			Object... objects) {
+		
+		if(commandName.equalsIgnoreCase(CLEAR_COMMAND_STRING))
+			return clearCommandInstance(spxSemanticIndex , projectPath, objects);
+		
+		if(commandName.equalsIgnoreCase(SAVE_COMMAND_STRING))
+			return saveCommandInstance(spxSemanticIndex , projectPath, objects);
+		
+		if(commandName.equalsIgnoreCase(CLOSE_COMMAND_STRING))
+			return closeCommandInstance(spxSemanticIndex , projectPath, objects);
+		
+		if(commandName.equalsIgnoreCase(INIT_COMMAND_STRING))
+			return initCommandInstance(spxSemanticIndex , projectPath, objects);
+		
+		if(commandName.equalsIgnoreCase(ROLLBACK_COMMAND_STRING))
+			return rollbackCommandInstance(spxSemanticIndex , projectPath, objects);
+		
+		throw new IllegalArgumentException("Invalid Command Name : "+ commandName) ;
+	}
+	private static IIndexManageCommand rollbackCommandInstance(
+			final SpxSemanticIndex index, IStrategoString projectPath,
+			Object[] objects) {
+		
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				SpxSemanticIndexFacade idxFacade = idx.getFacade(projectPath);
+				idxFacade.rollbackChanges();
+			}
+		};
+	}
+	private static  SpxIndexManager clearCommandInstance(
+			SpxSemanticIndex index, 
+			IStrategoString projectPath,
+			Object...  objects){
+
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				SpxSemanticIndexFacade idxFacade = idx.getFacade(projectPath);
+				idxFacade.reinitSymbolTable();
+			}
+		};
+	}
+	
+	private static  SpxIndexManager closeCommandInstance(
+			SpxSemanticIndex index, 
+			IStrategoString projectPath,
+			Object...  objects){
+
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				SpxSemanticIndexFacade idxFacade =  idx.getFacade(projectPath);
+				idxFacade.persistChanges();
+				idxFacade.close();
+			}
+		};
+	}
+	
+	private static  SpxIndexManager initCommandInstance(
+			SpxSemanticIndex index, 
+			IStrategoString projectPath,
+			Object...  objects){
+
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				idx.getFacadeRegistry().initFacade(projectPath, 
+													(ITermFactory)objects[0], 
+													(IOAgent)objects[1]) ;
+			}
+		};
+	}
+	/**
+	 * Creates command that saved the indexes of the project specified by the projectName
+	 * 
+	 * @param projectPath Term representation of the projectName 
+	 * @return true if the operation is successful ; otherwise false.
+	 * @throws IOException 
+	 * @throws SpxSymbolTableException 
+	 */
+	private static  SpxIndexManager saveCommandInstance(
+			SpxSemanticIndex index, 
+			IStrategoString projectPath,
+			Object...  objects){
+
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				SpxSemanticIndexFacade idxFacade = idx.getFacade(projectPath);
+				idxFacade.persistChanges();
+			}
+		};
+	}
+	
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -23,21 +23,17 @@
  */
 public class SpxPersistenceManager implements ISpxPersistenceManager {
 	private static final String SRC =   "SpxPersistenceManager" ;
-	
-	
+
 	private final RecordManager _recordManager; 
 	private final String _indexDirectory;   
 	private final IOAgent _agent;
 	private final String _projectName ;
-	
-	// Keeps a reference to the SpxCompilation Units 
-	private SpxCompilationUnitTable _spxUnitsTable;  
-	// Indexing Package and Module Definitions
-	private SpxPackageLookupTable _spxPackageTable;
-	private SpxModuleLookupTable _spxModuleTable;
-	// Symbol Table for storing program symbols 
-	private SpxPrimarySymbolTable _spxSymbolTable;
 
+	private SpxCompilationUnitTable _spxUnitsTable; // Keeps a reference to the SpxCompilation Units  
+	private SpxPackageLookupTable _spxPackageTable; // Indexing Package and Module Definitions
+	private SpxModuleLookupTable _spxModuleTable;
+	
+	private SpxPrimarySymbolTable _spxSymbolTable;// Symbol Table for storing program symbols 
 
 	/**
 	 * Instantiates a new instance of SpxPersistenceManager. Main Responsibility of this class  
@@ -62,8 +58,9 @@
 		assert spxSemanticIndexFacade != null : "SpxSemanticIndexFacade is expected to be nonnull" ;
 		
 		this._agent = spxSemanticIndexFacade.getIOAgent();
-		this._projectName = spxSemanticIndexFacade.getProjectNameString() ;
-		this._indexDirectory = _agent.getWorkingDir()+ "/.Index";
+		this._projectName = spxSemanticIndexFacade.getProjectName() ;
+		//this._indexDirectory = spxSemanticIndexFacade.getProjectPath()+ "/.Index";
+		this._indexDirectory = "c:\\temp\\.Index";
 		
 		if( options  == null)
 			options = new Properties();// Creating empty properties collection if it is null
@@ -150,7 +147,7 @@
 	public void commit() throws IOException {
 		
 		if( Utils.DEBUG) { this.spxSymbolTable().printSymbols("commit");} 
-		if(!this.IsClosed()){
+		if(!this.isClosed()){
 			this.spxSymbolTable().commit();
 			_recordManager.commit();
 		}	
@@ -161,7 +158,11 @@
 	 * 
 	 * @throws IOException
 	 */
-	void close() throws IOException { if(!this.IsClosed()) _recordManager.close(); }
+	public void close() throws IOException { 
+		if(!this.isClosed()){ 
+			_recordManager.close();
+		}	
+	}
 	
 	/* (non-Javadoc)
 	 * @see org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager#commitAndClose()
@@ -170,13 +171,13 @@
 
 	public SpxCompilationUnitTable spxCompilcationUnitTable() { return _spxUnitsTable; }
 
-	public boolean IsClosed() { return _recordManager.IsClosed(); }
+	public boolean isClosed() { return _recordManager == null? true : _recordManager.IsClosed(); }
 
 	public SpxPackageLookupTable spxPackageTable() { return _spxPackageTable; }
 
 	public SpxModuleLookupTable spxModuleTable() { return _spxModuleTable; }	
 
-	public void clearAll() throws IOException{
+	public void clear() throws IOException{
 		try
 		{
 			this._spxUnitsTable.clear();	
@@ -217,5 +218,11 @@
 	public SpxPrimarySymbolTable spxSymbolTable() {
 		return _spxSymbolTable;
 	}
+
+
+	public void rollback() throws IOException{
+		_recordManager.rollback();
+		
+	}
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -6,6 +6,7 @@
 import jdbm.RecordManager;
 import jdbm.RecordManagerFactory;
 
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -26,422 +27,259 @@
 	//TODO : generalize and refactor common operations. Only expose few public operations and generalize others.  
 	
 	/**
-	 * Registry keeps the mapping of projectName to its own facade
+	 * Registry keeps the mapping of projectPath to its own facade
 	 * to create and perform various operations related to semantic index.
 	 */
 	private final SpxSemanticIndexFacadeRegistry _facadeRegistry;
-	
 		
-	public SpxSemanticIndex()
-	{
+	public SpxSemanticIndex(){
 		_facadeRegistry = new SpxSemanticIndexFacadeRegistry();
 	}
 	
+	public SpxSemanticIndexFacadeRegistry getFacadeRegistry() {
+		return _facadeRegistry;
+	}
 	
-	/**
-	 * Initializing Index for the project specified by the projectName
-	 * @param projectName Name of the project
-	 * @param termFactory Term Factory  
-	 * @param agent IOAgent responsible for providing IO operations.
-	 * @return true if the operation is successful ; false otherwise.
-	 * @throws IOException 
-	 */
-	public boolean initialize(IStrategoTerm projectName,  ITermFactory termFactory, IOAgent agent)  throws Exception
+	public boolean initialize(IStrategoString projectPath,  ITermFactory termFactory, IOAgent agent)  throws Exception
 	{
-		try
-		{	
-			new SpxIndexManageCommand(){
-				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
-					// Adding a new entry of the facade for the project 
-					// in the registry. 
-					_facadeRegistry.initFacade(projectName, (ITermFactory)objects[0], (IOAgent)objects[1]) ;
-					
-				}
-			}.executeCommnad(projectName, termFactory , agent);
-			
-			return true; 
-		}
-		catch(IllegalStateException e)
-		{
-			tryCleanupResources(projectName);
-			throw e;
-		}
-		catch(Error er)
-		{
-			tryCleanupResources(projectName);
-			throw er;
-		}	
+		IIndexManageCommand command = 
+			SpxIndexManager.getCommandInstance(this, IIndexManageCommand.INIT_COMMAND_STRING, projectPath, termFactory,agent);
+
+		command.run();
+		return true; 
 	}
 	
-	private boolean executeIndexer(IStrategoString projectName , IStrategoAppl appl , SpxIndexer indexer) throws Exception
-	{
-		boolean successStatement = false;
-		try {
-			indexer.index(projectName, appl);
-			successStatement  = true;
-		}
-		catch(IllegalStateException e)
-		{
-			tryCleanupResources(projectName);
-			throw e;
-		}
-		catch(Error er)
-		{
-			tryCleanupResources(projectName);
-			throw er;
-		}
-		
-		return successStatement;
+	public boolean clearall(IStrategoString projectPath) throws Exception {
+		IIndexManageCommand command = 
+			SpxIndexManager.getCommandInstance(this, IIndexManageCommand.CLEAR_COMMAND_STRING, projectPath);
+
+		command.run();
+		return true;
 	}
 	
+	public boolean save(IStrategoString projectPath) throws Exception{
+		IIndexManageCommand command = 
+			SpxIndexManager.getCommandInstance(this, IIndexManageCommand.SAVE_COMMAND_STRING, projectPath);
+
+		command.run();
+		return true;
+	}
 	
-	public boolean indexImportReferences(IStrategoString projectName,
+	public boolean close(IStrategoString projectPath) throws Exception {
+		IIndexManageCommand command = 
+			SpxIndexManager.getCommandInstance(this, IIndexManageCommand.CLOSE_COMMAND_STRING, projectPath);
+
+		command.run();
+		return true;
+	}
+		
+	public boolean indexImportReferences(IStrategoString projectPath,
 			final IStrategoAppl importReferences) throws Exception {
 	
 		SpxIndexer idx = new SpxIndexer() {
-			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+			public void index(IStrategoString projectPath, IStrategoAppl appl) throws Exception {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 				idxFacade.indexImportReferences(importReferences);
 			}
 		};
 		
-		return idx.executeIndexer(projectName, importReferences);
+		return idx.executeIndexer(projectPath, importReferences);
 	}
 	
-	public boolean indexSymbolDefinition(IStrategoString projectName, final IStrategoAppl symbolDef)  throws Exception{
+	public boolean indexSymbolDefinition(IStrategoString projectPath, final IStrategoAppl symbolDef)  throws Exception{
 		
 		SpxIndexer idx = new SpxIndexer() {
-			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+			public void index(IStrategoString projectPath, IStrategoAppl appl) throws Exception {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 				idxFacade.indexSymbol(symbolDef);
 			}
 		};
-		
-		return idx.executeIndexer(projectName, symbolDef);
+		return idx.executeIndexer(projectPath, symbolDef);
 	}
 	
 	// Index module definition . 
-	public boolean indexModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleDefinition) throws Exception
+	public boolean indexModuleDefinition(IStrategoString projectPath, final IStrategoAppl moduleDefinition) throws Exception
 	{
 		SpxIndexer idx = new SpxIndexer() {
-			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+			public void index(IStrategoString projectPath, IStrategoAppl appl) throws Exception {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 				idxFacade.indexModuleDefinition(moduleDefinition);
 			}
 		};
-		return executeIndexer(projectName, moduleDefinition,  idx);
+		return idx.executeIndexer(projectPath, moduleDefinition);
 	}
 	
-	public boolean indexPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageDecl) throws Exception {
+	public boolean indexPackageDeclaration(IStrategoString projectPath, final IStrategoAppl packageDecl) throws Exception {
 		SpxIndexer idx = new SpxIndexer() {
-			public void index(IStrategoString projectName, IStrategoAppl appl) throws Exception {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+			public void index(IStrategoString projectPath, IStrategoAppl appl) throws Exception {
+				SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 				idxFacade.indexPackageDeclaration(packageDecl);
 				}
 		};
 
-		return executeIndexer(projectName, packageDecl,  idx);
+		return idx.executeIndexer(projectPath, packageDecl);
 	}
 
-	public boolean indexLanguageDescriptor(IStrategoString projectName,	final IStrategoAppl languageDescriptor) throws Exception {
+	public boolean indexLanguageDescriptor(IStrategoString projectPath,	final IStrategoAppl languageDescriptor) throws Exception {
 		return new SpxIndexer() {
-			public void index(IStrategoString projectName, IStrategoAppl appl)
+			public void index(IStrategoString projectPath, IStrategoAppl appl)
 					throws Exception {
-				SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+				SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 				idxFacade.indexLanguageDescriptor(languageDescriptor);
 			}
-		}.executeIndexer(projectName, languageDescriptor);
+		}.executeIndexer(projectPath, languageDescriptor);
 	}
-	
-	/**
-	 * Indexes spoofax lang Compilation Unit
-	 * 
-	 * @param projectName
-	 * @param spxCompilationUnitPath
-	 * @param spxCompilationUnitAST
-	 * @return true if the CompilationUnit is successfully indexed; otherwise  returns false. 
-	 * @throws IllegalStateException
-	 * @throws Exception
-	 */
-	public boolean indexCompilationUnit(IStrategoString projectName, IStrategoString spxCompilationUnitPath, IStrategoAppl spxCompilationUnitAST) throws IllegalStateException, Exception{
 
-		boolean successStatement = false;
-		
-		try {
-			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-			idxFacade.indexCompilationUnit( spxCompilationUnitPath, spxCompilationUnitAST);
-			successStatement =  true; // setting the flag to indicate the operation is successful
-		}
-		catch(IllegalStateException e)
-		{
-			tryCleanupResources(projectName);
-			throw e;
-		}
-		catch(Error er)
-		{
-			tryCleanupResources(projectName);
-			throw er;
-		}	
-		return successStatement;
+	public boolean indexCompilationUnit(IStrategoString projectPath, IStrategoString spxCompilationUnitPath, IStrategoAppl spxCompilationUnitAST) throws IllegalStateException, Exception{
+
+		SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
+		idxFacade.indexCompilationUnit( spxCompilationUnitPath, spxCompilationUnitAST);
+		return true;
 	}
 	
-	public IStrategoTerm getCompilationUnit(IStrategoString projectName, IStrategoString spxCompilationUnitPath) throws Exception{
+	public IStrategoTerm getCompilationUnit(IStrategoString projectPath, IStrategoString spxCompilationUnitPath) throws Exception{
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm term)
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm term)
 					throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.getCompilationUnit((IStrategoString)term);
 			}
-		}.executeWith(projectName, spxCompilationUnitPath);
+		}.executeWith(projectPath, spxCompilationUnitPath);
 	}
 	
-	public IStrategoTerm getPackageDeclaration(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
+	public IStrategoTerm getPackageDeclaration(IStrategoString projectPath, final IStrategoAppl packageTypedQname) throws Exception{
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm term)
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm term)
 					throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.getPackageDeclaration((IStrategoAppl)term);
 			}
-		}.executeWith(projectName, packageTypedQname);
+		}.executeWith(projectPath, packageTypedQname);
 		
 	}
 
-	public IStrategoTerm getPackageDeclarationsByUri(IStrategoString projectName, IStrategoString compilationUnitUri)  throws Exception{
+	public IStrategoTerm getPackageDeclarationsByUri(IStrategoString projectPath, IStrategoString compilationUnitUri)  throws Exception{
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm term)
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm term)
 					throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.getPackageDeclarations((IStrategoString) term);
 			}
-		}.executeWith(projectName, compilationUnitUri);
+		}.executeWith(projectPath, compilationUnitUri);
 	}
 
-	public IStrategoTerm getModuleDeclaration(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception{
+	public IStrategoTerm getModuleDeclaration(IStrategoString projectPath, final IStrategoAppl moduleTypedQname) throws Exception{
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname)
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm qname)
 					throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.getModuleDeclaration((IStrategoAppl)qname);
 			}
-		}.executeWith(projectName, moduleTypedQname);
+		}.executeWith(projectPath, moduleTypedQname);
 	}
 	
-	public IStrategoTerm getImports(IStrategoString projectName, final IStrategoAppl namespaceID) throws Exception{
+	public IStrategoTerm getImports(IStrategoString projectPath, final IStrategoAppl namespaceID) throws Exception{
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm namespaceID)
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm namespaceID)
 					throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.getImportReferences((IStrategoAppl)namespaceID);
 			}
-		}.executeWith(projectName, namespaceID);
+		}.executeWith(projectPath, namespaceID);
 	}
 	
-	public IStrategoTerm getModuleDeclarations(IStrategoString projectName, IStrategoTerm retTerm) throws Exception {
+	public IStrategoTerm getModuleDeclarations(IStrategoString projectPath, IStrategoTerm retTerm) throws Exception {
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm res)
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm res)
 					throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.getModuleDeclarationsOf(res);
 			}
-		}.executeWith(projectName, retTerm);
+		}.executeWith(projectPath, retTerm);
 	}
-	
 
-	public  IStrategoTerm insertNewScope(IStrategoString projectName, IStrategoAppl namespaceAppl) throws Exception{
+	public IStrategoTerm insertNewScope(IStrategoString projectPath, IStrategoAppl namespaceAppl) throws Exception{
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm ns)
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm ns)
 					throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.insertNewScope((IStrategoAppl)ns);
 			}
-		}.executeWith(projectName, namespaceAppl);
+		}.executeWith(projectPath, namespaceAppl);
 	}	
 	
-	public IStrategoTerm destroyScope(IStrategoString projectName, IStrategoAppl namespaceAppl) throws Exception {
+	public IStrategoTerm destroyScope(IStrategoString projectPath, IStrategoAppl namespaceAppl) throws Exception {
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm ns)
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm ns)
 					throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.destroyScope((IStrategoAppl)ns);
 			}
-		}.executeWith(projectName, namespaceAppl);
+		}.executeWith(projectPath, namespaceAppl);
 	}
 
-	public IStrategoTerm getModuleDefinition(IStrategoString projectName, final IStrategoAppl moduleTypedQname) throws Exception {
+	public IStrategoTerm getModuleDefinition(IStrategoString projectPath, final IStrategoAppl moduleTypedQname) throws Exception {
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname)
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm qname)
 					throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.getModuleDefinition((IStrategoAppl)qname);
 			}
-		}.executeWith(projectName, moduleTypedQname);
+		}.executeWith(projectPath, moduleTypedQname);
 	}
 	
-	public IStrategoTerm getLanguageDescriptor(IStrategoString projectName, final IStrategoAppl packageTypedQname) throws Exception{
+	public IStrategoTerm getLanguageDescriptor(IStrategoString projectPath, final IStrategoAppl packageTypedQname) throws Exception{
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname)
-					throws Exception {	
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm qname) throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.getLanguageDescriptor((IStrategoAppl)qname);
 			}
-		}.executeWith(projectName, packageTypedQname);
+		}.executeWith(projectPath, packageTypedQname);
 	}
 	
-	public IStrategoTerm resolveSymbols(IStrategoString projectName, final IStrategoTuple searchCriteria)  throws Exception{
+	public IStrategoTerm resolveSymbols(IStrategoString projectPath, final IStrategoTuple searchCriteria)  throws Exception{
 		return new SpxResolver() {
 			@Override
-			public IStrategoTerm resolve(IStrategoString projectName, IStrategoTerm qname)
-					throws Exception {	
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm qname) throws Exception {	
 					
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 					return idxFacade.resolveSymbols((IStrategoTuple)qname);
 			}
-		}.executeWith(projectName, searchCriteria);
+		}.executeWith(projectPath, searchCriteria);
 	}
 
-	public boolean removeCompilationUnit(IStrategoString projectName,IStrategoString spxCompilationUnitPath) throws IllegalStateException, IOException, SpxSymbolTableException{
-		
-		boolean successStatement = false;
-		
-		try {
-			SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-			idxFacade.removeCompilationUnit(spxCompilationUnitPath);
-			
-			successStatement = true; // setting the flag to indicate the operation is successful
-		}
-		catch(IllegalStateException exception)
-		{
-			tryCleanupResources(projectName);
-			throw exception;
-		}
-		catch(Error er)
-		{
-			tryCleanupResources(projectName);
-			throw er;
-		}
-		return successStatement;
-	}
+	public boolean removeCompilationUnit(IStrategoString projectPath,IStrategoString spxCompilationUnitPath) throws Exception{
 	
-	public boolean clearall(IStrategoString projectName) throws Exception {
-		boolean retValue = false; 
-		try
-		{
-			new SpxIndexManageCommand(){
-				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-					idxFacade.reinitSymbolTable();
-
-				}
-			}.executeCommnad(projectName);
+			SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
+			idxFacade.removeCompilationUnit(spxCompilationUnitPath);
 			
-			retValue = true;
-		}
-		catch(IllegalStateException e)
-		{
-			tryCleanupResources(projectName);
-			throw e;
-		}
-		catch(Error er)
-		{
-			tryCleanupResources(projectName);
-			throw er;
-		}
-		return retValue;
-	}
-	/**
-	 * Saves the indexes of the project specified by the projectName
-	 * 
-	 * @param projectName Term representation of the projectName 
-	 * @return true if the operation is successful ; otherwise false.
-	 * @throws IOException 
-	 * @throws SpxSymbolTableException 
-	 */
-	public boolean save(IStrategoTerm projectName) throws Exception
-	{
-		boolean retValue = false; 
-		try
-		{
-			new SpxIndexManageCommand(){
-				public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
-					SpxSemanticIndexFacade idxFacade = getFacade(projectName);
-					idxFacade.persistChanges();
-
-				}
-			}.executeCommnad(projectName);
-			retValue = true;
-		}
-		catch(IllegalStateException e)
-		{
-			tryCleanupResources(projectName);
-			throw e;
-		}
-		catch(Error er)
-		{
-			tryCleanupResources(projectName);
-			throw er;
-		}
-		return retValue;
+			return true;
 	}
 	
-	public boolean close(IStrategoTerm projectName) throws Exception {
-		new SpxIndexManageCommand(){
-			public void executeCommnad(IStrategoTerm projectName, Object... objects) throws Exception{
-				_facadeRegistry.closePersistenceManager(projectName);
-
-			}
-		}.executeCommnad(projectName);
-
-		return true;
-	}
-	
-	
-	public void executeCommand( IStrategoTerm commandName, IStrategoTerm projectName, Object...  objects )
-	{
-		// gets the command from the hashmap indexed by commandname 
-		// pass all the arguments 
-		// execute the commands 
-	}
-	/**
-	 * Closes any underlying open connection and clean up unmanaged resources. 
-	 * 
-	 * @param projectName
-	 * @throws IOException 
-	 */
-	private void tryCleanupResources( IStrategoTerm projectName) throws IOException{
-		
-		if ( _facadeRegistry.containsFacade(projectName)) {
-			SpxSemanticIndexFacade facade = _facadeRegistry.closePersistenceManager(projectName);
-			try {
-				facade.close();
-			} catch (IOException e) {
-				facade.printError( "[SPXSemanticIndex] . Cleanup Failed due to following Error : "+ e.getMessage()) ;	//logging exception.
-			}
-		}	
-	}
 	
-	private SpxSemanticIndexFacade getFacade(IStrategoTerm projectName) throws SpxSymbolTableException {
+	SpxSemanticIndexFacade getFacade(IStrategoTerm projectPath) throws Exception {
 
-		SpxSemanticIndexFacade facade = _facadeRegistry.getFacade(projectName);
+		SpxSemanticIndexFacade facade = _facadeRegistry.getFacade(projectPath);
 		ensureInitialized(facade);
 		return facade;
 	}
@@ -453,52 +291,21 @@
 
 	private abstract class SpxIndexer 
 	{	
-		public boolean executeIndexer(IStrategoString projectName , IStrategoAppl appl) throws Exception{
-			boolean successStatement = false;
-			try {
-				index(projectName, appl);
-				successStatement  = true;
-			}
-			catch(IllegalStateException e)
-			{
-				tryCleanupResources(projectName);
-				throw e;
-			}
-			catch(Error er)
-			{
-				tryCleanupResources(projectName);
-				throw er;
-			}
-			return successStatement;
+		public boolean executeIndexer(IStrategoString projectPath , IStrategoAppl appl) throws Exception{
+			index(projectPath, appl);
+			return true;
 		}
 		
-		public abstract void index(IStrategoString projectName , IStrategoAppl appl) throws Exception ;
+		public abstract void index(IStrategoString projectPath , IStrategoAppl appl) throws Exception ;
 	}
 	
 	private abstract class SpxResolver 
 	{	
-		public IStrategoTerm executeWith(IStrategoString projectName , IStrategoTerm term) throws Exception{
-			try {
-				return resolve(projectName, term);
-			}
-			catch(IllegalStateException e) {
-				tryCleanupResources(projectName);
-				throw e;
-			}
-			catch(Exception ex) { throw ex ;}
-			catch(Error er){
-				tryCleanupResources(projectName);
-				throw er;
-			}
+		public IStrategoTerm executeWith(IStrategoString projectPath , IStrategoTerm term) throws Exception{
+			return resolve(projectPath, term);
 		}
 	
-		public abstract IStrategoTerm resolve(IStrategoString projectName , IStrategoTerm term) throws Exception ;
-	}
-	
-
-	private static abstract class SpxIndexManageCommand 
-	{
-		public abstract void executeCommnad(IStrategoTerm projectName , Object... objects) throws Exception;
+		public abstract IStrategoTerm resolve(IStrategoString projectPath , IStrategoTerm term) throws Exception ;
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -28,7 +28,7 @@
 	//TODO FIXME : combine symbol table and index
 	
 	private ISpxPersistenceManager _persistenceManager;
-	private final String _projectName ; 
+	private final String _projectPath ; 
 	private final ITermFactory _termFactory;
 	private final IOAgent _agent;
 	private final TermAttachmentStripper _stripper;
@@ -39,13 +39,13 @@
 
 	/**
 	 * Initializes the SemanticIndexFactory
-	 * @param projectName name of the project 
+	 * @param projectPath name of the project 
 	 * @param termFactory {@link ITermFactory}
 	 * @param agent {@link IOAgent}
 	 * @throws Exception 
 	 */
-	public SpxSemanticIndexFacade(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent){
-		_projectName = asJavaString(projectName);
+	public SpxSemanticIndexFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent){
+		_projectPath = asJavaString(projectPath);
 		
 		_termFactory = termFactory;
 		_agent = agent;
@@ -62,7 +62,7 @@
 	
 	public void initializePersistenceManager() throws Exception {
 		_persistenceManager = new SpxPersistenceManager(this);
-		_persistenceManager.initializeSymbolTables(this._projectName, this);
+		_persistenceManager.initializeSymbolTables(this._projectPath, this);
 	}
 		
 	/**
@@ -72,18 +72,15 @@
 	public ITermFactory getTermFactory() { return _termFactory; }
 
 	public TermConverter getTermConverter() {return _converter ; }
+	
 	/**
 	 * Gets the project name as String
 	 * @return
 	 */
-	public String getProjectNameString(){ return _projectName; }
-
-	/**
-	 * Get ProjectName as IStrategoTerm
-	 * 
-	 * @return IStrategoTerm
-	 */
-	public IStrategoTerm getProjectName(){ return _termFactory.makeString(_projectName);}
+	public String getProjectPath(){ return Utils.toAbsPathString(_projectPath); }
+	
+	public String getProjectName(){ return new File(_projectPath).getName(); }
+	
 
 	/**
 	 * Returns an instance of the Persistence Manager active for the current Facade
@@ -235,7 +232,7 @@
 		//verify valid package URI. Checking whether compilation unit exist with this URI
 		// in compilation unit table.
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
-		String absFilePath = toAbsulatePath(spxCompilationUnitPath);
+		String absFilePath = this.toAbsulatePath(spxCompilationUnitPath);
 		spxTable.verifyUriExists(absFilePath);
 
 		packageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)packageId);
@@ -770,7 +767,7 @@
 	public void close() throws IOException {
 		if (!isPersistenceManagerClosed()) {
 			logMessage("close | closing underlying persistence manager instance.");
-			_persistenceManager.commitAndClose();
+			_persistenceManager.close();
 		}else {
 			logMessage("close | underlying persistence manager is already closed. ");
 		}	
@@ -784,11 +781,17 @@
 	public void reinitSymbolTable() throws Exception {	
 		
 		if (! isPersistenceManagerClosed())
-			persistenceManager().clearAll();
+			persistenceManager().clear();
 		
 		persistenceManager().commit();
 		
-		persistenceManager().initializeSymbolTables(this.getProjectNameString(), this);
+		persistenceManager().initializeSymbolTables(this.getProjectName(), this);
+	}
+	
+	public void rollbackChanges() throws IOException{	
+		
+		if (! isPersistenceManagerClosed())
+			persistenceManager().rollback();
 	}
 
 	
@@ -797,7 +800,7 @@
 	 * 
 	 * @return true if PersistenceManage is open. Otherwise returns false.
 	 */
-	boolean isPersistenceManagerClosed() { 	return _persistenceManager.IsClosed(); }
+	boolean isPersistenceManagerClosed() { 	return _persistenceManager.isClosed(); }
 
 
 	/**
@@ -821,25 +824,9 @@
 	 * @param uri URI of the Resource. 
 	 * @return Absolute Path represented by the URI  
 	 */
-	public String toAbsulatePath( IStrategoString uri){
-		URI resUri = toFileURI(uri);
-		
-		return new File(resUri).getAbsolutePath().trim();
-	}
-
-	/**
-	 * Returns URI 
-	 * @param path
-	 * @return
-	 */
-	private URI toFileURI(String path)
-	{
-		File file = new File(path);
-		return	file.isAbsolute()? file.toURI()
-			  			 : new File(_agent.getWorkingDir(), path).toURI();
-	}
+	public String toAbsulatePath( IStrategoString uri){ return Utils.uriToAbsPathString(toFileURI(uri)); }
 
-	private URI toFileURI(IStrategoTerm filePath) {	return toFileURI(Tools.asJavaString(filePath)); }
+	private URI toFileURI(IStrategoTerm filePath) {	return Utils.getAbsolutePathUri(Tools.asJavaString(filePath) ,_agent); }
 
 	/**
 	 * Verify type of declaration . 
@@ -859,6 +846,7 @@
 	 * @param message
 	 */
 	private void logMessage(String message) {
+		
 		_persistenceManager.logMessage("SpxSemanticIndexFacade", message);
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -17,24 +17,24 @@
 //using only one SemanticIndexFactory and require initialization. 
 public class SpxSemanticIndexFacadeRegistry
 {
-	
 	final HashMap<String, SpxSemanticIndexFacade> _registry = new HashMap<String, SpxSemanticIndexFacade>();
 	
 	/**
 	 * Initializes the SemanticIndexFactory if the registry does not contain any mapping of existing Facade, or it 
 	 * has facade object in the registry , but the underlying persistence manager is closed.
 	 * 
-	 * @param projectName
+	 * @param projectPath
 	 * @param termFactory
 	 * @throws Exception 
 	 */
-	public void initFacade(IStrategoTerm projectName , ITermFactory termFactory , IOAgent agent) throws Exception
+	public void initFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent) throws Exception
 	{	
 		SpxSemanticIndexFacade fac = null;
-		String projectNameString  = asJavaString(projectName);
-		if ( !containsFacade(projectName)) {
+		String projectNameString  =  Utils.toAbsPathString(asJavaString(projectPath));
+		
+		if ( !containsFacade(projectPath)) {
 			
-			fac = new SpxSemanticIndexFacade(projectName, termFactory, agent);
+			fac = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
 			fac.initializePersistenceManager();
 		}	
 		else {
@@ -44,42 +44,45 @@
 			if( (fac != null) && fac.isPersistenceManagerClosed()){
 				fac.initializePersistenceManager();
 			}else if ( fac == null){
-				fac = new SpxSemanticIndexFacade(projectName, termFactory, agent);
+				fac = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
 				fac.initializePersistenceManager();
 			}	
 		}
 		
 		if(fac != null)
-			_registry.put(fac.getProjectNameString(), fac);
+			_registry.put(fac.getProjectPath(), fac);
+
 	}
 
 	/**
 	 * Gets the porject's Semantic Index factory . If it is initialized and somehow is not closed 
 	 * then it returns the instance of the factory to perform further operation. 
 	 * 
-	 * @param projectName  ProjectName Term
+	 * @param projectPath  ProjectName Term
 	 * 
 	 * @return SpxSemanticIndexFactory mapped with the projectName. If no mapping is found, it is returning null. 
-	 * @throws SpxSymbolTableException 
+	 * @throws Exception 
 	 */
-	public SpxSemanticIndexFacade getFacade( IStrategoTerm projectName) throws SpxSymbolTableException{
-		String key = asJavaString(projectName);		
+	public SpxSemanticIndexFacade getFacade( IStrategoTerm projectPath) throws Exception{
+		String key = Utils.toAbsPathString(asJavaString(projectPath));		
 		SpxSemanticIndexFacade facade =  _registry.get(key);
 		
-		if(facade == null || facade.isPersistenceManagerClosed()) {
-			throw new SpxSymbolTableException("Symbol Table is not initialized for project : " + projectName + " . Invoke SPX_index_init. ");
+		if(facade == null) {
+			throw new SpxSymbolTableException("Symbol Table is not initialized for project : " + projectPath + " . Invoke SPX_index_init. ");
+		}	
+		else if( (facade != null) && facade.isPersistenceManagerClosed()){
+			facade.initializePersistenceManager();
 		}	
-		
 		return facade;
 	}
 
 	public void clearAll() throws IOException{
 		for(String fname : _registry.keySet())
-			removeFacade(fname);
+			removeFacade(Utils.toAbsPathString(fname));
 	}
 	
-	private SpxSemanticIndexFacade closePersistenceManager(String projectName) throws IOException{
-		SpxSemanticIndexFacade facade = _registry.get(projectName);
+	private SpxSemanticIndexFacade closePersistenceManager(String projectPath) throws IOException{
+		SpxSemanticIndexFacade facade = _registry.get(projectPath);
 		
 		if((facade != null) &&  !facade.isPersistenceManagerClosed())
 			facade.close();
@@ -87,21 +90,18 @@
 		return facade;
 	}
 	
-	
-	
-	public SpxSemanticIndexFacade closePersistenceManager(IStrategoTerm projectNameTerm) throws IOException {
-		return closePersistenceManager(asJavaString(projectNameTerm));
+	public SpxSemanticIndexFacade closePersistenceManager(IStrategoTerm projectPathTerm) throws IOException {
+		return closePersistenceManager(Utils.toAbsPathString(asJavaString(projectPathTerm)));
 	}
 
-	private SpxSemanticIndexFacade removeFacade(String projectName) throws IOException {
-		
-		closePersistenceManager(projectName);
-		return _registry.remove(projectName);
+	private SpxSemanticIndexFacade removeFacade(String projectPath) throws IOException {
+		closePersistenceManager(projectPath);
+		return _registry.remove(projectPath);
 	}
 	
 	
-	public boolean containsFacade(IStrategoTerm projectName){
-		String key = asJavaString(projectName);
+	public boolean containsFacade(IStrategoTerm projectPath){
+		String key = Utils.toAbsPathString(asJavaString(projectPath));
 		
 		return _registry.containsKey(key);
 	}	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Thu Oct 13 14:03:18 2011	(r23451)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Fri Oct 14 01:13:04 2011	(r23452)
@@ -1,5 +1,9 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
+import java.io.File;
+import java.net.URI;
+
+import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.ITermFactory;
 
@@ -30,4 +34,23 @@
 		
 		return result;
 	}
+
+	public static String uriToAbsPathString(URI uri){
+		return new File(uri).getAbsolutePath();
+	}
+	
+	public static URI getAbsolutePathUri(String path, IOAgent agent){
+		File file = new File(path);
+		
+		return	file.isAbsolute()? file.toURI() : new File(agent.getWorkingDir(), path).toURI();
+	}
+	
+	public static String getAbsolutePathString(String path , IOAgent agent){
+		return uriToAbsPathString(getAbsolutePathUri(path , agent));
+	}
+
+	public static String toAbsPathString(String path) {
+		return new File(path).getAbsolutePath();
+	}
+	
 }

From M.A.Akhter at student.tudelft.nl  Fri Oct 14 03:14:42 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 14 Oct 2011 01:14:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23453 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang
Message-ID: <20111014011442.A33897F8009@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 14 01:14:42 2011
New Revision: 23453
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23453&sc=1

Log:
cleanup

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_clear.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_init.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_save.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Oct 14 01:13:04 2011	(r23452)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Oct 14 01:14:42 2011	(r23453)
@@ -25,13 +25,7 @@
 		add(new LANG_get_all_projects_in_Workspace());
 		
 		SpxSemanticIndex spxIndex= new SpxSemanticIndex();
-		
-		//TODO : generalize and reduce/refactor primitives
-		//primitives for index initialization and management
-		//add(new SPX_index_init(spxIndex));
 		add(new SPX_exec_index_manage_command(spxIndex));
-		//add(new SPX_index_save(spxIndex));
-		//add(new SPX_index_clear(spxIndex));
 		
 		//primitives to index spoofaxlang compilation unit 
 		add(new SPX_index_compilation_unit(spxIndex));

From M.A.Akhter at student.tudelft.nl  Fri Oct 14 03:26:55 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 14 Oct 2011 01:26:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23454 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang
Message-ID: <20111014012655.A47B6108C00A@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 14 01:26:55 2011
New Revision: 23454
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23454&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Fri Oct 14 01:14:42 2011	(r23453)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Fri Oct 14 01:26:55 2011	(r23454)
@@ -36,6 +36,8 @@
 	public String getProjectName();
 	
 	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade) throws Exception;
+
+	public void clearCache() throws IOException;
 }
 
 interface ILogger{ 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Fri Oct 14 01:14:42 2011	(r23453)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Fri Oct 14 01:26:55 2011	(r23454)
@@ -82,7 +82,9 @@
 			try {
 				facade = registry.getFacade(projectPath);
 				if(facade!=null){
+					facade.clearCache();
 					facade.rollbackChanges();
+					facade.clearCache();
 					facade.close();
 				}
 			} catch (Exception e) {
@@ -93,12 +95,10 @@
 		}
 	}
 	
-	
 	void logMessage(IOAgent agent , String message){ 
 		agent.printError("[" + this.getName() + "] " + message);
 	}
 		
-	
 	void logException(IOAgent agent , Throwable ex){
 		agent.printError("[" + this.getName() + "]  Invocation failed . "
 									+ ex.getClass().getSimpleName()

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Fri Oct 14 01:14:42 2011	(r23453)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Fri Oct 14 01:26:55 2011	(r23454)
@@ -59,8 +59,7 @@
 		
 		this._agent = spxSemanticIndexFacade.getIOAgent();
 		this._projectName = spxSemanticIndexFacade.getProjectName() ;
-		//this._indexDirectory = spxSemanticIndexFacade.getProjectPath()+ "/.Index";
-		this._indexDirectory = "c:\\temp\\.Index";
+		this._indexDirectory = spxSemanticIndexFacade.getProjectPath()+ "/.Index";
 		
 		if( options  == null)
 			options = new Properties();// Creating empty properties collection if it is null
@@ -224,5 +223,11 @@
 		_recordManager.rollback();
 		
 	}
+
+
+	public void clearCache() throws IOException {
+		_recordManager.clearCache();
+		
+	}
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Oct 14 01:14:42 2011	(r23453)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Oct 14 01:26:55 2011	(r23454)
@@ -1005,6 +1005,10 @@
 		}
 		
 	}
+	public void clearCache() throws IOException{
+		this.persistenceManager().clearCache();
+		
+	}
 
 
 	

From L.C.L.Kats at tudelft.nl  Fri Oct 14 11:00:40 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 14 Oct 2011 09:00:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23455 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111014090040.851B9CC12C@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Oct 14 09:00:40 2011
New Revision: 23455
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23455&sc=1

Log:
cleanup

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Fri Oct 14 01:26:55 2011	(r23454)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Fri Oct 14 09:00:40 2011	(r23455)
@@ -122,8 +122,6 @@
 	
   editor-complete:
     (Language(t), _, _, _, _) -> [<spt-get-default-language>]
-
-  editor-complete = debug; fail
   
   editor-complete:
     (construct, position, ast, path, project-path) -> proposals

From M.A.Akhter at student.tudelft.nl  Fri Oct 14 13:44:26 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 14 Oct 2011 11:44:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23456 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111014114426.7B3EC2B8005@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 14 11:44:24 2011
New Revision: 23456
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23456&sc=1

Log:
- cleanup 
- added / all symbols of a typed can be retrieved from a namespace

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Fri Oct 14 09:00:40 2011	(r23455)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Fri Oct 14 11:44:24 2011	(r23456)
@@ -1,17 +1,19 @@
-package org.spoofax.interpreter.library.language.spxlang;
 
 
+package org.spoofax.interpreter.library.language.spxlang;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
-import org.spoofax.interpreter.terms.IStrategoTerm;
 
+import org.spoofax.interpreter.terms.IStrategoTerm;
 /**
  * BaseScope  is an abstract base class that implements Scope Interface
  * 
@@ -51,7 +53,7 @@
 	}
 
 	public INamespace define(SpxSymbolTableEntry entry, ILogger logger){
-		
+		 
 		entry.value.setNamespace(_currentNamespaceId);
 		
 		logger.logMessage(src, "define | Defining Symbol "+ entry.value + " in "+ _currentNamespaceId);
@@ -61,9 +63,9 @@
 	}
 	
 	/**
-	 * Defines symbol in this namespace. Define does not replace  
+	 * Defines symbol in this Namespace. Define does not replace  
 	 * old symbol mapped using the key with the new one. It just adds the 
-	 * new symbol at the end of the multivaluelist. 
+	 * new symbol at the end of the multi-value hashmap. 
 	 * 
 	 * @param key - The key that the symbol will be mapped to .
 	 * @param symbol - The symbol to store. 
@@ -80,32 +82,47 @@
 		}
 	}
 	
-	protected static List<SpxSymbol> lookupSymbols(Map<SpxSymbolKey, List<SpxSymbol>> members, IStrategoTerm id){
-//		String name = "John Smith"; // For example
-//		Map<String, Student> students_ = new HashMap<String, Sandbox.Student>();
-//
-//		for (Map.Entry<String, Student> entry : students_.entrySet()) {
-//		    // If the entry key is "John*", this code will match if name = "John Smith"
-//		    if (name.matches("^.*" + entry.getKey().replace("*", ".*") + ".*$")) {
-//		        // do something with the matching map entry
-//		        System.out.println("Student " + entry.getValue() + " matched " + entry.getKey());
-//		    }
-//		}
-		SpxSymbolKey key = new SpxSymbolKey(id);
-		List<SpxSymbol> resolvedSymbols = members.get(key);
-		
-		return (resolvedSymbols == null) ? new ArrayList<SpxSymbol>() : resolvedSymbols ; 
+	private static List<SpxSymbol> appendSymbols( List<SpxSymbol> origin , List<SpxSymbol> symbols){
+		if(symbols != null){
+			origin.addAll(symbols);
+		}
+		return origin;
 	}
 	
-	protected  static SpxSymbol lookupSymbol(Map<SpxSymbolKey, List<SpxSymbol>> members,  IStrategoTerm id , IStrategoTerm type){
+	/**
+	 * Returns all the symbols matching the search-criteria specified as the argument. In addition,
+	 * it also accepts *(ALL) as an argument and returns all the symbols of a particular type  
+	 * from this namespace and the namespace visible in this namespace. 
+	 * 
+	 * @param members Symbol-Table contains all the members/symbols of this current Namespace
+	 * @param id  Symbol-ID
+	 * @param type Type of the Symbol we are looking for
+	 * @return a List of Symbols matching with the Search Criteria
+	 */
+	protected static List<SpxSymbol> lookupSymbols(Map<SpxSymbolKey, List<SpxSymbol>> members, IStrategoTerm id, IStrategoTerm type){
+		assert type instanceof IStrategoConstructor : "type is expected to be a IStrategoConstructor" ;
+	
 		SpxSymbolKey key = new SpxSymbolKey(id);
-		List<SpxSymbol> resolvedSymbols = members.get(key);
+		List<SpxSymbol> resolvedSymbols  = new ArrayList<SpxSymbol>();
 		
-		if(resolvedSymbols != null && resolvedSymbols.size() > 0 ){
-			List<SpxSymbol> expectedTypedSymbol  = SpxSymbol.filterByType((IStrategoConstructor)type, resolvedSymbols);
-			if(expectedTypedSymbol.size() >0 )
-				return expectedTypedSymbol.get(expectedTypedSymbol.size()-1);
+		if(key.getId().equalsIgnoreCase(Utils.All)){
+			// Found * in the ID. 
+			// Hence returning ALL symbols of  a particular type specified in the argument.
+			for (Entry<SpxSymbolKey, List<SpxSymbol>> entry : members.entrySet()) {
+				resolvedSymbols = appendSymbols(resolvedSymbols, SpxSymbol.filterByType((IStrategoConstructor)type, members.get(entry.getKey())));
+			}
+		}
+		else{
+			resolvedSymbols = appendSymbols(resolvedSymbols, SpxSymbol.filterByType( (IStrategoConstructor)type, members.get(key)));
 		}
+		
+		return resolvedSymbols ; 
+	}
+	
+	protected  static SpxSymbol lookupSymbol(Map<SpxSymbolKey, List<SpxSymbol>> members,  IStrategoTerm id , IStrategoTerm type){
+		List<SpxSymbol> resolvedSymbols = lookupSymbols( members , id , type); 
+	 	if(resolvedSymbols.size() >0 )
+			return resolvedSymbols.get(resolvedSymbols.size()-1);
 		return null;
 	}
 	
@@ -132,13 +149,13 @@
 		return null; // symbol is not found
 	}
 	
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
 		
 		facade.persistenceManager().logMessage(this.src, "resolveAll(Base) | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
-		List<SpxSymbol> lookupResult = lookupSymbols(getMembers() , searchingFor);
+		List<SpxSymbol> lookupResult = lookupSymbols(getMembers() , searchingFor , ofType);
 		retResult.addAll(lookupResult);
 		
 		INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
@@ -148,16 +165,13 @@
 		if( namespace  != null && !namespace.equals(this)){
 			//checks whether searching to the enclosing scope is allowed.
 			if( shouldSearchInEnclosingNamespace(searchedBy)){	
-				Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(searchingFor, this ,facade);
+				Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(searchingFor, ofType, this ,facade);
 				retResult.addAll(parentResults);
 			}
 		}	 
-		return retResult;
-	}
-	
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy,SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException{
 		
-		return SpxSymbol.filterByType((IStrategoConstructor) type, this.resolveAll(id, searchedBy, spxFacade)) ;
+		return retResult;
+		//return SpxSymbol.filterByType((IStrategoConstructor) type, this.resolveAll(id, searchedBy, spxFacade)) ;
 	}
 	
 	
@@ -166,22 +180,30 @@
 	 * (non-Javadoc)
 	 * @see org.spoofax.interpreter.library.language.spxlang.INamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException{
-		return resolveAll(searchingFor, type,  this, spxFacade);
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException{
+		return resolveAll(searchingFor, ofType,  this, spxFacade);
 	}
 	
 	public Map<SpxSymbolKey, List<SpxSymbol>> getMembers(){
 		if(symbols == null)
 			symbols = new HashMap<SpxSymbolKey, List<SpxSymbol>>();
 		
-		return this.symbols;}
+		return this.symbols;
+	}
 
-	public void clear() { if(this.symbols != null) this.symbols.clear();}
+	public void clear() { 
+		if(this.symbols != null) 
+			this.symbols.clear();
+	}
 
 	/* 
 	 * Returns the enclosing scope of the current scope.
 	 * */
-	public INamespace getEnclosingNamespace(INamespaceResolver rs) throws SpxSymbolTableException { return (_enclosingNamespaceId != null) ? _enclosingNamespaceId.resolve(rs) : null; }
+	public INamespace getEnclosingNamespace(INamespaceResolver rs) throws SpxSymbolTableException { 
+		return (_enclosingNamespaceId != null) 
+					? _enclosingNamespaceId.resolve(rs) 
+					: null; 
+	}
 	
 	public INamespace getCurrentNamespace(INamespaceResolver rs) throws SpxSymbolTableException{ return _currentNamespaceId.resolve(rs); }
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Fri Oct 14 09:00:40 2011	(r23455)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Fri Oct 14 11:44:24 2011	(r23456)
@@ -24,9 +24,7 @@
     
 	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
 	
-	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, INamespace searchedBy ,  SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
-	
-	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
+	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedByNamepsace , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
 	
 	Map<SpxSymbolKey, List<SpxSymbol>> getMembers();
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Fri Oct 14 09:00:40 2011	(r23455)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Fri Oct 14 11:44:24 2011	(r23456)
@@ -144,23 +144,23 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.BaseNamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.INamespace, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
 	@Override
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm key,INamespace originNamespace, SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
+	public Iterable<SpxSymbol> resolveAll(IStrategoTerm key,IStrategoTerm type, INamespace originNamespace, SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
 		facade.persistenceManager().logMessage(this.src, "resolveAll | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + key + " origin Namespace: " + originNamespace.namespaceUri().id() );
 		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
 		
 		//searching in the enclosed namespace. For PackageNamespace, all the enclosed ModuleNamespace is searched. 
 		ensureEnclosedNamespaceUrisLoaded(facade);
-		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, originNamespace, facade)) ;
+		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, type, originNamespace, facade)) ;
 		
 		//searching in the current scope and its enclosing scope
-		retResult.addAll((Set<SpxSymbol>)super.resolveAll(key, originNamespace, facade));
+		retResult.addAll((Set<SpxSymbol>)super.resolveAll(key, type, originNamespace, facade));
 		
 		
 		//searching in the imported namespaces. Also  detect transitive and cyclic import references.  
 		if ( !isTransitiveImportLookup(facade , originNamespace)) {
 			ensureImportedNamespaceUrisLoaded(facade);
-			retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, originNamespace, facade)) ;
+			retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, type, originNamespace, facade)) ;
 		}
 		//returning the result 
 		return retResult;
@@ -214,7 +214,7 @@
 		return retSymbol;
 	}
 	
-	private Set<SpxSymbol> resolveAllSymbolsInNamespaces(Iterable<NamespaceUri> resolvableUris  ,IStrategoTerm key, INamespace searchOrigin, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
+	private Set<SpxSymbol> resolveAllSymbolsInNamespaces(Iterable<NamespaceUri> resolvableUris  ,IStrategoTerm key, IStrategoTerm ofType,  INamespace searchOrigin, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
 		
 		Set<SpxSymbol> retSymbol = new HashSet<SpxSymbol>();
 		INamespaceResolver namespaceResolver = facade.persistenceManager().spxSymbolTable();
@@ -229,7 +229,7 @@
 				// hence, ignoring it.
 				continue;
 			}
-			retSymbol.addAll((Set<SpxSymbol>)thisNamespace.resolveAll(key, this, facade));
+			retSymbol.addAll((Set<SpxSymbol>)thisNamespace.resolveAll(key, ofType, this, facade));
 		}
 		
 		return retSymbol;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Fri Oct 14 09:00:40 2011	(r23455)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Fri Oct 14 11:44:24 2011	(r23456)
@@ -144,10 +144,10 @@
 	 * @throws IOException
 	 */
 	public void commit() throws IOException {
+		this.spxSymbolTable().commit();
 		
 		if( Utils.DEBUG) { this.spxSymbolTable().printSymbols("commit");} 
 		if(!this.isClosed()){
-			this.spxSymbolTable().commit();
 			_recordManager.commit();
 		}	
 	}
@@ -158,9 +158,15 @@
 	 * @throws IOException
 	 */
 	public void close() throws IOException { 
+		spxSymbolTable().commit();
+		
 		if(!this.isClosed()){ 
 			_recordManager.close();
 		}	
+		this._spxModuleTable = null;
+		this._spxPackageTable = null;
+		this._spxUnitsTable = null;
+		this._spxSymbolTable = null;
 	}
 	
 	/* (non-Javadoc)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Fri Oct 14 09:00:40 2011	(r23455)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Fri Oct 14 11:44:24 2011	(r23456)
@@ -205,7 +205,7 @@
 		_manager.logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + " of Type : "+ symbolType.getName());
 		
 		ensureActiveNamespaceLoaded(namespaceId);
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_activeNamespace.resolveAll(symbolId, symbolType ,spxSemanticIndexFacade);
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_activeNamespace.resolveAll(symbolId, symbolType ,spxSemanticIndexFacade);
 		
 		_manager.logMessage(SRC, "resolveSymbols | Resolved Symbols : " + resolvedSymbols);
 		return resolvedSymbols;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Oct 14 09:00:40 2011	(r23455)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Oct 14 11:44:24 2011	(r23456)
@@ -7,7 +7,9 @@
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
@@ -360,7 +362,7 @@
 	}
 	
 	public Iterable<SpxSymbol> resolveSymbol(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType) throws SpxSymbolTableException {
-		List<SpxSymbol> resolvedSymbols= new ArrayList<SpxSymbol>();
+		Set<SpxSymbol> resolvedSymbols= new HashSet<SpxSymbol>();
 		
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
@@ -768,6 +770,7 @@
 		if (!isPersistenceManagerClosed()) {
 			logMessage("close | closing underlying persistence manager instance.");
 			_persistenceManager.close();
+			_persistenceManager = null;
 		}else {
 			logMessage("close | underlying persistence manager is already closed. ");
 		}	
@@ -800,7 +803,7 @@
 	 * 
 	 * @return true if PersistenceManage is open. Otherwise returns false.
 	 */
-	boolean isPersistenceManagerClosed() { 	return _persistenceManager.isClosed(); }
+	boolean isPersistenceManagerClosed() { 	return (_persistenceManager == null) || _persistenceManager.isClosed(); }
 
 
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Fri Oct 14 09:00:40 2011	(r23455)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Fri Oct 14 11:44:24 2011	(r23456)
@@ -87,6 +87,7 @@
 		if((facade != null) &&  !facade.isPersistenceManagerClosed())
 			facade.close();
 		
+		
 		return facade;
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Fri Oct 14 09:00:40 2011	(r23455)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Fri Oct 14 11:44:24 2011	(r23456)
@@ -5,6 +5,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.List;
+import java.util.Set;
 
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
@@ -245,7 +246,7 @@
 		
 		
 		// Resolving Symbol 
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId,
 				namespaceAppl.getConstructor()
@@ -314,7 +315,7 @@
 		_facade.indexSymbol(symbolDef3);
 		
 		// Resolving Symbols
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols( 
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
 				_facade.getConstructor("SDFDef", 0) 
@@ -323,7 +324,7 @@
 		assertEquals(2 , resolvedSymbols.size());
 		
 		//Resolving only one Symbol
-		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbol( 
+		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbol( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
 				_facade.getConstructor("SDFDef", 0) 
@@ -331,7 +332,7 @@
 		
 		assertEquals(1 , resolvedSymbols.size());
 		
-		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols( 
+		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
 				_facade.getConstructor("STRDef", 0) 
@@ -354,7 +355,7 @@
 		
 		IStrategoTerm symbolUnknownId = termFactory().makeTuple(currentAppl , termFactory().makeString("_")); // defining following composite ID :  (Global() , "TestId")
 		
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolUnknownId,
 				_facade.getConstructor("SDFDef", 0) 
@@ -374,7 +375,7 @@
 		
 		_facade.indexSymbol(createEntry(currentAppl , symbolId1 , typeAppl1  , data1));
 		
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
 				_facade.getConstructor("SDFDef", 0) 
@@ -382,7 +383,7 @@
 		
 		assertEquals(1, resolvedSymbols.size());
 		
-		SpxSymbol actual = resolvedSymbols.get(0);
+		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];
 		assertEquals("SDFDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
 		assertTrue( SpxSymbol.verifyEquals( currentAppl.getSubterm(0).getSubterm(0) , actual.namespaceUri().id()) );
@@ -399,7 +400,7 @@
 		
 		_facade.indexSymbol(createEntry(currentAppl , symbolId1 , typeAppl1  , data1));
 		
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP2M1),
 				symbolId1,
 				_facade.getConstructor("SDFDef", 0) 
@@ -422,7 +423,7 @@
 		
 		_facade.indexSymbol(createEntry(internalModuleAppl , symbolId1 , typeAppl1  , data1));
 		
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade, this.packageDeclaration2.getId()),
 				symbolId1,
 				_facade.getConstructor("SDFDef", 0) 
@@ -444,7 +445,7 @@
 		
 		_facade.indexSymbol(createEntry(internalModuleAppl , symbolId1 , typeAppl1  , data1));
 		
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				internalModuleAppl,
 				symbolId1,
 				_facade.getConstructor("SDFDef", 0) 
@@ -452,7 +453,7 @@
 		
 		assertEquals(1, resolvedSymbols.size());
 		
-		SpxSymbol actual = resolvedSymbols.get(0);
+		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];
 		assertEquals("SDFDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
 		assertTrue( SpxSymbol.verifyEquals( internalModuleAppl.getSubterm(0).getSubterm(0) , actual.namespaceUri().id()) );
@@ -473,7 +474,7 @@
 		
 		
 		
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
 				_facade.getConstructor("ModuleDef", 0) 
@@ -497,7 +498,7 @@
 		
 		
 		
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
 				_facade.getConstructor("ModuleDef", 0) 
@@ -526,7 +527,7 @@
 		
 		_facade.indexSymbol(createEntry(moduleQnameAppl , symbolId1 , typeAppl1  , data1));
 		
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()),
 				symbolId1,
 				_facade.getConstructor("ModuleDef", 0) 
@@ -534,7 +535,7 @@
 		
 		assertEquals(0, resolvedSymbols.size());
 		
-		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()),
 				symbolId1,
 				_facade.getConstructor("ModuleDef", 0) 
@@ -542,7 +543,7 @@
 		
 		assertEquals(1, resolvedSymbols.size());
 		
-		SpxSymbol actual = resolvedSymbols.get(0);
+		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];
 		assertEquals("ModuleDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
@@ -571,7 +572,7 @@
 		
 		//Resolving Symbol in Package 1. It will not find any symbol defined in Package2. Hence, 
 		//it will return just the symbol from the Package1 .
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
 				symbolId3,	//looking for 
 				_facade.getConstructor("ModuleDef", 0) // with type 
@@ -580,7 +581,7 @@
 		
 		assertEquals(1, resolvedSymbols.size());
 		
-		SpxSymbol actual = resolvedSymbols.get(0); // resolved from the current namespace - Module 1 of Package 1 
+		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0]; // resolved from the current namespace - Module 1 of Package 1 
 		assertEquals("ModuleDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId3, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP1M1.getId() , actual.namespaceUri().id()) );
@@ -608,14 +609,14 @@
 		
 		
 		//Resolving Symbol in Package 2 . It should return symbol from imported package3
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()), // search origin
 				symbolId3, // loooking for 
 				_facade.getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
-		SpxSymbol actual  = resolvedSymbols.get(0); // Resolved from the imported namespace - Module 1 of Package 3
+		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0]; // Resolved from the imported namespace - Module 1 of Package 3
 		assertEquals("ModuleDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId3, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
@@ -649,7 +650,7 @@
 		SpxSemanticIndexFacade tfacade = _registry.getFacade(this.projectNameTerm);
 		
 		//Resolving Symbol in Package 3
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)tfacade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
 				tfacade.getConstructor("ModuleDef", 0) // with type 
@@ -665,14 +666,14 @@
 		assertEquals(2, resolvedSymbols.size());
 		
 		//Resolving Symbol in Package 3. It will just resolve one symbol and exit search
-		resolvedSymbols = (List<SpxSymbol>)tfacade.resolveSymbol(
+		resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbol(
 				ModuleDeclaration.toModuleQNameAppl(tfacade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
 				tfacade.getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
-		SpxSymbol actual = resolvedSymbols.get(0); // Resolved from the imported namespace - Module 1 of Package 3
+		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0]; // Resolved from the imported namespace - Module 1 of Package 3
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
 	
@@ -729,7 +730,7 @@
 		
 		//Resolving Symbol from ModuleP1M1. It will not find any symbol defined in localScope. Hence, 
 		//it will return just the symbol from the ModuleP1M1 .
-		List<SpxSymbol> resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				nsAppl, // search origin
 				symbolId1,	//looking for 
 				_facade.getConstructor("ModuleDef", 0) // with type 
@@ -738,7 +739,7 @@
 		
 		assertEquals(1, resolvedSymbols.size());
 		
-		SpxSymbol actual = resolvedSymbols.get(0); // resolved from the current namespace - Module 1 of Package 1 
+		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];// resolved from the current namespace - Module 1 of Package 1 
 		assertEquals("ModuleDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP1M1.getId() , actual.namespaceUri().id()) );
@@ -753,7 +754,7 @@
 		_facade.indexSymbol(createEntry(globalNamespaceAppl , symbolId2 , typeAppl2  , data2));
 		
 		//Resolving Symbol defined in Global Namespace. 		
-		resolvedSymbols = (List<SpxSymbol>)_facade.resolveSymbols(
+		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				nsAppl, // search origin
 				symbolId2,	//looking for 
 				_facade.getConstructor("SDFDef", 0) // with type 
@@ -762,7 +763,7 @@
 		
 		assertEquals(1, resolvedSymbols.size());
 		
-		actual = resolvedSymbols.get(0); // resolved from the current namespace - Module 1 of Package 1 
+		actual = (SpxSymbol)resolvedSymbols.toArray()[0]; // resolved from the current namespace - Module 1 of Package 1 
 		assertEquals("SDFDef", actual.type());
 		assertTrue(SpxSymbol.verifyEquals(symbolId2, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( GlobalNamespace.getGlobalNamespaceId(_facade) , actual.namespaceUri().id()) );

From seba at informatik.uni-marburg.de  Fri Oct 14 21:59:19 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 14 Oct 2011 19:59:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23457 -
	sugarj/trunk/editor/editor/java/org/sugarj/builder
Message-ID: <20111014195919.334EDCC0E5@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Fri Oct 14 19:59:17 2011
New Revision: 23457
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23457&sc=1

Log:
less rebuilding

Modified:
   sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java

Modified: sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Fri Oct 14 11:44:24 2011	(r23456)
+++ sugarj/trunk/editor/editor/java/org/sugarj/builder/Builder.java	Fri Oct 14 19:59:17 2011	(r23457)
@@ -173,7 +173,11 @@
           try {
             monitor.beginTask("compile " + input.sourceFile.getRelativePath(), IProgressMonitor.UNKNOWN);
 
-            Result res = Driver.compile(input.sourceFile, monitor);
+            Environment environment = input.sourceFile.getSourceLocation().getEnvironment();
+            RelativePath depFile = new RelativePath(environment.getBin(), FileCommands.dropExtension(input.sourceFile.getRelativePath()) + ".dep");
+            Result res = Result.readDependencyFile(depFile, environment);
+            if (res == null || !res.isUpToDate(input.sourceFile, environment))
+              res = Driver.compile(input.sourceFile, monitor);
             
             IWorkbenchWindow[] workbenchWindows = PlatformUI.getWorkbench().getWorkbenchWindows();
             for (IWorkbenchWindow workbenchWindow : workbenchWindows)

From M.A.Akhter at student.tudelft.nl  Fri Oct 14 23:40:21 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 14 Oct 2011 21:40:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23458 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111014214021.8F974108C00B@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 14 21:40:19 2011
New Revision: 23458
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23458&sc=1

Log:
+ unit tests

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java	Fri Oct 14 19:59:17 2011	(r23457)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java	Fri Oct 14 21:40:19 2011	(r23458)
@@ -2,9 +2,11 @@
 
 import java.io.Serializable;
 
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -22,7 +24,10 @@
 	
 	public SpxBaseSymbol(IStrategoTerm id){
 		_id = id ;
-		_idString = id.toString(Integer.MAX_VALUE);
+		if( _id instanceof IStrategoString)
+			_idString = Tools.asJavaString(_id);
+		else	
+			_idString = id.toString(Integer.MAX_VALUE);
 	}
 	
 	public IStrategoTerm Id(ITermFactory _fac ){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Fri Oct 14 19:59:17 2011	(r23457)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java	Fri Oct 14 21:40:19 2011	(r23458)
@@ -62,7 +62,7 @@
 	
 	void setNamespace(NamespaceUri id){ _namespace = id;}
 	
-	boolean equalType (IStrategoConstructor term) { 
+	public boolean equalType (IStrategoConstructor term) { 
 		return _type.equals(term.getName()); 
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Fri Oct 14 19:59:17 2011	(r23457)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Fri Oct 14 21:40:19 2011	(r23458)
@@ -11,8 +11,8 @@
 	private Utils() {
 		
 	}
-	static final String All     = "*";
-	static final String CURRENT = ".";
+	public static final String All     = "*";
+	public  static final String CURRENT = ".";
 	
 	static final boolean DEBUG = true;
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Fri Oct 14 19:59:17 2011	(r23457)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Fri Oct 14 21:40:19 2011	(r23458)
@@ -21,6 +21,7 @@
 import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacadeRegistry;
 import org.spoofax.interpreter.library.language.spxlang.SpxSymbol;
 import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
+import org.spoofax.interpreter.library.language.spxlang.Utils;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -125,7 +126,7 @@
 	
 	public void testRemovingModuleDeclarationShouldAlsoRemoveNamespace() throws IOException, SpxSymbolTableException, URISyntaxException{
 		
-		setupScopeTree();
+ 		setupScopeTree();
 		
 		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace(moduleDeclarationP1M1.getId());
 		assertNotNull(ns);
@@ -275,8 +276,8 @@
 		// Indexing Symbol
 		_facade.indexSymbol(symbolDef);
 		try{
-		// Resolving Symbol 
-		_facade.resolveSymbols(
+			// Resolving Symbol 
+			_facade.resolveSymbols(
 				termFactory().makeTuple(
 						ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 						symbolId,
@@ -507,7 +508,6 @@
 		assertEquals(1, resolvedSymbols.size());
 	}
 	
-	
 	public void testShouldNotAllowTransitiveImports() throws IOException, SpxSymbolTableException{
 		setupScopeTree();
 		
@@ -622,7 +622,6 @@
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
 	
-	
 	public void testShouldNotFailIncaseOfCyclicImports() throws Exception{
 		createExtendedScopeTree();
 		
@@ -770,7 +769,74 @@
 	
 	}
 	
-	
+	public void testResolveShouldReturnAllSymbolsOfaType() throws Exception{
+		createExtendedScopeTree();
+		
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		IStrategoAppl moduleQnameAppl2 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M2.getId());
+		IStrategoAppl moduleQnameAppl3 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId());
+		
+		// Defining Symbol1 in P1.M1
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId1 , typeAppl1  , data1));
+		
+		// Defining Symbol1 in P1.M2
+		IStrategoTerm symbolId2 = moduleQnameAppl1; 
+	 	IStrategoTerm data2 = (IStrategoAppl)moduleDeclarationP1M2.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl2 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef__", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl2 , symbolId2 , typeAppl2  , data2));
+		
+		// Defining Symbol3 in P2.M1
+		IStrategoTerm symbolId3 = moduleQnameAppl1; 
+	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP2M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl3 = typeAppl1;
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
+		
+		_facade.persistChanges();
+		
+		// closing persistence manager
+		_registry.closePersistenceManager(this.projectNameTerm);
+		_registry.initFacade(projectNameTerm, termFactory(), ioAgent());
+		
+		// loading tfacade again
+		SpxSemanticIndexFacade tfacade = _registry.getFacade(this.projectNameTerm);
+		
+
+		//-------------------------Resolving Symbol in Package 3--------------------------------------------
+		// It should only return 2 symbols defined in P1.M1         									   |
+		//--------------------------------------------------------------------------------------------------
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
+				termFactory().makeString(Utils.All), // loooking for * symbols 
+				typeAppl1.getConstructor() // of Type 
+				);
+		
+		assertEquals(1, resolvedSymbols.size());
+		
+		for( SpxSymbol sym : resolvedSymbols) {
+			assertTrue(sym.equalType(typeAppl1.getConstructor())); 
+		}
+		
+		//-------------------------Resolving Symbol in Package 1--------------------------------------------
+		// It should only return 2 symbols defined in P1.M1 and P2.M1                                      |
+		//--------------------------------------------------------------------------------------------------
+		resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
+				termFactory().makeString(Utils.All), // loooking for * symbols 
+				typeAppl1.getConstructor() // of Type 
+				);
+		
+		assertEquals(2, resolvedSymbols.size());
+		
+		for( SpxSymbol sym : resolvedSymbols) {
+			assertTrue(sym.equalType(typeAppl1.getConstructor())); 
+		}
+	}
 	
 	private void createExtendedScopeTree() throws IOException, SpxSymbolTableException{
 		// Setting up a big Scope-Tree

From M.A.Akhter at student.tudelft.nl  Sat Oct 15 00:14:25 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 14 Oct 2011 22:14:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23459 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. tests
Message-ID: <20111014221425.DF88BCC0DA@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 14 22:14:25 2011
New Revision: 23459
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23459&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Fri Oct 14 21:40:19 2011	(r23458)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Fri Oct 14 22:14:25 2011	(r23459)
@@ -73,7 +73,7 @@
 	private void defineSymbol(SpxSymbolTableEntry entry){
 		SpxSymbolKey key = entry.key;
 		
-		if ( symbols.containsKey(key)){
+		if (symbols.containsKey(key)){
 			symbols.get(key).add(entry.value);
 		}else{
 			List<SpxSymbol> values = new ArrayList<SpxSymbol>(); 
@@ -105,7 +105,7 @@
 		SpxSymbolKey key = new SpxSymbolKey(id);
 		List<SpxSymbol> resolvedSymbols  = new ArrayList<SpxSymbol>();
 		
-		if(key.getId().equalsIgnoreCase(Utils.All)){
+		if(key.getId().equalsIgnoreCase(Utils.All_SYMBOLS)){
 			// Found * in the ID. 
 			// Hence returning ALL symbols of  a particular type specified in the argument.
 			for (Entry<SpxSymbolKey, List<SpxSymbol>> entry : members.entrySet()) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Fri Oct 14 21:40:19 2011	(r23458)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Fri Oct 14 22:14:25 2011	(r23459)
@@ -41,6 +41,14 @@
 		super(currentNamespace, type, manager, enclosingNamespace);
 	}
 	
+	@Override 
+	public void clear() { 
+		super.clear();
+		
+		importedNamespaceUris = null;
+		enclosedNamespaceUris = null;
+	};
+	
 	/**
 	 * Ensures that the enclosed Namespaces of this {@link} PackageNamespace is already loaded. If not, then they  
 	 * are loaded. 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java	Fri Oct 14 21:40:19 2011	(r23458)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java	Fri Oct 14 22:14:25 2011	(r23459)
@@ -2,11 +2,9 @@
 
 import java.io.Serializable;
 
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -17,19 +15,24 @@
 	
 	private transient IStrategoTerm _id;
 	
-	//@serial
+	/**
+	 *  @serial
+	 */
 	private String _idString;
 	
+	/**
+	 * Returns String representation of ID
+	 * 
+	 * @return {@code String} representation of ID 
+	 */
 	public String getId(){  return _idString ; }
 	
 	public SpxBaseSymbol(IStrategoTerm id){
 		_id = id ;
-		if( _id instanceof IStrategoString)
-			_idString = Tools.asJavaString(_id);
-		else	
-			_idString = id.toString(Integer.MAX_VALUE);
+		_idString = id.toString(Integer.MAX_VALUE);
 	}
 	
+	
 	public IStrategoTerm Id(ITermFactory _fac ){
 		if (_id == null){
 			_id = _fac.parseFromString(_idString);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java	Fri Oct 14 21:40:19 2011	(r23458)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java	Fri Oct 14 22:14:25 2011	(r23459)
@@ -15,6 +15,7 @@
 	static final String CLOSE_COMMAND_STRING = "CLOSE" ;
 	static final String SAVE_COMMAND_STRING = "SAVE" ;
 	static final String ROLLBACK_COMMAND_STRING = "ROLLBACK" ;
+	static final String INVALIDATE_GLOBAL_CACHE_COMMAND_STRING = "INVALIDATE_GLOBAL_CACHE" ;
 	
 	public void run() throws Exception;
 }
@@ -67,9 +68,13 @@
 		
 		if(commandName.equalsIgnoreCase(ROLLBACK_COMMAND_STRING))
 			return rollbackCommandInstance(spxSemanticIndex , projectPath, objects);
+		if(commandName.equalsIgnoreCase(INVALIDATE_GLOBAL_CACHE_COMMAND_STRING))
+			return invalidateGlobalCacheCommandInstance(spxSemanticIndex , projectPath, objects);
 		
 		throw new IllegalArgumentException("Invalid Command Name : "+ commandName) ;
 	}
+	
+
 	private static IIndexManageCommand rollbackCommandInstance(
 			final SpxSemanticIndex index, IStrategoString projectPath,
 			Object[] objects) {
@@ -142,4 +147,15 @@
 		};
 	}
 	
+	private static IIndexManageCommand invalidateGlobalCacheCommandInstance(
+			SpxSemanticIndex index, IStrategoString projectPath,
+			Object[] objects) {
+		
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				SpxSemanticIndexFacade idxFacade = idx.getFacade(projectPath);
+				idxFacade.invalidateGlobalNamespace();
+			}
+		};
+	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Fri Oct 14 21:40:19 2011	(r23458)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Fri Oct 14 22:14:25 2011	(r23459)
@@ -49,45 +49,7 @@
 		}	
 	}
 	
-	/**
-	 * Printing all the symbols current hashmap 
-	 * 
-	 * @throws IOException
-	 */
-	public void printSymbols(String state) throws IOException{
-		FileWriter fstream = new FileWriter("c:/temp/log/symbols"+ now("yyyy-MM-dd")+".txt" , true);
-		BufferedWriter out = new BufferedWriter(fstream);
-		out.write("---Logging [" +state+ "] state of Symbol-Table at :" + now("yyyy-MM-dd HH.mm.ss")+":----\n");
-		try
-		{	
-			if(namespaces != null){
-				for(INamespace ns : namespaces.values()){
-					out.write("|" + ns +"|\n");
-					logEntries(ns,out) ;
-				}
-			}
-		}finally{out.close();}
-	}
 	
-	
-	private static  void logEntries( INamespace namespace , BufferedWriter logger) throws IOException{
-		Map<SpxSymbolKey , List<SpxSymbol>> members = namespace.getMembers();
-		for( SpxSymbolKey k : members.keySet()) {
-			logger.write("\t"+k.toString()  + " :  \n");
-			
-			for( SpxSymbol s : members.get(k) ){
-				logger.write( "\t\t"+ s.toString() + "\n");
-			}
-		}
-		logger.write("\n");
-	}
-	
-	private static String now(String dateFormat) {
-	    Calendar cal = Calendar.getInstance();
-	    SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
-	    return sdf.format(cal.getTime());
-
-	  }
 	/**
 	 * Adding Global Namespace in symbol-table by default.
 	 * @param facade
@@ -303,4 +265,49 @@
 			
 		};
 	}
+
+	public void clearGlobalNamespce(SpxSemanticIndexFacade spxSemanticIndexFacade) {
+		_manager.logMessage(SRC, "clearGlobalNamespce | Remove all the entries stored currently in GlobalNamespace" );
+		
+		IStrategoList gnsId = GlobalNamespace.getGlobalNamespaceId(spxSemanticIndexFacade);
+		INamespace gns = this.resolveNamespace(gnsId); 
+		if(gns != null)
+			gns.clear();
+		
+		_manager.logMessage(SRC, "clearGlobalNamespce | Successfully removed all the entries." );
+	}
+	
+	/**
+	 * Printing all the symbols current hashmap 
+	 * 
+	 * @throws IOException
+	 */
+	public void printSymbols(String state) throws IOException{
+		FileWriter fstream = new FileWriter("c:/temp/log/symbols"+ Utils.now("yyyy-MM-dd")+".txt" , true);
+		BufferedWriter out = new BufferedWriter(fstream);
+		out.write("---Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+":----\n");
+		try
+		{	
+			if(namespaces != null){
+				for(INamespace ns : namespaces.values()){
+					out.write("|" + ns +"|\n");
+					logEntries(ns,out) ;
+				}
+			}
+		}finally{out.close();}
+	}
+	
+	
+	private static  void logEntries( INamespace namespace , BufferedWriter logger) throws IOException{
+		Map<SpxSymbolKey , List<SpxSymbol>> members = namespace.getMembers();
+		for( SpxSymbolKey k : members.keySet()) {
+			logger.write("\t"+k.toString()  + " :  \n");
+			
+			for( SpxSymbol s : members.get(k) ){
+				logger.write( "\t\t"+ s.toString() + "\n");
+			}
+		}
+		logger.write("\n");
+	}
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Oct 14 21:40:19 2011	(r23458)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Oct 14 22:14:25 2011	(r23459)
@@ -341,6 +341,12 @@
 		return SpxSymbol.toTerms(this, spxSymbols);
 	}
 	
+	public void invalidateGlobalNamespace() {
+		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		
+		symbolTable.clearGlobalNamespce(this);
+	}
+	
 	/**
 	 * Resolves symbols from {@link SpxPrimarySymbolTable}.
 	 * 
@@ -1013,6 +1019,4 @@
 		
 	}
 
-
-	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Fri Oct 14 21:40:19 2011	(r23458)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Fri Oct 14 22:14:25 2011	(r23459)
@@ -2,6 +2,8 @@
 
 import java.io.File;
 import java.net.URI;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -11,8 +13,9 @@
 	private Utils() {
 		
 	}
-	public static final String All     = "*";
-	public  static final String CURRENT = ".";
+	public static final String All = "*";
+	public static final String All_SYMBOLS = "\"*\"";
+	public static final String CURRENT = ".";
 	
 	static final boolean DEBUG = true;
 	
@@ -53,4 +56,9 @@
 		return new File(path).getAbsolutePath();
 	}
 	
+	static String now(String dateFormat) {
+	    Calendar cal = Calendar.getInstance();
+	    SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
+	    return sdf.format(cal.getTime());
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java	Fri Oct 14 21:40:19 2011	(r23458)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java	Fri Oct 14 22:14:25 2011	(r23459)
@@ -8,6 +8,7 @@
 import org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.PackageDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacadeRegistry;
 import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -29,19 +30,21 @@
 	private Interpreter interpreter(){ return itp;	}
 
 	private IOAgent ioAgent() { return itp.getIOAgent(); }
-	
+	private SpxSemanticIndexFacadeRegistry _registry;
 	private ITermFactory termFactory() { return factory; 	}
 	
 	@Override
 	protected void setUp() throws Exception {
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
+		_registry = new SpxSemanticIndexFacadeRegistry();
 		
 		projectNameTerm = termFactory().makeString(_projectName);
-		
 	
-		_facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
+		_registry.initFacade(projectNameTerm, termFactory(), ioAgent()); 
+		_facade = _registry.getFacade(projectNameTerm);
 		_facade.reinitSymbolTable();
+	
 		indexCompilationUnit();
 	}
 	

From M.A.Akhter at student.tudelft.nl  Sat Oct 15 01:16:36 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 14 Oct 2011 23:16:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23460 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	jdbm org/spoofax/interpreter/library/language
	org/spoofax/interpreter/library/language/spxla...
Message-ID: <20111014231636.CFA5FCC0B8@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 14 23:16:36 2011
New Revision: 23460
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23460&sc=1

Log:
new package structure for spx semantic index

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
      - copied, changed from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java
      - copied, changed from r23447, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java
      - copied, changed from r23456, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespaceFactory.java
      - copied, changed from r23416, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespaceResolver.java
      - copied, changed from r23447, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java
      - copied, changed from r23454, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java
      - copied, changed from r23434, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LocalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java
      - copied, changed from r23447, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
      - copied, changed from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
      - copied, changed from r23452, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
      - copied, changed from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
      - copied, changed from r23432, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
      - copied, changed from r23416, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
      - copied, changed from r23456, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
      - copied, changed from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
      - copied, changed from r23452, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
      - copied, changed from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
      - copied, changed from r23456, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
      - copied, changed from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxBaseSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/
      - copied from r23416, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java
      - copied, changed from r23448, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java
Replaced:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
      - copied, changed from r23458, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
      - copied, changed from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LanguageDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LocalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/NamespaceUri.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxBaseSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitInfo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolKey.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSymbolTableException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -348,9 +348,5 @@
      * @return map
      */
 	public <V> PrimaryStoreMap<Long, V> storeMap(String name);
-
-
-	
-
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -2,6 +2,7 @@
 
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
 import org.spoofax.interpreter.library.language.spxlang.*;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -5,6 +5,9 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexManager;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
+import org.spoofax.interpreter.library.language.spxlang.index.data.IIndexManageCommand;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_compilation_unit.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -7,6 +7,7 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_compilation_unit.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -4,6 +4,7 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imports.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -5,6 +5,7 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_language_descriptor.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -5,6 +5,7 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declaration.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -5,6 +5,7 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -5,6 +5,7 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_definition.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declaration.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -5,6 +5,7 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_of.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_import_references.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -4,6 +4,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_language_descriptor.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -9,6 +9,7 @@
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_module_definition.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -4,6 +4,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_package_declaration.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -4,6 +4,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_remove_compilation_unit.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_define_symbol.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_destroy_scope.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_new_scope.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_resolve_symbols.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -5,6 +5,7 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Fri Oct 14 22:14:25 2011	(r23459)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -7,6 +7,9 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacadeRegistry;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java (from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/BaseNamespace.java	Fri Oct 14 22:14:25 2011	(r23459, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,6 +1,6 @@
 
 
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -10,6 +10,11 @@
 import java.util.Map.Entry;
 import java.util.Set;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolKey;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableEntry;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java (from r23447, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/GlobalNamespace.java	Wed Oct 12 18:48:45 2011	(r23447, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,5 +1,6 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java (from r23456, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespace.java	Fri Oct 14 11:44:24 2011	(r23456, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.Serializable;
 import java.net.URI;
@@ -6,6 +6,11 @@
 import java.util.Map;
 import java.util.UUID;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolKey;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableEntry;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespaceFactory.java (from r23416, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceFactory.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceFactory.java	Tue Oct  4 21:09:10 2011	(r23416, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespaceFactory.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 
 public interface INamespaceFactory {

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespaceResolver.java (from r23447, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/INamespaceResolver.java	Wed Oct 12 18:48:45 2011	(r23447, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespaceResolver.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,7 +1,8 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.util.Set;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
 import org.spoofax.interpreter.terms.IStrategoList;
 
 public interface INamespaceResolver {

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java (from r23454, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ISpxPersistenceManager.java	Fri Oct 14 01:26:55 2011	(r23454, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.IOException;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java (from r23434, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LocalNamespace.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/LocalNamespace.java	Sat Oct  8 14:05:08 2011	(r23434, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,7 +1,8 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.util.UUID;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java (from r23447, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/ModuleNamespace.java	Wed Oct 12 18:48:45 2011	(r23447, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,7 +1,9 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.net.URI;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java (from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/PackageNamespace.java	Fri Oct 14 22:14:25 2011	(r23459, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -6,6 +6,11 @@
 import java.util.List;
 import java.util.Set;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java (from r23452, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxCompilationUnitTable.java	Fri Oct 14 01:13:04 2011	(r23452, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.IOException;
 import java.net.URI;
@@ -7,6 +7,9 @@
 import java.util.List;
 import java.util.Set;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxCompilationUnitInfo;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java (from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxIndexManager.java	Fri Oct 14 22:14:25 2011	(r23459, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,26 +1,16 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.IOException;
 
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.spxlang.index.data.IIndexManageCommand;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-interface IIndexManageCommand {
-	
-	static final String CLEAR_COMMAND_STRING = "CLEAR" ;
-	static final String INIT_COMMAND_STRING = "INIT" ;
-	static final String CLOSE_COMMAND_STRING = "CLOSE" ;
-	static final String SAVE_COMMAND_STRING = "SAVE" ;
-	static final String ROLLBACK_COMMAND_STRING = "ROLLBACK" ;
-	static final String INVALIDATE_GLOBAL_CACHE_COMMAND_STRING = "INVALIDATE_GLOBAL_CACHE" ;
-	
-	public void run() throws Exception;
-}
-
-class SpxIndexManager implements IIndexManageCommand 
+public class SpxIndexManager implements IIndexManageCommand 
 {
 	private final SpxSemanticIndex spxSemanticIndex;
 	private final IStrategoTerm projectName; 
@@ -42,7 +32,7 @@
 	}
 	
 
-	static IIndexManageCommand getCommandInstance(final SpxSemanticIndex spxSemanticIndex , IStrategoString commandName, 
+	public static IIndexManageCommand getCommandInstance(final SpxSemanticIndex spxSemanticIndex , IStrategoString commandName, 
 			IStrategoString projectName, Object... objects){
 		
 		return getCommandInstance(spxSemanticIndex ,Tools.asJavaString(commandName) , projectName, objects);

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java (from r23432, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxModuleLookupTable.java	Thu Oct  6 18:17:03 2011	(r23432, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -10,6 +10,11 @@
 import jdbm.SecondaryHashMap;
 import jdbm.SecondaryKeyExtractor;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.IdentifiableConstruct;
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxCompilationUnitInfo;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java (from r23416, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPackageLookupTable.java	Tue Oct  4 21:09:10 2011	(r23416, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -13,6 +13,9 @@
 import jdbm.SecondaryKeyExtractor;
 
 import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.language.spxlang.index.data.LanguageDescriptor;
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxCompilationUnitInfo;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java (from r23456, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPersistenceManager.java	Fri Oct 14 11:44:24 2011	(r23456, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.IOException;
 import java.util.Properties;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java (from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxPrimarySymbolTable.java	Fri Oct 14 22:14:25 2011	(r23459, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.BufferedWriter;
 import java.io.FileWriter;
@@ -18,6 +18,13 @@
 import jdbm.SecondaryHashMap;
 import jdbm.SecondaryKeyExtractor;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolKey;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableEntry;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -65,7 +72,7 @@
  			this.namespaces.put(namespace.namespaceUri(), namespace);
 	}
 	
-	NamespaceUri toNamespaceUri(IStrategoList spoofaxId) {
+	public NamespaceUri toNamespaceUri(IStrategoList spoofaxId) {
 		NamespaceUri uri = getNamespaceUri(spoofaxId);
 		if(uri == null) {
 			uri = new NamespaceUri(spoofaxId);
@@ -283,7 +290,7 @@
 	 * @throws IOException
 	 */
 	public void printSymbols(String state) throws IOException{
-		FileWriter fstream = new FileWriter("c:/temp/log/symbols"+ Utils.now("yyyy-MM-dd")+".txt" , true);
+		FileWriter fstream = new FileWriter("c:/temp/log/symbols_"+ Utils.now("yyyy-MM-dd")+".txt" , true);
 		BufferedWriter out = new BufferedWriter(fstream);
 		out.write("---Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+":----\n");
 		try

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java (from r23452, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndex.java	Fri Oct 14 01:13:04 2011	(r23452, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.IOException;
 
@@ -9,6 +9,7 @@
 import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.spxlang.index.data.IIndexManageCommand;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java (from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacade.java	Fri Oct 14 22:14:25 2011	(r23459, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 
@@ -13,6 +13,14 @@
 
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.spxlang.index.data.IdentifiableConstruct;
+import org.spoofax.interpreter.library.language.spxlang.index.data.LanguageDescriptor;
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDefinition;
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableEntry;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -749,7 +757,7 @@
 	 * @return
 	 * @throws SpxSymbolTableException
 	 */
-	PackageDeclaration lookupPackageDecl(IStrategoList packageId) throws SpxSymbolTableException {
+	public PackageDeclaration lookupPackageDecl(IStrategoList packageId) throws SpxSymbolTableException {
 		
 		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
 		PackageDeclaration decl = table.getPackageDeclaration(packageId);

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java (from r23456, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxSemanticIndexFacadeRegistry.java	Fri Oct 14 11:44:24 2011	(r23456, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 
@@ -7,6 +7,7 @@
 
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java (from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/Utils.java	Fri Oct 14 22:14:25 2011	(r23459, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang;
+package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.File;
 import java.net.URI;
@@ -6,6 +6,7 @@
 import java.util.Calendar;
 
 import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.spxlang.index.data.IdentifiableConstruct;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.ITermFactory;
 
@@ -13,6 +14,7 @@
 	private Utils() {
 		
 	}
+	
 	public static final String All = "*";
 	public static final String All_SYMBOLS = "\"*\"";
 	public static final String CURRENT = ".";

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,187 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.io.Serializable;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.terms.StrategoListIterator;
+
+public abstract class IdentifiableConstruct implements Serializable
+{
+	private static final long serialVersionUID = 1055862481052307186L;
+	
+	protected final IStrategoList id;
+	protected final Set<IStrategoList> importReferences; 
+	protected final Set<IStrategoTerm> legacyImportReferences;
+	
+	public IdentifiableConstruct(IStrategoList id) {
+		assert id != null :  " ID can not be null " ;
+
+		this.id = id;
+		this.importReferences = new HashSet<IStrategoList>();
+		this.legacyImportReferences = new HashSet<IStrategoTerm>();
+	}
+	
+	public IStrategoList getId(){ return id; }  
+	
+	public abstract IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade);
+	
+	public void addImportRefernces (SpxSemanticIndexFacade idxFacade, IStrategoList  imports) throws NotImplementedException, SpxSymbolTableException {
+		for (IStrategoTerm i: StrategoListIterator.iterable(imports)) {
+			if(i instanceof IStrategoAppl)
+				addManagedImport(idxFacade, i); 
+			else
+				addLegacyImport(i);
+		}
+	}
+
+	/**
+	 * @param i
+	 */
+	private void addLegacyImport(IStrategoTerm i) {
+		this.legacyImportReferences.add(i);
+	}
+
+	/**
+	 * @param idxFacade
+	 * @param i
+	 * @throws IllegalArgumentException
+	 * @throws NotImplementedException
+	 */
+	private void addManagedImport(SpxSemanticIndexFacade idxFacade,	IStrategoTerm i) throws SpxSymbolTableException {
+		IStrategoAppl packageRef = (IStrategoAppl)i;
+		if( packageRef.getConstructor() ==  idxFacade.getPackageQNameCon()){
+			IStrategoList id = PackageDeclaration.getPackageId(idxFacade, packageRef);
+			PackageDeclaration decl = idxFacade.lookupPackageDecl(id);
+			if(decl != null ){	
+				this.importReferences.add(id);
+				decl.addImportedTo(this.getId());
+			}
+		}
+		else 
+			throw new NotImplementedException("Unknown Import Reference. Not implemented for : " + packageRef.toString());
+	}
+	
+	private IStrategoTerm tranformToSpxImport(SpxSemanticIndexFacade idxFacade, IStrategoTerm i){
+		IStrategoTerm retTerm = i ; 
+		if( i instanceof IStrategoList)
+			retTerm = idxFacade.getTermFactory().makeAppl(
+					idxFacade.getPackageQNameCon(), i);
+
+		return retTerm;	
+	}
+	
+	protected Set<IStrategoTerm> getEnclosedImportReferences(SpxSemanticIndexFacade idxFacade) throws SpxSymbolTableException { return new HashSet<IStrategoTerm>(); } 
+	
+	public Set<IStrategoList> getImportReferneces() { return importReferences; }
+	
+	public  IStrategoList getImports(SpxSemanticIndexFacade idxFacade) {	
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		
+		HashSet<IStrategoTerm> allImportRefs = new HashSet<IStrategoTerm>();
+		allImportRefs.addAll(this.importReferences);
+		allImportRefs.addAll(this.legacyImportReferences);
+		
+		IStrategoList result = termFactory.makeList();
+		for (IStrategoTerm t: allImportRefs)
+			result = idxFacade.getTermFactory().makeListCons(tranformToSpxImport(idxFacade,t), result);
+	
+		return result;
+	}
+	
+	protected IStrategoTerm forceImploderAttachment(IStrategoTerm term) {
+		ImploderAttachment attach = ImploderAttachment.get(id);
+		if (attach != null) {
+			ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(), attach.getRightToken());
+		} 
+		else {
+			String fn = getFileLocation();
+			term.putAttachment(ImploderAttachment.createCompactPositionAttachment(
+					fn, 0, 0, 0, -1));
+		}
+		return term;
+	}
+	
+	/**
+	 * Returns the location of the construct 
+	 * 
+	 * @return {@link String} representing the absolute path of the  Construct
+	 */
+	protected String getFileLocation() { return null; }
+	
+
+	static IStrategoAppl toIdTerm ( SpxSemanticIndexFacade facade , IStrategoConstructor namespaceCon, IStrategoList id)
+	{
+		ITermFactory factory = facade.getTermFactory();
+		
+		IStrategoConstructor qnameCons = facade.getQNameCon();
+		IStrategoAppl qnameAppl = factory.makeAppl(qnameCons, id);
+		return factory.makeAppl(namespaceCon, qnameAppl);
+	}
+
+	/**
+	 * Returns {@link IStrategoList} representation of qualified ID of the {@link IdentifiableConstruct}  
+	 * 
+	 * @param fac an instance of {@link ITermFactory}
+	 * @param qName Typed qualified Name of the construct 
+	 * 
+	 * @return underlying {@link IStrategoList} qualified name
+	 */
+	public static IStrategoList getID(SpxSemanticIndexFacade facade, IStrategoAppl qName) {
+		
+		if(qName.getConstructor() == facade.getQNameCon())
+			return (IStrategoList)qName.getSubterm(0);
+		
+		throw new IllegalArgumentException("Invalid QName : " + qName);
+	}
+	
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		return result;
+	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "IdentifiableConstruct [id=" + id + "]";
+	}
+	
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		IdentifiableConstruct other = (IdentifiableConstruct) obj;
+		if (id == null) {
+			if (other.id != null)
+				return false;
+		} else if (!id.match(other.id))
+			return false;
+		return true;
+	}
+
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,218 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.StrategoListIterator;
+
+/**
+ * Defines several properties of the Language specified in the 
+ * package scope. 
+ * 
+ * @author Md. Adil Akhter
+ * Created On : Sep 3, 2011
+ */
+public class LanguageDescriptor extends IdentifiableConstruct {
+
+	private static final long serialVersionUID = 7099736990601308645L;
+	
+	public static final int LanguageNamesIndex = 1;
+	public static final int LanguageIdsIndex = 2;
+	public static final int EsvStartSymbolsIndex = 3;
+	public static final int SdfStartSymbolsIndex = 4;
+	
+	private IStrategoList languageNames;
+	private IStrategoList languageIDs;
+	private IStrategoList esvDeclaredStartSymbols;
+	private IStrategoList sdfDeclaredStartSymbols;
+	
+	public LanguageDescriptor(IStrategoList id) {
+		super(id);
+	}
+	/**
+	 * @return the languageNames
+	 */
+	public IStrategoList getLanguageNames() {
+		return languageNames;
+	}
+	/**
+	 * @return the languageIDs
+	 */
+	public IStrategoList getLanguageIDs() {
+		return languageIDs;
+	}
+	/**
+	 * @return the esvDeclaredStartSymbols
+	 */
+	public IStrategoList getEsvDeclaredStartSymbols() {
+		return esvDeclaredStartSymbols;
+	}
+	/**
+	 * @return the sdfDeclaredStartSymbols
+	 */
+	public IStrategoList getSdfDeclaredStartSymbols() {
+		return sdfDeclaredStartSymbols;
+	}
+
+	public void addLanguageNames(ITermFactory fac, IStrategoList langNames) {
+		if (languageNames == null)
+			this.languageNames = fac.makeList();
+
+		this.languageNames = prepend(fac, languageNames, langNames);
+	}
+
+	public void addLanguageIDs(ITermFactory fac, IStrategoList langIds) {
+		languageIDs = prepend(fac, languageIDs, langIds);
+	}
+	
+	public void addEsvDeclaredStartSymbols(ITermFactory fac,
+			IStrategoList startSymbols) {
+		this.esvDeclaredStartSymbols = prepend(fac,
+				this.esvDeclaredStartSymbols, startSymbols);
+	}
+
+	public void addSDFDeclaredStartSymbols( ITermFactory fac , IStrategoList startSymbols)
+	{
+		this.sdfDeclaredStartSymbols =  prepend(fac, this.esvDeclaredStartSymbols  , startSymbols);
+	}
+	
+	public Iterable<String> asLanguageNameStrings()
+	{
+		Set<String> langNames = new HashSet<String>();
+		for (IStrategoTerm lName: StrategoListIterator.iterable(this.languageNames)) {
+			langNames.add(Tools.asJavaString(lName));
+		}
+		return langNames;
+	}
+	
+	/**
+	 * Creates a new instance of {@link LanguageDescriptor}
+	 * @param fac
+	 * @param decl
+	 * @return
+	 */
+	public static LanguageDescriptor newInstance(ITermFactory fac, LanguageDescriptor decl)
+	{
+		return newInstance(fac, 
+				decl.getId(), 
+				decl.languageIDs, 
+				decl.languageNames, 
+				decl.sdfDeclaredStartSymbols, 
+				decl.esvDeclaredStartSymbols);
+		
+	}
+
+	public static LanguageDescriptor newInstance( ITermFactory f,  IStrategoList packageId , IStrategoList languageIds, IStrategoList languageNames,IStrategoList sdfStartSymbols,IStrategoList esvStartSymbols)
+	{
+		LanguageDescriptor desc = new LanguageDescriptor(packageId);
+
+		desc.addLanguageIDs(f, languageIds);
+		desc.addLanguageNames( f, languageNames);
+		desc.addSDFDeclaredStartSymbols(f, sdfStartSymbols);
+		desc.addEsvDeclaredStartSymbols(f, esvStartSymbols);
+
+		return desc;
+	}
+	
+	private static IStrategoList prepend(ITermFactory fac, IStrategoList srcList, IStrategoList toPrepend) {
+		if ( toPrepend == null)
+			return srcList;
+		
+		if ( srcList == null)
+			srcList = fac.makeList();
+
+		for (IStrategoTerm result: StrategoListIterator.iterable(toPrepend)) {
+			srcList = fac.makeListCons(result, srcList);
+		}
+		return srcList;
+	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime
+				* result
+				+ ((esvDeclaredStartSymbols == null) ? 0
+						: esvDeclaredStartSymbols.hashCode());
+		result = prime * result
+				+ ((languageIDs == null) ? 0 : languageIDs.hashCode());
+		result = prime * result
+				+ ((languageNames == null) ? 0 : languageNames.hashCode());
+		result = prime
+				* result
+				+ ((sdfDeclaredStartSymbols == null) ? 0
+						: sdfDeclaredStartSymbols.hashCode());
+		return result;
+	}
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (!(obj instanceof LanguageDescriptor))
+			return false;
+		LanguageDescriptor other = (LanguageDescriptor) obj;
+		
+		if (esvDeclaredStartSymbols == null) {
+			if (other.esvDeclaredStartSymbols != null)
+				return false;
+		} else if (!esvDeclaredStartSymbols.match(other.esvDeclaredStartSymbols))
+			return false;
+		
+		if (languageIDs == null) {
+			if (other.languageIDs != null)
+				return false;
+		} else if (!languageIDs.match(other.languageIDs))
+			return false;
+		if (languageNames == null) {
+			if (other.languageNames != null)
+				return false;
+		} else if (!languageNames.match(other.languageNames))
+			return false;
+		if (sdfDeclaredStartSymbols == null) {
+			if (other.sdfDeclaredStartSymbols != null)
+				return false;
+		} else if (!sdfDeclaredStartSymbols.match(other.sdfDeclaredStartSymbols))
+			return false;
+		return true;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "LanguageDescriptor [languageNames=" + languageNames
+				+ ", languageIDs=" + languageIDs + ", esvDeclaredStartSymbols="
+				+ esvDeclaredStartSymbols + ", sdfDeclaredStartSymbols="
+				+ sdfDeclaredStartSymbols + "]";
+	}
+
+	@Override
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
+		
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		
+		IStrategoConstructor ctr = idxFacade.getLanguageDescriptorCon();
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(idxFacade, this.getId());
+		
+		IStrategoTerm retTerm = termFactory.makeAppl(ctr, packageQNameAppl , this.languageNames , this.languageIDs , this.esvDeclaredStartSymbols , this.sdfDeclaredStartSymbols);
+		
+		return this.forceImploderAttachment(retTerm);
+	} 
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,160 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.spoofax.interpreter.library.language.spxlang.index.INamespace;
+import org.spoofax.interpreter.library.language.spxlang.index.INamespaceFactory;
+import org.spoofax.interpreter.library.language.spxlang.index.ModuleNamespace;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxPrimarySymbolTable;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public class ModuleDeclaration extends IdentifiableConstruct implements INamespaceFactory  
+{
+	private static final long serialVersionUID = -6249406731326662111L;
+
+	public static final int ModuleTypedQNameIndex = 0;
+	public static final int ModulePathIndex = 1;
+	public static final int PackageTypedQNameIndex = 2;
+	public static final int AstIndex = 3;
+	public static final int AnalyzedAstIndex = 4;
+	
+	public final String resourceAbsPath; 
+
+	public final IStrategoList enclosingPackageID;
+	
+	
+	/* (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.IdentifiableConstruct#getFileLocation()
+	 */
+	@Override 
+	protected String getFileLocation() {
+		return resourceAbsPath;
+	}
+
+	public ModuleDeclaration(String resourceAbsPath, IStrategoList id , IStrategoList packageID) {
+		super(id);
+		
+		this.resourceAbsPath = resourceAbsPath;
+		this.enclosingPackageID = packageID;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "ModuleDeclaration [ id= " + id 
+				+ ", packageId ="+ enclosingPackageID 
+				+ ", resourceAbsPath= " + resourceAbsPath+ "]";
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime * result
+				+ ((resourceAbsPath == null) ? 0 : resourceAbsPath.hashCode());
+		
+		result = prime * result + ((enclosingPackageID == null) ? 0 : enclosingPackageID.hashCode());
+		
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		ModuleDeclaration other = (ModuleDeclaration) obj;
+		if (resourceAbsPath == null) {
+			if (other.resourceAbsPath != null)
+				return false;
+		} else if (!resourceAbsPath.equals(other.resourceAbsPath))
+			return false;
+		
+		if (enclosingPackageID == null) {
+			if (other.enclosingPackageID!= null)
+				return false;
+		} else if (!enclosingPackageID.match(other.enclosingPackageID))
+			return false;
+		
+		return true;
+	}
+	
+	public static IStrategoList getModuleId(SpxSemanticIndexFacade facade, IStrategoAppl moduleQName ){
+		IStrategoConstructor moduleCon  = facade.getModuleQNameCon();
+		
+		if(moduleCon   == moduleQName.getConstructor())
+			return getID(facade, (IStrategoAppl)moduleQName.getSubterm(ModuleTypedQNameIndex));	
+		
+		throw new IllegalArgumentException("Invalid module qname : "+ moduleQName.toString());
+	}
+	
+	public static IStrategoAppl toModuleQNameAppl(SpxSemanticIndexFacade facade , ModuleDeclaration decl)
+	{
+		return toIdTerm(facade, facade.getModuleQNameCon() , decl.getId());
+	}
+	
+	public static IStrategoAppl toModuleQNameAppl(SpxSemanticIndexFacade facade , IStrategoList id)
+	{
+		return toIdTerm(facade, facade.getModuleQNameCon() , id);
+	}
+
+	/* Transforms {@link ModuleDeclaration} to following term : 
+	 * 		ModuleDecl :  Module * String * Package -> Def
+	 * 
+	 * (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.BaseConstructDeclaration#toTerm(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
+	@Override
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
+		
+		ITermFactory termFactory = idxFacade.getTermFactory();
+
+		IStrategoConstructor moduleDeclCons = idxFacade.getModuleDeclCon();
+		
+		IStrategoAppl moduleQNameAppl =toModuleQNameAppl( idxFacade,  this);
+		IStrategoString resAbsPathTerm = termFactory.makeString(resourceAbsPath) ;
+		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(idxFacade, this.enclosingPackageID);
+		
+		IStrategoTerm retTerm = termFactory.makeAppl(moduleDeclCons,moduleQNameAppl,resAbsPathTerm,packageQNameAppl);
+		
+		return this.forceImploderAttachment(retTerm);
+	}
+
+	public Iterable<INamespace> newNamespaces(SpxSemanticIndexFacade idxFacade) {
+		
+		List<INamespace> namespaces = new ArrayList<INamespace>();
+		
+		SpxPrimarySymbolTable  table =  idxFacade.persistenceManager().spxSymbolTable() ;
+		
+		NamespaceUri namespaceUri = table.toNamespaceUri(id) ;
+		NamespaceUri packageUri = table.toNamespaceUri(enclosingPackageID) ;
+		
+		namespaces.add(ModuleNamespace.createInstance(namespaceUri, packageUri,idxFacade));
+		
+		return namespaces; 
+	}
+	
+	public  NamespaceUri getNamespaceUri(SpxSemanticIndexFacade idxFacade)
+	{
+		return idxFacade.persistenceManager().spxSymbolTable().toNamespaceUri(id) ;
+	}
+}
+

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,70 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.TermConverter;
+
+/**
+ * Represents ModuleDefinition 
+ *  
+ * @author Md. Adil Akhter
+ */
+public class ModuleDefinition  extends ModuleDeclaration 
+{
+	private static final long serialVersionUID = -5355795992567198473L;
+	
+	private IStrategoAppl ast;
+	private IStrategoAppl analyzedAst;
+	
+	/**
+	 * @param resourceAbsPath
+	 * @param id
+	 * @param packageID
+	 * @param ast
+	 * @param analyzedAst
+	 */
+	public ModuleDefinition(String resourceAbsPath, IStrategoList id, IStrategoList packageID , IStrategoAppl ast , IStrategoAppl analyzedAst) {
+		super(resourceAbsPath, id, packageID);
+		
+		this.ast = ast;
+		this.analyzedAst  = analyzedAst;
+	}
+	
+	public ModuleDefinition(ModuleDeclaration moduleDecl, IStrategoAppl ast , IStrategoAppl analyzedAst) {
+		this(moduleDecl.resourceAbsPath , moduleDecl.id, moduleDecl.enclosingPackageID , ast , analyzedAst);
+	}
+	
+	/* Transform {@link ModuleDefinition} to following terms :
+	 * 		ModuleDef :  Module * String * Package * Module * Module -> Def
+	 *  
+	 * (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration#toTerm(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
+	@Override
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
+
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		
+		TermConverter termConverter = idxFacade.getTermConverter();
+		 
+		IStrategoTerm moduleDeclarationTerm = super.toTerm(idxFacade);
+		IStrategoConstructor moduleDefCons = idxFacade.getModuleDefCon();
+		
+		
+		IStrategoTerm retTerm = termFactory.makeAppl(
+				moduleDefCons,
+				moduleDeclarationTerm.getSubterm(0),
+				moduleDeclarationTerm.getSubterm(1),
+				moduleDeclarationTerm.getSubterm(2),
+				termConverter.convert( ast),
+				termConverter.convert( analyzedAst ) 
+				);
+		
+		return this.forceImploderAttachment(retTerm);
+	}
+	
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,80 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.io.Serializable;
+import java.util.UUID;
+
+import org.spoofax.interpreter.library.language.spxlang.index.INamespace;
+import org.spoofax.interpreter.library.language.spxlang.index.INamespaceResolver;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * @author Md. Adil Akhter
+ * 
+ */
+public final class NamespaceUri implements Serializable
+{
+	private static final long serialVersionUID = -7525948560476092228L;
+	private final IStrategoList _id;
+	private final UUID _uId ;
+
+	public NamespaceUri(IStrategoList id, UUID uId){_id = id ; _uId = uId; }
+	
+	public NamespaceUri(IStrategoList id){ 
+		this(id, UUID.randomUUID()); 
+	}
+	
+	public IStrategoList id(){ 
+		if( _id == null) {
+			
+		}
+		return _id ; 
+	}
+	
+	public String uniqueID(){ return _uId.toString();};
+	
+	public INamespace resolve(INamespaceResolver sTable) throws SpxSymbolTableException {
+		INamespace retNamespace = sTable.resolveNamespace((NamespaceUri)this);
+		
+		if(retNamespace == null) {
+			throw new SpxSymbolTableException("Unknown Namespace Uri. Namespace can not be resolved from symbol-table") ;
+		}
+		return retNamespace;
+	}
+	
+	public boolean equalSpoofaxId(IStrategoList spoofaxUri){
+		return _id.equals(spoofaxUri);
+	}
+	
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		//result = prime * result + ((_id == null) ? 0 : _id.hashCode());
+		result = prime * result + ((_uId == null) ? 0 : _uId.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		NamespaceUri other = (NamespaceUri) obj;
+		if (_uId == null) {
+			if (other._uId != null)
+				return false;
+		} else if (!_uId.equals(other._uId))
+			return false;
+		return true;
+	}
+
+	@Override
+	public String toString() {
+		return "NamespaceId [ID =" + _id + "]";
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,193 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.spoofax.interpreter.library.language.spxlang.index.INamespace;
+import org.spoofax.interpreter.library.language.spxlang.index.INamespaceFactory;
+import org.spoofax.interpreter.library.language.spxlang.index.PackageNamespace;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public class PackageDeclaration extends IdentifiableConstruct implements INamespaceFactory
+{
+	private static final long serialVersionUID = -9081890582103567413L;
+	
+	public static final int PACKAGE_ID_INDEX = 0;
+	public static final int SPX_COMPILATION_UNIT_PATH = 1;
+	
+	private final Set<String> resourceAbsPaths = new HashSet<String>();
+	private final Set<IStrategoList> importedToReferences = new HashSet<IStrategoList>();
+	
+	public PackageDeclaration(String resourceAbsPath, IStrategoList id) {
+		super(id);
+		
+		resourceAbsPaths.add(resourceAbsPath); 
+	}
+	
+	/**
+	 * Initializes an instance of {@link PackageDeclaration}
+	 * 
+	 * @param id
+	 */
+	PackageDeclaration(IStrategoList id){
+		super(id);
+	}
+	
+	public Set<IStrategoList> getImortedToPackageReferences(){return importedToReferences;}
+	
+	public void removeImportedToPackageReference(PackageDeclaration decl) {
+		this.importedToReferences.remove(decl.getId());
+	}
+	
+	public void addFileUri(String resAbsolutePath){
+		resourceAbsPaths.add(resAbsolutePath);
+	}
+	
+	public void addImportedTo(IStrategoList packageId){
+		importedToReferences.add(packageId);
+	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj){
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		PackageDeclaration other = (PackageDeclaration) obj;
+		if (resourceAbsPaths == null) {
+			if (other.resourceAbsPaths != null)
+				return false;
+		} else if (!resourceAbsPaths.equals(other.resourceAbsPaths))
+			return false;
+		return true;
+	}
+	
+	public Set<String> getAllFilePaths(){
+		return resourceAbsPaths;
+	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode(){
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime
+				* result
+				+ ((resourceAbsPaths == null) ? 0 : resourceAbsPaths.hashCode());
+		return result;
+	}
+	
+	public boolean isNotExistedInAnyFile(){
+		return (resourceAbsPaths == null) || (resourceAbsPaths.size() == 0) ; 
+	}
+	
+	public void removeFileUri(String resAbsolutePath){resourceAbsPaths.remove(resAbsolutePath);}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "PackageDeclaration [id=" + id + ", resourceAbsPaths=" + resourceAbsPaths + "]";
+	}
+	
+	/* (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.BaseConstructDeclaration#toTerm(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
+	@Override
+	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade){
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		
+		IStrategoConstructor packageDeclCons = idxFacade.getPackageDeclCon();
+		IStrategoList absPathList = termFactory.makeList();
+		
+		for(String resourceAbsPath : resourceAbsPaths){
+			IStrategoString absPathTerm = termFactory.makeString(resourceAbsPath);
+			absPathList  = termFactory.makeListCons(absPathTerm, absPathList);
+		}	
+		
+		IStrategoTerm retTerm = termFactory.makeAppl(
+				packageDeclCons, 
+				toPackageIdTerm(idxFacade, this),
+				absPathList 
+		);
+		
+		return this.forceImploderAttachment(retTerm);
+	}
+		
+	/**
+	 * Gets PackageID from Typed Package QName
+	 * 
+	 * @param fac
+	 * @param packageQName
+	 * @return {@link IStrategoList}
+	 */
+	public static IStrategoList getPackageId(SpxSemanticIndexFacade facade,IStrategoAppl packageQName){
+		final IStrategoConstructor packageQNameCon = facade.getPackageQNameCon();
+		
+		if(packageQNameCon == packageQName.getConstructor()){
+			return getID( facade, (IStrategoAppl)packageQName.getSubterm(0));	
+		}
+		
+		throw new IllegalArgumentException("Invalid Package Typed QName : "+ packageQName);
+	}
+	
+	/**
+	 * Creates a new instance of {@link PackageDeclaration} . It acts as a copy
+	 * constructor to clone {@code decl}.
+	 * 
+	 * @param decl an instance of {@link PackageDeclaration} to copy from. 
+	 * @return {@link PackageDeclaration}
+	 */
+	public static PackageDeclaration newInstance( PackageDeclaration decl){
+		if (decl == null) 
+			return decl;
+		
+		PackageDeclaration newDecl = new PackageDeclaration(decl.getId());
+		for( String str : decl.getAllFilePaths())
+		{
+			newDecl.addFileUri(str); 
+		}
+		return newDecl;
+	}
+
+	public static IStrategoAppl toPackageQNameAppl (SpxSemanticIndexFacade facade, IStrategoList id){
+		return toIdTerm(facade ,  facade.getPackageQNameCon(), id);
+	}
+
+	
+	
+	/**
+	 * Converts to typed Package Qualified Name
+	 *  
+	 * @param termFactory
+	 * @param decl
+	 * @return
+	 */
+	public static IStrategoAppl toPackageIdTerm (SpxSemanticIndexFacade facade, PackageDeclaration decl){
+		return toPackageQNameAppl (facade, decl.getId());
+	}
+
+	/* (non-Javadoc)
+	 * @see org.spoofax.interpreter.library.language.spxlang.INamespaceFactory#newInstances(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
+	 */
+	public Iterable<INamespace> newNamespaces(SpxSemanticIndexFacade idxFacade) {
+	
+		return PackageNamespace.createInstances(id , idxFacade);
+	}
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxBaseSymbol.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxBaseSymbol.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,141 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.io.Serializable;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+abstract class SpxBaseSymbol implements Serializable{
+
+	private static final long serialVersionUID = 3160588874266553126L;
+	
+	private transient IStrategoTerm _id;
+	
+	/**
+	 *  @serial
+	 */
+	private String _idString;
+	
+	/**
+	 * Returns String representation of ID
+	 * 
+	 * @return {@code String} representation of ID 
+	 */
+	public String getId(){  return _idString ; }
+	
+	public SpxBaseSymbol(IStrategoTerm id){
+		_id = id ;
+		_idString = id.toString(Integer.MAX_VALUE);
+	}
+	
+	
+	public IStrategoTerm Id(ITermFactory _fac ){
+		if (_id == null){
+			_id = _fac.parseFromString(_idString);
+		}
+		return _id;
+	}
+	
+	void setId(IStrategoTerm id){_id = id;}
+	
+	public static boolean verifyEquals(IStrategoConstructor ctor1 , IStrategoConstructor ctor2){
+		if( (ctor1.getArity() == ctor2.getArity()) && (ctor1.getName().equals(ctor2.getName()))){
+			return true;
+		}
+		return false;
+	}
+	
+	public static boolean verifyEquals(IStrategoTerm current, IStrategoTerm other){
+		boolean retValue = false;
+		if ( current instanceof IStrategoAppl){
+			if(other instanceof IStrategoAppl) {
+				IStrategoAppl currentAppl = (IStrategoAppl)current;
+				IStrategoAppl otherAppl = (IStrategoAppl)other;
+
+				if( verifyEquals(currentAppl.getConstructor() , otherAppl.getConstructor()) )
+				{
+					IStrategoTerm[] currentTerms= currentAppl.getAllSubterms();
+					IStrategoTerm[] otherTerms = currentAppl.getAllSubterms();
+
+					retValue = verifyEquals(currentTerms, otherTerms);
+				}	
+			}
+		}	
+		else if( current instanceof IStrategoTuple){
+			if(other instanceof IStrategoTuple) {
+				retValue = verifyEquals(current.getAllSubterms(), other.getAllSubterms());
+			}
+		}	
+		else if( current instanceof IStrategoList){
+			if(other instanceof IStrategoList) {
+				retValue = verifyEquals(current.getAllSubterms(), other.getAllSubterms());
+			}
+		}
+		else
+			retValue = current.match(other);
+
+		return retValue;
+	}
+
+	public static boolean verifyEquals( IStrategoTerm[] currentTerms, IStrategoTerm[] otherTerms) {
+		boolean retValue = false;
+		
+		if(currentTerms == null && otherTerms == null) {retValue = true;} 
+		else if( currentTerms.length == otherTerms.length){
+			if(currentTerms.length ==0) {retValue = true;}
+			else {  
+				for ( int i = 0 ; i< currentTerms.length ; i++){
+					if( !verifyEquals(currentTerms[i], otherTerms[i])){
+						retValue = false;
+						break;
+					}
+					else { retValue = true;}
+				}
+			}
+		}
+		return retValue;
+	}		
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((_idString == null) ? 0 : _idString.hashCode());
+		//result = prime * result + ((_idString == null) ? 0 : _id.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		SpxBaseSymbol other = (SpxBaseSymbol) obj;
+//		if (_id == null) {
+//			if (other._id != null)
+//				return false;
+//		}else if(!verifyEquals(this._id, other._id)){ 
+//			return false;
+//		}
+		if (_idString == null) {
+			if (other._idString != null)
+				return false;
+		}else if( !this._idString.equals(other._idString ) ){
+			return false;
+		}
+		return true;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,109 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.io.File;
+import java.io.Serializable;
+import java.net.URI;
+
+/**
+ * Contains information regarding Spoofaxlang CompilationUnit. 
+ * 
+ * @author Md. Adil Akhter
+ * Created On : Aug 29, 2011
+ */
+public class SpxCompilationUnitInfo implements Serializable
+{
+	private static final long serialVersionUID = 4874917828420267542L;
+
+	private final long _recId;
+	private int _version;
+	private final URI _absPath;
+	
+	public SpxCompilationUnitInfo(URI absPath,long recourceId)
+	{
+		this (0 , absPath , recourceId);
+	}
+
+	public SpxCompilationUnitInfo( int versionNo, URI absPath,long recourceId)
+	{
+		_recId = recourceId;
+		_version = versionNo;
+		_absPath = absPath;
+	}
+
+	public  long getRecId() {
+		return _recId;
+	}
+
+	public int getVersionNo() {
+		return _version;
+	}
+	
+	URI getAbsPath() {
+		return _absPath;
+	}
+
+	public String getAbsPathString()
+	{
+		return new File(getAbsPath()).getAbsolutePath();
+	}
+
+	/**
+	 * Increment version no
+	 */
+	public void IncrementVersionNo() { _version = _version + 1; }
+
+	
+	public String toString() {
+		return "SpxComplicationUnitResourceInfo [ResourceId=" + _recId
+				+ ", VersionNo=" + _version + ", AbsPath=" + _absPath + "]";
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result
+				+ ((_absPath == null) ? 0 : _absPath.hashCode());
+		result = prime * result + (int) (_recId ^ (_recId >>> 32));
+		result = prime * result + _version;
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		SpxCompilationUnitInfo other = (SpxCompilationUnitInfo) obj;
+		if (_absPath == null) {
+			if (other._absPath != null)
+				return false;
+		} else if (!_absPath.equals(other._absPath))
+			return false;
+		if (_recId != other._recId)
+			return false;
+		if (_version != other._version)
+			return false;
+		return true;
+	}
+	
+	/**
+	 * Creates a new instance of {@code inf}.
+	 * 
+	 * @param inf an instance of {@link SpxCompilationUnitInfo}
+	 * @return a cloned version of {@code inf}
+	 */
+	public static SpxCompilationUnitInfo newInstance( SpxCompilationUnitInfo inf)
+	{
+		if( inf == null) 
+			return null; 
+		else	
+			return new SpxCompilationUnitInfo(
+					inf.getVersionNo(), 
+					inf.getAbsPath() , 
+					inf.getRecId());
+	}
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,174 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.io.IOException;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.attachments.TermAttachmentSerializer;
+
+public class SpxSymbol extends SpxBaseSymbol implements Serializable{
+	private static final long serialVersionUID = -5293805213473800423L;
+	
+	private String _data;
+	private String _type;
+	private NamespaceUri _namespace; // refer to the namespace uri . 
+	
+	public SpxSymbol (IStrategoTerm id){super(id);}
+	
+	public SpxSymbol (IStrategoTerm id , String type){ 
+		this(id) ;
+
+		_type = type;
+	}
+	
+	public String type() {
+		assert _type != null : "Non-Null _type is expected. ";
+		
+		return _type; 
+	}
+
+	public String getDataString () {return _data;}
+	
+	public NamespaceUri namespaceUri() { return _namespace; }
+	
+	void setType(String type) {	_type = type; }
+
+	IStrategoTerm deserializedDataToTerm(ITermFactory fac , TermAttachmentSerializer serializer) { 
+		IStrategoTerm deserializedAtermWithAnnotation = fac.parseFromString(_data);
+		IStrategoTerm deserializedAterm  = serializer.fromAnnotations(deserializedAtermWithAnnotation, true);
+		
+		return deserializedAterm;
+	}
+	
+	void serializerDataString(TermAttachmentSerializer serializer, IStrategoTerm data) throws IOException { 
+		IStrategoTerm annotatedTerm = serializer.toAnnotations(data);
+		
+		StringBuilder sb = new StringBuilder();
+		annotatedTerm.writeAsString(sb ,Integer.MAX_VALUE);
+		
+		_data = sb.toString(); 
+	}
+	
+	public IStrategoConstructor typeCons(SpxSemanticIndexFacade facade){
+		return facade.getConstructor( type() , 0);
+	}
+	
+	public void setNamespace(NamespaceUri id){ _namespace = id;}
+	
+	public boolean equalType (IStrategoConstructor term) { 
+		return _type.equals(term.getName()); 
+	}
+	
+	/**
+	 * Return symbols that has type equals expectedType. In case of expectedType equals null,
+	 * it returns all the symbols.
+	 * 
+	 * @param expectedType
+	 * @param symbols
+	 * @return {@link List} of {@link SpxSymbol}
+	 */
+	public static List<SpxSymbol> filterByType(IStrategoConstructor expectedType , Iterable<SpxSymbol> symbols){
+		List<SpxSymbol> retSymbols = new ArrayList<SpxSymbol>();
+		if( symbols != null){
+			for(SpxSymbol s : symbols){
+				if( (expectedType==null) ||  s.equalType(expectedType) ){ retSymbols.add(s) ;}
+			}
+		}
+		return retSymbols;
+	}
+	
+	public IStrategoTerm toTerm (SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
+		final ITermFactory termFactory = facade.getTermFactory();
+		
+		//Type 
+		IStrategoConstructor spxTypeCtor = this.typeCons(facade);
+		IStrategoAppl spxTypeCtorAppl = termFactory.makeAppl(spxTypeCtor); 
+		
+		//Data
+		IStrategoTerm deserializedDataToTerm = this.deserializedDataToTerm(termFactory, facade.getTermAttachmentSerializer());
+		
+		//Enclosing Namespace 
+		IStrategoConstructor qnameCons = facade.getQNameCon();
+		IStrategoAppl nsQNameAppl = this.namespaceUri().resolve(facade.persistenceManager().spxSymbolTable()).toTypedQualifiedName(facade);
+		
+		//ID/Key 
+		IStrategoTerm id = this.Id(termFactory); //TODO : It might require term conversion.
+
+		return (IStrategoTerm)termFactory.makeAppl( facade.getSymbolTableEntryDefCon(),
+				nsQNameAppl,  //ns qname 
+				spxTypeCtorAppl,  // type
+				id,			  //id	
+				deserializedDataToTerm )	;
+	}
+	
+	public static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Iterable<SpxSymbol> symbols) throws SpxSymbolTableException{
+		IStrategoList result = facade.getTermFactory().makeList();
+		
+		if( symbols != null)
+			for( SpxSymbol s : symbols) { 
+				result = facade.getTermFactory().makeListCons(  s.toTerm(facade) , result);
+			}
+		
+		return result;
+	} 
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime * result + ((_data == null) ? 0 : _data.hashCode());
+		result = prime * result
+				+ ((_namespace == null) ? 0 : _namespace.hashCode());
+		result = prime * result + ((_type == null) ? 0 : _type.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		SpxSymbol other = (SpxSymbol) obj;
+		if (_data == null) {
+			if (other._data != null)
+				return false;
+		} else if (!_data.equals(other._data))
+			return false;
+		if (_namespace == null) {
+			if (other._namespace != null)
+				return false;
+		} else if (!_namespace.equals(other._namespace))
+			return false;
+		if (_type == null) {
+			if (other._type != null)
+				return false;
+		} else if (!_type.equals(other._type))
+			return false;
+		return true;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "SpxSymbol [ Id : " + this.getId() + " Type= " + _type + ", Namespace=" + _namespace + "]";
+	}
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,17 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.io.Serializable;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class SpxSymbolKey extends SpxBaseSymbol implements Serializable{
+	
+	private static final long serialVersionUID = 7804281029276443583L;
+	
+	public SpxSymbolKey(IStrategoTerm id){ super(id); }
+
+	@Override
+	public String toString() {
+		return "SpxIndexKey {_id=" + this.getId() +"}";
+	}
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableEntry.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableEntry.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,67 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.attachments.TermAttachmentSerializer;
+
+// consider making it an internal class of 
+// SpxPrimarySymbolTable
+public final class SpxSymbolTableEntry
+{
+	public SpxSymbolKey key;
+	public SpxSymbol value;
+	
+	public static final int SYMBOL_ID_INDEX = 1;
+	public static final int TYPE_INDEX = 2;
+	public static final int DATA_INDEX = 3;
+	
+    public SpxSymbolTableEntry(SpxSymbolKey paramK, SpxSymbol paramV) {
+      this.key = paramK;
+      this.value = paramV;
+    }
+    
+    public static SpxSymbolTableEntry.EntryBuilder newEntry() {return new SpxSymbolTableEntry.EntryBuilder();} 
+    
+    public static class EntryBuilder{
+    	private IStrategoTerm _spoofaxkey ;
+    	private IStrategoConstructor _type ;
+    	private IStrategoTerm _data;
+    	
+    	// Instance of TermAttachmentSerializer to serialize terms
+    	private TermAttachmentSerializer _serializer;
+    	
+    	public EntryBuilder with(IStrategoTerm id){ 
+    		_spoofaxkey = id;
+    		return this;
+    	}
+    	
+    	public EntryBuilder instanceOf(IStrategoConstructor type){
+    		_type = type;
+    		return this;
+    	}
+    	
+    	public EntryBuilder data(IStrategoTerm data) {
+    		_data = data;
+    		return this;
+    	}
+    	
+    	public EntryBuilder uses(TermAttachmentSerializer serializer){
+    		_serializer = serializer;
+    		return this;
+    	}
+    	
+    	public SpxSymbolTableEntry build() throws IOException {
+    		
+    		SpxSymbolKey key = new SpxSymbolKey( _spoofaxkey );
+    		
+    		
+    		SpxSymbol symbol = new SpxSymbol(_spoofaxkey) ;
+    		symbol.serializerDataString(_serializer, _data);
+    		symbol.setType(_type.getName());
+    		
+    		return new SpxSymbolTableEntry(key , symbol );
+		}
+    }
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableException.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableException.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language.spxlang.index.data;
+
+/**
+ * Custom Exception thrown to indicate symbol table lookup has been failed.  
+ * 
+ * @author Md. Adil Akhter
+ */
+public class SpxSymbolTableException extends Exception {
+
+	private static final long serialVersionUID = 2412790462608500241L;
+
+	public SpxSymbolTableException() {
+		super();
+	}
+
+	public SpxSymbolTableException(String message, Throwable cause) {
+		super(message, cause);
+	}
+
+	public SpxSymbolTableException(String message) {
+		super(message);
+	}
+
+	public SpxSymbolTableException(Throwable cause) {
+		super(cause);
+	}
+}

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java (from r23448, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/JdbmApiTests.java	Wed Oct 12 20:28:46 2011	(r23448, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang.tests;
+package org.spoofax.interpreter.library.language.spxlang.index.tests;
 
 import java.io.IOException;
 import java.io.Serializable;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxLookupTableUnitTests.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang.tests;
+package org.spoofax.interpreter.library.language.spxlang.index.tests;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -8,15 +8,15 @@
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.LanguageLibrary;
-import org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager;
-import org.spoofax.interpreter.library.language.spxlang.LanguageDescriptor;
-import org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration;
-import org.spoofax.interpreter.library.language.spxlang.PackageDeclaration;
-import org.spoofax.interpreter.library.language.spxlang.SpxModuleLookupTable;
-import org.spoofax.interpreter.library.language.spxlang.SpxPackageLookupTable;
-import org.spoofax.interpreter.library.language.spxlang.SpxPersistenceManager;
-import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
-import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
+import org.spoofax.interpreter.library.language.spxlang.index.ISpxPersistenceManager;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxModuleLookupTable;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxPackageLookupTable;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxPersistenceManager;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.index.data.LanguageDescriptor;
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java (from r23458, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxPrimarySymbolTableTest.java	Fri Oct 14 21:40:19 2011	(r23458, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.spxlang.tests;
+package org.spoofax.interpreter.library.language.spxlang.index.tests;
 
 import java.io.File;
 import java.io.IOException;
@@ -10,18 +10,18 @@
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.LanguageLibrary;
-import org.spoofax.interpreter.library.language.spxlang.GlobalNamespace;
-import org.spoofax.interpreter.library.language.spxlang.INamespace;
-import org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration;
-import org.spoofax.interpreter.library.language.spxlang.NamespaceUri;
-import org.spoofax.interpreter.library.language.spxlang.PackageDeclaration;
-import org.spoofax.interpreter.library.language.spxlang.PackageNamespace;
-import org.spoofax.interpreter.library.language.spxlang.SpxPrimarySymbolTable;
-import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
-import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacadeRegistry;
-import org.spoofax.interpreter.library.language.spxlang.SpxSymbol;
-import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
-import org.spoofax.interpreter.library.language.spxlang.Utils;
+import org.spoofax.interpreter.library.language.spxlang.index.GlobalNamespace;
+import org.spoofax.interpreter.library.language.spxlang.index.INamespace;
+import org.spoofax.interpreter.library.language.spxlang.index.PackageNamespace;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxPrimarySymbolTable;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacadeRegistry;
+import org.spoofax.interpreter.library.language.spxlang.index.Utils;
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -32,7 +32,7 @@
 
 public class SpxPrimarySymbolTableTest extends AbstractInterpreterTest{
 	
-	private final String _projectName = "_test-symbol-table_1";
+	private final String _projectName = "_test-symbol-table_2";
 	
 	private IStrategoString projectNameTerm; 
 	private SpxSemanticIndexFacade _facade;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java (from r23459, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSemanticIndexFacadeTest.java	Fri Oct 14 22:14:25 2011	(r23459, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,15 +1,15 @@
-package org.spoofax.interpreter.library.language.spxlang.tests;
+package org.spoofax.interpreter.library.language.spxlang.index.tests;
 
 import java.io.IOException;
 
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.LanguageLibrary;
-import org.spoofax.interpreter.library.language.spxlang.ModuleDeclaration;
-import org.spoofax.interpreter.library.language.spxlang.PackageDeclaration;
-import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
-import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacadeRegistry;
-import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableException;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacadeRegistry;
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -19,7 +19,7 @@
 
 public class SpxSemanticIndexFacadeTest extends AbstractInterpreterTest{
 	
-	private final String _projectName = "test-sybol-table";
+	private final String _projectName = "test-sybol-table_1";
 	
 	private IStrategoString projectNameTerm; 
 	private SpxSemanticIndexFacade _facade;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/tests/SpxSymbolTableEntryTests.java	Tue Oct  4 21:09:10 2011	(r23416)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java	Fri Oct 14 23:16:36 2011	(r23460)
@@ -1,12 +1,12 @@
-package org.spoofax.interpreter.library.language.spxlang.tests;
+package org.spoofax.interpreter.library.language.spxlang.index.tests;
 
 import java.io.IOException;
 
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.LanguageLibrary;
-import org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade;
-import org.spoofax.interpreter.library.language.spxlang.SpxSymbolTableEntry;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableEntry;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;

From M.A.Akhter at student.tudelft.nl  Sat Oct 15 01:19:17 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 14 Oct 2011 23:19:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23461 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. index
Message-ID: <20111014231917.ED8597F800C@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 14 23:19:17 2011
New Revision: 23461
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23461&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java	Fri Oct 14 23:16:36 2011	(r23460)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java	Fri Oct 14 23:19:17 2011	(r23461)
@@ -5,9 +5,9 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.IIndexManageCommand;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexManager;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
-import org.spoofax.interpreter.library.language.spxlang.index.data.IIndexManageCommand;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java	Fri Oct 14 23:19:17 2011	(r23461)
@@ -0,0 +1,13 @@
+package org.spoofax.interpreter.library.language.spxlang.index;
+
+public interface IIndexManageCommand {
+	
+	static final String CLEAR_COMMAND_STRING = "CLEAR" ;
+	static final String INIT_COMMAND_STRING = "INIT" ;
+	static final String CLOSE_COMMAND_STRING = "CLOSE" ;
+	static final String SAVE_COMMAND_STRING = "SAVE" ;
+	static final String ROLLBACK_COMMAND_STRING = "ROLLBACK" ;
+	static final String INVALIDATE_GLOBAL_CACHE_COMMAND_STRING = "INVALIDATE_GLOBAL_CACHE" ;
+	
+	public void run() throws Exception;
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Fri Oct 14 23:16:36 2011	(r23460)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Fri Oct 14 23:19:17 2011	(r23461)
@@ -4,7 +4,6 @@
 
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.library.language.spxlang.index.data.IIndexManageCommand;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Fri Oct 14 23:16:36 2011	(r23460)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Fri Oct 14 23:19:17 2011	(r23461)
@@ -9,7 +9,6 @@
 import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.library.language.spxlang.index.data.IIndexManageCommand;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;

From M.A.Akhter at student.tudelft.nl  Sat Oct 15 10:33:59 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 15 Oct 2011 08:33:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23462 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. tests
Message-ID: <20111015083359.C6219108C00B@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct 15 08:33:57 2011
New Revision: 23462
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23462&sc=1

Log:
+ unit tests for invalidating global symbols' cache

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Fri Oct 14 23:19:17 2011	(r23461)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Oct 15 08:33:57 2011	(r23462)
@@ -145,8 +145,6 @@
 	 */
 	public void commit() throws IOException {
 		this.spxSymbolTable().commit();
-		
-		if( Utils.DEBUG) { this.spxSymbolTable().printSymbols("commit");} 
 		if(!this.isClosed()){
 			_recordManager.commit();
 		}	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Fri Oct 14 23:19:17 2011	(r23461)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Oct 15 08:33:57 2011	(r23462)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.BufferedWriter;
+import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.text.SimpleDateFormat;
@@ -52,7 +53,7 @@
 				});
 
 		if(Utils.DEBUG){
-			printSymbols("init");
+			printSymbols("init" , facade.getProjectPath());
 		}	
 	}
 	
@@ -289,8 +290,9 @@
 	 * 
 	 * @throws IOException
 	 */
-	public void printSymbols(String state) throws IOException{
-		FileWriter fstream = new FileWriter("c:/temp/log/symbols_"+ Utils.now("yyyy-MM-dd")+".txt" , true);
+	public void printSymbols(String state , String projectPath) throws IOException{
+		new File(projectPath + "/.log").mkdirs();
+		FileWriter fstream = new FileWriter(projectPath + "/.log/symbols"+Utils.now("yyyy-MM-dd")+".txt" , true);
 		BufferedWriter out = new BufferedWriter(fstream);
 		out.write("---Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+":----\n");
 		try

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Oct 14 23:19:17 2011	(r23461)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Oct 15 08:33:57 2011	(r23462)
@@ -773,7 +773,11 @@
 	 *  
 	 * @throws IOException
 	 */
-	public void persistChanges() throws IOException {  _persistenceManager.commit(); }
+	public void persistChanges() throws IOException {  
+		_persistenceManager.commit(); 
+
+		if( Utils.DEBUG) { _persistenceManager.spxSymbolTable().printSymbols("commit" , this.getProjectPath());} 
+	}
 	
 	/**
 	 * Closes any underlying open connection. 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Fri Oct 14 23:19:17 2011	(r23461)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Sat Oct 15 08:33:57 2011	(r23462)
@@ -54,7 +54,7 @@
 		
 		_registry = new SpxSemanticIndexFacadeRegistry();
 		
-		projectNameTerm = termFactory().makeString(_projectName);
+		projectNameTerm = termFactory().makeString(System.getProperty("user.dir")+ "/"+_projectName);
 	
 		_registry.initFacade(projectNameTerm, termFactory(), ioAgent()); 
 		_facade = _registry.getFacade(projectNameTerm);
@@ -254,6 +254,53 @@
 				);
 		
 		assertEquals( 1 , resolvedSymbols.size());
+		
+		
+	}
+	
+	public void testInvalidateGlobalCacheRemovesAllEntries() throws IOException, SpxSymbolTableException {
+		
+		setupScopeTree();
+
+		// defining a composite key 
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		// defining following composite ID :  (Global() , "TestId")
+		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId")); 
+		// defining Data 
+		IStrategoTerm data = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);
+		// setting Type to Global() 
+		IStrategoAppl typeAppl = namespaceAppl ; 
+		
+		// Defining Symbol-Table entry 
+		IStrategoAppl symbolDef = createEntry(namespaceAppl , symbolId , typeAppl  , data);
+		
+		// Indexing Symbol
+		_facade.indexSymbol(symbolDef);
+	
+		
+		
+		// Resolving Symbol 
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
+				symbolId,
+				namespaceAppl.getConstructor()
+				);
+		
+		assertEquals( 1 , resolvedSymbols.size());
+		
+		_facade.invalidateGlobalNamespace();
+		
+		
+		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
+				symbolId,
+				namespaceAppl.getConstructor()
+				);
+		
+		assertEquals( 0 , resolvedSymbols.size());
+		
+		
+		
 	}
 	
 	public void testUnknownConstructorInResolveSymbolShouldThrowException() throws IOException, SpxSymbolTableException {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Fri Oct 14 23:19:17 2011	(r23461)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Sat Oct 15 08:33:57 2011	(r23462)
@@ -39,7 +39,7 @@
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		_registry = new SpxSemanticIndexFacadeRegistry();
 		
-		projectNameTerm = termFactory().makeString(_projectName);
+		projectNameTerm = termFactory().makeString(System.getProperty("user.dir")+ "/"+_projectName);
 	
 		_registry.initFacade(projectNameTerm, termFactory(), ioAgent()); 
 		_facade = _registry.getFacade(projectNameTerm);

From M.A.Akhter at student.tudelft.nl  Sat Oct 15 11:26:36 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 15 Oct 2011 09:26:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23463 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. index
Message-ID: <20111015092636.1D34E108C01B@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct 15 09:26:35 2011
New Revision: 23463
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23463&sc=1

Log:
- clean up codes

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sat Oct 15 08:33:57 2011	(r23462)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sat Oct 15 09:26:35 2011	(r23463)
@@ -15,29 +15,20 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-/**
- * @author Md. Adil Akhter
- */
-public abstract class SpxAbstractPrimitive extends AbstractPrimitive {
+public abstract class SpxAbstractPrimitive extends AbstractPrimitive{
 	
 	private final static int PROJECT_PATH_INDEX = 0;
+
 	protected final SpxSemanticIndex index;
 	
-	/**
-	 * @param name
-	 * @param svars
-	 * @param tvars
-	 */
 	public SpxAbstractPrimitive(SpxSemanticIndex index, String name, int svars, int tvars ) {
 		super(name, svars, tvars);
 		
 		this.index = index;
 	}
 	
-	
 	protected IStrategoString getProjectPath( IStrategoTerm[] tvars){
 		//TODO : get project path from EditorIOAgent instead of passing as an argument
-		
 		return (IStrategoString)tvars[PROJECT_PATH_INDEX]; 
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Sat Oct 15 08:33:57 2011	(r23462)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Sat Oct 15 09:26:35 2011	(r23463)
@@ -57,6 +57,7 @@
 		
 		if(commandName.equalsIgnoreCase(ROLLBACK_COMMAND_STRING))
 			return rollbackCommandInstance(spxSemanticIndex , projectPath, objects);
+	
 		if(commandName.equalsIgnoreCase(INVALIDATE_GLOBAL_CACHE_COMMAND_STRING))
 			return invalidateGlobalCacheCommandInstance(spxSemanticIndex , projectPath, objects);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sat Oct 15 08:33:57 2011	(r23462)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sat Oct 15 09:26:35 2011	(r23463)
@@ -39,40 +39,7 @@
 	public SpxSemanticIndexFacadeRegistry getFacadeRegistry() {
 		return _facadeRegistry;
 	}
-	
-	public boolean initialize(IStrategoString projectPath,  ITermFactory termFactory, IOAgent agent)  throws Exception
-	{
-		IIndexManageCommand command = 
-			SpxIndexManager.getCommandInstance(this, IIndexManageCommand.INIT_COMMAND_STRING, projectPath, termFactory,agent);
-
-		command.run();
-		return true; 
-	}
-	
-	public boolean clearall(IStrategoString projectPath) throws Exception {
-		IIndexManageCommand command = 
-			SpxIndexManager.getCommandInstance(this, IIndexManageCommand.CLEAR_COMMAND_STRING, projectPath);
-
-		command.run();
-		return true;
-	}
-	
-	public boolean save(IStrategoString projectPath) throws Exception{
-		IIndexManageCommand command = 
-			SpxIndexManager.getCommandInstance(this, IIndexManageCommand.SAVE_COMMAND_STRING, projectPath);
-
-		command.run();
-		return true;
-	}
-	
-	public boolean close(IStrategoString projectPath) throws Exception {
-		IIndexManageCommand command = 
-			SpxIndexManager.getCommandInstance(this, IIndexManageCommand.CLOSE_COMMAND_STRING, projectPath);
-
-		command.run();
-		return true;
-	}
-		
+			
 	public boolean indexImportReferences(IStrategoString projectPath,
 			final IStrategoAppl importReferences) throws Exception {
 	

From M.A.Akhter at student.tudelft.nl  Sat Oct 15 14:12:00 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 15 Oct 2011 12:12:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23464 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index
Message-ID: <20111015121200.CABB52B800E@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct 15 12:12:00 2011
New Revision: 23464
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23464&sc=1

Log:
added fail tolerance in record-manager  init

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java	Sat Oct 15 09:26:35 2011	(r23463)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java	Sat Oct 15 12:12:00 2011	(r23464)
@@ -33,7 +33,7 @@
 	
 	public void rollback() throws IOException;
 	
-	public String getProjectName();
+	public String getIndexId();
 	
 	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade) throws Exception;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Sat Oct 15 09:26:35 2011	(r23463)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Sat Oct 15 12:12:00 2011	(r23464)
@@ -37,7 +37,7 @@
 	 */
 	public SpxCompilationUnitTable(ISpxPersistenceManager manager)
 	{
-		String tableName = SRC+ "_"+ manager.getProjectName();
+		String tableName = SRC+ "_"+ manager.getIndexId();
 		
 		_infoMap = manager.loadHashMap(tableName  + "._infomap.idx");
 		_spxUnitStoreMap = manager.loadStoreMap(tableName + "._spxUnitStorageMap.idx");

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Sat Oct 15 09:26:35 2011	(r23463)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Sat Oct 15 12:12:00 2011	(r23464)
@@ -49,7 +49,7 @@
 	 */
 	public SpxModuleLookupTable(ISpxPersistenceManager manager)
 	{
-		String tableName = SRC+ "_"+ manager.getProjectName();
+		String tableName = SRC+ "_"+ manager.getIndexId();
 
 		assert manager != null;
 		_manager = manager;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Sat Oct 15 09:26:35 2011	(r23463)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Sat Oct 15 12:12:00 2011	(r23464)
@@ -56,10 +56,10 @@
 	public SpxPackageLookupTable(ISpxPersistenceManager manager) {
 		assert manager != null;
 
-		String tableName = SRC + "_" + manager.getProjectName();
+		String tableName = SRC + "_" + manager.getIndexId();
 
 		_manager = manager;
-		_packageLookupTable = manager.loadHashMap(manager.getProjectName()
+		_packageLookupTable = manager.loadHashMap(manager.getIndexId()
 				+ "._lookupPackageMap.idx");
 
 		// readonly secondary view of the the lookup table .

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Oct 15 09:26:35 2011	(r23463)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Oct 15 12:12:00 2011	(r23464)
@@ -1,7 +1,9 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
+import java.io.File;
 import java.io.IOException;
 import java.util.Properties;
+import java.util.UUID;
 
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
@@ -24,10 +26,9 @@
 public class SpxPersistenceManager implements ISpxPersistenceManager {
 	private static final String SRC =   "SpxPersistenceManager" ;
 
-	private final RecordManager _recordManager; 
-	private final String _indexDirectory;   
+	private RecordManager _recordManager; 
 	private final IOAgent _agent;
-	private final String _projectName ;
+	private String _indexId ;
 
 	private SpxCompilationUnitTable _spxUnitsTable; // Keeps a reference to the SpxCompilation Units  
 	private SpxPackageLookupTable _spxPackageTable; // Indexing Package and Module Definitions
@@ -56,26 +57,53 @@
 	 */
 	private SpxPersistenceManager (SpxSemanticIndexFacade spxSemanticIndexFacade,Properties options) throws IOException {
 		assert spxSemanticIndexFacade != null : "SpxSemanticIndexFacade is expected to be nonnull" ;
-		
+
 		this._agent = spxSemanticIndexFacade.getIOAgent();
-		this._projectName = spxSemanticIndexFacade.getProjectName() ;
-		this._indexDirectory = spxSemanticIndexFacade.getProjectPath()+ "/.Index";
+		this._indexId = spxSemanticIndexFacade.indexId() ;
 		
+		String indexDirectory = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY;
+
 		if( options  == null)
 			options = new Properties();// Creating empty properties collection if it is null
 		
 		//setting properties of RecordManager
-		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, _indexDirectory + "/" + _projectName + ".idx");
+		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, indexDirectory + "/" + _indexId + ".idx");
 		options.put(RecordManagerOptions.CACHE_TYPE, "auto");
 		options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "false");
-
-		_recordManager = RecordManagerFactory.createRecordManager(_projectName , options);
 		
-		logMessage(SRC + ".ctor" , "Instantiation of PersistenceManager is done. Index Directory : "+ _indexDirectory );
+		tryInitRecordManager(spxSemanticIndexFacade,options);
+		
+		logMessage(SRC + ".ctor" , "Instantiation of PersistenceManager is done. Index Directory : ["+ indexDirectory  + "] indexid : "+ getIndexId());
 	}
 
 
 	/**
+	 * Tries to initialise record manager
+	 * 
+	 * @param options
+	 * @throws IOException
+	 */
+	private void tryInitRecordManager(SpxSemanticIndexFacade spxSemanticIndexFacade, Properties options) throws IOException {
+		int noOfTries = Utils.NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER;
+		
+		while(true){
+			try {
+				_recordManager = RecordManagerFactory.createRecordManager(_indexId , options);
+				break;
+			}catch(IOException ex) {
+				logMessage(SRC + ".tryInitRecordManager" , "Failed to create recordmanager with arg : " + _indexId +". exception : "+ ex);
+				if(noOfTries == 0){ 
+					logMessage(SRC + ".tryInitRecordManager" , "RecordManager creation is failed. Reason : "+ ex);
+					throw ex;
+				}else{
+					_indexId  = _indexId+ UUID.randomUUID().toString();
+					spxSemanticIndexFacade.invalidateSpxCacheDirectory();
+				}
+			}
+		}
+	}
+	
+	/**
 	 * Initializes Symbol Tables for {@code projectName} Project
 	 * 
 	 * @param projectName name of the Project 
@@ -206,32 +234,26 @@
 		if(Utils.DEBUG){		
 			try {
 				_agent.getWriter(IOAgent.CONST_STDOUT).write(
-						"[" + this._projectName + "." + origin + "]   " + message
+						"[" + this._indexId + "." + origin + "]   " + message
 								+ "\n");
 			} 
 			catch (IOException e) {}
 		}
 	}
 
-	public String getProjectName() {
-		return _projectName;
+	public String getIndexId() {
+		return _indexId;
 	}
 
-
 	public SpxPrimarySymbolTable spxSymbolTable() {
 		return _spxSymbolTable;
 	}
 
-
 	public void rollback() throws IOException{
 		_recordManager.rollback();
-		
 	}
 
-
 	public void clearCache() throws IOException {
 		_recordManager.clearCache();
-		
 	}
-	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Oct 15 09:26:35 2011	(r23463)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Oct 15 12:12:00 2011	(r23464)
@@ -42,7 +42,7 @@
 		assert facade != null  : "SpxSemanticIndexFacade  is expected to non-null" ;
 		_manager = facade.persistenceManager();
 
-		String tableName = _manager.getProjectName() + "primary_symbol_table.idx";
+		String tableName = _manager.getIndexId() + "primary_symbol_table.idx";
 		
 		namespaces  = _manager.loadHashMap(tableName + "namespaces.idx");
 		namespaceByStrategoId = namespaces.secondaryHashMap(tableName+ ".namespaceByStrategoId.idx", 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Oct 15 09:26:35 2011	(r23463)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Oct 15 12:12:00 2011	(r23464)
@@ -33,19 +33,23 @@
 import org.spoofax.terms.attachments.TermAttachmentSerializer;
 import org.spoofax.terms.attachments.TermAttachmentStripper;
 
+//TODO :  refactor this class  to multiple facades one for package, one for modules 
+//TODO FIXME : combine symbol table and index
 public class SpxSemanticIndexFacade {
-	//TODO :  refactor this class  to multiple facades one for package, one for modules 
-	//TODO FIXME : combine symbol table and index
 	
 	private ISpxPersistenceManager _persistenceManager;
-	private final String _projectPath ; 
+	
+	private final String _projectPath ;
+	private String _indexId;
 	private final ITermFactory _termFactory;
 	private final IOAgent _agent;
 	private final TermAttachmentStripper _stripper;
 	private final TermAttachmentSerializer _termAttachmentSerializer;
 	private final TermConverter _converter;
-	
-	public TermAttachmentSerializer getTermAttachmentSerializer() {return _termAttachmentSerializer;}
+
+	public TermAttachmentSerializer getTermAttachmentSerializer() {
+		return _termAttachmentSerializer;
+	}
 
 	/**
 	 * Initializes the SemanticIndexFactory
@@ -56,7 +60,7 @@
 	 */
 	public SpxSemanticIndexFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent){
 		_projectPath = asJavaString(projectPath);
-		
+		_indexId = getProjectName();
 		_termFactory = termFactory;
 		_agent = agent;
 		
@@ -73,8 +77,10 @@
 	public void initializePersistenceManager() throws Exception {
 		_persistenceManager = new SpxPersistenceManager(this);
 		_persistenceManager.initializeSymbolTables(this._projectPath, this);
+		_indexId = _persistenceManager.getIndexId();
 	}
-		
+	
+	public String indexId() {return _indexId; }
 	/**
 	 * Returns the TermFactory 
 	 * @return
@@ -801,13 +807,32 @@
 	 */
 	public void reinitSymbolTable() throws Exception {	
 		
-		if (! isPersistenceManagerClosed())
+		if (! isPersistenceManagerClosed()){
+			// cleaning persistence manager.
 			persistenceManager().clear();
-		
-		persistenceManager().commit();
-		
+			//cleaning the SpxCache as well.
+			invalidateSpxCacheDirectory();
+			tryCleanupIndexDirectory();
+			
+		}
 		persistenceManager().initializeSymbolTables(this.getProjectName(), this);
 	}
+
+	/**
+	 * Deletes the Spx Cache directory configured in Utils. By this way, the Spx cache will 
+	 * be invalidated and all the symbols will be indexed again. 
+	 */
+	void invalidateSpxCacheDirectory() {
+		Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_CACHE_DIRECTORY));
+	}
+	
+	private void tryCleanupIndexDirectory(){
+		try{
+			Utils.tryDeleteSpxIndexDir( new File( _projectPath + "/" + Utils.SPX_INDEX_DIRECTORY));
+		}catch(Exception ex){
+			// In case of SecurityException , Do nothing
+		}
+	}
 	
 	public void rollbackChanges() throws IOException{	
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Sat Oct 15 09:26:35 2011	(r23463)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Sat Oct 15 12:12:00 2011	(r23464)
@@ -64,7 +64,7 @@
 	 * @return SpxSemanticIndexFactory mapped with the projectName. If no mapping is found, it is returning null. 
 	 * @throws Exception 
 	 */
-	public SpxSemanticIndexFacade getFacade( IStrategoTerm projectPath) throws Exception{
+	public SpxSemanticIndexFacade getFacade(IStrategoTerm projectPath) throws Exception{
 		String key = Utils.toAbsPathString(asJavaString(projectPath));		
 		SpxSemanticIndexFacade facade =  _registry.get(key);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sat Oct 15 09:26:35 2011	(r23463)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sat Oct 15 12:12:00 2011	(r23464)
@@ -14,10 +14,13 @@
 	private Utils() {
 		
 	}
+	public static final int NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER = 5;
 	
 	public static final String All = "*";
 	public static final String All_SYMBOLS = "\"*\"";
 	public static final String CURRENT = ".";
+	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
+	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
 	
 	static final boolean DEBUG = true;
 	
@@ -63,4 +66,34 @@
 	    SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
 	    return sdf.format(cal.getTime());
 	}
+	
+	// Deletes all the file and directories exists inside 
+	// SPX Index directory. If it can't delete the files 
+	// then just ignore it. 
+	static  void  tryDeleteSpxIndexDir(File cacheDir){
+	    if ( cacheDir.exists() &&  cacheDir.isDirectory()) {
+	        String[] children = cacheDir.list();
+	        for (int i=0; i<children.length; i++) {
+	           deleteSpxCacheDir(new File(cacheDir, children[i]));
+	        }
+	    }
+	    cacheDir.delete();
+	}
+	
+	// Deletes all the files and directories inside 
+	// the cache directory denoted using cacheDir. 
+	// If it fails to delete any Files or Directories
+	// , it returns false. Otherwise, it returns true.
+	static  boolean deleteSpxCacheDir(File cacheDir){
+	    if ( cacheDir.exists() &&  cacheDir.isDirectory()) {
+	        String[] children = cacheDir.list();
+	        for (int i=0; i<children.length; i++) {
+	            boolean success = deleteSpxCacheDir(new File(cacheDir, children[i]));
+	            if (!success) {
+	                return false;
+	            }
+	        }
+	    }
+	    return cacheDir.delete();
+	}
 }

From M.A.Akhter at student.tudelft.nl  Sat Oct 15 17:48:30 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 15 Oct 2011 15:48:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23465 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. index
Message-ID: <20111015154830.1206E108C018@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct 15 15:48:29 2011
New Revision: 23465
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23465&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sat Oct 15 12:12:00 2011	(r23464)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sat Oct 15 15:48:29 2011	(r23465)
@@ -76,7 +76,6 @@
 			try {
 				facade = registry.getFacade(projectPath);
 				if(facade!=null){
-					facade.clearCache();
 					facade.rollbackChanges();
 					facade.clearCache();
 					facade.close();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Sat Oct 15 12:12:00 2011	(r23464)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Sat Oct 15 15:48:29 2011	(r23465)
@@ -14,6 +14,7 @@
 	private final SpxSemanticIndex spxSemanticIndex;
 	private final IStrategoTerm projectName; 
 	private final Object[] arguments;
+	
 	/**
 	 * @param spxSemanticIndex
 	 */
@@ -23,6 +24,11 @@
 		this.projectName = projectPath;
 	}
 	
+	static void ensureFacadeInitialized(SpxSemanticIndexFacade f) throws SpxSymbolTableException {
+		if(f== null) {
+			throw new SpxSymbolTableException("Symbol Table is not initialized for project . Invoke SPX_index_init. ");
+		}	
+	}
 	protected void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectName , Object... objects) throws Exception{} ;
 	
 	public void run() throws Exception{
@@ -30,7 +36,6 @@
 		
 	}
 	
-
 	public static IIndexManageCommand getCommandInstance(final SpxSemanticIndex spxSemanticIndex , IStrategoString commandName, 
 			IStrategoString projectName, Object... objects){
 		
@@ -71,8 +76,9 @@
 		
 		return new SpxIndexManager(index , projectPath, objects){
 			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
-				SpxSemanticIndexFacade idxFacade = idx.getFacade(projectPath);
-				idxFacade.rollbackChanges();
+				SpxSemanticIndexFacade f = idx.getFacadeRegistry().getFacade(projectPath);
+				if(f != null)
+					f.rollbackChanges();
 			}
 		};
 	}
@@ -83,7 +89,10 @@
 
 		return new SpxIndexManager(index , projectPath, objects){
 			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
-				SpxSemanticIndexFacade idxFacade = idx.getFacade(projectPath);
+				SpxSemanticIndexFacade idxFacade = idx.getFacadeRegistry().getFacade(projectPath);
+				if(idxFacade == null)
+					idxFacade = idx.getFacadeRegistry().initFacade(projectPath, (ITermFactory)objects[0], (IOAgent)objects[1]) ;
+				
 				idxFacade.reinitSymbolTable();
 			}
 		};
@@ -96,9 +105,11 @@
 
 		return new SpxIndexManager(index , projectPath, objects){
 			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
-				SpxSemanticIndexFacade idxFacade =  idx.getFacade(projectPath);
-				idxFacade.persistChanges();
-				idxFacade.close();
+				SpxSemanticIndexFacade idxFacade = idx.getFacadeRegistry().getFacade(projectPath);
+				if(idxFacade!= null){
+					idxFacade.persistChanges();
+					idxFacade.close();
+				} 	
 			}
 		};
 	}
@@ -131,8 +142,10 @@
 
 		return new SpxIndexManager(index , projectPath, objects){
 			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
-				SpxSemanticIndexFacade idxFacade = idx.getFacade(projectPath);
-				idxFacade.persistChanges();
+				SpxSemanticIndexFacade idxFacade = idx.getFacadeRegistry().getFacade(projectPath);
+				if(idxFacade!= null){
+					idxFacade.persistChanges();
+				}	
 			}
 		};
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Oct 15 12:12:00 2011	(r23464)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Oct 15 15:48:29 2011	(r23465)
@@ -96,7 +96,7 @@
 					logMessage(SRC + ".tryInitRecordManager" , "RecordManager creation is failed. Reason : "+ ex);
 					throw ex;
 				}else{
-					_indexId  = _indexId+ UUID.randomUUID().toString();
+					_indexId  = _indexId+ "[" + UUID.randomUUID().toString() +"]";
 					spxSemanticIndexFacade.invalidateSpxCacheDirectory();
 				}
 			}
@@ -184,11 +184,15 @@
 	 * @throws IOException
 	 */
 	public void close() throws IOException { 
+		// Since, spxSymbolTable uses internal caching
+		// checking in the changes before closing the connection 
 		spxSymbolTable().commit();
 		
 		if(!this.isClosed()){ 
+			// closing recordmanager 
 			_recordManager.close();
 		}	
+		// setting all the symboltable to null
 		this._spxModuleTable = null;
 		this._spxPackageTable = null;
 		this._spxUnitsTable = null;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sat Oct 15 12:12:00 2011	(r23464)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sat Oct 15 15:48:29 2011	(r23465)
@@ -1,19 +1,9 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
-import java.io.IOException;
-
-import jdbm.PrimaryHashMap;
-import jdbm.RecordManager;
-import jdbm.RecordManagerFactory;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.core.Tools;
-import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
-import org.spoofax.interpreter.terms.ITermFactory;
 
 
 /**
@@ -245,17 +235,12 @@
 	
 	
 	SpxSemanticIndexFacade getFacade(IStrategoTerm projectPath) throws Exception {
-
-		SpxSemanticIndexFacade facade = _facadeRegistry.getFacade(projectPath);
-		ensureInitialized(facade);
-		return facade;
+		SpxSemanticIndexFacade f = _facadeRegistry.getFacade(projectPath);
+		SpxIndexManager.ensureFacadeInitialized(f);
+		return f;
 	}
 	
-	private void ensureInitialized(SpxSemanticIndexFacade idxFactory) throws IllegalStateException {
-		if (idxFactory == null)
-			throw new IllegalStateException("Spoofaxlang Semantic index not initialized");
-	}
-
+	
 	private abstract class SpxIndexer 
 	{	
 		public boolean executeIndexer(IStrategoString projectPath , IStrategoAppl appl) throws Exception{

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Sat Oct 15 12:12:00 2011	(r23464)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Sat Oct 15 15:48:29 2011	(r23465)
@@ -5,10 +5,8 @@
 import java.io.IOException;
 import java.util.HashMap;
 
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
@@ -28,7 +26,7 @@
 	 * @param termFactory
 	 * @throws Exception 
 	 */
-	public void initFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent) throws Exception
+	public SpxSemanticIndexFacade initFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent) throws Exception
 	{	
 		SpxSemanticIndexFacade fac = null;
 		String projectNameString  =  Utils.toAbsPathString(asJavaString(projectPath));
@@ -52,7 +50,7 @@
 		
 		if(fac != null)
 			_registry.put(fac.getProjectPath(), fac);
-
+		return fac;
 	}
 
 	/**

From M.A.Akhter at student.tudelft.nl  Sat Oct 15 19:03:31 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 15 Oct 2011 17:03:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23466 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. index index/data
Message-ID: <20111015170331.B0547108C002@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Oct 15 17:03:31 2011
New Revision: 23466
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23466&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sat Oct 15 15:48:29 2011	(r23465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sat Oct 15 17:03:31 2011	(r23466)
@@ -76,7 +76,6 @@
 			try {
 				facade = registry.getFacade(projectPath);
 				if(facade!=null){
-					facade.rollbackChanges();
 					facade.clearCache();
 					facade.close();
 				}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java	Sat Oct 15 15:48:29 2011	(r23465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java	Sat Oct 15 17:03:31 2011	(r23466)
@@ -1,10 +1,8 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.Serializable;
-import java.net.URI;
 import java.util.List;
 import java.util.Map;
-import java.util.UUID;
 
 import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
@@ -12,10 +10,7 @@
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableEntry;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoConstructor;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermFactory;
 
 public interface INamespace extends Serializable {
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Sat Oct 15 15:48:29 2011	(r23465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Sat Oct 15 17:03:31 2011	(r23466)
@@ -68,7 +68,6 @@
 		
 		throw new IllegalArgumentException("Invalid Command Name : "+ commandName) ;
 	}
-	
 
 	private static IIndexManageCommand rollbackCommandInstance(
 			final SpxSemanticIndex index, IStrategoString projectPath,
@@ -108,6 +107,7 @@
 				SpxSemanticIndexFacade idxFacade = idx.getFacadeRegistry().getFacade(projectPath);
 				if(idxFacade!= null){
 					idxFacade.persistChanges();
+					idxFacade.clearCache();
 					idxFacade.close();
 				} 	
 			}
@@ -149,7 +149,6 @@
 			}
 		};
 	}
-	
 	private static IIndexManageCommand invalidateGlobalCacheCommandInstance(
 			SpxSemanticIndex index, IStrategoString projectPath,
 			Object[] objects) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Oct 15 15:48:29 2011	(r23465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Oct 15 17:03:31 2011	(r23466)
@@ -10,6 +10,7 @@
 import jdbm.RecordManager;
 import jdbm.RecordManagerFactory;
 import jdbm.RecordManagerOptions;
+import jdbm.recman.CacheRecordManager;
 
 import org.spoofax.interpreter.library.IOAgent;
 
@@ -68,7 +69,7 @@
 		
 		//setting properties of RecordManager
 		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, indexDirectory + "/" + _indexId + ".idx");
-		options.put(RecordManagerOptions.CACHE_TYPE, "auto");
+		options.put(RecordManagerOptions.CACHE_TYPE, "none");
 		options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "false");
 		
 		tryInitRecordManager(spxSemanticIndexFacade,options);
@@ -97,7 +98,9 @@
 					throw ex;
 				}else{
 					_indexId  = _indexId+ "[" + UUID.randomUUID().toString() +"]";
+					this.clearCache();
 					spxSemanticIndexFacade.invalidateSpxCacheDirectory();
+					noOfTries--;
 				}
 			}
 		}
@@ -117,6 +120,10 @@
 		_spxSymbolTable.addGlobalNamespace(facade);
 
 		initListeners();
+		
+		if(Utils.DEBUG){
+			_spxSymbolTable.printSymbols("init" , facade.getProjectPath());
+		}	
 	}
 	
 	
@@ -258,6 +265,7 @@
 	}
 
 	public void clearCache() throws IOException {
-		_recordManager.clearCache();
+		if( _recordManager instanceof CacheRecordManager)
+			_recordManager.clearCache();
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Oct 15 15:48:29 2011	(r23465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Oct 15 17:03:31 2011	(r23466)
@@ -4,15 +4,10 @@
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.logging.FileHandler;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import jdbm.PrimaryMap;
 import jdbm.RecordListener;
@@ -32,6 +27,7 @@
 
 public class SpxPrimarySymbolTable implements INamespaceResolver , IPackageDeclarationRecordListener,IModuleDeclarationRecordListener {
 	private final String SRC = this.getClass().getSimpleName();
+	
 	private final ISpxPersistenceManager _manager; // Persistence Manager
 	private final PrimaryMap <NamespaceUri,INamespace> namespaces;
 	private final SecondaryHashMap <IStrategoList,NamespaceUri,INamespace> namespaceByStrategoId;
@@ -51,19 +47,13 @@
 						return k.id(); 
 					}
 				});
-
-		if(Utils.DEBUG){
-			printSymbols("init" , facade.getProjectPath());
-		}	
 	}
 	
-	
 	/**
 	 * Adding Global Namespace in symbol-table by default.
 	 * @param facade
 	 */
 	public void addGlobalNamespace(SpxSemanticIndexFacade facade){
-		
 		this.defineNamespace(GlobalNamespace.createInstance(facade));
 	}
 	
@@ -126,7 +116,6 @@
 	
 	public int size() { return namespaces.size();}
 	 
-	
 	/* (non-Javadoc)
 	 * @see java.lang.Object#toString()
 	 */
@@ -143,7 +132,6 @@
 	}
 	
 	private void ensureActiveNamespaceUnloaded(IStrategoList namespaceId){
-	
 		if(_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
 			_activeNamespace = null;
 		}
@@ -154,6 +142,7 @@
 			this.namespaces.put(_activeNamespace.namespaceUri(), _activeNamespace);
 		}
 	}
+	
 	private void ensureActiveNamespaceLoaded(IStrategoList namespaceId) throws SpxSymbolTableException{
 		if(_activeNamespace == null ||!_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
 			commit(); 
@@ -180,8 +169,6 @@
 		_manager.logMessage(SRC, "resolveSymbols | Resolved Symbols : " + resolvedSymbols);
 		return resolvedSymbols;
 	}
-	
-	
 
 	public SpxSymbol resolveSymbol(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
 		_manager.logMessage(SRC, "resolveSymbol | Resolving symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
@@ -195,7 +182,6 @@
 		return resolvedSymbol;
 	}
 	
-	
 	public INamespace newAnonymousNamespace(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList enclosingNamespaceId) throws SpxSymbolTableException{
 		_manager.logMessage(SRC, "newAnonymousNamespace | Inserting a Anonymous Namespace in following enclosing namespace : "  + enclosingNamespaceId);
 		ensureActiveNamespaceLoaded(enclosingNamespaceId);
@@ -209,8 +195,7 @@
 		
 		return _activeNamespace ;
 	}
-	
-	
+
 	/**
 	 * Destroying Namespace with following namespaceId
 	 * 
@@ -292,7 +277,7 @@
 	 */
 	public void printSymbols(String state , String projectPath) throws IOException{
 		new File(projectPath + "/.log").mkdirs();
-		FileWriter fstream = new FileWriter(projectPath + "/.log/symbols"+Utils.now("yyyy-MM-dd")+".txt" , true);
+		FileWriter fstream = new FileWriter(projectPath + "/.log/symbols"+Utils.now("yyyy-MM-dd HH.mm")+".txt" , true);
 		BufferedWriter out = new BufferedWriter(fstream);
 		out.write("---Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+":----\n");
 		try
@@ -303,20 +288,22 @@
 					logEntries(ns,out) ;
 				}
 			}
-		}finally{out.close();}
+		}catch(IOException ex){ //ignore 
+			
+		}
+		finally{out.close();}
 	}
-	
-	
+
 	private static  void logEntries( INamespace namespace , BufferedWriter logger) throws IOException{
 		Map<SpxSymbolKey , List<SpxSymbol>> members = namespace.getMembers();
 		for( SpxSymbolKey k : members.keySet()) {
-			logger.write("\t"+k.toString()  + " :  \n");
+			logger.write("\t"+k.toString()  + "  ----> \t");
 			
 			for( SpxSymbol s : members.get(k) ){
-				logger.write( "\t\t"+ s.toString() + "\n");
+				logger.write( "\t"+ s.toString() + " || \t");
 			}
+			logger.write("\n");
 		}
 		logger.write("\n");
 	}
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Oct 15 15:48:29 2011	(r23465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Oct 15 17:03:31 2011	(r23466)
@@ -60,7 +60,7 @@
 	 */
 	public SpxSemanticIndexFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent){
 		_projectPath = asJavaString(projectPath);
-		_indexId = getProjectName();
+		_indexId = getProjectName()+".1" ;
 		_termFactory = termFactory;
 		_agent = agent;
 		
@@ -159,8 +159,7 @@
 		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
 	
 		logMessage("Storing following compilation unit. Path : [" 
-					+  spxCompilationUnitPath +"]"
-					+ " AST: "+ spxCompilationUnitAST );
+					+  spxCompilationUnitPath +"]");
 		
 		table.define(resUri, astTerm);
 	}
@@ -1051,6 +1050,7 @@
 		}
 		
 	}
+	
 	public void clearCache() throws IOException{
 		this.persistenceManager().clearCache();
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sat Oct 15 15:48:29 2011	(r23465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sat Oct 15 17:03:31 2011	(r23466)
@@ -14,7 +14,7 @@
 	private Utils() {
 		
 	}
-	public static final int NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER = 5;
+	public static final int NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER = 1;
 	
 	public static final String All = "*";
 	public static final String All_SYMBOLS = "\"*\"";

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java	Sat Oct 15 15:48:29 2011	(r23465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java	Sat Oct 15 17:03:31 2011	(r23466)
@@ -6,16 +6,14 @@
 import org.spoofax.interpreter.library.language.spxlang.index.INamespace;
 import org.spoofax.interpreter.library.language.spxlang.index.INamespaceResolver;
 import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
  * @author Md. Adil Akhter
  * 
  */
-public final class NamespaceUri implements Serializable
+public class NamespaceUri implements Serializable
 {
-	private static final long serialVersionUID = -7525948560476092228L;
+	private static final long serialVersionUID = 7219193145612008432L;
 	private final IStrategoList _id;
 	private final UUID _uId ;
 

From M.A.Akhter at student.tudelft.nl  Mon Oct 17 14:00:01 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 17 Oct 2011 12:00:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23467 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	jdbm jdbm/recman org/spoofax/interpreter/library/language
	org/spoofax/interpreter/library/la...
Message-ID: <20111017120001.DBF847F8003@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Oct 17 12:00:00 2011
New Revision: 23467
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23467&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_undefine_symbols.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/RecordManager.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -41,9 +41,6 @@
  */
 public interface  RecordManager
 {
-
-	public static final String DEFAULT_RELATIVE_PATH_INDEX = ".index" ;
-	
     /**
      * Recid indicating no record (e.g. null)
      */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -70,7 +70,9 @@
 public final class BaseRecordManager
     extends RecordManagerImpl
 {
-
+	
+	public static String DEFAULT_RELATIVE_PATH_INDEX = ".index" ;
+		
 	private static final String IDR = ".idr";
 	private static final String IDF = ".idf";
 	private static final String DBR = ".dbr";
@@ -236,7 +238,7 @@
     	// created in the currently working directory.
     	
     	// currently it is set to .index folder
-    	this( filename , RecordManager.DEFAULT_RELATIVE_PATH_INDEX );
+    	this( filename , DEFAULT_RELATIVE_PATH_INDEX );
     }
     
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -107,7 +107,7 @@
      *          RandomAccessFile throws it.
      */
     RecordFile(String fileName, int blockSize)  throws IOException{
-    	this (fileName , blockSize, RecordManager.DEFAULT_RELATIVE_PATH_INDEX); // default relative directory is set to .index
+    	this (fileName , blockSize, BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX); // default relative directory is set to .index
     }
 
     RecordFile(String fileName, int blockSize, String relativePathStr) throws IOException 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -52,6 +52,7 @@
 		add(new SPX_symtab_destroy_scope(spxIndex));
 		add(new SPX_symtab_define_symbol(spxIndex));
 		add(new SPX_symtab_resolve_symbols(spxIndex));
+		add(new SPX_symtab_undefine_symbols(spxIndex));
 		
 	}
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_undefine_symbols.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_undefine_symbols.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -0,0 +1,39 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class SPX_symtab_undefine_symbols extends SpxAbstractPrimitive {
+	private static String NAME = "SPX_symtab_undefine_symbols";
+	private static int SEARCH_CRITERIA_INDEX = 1; 
+	private final static int NO_ARGS = 2;
+
+	public SPX_symtab_undefine_symbols(SpxSemanticIndex index) {
+		super(index, NAME, 0, NO_ARGS);
+	}
+	
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateTupleTermAt(SEARCH_CRITERIA_INDEX);
+	}
+	
+	
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoTuple searchCriteria = (IStrategoTuple)tvars[SEARCH_CRITERIA_INDEX];
+		IStrategoTerm t = index.undefineSymbols(getProjectPath(tvars), searchCriteria);
+		env.setCurrent(t);
+		return true;
+	}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -47,19 +47,13 @@
 		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
 		try {
 			validateArguments(env, svars, tvars);
-			
 			successStatement = executePrimitive(env, svars, tvars) ;
-		
-		}catch (IOException ex) {
-			logException(agent , ex);
-			tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
-		}
-		catch (IllegalStateException ex) {
-			logException(agent , ex);
-			tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
 		}
 		catch (Exception ex) {
 			logException(agent , ex);
+			if( ex instanceof IOException ||  ex instanceof IllegalStateException){
+				tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
+			}
 		}
 		catch (Error e) {
 			logException(agent , e);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -57,16 +57,41 @@
 		symbols = new HashMap<SpxSymbolKey, List<SpxSymbol>>();
 	}
 
-	public INamespace define(SpxSymbolTableEntry entry, ILogger logger){
-		 
+	public INamespace define(SpxSymbolTableEntry entry, SpxSemanticIndexFacade f){
 		entry.value.setNamespace(_currentNamespaceId);
 		
-		logger.logMessage(src, "define | Defining Symbol "+ entry.value + " in "+ _currentNamespaceId);
+		defineSymbol(entry);
 		
-		defineSymbol(entry); 
+		//f.persistenceManager().spxSymbolTable().commit();
 		return this;
 	}
 	
+	public Set<SpxSymbol> undefineSymbols(IStrategoTerm searchingFor, IStrategoTerm type , SpxSemanticIndexFacade  facade){
+		SpxSymbolKey key = new SpxSymbolKey(searchingFor);
+		Set<SpxSymbol> undefinedSymbols = new HashSet<SpxSymbol>();
+		
+		if(this.symbols.containsKey(key)){
+			// Found following symbols indexed by key 
+			List<SpxSymbol> foundSymbols  = getMembers().get(key);
+			
+			// filtering symbols by type to retrieve the list of symbols to undefine
+			List<SpxSymbol> symbolsToDelete  = SpxSymbol.filterByType((IStrategoConstructor)type, foundSymbols);
+			
+			// deleting the symbols to be undefined
+			for ( SpxSymbol s : symbolsToDelete){
+				if(foundSymbols.remove(s)){
+					// adding to the list of removed symbols to return
+					undefinedSymbols.add(s);	
+				} 
+			}
+			this.symbols.put(key, foundSymbols);
+		}
+		
+		//facade.persistenceManager().spxSymbolTable().commit();
+		return undefinedSymbols;
+	}
+
+	
 	/**
 	 * Defines symbol in this Namespace. Define does not replace  
 	 * old symbol mapped using the key with the new one. It just adds the 
@@ -87,6 +112,7 @@
 		}
 	}
 	
+	
 	private static List<SpxSymbol> appendSymbols( List<SpxSymbol> origin , List<SpxSymbol> symbols){
 		if(symbols != null){
 			origin.addAll(symbols);
@@ -154,7 +180,7 @@
 		return null; // symbol is not found
 	}
 	
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
+	public Set<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
 		
 		facade.persistenceManager().logMessage(this.src, "resolveAll(Base) | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
@@ -185,7 +211,7 @@
 	 * (non-Javadoc)
 	 * @see org.spoofax.interpreter.library.language.spxlang.INamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException{
+	public Set<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException{
 		return resolveAll(searchingFor, ofType,  this, spxFacade);
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -3,6 +3,7 @@
 import java.io.Serializable;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
@@ -18,13 +19,15 @@
 
 	INamespace getCurrentNamespace(INamespaceResolver resolver) throws SpxSymbolTableException;
 	
-	INamespace define(SpxSymbolTableEntry entry, ILogger logger) ;
+	public INamespace define(SpxSymbolTableEntry entry, SpxSemanticIndexFacade f);
+	
+	Set<SpxSymbol> undefineSymbols(IStrategoTerm searchingFor, IStrategoTerm type , SpxSemanticIndexFacade  facade) ;
     
 	SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
     
-	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
+	Set<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
 	
-	Iterable<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedByNamepsace , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
+	Set<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedByNamepsace , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
 	
 	Map<SpxSymbolKey, List<SpxSymbol>> getMembers();
 	
@@ -36,6 +39,3 @@
 
 	void clear();	
 }
-
-
-

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -93,7 +93,7 @@
 			//getting the package declaration and retrieving it imported references 
 			PackageDeclaration assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
 			
-			Iterable<IStrategoList> importedIds = assiciatedPackageDeclaration.getImportReferneces();
+			Set<IStrategoList> importedIds = assiciatedPackageDeclaration.getImportReferneces();
 			
 			for(IStrategoList l : importedIds){
 				importedNamespaceUris.add(symTable.toNamespaceUri(l));; 
@@ -157,7 +157,7 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.BaseNamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.INamespace, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
 	@Override
-	public Iterable<SpxSymbol> resolveAll(IStrategoTerm key,IStrategoTerm type, INamespace originNamespace, SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
+	public Set<SpxSymbol> resolveAll(IStrategoTerm key,IStrategoTerm type, INamespace originNamespace, SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
 		facade.persistenceManager().logMessage(this.src, "resolveAll | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + key + " origin Namespace: " + originNamespace.namespaceUri().id() );
 		
 		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -10,6 +10,7 @@
 import jdbm.RecordManager;
 import jdbm.RecordManagerFactory;
 import jdbm.RecordManagerOptions;
+import jdbm.recman.BaseRecordManager;
 import jdbm.recman.CacheRecordManager;
 
 import org.spoofax.interpreter.library.IOAgent;
@@ -62,19 +63,19 @@
 		this._agent = spxSemanticIndexFacade.getIOAgent();
 		this._indexId = spxSemanticIndexFacade.indexId() ;
 		
-		String indexDirectory = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY;
+		BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
 
 		if( options  == null)
 			options = new Properties();// Creating empty properties collection if it is null
 		
 		//setting properties of RecordManager
-		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, indexDirectory + "/" + _indexId + ".idx");
+		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX);
 		options.put(RecordManagerOptions.CACHE_TYPE, "none");
 		options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "false");
 		
 		tryInitRecordManager(spxSemanticIndexFacade,options);
 		
-		logMessage(SRC + ".ctor" , "Instantiation of PersistenceManager is done. Index Directory : ["+ indexDirectory  + "] indexid : "+ getIndexId());
+		logMessage(SRC + ".ctor" , "Instantiation of PersistenceManager is done. Index Directory : ["+ BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX  + "] indexid : "+ getIndexId());
 	}
 
 
@@ -122,7 +123,7 @@
 		initListeners();
 		
 		if(Utils.DEBUG){
-			_spxSymbolTable.printSymbols("init" , facade.getProjectPath());
+			_spxSymbolTable.printSymbols("init" , facade.getProjectPath() , facade.indexId());
 		}	
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -72,6 +72,9 @@
 	}
 	
 	public INamespace resolveNamespace(IStrategoList id){
+		if(_activeNamespace != null && _activeNamespace.namespaceUri().equalSpoofaxId(id))
+			return _activeNamespace;
+		
 		Iterator<INamespace> resolvedNamespaces = namespaceByStrategoId.getPrimaryValues(id).iterator();
 		if(resolvedNamespaces.hasNext())
 			return resolvedNamespaces.next();
@@ -79,11 +82,17 @@
 			return null;
 	}
 	
+	public INamespace resolveNamespace(NamespaceUri id) {
+		if(_activeNamespace != null  && _activeNamespace.namespaceUri().equals(id))
+			return _activeNamespace;
+		
+		return namespaces.get(id); 
+	}
+	
 	public INamespace removeNamespace(IStrategoList id){
 		INamespace resolveNamespace  = resolveNamespace(id) ;
 		
 		if(resolveNamespace != null){
-			
 			_manager.logMessage(SRC, "removenamespace | removing following namespace : " + resolveNamespace);
 			this.namespaces.remove(resolveNamespace.namespaceUri());
 		}
@@ -91,10 +100,6 @@
 		return resolveNamespace;
 	}
 	
-	public INamespace resolveNamespace(NamespaceUri id) {
-		return namespaces.get(id); 
-	}
-	
 	public NamespaceUri getNamespaceUri(IStrategoList id) {
 		Iterable<NamespaceUri> uriIterator = namespaceByStrategoId.get(id);
 		if(uriIterator != null)
@@ -128,7 +133,19 @@
 		_manager.logMessage(SRC, "defineSymbol | defining symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symTableEntry.key + " Value : "+ symTableEntry.value);	
 		ensureActiveNamespaceLoaded(namespaceId);
 	
-		_activeNamespace = _activeNamespace.define(symTableEntry, facade.persistenceManager()); 
+		_activeNamespace = _activeNamespace.define(symTableEntry, facade); 
+	}
+	
+	public Set<SpxSymbol> undefineSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
+	    _manager.logMessage(SRC, "undefineSymbol | undefineSymbol symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
+			
+	    ensureActiveNamespaceLoaded(namespaceId);
+		Set<SpxSymbol> undefinedSymbols = _activeNamespace.undefineSymbols(
+				symbolId, symbolType, spxSemanticIndexFacade);
+	
+	    _manager.logMessage(SRC, "undefineSymbol | undefineSymbol Symbols : " + undefinedSymbols );
+			
+	    return undefinedSymbols;
 	}
 	
 	private void ensureActiveNamespaceUnloaded(IStrategoList namespaceId){
@@ -160,7 +177,7 @@
 		
 	}
 
-	public Iterable<SpxSymbol> resolveSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
+	public Set<SpxSymbol> resolveSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
 		_manager.logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + " of Type : "+ symbolType.getName());
 		
 		ensureActiveNamespaceLoaded(namespaceId);
@@ -191,6 +208,7 @@
 	
 		_manager.logMessage(SRC, "newAnonymousNamespace | Folloiwng namesapce is created : "  + localNamespace);
 		
+		this.commit();
 		_activeNamespace = localNamespace;
 		
 		return _activeNamespace ;
@@ -209,8 +227,8 @@
 		
 		INamespace ns = this.removeNamespace(namespaceId);
 		
-		ensureActiveNamespaceUnloaded(namespaceId);
-		_manager.logMessage(SRC, "newAnonymousNamespace | Folloiwng namesapce is removed : "  + ns);
+		_manager.logMessage(SRC, "destroyNamespace | Folloiwng namesapce is removed : "  + ns);
+		
 		return ns;
 	} 
 	
@@ -267,6 +285,7 @@
 		if(gns != null)
 			gns.clear();
 		
+		this.namespaces.put(gns.namespaceUri(), gns);
 		_manager.logMessage(SRC, "clearGlobalNamespce | Successfully removed all the entries." );
 	}
 	
@@ -275,16 +294,16 @@
 	 * 
 	 * @throws IOException
 	 */
-	public void printSymbols(String state , String projectPath) throws IOException{
+	public void printSymbols(String state , String projectPath , String indexId) throws IOException{
 		new File(projectPath + "/.log").mkdirs();
-		FileWriter fstream = new FileWriter(projectPath + "/.log/symbols"+Utils.now("yyyy-MM-dd HH.mm")+".txt" , true);
+		FileWriter fstream = new FileWriter(projectPath + "/.log/"+indexId+"_symbols_"+Utils.now("yyyy-MM-dd HH.mm")+".txt" , true);
 		BufferedWriter out = new BufferedWriter(fstream);
 		out.write("---Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+":----\n");
 		try
 		{	
 			if(namespaces != null){
 				for(INamespace ns : namespaces.values()){
-					out.write("|" + ns +"|\n");
+					out.write("[" + ns +"]\n\n");
 					logEntries(ns,out) ;
 				}
 			}
@@ -297,10 +316,9 @@
 	private static  void logEntries( INamespace namespace , BufferedWriter logger) throws IOException{
 		Map<SpxSymbolKey , List<SpxSymbol>> members = namespace.getMembers();
 		for( SpxSymbolKey k : members.keySet()) {
-			logger.write("\t"+k.toString()  + "  ----> \t");
-			
+			logger.write("\t"+k.toString()  + "  ----> \n");
 			for( SpxSymbol s : members.get(k) ){
-				logger.write( "\t"+ s.toString() + " || \t");
+				logger.write( s.printSymbol());
 			}
 			logger.write("\n");
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -225,6 +225,16 @@
 		}.executeWith(projectPath, searchCriteria);
 	}
 
+	public IStrategoTerm undefineSymbols(IStrategoString projectPath,IStrategoTuple searchCriteria) throws Exception {
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm searchCriteria) throws Exception {	
+				SpxSemanticIndexFacade f = getFacade(projectPath);
+				return f.undefineSymbols((IStrategoTuple)searchCriteria);
+			}
+		}.executeWith(projectPath, searchCriteria);
+	}
+	
 	public boolean removeCompilationUnit(IStrategoString projectPath,IStrategoString spxCompilationUnitPath) throws Exception{
 	
 			SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
@@ -260,4 +270,6 @@
 		public abstract IStrategoTerm resolve(IStrategoString projectPath , IStrategoTerm term) throws Exception ;
 	}
 
+	
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -60,7 +60,7 @@
 	 */
 	public SpxSemanticIndexFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent){
 		_projectPath = asJavaString(projectPath);
-		_indexId = getProjectName()+".1" ;
+		_indexId = getProjectName() + "";
 		_termFactory = termFactory;
 		_agent = agent;
 		
@@ -326,17 +326,15 @@
 	// (namespace * idTolookupFor * type constructor)
 	public IStrategoTerm resolveSymbols(IStrategoTuple searchCriteria) throws SpxSymbolTableException{
 		if (searchCriteria.getSubtermCount() != 4)
-			throw new IllegalArgumentException(" Illegal symbolLookupTerm Argument ; expected 4 subterms. Found : " + searchCriteria.getSubtermCount());
-		
+			throw new IllegalArgumentException(" resolveSymbols | Illegal symbolLookupTerm Argument ; expected 4 subterms. Found : " + searchCriteria.getSubtermCount());
 		String searchMode = asJavaString(searchCriteria.get(3)).trim();
 		IStrategoAppl typeAppl =  (IStrategoAppl)searchCriteria.getSubterm(2);
 		IStrategoConstructor typeCtor = getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
 		
-		Iterable<SpxSymbol> spxSymbols = new ArrayList<SpxSymbol>();
+		Set<SpxSymbol> spxSymbols = null;
 		
 		if (typeCtor != null) {
-			if(searchMode.equalsIgnoreCase(Utils.All))
-			{
+			if(searchMode.equalsIgnoreCase(Utils.All)){
 				spxSymbols = resolveSymbols( 
 							(IStrategoAppl)searchCriteria.get(0),
 							searchCriteria.get(1),
@@ -354,10 +352,33 @@
 		return SpxSymbol.toTerms(this, spxSymbols);
 	}
 	
+	public IStrategoTerm undefineSymbols (IStrategoTuple searchCriteria) throws SpxSymbolTableException{
+	    if (searchCriteria.getSubtermCount() != 3)
+	        throw new IllegalArgumentException(" undefineSymbols| Illegal symbolLookupTerm Argument ; expected 3 subterms. Found : " + searchCriteria.getSubtermCount());
+	    
+	    
+	    IStrategoList namespaceID = this.getNamespaceId(Tools.applAt(searchCriteria, 0));
+	    IStrategoTerm symbolID = Tools.termAt(searchCriteria, 1);
+	    IStrategoAppl typeAppl =  Tools.applAt(searchCriteria, 2);
+	    IStrategoConstructor typeCtor = getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
+	    
+	    Set<SpxSymbol> spxSymbols = this.persistenceManager().spxSymbolTable()
+	    					.undefineSymbols(
+	    							this,
+	    							namespaceID, 
+	    							symbolID,
+	    							typeCtor
+    							);
+	                        
+	    return SpxSymbol.toTerms(this, spxSymbols);
+	}  
+	
 	public void invalidateGlobalNamespace() {
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
 		
 		symbolTable.clearGlobalNamespce(this);
+		
+		
 	}
 	
 	/**
@@ -371,16 +392,16 @@
 	 * 
 	 * @throws SpxSymbolTableException
 	 */
-	public Iterable<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType) throws SpxSymbolTableException {
+	public Set<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType) throws SpxSymbolTableException {
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
 		
-		Iterable<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(this, namespaceID, strip(symbolId), symbolType);
+		Set<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(this, namespaceID, strip(symbolId), symbolType);
 		return resolvedSymbols;
 	}
 	
-	public Iterable<SpxSymbol> resolveSymbol(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType) throws SpxSymbolTableException {
+	public Set<SpxSymbol> resolveSymbol(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType) throws SpxSymbolTableException {
 		Set<SpxSymbol> resolvedSymbols= new HashSet<SpxSymbol>();
 		
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
@@ -393,6 +414,7 @@
 		return resolvedSymbols;
 	}
 
+	
 
 	/**
 	 * @param symbolLookupTerm
@@ -473,12 +495,12 @@
 	 * @param importReferences
 	 */
 	public void indexImportReferences(IStrategoAppl importReferences) throws SpxSymbolTableException{
+		verifyConstructor(importReferences.getConstructor(), this.getImportDeclCon(), "Illegal ImportDeclaration Constructor encountered.");
 		
 		IStrategoAppl namespaceId = (IStrategoAppl) importReferences.getSubterm(0);
 		IStrategoList imports = (IStrategoList) importReferences.getSubterm(1);
 		IStrategoList packageId; 
 		
-		
 		if (namespaceId.getConstructor() == getModuleQNameCon()) {
 			packageId = persistenceManager()
 					.spxModuleTable()
@@ -778,10 +800,12 @@
 	 *  
 	 * @throws IOException
 	 */
-	public void persistChanges() throws IOException {  
-		_persistenceManager.commit(); 
+	public void persistChanges() throws IOException {
+		_persistenceManager.commit();
+
+		_persistenceManager.spxSymbolTable().printSymbols("commit",
+				this.getProjectPath(), this.indexId());
 
-		if( Utils.DEBUG) { _persistenceManager.spxSymbolTable().printSymbols("commit" , this.getProjectPath());} 
 	}
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -22,7 +22,7 @@
 	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
 	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
 	
-	static final boolean DEBUG = true;
+	static final boolean DEBUG = false;
 	
 	/**
 	 * Constructs {@link IStrategoList} from {@code decls}  

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -11,6 +11,7 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.TermConverter;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.terms.StrategoListIterator;
 
@@ -64,6 +65,7 @@
 			if(decl != null ){	
 				this.importReferences.add(id);
 				decl.addImportedTo(this.getId());
+				idxFacade.persistenceManager().spxPackageTable().definePackageDeclaration(decl);
 			}
 		}
 		else 
@@ -85,6 +87,7 @@
 	
 	public  IStrategoList getImports(SpxSemanticIndexFacade idxFacade) {	
 		ITermFactory termFactory = idxFacade.getTermFactory();
+		TermConverter termConverter = idxFacade.getTermConverter();
 		
 		HashSet<IStrategoTerm> allImportRefs = new HashSet<IStrategoTerm>();
 		allImportRefs.addAll(this.importReferences);
@@ -94,7 +97,7 @@
 		for (IStrategoTerm t: allImportRefs)
 			result = idxFacade.getTermFactory().makeListCons(tranformToSpxImport(idxFacade,t), result);
 	
-		return result;
+		return termConverter.convert(result);
 	}
 	
 	protected IStrategoTerm forceImploderAttachment(IStrategoTerm term) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -4,6 +4,7 @@
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
 import java.util.UUID;
 
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
@@ -109,14 +110,15 @@
 				deserializedDataToTerm )	;
 	}
 	
-	public static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Iterable<SpxSymbol> symbols) throws SpxSymbolTableException{
+	public static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Set<SpxSymbol> symbols) throws SpxSymbolTableException{
 		IStrategoList result = facade.getTermFactory().makeList();
+		Object[] arrSymbols = symbols.toArray() ;
 		
 		if( symbols != null)
-			for( SpxSymbol s : symbols) { 
-				result = facade.getTermFactory().makeListCons(  s.toTerm(facade) , result);
+			for( int i = arrSymbols.length-1 ; i>= 0  ; i--) { 
+				result = facade.getTermFactory().makeListCons(
+						((SpxSymbol) arrSymbols[i]).toTerm(facade), result);
 			}
-		
 		return result;
 	} 
 	
@@ -171,4 +173,9 @@
 	public String toString() {
 		return "SpxSymbol [ Id : " + this.getId() + " Type= " + _type + ", Namespace=" + _namespace + "]";
 	}
+	
+	public String printSymbol(){
+		return "\t\tId =  " + this.getId() + "| Type = " + _type + "| Namespace = "+ _namespace+"\n";
+	}
+	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Sat Oct 15 17:03:31 2011	(r23466)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Mon Oct 17 12:00:00 2011	(r23467)
@@ -21,6 +21,7 @@
 import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
 import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolKey;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -262,14 +263,10 @@
 		
 		setupScopeTree();
 
-		// defining a composite key 
-		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
-		// defining following composite ID :  (Global() , "TestId")
-		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId")); 
-		// defining Data 
-		IStrategoTerm data = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);
-		// setting Type to Global() 
-		IStrategoAppl typeAppl = namespaceAppl ; 
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());// defining a composite key 
+		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId"));// defining following composite ID :  (Global() , "TestId")
+	 	IStrategoTerm data = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade); // defining Data
+		IStrategoAppl typeAppl = namespaceAppl ;// setting Type to Global() 
 		
 		// Defining Symbol-Table entry 
 		IStrategoAppl symbolDef = createEntry(namespaceAppl , symbolId , typeAppl  , data);
@@ -277,9 +274,7 @@
 		// Indexing Symbol
 		_facade.indexSymbol(symbolDef);
 	
-		
-		
-		// Resolving Symbol 
+	// Resolving Symbol 
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId,
@@ -298,9 +293,6 @@
 				);
 		
 		assertEquals( 0 , resolvedSymbols.size());
-		
-		
-		
 	}
 	
 	public void testUnknownConstructorInResolveSymbolShouldThrowException() throws IOException, SpxSymbolTableException {
@@ -510,7 +502,7 @@
 	public void testShouldNotResolveSymbolFromImportedNamespaceInCyclicReference() throws IOException, SpxSymbolTableException{
 		setupScopeTree();
 		
-		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId())));
+		indexImportRef(packageDeclaration1, packageDeclaration1);
 		
 		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId());
 		
@@ -532,20 +524,15 @@
 	}
 	
 	public void testShouldResolveSymbolFromImportedNamespace() throws IOException, SpxSymbolTableException{
-		setupScopeTree();
-		
-		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId())));
+		createExtendedScopeTree();
 		
 		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId());
-		
 		IStrategoTerm symbolId1 = packageQNameAppl; // defining following packageID
 	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
 		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
 		
 		_facade.indexSymbol(createEntry(packageQNameAppl , symbolId1 , typeAppl1  , data1));
 		
-		
-		
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
@@ -556,15 +543,13 @@
 	}
 	
 	public void testShouldNotAllowTransitiveImports() throws IOException, SpxSymbolTableException{
-		setupScopeTree();
+		createExtendedScopeTree();
 		
 		String packageName3 =  	"\"lang\", \"p3\"" ;
 		
 		packageDeclaration3   = indexTestPackageDecl(packageName3, absPathString2);
 		moduleDeclarationP3M1 = indexTestModuleDefs ( "p3m1" , packageName3 , absPathString2);
 		
-		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId())));
-		this.packageDeclaration2.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration3.getId())));
 		
 		IStrategoAppl moduleQnameAppl = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId());
 		
@@ -684,12 +669,12 @@
 		
 		// Defining Symbol3 in P3
 		IStrategoTerm symbolId3 = moduleQnameAppl1; 
-	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP3M1.toTerm(_facade);	// defining Data
 		IStrategoAppl typeAppl3 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
 		
 		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
 		
-		
+		_facade.persistChanges();
 		_registry.closePersistenceManager(this.projectNameTerm);
 		
 		_registry.initFacade(projectNameTerm, termFactory(), ioAgent());
@@ -815,6 +800,65 @@
 		assertTrue(SpxSymbol.verifyEquals( GlobalNamespace.getGlobalNamespaceId(_facade) , actual.namespaceUri().id()) );
 	
 	}
+	public void testUndefineSymbols() throws Exception{
+		createExtendedScopeTree();
+	
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		
+		// Defining Symbol1 in P1.M1
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId1 , typeAppl1  , data1));
+		
+		// Defining Symbol1 in P1.M2
+		IStrategoTerm symbolId2 = moduleQnameAppl1; 
+	 	IStrategoTerm data2 = (IStrategoAppl)moduleDeclarationP1M2.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl2 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef__", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1, symbolId2 , typeAppl2  , data2));
+		
+		// Defining Symbol3 in P2.M1
+		IStrategoTerm symbolId3 = moduleQnameAppl1; 
+	 	IStrategoTerm data3 = (IStrategoAppl)moduleDeclarationP2M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl3 = typeAppl1;
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId3 , typeAppl3 , data3));
+		
+		
+		_facade.persistChanges();
+		
+		// closing persistence manager
+		_registry.closePersistenceManager(this.projectNameTerm);
+		_registry.initFacade(projectNameTerm, termFactory(), ioAgent());
+		
+		// loading tfacade again
+		SpxSemanticIndexFacade tfacade = _registry.getFacade(this.projectNameTerm);
+		
+		Set<SpxSymbol> resolvedSymbols = tfacade
+				.persistenceManager()
+				.spxSymbolTable()
+				.undefineSymbols(tfacade, this.moduleDeclarationP1M1.getId(),
+						symbolId1, typeAppl1.getConstructor());
+		
+		assertEquals(2, resolvedSymbols.size());
+		
+		for( SpxSymbol sym : resolvedSymbols) {
+			assertTrue(sym.equalType(typeAppl1.getConstructor())); 
+		}
+		
+		List<SpxSymbol> resolvedSymbols1 = tfacade.persistenceManager().spxSymbolTable()
+				.resolveNamespace(this.moduleDeclarationP1M1.getId())
+				.getMembers()
+				.get(new SpxSymbolKey(symbolId1));
+		
+		assertEquals(1, resolvedSymbols1.size());
+		
+		for( SpxSymbol sym : resolvedSymbols1) {
+			assertTrue(sym.equalType(typeAppl2.getConstructor())); 
+		}
+	}
 	
 	public void testResolveShouldReturnAllSymbolsOfaType() throws Exception{
 		createExtendedScopeTree();
@@ -885,6 +929,18 @@
 		}
 	}
 	
+	private void indexImportRef ( PackageDeclaration decl ,  PackageDeclaration importPackageDecl) throws SpxSymbolTableException{
+		IStrategoConstructor importCtor  = _facade.getImportDeclCon();
+		IStrategoAppl importDecl = this.termFactory().makeAppl(importCtor,  
+				PackageDeclaration.toPackageQNameAppl(_facade,decl.getId()),
+				termFactory().makeList(
+						PackageDeclaration.toPackageQNameAppl(_facade,importPackageDecl.getId())
+				)
+		);
+		
+		_facade.indexImportReferences(importDecl);
+		
+	}
 	private void createExtendedScopeTree() throws IOException, SpxSymbolTableException{
 		// Setting up a big Scope-Tree
 		setupScopeTree();
@@ -895,10 +951,10 @@
 		moduleDeclarationP3M1 = indexTestModuleDefs ( "p3m1" , packageName3 , absPathString2);
 		
 		//Setting up following import hierarchy : P1 -> P2 -> P3 -> p1
-		this.packageDeclaration1.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration2.getId())));
-		this.packageDeclaration2.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration3.getId())));
-		this.packageDeclaration3.addImportRefernces(_facade, termFactory().makeList(PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId())));
-				
+		indexImportRef( packageDeclaration1 , packageDeclaration2);
+		indexImportRef( packageDeclaration2 , packageDeclaration3);
+		indexImportRef( packageDeclaration3 , packageDeclaration1);
+		
 		// ------ScopeTree setup is done :  P1 imports P2 import P3 imports P1--------
 		// 
 		//                         Global 

From M.A.Akhter at student.tudelft.nl  Mon Oct 17 14:03:09 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 17 Oct 2011 12:03:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23468 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data
Message-ID: <20111017120309.318B22B801F@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Oct 17 12:03:08 2011
New Revision: 23468
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23468&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Mon Oct 17 12:00:00 2011	(r23467)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Mon Oct 17 12:03:08 2011	(r23468)
@@ -112,13 +112,14 @@
 	
 	public static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Set<SpxSymbol> symbols) throws SpxSymbolTableException{
 		IStrategoList result = facade.getTermFactory().makeList();
-		Object[] arrSymbols = symbols.toArray() ;
 		
-		if( symbols != null)
+		if( symbols != null){
+			Object[] arrSymbols = symbols.toArray() ;
 			for( int i = arrSymbols.length-1 ; i>= 0  ; i--) { 
 				result = facade.getTermFactory().makeListCons(
 						((SpxSymbol) arrSymbols[i]).toTerm(facade), result);
 			}
+		}	
 		return result;
 	} 
 	

From L.C.L.Kats at tudelft.nl  Mon Oct 17 18:46:05 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Oct 2011 16:46:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23469 - hydra/jobs
Message-ID: <20111017164605.C05B4CC084@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Oct 17 16:46:04 2011
New Revision: 23469
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23469&sc=1

Log:
testing if removing content.jar/artifacts.jar helps with Spoofax/448

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Mon Oct 17 12:03:08 2011	(r23468)
+++ hydra/jobs/spoofax-imp.nix	Mon Oct 17 16:46:04 2011	(r23469)
@@ -272,6 +272,8 @@
         ensureDir $out/nix-support
         cp -Rv org.strategoxt.imp.updatesite/target/site $out/
         touch $out/site/index.html
+        rm $out/site/content.jar    # Spoofax/448
+        rm $out/site/artifacts.jar  # Spoofax/448
         echo "file site $out/site" >> $out/nix-support/hydra-build-products
       '';
 

From L.C.L.Kats at tudelft.nl  Mon Oct 17 18:46:46 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Oct 2011 16:46:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23470 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/syntax
Message-ID: <20111017164646.785B6CC048@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Oct 17 16:46:46 2011
New Revision: 23470
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23470&sc=1

Log:
added hackfix for completion regression

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Mon Oct 17 16:46:04 2011	(r23469)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Mon Oct 17 16:46:46 2011	(r23470)
@@ -165,6 +165,7 @@
             -> "->" {recover, reject}
             -> "/" {recover, reject}
             -> "file" {recover, reject}
+    "COMPLETION" ID     -> Result {cons("CompletionHelper")}
 
   %% test Primitive refactoring test
   %% [[ module x entity X {} ]] refactoring rename at X input Y =>

From L.C.L.Kats at tudelft.nl  Mon Oct 17 18:47:38 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Oct 2011 16:47:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23471 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	parser/ast services
Message-ID: <20111017164738.36876108C02D@mx3.tudelft.nl>

Author: LennartKats
Date: Mon Oct 17 16:47:37 2011
New Revision: 23471
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23471&sc=1

Log:
Fix for Spoofax/432: "completion wrong sorts?"

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstSortInspector.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java	Mon Oct 17 16:46:46 2011	(r23470)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java	Mon Oct 17 16:47:37 2011	(r23471)
@@ -15,6 +15,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.jsglr.client.imploder.Tokenizer;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 
@@ -33,10 +34,15 @@
 		//this.controller = controller;
 	}
 
+	/**
+	 * @param endOffset  The end offset (inclusive).
+	 */
 	public ISimpleTerm findNode(Object root, int startOffset, int endOffset) {
 		ISimpleTerm ast = impObjectToAstNode(root);
 		
-		if (getLeftToken(ast).getStartOffset() <= startOffset && endOffset <= getRightToken(ast).getEndOffset()) {
+		if (getLeftToken(ast).getStartOffset() <= startOffset
+				&& (endOffset <= getRightToken(ast).getEndOffset()
+						|| isPartOfListSuffixAt(ast, endOffset))) {
 			Iterator<ISimpleTerm> iterator = tryGetListIterator(ast); 
 			for (int i = 0, max = ast.getSubtermCount(); i < max; i++) {
 				ISimpleTerm child = iterator == null ? ast.getSubterm(i) : iterator.next();
@@ -52,9 +58,17 @@
 		    return null;
 		}
 	}
+
+	/**
+	 * Tests if an end offset is part of a list suffix
+	 * (considers the layout following the list also part of the list).
+	 */
+	private static boolean isPartOfListSuffixAt(ISimpleTerm node, final int offset) {
+		return node.isList() && offset <= Tokenizer.findRightMostLayoutToken(getRightToken(node)).getEndOffset();
+	}
 	
 	public ISimpleTerm findNode(Object root, int offset) {
-		return findNode(root, offset, offset);
+		return findNode(root, offset, offset - 1);
 	}
 	
 	public int getStartOffset(final Object element) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstSortInspector.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstSortInspector.java	Mon Oct 17 16:46:46 2011	(r23470)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstSortInspector.java	Mon Oct 17 16:47:37 2011	(r23471)
@@ -32,14 +32,29 @@
 		this.ast = ast;
 	}
 	
+	/**
+	 * @param startOffset The start offset.
+	 * @param endOffset   The end offset (inclusive).
+	 */
+	public Set<String> getSortsAtOffset(int startOffset, int endOffset) {
+		return getSortsAt(startOffset, endOffset, null);
+	}
+	
 	// TODO: get *all* sorts at cursor by looking at the parse tree? or by storing injections in the AST?
 	//       (see AsfixImploder)
-	public Set<String> getSortsAtOffset(int startOffset, int endOffset) {
+	/**
+	 * @param startOffset The start offset.
+	 * @param endOffset   The end offset (inclusive).
+	 */
+	public Set<String> getSortsAt(int startOffset, int endOffset, IStrategoTerm node) {
 		if (ast == null) return new HashSet<String>();
-		ISourcePositionLocator locator = getParseController(ast).getSourcePositionLocator();
-		IStrategoTerm node = (IStrategoTerm) locator.findNode(ast, endOffset);
-		if (node == null) node = ast;
 
+		if (node == null) {
+			ISourcePositionLocator locator = getParseController(ast).getSourcePositionLocator();
+			node = (IStrategoTerm) locator.findNode(ast, endOffset);
+			if (node == null) node = ast;
+		}
+		
 		int startToken = getNonLayoutTokenLeftOf(node);
 		int endToken = getNonLayoutTokenRightOf(node);
 		Set<String> results = getSortsOfOptionalChildren(node, startOffset, endOffset);
@@ -51,13 +66,9 @@
 		do {
 			IStrategoTerm parent = getParent(node);
 			if (!skipNonOptNodes && getLeftToken(node).getIndex() > startToken) {
-				if (node.isList()) {
+				if (node.isList() || (getSort(node) != null) && getSort(node).equals("Some"))
 					isOptNode = true;
-					results.add(getElementSort(node));
-				} else if (getSort(node) != null) {
-					if (getSort(node).equals("Some")) isOptNode = true;
-					results.add(getSort(node));
-				}
+				results.add(getElementSort(node));
 			} else if (parent != null && parent.isList()) {
 				if (!skipNonOptNodes)
 					results.add(getElementSort(parent));
@@ -78,6 +89,9 @@
 		return results;
 	}
 
+	/**
+	 * @param endOffset   The end offset (inclusive).
+	 */
 	private Set<String> getSortsOfOptionalChildren(IStrategoTerm node, int startOffset, int endOffset) {
 		// TODO: detect 'opt' optionals in addition to list children?
 		// TODO: somehow behave differently in case the completion resulted in a syntax error?

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Mon Oct 17 16:46:46 2011	(r23470)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Mon Oct 17 16:47:37 2011	(r23471)
@@ -74,8 +74,8 @@
 		boolean avoidReparse = completionFunction == null && templates.size() == 0;
 		IStrategoTerm ast = parser.parse(controller, selection, document, avoidReparse);
 		int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
-		Set<String> sorts = new AstSortInspector(ast).getSortsAtOffset(
-				offset - prefixLength, offset + COMPLETION_TOKEN.length());
+		Set<String> sorts = new AstSortInspector(ast).getSortsAt(
+				offset - prefixLength, offset + COMPLETION_TOKEN.length() - 1, parser.getCompletionNode());
 		if (parser.getCompletionNode() == null)
 			return getParseFailureProposals(controller, document, offset, sorts, viewer);
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Mon Oct 17 16:46:46 2011	(r23470)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Mon Oct 17 16:47:37 2011	(r23471)
@@ -17,6 +17,7 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.Tokenizer;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.terms.TermTransformer;
 import org.spoofax.terms.TermVisitor;
@@ -35,10 +36,10 @@
  */
 public class ContentProposerParser {
 
-	protected static final IStrategoConstructor COMPLETION_CONSTRUCTOR =
+	public static final IStrategoConstructor COMPLETION_CONSTRUCTOR =
 		getTermFactory().makeConstructor("COMPLETION", 1);
 
-	protected static final IStrategoConstructor COMPLETION_UNKNOWN =
+	public static final IStrategoConstructor COMPLETION_UNKNOWN =
 		getTermFactory().makeConstructor("NOCONTEXT", 1);
 
 	private static final long REINIT_PARSE_DELAY = 4000;
@@ -247,7 +248,7 @@
 
 			public void preVisit(IStrategoTerm node) {
 				if (getLeftToken(node).getStartOffset() <= offset
-						&& offset <= getRightToken(node).getEndOffset()) {
+						&& (offset <= getRightToken(node).getEndOffset() || isPartOfListSuffixAt(node, offset))) {
 					targetNode = node;
 				}
 				lastNode = node;
@@ -263,6 +264,14 @@
 	}
 
 	/**
+	 * Tests if an end offset is part of a list suffix
+	 * (considers the layout following the list also part of the list).
+	 */
+	protected static boolean isPartOfListSuffixAt(IStrategoTerm node, final int offset) {
+		return node.isList() && offset <= Tokenizer.findRightMostLayoutToken(getRightToken(node)).getEndOffset();
+	}
+
+	/**
 	 * Read the identifier at the offset location, using
 	 * the identifier lexical regular expression.
 	 */

From L.C.L.Kats at tudelft.nl  Mon Oct 17 18:48:11 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Oct 2011 16:48:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23472 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.spoofax.generator/src/sdf2imp/services
Message-ID: <20111017164811.E0FF82B8017@mx2.tudelft.nl>

Author: LennartKats
Date: Mon Oct 17 16:48:11 2011
New Revision: 23472
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23472&sc=1

Log:
removed strange abbreviation

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/services/create-completions-descriptor.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Mon Oct 17 16:47:37 2011	(r23471)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Mon Oct 17 16:48:11 2011	(r23472)
@@ -40,7 +40,7 @@
           completion template Definition :
             "entity " <e> " {" (cursor) "}"  (blank)
           ~~
-          completion template Property : "prop" =
+          completion template Property : "property" =
             <x> " : " <T>  (blank)
           ~~
         completions

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/services/create-completions-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/services/create-completions-descriptor.str	Mon Oct 17 16:47:37 2011	(r23471)
+++ spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/services/create-completions-descriptor.str	Mon Oct 17 16:48:11 2011	(r23472)
@@ -29,7 +29,7 @@
           completion template Definition :
             "entity " <e> " {" (cursor) "}"  (blank)
           ~~
-          completion template Property : "prop" =
+          completion template Property : "property" =
             <x> " : " <T>  (blank)
           ~~
       ]|

From tobivollebregt at gmail.com  Mon Oct 17 20:01:03 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 17 Oct 2011 20:01:03 +0200
Subject: [Stratego-commits] SVN commit: StrategoXT - r23470 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/syntax
In-Reply-To: <20111017164646.785B6CC048@mx4.tudelft.nl>
References: <20111017164646.785B6CC048@mx4.tudelft.nl>
Message-ID: <CAOPyLrFFQsV8WyMoaC+XGtFsOUwUAk6F=QZXtYkVk5aZ6SXKyQ@mail.gmail.com>

Shouldn't this be "CONTENTCOMPLETE", or is this doing something other
than what I think it should be doing?

On 17 October 2011 18:46, Lennart Kats <L.C.L.Kats at tudelft.nl> wrote:
> Author: LennartKats
> Date: Mon Oct 17 16:46:46 2011
> New Revision: 23470
> URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23470&sc=1
>
> Log:
> added hackfix for completion regression
>
> Modified:
> ? spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
>
> Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
> ==============================================================================
> --- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf ? ? Mon Oct 17 16:46:04 2011 ? ? ? ?(r23469)
> +++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf ? ? Mon Oct 17 16:46:46 2011 ? ? ? ?(r23470)
> @@ -165,6 +165,7 @@
> ? ? ? ? ? ? -> "->" {recover, reject}
> ? ? ? ? ? ? -> "/" {recover, reject}
> ? ? ? ? ? ? -> "file" {recover, reject}
> + ? ?"COMPLETION" ID ? ? -> Result {cons("CompletionHelper")}
>
> ? %% test Primitive refactoring test
> ? %% [[ module x entity X {} ]] refactoring rename at X input Y =>
> _______________________________________________
> Stratego-commits mailing list
> Stratego-commits at strategoxt.org
> https://mailman.st.ewi.tudelft.nl/listinfo/stratego-commits
>


From L.C.L.Kats at tudelft.nl  Mon Oct 17 20:15:29 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Oct 2011 18:15:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23473 - hydra/jobs
Message-ID: <20111017181538.67BA1CC092@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Oct 17 18:15:29 2011
New Revision: 23473
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23473&sc=1

Log:
removing those files only seems to cause trouble :/

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Mon Oct 17 16:48:11 2011	(r23472)
+++ hydra/jobs/spoofax-imp.nix	Mon Oct 17 18:15:29 2011	(r23473)
@@ -272,8 +272,6 @@
         ensureDir $out/nix-support
         cp -Rv org.strategoxt.imp.updatesite/target/site $out/
         touch $out/site/index.html
-        rm $out/site/content.jar    # Spoofax/448
-        rm $out/site/artifacts.jar  # Spoofax/448
         echo "file site $out/site" >> $out/nix-support/hydra-build-products
       '';
 

From L.C.L.Kats at tudelft.nl  Mon Oct 17 20:19:13 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Oct 2011 18:19:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23474 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime
Message-ID: <20111017182047.3B49C2B8024@mx2.tudelft.nl>

Author: LennartKats
Date: Mon Oct 17 18:19:13 2011
New Revision: 23474
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23474&sc=1

Log:
push

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Mon Oct 17 18:15:29 2011	(r23473)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Mon Oct 17 18:19:13 2011	(r23474)
@@ -354,3 +354,4 @@
    </extension>
    
 </plugin>
+

From L.C.L.Kats at tudelft.nl  Mon Oct 17 21:06:29 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Oct 2011 19:06:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23475 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder
Message-ID: <20111017190629.F1360108C01F@mx3.tudelft.nl>

Author: LennartKats
Date: Mon Oct 17 19:06:29 2011
New Revision: 23475
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23475&sc=1

Log:
support getElementSort() for non-list imploder attachments

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java	Mon Oct 17 18:19:13 2011	(r23474)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java	Mon Oct 17 19:06:29 2011	(r23475)
@@ -64,6 +64,9 @@
 
 	int getStartOffset();
 
+	/**
+	 * Gets the end offset (inclusive).
+	 */
 	int getEndOffset();
 
 	int getLine();

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Mon Oct 17 18:19:13 2011	(r23474)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Mon Oct 17 19:06:29 2011	(r23475)
@@ -88,12 +88,10 @@
 	
 	/**
 	 * The element sort for list terms.
-	 * 
-	 * @throws UnsupportedOperationException
-	 *             If the node is not a list.
+	 * Same as {@link #getSort()} for non-list terms.
 	 */
 	public String getElementSort() {
-		throw new UnsupportedOperationException();
+		return getSort();
 	}
 
 	public static IToken getLeftToken(ISimpleTerm term) {
@@ -212,9 +210,9 @@
 	@Override
 	public String toString() {
 		if (getLeftToken() != null) {
-			return "(" + sort + ",\"" + getLeftToken().getTokenizer().toString(getLeftToken(), getRightToken()) + "\")";
+			return "(" + getSort() + ",\"" + getLeftToken().getTokenizer().toString(getLeftToken(), getRightToken()) + "\")";
 		} else {
-			return "(" + sort + ",null)";
+			return "(" + getSort() + ",null)";
 		}
 	}
 	

From M.A.Akhter at student.tudelft.nl  Mon Oct 17 21:19:40 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 17 Oct 2011 19:19:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23476 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. data
Message-ID: <20111017191940.69A8D108C00A@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Oct 17 19:19:40 2011
New Revision: 23476
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23476&sc=1

Log:
bugfix/getimports - returning qualified spx namespaces

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Mon Oct 17 19:06:29 2011	(r23475)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Mon Oct 17 19:19:40 2011	(r23476)
@@ -266,7 +266,6 @@
 			defineNamespace(pDecl); 
 		}
 	}
-	
 
 	public IStrategoTerm insertNewScope(IStrategoAppl namespaceAppl) throws SpxSymbolTableException {
 		
@@ -287,7 +286,6 @@
 		
 		return this.getTermFactory().makeAppl(getLocalNamespaceTypeCon(), ns.namespaceUri().id());
 	}
-
 	
 	// SymbolDef : namespace * id * type *  value -> Def  
 	public void indexSymbol(IStrategoAppl symbolDefinition) throws SpxSymbolTableException, IOException{	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Mon Oct 17 19:06:29 2011	(r23475)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Mon Oct 17 19:19:40 2011	(r23476)
@@ -75,8 +75,7 @@
 	private IStrategoTerm tranformToSpxImport(SpxSemanticIndexFacade idxFacade, IStrategoTerm i){
 		IStrategoTerm retTerm = i ; 
 		if( i instanceof IStrategoList)
-			retTerm = idxFacade.getTermFactory().makeAppl(
-					idxFacade.getPackageQNameCon(), i);
+			retTerm = PackageDeclaration.toPackageQNameAppl(idxFacade, (IStrategoList)i);
 
 		return retTerm;	
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Mon Oct 17 19:06:29 2011	(r23475)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Mon Oct 17 19:19:40 2011	(r23476)
@@ -170,8 +170,6 @@
 		return toIdTerm(facade ,  facade.getPackageQNameCon(), id);
 	}
 
-	
-	
 	/**
 	 * Converts to typed Package Qualified Name
 	 *  

From M.A.Akhter at student.tudelft.nl  Tue Oct 18 11:49:11 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 18 Oct 2011 09:49:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23477 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. data
Message-ID: <20111018094911.CE2AC2B8004@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Oct 18 09:49:11 2011
New Revision: 23477
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23477&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ICompilationUnitRecordListener.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IModuleDeclarationRecordListener.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IPackageDeclarationRecordListener.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ICompilationUnitRecordListener.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ICompilationUnitRecordListener.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -0,0 +1,8 @@
+package org.spoofax.interpreter.library.language.spxlang.index;
+
+import jdbm.RecordListener;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxCompilationUnitInfo;
+
+interface ICompilationUnitRecordListener{
+	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener();
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IModuleDeclarationRecordListener.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IModuleDeclarationRecordListener.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -0,0 +1,11 @@
+package org.spoofax.interpreter.library.language.spxlang.index;
+
+import jdbm.RecordListener;
+
+import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
+import org.spoofax.interpreter.terms.IStrategoList;
+
+interface IModuleDeclarationRecordListener{
+	
+	public RecordListener<IStrategoList, ModuleDeclaration> getModuleDeclarationRecordListener();
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IPackageDeclarationRecordListener.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IPackageDeclarationRecordListener.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -0,0 +1,13 @@
+package org.spoofax.interpreter.library.language.spxlang.index;
+
+import jdbm.RecordListener;
+
+import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.terms.IStrategoList;
+
+
+
+interface IPackageDeclarationRecordListener
+{
+	public RecordListener<IStrategoList, PackageDeclaration> getPackageDeclarationRecordListener();
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Mon Oct 17 19:19:40 2011	(r23476)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -20,7 +20,7 @@
 public class SpxCompilationUnitTable {
 	
 	private final PrimaryHashMap<String , SpxCompilationUnitInfo> _infoMap;
-	private final PrimaryStoreMap<Long,IStrategoTerm> _spxUnitStoreMap;
+	private final PrimaryStoreMap<Long,String> _spxUnitStoreMap;
 	
     /**
      * Listeners which are notified about changes in records
@@ -28,6 +28,7 @@
     protected List<RecordListener<String,SpxCompilationUnitInfo>> recordListeners = new ArrayList<RecordListener<String,SpxCompilationUnitInfo>>();
     
     private final String SRC  = this.getClass().getSimpleName();
+    
 	/**
 	 * Creates a new instance of SymbolTable or loads existing SymbolTable with name specified  
 	 * in the following tableName argument.
@@ -65,19 +66,20 @@
 	/**
 	 * Defines a new symbol table entry. If the entry is already present in the symboltable, 
 	 * it updates the existing entry by invoking {@link #update(URI, IStrategoTerm)}. 
-	 * 
+	 * @param facade TODO
 	 * @param absPath URI representing the absolute path of the Compilation Unit.   
 	 * @param compilationUnit compilation unit AST represented by {@link IStrategoTerm}
+	 * 
 	 * @throws IOException 
 	 */
-	public void define(URI absPath , IStrategoTerm compilationUnitRTree) throws IOException
+	public void define(SpxSemanticIndexFacade facade , URI absPath, IStrategoTerm compilationUnitRTree) throws IOException
 	{	
 		String abspathString = Utils.uriToAbsPathString(absPath);
 		
 		if ( _infoMap.containsKey(abspathString))
-			this.update(absPath, compilationUnitRTree); //URI is already there in the symbol table . Hence updating the table
+			this.update(facade , absPath, compilationUnitRTree); //URI is already there in the symbol table . Hence updating the table
 		else
-			this.add(absPath, compilationUnitRTree);  
+			this.add(facade, absPath, compilationUnitRTree);  
 	}
 	
 	/**
@@ -87,9 +89,11 @@
 	 * @param compilationUnitAST
 	 * @throws IOException 
 	 */
-	private void add(URI absPath , IStrategoTerm compilationUnitAST) throws IOException {
+	private void add(SpxSemanticIndexFacade facade , URI absPath , IStrategoTerm compilationUnitAST) throws IOException {
 		
-		long resID = _spxUnitStoreMap.putValue(compilationUnitAST); // Adding Compilation Unit to the storemap
+		String serializedTerm = Utils.serializeToString(facade.getTermAttachmentSerializer(), compilationUnitAST);
+		
+		long resID = _spxUnitStoreMap.putValue(serializedTerm); // Adding Compilation Unit to the storemap
 		
 		// instantiating a new SpxCompilationUnitInfo object with the newly created resID
 		// and storing it in infomap
@@ -118,13 +122,15 @@
 	 * @param compilationUnitAterm
 	 * @throws IOException 
 	 */
-	private void update(URI absPath , IStrategoTerm compilationUnitAterm) throws IOException {	
+	private void update(SpxSemanticIndexFacade facade ,  URI absPath , IStrategoTerm compilationUnitAterm) throws IOException {	
 		
 		SpxCompilationUnitInfo oldValue = _infoMap.get(Utils.uriToAbsPathString(absPath));
 		SpxCompilationUnitInfo newValue = SpxCompilationUnitInfo.newInstance(oldValue);
 		newValue.IncrementVersionNo();
 		
-		_spxUnitStoreMap.put(newValue.getRecId(), compilationUnitAterm);
+		String serializedTerm = Utils.serializeToString(facade.getTermAttachmentSerializer(), compilationUnitAterm);
+		
+		_spxUnitStoreMap.put(newValue.getRecId(), serializedTerm);
 	
 		if(!recordListeners.isEmpty()){	
 			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners){
@@ -157,33 +163,35 @@
 		if ((removedValue != null)
 				&& _spxUnitStoreMap.containsKey(removedValue.getRecId()))
 			_spxUnitStoreMap.remove(removedValue.getRecId());
-		
-		if(!recordListeners.isEmpty())
-		{	
-			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners)
-			{
-				r.recordRemoved(absPathString,removedValue);
+
+		if (!recordListeners.isEmpty()) {
+			for (RecordListener<String, SpxCompilationUnitInfo> r : recordListeners) {
+				r.recordRemoved(absPathString, removedValue);
 			}
 		}
 	}
 	
 	/**
 	 * Returns SPXCompilationUnit mapped by the specified absPath argument.
-	 * 
+	 * @param f TODO
 	 * @param absPath
+	 * 
 	 * @return
 	 */
-	public IStrategoTerm get(URI absPath){
+	public IStrategoTerm get(SpxSemanticIndexFacade f, URI absPath){
 		String key = Utils.uriToAbsPathString(absPath);
 		
 		SpxCompilationUnitInfo retUnitData= _infoMap.get(key);
 		
-		return _spxUnitStoreMap.get(retUnitData.getRecId());
+		String serializedString = _spxUnitStoreMap.get(retUnitData.getRecId());
+		IStrategoTerm deserializedTerm = Utils.deserializeToTerm(f.getTermFactory(), f.getTermAttachmentSerializer(), serializedString);
+		
+		return deserializedTerm ;
 	}
 	
 	public void clear() throws IOException{
 		Iterator<String> keyIter = _infoMap.keySet().iterator();
-		if( keyIter != null){
+		if (keyIter != null) {
 			while (keyIter.hasNext())
 				remove(keyIter.next());
 		}
@@ -204,13 +212,4 @@
 	private void removeRecordListener(RecordListener<String, SpxCompilationUnitInfo> listener) {	
 		recordListeners.remove(listener);
 	}
-	
-}
-
-interface ICompilationUnitRecordListener
-{
-	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener();
-}
-
-
-
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Mon Oct 17 19:19:40 2011	(r23476)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -426,7 +426,3 @@
 	}
 }
 
-interface IModuleDeclarationRecordListener{
-	
-	public RecordListener<IStrategoList, ModuleDeclaration> getModuleDeclarationRecordListener();
-}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Mon Oct 17 19:19:40 2011	(r23476)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -431,8 +431,3 @@
 	}
 }
 
-
-interface IPackageDeclarationRecordListener
-{
-	public RecordListener<IStrategoList, PackageDeclaration> getPackageDeclarationRecordListener();
-}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Mon Oct 17 19:19:40 2011	(r23476)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -23,7 +23,6 @@
  * and changes are persisted when following operation is performed : {@link SpxPersistenceManager}.commit.
  * 
  * @author Md. Adil Akhter
- * Created On : Aug 22, 2011
  */
 public class SpxPersistenceManager implements ISpxPersistenceManager {
 	private static final String SRC =   "SpxPersistenceManager" ;
@@ -134,7 +133,7 @@
 	 */
 	private void initListeners()
 	{
-		// If compilation unit is removed, automatically remove packages.
+		// If compilation unit is removed, automatically remove all the enclosed packages.
 		_spxUnitsTable.addRecordListener((ICompilationUnitRecordListener)_spxPackageTable);
 		
 		// also automatically remove the modules that is located 
@@ -197,7 +196,6 @@
 		spxSymbolTable().commit();
 		
 		if(!this.isClosed()){ 
-			// closing recordmanager 
 			_recordManager.close();
 		}	
 		// setting all the symboltable to null
@@ -221,21 +219,17 @@
 	public SpxModuleLookupTable spxModuleTable() { return _spxModuleTable; }	
 
 	public void clear() throws IOException{
-		try
-		{
-			this._spxUnitsTable.clear();	
+		try {
+			this._spxUnitsTable.clear();
 			this._spxPackageTable.clear();
 			this._spxModuleTable.clear();
 			this._spxSymbolTable.clear();
-			
+
 			logMessage(SRC + ".clearAll", "SymbolTable is cleaned successfully. ");
-		}catch(IOException ex)
-		{
-			logMessage(SRC + ".clearAll", "Exception occured . "+ ex);
+		} catch (IOException ex) {
+			logMessage(SRC + ".clearAll", "Exception occured . " + ex);
 			throw ex;
 		}
-		
-		
 	}
 
 	/* Logs Message if {@code DEBUG} is turned on.

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Mon Oct 17 19:19:40 2011	(r23476)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -119,7 +119,7 @@
 		
 		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
 		
-		IStrategoAppl term = (IStrategoAppl)table.get(resUri);
+		IStrategoAppl term = (IStrategoAppl)table.get(this, resUri);
 		
 		if ( term != null)
 			retTerm = forceImploderAttachment(term, resUri);
@@ -158,10 +158,9 @@
 
 		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
 	
-		logMessage("Storing following compilation unit. Path : [" 
-					+  spxCompilationUnitPath +"]");
+		logMessage("Storing following compilation unit. Path : ["+  spxCompilationUnitPath +"]");
 		
-		table.define(resUri, astTerm);
+		table.define(this, resUri, astTerm);
 	}
 
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Mon Oct 17 19:19:40 2011	(r23476)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.File;
+import java.io.IOException;
 import java.net.URI;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
@@ -8,7 +9,9 @@
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.spxlang.index.data.IdentifiableConstruct;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.attachments.TermAttachmentSerializer;
 
 public final class Utils {
 	private Utils() {
@@ -96,4 +99,20 @@
 	    }
 	    return cacheDir.delete();
 	}
+	
+	public static String serializeToString(TermAttachmentSerializer serializer , IStrategoTerm t) throws IOException{
+		IStrategoTerm annotatedTerm = serializer.toAnnotations(t);
+		
+		StringBuilder sb = new StringBuilder();
+		annotatedTerm.writeAsString(sb ,Integer.MAX_VALUE);
+		
+		return sb.toString();
+	}
+	
+	public static IStrategoTerm deserializeToTerm(ITermFactory fac , TermAttachmentSerializer serializer, String termString){
+		IStrategoTerm deserializedAtermWithAnnotation = fac.parseFromString(termString);
+		IStrategoTerm deserializedAterm  = serializer.fromAnnotations(deserializedAtermWithAnnotation, true);
+		
+		return deserializedAterm;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java	Mon Oct 17 19:19:40 2011	(r23476)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -18,13 +18,11 @@
 	private int _version;
 	private final URI _absPath;
 	
-	public SpxCompilationUnitInfo(URI absPath,long recourceId)
-	{
+	public SpxCompilationUnitInfo(URI absPath,long recourceId){
 		this (0 , absPath , recourceId);
 	}
 
-	public SpxCompilationUnitInfo( int versionNo, URI absPath,long recourceId)
-	{
+	public SpxCompilationUnitInfo( int versionNo, URI absPath,long recourceId){
 		_recId = recourceId;
 		_version = versionNo;
 		_absPath = absPath;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Mon Oct 17 19:19:40 2011	(r23476)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Tue Oct 18 09:49:11 2011	(r23477)
@@ -8,6 +8,7 @@
 import java.util.UUID;
 
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.index.Utils;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -26,13 +27,11 @@
 	
 	public SpxSymbol (IStrategoTerm id , String type){ 
 		this(id) ;
-
 		_type = type;
 	}
 	
 	public String type() {
 		assert _type != null : "Non-Null _type is expected. ";
-		
 		return _type; 
 	}
 
@@ -42,21 +41,13 @@
 	
 	void setType(String type) {	_type = type; }
 
-	IStrategoTerm deserializedDataToTerm(ITermFactory fac , TermAttachmentSerializer serializer) { 
-		IStrategoTerm deserializedAtermWithAnnotation = fac.parseFromString(_data);
-		IStrategoTerm deserializedAterm  = serializer.fromAnnotations(deserializedAtermWithAnnotation, true);
-		
-		return deserializedAterm;
+	IStrategoTerm deserializedDataToTerm(ITermFactory fac , TermAttachmentSerializer serializer){ 
+		return Utils.deserializeToTerm(fac, serializer, _data);
 	}
 	
 	void serializerDataString(TermAttachmentSerializer serializer, IStrategoTerm data) throws IOException { 
-		IStrategoTerm annotatedTerm = serializer.toAnnotations(data);
-		
-		StringBuilder sb = new StringBuilder();
-		annotatedTerm.writeAsString(sb ,Integer.MAX_VALUE);
-		
-		_data = sb.toString(); 
-	}
+		_data  = Utils.serializeToString(serializer , data);
+}
 	
 	public IStrategoConstructor typeCons(SpxSemanticIndexFacade facade){
 		return facade.getConstructor( type() , 0);

From tobivollebregt at gmail.com  Tue Oct 18 14:17:09 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 18 Oct 2011 12:17:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23478 -
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang
Message-ID: <20111018121709.ACDEE7F8076@mx1.tudelft.nl>

Author: tvo
Date: Tue Oct 18 12:17:09 2011
New Revision: 23478
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23478&sc=1

Log:
Fix optimized flatten-list not failing on non-lists.

(Could cause infinite loops in constructs like topdown(try(flatten-list)),
as the first non-list node would keep getting wrapped in single-element lists...)

Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_flatten_list_0_0.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_flatten_list_0_0.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_flatten_list_0_0.java	Tue Oct 18 09:49:11 2011	(r23477)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_flatten_list_0_0.java	Tue Oct 18 12:17:09 2011	(r23478)
@@ -29,6 +29,10 @@
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
 
+		if (current.getTermType() != IStrategoTerm.LIST) {
+			return null;
+		}
+
 		ArrayList<IStrategoTerm> newList = new ArrayList<IStrategoTerm>();
 		ArrayList<IStrategoTerm> stack = new ArrayList<IStrategoTerm>();
 

From tobivollebregt at gmail.com  Tue Oct 18 14:29:12 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 18 Oct 2011 12:29:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23479 -
	strategoxt/trunk/stratego-libraries/lib/tests
Message-ID: <20111018122912.CD4CACC086@mx4.tudelft.nl>

Author: tvo
Date: Tue Oct 18 12:29:12 2011
New Revision: 23479
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23479&sc=1

Log:
Negative test case for flatten-list

Modified:
   strategoxt/trunk/stratego-libraries/lib/tests/list-misc-test.str

Modified: strategoxt/trunk/stratego-libraries/lib/tests/list-misc-test.str
==============================================================================
--- strategoxt/trunk/stratego-libraries/lib/tests/list-misc-test.str	Tue Oct 18 12:17:09 2011	(r23478)
+++ strategoxt/trunk/stratego-libraries/lib/tests/list-misc-test.str	Tue Oct 18 12:29:12 2011	(r23479)
@@ -72,10 +72,13 @@
       , !["a", "b", "c"]
       , !["a", "b", "c"]
       )
-    ; apply-test(!"flatten-test 5", flatten-list
+    ; apply-test(!"flatten-test 6", flatten-list
       , !["a", [("b", [1, 2]), "d"], "c"]
       , !["a", ("b", [1, 2]), "d", "c"]
       )
+    ; apply-and-fail(!"flatten-test 7", flatten-list
+      , !"a"
+      )
 
   take-test = id
     ; apply-test(!"take 3 of a list of more than 3 elements"

From M.A.Akhter at student.tudelft.nl  Tue Oct 18 16:05:32 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 18 Oct 2011 14:05:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23480 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang/index spxlang/index/data spxlang/index/tests
Message-ID: <20111018140532.C4F69108C016@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Oct 18 14:05:32 2011
New Revision: 23480
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23480&sc=1

Log:
origin tracking is working finally

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Tue Oct 18 12:29:12 2011	(r23479)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Tue Oct 18 14:05:32 2011	(r23480)
@@ -36,15 +36,15 @@
 		add(new SPX_index_package_declaration(spxIndex));
 		add(new SPX_index_language_descriptor(spxIndex));
 		add(new SPX_index_module_definition(spxIndex));
+		add(new SPX_index_import_references(spxIndex));
 		
 		add(new SPX_index_get_language_descriptor(spxIndex));
 		add(new SPX_index_get_package_declaration(spxIndex));
 		add(new SPX_index_get_module_declaration(spxIndex));
 		add(new SPX_index_get_module_definition(spxIndex));
-		
 		add(new SPX_index_get_module_declarations_of(spxIndex));
 		add(new SPX_index_get_package_declarations_of(spxIndex));
-		add(new SPX_index_import_references(spxIndex));
+		
 		add(new SPX_index_get_imports(spxIndex));
 		
 		//Primitives related to symbol-table - i.e. symbol definition and resolving

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Tue Oct 18 12:29:12 2011	(r23479)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Tue Oct 18 14:05:32 2011	(r23480)
@@ -17,6 +17,7 @@
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SpxModuleLookupTable implements ICompilationUnitRecordListener, IPackageDeclarationRecordListener{
 	
@@ -31,8 +32,8 @@
 	/* FIXME : Using separate HashMap due to the consideration of converting them store map
 	 * to load module AST lazily. 
 	 */
-	private final PrimaryHashMap<IStrategoList, IStrategoAppl> _moduleDefinition; 
-	private final PrimaryHashMap<IStrategoList, IStrategoAppl> _moduleAnalyzedDefinition;
+	private final PrimaryHashMap<IStrategoList, String> _moduleDefinition; 
+	private final PrimaryHashMap<IStrategoList, String> _moduleAnalyzedDefinition;
 	
 	private final SecondaryHashMap <String , IStrategoList , ModuleDeclaration> _moduleByFileAbsPath;
 	private final SecondaryHashMap<IStrategoList, IStrategoList,ModuleDeclaration> _moduleByPackageId;
@@ -56,37 +57,45 @@
 		_moduleLookupMap = manager.loadHashMap(tableName+ "._lookupModuleMap.idx");
 
 		// read-only secondary view of the the lookup table . 
-		_moduleByFileAbsPath = _moduleLookupMap.secondaryHashMap(tableName+ "._moduleByFileAbsPath.idx", 
-				new SecondaryKeyExtractor<String, IStrategoList, ModuleDeclaration>() {
-
-			/**
-			 * Returns the Secondary key of the lookup table. 
-			 *   
-			 * @param key current primary key 
-			 * @param value value to be mapped using primary key
-			 * @return secondary key to map the value with . 
-			 */
-			public String extractSecondaryKey(IStrategoList key, ModuleDeclaration value) {
-				return value.resourceAbsPath;
-			}
-		}
-		);
-
-		_moduleByPackageId = _moduleLookupMap.secondaryHashMap(tableName+ "._moduleByPackageId.idx", 
-				new SecondaryKeyExtractor<IStrategoList, IStrategoList, ModuleDeclaration>() {
+		_moduleByFileAbsPath = _moduleLookupMap
+				.secondaryHashMap(
+						tableName + "._moduleByFileAbsPath.idx",
+						new SecondaryKeyExtractor<String, IStrategoList, ModuleDeclaration>() {
+
+							/**
+							 * Returns the Secondary key of the lookup table.
+							 * 
+							 * @param key
+							 *            current primary key
+							 * @param value
+							 *            value to be mapped using primary key
+							 * @return secondary key to map the value with .
+							 */
+							public String extractSecondaryKey(
+									IStrategoList key, ModuleDeclaration value) {
+								return value.resourceAbsPath;
+							}
+						});
 
-			/**
-			 * Returns the Secondary key of the lookup table. 
-			 *   
-			 * @param key current primary key 
-			 * @param value value to be mapped using primary key
-			 * @return secondary key to map the value with . 
-			 */
-			public IStrategoList extractSecondaryKey(IStrategoList key, ModuleDeclaration value) {
-				return value.enclosingPackageID;
-			}
-		}
-		);
+		_moduleByPackageId = _moduleLookupMap
+				.secondaryHashMap(
+						tableName + "._moduleByPackageId.idx",
+						new SecondaryKeyExtractor<IStrategoList, IStrategoList, ModuleDeclaration>() {
+
+							/**
+							 * Returns the Secondary key of the lookup table.
+							 * 
+							 * @param key
+							 *            current primary key
+							 * @param value
+							 *            value to be mapped using primary key
+							 * @return secondary key to map the value with .
+							 */
+							public IStrategoList extractSecondaryKey(
+									IStrategoList key, ModuleDeclaration value) {
+								return value.enclosingPackageID;
+							}
+						});
 
 		this._moduleDefinition = manager.loadHashMap(tableName+ "._moduleDefinition.idx");
 		this._moduleAnalyzedDefinition = manager.loadHashMap(tableName+ "._moduleAnalyzedDefinition.idx");
@@ -139,6 +148,33 @@
 		
 		return _moduleLookupMap.size();
 	}
+
+	
+	/**
+	 * Defines Module Definition in the SymbolTable
+	 * 
+	 * @param f
+	 *            an instance of {@link SpxSemanticIndexFacade}
+	 * @param decl
+	 * @param originalModuleDefinition
+	 * @param analyzedModuleDefinition
+	 * @throws IOException
+	 */
+	public void define(SpxSemanticIndexFacade f, ModuleDeclaration decl,
+			IStrategoAppl originalModuleDefinition,
+			IStrategoAppl analyzedModuleDefinition) throws IOException {
+		
+		if(!this._moduleLookupMap.containsKey(decl.getId())){	
+			define(decl)
+				.addModuleDefinition(f, decl.getId(), originalModuleDefinition)
+				.addAnalyzedModuleDefinition(f, decl.getId(), analyzedModuleDefinition);
+		}else {
+			// module declaration is already in the map . Hence, 
+			// this operation will only updates analyzedModuleDefinition.
+			addAnalyzedModuleDefinition(f, decl.getId(), analyzedModuleDefinition);
+		}
+	}
+	
 	/**
 	 * Defines a new entry in this symbol table 
 	 * 
@@ -151,29 +187,13 @@
 		return this;
 	}
 	
-	/**
-	 * Defines Module Definition in the Symbole Table
-	 * @param decl
-	 * @param originalModuleDefinition
-	 * @param analyzedModuleDefinition
-	 */
-	public void define(ModuleDeclaration decl, IStrategoAppl originalModuleDefinition , IStrategoAppl analyzedModuleDefinition)
-	{
-		this.define(decl)
-			.addModuleDefinition(decl.getId(), originalModuleDefinition)
-			.addAnalyzedModuleDefinition(decl.getId(), analyzedModuleDefinition);
-	}
-	
-	private SpxModuleLookupTable addModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
-	{
-		_moduleDefinition.put(id, moduleDefinition);
-		
+	private SpxModuleLookupTable addModuleDefinition(SpxSemanticIndexFacade f, IStrategoList id, IStrategoAppl moduleDefinition) throws IOException{	
+		_moduleDefinition.put(id, Utils.serializeToString(f.getTermAttachmentSerializer(), moduleDefinition));
 		return this;
 	}
 	
-	private SpxModuleLookupTable addAnalyzedModuleDefinition(IStrategoList id, IStrategoAppl moduleDefinition)
-	{
-		_moduleAnalyzedDefinition.put(id, moduleDefinition);
+	private SpxModuleLookupTable addAnalyzedModuleDefinition(SpxSemanticIndexFacade f, IStrategoList id, IStrategoAppl moduleDefinition) throws IOException{
+		_moduleAnalyzedDefinition.put(id, Utils.serializeToString(f.getTermAttachmentSerializer(), moduleDefinition));
 		
 		return this;
 	}
@@ -215,24 +235,31 @@
 	
 	/**
 	 * Gets a module definition 
-	 * 
+	 * @param facade an instance of  {@links SpxSemanticIndexFacade}
 	 * @param id
+	 * 
 	 * @return
 	 */
-	public IStrategoAppl getModuleDefinition(IStrategoList id)
-	{
-		return this._moduleDefinition.get(id);
+	public IStrategoAppl getModuleDefinition(SpxSemanticIndexFacade facade, IStrategoList id){
+		IStrategoTerm deserializedTerm = Utils.deserializeToTerm(facade.getTermFactory(), facade.getTermAttachmentSerializer(), this._moduleDefinition.get(id));
+		assert deserializedTerm instanceof IStrategoAppl : "Expected IStrategoAppl" ;  
+		
+		return (IStrategoAppl)deserializedTerm;
 	}
 	
 	/**
 	 * Gets module definition (analyzed) 
-	 * 
+	 * @param f an instance of  {@links SpxSemanticIndexFacade}
 	 * @param id
+	 * 
 	 * @return
 	 */
-	public IStrategoAppl getAnalyzedModuleDefinition(IStrategoList id)
+	public IStrategoAppl getAnalyzedModuleDefinition(SpxSemanticIndexFacade f, IStrategoList id)
 	{
-		return this._moduleAnalyzedDefinition.get(id);
+		IStrategoTerm deserializedTerm = Utils.deserializeToTerm(f.getTermFactory(), f.getTermAttachmentSerializer(), this._moduleAnalyzedDefinition.get(id));
+		assert deserializedTerm instanceof IStrategoAppl : "Expected IStrategoAppl" ;  
+		
+		return (IStrategoAppl)deserializedTerm;
 	}
 	
 	/**
@@ -300,6 +327,13 @@
 		_manager.logMessage(SRC + ".removeModuleDeclarationByPackageId", "operation successful");
 	}
 	
+	/**
+	 * Returns the enclosing PackageID of the ModuleDeclaration 
+	 * with {@code moduleId} 
+	 * 
+	 * @param moduleId
+	 * @return {@link IStrategoList} 
+	 */
 	public IStrategoList packageId(IStrategoList moduleId)
 	{
 		if( containsModuleDeclaration(moduleId))
@@ -308,8 +342,7 @@
 		}	
 		return null;
 	}
-	
-	
+
 	/**
 	 * Removes all the module {@link ModuleDeclaration} located in the 
 	 * following URI : {@code absUri}
@@ -328,24 +361,20 @@
 			// the symbol table. 
 			for ( IStrategoList l: _moduleByFileAbsPath.get(absUri))
 				delList.add(l);
-
 		}
-
 		_manager.logMessage(SRC + ".removeModuleDeclarationsByUri", " Found  "+ delList + " to remove from the table.");
 		
 		// removing the package declaration from the lookup table.
 		for(Object o : delList.toArray())
 			remove((IStrategoList)o);
-		
+
 		_manager.logMessage(SRC + ".removeModuleDeclarationsByUri", " removed "+ delList + " to remove from the table.");
 	}
 	
-	
 	/**
 	 * Clears ModuleLookup Table
 	 */
-	public synchronized void clear()
-	{
+	public synchronized void clear() {
 		_manager.logMessage(SRC + ".clear", "Removing "+ this.size()+" entries ");
 		
 		Iterator<IStrategoList> keyIter = _moduleLookupMap.keySet().iterator();
@@ -355,7 +384,6 @@
 		}
 	}
 	
-	
 	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener() {
 		return new RecordListener<String, SpxCompilationUnitInfo>() {
 
@@ -393,7 +421,6 @@
 	public Iterable<ModuleDeclaration> getModuleDeclarations() {
 		return this._moduleLookupMap.values();
 	}
-
 	
 	public RecordListener<IStrategoList, PackageDeclaration> getPackageDeclarationRecordListener() {
 		return new RecordListener<IStrategoList, PackageDeclaration>(){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Oct 18 12:29:12 2011	(r23479)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Oct 18 14:05:32 2011	(r23480)
@@ -1,6 +1,8 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.applAt;
+import static org.spoofax.interpreter.core.Tools.stringAt;
 
 import java.io.File;
 import java.io.IOException;
@@ -169,17 +171,18 @@
 	 * 
 	 * @param moduleDefinition
 	 * @throws IllegalArgumentException
+	 * @throws IOException 
 	 */
-	public void indexModuleDefinition(IStrategoAppl moduleDefinition) throws IllegalArgumentException
+	public void indexModuleDefinition(IStrategoAppl moduleDefinition) throws IllegalArgumentException, IOException
 	{
 		verifyConstructor(moduleDefinition.getConstructor() , getModuleDefCon() , "Illegal Module Definition" );
 		
-		indexModuleDefinition(
-				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.ModuleTypedQNameIndex),
-				(IStrategoString) moduleDefinition.getSubterm(ModuleDeclaration.ModulePathIndex),
-				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.PackageTypedQNameIndex),
-				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.AstIndex),
-				(IStrategoAppl) moduleDefinition.getSubterm(ModuleDeclaration.AnalyzedAstIndex));
+		indexModuleDefinition( 
+				applAt(moduleDefinition ,  ModuleDeclaration.ModuleTypedQNameIndex),
+				stringAt(moduleDefinition, ModuleDeclaration.ModulePathIndex),
+				applAt(moduleDefinition ,  ModuleDeclaration.PackageTypedQNameIndex),
+				applAt(moduleDefinition ,  ModuleDeclaration.AstIndex),
+				applAt(moduleDefinition ,  ModuleDeclaration.AnalyzedAstIndex));
 	}
 
 	/**
@@ -190,10 +193,13 @@
 	 * @param packageQName
 	 * @param ast
 	 * @param analyzedAst
+	 * @throws IOException 
 	 */
 	public void indexModuleDefinition(IStrategoAppl moduleQName,
-			IStrategoString spxCompilationUnitPath, IStrategoAppl packageQName,
-			IStrategoAppl ast, IStrategoAppl analyzedAst) {
+			IStrategoString spxCompilationUnitPath, 
+			IStrategoAppl packageQName,
+			IStrategoAppl ast, 
+			IStrategoAppl analyzedAst) throws IOException {
 
 		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
 
@@ -202,15 +208,14 @@
 		
 		_persistenceManager.spxPackageTable().verifyPackageIDExists(packageId) ;
 		
-		moduleId = (IStrategoList) toCompactPositionInfo(moduleId);
-		packageId = (IStrategoList) toCompactPositionInfo(packageId);
+		moduleId = (IStrategoList) strip(moduleId);
+		packageId = (IStrategoList) strip(packageId);
 		ast = (IStrategoAppl) ast;
 		analyzedAst = (IStrategoAppl)analyzedAst;
 		spxCompilationUnitPath = (IStrategoString) spxCompilationUnitPath;
 
 		ModuleDeclaration mDecl = new ModuleDeclaration(toAbsulatePath(spxCompilationUnitPath), moduleId, packageId);
-		// updating/adding module to index 
-		table.define(mDecl , ast, analyzedAst);
+		table.define(this , mDecl, ast, analyzedAst);// updating/adding module to index 
 		
 		//Defining ModuleNamespace for Symbol-Table
 		defineNamespace(mDecl);
@@ -725,8 +730,8 @@
 		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
 		
 		IStrategoList qualifiedModuleId = ModuleDeclaration.getModuleId(this, moduleTypedQName);
-		IStrategoTerm moduleAterm =table.getModuleDefinition(qualifiedModuleId) ;
-		IStrategoTerm moduleAnnotatedAterm  = table.getAnalyzedModuleDefinition(qualifiedModuleId);
+		IStrategoTerm moduleAterm =table.getModuleDefinition(this, qualifiedModuleId) ;
+		IStrategoTerm moduleAnnotatedAterm  = table.getAnalyzedModuleDefinition(this, qualifiedModuleId);
 		
 		return new ModuleDefinition( decl , (IStrategoAppl)moduleAterm, (IStrategoAppl)moduleAnnotatedAterm).toTerm(this);
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Tue Oct 18 12:29:12 2011	(r23479)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Tue Oct 18 14:05:32 2011	(r23480)
@@ -101,6 +101,7 @@
 	}
 	
 	public static String serializeToString(TermAttachmentSerializer serializer , IStrategoTerm t) throws IOException{
+		if(t == null) return null;
 		IStrategoTerm annotatedTerm = serializer.toAnnotations(t);
 		
 		StringBuilder sb = new StringBuilder();
@@ -110,6 +111,8 @@
 	}
 	
 	public static IStrategoTerm deserializeToTerm(ITermFactory fac , TermAttachmentSerializer serializer, String termString){
+		if(termString == null) return null;
+		
 		IStrategoTerm deserializedAtermWithAnnotation = fac.parseFromString(termString);
 		IStrategoTerm deserializedAterm  = serializer.fromAnnotations(deserializedAtermWithAnnotation, true);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java	Tue Oct 18 12:29:12 2011	(r23479)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java	Tue Oct 18 14:05:32 2011	(r23480)
@@ -1,5 +1,6 @@
 package org.spoofax.interpreter.library.language.spxlang.index.data;
 
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -27,7 +28,7 @@
 	 * @param ast
 	 * @param analyzedAst
 	 */
-	public ModuleDefinition(String resourceAbsPath, IStrategoList id, IStrategoList packageID , IStrategoAppl ast , IStrategoAppl analyzedAst) {
+	private ModuleDefinition(String resourceAbsPath, IStrategoList id, IStrategoList packageID , IStrategoAppl ast , IStrategoAppl analyzedAst) {
 		super(resourceAbsPath, id, packageID);
 		
 		this.ast = ast;
@@ -46,25 +47,20 @@
 	 */
 	@Override
 	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
-
 		ITermFactory termFactory = idxFacade.getTermFactory();
-		
-		TermConverter termConverter = idxFacade.getTermConverter();
-		 
 		IStrategoTerm moduleDeclarationTerm = super.toTerm(idxFacade);
 		IStrategoConstructor moduleDefCons = idxFacade.getModuleDefCon();
 		
-		
 		IStrategoTerm retTerm = termFactory.makeAppl(
 				moduleDefCons,
 				moduleDeclarationTerm.getSubterm(0),
 				moduleDeclarationTerm.getSubterm(1),
 				moduleDeclarationTerm.getSubterm(2),
-				termConverter.convert( ast),
-				termConverter.convert( analyzedAst ) 
+				ast,
+				analyzedAst 
 				);
 		
-		return this.forceImploderAttachment(retTerm);
+		return retTerm;
 	}
 	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Tue Oct 18 12:29:12 2011	(r23479)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Tue Oct 18 14:05:32 2011	(r23480)
@@ -1,8 +1,6 @@
 package org.spoofax.interpreter.library.language.spxlang.index.data;
 
-import java.util.ArrayList;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Set;
 
 import org.spoofax.interpreter.library.language.spxlang.index.INamespace;
@@ -185,7 +183,6 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.INamespaceFactory#newInstances(org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
 	public Iterable<INamespace> newNamespaces(SpxSemanticIndexFacade idxFacade) {
-	
 		return PackageNamespace.createInstances(id , idxFacade);
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Tue Oct 18 12:29:12 2011	(r23479)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Tue Oct 18 14:05:32 2011	(r23480)
@@ -33,6 +33,7 @@
 	private ISpxPersistenceManager manager ;
 	private SpxPackageLookupTable symtable;
 	private SpxModuleLookupTable mSymTable;
+	private SpxSemanticIndexFacade facade; 
 	
 	final String absPathString1 = "c:/temp/test.spx" ;
 	final String absPathString2 = "c:/temp/test2.spx" ;
@@ -57,7 +58,7 @@
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
 		projectNameTerm = termFactory().makeString(_projectName);
-		SpxSemanticIndexFacade facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
+		facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
 		manager = new SpxPersistenceManager(facade);
 		
 		symtable = new SpxPackageLookupTable(manager);
@@ -363,18 +364,18 @@
 		
 		
 		lookupTable.define(
+					facade , 
 					m1 , 
-					(IStrategoAppl)getModuleDefinition(f, "m1") , 
-					(IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
+					(IStrategoAppl)getModuleDefinition(f, "m1"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
 		
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
 		ModuleDeclaration m2 = new ModuleDeclaration(absPathString1, idm2,pId2 );
 		
 		lookupTable.define(
+				facade , 
 				m2 , 
-				(IStrategoAppl)getModuleDefinition(f, "m2") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
+				(IStrategoAppl)getModuleDefinition(f, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
 	
 		
@@ -382,9 +383,9 @@
 		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
 
 		lookupTable.define(
+				facade , 
 				m3 , 
-				(IStrategoAppl)getModuleDefinition(f, "m3") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
+				(IStrategoAppl)getModuleDefinition(f, "m3"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
 			);
 	
 		assertEquals(3, lookupTable.size());
@@ -413,18 +414,18 @@
 		
 		
 		lookupTable.define(
+					facade , 
 					m1 , 
-					(IStrategoAppl)getModuleDefinition(f, "m1") , 
-					(IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
+					(IStrategoAppl)getModuleDefinition(f, "m1"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
 		
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
 		ModuleDeclaration m2 = new ModuleDeclaration(absPathString1, idm2,pId2 );
 		
 		lookupTable.define(
+				facade , 
 				m2 , 
-				(IStrategoAppl)getModuleDefinition(f, "m2") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
+				(IStrategoAppl)getModuleDefinition(f, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
 	
 		
@@ -432,9 +433,9 @@
 		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
 
 		lookupTable.define(
+				facade , 
 				m3 , 
-				(IStrategoAppl)getModuleDefinition(f, "m3") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
+				(IStrategoAppl)getModuleDefinition(f, "m3"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
 			);
 	
 		assertEquals(3, lookupTable.size());
@@ -462,18 +463,18 @@
 		
 		
 		lookupTable.define(
+					facade, 
 					m1 , 
-					(IStrategoAppl)getModuleDefinition(f, "m1") , 
-					(IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
+					(IStrategoAppl)getModuleDefinition(f, "m1"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
 		
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
 		ModuleDeclaration m2 = new ModuleDeclaration(absPathString2, idm2,pId2 );
 		
 		lookupTable.define(
+				facade , 
 				m2 , 
-				(IStrategoAppl)getModuleDefinition(f, "m2") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
+				(IStrategoAppl)getModuleDefinition(f, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
 	
 		
@@ -481,9 +482,9 @@
 		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
 
 		lookupTable.define(
+				facade , 
 				m3 , 
-				(IStrategoAppl)getModuleDefinition(f, "m3") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
+				(IStrategoAppl)getModuleDefinition(f, "m3"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
 			);
 	
 		assertEquals(3, lookupTable.size());
@@ -512,18 +513,18 @@
 		
 		
 		lookupTable.define(
+					facade , 
 					m1 , 
-					(IStrategoAppl)getModuleDefinition(f, "m1") , 
-					(IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
+					(IStrategoAppl)getModuleDefinition(f, "m1"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
 		
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
 		ModuleDeclaration m2 = new ModuleDeclaration(absPathString2, idm2,pId2 );
 		
 		lookupTable.define(
+				facade , 
 				m2 , 
-				(IStrategoAppl)getModuleDefinition(f, "m2") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
+				(IStrategoAppl)getModuleDefinition(f, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
 	
 		
@@ -531,9 +532,9 @@
 		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
 
 		lookupTable.define(
+				facade , 
 				m3 , 
-				(IStrategoAppl)getModuleDefinition(f, "m3") , 
-				(IStrategoAppl)getAnalyzedModuleDefinition(f , "m3")
+				(IStrategoAppl)getModuleDefinition(f, "m3"), (IStrategoAppl)getAnalyzedModuleDefinition(f , "m3")
 			);
 	
 		assertEquals(3, lookupTable.size());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Oct 18 12:29:12 2011	(r23479)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Oct 18 14:05:32 2011	(r23480)
@@ -999,7 +999,7 @@
 	
 	private IStrategoTerm getId(String idString) { return termFactory().parseFromString(idString);}
 	
-	private ModuleDeclaration indexTestModuleDefs( String moduleName , String packageQName , String filePath) throws SpxSymbolTableException
+	private ModuleDeclaration indexTestModuleDefs( String moduleName , String packageQName , String filePath) throws SpxSymbolTableException, IOException
 	{
 		String moduleQName = packageQName  + ", \""+ moduleName  +"\"" ;
 		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageQName+"]))");

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Tue Oct 18 12:29:12 2011	(r23479)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Tue Oct 18 14:05:32 2011	(r23480)
@@ -51,7 +51,7 @@
 	@Override 
 	protected void tearDown() throws Exception { _facade.close(); }
 	
-	public void testGetModuleDeclarationsByFileUri()
+	public void testGetModuleDeclarationsByFileUri() throws IOException
 	{
 		String packageName1 =  	"\"languages\", \"entitylang\"" ;
 
@@ -82,7 +82,7 @@
 		_facade.persistenceManager().spxSymbolTable().getAllNamespaces();
 	}
 	
-	public void testGetModuleDeclarationsByPackageId() throws SpxSymbolTableException
+	public void testGetModuleDeclarationsByPackageId() throws SpxSymbolTableException, IOException
 	{
 		String packageName1 =  	"\"languages\", \"entitylang\"" ;
 		
@@ -107,7 +107,7 @@
 		assertEquals(1, actuals.getSubtermCount());
 	}
 
-	public void testGetModuleDeclarationsWithUnknownPackageID() throws SpxSymbolTableException
+	public void testGetModuleDeclarationsWithUnknownPackageID() throws SpxSymbolTableException, IOException
 	{
 		String packageName1 =  	"\"languages\", \"entitylang\"" ;
 		indexTestPackageDecl(packageName1, absPathString1);
@@ -156,7 +156,7 @@
 		
 	}
 	
-	public void testIndexingImportReferences() throws SpxSymbolTableException
+	public void testIndexingImportReferences() throws SpxSymbolTableException, IOException
 	{
 
 		String packageName1 =  	"\"languages\", \"entitylang1\"" ;
@@ -198,7 +198,7 @@
 		assertEquals(1, decl.getImortedToPackageReferences().size());
 	}
 	
-	public void testIndexModuleDeclaration() throws IllegalArgumentException, SpxSymbolTableException 
+	public void testIndexModuleDeclaration() throws IllegalArgumentException, SpxSymbolTableException, IOException 
 	{
 		ITermFactory f = termFactory() ;
 
@@ -254,7 +254,7 @@
 		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
 	}
 	
-	public void testIndexremovePackageDeclaredinMultipleFiles() throws SpxSymbolTableException 
+	public void testIndexremovePackageDeclaredinMultipleFiles() throws SpxSymbolTableException, IOException 
 	{
 		ITermFactory f = termFactory() ;
 		
@@ -333,7 +333,7 @@
 		return f.parseFromString(text);
 	}
 	
-	public void testUnknownPackageNameThrowsIllegalArgumentException() 
+	public void testUnknownPackageNameThrowsIllegalArgumentException() throws IOException 
 	{
 		ITermFactory f = termFactory() ;
 
@@ -352,7 +352,7 @@
 		}
 	}
 	
-	private IStrategoAppl indexTestModuleDefs( String moduleName , String packageQName , String filePath)
+	private IStrategoAppl indexTestModuleDefs( String moduleName , String packageQName , String filePath) throws IOException
 	{
 		String moduleQName = packageQName  + ", \""+ moduleName  +"\"" ;
 		IStrategoAppl pQnameAppl = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+packageQName+"]))");

From L.C.L.Kats at tudelft.nl  Tue Oct 18 17:21:21 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Oct 2011 15:21:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23481 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/editor org.strategoxt.imp.testing/trans
Message-ID: <20111018152121.B99A2CC105@mx4.tudelft.nl>

Author: LennartKats
Date: Tue Oct 18 15:21:21 2011
New Revision: 23481
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23481&sc=1

Log:
added support for basic regular expressions as test conditions

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Oct 18 14:05:32 2011	(r23480)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Oct 18 15:21:21 2011	(r23481)
@@ -19,7 +19,7 @@
            
          }
       ]] build generate-java fails
-  ]]] 1 warning
+  ]]] 1 warning /expected/
   
 
 test Refactoring

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv	Tue Oct 18 14:05:32 2011	(r23480)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv	Tue Oct 18 15:21:21 2011	(r23481)
@@ -11,8 +11,8 @@
   // Fences (used for matching,            
   // inserting, indenting brackets):       
   fences                                 : [ ]
-                                           [[ ]
-                                           [[[ ]
+                                           // [[ ]]
+                                           // [[[ ]]]
                                            { }
                                            ( )
                                            

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 14:05:32 2011	(r23480)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 15:21:21 2011	(r23481)
@@ -42,7 +42,10 @@
   check-note = fail
   
   check-error:
-    Test(_, d, _, [_, _ | _]) -> (d, "Specify only one success condition)") // maybe in the future...
+    Test(_, d, _, c*) -> (d, "Can only combine success conditions with /regular expression/ conditions")
+    where
+      c'* := <filter(not(?RegexPattern(_)))> c*;
+      <gt> (<length> c'*, 1) 
   
   check-error:
     TestEmpty(_, d) -> (<id>, "Empty test case")
@@ -168,7 +171,7 @@
       not(!messages => ([], [], _))
   
   is-semantic-failure-allowed =
-    Fails() + ?Errors(_) + ?Warnings(_) + ?CompleteTo(_, _)
+    Fails() + ?Errors(_) + ?Warnings(_) + ?CompleteTo(_, _) + ?RegexPattern(_)
 
   check-expectation(|ast, selections, messages) :
     Errors(n) -> $[[n] errors expected: [<grab-errors> messages]]
@@ -187,12 +190,45 @@
     where
       !messages => ([_ | _], _, _)
 
-  check-expectation(|ast, selections, messages) :
-    Stratego(_) -> $[Not implemented: [<write-to-string>]]
+  check-error :
+    Stratego(_) -> (<id>, $[Not implemented: [<write-to-string>]])
 
-  check-expectation(|ast, selections, messages) :
-    VarDecl(_, _) -> $[Not implemented: [<write-to-string>]]
-    
+  check-error :
+    VarDecl(_, _) -> (<id>, $[Not implemented: [<write-to-string>]])
+  
+  check-error :
+    RegexPattern(r) -> (r, $[Full regular expression support not implemented])
+    where
+      not(simple-regex-to-string)
+  
+  check-expectation(|ast, selection, messages) :
+    RegexPattern(r) -> $[Messages do not match "[r']": [<grab-messages> messages]]
+    where
+      r' := <simple-regex-to-string>;
+      not(<oncetd(match-message(|r'))> messages)
+  
+  match-message(|r):
+    (term, message) -> <id>
+    where
+      debug(!0);
+      message' := <try(concat-strings)> message;
+      debug(!1);
+      <debug(!2)> r;
+      <is-substring(!r)> message';
+      debug(!3)
+  
+  simple-regex-to-string:
+    RegexPattern(SingleBranch(Pieces(p*))) -> string
+    where
+      p'*    := <map(simple-regex-atom-to-string)> p*;
+      string := <concat-strings> p'*
+  
+  simple-regex-atom-to-string:
+    SingleAtom(AtomLiteral(s)) -> s
+  
+  simple-regex-atom-to-string:
+    SingleAtom(AtomCharacter(Quoted(s))) -> s
+  
   is-parse-only-test =
     SuccessParsing + FailsParsing
 

From L.C.L.Kats at tudelft.nl  Tue Oct 18 17:23:24 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Oct 2011 15:23:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23482 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111018152324.1EB4E2B8033@mx2.tudelft.nl>

Author: LennartKats
Date: Tue Oct 18 15:23:23 2011
New Revision: 23482
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23482&sc=1

Log:
cleanup

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 15:21:21 2011	(r23481)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 15:23:23 2011	(r23482)
@@ -210,12 +210,8 @@
   match-message(|r):
     (term, message) -> <id>
     where
-      debug(!0);
       message' := <try(concat-strings)> message;
-      debug(!1);
-      <debug(!2)> r;
-      <is-substring(!r)> message';
-      debug(!3)
+      <is-substring(!r)> message'
   
   simple-regex-to-string:
     RegexPattern(SingleBranch(Pieces(p*))) -> string

From L.C.L.Kats at tudelft.nl  Tue Oct 18 17:27:11 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Oct 2011 15:27:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23483 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/trans
Message-ID: <20111018152711.3E88F7F804D@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Oct 18 15:27:10 2011
New Revision: 23483
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23483&sc=1

Log:
case insensitive matching seems more sensible

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Oct 18 15:23:23 2011	(r23482)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Oct 18 15:27:10 2011	(r23483)
@@ -19,7 +19,7 @@
            
          }
       ]] build generate-java fails
-  ]]] 1 warning /expected/
+  ]]] 1 warning /eXpected/
   
 
 test Refactoring

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 15:23:23 2011	(r23482)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 15:27:10 2011	(r23483)
@@ -204,13 +204,14 @@
   check-expectation(|ast, selection, messages) :
     RegexPattern(r) -> $[Messages do not match "[r']": [<grab-messages> messages]]
     where
-      r' := <simple-regex-to-string>;
-      not(<oncetd(match-message(|r'))> messages)
+      r'  := <simple-regex-to-string>;
+      r'' := <lower-case> r';
+      not(<oncetd(match-message(|r''))> messages)
   
   match-message(|r):
     (term, message) -> <id>
     where
-      message' := <try(concat-strings)> message;
+      message' := <lower-case> <try(concat-strings)> message;
       <is-substring(!r)> message'
   
   simple-regex-to-string:

From L.C.L.Kats at tudelft.nl  Tue Oct 18 20:30:40 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Oct 2011 18:30:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23484 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/java/org/strategoxt/imp/testing/test
	spoofax-imp/trunk/org.strategoxt.imp.testing.test/test
	spoofax-imp/tr...
Message-ID: <20111018183040.D2F31108C01D@mx3.tudelft.nl>

Author: LennartKats
Date: Tue Oct 18 18:30:38 2011
New Revision: 23484
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23484&sc=1

Log:
- "run" tests now use a simple tuple-less interface, unlike "build" tests
- fixed bracket insertion for test cases: since [] was allowed in test descriptions, entering [ again would be seen as editing a lexical, so a second closing bracket would not be inserted
- ...

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/java/org/strategoxt/imp/testing/test/TestingTestingParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITokenizer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/java/org/strategoxt/imp/testing/test/TestingTestingParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/java/org/strategoxt/imp/testing/test/TestingTestingParseController.java	Tue Oct 18 15:27:10 2011	(r23483)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/java/org/strategoxt/imp/testing/test/TestingTestingParseController.java	Tue Oct 18 18:30:38 2011	(r23484)
@@ -1,101 +1,7 @@
 package org.strategoxt.imp.testing.test;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-import org.eclipse.core.runtime.Path;
-import org.eclipse.imp.parser.IParseController;
-import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
-import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
 
 public class TestingTestingParseController extends TestingTestingParseControllerGenerated 
 { 
-	  public static final String LANGUAGE = new String("TestingTesting");
-
-	  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
-
-	  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
-
-	  private static volatile Descriptor descriptor;
-
-	  private static Throwable notLoadingCause;
-
-	  public static synchronized Descriptor getDescriptor()
-	  { 
-	    if(notLoadingCause != null)
-	      throw new RuntimeException(notLoadingCause);
-	    if(descriptor == null)
-	      createDescriptor();
-	    return descriptor;
-	  }
-
-	  private static void createDescriptor()
-	  { 
-	    try
-	    { 
-	      boolean filesystem = false;
-	      InputStream descriptorStream = TestingTestingParseController.class.getResourceAsStream(DESCRIPTOR);
-	      if (descriptorStream == null && new File("./" + DESCRIPTOR).exists()) {
-	    	  descriptorStream = new FileInputStream("./" + DESCRIPTOR);
-	    	  filesystem = true;
-	      }
-	      InputStream table = TestingTestingParseController.class.getResourceAsStream(TABLE);
-	      if (table == null && new File("./" + TABLE).exists()) {
-	    	  table = new FileInputStream("./" + TABLE);
-	    	  filesystem = true;
-	      }
-	      if(descriptorStream == null)
-	        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
-	      if(table == null)
-	        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
-	      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
-	      descriptor.setAttachmentProvider(TestingTestingParseController.class);
-	    }
-	    catch(BadDescriptorException exc)
-	    { 
-	      notLoadingCause = exc;
-	      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
-	      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
-	    }
-	    catch(IOException exc)
-	    { 
-	      notLoadingCause = exc;
-	      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
-	      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
-	    }
-	  }
-
-	  private static String getPluginLocation()
-	  { 
-	    return TestingTestingParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
-	  }
-
-	  @Override public IParseController getWrapped()
-	  { 
-	    if(!isInitialized())
-	    { 
-	      if(notLoadingCause != null)
-	        throw new RuntimeException(notLoadingCause);
-	      try
-	      { 
-	        initialize(this, getDescriptor().getLanguage());
-	      }
-	      catch(BadDescriptorException exc)
-	      { 
-	        notLoadingCause = exc;
-	        throw new RuntimeException(exc);
-	      }
-	    }
-	    return super.getWrapped();
-	  }
 
-	  @Override protected void setNotLoadingCause(Throwable value)
-	  { 
-	    notLoadingCause = value;
-	    super.setNotLoadingCause(value);
-	  }
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Oct 18 15:27:10 2011	(r23483)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Oct 18 18:30:38 2011	(r23484)
@@ -32,4 +32,18 @@
          }
       ]] build generate-java fails
   ]]] 1 warning
-  
\ No newline at end of file
+
+test Simple runner [[[
+  module x
+  language TestingTesting
+  test runner [[
+    module y
+  ]] run debug to Module("y", [])
+]]]
+
+test Square brackets not allowed in test description [[[
+  module x
+  language TestingTesting
+  test the [] is bad!!
+]]] parse fails
+

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java	Tue Oct 18 15:27:10 2011	(r23483)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java	Tue Oct 18 18:30:38 2011	(r23484)
@@ -40,6 +40,7 @@
 	public Retokenizer(Tokenizer oldTokenizer) {
 		this.oldTokenizer = oldTokenizer;
 		newTokenizer = new Tokenizer(oldTokenizer.getInput(), oldTokenizer.getFilename(), null);
+		newTokenizer.setSyntaxCorrect(oldTokenizer.isSyntaxCorrect());
 	}
 	
 	/*

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Oct 18 15:27:10 2011	(r23483)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Oct 18 18:30:38 2011	(r23484)
@@ -227,10 +227,9 @@
 
   lexical syntax
 
-    (~[\n\[\"]|EOLQuote1|EOLQuote2)* -> EOLString
-    [\"]                             -> EOLQuote1
-    [\[]                             -> EOLQuote2
-
+    (~[\n\[\"]|EOLQuote1)* -> EOLString
+    [\"]                   -> EOLQuote1
+    
   lexical syntax
 
     (~[\[\]]  | Bracket1 | CBracket1)*                         -> InputChars2
@@ -269,7 +268,6 @@
   lexical restrictions
     EOLString -/- ~[\n\[\"]
     EOLQuote1 -/- [\"]
-    EOLQuote2 -/- [\[]
     
     %% InputChars2 -/- ~[\[\]]
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Tue Oct 18 15:27:10 2011	(r23483)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Tue Oct 18 18:30:38 2011	(r23484)
@@ -16,9 +16,6 @@
   OVERRIDE_INPUT(s) = Prim("\"SSL_EXT_overrideinput\"", [NoAnnoList(Str(s))])
 
 rules
- 
-  spt-desugar:
-    Run(x, arg, p) -> Build(x, arg, p)
 
   check-expectation(|ast, selections, messages) :
     c at Build(builder, arg, expected) ->
@@ -38,9 +35,16 @@
       selected := <resolve-selection(|selections) <+ !ast> Numbered("1");
       input    := <get-service-input-term> selected;
       if !arg => Argument(arg') then
+        // Store builder argument
         plugin-strategy-evaluate(id |<Language>, OVERRIDE_INPUT(arg'))
       end;
-      output := <execute-service(|input)> builder
+      if !condition => Run(_, _, _) then
+        output := <execute-service(|selected); not(Fails())> builder
+      <+
+        output := <execute-service(|input)> builder
+      else
+        output := <execute-service(|input)> builder
+      end
     where
       error := <check-builder> (output, input, expected, condition)
 
@@ -91,7 +95,7 @@
   fetch-builder-result(|input, output):
     Build(_, _, _) -> result
     with
-      !output => (<is-string>, result)
+      !output => (<is-string>, result) // remove filename
     <+
       !output => result
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 15:27:10 2011	(r23483)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 18:30:38 2011	(r23484)
@@ -133,7 +133,7 @@
       !messages => Error(details)
 
   check-expectation(|ast, selections, messages) :
-    FailsParsing() -> $[Failure expected]
+    FailsParsing() -> $[Parse failure expected: [<write-to-string> ast]]
     where
       not(!ast => FailsParsing());
       not(!ast => error(_, _))

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java	Tue Oct 18 15:27:10 2011	(r23483)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java	Tue Oct 18 18:30:38 2011	(r23484)
@@ -41,7 +41,7 @@
 		return isSyntaxCorrect;
 	}
 	
-	protected void setSyntaxCorrect(boolean isSyntaxCorrect)  {
+	public void setSyntaxCorrect(boolean isSyntaxCorrect)  {
 		this.isSyntaxCorrect = isSyntaxCorrect;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITokenizer.java	Tue Oct 18 15:27:10 2011	(r23483)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ITokenizer.java	Tue Oct 18 18:30:38 2011	(r23484)
@@ -89,6 +89,8 @@
 	void markPossibleSyntaxError(LabelInfo label, IToken firstToken, int endOffset, ProductionAttributeReader prodReader);
 	
 	boolean isSyntaxCorrect();
+	
+	void setSyntaxCorrect(boolean syntaxCorrect);
 
 	String toString(IToken left, IToken right);
 

From L.C.L.Kats at tudelft.nl  Tue Oct 18 20:53:01 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Oct 2011 18:53:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23485 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: editor syntax trans
Message-ID: <20111018185301.A47177F8037@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Oct 18 18:53:00 2011
New Revision: 23485
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23485&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Tue Oct 18 18:30:38 2011	(r23484)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Tue Oct 18 18:53:00 2011	(r23485)
@@ -6,9 +6,6 @@
                                          
   completion proposer                  : editor-complete
   
-  completion template : TestSuite =
-    "module" <tests> "\n\nlanguage " <Language> "\n\ntest [[ " <test> " ]]" (blank)
-  
   completion template : Header =
     "language " <Language>
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Oct 18 18:30:38 2011	(r23484)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Oct 18 18:53:00 2011	(r23485)
@@ -111,6 +111,7 @@
     "parse" "fails"      -> Result {cons("FailsParsing")}
     "succeeds"           -> Result {cons("Success")}
     "parse" "succeeds"   -> Result {cons("SuccessParsing")}
+    "parse"              -> Result {cons("SuccessParsing")}
 
     "file" PathName -> Input {cons("file")}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Tue Oct 18 18:30:38 2011	(r23484)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Tue Oct 18 18:53:00 2011	(r23485)
@@ -112,12 +112,14 @@
   
   editor-complete:
     (CompletionHelper(_), _, _, path, _) ->
-    [[$( module (<base-filename; remove-extension> path) 
+    [[$(module (<base-filename; remove-extension> path) 
        
-       language (<spt-get-default-language>)
+        language (<spt-get-default-language <+ !"Language">)
        
-       test First test
-         [[), " ", "test", " ]]\n\n"
+        test First test [[
+        ), "  ", "test", $(
+       ]]
+       )
     ]]
 	
   editor-complete:

From L.C.L.Kats at tudelft.nl  Tue Oct 18 21:27:33 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Oct 2011 19:27:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23486 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/syntax org.strategoxt.imp.testing/trans
Message-ID: <20111018192733.42080108C03B@mx3.tudelft.nl>

Author: LennartKats
Date: Tue Oct 18 19:27:32 2011
New Revision: 23486
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23486&sc=1

Log:
tweaks to parsing tests

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Oct 18 18:53:00 2011	(r23485)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Oct 18 19:27:32 2011	(r23486)
@@ -47,3 +47,20 @@
   test the [] is bad!!
 ]]] parse fails
 
+test Simple parse test [[[
+  module x
+  language TestingTesting
+  test parse [[
+    module x
+  ]] parse succeeds
+]]]
+
+test Simple parse test [[[
+  module x
+  language TestingTesting
+  test parse [[
+    no module
+  ]] parse to Module(_, _)
+]]] 1 warning
+
+

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Oct 18 18:53:00 2011	(r23485)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Oct 18 19:27:32 2011	(r23486)
@@ -104,13 +104,13 @@
     "parse" "to" ATerm   -> Result {cons("pattern")}
     "parse" "to" Output   -> Result {cons("ParseOutput")}
 
-    "fails" "parsing"    -> Result {cons("FailsParsing"), deprecated("Use 'parse fails' instead")}
-    "succeeds" "parsing" -> Result {cons("SuccessParsing"), deprecated("Use 'parse succeeds' instead")}
+    %%"fails" "parsing"    -> Result {cons("FailsParsing"), deprecated("Use 'parse fails' instead")}
+    %%"succeeds" "parsing" -> Result {cons("SuccessParsing"), deprecated("Use 'parse succeeds' instead")}
 
     %%"fails"              -> Result {cons("Fails")}
     "parse" "fails"      -> Result {cons("FailsParsing")}
-    "succeeds"           -> Result {cons("Success")}
-    "parse" "succeeds"   -> Result {cons("SuccessParsing")}
+    "succeeds"           -> Result {cons("Success"), deprecated("Use an empty condition instead")}
+    "parse" "succeeds"   -> Result {cons("SuccessParsing"), prefer}
     "parse"              -> Result {cons("SuccessParsing")}
 
     "file" PathName -> Input {cons("file")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 18:53:00 2011	(r23485)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Oct 18 19:27:32 2011	(r23486)
@@ -227,7 +227,7 @@
     SingleAtom(AtomCharacter(Quoted(s))) -> s
   
   is-parse-only-test =
-    SuccessParsing + FailsParsing
+    SuccessParsing + FailsParsing + ?pattern(_)
 
   grab-messages:
     (errors, warnings, notes) -> <write-to-string> // TODO: make nice string?

From M.A.Akhter at student.tudelft.nl  Tue Oct 18 23:58:55 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 18 Oct 2011 21:58:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23487 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. tests
Message-ID: <20111018215855.B75022B804E@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Oct 18 21:58:55 2011
New Revision: 23487
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23487&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Tue Oct 18 19:27:32 2011	(r23486)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Tue Oct 18 21:58:55 2011	(r23487)
@@ -28,19 +28,20 @@
 public class SpxPrimarySymbolTable implements INamespaceResolver , IPackageDeclarationRecordListener,IModuleDeclarationRecordListener {
 	private final String SRC = this.getClass().getSimpleName();
 	
-	private final ISpxPersistenceManager _manager; // Persistence Manager
+	private final SpxSemanticIndexFacade _facade;
 	private final PrimaryMap <NamespaceUri,INamespace> namespaces;
 	private final SecondaryHashMap <IStrategoList,NamespaceUri,INamespace> namespaceByStrategoId;
 	private transient INamespace _activeNamespace ;
 	
-	//TODO implement remove package and remove module event handlers
+	public ISpxPersistenceManager persistenceManager(){ return _facade.persistenceManager(); }
 	public SpxPrimarySymbolTable (SpxSemanticIndexFacade facade) throws SecurityException, IOException{
 		assert facade != null  : "SpxSemanticIndexFacade  is expected to non-null" ;
-		_manager = facade.persistenceManager();
 
-		String tableName = _manager.getIndexId() + "primary_symbol_table.idx";
+		_facade = facade;
+
+		String tableName = facade.persistenceManager().getIndexId() + "primary_symbol_table.idx";
 		
-		namespaces  = _manager.loadHashMap(tableName + "namespaces.idx");
+		namespaces  = facade.persistenceManager().loadHashMap(tableName + "namespaces.idx");
 		namespaceByStrategoId = namespaces.secondaryHashMap(tableName+ ".namespaceByStrategoId.idx", 
 				new SecondaryKeyExtractor<IStrategoList,NamespaceUri,INamespace>(){
 					public IStrategoList extractSecondaryKey(NamespaceUri k,INamespace v) {
@@ -90,14 +91,20 @@
 	}
 	
 	public INamespace removeNamespace(IStrategoList id){
-		INamespace resolveNamespace  = resolveNamespace(id) ;
+		INamespace nsToRemove  = resolveNamespace(id) ;
 		
-		if(resolveNamespace != null){
-			_manager.logMessage(SRC, "removenamespace | removing following namespace : " + resolveNamespace);
-			this.namespaces.remove(resolveNamespace.namespaceUri());
+		if(nsToRemove != null){
+			// Removing the internal namespace associate with the PackageNamespace
+			if(nsToRemove instanceof PackageNamespace){
+				NamespaceUri internalNamespaceUri = PackageNamespace.packageInternalNamespace(nsToRemove.namespaceUri(), _facade);
+				this.namespaces.remove(internalNamespaceUri);	
+			}
+			
+			persistenceManager().logMessage(SRC, "removenamespace | removing following namespace : " + nsToRemove);
+			this.namespaces.remove(nsToRemove.namespaceUri());
 		}
 		
-		return resolveNamespace;
+		return nsToRemove;
 	}
 	
 	public NamespaceUri getNamespaceUri(IStrategoList id) {
@@ -129,21 +136,21 @@
 	
 	public Set<NamespaceUri> getAllNamespaces() { return namespaces.keySet() ; }
 
-	public void defineSymbol(SpxSemanticIndexFacade facade, IStrategoList namespaceId ,  SpxSymbolTableEntry symTableEntry) throws SpxSymbolTableException {
-		_manager.logMessage(SRC, "defineSymbol | defining symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symTableEntry.key + " Value : "+ symTableEntry.value);	
+	public void defineSymbol(IStrategoList namespaceId, SpxSymbolTableEntry symTableEntry) throws SpxSymbolTableException {
+		persistenceManager().logMessage(SRC, "defineSymbol | defining symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symTableEntry.key + " Value : "+ symTableEntry.value);	
 		ensureActiveNamespaceLoaded(namespaceId);
 	
-		_activeNamespace = _activeNamespace.define(symTableEntry, facade); 
+		_activeNamespace = _activeNamespace.define(symTableEntry, _facade); 
 	}
 	
-	public Set<SpxSymbol> undefineSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
-	    _manager.logMessage(SRC, "undefineSymbol | undefineSymbol symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
+	public Set<SpxSymbol> undefineSymbols(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType) throws SpxSymbolTableException {
+		persistenceManager().logMessage(SRC, "undefineSymbol | undefineSymbol symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
 			
 	    ensureActiveNamespaceLoaded(namespaceId);
 		Set<SpxSymbol> undefinedSymbols = _activeNamespace.undefineSymbols(
-				symbolId, symbolType, spxSemanticIndexFacade);
+				symbolId, symbolType, _facade);
 	
-	    _manager.logMessage(SRC, "undefineSymbol | undefineSymbol Symbols : " + undefinedSymbols );
+		persistenceManager().logMessage(SRC, "undefineSymbol | undefineSymbol Symbols : " + undefinedSymbols );
 			
 	    return undefinedSymbols;
 	}
@@ -177,36 +184,36 @@
 		
 	}
 
-	public Set<SpxSymbol> resolveSymbols(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
-		_manager.logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + " of Type : "+ symbolType.getName());
+	public Set<SpxSymbol> resolveSymbols(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType) throws SpxSymbolTableException {
+		persistenceManager().logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + " of Type : "+ symbolType.getName());
 		
 		ensureActiveNamespaceLoaded(namespaceId);
-		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_activeNamespace.resolveAll(symbolId, symbolType ,spxSemanticIndexFacade);
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_activeNamespace.resolveAll(symbolId, symbolType ,_facade);
 		
-		_manager.logMessage(SRC, "resolveSymbols | Resolved Symbols : " + resolvedSymbols);
+		persistenceManager().logMessage(SRC, "resolveSymbols | Resolved Symbols : " + resolvedSymbols);
 		return resolvedSymbols;
 	}
 
-	public SpxSymbol resolveSymbol(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId, IStrategoTerm symbolId , IStrategoConstructor symbolType) throws SpxSymbolTableException {
-		_manager.logMessage(SRC, "resolveSymbol | Resolving symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
+	public SpxSymbol resolveSymbol(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType) throws SpxSymbolTableException {
+		persistenceManager().logMessage(SRC, "resolveSymbol | Resolving symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
 		
 		ensureActiveNamespaceLoaded(namespaceId);
 		
-		SpxSymbol  resolvedSymbol = _activeNamespace.resolve(symbolId, symbolType ,_activeNamespace ,spxSemanticIndexFacade);
+		SpxSymbol  resolvedSymbol = _activeNamespace.resolve(symbolId, symbolType ,_activeNamespace ,_facade);
 		
-		_manager.logMessage(SRC, "resolveSymbol | Resolved Symbol : " + resolvedSymbol );
+		persistenceManager().logMessage(SRC, "resolveSymbol | Resolved Symbol : " + resolvedSymbol );
 		
 		return resolvedSymbol;
 	}
 	
-	public INamespace newAnonymousNamespace(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList enclosingNamespaceId) throws SpxSymbolTableException{
-		_manager.logMessage(SRC, "newAnonymousNamespace | Inserting a Anonymous Namespace in following enclosing namespace : "  + enclosingNamespaceId);
+	public INamespace newAnonymousNamespace(IStrategoList enclosingNamespaceId) throws SpxSymbolTableException{
+		persistenceManager().logMessage(SRC, "newAnonymousNamespace | Inserting a Anonymous Namespace in following enclosing namespace : "  + enclosingNamespaceId);
 		ensureActiveNamespaceLoaded(enclosingNamespaceId);
 		
-		INamespace localNamespace = LocalNamespace.createInstance(spxSemanticIndexFacade, _activeNamespace); 
+		INamespace localNamespace = LocalNamespace.createInstance(_facade, _activeNamespace); 
 		this.defineNamespace(localNamespace);
 	
-		_manager.logMessage(SRC, "newAnonymousNamespace | Folloiwng namesapce is created : "  + localNamespace);
+		persistenceManager().logMessage(SRC, "newAnonymousNamespace | Folloiwng namesapce is created : "  + localNamespace);
 		
 		this.commit();
 		_activeNamespace = localNamespace;
@@ -216,18 +223,17 @@
 
 	/**
 	 * Destroying Namespace with following namespaceId
-	 * 
-	 * @param spxSemanticIndexFacade
 	 * @param enclosingNamespaceId
+	 * 
 	 * @return
 	 * @throws SpxSymbolTableException
 	 */
-	public INamespace destroyNamespace(SpxSemanticIndexFacade spxSemanticIndexFacade, IStrategoList namespaceId) throws SpxSymbolTableException{
-		_manager.logMessage(SRC, "destroyNamespace | Removing the following namespace : "  + namespaceId);
+	public INamespace destroyNamespace(IStrategoList namespaceId) throws SpxSymbolTableException{
+		persistenceManager().logMessage(SRC, "destroyNamespace | Removing the following namespace : "  + namespaceId);
 		
 		INamespace ns = this.removeNamespace(namespaceId);
 		
-		_manager.logMessage(SRC, "destroyNamespace | Folloiwng namesapce is removed : "  + ns);
+		persistenceManager().logMessage(SRC, "destroyNamespace | Folloiwng namesapce is removed : "  + ns);
 		
 		return ns;
 	} 
@@ -278,7 +284,7 @@
 	}
 
 	public void clearGlobalNamespce(SpxSemanticIndexFacade spxSemanticIndexFacade) {
-		_manager.logMessage(SRC, "clearGlobalNamespce | Remove all the entries stored currently in GlobalNamespace" );
+		persistenceManager().logMessage(SRC, "clearGlobalNamespce | Remove all the entries stored currently in GlobalNamespace" );
 		
 		IStrategoList gnsId = GlobalNamespace.getGlobalNamespaceId(spxSemanticIndexFacade);
 		INamespace gns = this.resolveNamespace(gnsId); 
@@ -286,7 +292,7 @@
 			gns.clear();
 		
 		this.namespaces.put(gns.namespaceUri(), gns);
-		_manager.logMessage(SRC, "clearGlobalNamespce | Successfully removed all the entries." );
+		persistenceManager().logMessage(SRC, "clearGlobalNamespce | Successfully removed all the entries." );
 	}
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Oct 18 19:27:32 2011	(r23486)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Oct 18 21:58:55 2011	(r23487)
@@ -276,7 +276,7 @@
 		IStrategoList parentId = getNamespaceId(namespaceAppl);
 		
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
-		INamespace ns = symbolTable.newAnonymousNamespace(this, parentId);
+		INamespace ns = symbolTable.newAnonymousNamespace(parentId);
 		
 		return this.getTermFactory().makeAppl(getLocalNamespaceTypeCon(), ns.namespaceUri().id());
 	}
@@ -286,7 +286,7 @@
 		IStrategoList id = getNamespaceId(namespaceAppl);
 		
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
-		INamespace ns = symbolTable.destroyNamespace(this, id);
+		INamespace ns = symbolTable.destroyNamespace(id);
 		
 		return this.getTermFactory().makeAppl(getLocalNamespaceTypeCon(), ns.namespaceUri().id());
 	}
@@ -321,7 +321,7 @@
 					   		
 		
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
-		symbolTable.defineSymbol(this, getNamespaceId((IStrategoAppl)symbolDefinition.getSubterm(NAMESPACE_ID_INDEX)), entry);
+		symbolTable.defineSymbol(getNamespaceId((IStrategoAppl)symbolDefinition.getSubterm(NAMESPACE_ID_INDEX)), entry);
 	}
 	
 	
@@ -365,12 +365,9 @@
 	    IStrategoConstructor typeCtor = getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
 	    
 	    Set<SpxSymbol> spxSymbols = this.persistenceManager().spxSymbolTable()
-	    					.undefineSymbols(
-	    							this,
-	    							namespaceID, 
-	    							symbolID,
-	    							typeCtor
-    							);
+	    					.undefineSymbols(namespaceID, 
+	    									 symbolID,
+    										 typeCtor);
 	                        
 	    return SpxSymbol.toTerms(this, spxSymbols);
 	}  
@@ -399,7 +396,7 @@
 
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
 		
-		Set<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(this, namespaceID, strip(symbolId), symbolType);
+		Set<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(namespaceID, strip(symbolId), symbolType);
 		return resolvedSymbols;
 	}
 	
@@ -409,7 +406,7 @@
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
 		
-		SpxSymbol sym = symbolTable.resolveSymbol(this, namespaceID, strip(symbolId), symbolType);
+		SpxSymbol sym = symbolTable.resolveSymbol(namespaceID, strip(symbolId), symbolType);
 		if(sym != null)
 			resolvedSymbols.add(sym) ;
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Oct 18 19:27:32 2011	(r23486)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Oct 18 21:58:55 2011	(r23487)
@@ -839,8 +839,8 @@
 		Set<SpxSymbol> resolvedSymbols = tfacade
 				.persistenceManager()
 				.spxSymbolTable()
-				.undefineSymbols(tfacade, this.moduleDeclarationP1M1.getId(),
-						symbolId1, typeAppl1.getConstructor());
+				.undefineSymbols(this.moduleDeclarationP1M1.getId(), symbolId1,
+						typeAppl1.getConstructor());
 		
 		assertEquals(2, resolvedSymbols.size());
 		

From L.C.L.Kats at tudelft.nl  Wed Oct 19 10:23:45 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 08:23:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23488 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing
	or...
Message-ID: <20111019082345.E7DF82B800C@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 08:23:43 2011
New Revision: 23488
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23488&sc=1

Log:
reload/rerun tests after the tested language changes

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Tue Oct 18 21:58:55 2011	(r23487)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Wed Oct 19 08:23:43 2011	(r23488)
@@ -3,8 +3,6 @@
 import static org.spoofax.interpreter.core.Tools.termAt;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getFilename;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.collectTerms;
-import static org.strategoxt.imp.runtime.dynamicloading.TermReader.concatTermStrings;
-import static org.strategoxt.imp.runtime.dynamicloading.TermReader.cons;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.findTerm;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.termContents;
 
@@ -32,11 +30,9 @@
 import org.eclipse.imp.parser.IParseController;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
-import org.strategoxt.imp.runtime.services.IRefactoringMap;
 import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
 import org.strategoxt.lang.WeakValueHashMap;
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	Tue Oct 18 21:58:55 2011	(r23487)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	Wed Oct 19 08:23:43 2011	(r23488)
@@ -33,6 +33,8 @@
 	
 	public static final int REINIT_PARSE_DELAY = 100;
 	
+	private static String TESTING_LANGUAGE_NAME = "Spoofax-Testing";
+	
 	private EditorState lastEditor;
 	
 	private IPath filePath;
@@ -155,7 +157,9 @@
 	public void reinitialize(Descriptor newDescriptor) throws BadDescriptorException {
 		if (isInitialized() && getLastEditor() != null)
 			TokenColorerHelper.unregister(getLastEditor());
-		super.reinitialize(newDescriptor);
+		
+		if (!isTestingFragmentDescriptor(newDescriptor))
+			super.reinitialize(newDescriptor);
 		isReinitialized = true;
 		if (lastEditor != null) {
 			initializeEagerServices(getWrapped());
@@ -163,6 +167,24 @@
 		}
 	}
 
+	/**
+	 * Tests if the descriptor to reinitialize is
+	 * in fact a descriptor for a fragment language
+	 * in the testing language.
+	 */
+	private boolean isTestingFragmentDescriptor(Descriptor newDescriptor) {
+		try {
+			return getLanguage() != null
+				&& getLanguage().getName().equals(TESTING_LANGUAGE_NAME)
+				&& !newDescriptor.getLanguage().getName().equals(TESTING_LANGUAGE_NAME);
+		} catch (BadDescriptorException e) {
+			return false;
+		} catch (RuntimeException e) {
+			Environment.logWarning("Unexpected exception", e);
+			return false;
+		}
+	}
+
 	public Object parse(String input, IProgressMonitor monitor) {
 		IParseController parser = getWrapped();
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Tue Oct 18 21:58:55 2011	(r23487)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Wed Oct 19 08:23:43 2011	(r23488)
@@ -11,6 +11,7 @@
 import java.io.IOException;
 import java.util.Iterator;
 
+import org.eclipse.imp.language.ILanguageService;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -29,9 +30,12 @@
 import org.spoofax.terms.attachments.ParentAttachment;
 import org.spoofax.terms.attachments.ParentTermFactory;
 import org.strategoxt.imp.runtime.Debug;
+import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.IDynamicLanguageService;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
 
 public class SpoofaxTestingJSGLRI extends JSGLRI {
 	
@@ -160,7 +164,9 @@
 	private FragmentParser configureFragmentParser(IStrategoTerm root, Language language, FragmentParser fragmentParser) {
 		if (language == null) return null;
 		Descriptor descriptor = Environment.getDescriptor(language);
+		if (descriptor == null) return null;
 		fragmentParser.configure(descriptor, getController().getRelativePath(), getController().getProject(), root);
+		attachToLanguage(language);
 		return fragmentParser;
 	}
 
@@ -186,8 +192,24 @@
 	private Language getTargetLanguage(IStrategoTerm root) {
 		String languageName = getLanguageName(root, TARGET_LANGUAGE_1);
 		if (languageName == null) return null;
-		// TODO: fix this so it is capable of loading & registering languages
-		// (E.g., now you need to open a file in target language at least once before this works...)
 		return LanguageRegistry.findLanguage(languageName);
 	}
+	
+	/**
+	 * Add our language service to the descriptor of a fragment language,
+	 * so our service gets reinitialized once the fragment language changes.
+	 */
+	private void attachToLanguage(Language theirLanguage) {
+		SGLRParseController myController = getController();
+		EditorState myEditor = myController.getEditor();
+		if (myEditor == null)
+			return;
+		ILanguageService myWrapper = myEditor.getEditor().getParseController();
+		if (myWrapper instanceof IDynamicLanguageService) {
+			Descriptor theirDescriptor = Environment.getDescriptor(theirLanguage);
+			theirDescriptor.addActiveService((IDynamicLanguageService) myWrapper);
+		} else {
+			Environment.logException("SpoofaxTestingParseController wrapper is not IDynamicLanguageService");
+		}
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Oct 18 21:58:55 2011	(r23487)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Wed Oct 19 08:23:43 2011	(r23488)
@@ -104,8 +104,8 @@
     "parse" "to" ATerm   -> Result {cons("pattern")}
     "parse" "to" Output   -> Result {cons("ParseOutput")}
 
-    %%"fails" "parsing"    -> Result {cons("FailsParsing"), deprecated("Use 'parse fails' instead")}
-    %%"succeeds" "parsing" -> Result {cons("SuccessParsing"), deprecated("Use 'parse succeeds' instead")}
+    "fails" "parsing"    -> Result {cons("FailsParsing"), deprecated("Use 'parse fails' instead")}
+    "succeeds" "parsing" -> Result {cons("SuccessParsing"), deprecated("Use 'parse succeeds' instead")}
 
     %%"fails"              -> Result {cons("Fails")}
     "parse" "fails"      -> Result {cons("FailsParsing")}

From L.C.L.Kats at tudelft.nl  Wed Oct 19 11:39:55 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 09:39:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23489 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.externalToolBuilders
Message-ID: <20111019093955.807DB108C05D@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 09:39:54 2011
New Revision: 23489
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23489&sc=1

Log:
attempt to cleanup launch file

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.externalToolBuilders/Test build.main.xml.launch

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.externalToolBuilders/Test build.main.xml.launch
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.externalToolBuilders/Test build.main.xml.launch	Wed Oct 19 08:23:43 2011	(r23488)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.externalToolBuilders/Test build.main.xml.launch	Wed Oct 19 09:39:54 2011	(r23489)
@@ -2,6 +2,7 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Folding.ge
 nerated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/utils&quot; t
 ype=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/> <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
 <listEntry value="/org.strategoxt.imp.debug.stratego.transformer/build.main.xml"/>
 </listAttribute>
@@ -18,7 +19,8 @@
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.debug.stratego.transformer"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.debug.stratego.transformer/build.main.xml}"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.debug.stratego.transformer}"/>

From L.C.L.Kats at tudelft.nl  Wed Oct 19 11:42:30 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 09:42:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23490 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111019094230.B09D9CC0C4@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 09:42:30 2011
New Revision: 23490
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23490&sc=1

Log:
stricter ambiguity tests

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Oct 19 09:39:54 2011	(r23489)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Oct 19 09:42:30 2011	(r23490)
@@ -65,12 +65,12 @@
   check-warning:
     Test(_,description(d), i, expectations) -> (d, warnings)
     where
-      (input, selections) := <Test-get-input <+ !(FailsParsing(), [])>i
+      (input, selections) := <Test-get-input <+ !(FailsParsing(), [])> i
     ; if not(<?[_ | _]; all(is-parse-only-test)> expectations) then
         // TODO: set starting directory to project path using invoke-plugin-strategy
         plugin-strategy-invoke(|<Language>, "editor-init")
       ; input'    := (input, <InputFile>, <project-path>)
-      ; messages  := <plugin-strategy-invoke(|<Language>, <spt-get-observer>)> input'
+      ; messages  := <plugin-strategy-invoke(|<Language>, <spt-get-observer>) <+ !([], [], [])> input'
       ; messages' := <strip-and-record-analyzed-ast <+ reset-analyzed-ast> <try(?Some(<id>))> messages
       else
         messages' := ([], [], [])
@@ -139,9 +139,10 @@
       not(!ast => error(_, _))
 
   check-expectation(|ast, selections, messages) :
-    <not(?pattern(_))> -> $[Syntax is ambiguous: [<write-to-string> ast]]
+    c -> $[Syntax is ambiguous: [<write-to-string> ast]]
     where
-      <oncetd(?amb(_))> ast
+      <oncetd(?amb(_))> ast;
+      not(!c => pattern(_); oncetd(?unquoted("amb")))
 
   check-expectation(|ast, selections, messages) :
     pattern(p) -> $[Does not match pattern: [<write-to-string> ast]]

From L.C.L.Kats at tudelft.nl  Wed Oct 19 13:05:01 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 11:05:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23491 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
Message-ID: <20111019110502.002772B8003@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 11:05:01 2011
New Revision: 23491
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23491&sc=1

Log:
removed annoying printlines

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Wed Oct 19 09:42:30 2011	(r23490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Wed Oct 19 11:05:01 2011	(r23491)
@@ -249,17 +249,17 @@
 	// ILaunchListener interface
 	public void launchRemoved(ILaunch launch) {
 		// TODO Auto-generated method stub
-		System.out.println("Launch removed");
+		// System.out.println("Launch removed");
 	}
 	
 	public void launchAdded(ILaunch launch) {
 		// TODO Auto-generated method stub
-		System.out.println("Launch added");
+		// System.out.println("Launch added");
 	}
 	
 	public void launchChanged(ILaunch launch) {
 		// TODO Auto-generated method stub
-		System.out.println("Launch changed");
+		// System.out.println("Launch changed");
 	}
 
 	@Override

From L.C.L.Kats at tudelft.nl  Wed Oct 19 13:29:41 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 11:29:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23492 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111019112941.0912BCC130@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 11:29:39 2011
New Revision: 23492
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23492&sc=1

Log:
introduced a new file extension for edit scenarios: using the original extension pollutes the search results and breaks the batch test runner :(

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java	Wed Oct 19 11:05:01 2011	(r23491)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/EditScenarioCollector.java	Wed Oct 19 11:29:39 2011	(r23492)
@@ -50,7 +50,7 @@
 			for (int i = editNumberString.length(); i < 5; i++) {
 				editNumberString = "0" + editNumberString;
 			}
-			final String fileName = "edit_" + editNumberString + "_err_" + nrOfSyntaxErrors + "_dist_"+ editDistance + "_cursor_" + cursorLoc +"." + resource.getFileExtension();
+			final String fileName = "edit_" + editNumberString + "_err_" + nrOfSyntaxErrors + "_dist_"+ editDistance + "_cursor_" + cursorLoc +"." + resource.getFileExtension() + ".scn";
 			final IPath projectPath = resource.getProject().getLocation();
 			final IPath editSessionPath = projectPath.append("edit-scenarios").append(editSession);
 			try {

From L.C.L.Kats at tudelft.nl  Wed Oct 19 14:42:30 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 12:42:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23493 - in
	spoofax-contrib/calculang/branches/Calculang0Tested: . lib
	syntax tests trans
Message-ID: <20111019124230.B0FA8108C075@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 12:42:30 2011
New Revision: 23493
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23493&sc=1

Log:
working on a test-driven version of CalcuLang

Added:
   spoofax-contrib/calculang/branches/Calculang0Tested/
      - copied from r22939, spoofax-contrib/calculang/branches/Calculang0/
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt
Modified:
   spoofax-contrib/calculang/branches/Calculang0Tested/.project
   spoofax-contrib/calculang/branches/Calculang0Tested/build.generated.xml
   spoofax-contrib/calculang/branches/Calculang0Tested/lib/editor-common.generated.str
   spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf
   spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/.project	Sat May 21 17:08:16 2011	(r22939)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/.project	Wed Oct 19 12:42:30 2011	(r23493)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <projectDescription>
-      <name>Calculang0</name>
+      <name>Calculang0Tested</name>
       <comment></comment>
       <buildSpec>
 		<buildCommand>

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/build.generated.xml
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/build.generated.xml	Sat May 21 17:08:16 2011	(r22939)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/build.generated.xml	Wed Oct 19 12:42:30 2011	(r23493)
@@ -3,27 +3,42 @@
 <project name="build.generated">
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
-        <target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
+        <available file="${src-gen}/Calculang/strategies/Main.java" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la Calculang.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
-        <condition property="externaljarimport" value=":${externaljar}" else="">
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
         <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
             <isset property="eclipse.running"/>
         </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
         <condition property="metasdfmodule.available" value="1">
             <available file="${syntax}/${metasdfmodule}.sdf"/>
         </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
         <mkdir dir="${build}"/>
         <mkdir dir="${src-gen}"/>
         <mkdir dir="${dist}"/>
@@ -31,7 +46,7 @@
         <mkdir dir="${lib}"/>
         <mkdir dir="${syntax}"/>
 
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
             <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
@@ -41,9 +56,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
@@ -73,6 +90,13 @@
             <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
             <antcall target="check-classpath.helper"/>  
         </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
   
         <target name="check-classpath.helper" unless="check-classpath.available">
             <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
@@ -142,9 +166,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
@@ -223,6 +250,43 @@
             </java>
         </target>
         
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
+        
         <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
@@ -241,9 +305,10 @@
                 <arg value="org.strategoxt.tools.main-ppgen"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
                 <arg value="-o"/>
                 <arg value="${include}/${sdfmodule}.generated.pp.af"/>
-                <arg value="-t"/>
             </java>
             <java classname="run" failonerror="false">
                 <arg value="org.strategoxt.tools.main-pp-pp-table"/>
@@ -287,9 +352,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -309,11 +375,13 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
     
         <!-- Stratego to Java interpreter -->
         <target name="stratego.ctree" depends="rtg2sig">
@@ -321,17 +389,15 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
             <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
             <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${include}"/>
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
                 <param name="build.stratego.extraargs" value="-F"/>
-                <param name="build.stratego.extension" value="ctree"/>
-                <param name="build.stratego.compiler" value="strc"/>
             </antcall>
         </target>
     
@@ -341,7 +407,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -349,11 +415,10 @@
             <antcall target="copy-jar"/>
             <antcall target="stratego.jar.deletehelper"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
-                <param name="build.stratego.extraargs" value="-la java-front"/>
-                <param name="build.stratego.extension" value="java"/>
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
             </antcall>
-            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <!-- copy imported terms -->
             <copy todir="${build}/trans">
                 <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
@@ -376,7 +441,7 @@
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
                 <arg value="-o"/>
-                <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
+                <arg value="${build.stratego.outputfile}"/>
                 <arg value="-p"/>
                 <arg value="trans"/>
                 <arg value="--library"/>
@@ -385,12 +450,158 @@
                 <arg line="${build.stratego.extraargs}"/>
                 <arg line="${externaljarflags}"/>
                 <arg line="${externaldefimport}"/>
-                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot;  --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
             </java>
             <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- value determines which target will be executed.
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">
@@ -420,6 +631,7 @@
         
         <target name="clean" description="clean up">
             <delete dir="${build}"/>
-            <delete file="${src-gen}/trans/Main.java"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
         </target>
     </project>
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/lib/editor-common.generated.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/lib/editor-common.generated.str	Sat May 21 17:08:16 2011	(r22939)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/lib/editor-common.generated.str	Wed Oct 19 12:42:30 2011	(r23493)
@@ -100,6 +100,8 @@
   project-path = prim("SSL_EXT_projectpath")
   
   plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
 
   is-newer:
     (file1, file2) -> <id>
@@ -141,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.sdf	Sat May 21 17:08:16 2011	(r22939)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf	Wed Oct 19 12:42:30 2011	(r23493)
@@ -9,11 +9,7 @@
 
   context-free syntax
     
-    Exp -> Start {cons("Expr")}
+    Exp -> Start
     INT -> Exp {cons("Int")}
+
     %% ...
-    
-    
-    
-    
-    
\ No newline at end of file

Added: spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt	Wed Oct 19 12:42:30 2011	(r23493)
@@ -0,0 +1,47 @@
+module syntax 
+
+language Calculang
+
+test Constant [[
+    1
+]]
+
+test Add [[
+    1 + 2
+]] parse succeeds
+
+test Multiply [[
+  1 * 2
+]]
+
+test Abstract syntax (1) [[
+  1
+]]
+  parse to Int("1")
+
+test Abstract syntax (2) [[
+  1 * 2
+]]
+  parse to Mul(Int("1"), Int("2"))
+
+test Parentheses [[
+  (1 + 2)
+]]
+
+test Multiply and add [[
+  1 + 2 * 3
+]] parse to [[
+  1 + (2 * 3)
+]]
+
+test Add and multiply [[
+  1 * 2 + 3
+]] parse to [[
+  (1 * 2) + 3
+]]
+
+test Add and add [[
+  1 + 2 + 3
+]] parse to [[
+  (1 + 2) + 3
+]]

Added: spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt	Wed Oct 19 12:42:30 2011	(r23493)
@@ -0,0 +1,19 @@
+module eval 
+
+language Calculang
+
+test Constant [[
+  1
+]] run calc to "1"
+
+test Add [[
+  1 + 1
+]] run calc to "2"
+
+test Multiply [[
+  2 * 2
+]] run calc to "4"
+
+test Multiply and add [[
+  2 * 2 + 1
+]] run calc to "5"
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str	Sat May 21 17:08:16 2011	(r22939)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str	Wed Oct 19 12:42:30 2011	(r23493)
@@ -7,6 +7,6 @@
   check
 
 rules
-    
+
   // calc:
   //  Plus(Int(x), Int(y)) -> Int(<addS> (x, y))

From L.C.L.Kats at tudelft.nl  Wed Oct 19 14:44:25 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 12:44:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23494 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies
Message-ID: <20111019124425.C2510CC157@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 12:44:24 2011
New Revision: 23494
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23494&sc=1

Log:
print stack trace if builder/runner test fails

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Wed Oct 19 12:42:30 2011	(r23493)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Wed Oct 19 12:44:24 2011	(r23494)
@@ -33,7 +33,7 @@
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm languageName, IStrategoTerm strategy) {
 		ITermFactory factory = context.getFactory();
-		try {
+		try { 
 			String dir = ((EditorIOAgent) context.getIOAgent()).getProjectPath();
 			StrategoObserver observer = ObserverCache.getInstance().getObserver(asJavaString(languageName), dir);
 			observer.getRuntime().setCurrent(current);
@@ -45,12 +45,10 @@
 				return current;
 			} else {
 				Context foreignContext = observer.getRuntime().getCompiledContext();
-				// TODO: show only foreign part of stack trace (without using setTrace(), won't work here)
-				IStrategoString trace = factory.makeString("rewriting failed\n" + context.getTraceString()
-						+ (foreignContext != null ? foreignContext.getTraceString() : ""));
-				//if (printTrace.invoke(context, trace) != null)
-				//	observer.reportRewritingFailed();
-				return factory.makeAppl(factory.makeConstructor("Fail", 1), trace);
+				String trace = "rewriting failed\n"
+						+ (foreignContext != null ? foreignContext.getTraceString() : "");
+				observer.getRuntime().getIOAgent().printError(trace);
+				return factory.makeAppl(factory.makeConstructor("Fail", 1), factory.makeString(trace));
 			}
 		} catch (MissingStrategyException e) {
 			return factory.makeAppl(factory.makeConstructor("Error", 1),

From L.C.L.Kats at tudelft.nl  Wed Oct 19 17:43:34 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 15:43:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23495 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
Message-ID: <20111019154334.11D7CCC03E@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 15:43:33 2011
New Revision: 23495
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23495&sc=1

Log:
catch RuntimeException in Interpreter.evaluate()

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Wed Oct 19 12:44:24 2011	(r23494)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Wed Oct 19 15:43:33 2011	(r23495)
@@ -103,12 +103,17 @@
         StackTracer stackTracer = getContext().getStackTracer();
         stackTracer.push(def.getName());
         
-        boolean success = def.getBody().evaluate(context);
+        try {
+            boolean success = def.getBody().evaluate(context);
         
-        if (success) stackTracer.popOnSuccess();
-        else stackTracer.popOnFailure();
-        
-        return success;
+            if (success) stackTracer.popOnSuccess();
+            else stackTracer.popOnFailure();
+            
+            return success;
+        } catch (RuntimeException e) {
+            stackTracer.popOnExit(false);
+            throw new InterpreterException(e);
+        }
     }
 
     public SDefT lookupUncifiedSVar(String name) {

From L.C.L.Kats at tudelft.nl  Wed Oct 19 17:45:22 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 15:45:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23496 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
Message-ID: <20111019154522.33310CC13B@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 15:45:21 2011
New Revision: 23496
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23496&sc=1

Log:
catch InterpreterException in Interpreter.evaluate()

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Wed Oct 19 15:43:33 2011	(r23495)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Wed Oct 19 15:45:21 2011	(r23496)
@@ -110,9 +110,12 @@
             else stackTracer.popOnFailure();
             
             return success;
+        } catch (InterpreterException e) {
+            stackTracer.popOnExit(false);
+            throw new InterpreterException("Exception during evaluation", e);
         } catch (RuntimeException e) {
             stackTracer.popOnExit(false);
-            throw new InterpreterException(e);
+            throw new InterpreterException("Exception during evaluation", e);
         }
     }
 

From L.C.L.Kats at tudelft.nl  Wed Oct 19 21:11:07 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 19:11:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23497 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/syntax org.strategoxt.imp.testing/trans
Message-ID: <20111019191107.C077E2B800F@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 19:11:07 2011
New Revision: 23497
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23497&sc=1

Log:
fixed ambiguity in regex conditions and added support for spaces

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/RegExp.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Wed Oct 19 15:45:21 2011	(r23496)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Wed Oct 19 19:11:07 2011	(r23497)
@@ -19,7 +19,7 @@
            
          }
       ]] build generate-java fails
-  ]]] 1 warning /eXpected/
+  ]]] 1 warning /eXpected to/ /fail/
   
 
 test Refactoring

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/RegExp.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/RegExp.sdf	Wed Oct 19 15:45:21 2011	(r23496)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/RegExp.sdf	Wed Oct 19 19:11:07 2011	(r23497)
@@ -126,7 +126,7 @@
     [\&\]\-]                                      -> BracketLiteral {reject}
     [a-zA-Z0-9\!\#\%\'\,\:\;\<\=\>\@\_\`\~\&\]\-]
                                                   -> AtomLiteral
-    "/"                                           -> AtomLiteral 
+    %% "/"                                           -> AtomLiteral 
     [\}\)\|\[]                                    -> AtomLiteral {reject}
     
     [\\\|\$\*\+\?\.\{\}\(\)\&\]\-\[\^\!\#\%\'\,\:\;\<\=\>\@\_\`\~a-zA-Z0-9\t\n\r]*              

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Oct 19 15:45:21 2011	(r23496)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Oct 19 19:11:07 2011	(r23497)
@@ -175,7 +175,7 @@
     Fails() + ?Errors(_) + ?Warnings(_) + ?CompleteTo(_, _) + ?RegexPattern(_)
 
   check-expectation(|ast, selections, messages) :
-    Errors(n) -> $[[n] errors expected: [<grab-errors> messages]]
+    Errors(n) -> $[[n] error(s) expected: [<grab-errors> messages]]
     where
       !messages => (errors, _, _)
     ; not(<eq> (<length> errors, <string-to-int> n))
@@ -219,7 +219,8 @@
     RegexPattern(SingleBranch(Pieces(p*))) -> string
     where
       p'*    := <map(simple-regex-atom-to-string)> p*;
-      string := <concat-strings> p'*
+      // string := <concat-strings> p'*
+      string := <origin-text> p*
   
   simple-regex-atom-to-string:
     SingleAtom(AtomLiteral(s)) -> s

From L.C.L.Kats at tudelft.nl  Wed Oct 19 21:28:03 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 19 Oct 2011 19:28:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23498 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/trans
Message-ID: <20111019192803.A52CD2B800F@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Oct 19 19:28:01 2011
New Revision: 23498
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23498&sc=1

Log:
reference resolving without expectation pattern

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Wed Oct 19 19:11:07 2011	(r23497)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Wed Oct 19 19:28:01 2011	(r23498)
@@ -63,4 +63,11 @@
   ]] parse to Module(_, _)
 ]]] 1 warning
 
-
+test Simple reference resolving [[[
+  module x
+  language TestingTesting
+  test resolve me not [[
+    module x
+    [[ entity y {} ]]
+  ]] resolve
+]]] 1 warning

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Wed Oct 19 19:11:07 2011	(r23497)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Wed Oct 19 19:28:01 2011	(r23498)
@@ -39,6 +39,9 @@
     where
       n'        := <string-to-int> n;
       selection := <index(|n')> selections
+  
+  resolve-selection(|selections):
+    wildcard() -> wildcard()
 
   check-expectation(|ast, selections, messages) :
     ResolveTo(from, to) -> error

From tobivollebregt at gmail.com  Thu Oct 20 01:36:29 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 19 Oct 2011 23:36:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23499 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111019233629.962522B8015@mx2.tudelft.nl>

Author: tvo
Date: Wed Oct 19 23:36:29 2011
New Revision: 23499
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23499&sc=1

Log:
Run completion in a background job.

The background job re-triggers completion when it is finished.

This should allow editor-disambiguate to work during completion, and also
it should prevent deadlocks related to UI thread taking parse lock or
observer lock.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Oct 19 19:28:01 2011	(r23498)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Oct 19 23:36:29 2011	(r23499)
@@ -16,14 +16,22 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.ISchedulingRule;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.editor.ErrorProposal;
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.imp.services.IContentProposer;
+import org.eclipse.jface.text.ITextOperationTarget;
 import org.eclipse.jface.text.ITextViewer;
 import org.eclipse.jface.text.Position;
 import org.eclipse.jface.text.contentassist.ICompletionProposal;
+import org.eclipse.jface.text.source.ISourceViewer;
 import org.eclipse.swt.graphics.Point;
+import org.eclipse.ui.progress.UIJob;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -38,6 +46,7 @@
  * Content completion.
  *
  * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Tobi Vollebregt
  */
 public class ContentProposer implements IContentProposer {
 
@@ -55,6 +64,25 @@
 
 	private final ContentProposerParser parser; // mutable state
 
+	// ensures only one completion job runs at a time
+	private ISchedulingRule serializeJobs = new ISchedulingRule() {
+		public boolean isConflicting(ISchedulingRule arg0) {
+			return arg0 == serializeJobs;
+		}
+		public boolean contains(ISchedulingRule arg0) {
+			return arg0 == serializeJobs;
+		}
+	};
+
+	// protects results, lastDocument, and lastSelection
+	private Object lock = new Object();
+
+	private ICompletionProposal[] results;
+
+	private String lastDocument;
+
+	private Position lastSelection;
+
 	public ContentProposer(StrategoObserver observer, String completionFunction, Pattern identifierLexical, Set<Completion> templates) {
 		this.observer = observer;
 		this.completionFunction = completionFunction;
@@ -63,27 +91,105 @@
 		this.parser = new ContentProposerParser(identifierLexical);
 	}
 
-	public ICompletionProposal[] getContentProposals(IParseController controller, int offset, ITextViewer viewer) {
-		String document = viewer.getDocument().get();
-		Point selectedRange = viewer.getSelectedRange();
-		Position selection = new Position(selectedRange.x, selectedRange.y);
-
-		if (!identifierLexical.matcher(COMPLETION_TOKEN).matches())
-			return createErrorProposal("No proposals available - completion lexical must allow letters and numbers", offset);
-
-		boolean avoidReparse = completionFunction == null && templates.size() == 0;
-		IStrategoTerm ast = parser.parse(controller, selection, document, avoidReparse);
-		int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
-		Set<String> sorts = new AstSortInspector(ast).getSortsAt(
-				offset - prefixLength, offset + COMPLETION_TOKEN.length() - 1, parser.getCompletionNode());
-		if (parser.getCompletionNode() == null)
-			return getParseFailureProposals(controller, document, offset, sorts, viewer);
-
-		printCompletionTip(controller, sorts);
-
-		ICompletionProposal[] results =
-			computeAllCompletionProposals(invokeCompletionFunction(controller, sorts), document,
-					parser.getCompletionPrefix(), offset, sorts, viewer);
+	public ICompletionProposal[] getContentProposals(final IParseController controller, final int offset, final ITextViewer viewer) {
+		final String document = viewer.getDocument().get();
+		final Point selectedRange = viewer.getSelectedRange();
+		final Position selection = new Position(selectedRange.x, selectedRange.y);
+
+		synchronized(lock) {
+			// Any past result waiting?
+			if (results != null) {
+				ICompletionProposal[] tmpResults = results;
+				results = null;
+
+				// Return that result when still valid.
+				if (document.equals(lastDocument) && selection.equals(lastSelection)) {
+					return tmpResults;
+				}
+			}
+
+			// No => kick off a new calculation.
+			lastDocument = document;
+			lastSelection = selection;
+		}
+
+		if (!identifierLexical.matcher(COMPLETION_TOKEN).matches()) {
+			return createErrorProposal("No proposals available - completion lexical must allow letters and numbers", selection);
+		}
+
+		Job job = new Job("Computing content proposals") {
+			private boolean shouldBeCancelled(IProgressMonitor monitor) {
+				return monitor.isCanceled()
+						|| !document.equals(lastDocument)
+						|| !selection.equals(lastSelection);
+			}
+
+			@Override
+			public IStatus run(IProgressMonitor monitor) {
+				// A new request for proposals may have come in before we even started...
+				synchronized (lock) {
+					if (shouldBeCancelled(monitor))
+						return Status.CANCEL_STATUS;
+				}
+
+				// Parse, takes parse lock.
+				// parse might be skipped if ContentProposerParser figures it can reuse the previous AST
+				boolean avoidReparse = completionFunction == null && templates.size() == 0;
+				IStrategoTerm ast = parser.parse(controller, selection, document, avoidReparse);
+				int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
+				Set<String> sorts = new AstSortInspector(ast).getSortsAt(offset - prefixLength, offset + COMPLETION_TOKEN.length() - 1, parser.getCompletionNode());
+				IStrategoTerm completionNode = parser.getCompletionNode();
+
+				// Still continue?
+				synchronized (lock) {
+					if (shouldBeCancelled(monitor))
+						return Status.CANCEL_STATUS;
+				}
+
+				// Invoke completion strategy, takes observer lock. 
+				ICompletionProposal[] tmpResults;
+
+				if (completionNode == null) {
+					tmpResults = getParseFailureProposals(
+							controller, document, selection, sorts, viewer);
+				} else {
+					printCompletionTip(controller, sorts);
+
+					tmpResults = computeAllCompletionProposals(
+							invokeCompletionFunction(controller, completionNode, sorts), document,
+							parser.getCompletionPrefix(), selection, sorts, viewer);
+				}
+
+				// Store results only if still not cancelled.
+				synchronized(lock) {
+					if (shouldBeCancelled(monitor)) {
+						return Status.CANCEL_STATUS;
+					} else {
+						results = tmpResults;
+					}
+				}
+
+				// Re-trigger completion.
+				// Next invocation of getContentProposals will return the results.
+				UIJob job = new UIJob("Re-triggering content assist") {
+					@Override
+					public IStatus runInUIThread(IProgressMonitor monitor) {
+						((ITextOperationTarget) viewer).doOperation(ISourceViewer.CONTENTASSIST_PROPOSALS);
+						return Status.OK_STATUS;
+					}
+				};
+				job.setSystem(true);
+				job.setPriority(Job.INTERACTIVE);
+				job.schedule();
+
+				return Status.OK_STATUS;
+			}
+		};
+
+		job.setSystem(true);
+		job.setPriority(Job.INTERACTIVE);
+		job.setRule(serializeJobs);
+		job.schedule();
 
 		// TVO: there is an interface for this AFAIK
 		/* UNDONE: automatic proposal insertion
@@ -96,7 +202,7 @@
 		}
 		*/
 
-		return results;
+		return null;
 	}
 
 	public ICompletionProposal[] getTemplateProposalsForSort(String wantedSort, ITextViewer viewer) {
@@ -110,22 +216,22 @@
 	}
 
 	private ICompletionProposal[] getParseFailureProposals(IParseController controller,
-			String document, int offset, Set<String> sorts, ITextViewer viewer) {
+			String document, Position selection, Set<String> sorts, ITextViewer viewer) {
 
 		String startSymbol = Environment.getDescriptor(controller.getLanguage()).getStartSymbol();
 
 		if (startSymbol != null && document.trim().indexOf('\n') == -1) {
 			// Empty document completion
-			String prefix = parser.readPrefix(offset, document);
+			String prefix = parser.readPrefix(selection.getOffset(), document);
 			sorts.add(startSymbol);
 			printCompletionTip(controller, sorts);
-			ICompletionProposal[] proposals = computeAllCompletionProposals(Environment.getTermFactory().makeList(), document, prefix, offset, sorts, viewer);
+			ICompletionProposal[] proposals = computeAllCompletionProposals(Environment.getTermFactory().makeList(), document, prefix, selection, sorts, viewer);
 			if (proposals.length != 0) return proposals;
 		}
 		if (parser.isFatalSyntaxError()) {
-			return createErrorProposal("No proposals available - syntax errors", offset);
+			return createErrorProposal("No proposals available - syntax errors", selection);
 		} else {
-			return createErrorProposal("No proposals available - could not identify proposal context", offset);
+			return createErrorProposal("No proposals available - could not identify proposal context", selection);
 		}
 	}
 
@@ -164,69 +270,49 @@
 		parser.getParser().scheduleParserUpdate(0, false);
 	}
 
-	private IStrategoTerm invokeCompletionFunction(final IParseController controller, final Set<String> sorts) {
+	private IStrategoTerm invokeCompletionFunction(final IParseController controller, IStrategoTerm completionNode, final Set<String> sorts) {
 		if (completionFunction == null) {
-			return Environment.getTermFactory().makeList();
+			return TermFactory.EMPTY_LIST;
 		} else {
-			// FIXME: Using the environment lock for content completion
-			//        The problem here is really that content completion shouldn't
-			//        run in the main thread. It might be possible to spawn a new
-			//        thread and then invoke content completion again when it's done.
-			class Runner implements Runnable {
-				IStrategoTerm result;
-				public void run() {
-					observer.getLock().lock();
-					try {
-						CandidateSortsPrimitive.setCandidateSorts(sorts);
-						if (!observer.isUpdateScheduled()) {
-							observer.update(controller, new NullProgressMonitor());
-						}
-						IStrategoTerm input = observer.getInputBuilder().makeInputTerm(parser.getCompletionNode(), true, false);
-						result = observer.invokeSilent(completionFunction, input, getResource(parser.getCompletionNode()));
-						if (result == null) {
-							observer.reportRewritingFailed();
-							result = TermFactory.EMPTY_LIST;
-						}
-					} finally {
-						observer.getLock().unlock();
-					}
+			IStrategoTerm result;
+			observer.getLock().lock();
+			try {
+				CandidateSortsPrimitive.setCandidateSorts(sorts);
+				if (!observer.isUpdateScheduled()) {
+					observer.update(controller, new NullProgressMonitor());
+				}
+				IStrategoTerm input = observer.getInputBuilder().makeInputTerm(completionNode, true, false);
+				result = observer.invokeSilent(completionFunction, input, getResource(completionNode));
+				if (result == null) {
+					observer.reportRewritingFailed();
+					result = TermFactory.EMPTY_LIST;
 				}
+			} finally {
+				observer.getLock().unlock();
 			}
-			Runner runner = new Runner();
-
-			// UNDONE: causes deadlock with updater thread
-			//         (which acquires the display lock to display monitor updates)
-			//if (EditorState.isUIThread()) {
-			//	Display.getCurrent().syncExec(runner);
-			//} else {
-				runner.run();
-			//}
-			return runner.result;
+			return result;
 		}
 	}
 
-	private ICompletionProposal[] computeAllCompletionProposals(IStrategoTerm proposals, String document, String prefix, int offset, Set<String> sorts, ITextViewer viewer) {
+	private ICompletionProposal[] computeAllCompletionProposals(IStrategoTerm proposals, String document, String prefix, Position selection, Set<String> sorts, ITextViewer viewer) {
 
 		// dynamically computed blueprints, i.e. from semantic analysis
-		Set<Completion> results = toCompletions(proposals, document, prefix, offset, sorts);
+		Set<Completion> results = toCompletions(proposals, document, prefix, selection, sorts);
 
 		if (results == null) {
 			String error = "No proposals available - '" + completionFunction
 					+ "' did not return a ([proposal], description) list";
 
-			return createErrorProposal(error, offset);
+			return createErrorProposal(error, selection);
 		}
 
 		// static blueprints, i.e. keywords and templates
 		results.addAll(templates);
 
-		Point selection = viewer.getSelectedRange();
-		Position offsetPosition = new Position(selection.x, selection.y);
-
-		return filterCompletions(results, document, prefix, offsetPosition, sorts, viewer);
+		return filterCompletions(results, document, prefix, selection, sorts, viewer);
 	}
 
-	private Set<Completion> toCompletions(IStrategoTerm proposals, String document, String prefix, int offset, Set<String> sorts) {
+	private Set<Completion> toCompletions(IStrategoTerm proposals, String document, String prefix, Position selection, Set<String> sorts) {
 
 		if (proposals.getTermType() != LIST)
 			return null;
@@ -355,8 +441,8 @@
 		return true;
 	}
 
-	private ICompletionProposal[] createErrorProposal(String error, int offset) {
-		return new ICompletionProposal[] { new ErrorProposal(error, offset) };
+	private ICompletionProposal[] createErrorProposal(String error, Position selection) {
+		return new ICompletionProposal[] { new ErrorProposal(error, selection.getOffset()) };
 	}
 
 }

From tobivollebregt at gmail.com  Thu Oct 20 01:36:33 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 19 Oct 2011 23:36:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23500 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111019233633.92E677F8037@mx1.tudelft.nl>

Author: tvo
Date: Wed Oct 19 23:36:33 2011
New Revision: 23500
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23500&sc=1

Log:
If completion job finishes on time, use its results immediately.

* Waits up to 500 ms ("on time") for the job to finish.
* If the job finishes in time, everything should work as before.
* If the job didn't finish in time, it returns no results.
* When the job finally finishes, it re-triggers completion.
* Completion isn't re-triggered when there are no results.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Oct 19 23:36:29 2011	(r23499)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Oct 19 23:36:33 2011	(r23500)
@@ -14,6 +14,9 @@
 import java.util.HashSet;
 import java.util.Random;
 import java.util.Set;
+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
 
 import org.eclipse.core.runtime.IProgressMonitor;
@@ -83,6 +86,8 @@
 
 	private Position lastSelection;
 
+	private final BlockingQueue<ICompletionProposal[]> resultsQueue = new ArrayBlockingQueue<ICompletionProposal[]>(1);
+
 	public ContentProposer(StrategoObserver observer, String completionFunction, Pattern identifierLexical, Set<Completion> templates) {
 		this.observer = observer;
 		this.completionFunction = completionFunction;
@@ -119,6 +124,8 @@
 
 		Job job = new Job("Computing content proposals") {
 			private boolean shouldBeCancelled(IProgressMonitor monitor) {
+				// Job should be cancelled when lastDocument or lastSelection
+				// has been updated by a new call to getContentProposals.
 				return monitor.isCanceled()
 						|| !document.equals(lastDocument)
 						|| !selection.equals(lastSelection);
@@ -132,8 +139,8 @@
 						return Status.CANCEL_STATUS;
 				}
 
-				// Parse, takes parse lock.
-				// parse might be skipped if ContentProposerParser figures it can reuse the previous AST
+				// Parse (takes parse lock).
+				// Parse might be skipped if ContentProposerParser figures it can reuse the previous AST.
 				boolean avoidReparse = completionFunction == null && templates.size() == 0;
 				IStrategoTerm ast = parser.parse(controller, selection, document, avoidReparse);
 				int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
@@ -146,7 +153,7 @@
 						return Status.CANCEL_STATUS;
 				}
 
-				// Invoke completion strategy, takes observer lock. 
+				// Invoke completion strategy (takes observer lock).
 				ICompletionProposal[] tmpResults;
 
 				if (completionNode == null) {
@@ -160,6 +167,12 @@
 							parser.getCompletionPrefix(), selection, sorts, viewer);
 				}
 
+				// Offer results to getContentProposals, it might still be waiting.
+				// If the offer fails, don't re-trigger completion when we got no results.
+				if (resultsQueue.offer(tmpResults) || tmpResults == null || tmpResults.length == 0) {
+					return Status.OK_STATUS;
+				}
+
 				// Store results only if still not cancelled.
 				synchronized(lock) {
 					if (shouldBeCancelled(monitor)) {
@@ -189,20 +202,32 @@
 		job.setSystem(true);
 		job.setPriority(Job.INTERACTIVE);
 		job.setRule(serializeJobs);
+		resultsQueue.clear();
 		job.schedule();
 
-		// TVO: there is an interface for this AFAIK
-		/* UNDONE: automatic proposal insertion
-		if (results.length == 1 && results[0] instanceof SourceProposal) {
-			results[0].apply(viewer.getDocument());
-			Point selection = ((SourceProposal) results[0]).getSelection(viewer.getDocument());
-			viewer.setSelectedRange(selection.x, selection.y);
-			insertImmediatelyOnce = false;
+		try {
+			// Wait up to 500 ms, maybe the job finishes quickly.
+			// This greatly reduces "flickering" of the completion popup
+			// when it is open while typing text or moving the cursor.
+			ICompletionProposal[] tmpResults = resultsQueue.poll(500, TimeUnit.MILLISECONDS);
+
+			// Block the queue by putting a dummy element in it.
+			// This will signal the job to re-trigger content assist.
+			if (!resultsQueue.offer(new ICompletionProposal[0])) {
+				// If offer fails then the job finished between the poll and the offer.
+				tmpResults = resultsQueue.poll();
+			}
+
+			// If tmpResults == null, then popup goes away,
+			// will pop up again when the job finishes.
+
+			// Returning a "Be patient" ErrorProposal here doesn't work:
+			// the completion re-trigger is ignored if the popup is open...
+
+			return tmpResults;
+		} catch (InterruptedException e) {
 			return null;
 		}
-		*/
-
-		return null;
 	}
 
 	public ICompletionProposal[] getTemplateProposalsForSort(String wantedSort, ITextViewer viewer) {

From L.C.L.Kats at tudelft.nl  Thu Oct 20 10:20:11 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 20 Oct 2011 08:20:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23501 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing
	org.strategoxt.imp.testing/editor/java...
Message-ID: <20111020082011.1CA96CC179@mx4.tudelft.nl>

Author: LennartKats
Date: Thu Oct 20 08:20:09 2011
New Revision: 23501
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23501&sc=1

Log:
Spoofax/421: Testing language SelectionFetcher issues

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Wed Oct 19 23:36:33 2011	(r23500)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Thu Oct 20 08:20:09 2011	(r23501)
@@ -71,3 +71,13 @@
     [[ entity y {} ]]
   ]] resolve
 ]]] 1 warning
+
+
+test More reference resolving [[[
+  module x
+  language TestingTesting
+  test resolve me not [[
+    module x
+    [[entity x {}]] [[entity y {}]]
+  ]] resolve #3
+]]] 1 error /selection/

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java	Wed Oct 19 23:36:33 2011	(r23500)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java	Thu Oct 20 08:20:09 2011	(r23501)
@@ -12,6 +12,7 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
 import org.spoofax.terms.TermVisitor;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
@@ -28,14 +29,21 @@
 		final List<IStrategoTerm> results = new ArrayList<IStrategoTerm>();
 		new TermVisitor() {
 			IStrategoTerm unclosedChild;
+			IToken unclosedLeft;
+			IToken lastCloseQuote;
+			
 			public void preVisit(IStrategoTerm term) {
 				IToken left = getTokenBefore(getLeftToken(term));
 				IToken right = getTokenAfter(getRightToken(term));
-				if (isOpenQuote(left)) {
-					if (isCloseQuote(right)) {
-						results.add(term);
-					} else {
+				if (isOpenQuote(left) && isNoQuoteBetween(left, right)) {
+					if (isCloseQuote(right) && isNoQuoteBetween(left, right)) {
+						if (right != lastCloseQuote) {
+							lastCloseQuote = right;
+							results.add(term);
+						}
+					} else if (unclosedChild == null) {
 						unclosedChild = term;
+						unclosedLeft = left;
 					}
 				}
 			}
@@ -43,9 +51,9 @@
 			@Override
 			public void postVisit(IStrategoTerm term) {
 				IToken right = getTokenAfter(getRightToken(term));
-				if (isCloseQuote(right)) {
-					if (unclosedChild != null)
-						results.add(StrategoTermPath.findCommonAncestor(unclosedChild, term));
+				if (unclosedChild != null && isCloseQuote(right)
+						&& isNoQuoteBetween(unclosedLeft, right)) {
+					results.add(StrategoTermPath.findCommonAncestor(unclosedChild, term));
 					unclosedChild = null;
 				}
 			}
@@ -60,6 +68,17 @@
 	protected boolean isCloseQuote(IToken right) {
 		return right != null && right.getKind() == TK_ESCAPE_OPERATOR && !isQuoteOpenText(right.toString());
 	}
+	
+	protected boolean isNoQuoteBetween(IToken left, IToken right) {
+		ITokenizer tokenizer = left.getTokenizer();
+		for (int i = left.getIndex() + 1, end = right.getIndex(); i < end; i++) {
+			IToken token = tokenizer.getTokenAt(i);
+			if (token.getKind() == TK_ESCAPE_OPERATOR) {
+				return false;
+			}
+		}
+		return true;
+	}
 
 	protected boolean isQuoteOpenText(String contents) {
 		// HACK: inspect string contents to find out if it's an open or close quote

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Wed Oct 19 23:36:33 2011	(r23500)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Thu Oct 20 08:20:09 2011	(r23501)
@@ -6,7 +6,6 @@
 
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.imp.runtime.Environment;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Wed Oct 19 23:36:33 2011	(r23500)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Thu Oct 20 08:20:09 2011	(r23501)
@@ -90,7 +90,11 @@
   	  <?(Fails(),_)> expected
   
   fetch-builder-result(|input, output):
-    Run(_, _, _) -> output
+    Run(_, _, _) -> result
+    with
+      !output => (<is-string>, result) // remove filename
+    <+
+      !output => result
   
   fetch-builder-result(|input, output):
     Build(_, _, _) -> result

From tobivollebregt at gmail.com  Thu Oct 20 14:00:07 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 20 Oct 2011 12:00:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23502 -
	spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections
Message-ID: <20111020120007.D2EC4108C00D@mx3.tudelft.nl>

Author: tvo
Date: Thu Oct 20 12:00:07 2011
New Revision: 23502
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23502&sc=1

Log:
Branch of org.strategoxt.imp.runtime for calculating candidate sorts using CONTENTCOMPLETE injections.

Added:
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/   (props changed)
      - copied from r23501, spoofax-imp/trunk/org.strategoxt.imp.runtime/

From tobivollebregt at gmail.com  Thu Oct 20 14:13:00 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 20 Oct 2011 12:13:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23503 -
	spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services
Message-ID: <20111020121300.1DB1A108C00D@mx3.tudelft.nl>

Author: tvo
Date: Thu Oct 20 12:12:59 2011
New Revision: 23503
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23503&sc=1

Log:
Calculate candidate sorts using injections of the form

  CONTENTCOMPLETE -> Sort {cons("COMPLETION-Sort")}

where Sort is replaced by a Sort used/defined in the context-free syntax.

The runtime then disambiguates these injections and stores the sort names
(that have been encoded in the cons names), for much more accurate candidate
sorts than the former implementation using AstSortInspector.

Modified:
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 12:00:07 2011	(r23502)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 12:12:59 2011	(r23503)
@@ -143,9 +143,16 @@
 				// Parse might be skipped if ContentProposerParser figures it can reuse the previous AST.
 				boolean avoidReparse = completionFunction == null && templates.size() == 0;
 				IStrategoTerm ast = parser.parse(controller, selection, document, avoidReparse);
-				int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
-				Set<String> sorts = new AstSortInspector(ast).getSortsAt(offset - prefixLength, offset + COMPLETION_TOKEN.length() - 1, parser.getCompletionNode());
 				IStrategoTerm completionNode = parser.getCompletionNode();
+				Set<String> sorts = parser.getCandidateSorts();
+
+				// If new method did not find any candidate sorts, try old (less accurate) method instead.
+				if (sorts.isEmpty()) {
+					String prefix = parser.getCompletionPrefix();
+					int prefixLength = prefix == null ? 0 : prefix.length();
+					sorts = new AstSortInspector(ast).getSortsAt(
+							offset - prefixLength, offset + COMPLETION_TOKEN.length() - 1, completionNode);
+				}
 
 				// Still continue?
 				synchronized (lock) {

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Thu Oct 20 12:00:07 2011	(r23502)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Thu Oct 20 12:12:59 2011	(r23503)
@@ -10,17 +10,22 @@
 import static org.strategoxt.imp.runtime.services.ContentProposer.COMPLETION_TOKEN;
 
 import java.io.IOException;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.regex.Pattern;
 
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.jface.text.Position;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.Tokenizer;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.terms.TermTransformer;
 import org.spoofax.terms.TermVisitor;
+import org.spoofax.terms.attachments.ParentAttachment;
 import org.spoofax.terms.attachments.ParentTermFactory;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
@@ -42,6 +47,8 @@
 	public static final IStrategoConstructor COMPLETION_UNKNOWN =
 		getTermFactory().makeConstructor("NOCONTEXT", 1);
 
+	public static final String COMPLETION_SORT_PREFIX = "COMPLETION-";
+
 	private static final long REINIT_PARSE_DELAY = 4000;
 
 	private final Pattern identifierLexical;
@@ -56,9 +63,12 @@
 
 	private String completionPrefix;
 
+	private final HashSet<String> candidateSorts;
+
 	public ContentProposerParser(Pattern identifierLexical) {
 		this.identifierLexical = identifierLexical;
 		this.astReuser = new ContentProposerAstReuser(identifierLexical);
+		this.candidateSorts = new HashSet<String>();
 	}
 
 	protected SGLRParseController getParser() {
@@ -73,6 +83,10 @@
 		return completionPrefix;
 	}
 
+	public Set<String> getCandidateSorts() {
+		return candidateSorts;
+	}
+
 	public boolean isFatalSyntaxError() {
 		return completionAst == null;
 	}
@@ -161,28 +175,57 @@
 		return (SGLRParseController) controller;
 	}
 
-	private static IStrategoTerm identifyAndPutCompletionNode(final IStrategoTerm ast, final String prefix, final String completionToken) {
+	private IStrategoTerm identifyAndPutCompletionNode(final IStrategoTerm ast, final String prefix, final String completionToken) {
 		class Visitor extends TermVisitor {
 			IStrategoTerm newCompletionNode;
+			boolean inCompletionNode = false;
+			boolean resetNewCompletionNodeOnVisitingTheFirstCompletionNode = false;
 
 			public void preVisit(IStrategoTerm term) {
+				if (inCompletionNode) {
+					return;
+				}
+
+				if (isCompletionNode(term)) {
+					inCompletionNode = true;
+					if (resetNewCompletionNodeOnVisitingTheFirstCompletionNode) {
+						newCompletionNode = null;
+						resetNewCompletionNodeOnVisitingTheFirstCompletionNode = false;
+					}
+				}
+
 				if (isTermString(term)) {
 					String value = ((IStrategoString) term).stringValue();
 					if (value.indexOf(completionToken) > -1) {
-						newCompletionNode = putCompletionNode(term, prefix, false);
+						newCompletionNode = term;
+						resetNewCompletionNodeOnVisitingTheFirstCompletionNode = false;
 					}
 				}
 			}
 
 			@Override
 			public void postVisit(IStrategoTerm term) {
+				if (isCompletionNode(term)) {
+					inCompletionNode = false;
+				}
+
 				// Visit annotations; testing language puts ast nodes in there
-				if (!term.getAnnotations().isEmpty())
+				if (!term.getAnnotations().isEmpty()) {
+					// HACK: Set newCompletionNode to null if we are visiting annotations that contain COMPLETION-<Sort> nodes.
+					//       This is necessary to put a NOCONTEXT(COMPLETION(_)) node in the annotation, instead of
+					//       putting a Context(COMPLETION(_)) in the QuotePart that was parsed to the AST in the annotation.
+					resetNewCompletionNodeOnVisitingTheFirstCompletionNode = true;
 					visit(term.getAnnotations());
+					resetNewCompletionNodeOnVisitingTheFirstCompletionNode = false;
+				}
 			}
 		};
+		candidateSorts.clear();
 		Visitor visitor = new Visitor();
 		visitor.visit(ast);
+		if (visitor.newCompletionNode != null) {
+			visitor.newCompletionNode = putCompletionNode(visitor.newCompletionNode, prefix, false);
+		}
 		return visitor.newCompletionNode;
 	}
 
@@ -190,7 +233,7 @@
 	 * Creates a new abstract syntax tree with the given node
 	 * replaced by a COMPLETION(prefix) term.
 	 */
-	private static IStrategoTerm putCompletionNode(IStrategoTerm node, final String prefix, final boolean noContext) {
+	private IStrategoTerm putCompletionNode(IStrategoTerm node, final String prefix, final boolean noContext) {
 		final ParentTermFactory factory = new ParentTermFactory(Environment.getTermFactory());
 
 		final IStrategoTerm targetNode = tryGetCompletionNodeWrappingTerm(node);
@@ -198,28 +241,87 @@
 		class Transformer extends TermTransformer {
 			IStrategoTerm newCompletionNode;
 
+			// This is used to maintain the set of ancestors of the COMPLETION node.
+			// Any ambiguity on an ancestor which contains exactly one ancestor and
+			// one or more non-ancestors is then resolved by taking the ancestor.
+			int oldestGeneration = 0, currentGeneration = 0;
+			HashSet<IStrategoTerm> ancestors = new HashSet<IStrategoTerm>();
+
 			public Transformer() {
 				super(factory, true);
 			}
 
 			@Override
-			public IStrategoTerm preTransform(IStrategoTerm current) {
-				if (current == targetNode) {
+			public IStrategoTerm preTransform(IStrategoTerm term) {
+				if (newCompletionNode != null) {
+					++currentGeneration;
+				}
+
+				if (term == targetNode) {
 					IStrategoTerm prefixTerm = factory.makeString(prefix);
 					IStrategoTerm completionTerm = factory.makeAppl(COMPLETION_CONSTRUCTOR, prefixTerm);
 					newCompletionNode = noContext ? factory.makeAppl(COMPLETION_UNKNOWN, completionTerm) : completionTerm;
-					factory.copyAttachments(current, newCompletionNode, true);
-					factory.copyAttachments(current, completionTerm, true);
-					factory.copyAttachments(current, prefixTerm, true);
+					factory.copyAttachments(term, newCompletionNode, true);
+					factory.copyAttachments(term, completionTerm, true);
+					factory.copyAttachments(term, prefixTerm, true);
 					return newCompletionNode;
-				} else {
-					return current;
+				}
+				return term;
+			}
+
+			@Override
+			public IStrategoTerm postTransform(IStrategoTerm term) {
+				if (newCompletionNode != null) {
+					--currentGeneration;
+					if (currentGeneration < oldestGeneration) {
+						oldestGeneration = currentGeneration;
+						ancestors.add(term);
+					}
+				}
+
+				if (isAmbNode(term) && ancestors.contains(term)) {
+					term = disambiguate(term);
+					ancestors.add(term);
+				}
+
+				while (isCompletionNode(term)) {
+					term = term.getSubterm(0);
+				}
+
+				// Visit annotations; testing language puts ast nodes in there
+				if (!term.getAnnotations().isEmpty()) {
+					IStrategoList newAnnos = (IStrategoList) transform(term.getAnnotations());
+					return factory.annotateTerm(term, newAnnos);
+				}
+				return term;
+			}
+
+			private IStrategoTerm disambiguate(IStrategoTerm term) {
+				IStrategoTerm[] alternatives = ((IStrategoList) term.getSubterm(0)).getAllSubterms();
+				IStrategoTerm disambiguated = null;
+				for (IStrategoTerm alt : alternatives) {
+					if (ancestors.contains(alt)) {
+						disambiguated = alt;
+					}
+				}
+				if (disambiguated == null) {
+					return term;
+				}
+				else {
+					return disambiguated;
 				}
 			}
 		}
 
 		Transformer trans = new Transformer();
-		trans.transform(getRoot(node));
+		IStrategoTerm input = getRoot(node);
+		IStrategoTerm output = trans.transform(input);
+
+		// Copy attachments and erase parent of new root node.
+		factory.copyAttachments(input, output);
+		ParentAttachment.putParent(output, null, null);
+
+		assert output == getRoot(trans.newCompletionNode) : "ParentAttachments not restored properly after transform";
 
 		if (!noContext && getParent(trans.newCompletionNode) != null)
 			trans.newCompletionNode = getParent(trans.newCompletionNode); // add a bit of context
@@ -227,6 +329,28 @@
 		return trans.newCompletionNode;
 	}
 
+	// Is it a COMPLETION-<Sort>/1 node?
+	boolean isCompletionNode(IStrategoTerm term) {
+		return isCompletionConstructor(tryGetConstructor(term));
+	}
+
+	boolean isCompletionConstructor(IStrategoConstructor cons) {
+		final boolean isCompCons = cons != null && cons.getName().startsWith(COMPLETION_SORT_PREFIX) && cons.getArity() == 1;
+		if (isCompCons) {
+			candidateSorts.add(cons.getName().substring(COMPLETION_SORT_PREFIX.length()));	
+		}
+		return isCompCons;
+	}
+
+	// Is it an amb/1 node?
+	boolean isAmbNode(IStrategoTerm term) {
+		return isAmbConstructor(tryGetConstructor(term));
+	}
+
+	boolean isAmbConstructor(IStrategoConstructor cons) {
+		return cons != null && "amb".equals(cons.getName()) && cons.getArity() == 1;
+	}
+
 	private static IStrategoTerm tryGetCompletionNodeWrappingTerm(IStrategoTerm node) {
 		if (tryGetConstructor(node) != COMPLETION_CONSTRUCTOR) {
 			for (IStrategoTerm child : node.getAllSubterms()) {
@@ -242,17 +366,26 @@
 	 * Add NOCONTEXT(COMPLETION(...)) node based on token positions.
 	 * This is used if completionToken can't be found in the AST.
 	 */
-	private static IStrategoTerm putNoContextCompletionNode(final IStrategoTerm ast, final String prefix, final int offset) {
+	private IStrategoTerm putNoContextCompletionNode(final IStrategoTerm ast, final String prefix, final int offset) {
 		class Visitor extends TermVisitor {
 			IStrategoTerm targetNode, lastNode;
 
 			public void preVisit(IStrategoTerm node) {
-				if (getLeftToken(node).getStartOffset() <= offset
+				// The root IStrategoList of annotations does not contain token information, so check for null.
+				IToken leftToken = getLeftToken(node);
+				if (leftToken != null && leftToken.getStartOffset() <= offset
 						&& (offset <= getRightToken(node).getEndOffset() || isPartOfListSuffixAt(node, offset))) {
 					targetNode = node;
 				}
 				lastNode = node;
 			}
+
+			@Override
+			public void postVisit(IStrategoTerm term) {
+				// Visit annotations; testing language puts ast nodes in there
+				if (!term.getAnnotations().isEmpty())
+					visit(term.getAnnotations());
+			}
 		}
 		Visitor visitor = new Visitor();
 		visitor.visit(ast);

From tobivollebregt at gmail.com  Thu Oct 20 14:48:46 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 20 Oct 2011 12:48:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23504 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111020124846.4B4BC108C00D@mx3.tudelft.nl>

Author: tvo
Date: Thu Oct 20 12:48:45 2011
New Revision: 23504
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23504&sc=1

Log:
Add final check for changed document in the UIJob that re-triggers completion.
This also checks the actual document, instead of only whether a new call to
getContentProposals obsoleted our current calculation.

Now it should be completely impossible to get a completion popup at
the wrong position after a long running parse / editor-complete.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 12:12:59 2011	(r23503)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 12:48:45 2011	(r23504)
@@ -187,6 +187,15 @@
 				UIJob job = new UIJob("Re-triggering content assist") {
 					@Override
 					public IStatus runInUIThread(IProgressMonitor monitor) {
+						// Don't re-trigger if document/selection changed
+						// between scheduling and execution of this UIJob.
+						synchronized(lock) {
+							if (shouldBeCancelled(monitor)
+									|| !viewer.getDocument().get().equals(document)
+									|| !viewer.getSelectedRange().equals(selectedRange)) {
+								return Status.CANCEL_STATUS;
+							}
+						}
 						((ITextOperationTarget) viewer).doOperation(ISourceViewer.CONTENTASSIST_PROPOSALS);
 						return Status.OK_STATUS;
 					}

From tobivollebregt at gmail.com  Thu Oct 20 14:51:47 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 20 Oct 2011 12:51:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23505 - in
	spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections:
	. src/org/strategoxt/imp/runtime/services
Message-ID: <20111020125147.C7A53108C08E@mx3.tudelft.nl>

Author: tvo
Date: Thu Oct 20 12:51:47 2011
New Revision: 23505
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23505&sc=1

Log:
merge

Modified:
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/   (props changed)
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 12:48:45 2011	(r23504)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 12:51:47 2011	(r23505)
@@ -194,6 +194,15 @@
 				UIJob job = new UIJob("Re-triggering content assist") {
 					@Override
 					public IStatus runInUIThread(IProgressMonitor monitor) {
+						// Don't re-trigger if document/selection changed
+						// between scheduling and execution of this UIJob.
+						synchronized(lock) {
+							if (shouldBeCancelled(monitor)
+									|| !viewer.getDocument().get().equals(document)
+									|| !viewer.getSelectedRange().equals(selectedRange)) {
+								return Status.CANCEL_STATUS;
+							}
+						}
 						((ITextOperationTarget) viewer).doOperation(ISourceViewer.CONTENTASSIST_PROPOSALS);
 						return Status.OK_STATUS;
 					}

From tobivollebregt at gmail.com  Thu Oct 20 17:36:16 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 20 Oct 2011 15:36:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23506 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111020153616.8E8CACC08D@mx4.tudelft.nl>

Author: tvo
Date: Thu Oct 20 15:36:16 2011
New Revision: 23506
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23506&sc=1

Log:
Fix NPE when closing editor while long running completion background job is still running

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 12:51:47 2011	(r23505)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 15:36:16 2011	(r23506)
@@ -191,6 +191,7 @@
 						// between scheduling and execution of this UIJob.
 						synchronized(lock) {
 							if (shouldBeCancelled(monitor)
+									|| viewer.getDocument() == null
 									|| !viewer.getDocument().get().equals(document)
 									|| !viewer.getSelectedRange().equals(selectedRange)) {
 								return Status.CANCEL_STATUS;

From tobivollebregt at gmail.com  Thu Oct 20 17:37:01 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 20 Oct 2011 15:37:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23507 - in
	spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections:
	. src/org/strategoxt/imp/runtime/services
Message-ID: <20111020153701.0E1E42B8016@mx2.tudelft.nl>

Author: tvo
Date: Thu Oct 20 15:37:00 2011
New Revision: 23507
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23507&sc=1

Log:
merge

Modified:
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/   (props changed)
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 15:36:16 2011	(r23506)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Oct 20 15:37:00 2011	(r23507)
@@ -198,6 +198,7 @@
 						// between scheduling and execution of this UIJob.
 						synchronized(lock) {
 							if (shouldBeCancelled(monitor)
+									|| viewer.getDocument() == null
 									|| !viewer.getDocument().get().equals(document)
 									|| !viewer.getSelectedRange().equals(selectedRange)) {
 								return Status.CANCEL_STATUS;

From L.C.L.Kats at tudelft.nl  Sat Oct 22 23:11:59 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 22 Oct 2011 21:11:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23508 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: editor trans
Message-ID: <20111022211159.34CAA7F8012@mx1.tudelft.nl>

Author: LennartKats
Date: Sat Oct 22 21:11:58 2011
New Revision: 23508
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23508&sc=1

Log:
- better check of incompatible test conditions
- refactoring tests no longer cause "with" failures

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Thu Oct 20 15:37:00 2011	(r23507)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Sat Oct 22 21:11:58 2011	(r23508)
@@ -16,7 +16,7 @@
     "start symbol " <Start>
                                          
   completion template Header TestDecl Result :
-    "test" " " <description> " [[\n\t" <> "\n]]" <succeeds:Result> (blank)
+    "test" " " <description> " [[\n\t" <> "\n]] " <succeeds:Result> (blank)
                                          
   completion template Header TestDecl Result :
     "setup" " [[\n\t" <> "\n]]" (blank)

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Thu Oct 20 15:37:00 2011	(r23507)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Sat Oct 22 21:11:58 2011	(r23508)
@@ -50,8 +50,9 @@
 
   check-refactoring(|ast, selections, messages, condition):
     (builder, arg, expected) -> error
-    with 
-      (semnodes, _, options) := <spt-find-refactoring-description> builder;
+    where
+      (semnodes, _, options) := <spt-find-refactoring-description> builder
+    with
       selected := <resolve-selection(|selections) <+ !ast> Numbered("1"); 
       selected' := <repeat(\_#([arg]) -> arg\)> selected; //Var(Id(x)) start looking for matching nodes from x
       user-input := <try(?Argument(<id>)); try(trim-chars(?'"'))> arg;
@@ -65,6 +66,11 @@
       end
     where
       error := <check-builder> (output, input, expected, condition)
+  
+  check-refactoring(|ast, selections, messages, condition):
+    (builder, arg, expected) -> $[Undeclared refactoring: [builder]]
+    where
+      not(<spt-find-refactoring-description> builder)
 	
   check-builder:
 	(output, input, expected, condition) -> error

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Thu Oct 20 15:37:00 2011	(r23507)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Sat Oct 22 21:11:58 2011	(r23508)
@@ -27,7 +27,8 @@
     where
       !a* => [ast | selections];
       reference* := <collect-all(?Numbered(_) + ?Unnumbered(), conc)> expectations;
-      error*     := <filter(check-selection(|selections))> reference*
+      error*     := <filter(check-selection(|selections))> reference*;
+      not([])
   
   check-selection(|selections):
     Numbered(n) -> (<id>, $[No identifier selection #[n] found in input])

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Oct 20 15:37:00 2011	(r23507)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Sat Oct 22 21:11:58 2011	(r23508)
@@ -38,14 +38,31 @@
   		zeros := [Fatals("0"), Errors("0"), Warnings("0")]; //TODO Fatals(0)
   		refactor-expectations := 
   			<union(?(Errors(_), Errors(_)) <+ ?(Warnings(_), Warnings(_)) <+ ?(Fatals(_), Fatals(_)))> (zeros, expectations)
-
+  
   check-note = fail
   
   check-error:
-    Test(_, d, _, c*) -> (d, "Can only combine success conditions with /regular expression/ conditions")
+    Test(_, d, _, c*) -> (d, "Combination of test conditions is not supported")
+    with
+      c'* := <filter(not(is-composable-semantic-condition))> c*
+    where
+      <gt> (<length> c'*, 1)
+    <+
+      <gt> (<length> c'*, 0);
+      <all(is-parse-only-test)> c'*
     where
-      c'* := <filter(not(?RegexPattern(_)))> c*;
-      <gt> (<length> c'*, 1) 
+      // Exception: we allow conditions like '1 error refactor ... 2 errors'
+      not(one(?Refactor(_, _, _)));
+      all(not(is-parse-only-test))
+
+  is-composable-semantic-condition =
+    ?RegexPattern(_) + ?Refactor(_, _, _) + ?Build(_, _, _) + ?Run(_, _, _)
+  + ?Resolve(_) + ?Complete(_) + ?ResolveTo(_, _) + ?CompleteTo(_, _)
+
+  check-warning:
+    Test(_, d, _, [r @ Refactor(_,_,(wildcard(), [_ | _]))]) ->
+    (r, "Specify a pattern 'to _' for this refactoring")
+    // (avoid confusion: conditions after refactoring apply to output pattern)
   
   check-error:
     TestEmpty(_, d) -> (<id>, "Empty test case")

From M.A.Akhter at student.tudelft.nl  Sun Oct 23 15:22:12 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 23 Oct 2011 13:22:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23509 - in
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms:
	. attachments
Message-ID: <20111023132212.3F0B4108C00A@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Oct 23 13:22:10 2011
New Revision: 23509
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23509&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java	Sat Oct 22 21:11:58 2011	(r23508)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java	Sun Oct 23 13:22:10 2011	(r23509)
@@ -10,6 +10,7 @@
  */
 public class StrategoSubList extends StrategoWrapped implements IStrategoList {
 
+
 	private final IStrategoList completeList;
 
 	private int indexStart;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java	Sat Oct 22 21:11:58 2011	(r23508)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java	Sun Oct 23 13:22:10 2011	(r23509)
@@ -38,6 +38,7 @@
 				ITermAttachment attachment = term.getAttachment(null);
 				while (attachment != null) {
 					if (attachment.getAttachmentType().isSerializationSupported()) {
+						
 						IStrategoTerm result = attachment.getAttachmentType().toTerm(factory, attachment);
 						if (results == null) results = term.getAnnotations();
 						results = factory.makeListCons(result, results);
@@ -81,6 +82,7 @@
 							target.putAttachment(type.fromTerm(appl));
 						}
 					}
+					annotations = annotations.tail();
 				}
 				return target;
 			}
@@ -112,6 +114,7 @@
 						if (newAnnos == null) newAnnos = new ArrayList<IStrategoTerm>(annotations.size());
 						newAnnos.add(annotations);
 					}
+					annotations = annotations.tail();
 				}
 				if (newAnnos == null)
 					return Collections.emptyList();

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java	Sat Oct 22 21:11:58 2011	(r23508)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java	Sun Oct 23 13:22:10 2011	(r23509)
@@ -30,6 +30,7 @@
 			? null
 			: new TermFactory().makeConstructor(constructorName, constructorArity);
 		// assert isNotOverlapping(type) : "Term attachments do not support inheritance, failed on: " + type.getName();
+		asyncTypes.add(this);
 	}
 	
 	public static TermAttachmentType<?>[] getKnownTypes() {

From L.C.L.Kats at tudelft.nl  Sun Oct 23 18:39:22 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 23 Oct 2011 16:39:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23510 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/editor
	org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/stra...
Message-ID: <20111023163922.E2C5D108C00A@mx3.tudelft.nl>

Author: LennartKats
Date: Sun Oct 23 16:39:22 2011
New Revision: 23510
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23510&sc=1

Log:
content completion testing fixes

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Sun Oct 23 13:22:10 2011	(r23509)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Sun Oct 23 16:39:22 2011	(r23510)
@@ -81,3 +81,23 @@
     [[entity x {}]] [[entity y {}]]
   ]] resolve #3
 ]]] 1 error /selection/
+
+test [[[
+  module x
+  language TestingTesting
+  test y [[
+    module [[z]]
+  ]] complete to "z" 1 error
+]]] /combination of test conditions is not supported/
+
+
+test Content completion [[[
+  module x
+  language TestingTesting
+  test [[
+    module x
+    entity Alpha {
+      a : [[A]]
+    }
+  ]] complete to "Alpha"
+]]]
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Sun Oct 23 13:22:10 2011	(r23509)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Sun Oct 23 16:39:22 2011	(r23510)
@@ -31,8 +31,9 @@
   completion template : Result = <n> " warnings" 
   completion template : Result = "resolve " <x>
   completion template : Result = "resolve " <#2> " to  " <#1>
-  completion template : Result = "complete " <#1>
-  completion template : Result = "complete " <#1> " to " <\"name\">
+  // completion template : Result = "complete " <#1>
+  // completion template : Result = "complete " <#1> " to " <\"name\">
+  completion template : Result = "complete to \"" <name> "\""
   completion template : Result = "build " <builder> "(" <> /*<OptArgument:>*/ ") to " <output:OptPattern>
   completion template : Result = "refactor " <refactoring> "(" <> ") to " <output:OptPattern>
   completion template : Result = "run " <builder> "(" <> ") " <to:OptPattern>

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java	Sun Oct 23 13:22:10 2011	(r23509)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java	Sun Oct 23 16:39:22 2011	(r23510)
@@ -23,11 +23,11 @@
 		// TODO: adapt to latest strategy of StrategoReferenceResolver?
 		if (isTermAppl(analyzedAst) && ((IStrategoAppl) analyzedAst).getName().equals("None"))
 			analyzedAst = null;
-		if ("COMPLETION" != tryGetName(current))
+		if (!"COMPLETION".equals(tryGetName(current)) && !"NOCONTEXT".equals(tryGetName(current)))
 			current = InputTermBuilder.getMatchingAncestor(current, StrategoReferenceResolver.ALLOW_MULTI_CHILD_PARENT);
 		HybridInterpreter runtime = HybridInterpreter.getInterpreter(context);
 		InputTermBuilder inputBuilder = new InputTermBuilder(runtime, analyzedAst);
-		return inputBuilder.makeInputTerm(current, true);
+		return inputBuilder.makeInputTerm(current, true, false);
 	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Sun Oct 23 13:22:10 2011	(r23509)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Sun Oct 23 16:39:22 2011	(r23510)
@@ -17,46 +17,53 @@
 
 rules
   
-  check-error:
-    CompleteTo(_, _) -> (<id>, $[Content completion testing not is (correctly) implemented at this point])
+  //check-error:
+  //  CompleteTo(_, _) -> (<id>, $[Content completion testing not is (correctly) implemented at this point])
 
   spt-desugar:
     Complete(x) -> CompleteTo(x, wildcard())
 
   check-expectation(|ast, selections, messages) :
-    CompleteTo(from, to) -> error
+    CompleteTo(from, to) -> $[[error][tip]]
     where
       from' := <resolve-selection(|selections)> from
     with
+      to'       := <un-double-quote> to;
       from''    := <get-completion-input-term> from';
       resolvers := <spt-get-content-proposers>;
       results   := <map(execute-service(|from''))> resolvers
     where
       switch !results
-        case one(is-successful-completion(|to)): fail
-        case one(?Some(t)):  error := $[Unexpected result: [<write-to-string> t]]
+        case one(is-successful-completion(|to')): fail
+        case filter(?Some(<id>)) => t: 
+                             error := $[Unexpected result: [<try(flatten-list); write-to-string> t]]
         case one(?Error(m)): error := $[Unexpected error: [m]]
         case one(?Fail(m)):  error := $[Unexpected error: [m]]
         otherwise: with(fail)
       end;
       // On failure, report any inline errors
-      <grab-messages> messages
+      if <grab-errors> messages => [] then
+        tip := ""
+      else
+        tip := " (showing test errors while it fails)"
+      end
   
   get-completion-input-term:
     x -> tuple
     where
       x-root := <repeat(prim("SSL_EXT_get_parent", <id>))> x;
-      if y-root := <alltd(origin-equal(|x); !COMPLETION(<id>))> x-root then
-        y := <collect-one(?COMPLETION(_))> y-root
+      if y-root := <oncetd(origin-equal(|x); one(!COMPLETION(<id>)); ?x')> x-root then
+        y-root' := <prim("SSL_EXT_clone_and_set_parents", y-root)>;
+        y       := <collect-one(?x')> y-root'
       else
         y := NOCONTEXT(x)
       end;
       tuple := <get-service-input-term> y
   
   is-successful-completion(|expected):
-    Some(result) -> <id>
+    Some(results) -> <id>
     where
       !expected => wildcard()
     <+
-      <oncetd(strip-annos; ?expected)> result
+      <oncetd(strip-annos; ?expected)> results
       
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Sun Oct 23 13:22:10 2011	(r23509)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Sun Oct 23 16:39:22 2011	(r23510)
@@ -57,7 +57,7 @@
 
   is-composable-semantic-condition =
     ?RegexPattern(_) + ?Refactor(_, _, _) + ?Build(_, _, _) + ?Run(_, _, _)
-  + ?Resolve(_) + ?Complete(_) + ?ResolveTo(_, _) + ?CompleteTo(_, _)
+  + ?Resolve(_) + ?Complete(_) + ?ResolveTo(_, _)
 
   check-warning:
     Test(_, d, _, [r @ Refactor(_,_,(wildcard(), [_ | _]))]) ->

From L.C.L.Kats at tudelft.nl  Sun Oct 23 18:55:54 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 23 Oct 2011 16:55:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23511 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111023165554.B619DCC0E5@mx4.tudelft.nl>

Author: LennartKats
Date: Sun Oct 23 16:55:54 2011
New Revision: 23511
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23511&sc=1

Log:
regression in "combination of test conditions" check

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Sun Oct 23 16:39:22 2011	(r23510)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Sun Oct 23 16:55:54 2011	(r23511)
@@ -46,10 +46,8 @@
     with
       c'* := <filter(not(is-composable-semantic-condition))> c*
     where
+      <all(not(is-parse-only-test))> c*;
       <gt> (<length> c'*, 1)
-    <+
-      <gt> (<length> c'*, 0);
-      <all(is-parse-only-test)> c'*
     where
       // Exception: we allow conditions like '1 error refactor ... 2 errors'
       not(one(?Refactor(_, _, _)));

From L.C.L.Kats at tudelft.nl  Sun Oct 23 20:21:40 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 23 Oct 2011 18:21:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23512 - in
	spoofax-contrib/calculang/branches/Calculang0Tested: editor
	examples syntax tests trans
Message-ID: <20111023182140.949607F8006@mx1.tudelft.nl>

Author: LennartKats
Date: Sun Oct 23 18:21:40 2011
New Revision: 23512
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23512&sc=1

Log:
more test cases and some implementation; needs cleanup

Added:
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/3-variables-basic.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/4-variables-advanced.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/5-compilation.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/6-execution.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/7-refactoring.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/x-shell.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/y-self-application.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/trans/generate.str
   spoofax-contrib/calculang/branches/Calculang0Tested/trans/refactor.str
Modified:
   spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-Builders.esv
   spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-References.esv
   spoofax-contrib/calculang/branches/Calculang0Tested/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt
   spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang0Tested/trans/check.str

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-Builders.esv
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-Builders.esv	Sun Oct 23 16:55:54 2011	(r23511)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-Builders.esv	Sun Oct 23 18:21:40 2011	(r23512)
@@ -10,7 +10,20 @@
 
 builders
                                                                                                                                
-  provider: include/calculang.ctree                                                                                         
+  provider: include/calculang.ctree      
+  
+  observer: editor-analyze                                                                                   
                                                                                                                                
   builder: "Show abstract syntax (for selection)" =
-  	generate-aterm (openeditor) (realtime) (meta) (source)
\ No newline at end of file
+  	generate-aterm (openeditor) (realtime) (meta) (source)                                                                              
+                                                                                                                               
+  builder: "To Java (for selection)" =
+    generate-java (openeditor) (realtime) (source)                                                                              
+                                                                                                                               
+  builder: "Compile and run Java (for selection)" =
+    generate-result (openeditor) (realtime) (source)
+  
+  refactoring ID : "Rename" = rename-var
+  shortcut: "org.eclipse.jdt.ui.edit.text.java.rename.element"
+  input
+    identifier : "New Name"
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-References.esv
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-References.esv	Sun Oct 23 16:55:54 2011	(r23511)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-References.esv	Sun Oct 23 18:21:40 2011	(r23512)
@@ -10,5 +10,9 @@
                                                                                                    
 
 references
-                
-  
\ No newline at end of file
+               
+  reference _ :
+    editor-resolve 
+  
+  completion proposer:
+    editor-complete
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/examples/example.cal	Sun Oct 23 16:55:54 2011	(r23511)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/examples/example.cal	Sun Oct 23 18:21:40 2011	(r23512)
@@ -1 +1,2 @@
-1
\ No newline at end of file
+x = 1
+x
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf	Sun Oct 23 16:55:54 2011	(r23511)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf	Sun Oct 23 18:21:40 2011	(r23512)
@@ -9,7 +9,26 @@
 
   context-free syntax
     
-    Exp -> Start
-    INT -> Exp {cons("Int")}
-
-    %% ...
+    Exp -> Start {prefer}
+    INT -> Exp   {cons("Int")}
+    
+    Exp "*" Exp -> Exp {cons("Mul")}
+    Exp "+" Exp -> Exp {cons("Plus")}
+    
+    "(" Exp ")" -> Exp {bracket}
+    
+    Exp "!" -> Exp {cons("Fact"), right}
+    
+  context-free priorities
+    
+    Exp "*" Exp -> Exp {left}
+  >
+    Exp "+" Exp -> Exp {left}
+    
+  context-free syntax
+    
+    Stm*       -> Start {cons("Statements")}
+    ID "=" Exp -> Stm {cons("Assign")}
+    Exp        -> Stm
+    ID         -> Exp {cons("Var")}
+    

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt	Sun Oct 23 16:55:54 2011	(r23511)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt	Sun Oct 23 18:21:40 2011	(r23512)
@@ -2,12 +2,8 @@
 
 language Calculang
 
-test Constant [[
-    1
-]]
-
 test Add [[
-    1 + 2
+  1 + 2
 ]] parse succeeds
 
 test Multiply [[

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt	Sun Oct 23 16:55:54 2011	(r23511)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt	Sun Oct 23 18:21:40 2011	(r23512)
@@ -16,4 +16,8 @@
 
 test Multiply and add [[
   2 * 2 + 1
-]] run calc to "5"
\ No newline at end of file
+]] run calc to "5"
+
+test Factorial [[
+	5! 
+]] run calc to "120"
\ No newline at end of file

Added: spoofax-contrib/calculang/branches/Calculang0Tested/tests/3-variables-basic.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/3-variables-basic.spt	Sun Oct 23 18:21:40 2011	(r23512)
@@ -0,0 +1,32 @@
+module variables-basic
+
+language Calculang
+
+test Variable [[
+  x
+]] parse
+
+test Assignment [[
+  x = 4
+]] parse
+
+test Multiple statements [[
+	x
+	x
+]] parse to Statements([Var("x"), Var("x")])
+
+test Eval constant [[
+  PI
+]] run calc to "3.14"
+
+test Eval variable [[
+  x = 4
+  y = x * 2
+  y
+]] run calc to "8"
+
+test Eval multiple variables [[
+  x = 2
+  y = x * 2 + x
+  y
+]] run calc to "6"

Added: spoofax-contrib/calculang/branches/Calculang0Tested/tests/4-variables-advanced.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/4-variables-advanced.spt	Sun Oct 23 18:21:40 2011	(r23512)
@@ -0,0 +1,33 @@
+module variables-basic
+
+language Calculang
+
+test Variable unassigned [[
+  y
+]] 1 error /unassigned/
+
+test Multiply assigned variable [[
+  y = 1
+  y = 2
+  y
+]] /multiply assigned/
+
+test Eval variable [[
+  x = 4
+  x
+]] run calc to "4"
+
+test Reference resolving (1) [[
+  x = 4
+  [[x]]
+]] resolve
+
+test Reference resolving (2) [[
+  [[x]] = 4
+  [[x]]
+]] resolve #2 to #1
+
+test Content completion [[
+  avariable = 1
+  [[a]]
+]] complete to "avariable"

Added: spoofax-contrib/calculang/branches/Calculang0Tested/tests/5-compilation.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/5-compilation.spt	Sun Oct 23 18:21:40 2011	(r23512)
@@ -0,0 +1,12 @@
+module execution 
+
+language Calculang
+
+test Constant [[
+  1
+]] build generate-java 
+
+test Constant [[
+  1 + 2
+]] build generate-java 
+

Added: spoofax-contrib/calculang/branches/Calculang0Tested/tests/6-execution.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/6-execution.spt	Sun Oct 23 18:21:40 2011	(r23512)
@@ -0,0 +1,11 @@
+module execution 
+
+language Calculang
+
+test 42 [[
+  42
+]] build generate-result to 42
+
+test 42, part deux [[
+  41 + 1
+]] build generate-result to 42

Added: spoofax-contrib/calculang/branches/Calculang0Tested/tests/7-refactoring.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/7-refactoring.spt	Sun Oct 23 18:21:40 2011	(r23512)
@@ -0,0 +1,28 @@
+module refactoring 
+
+language Calculang
+
+test Basic rename [[
+  a = 1
+  [[a]]
+]] refactor rename-var("b") to [[
+  b = 1
+  b
+]]
+
+test Another rename [[
+  a = 1
+  b = 2
+  [[a]]
+]] refactor rename-var("c") to [[
+  c = 1
+  b = 2
+  c
+]]
+
+test Rename collission [[
+  a = 1
+  b = 1
+  [[a]]
+]] refactor rename-var("b") to _
+   1 error

Added: spoofax-contrib/calculang/branches/Calculang0Tested/tests/x-shell.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/x-shell.spt	Sun Oct 23 18:21:40 2011	(r23512)
@@ -0,0 +1,18 @@
+module shell
+
+language Calculang
+
+test Arithmetic API
+  <mul> (1, 3) => 6
+
+test String-based arithmetic API
+  <mulS> ("1", "3") => "6"
+
+test Foo 
+  let
+    foo = !4
+  in
+    foo;
+    debug
+  end
+

Added: spoofax-contrib/calculang/branches/Calculang0Tested/tests/y-self-application.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/tests/y-self-application.spt	Sun Oct 23 18:21:40 2011	(r23512)
@@ -0,0 +1,35 @@
+module self-application 
+
+language Spoofax-Testing
+
+test A test of a test [[[
+  
+  module testset
+  
+  language Calculang
+  
+  test Add [[
+    1 + 2
+  ]] parse succeeds
+  
+  test Multiply [[
+    1 * 2
+  ]] run calc to "2"
+  
+]]]
+
+test A test of a test [[[
+  
+  module testset
+  
+  language Calculang
+  
+  test Add [[
+    1 + 2
+  ]] parse succeeds
+  
+  test Multiply [[
+    1 * 2
+  ]] run calc to "2"
+  
+]]]

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculang.str	Sun Oct 23 16:55:54 2011	(r23511)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculang.str	Sun Oct 23 18:21:40 2011	(r23512)
@@ -6,6 +6,8 @@
   lib/editor-common.generated
   check
   calculate
+  generate
+  refactor
 
 rules // Main editor interface (defined by editor/Calculang-Builders and -References.esv)
   
@@ -14,3 +16,50 @@
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := selected // we just return the input term
+      
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error)> ast;
+      warnings := [];
+      notes    := []
+
+  editor-resolve:
+    (Var(x), position, ast, path, project-path) -> target
+    where
+      rules(Var: "dummy" -> "dummy");
+      target := <GetVar> x
+
+  editor-complete:
+    (Var(x), position, ast, path, project-path) -> targets
+    where
+      editor-init;
+      analyze;
+      targets := <all-keys-GetVar> x
+
+  generate-result:
+    input @ (selected, position, ast, path, project-path) -> (out-filename, result)
+    with
+      out-filename   := <guarantee-extension(|"out")> path;
+      java-filename  := "Output.java";
+      class-dir      := <dirname> path;
+      class-filename := "Output";
+      (_, java)      := <generate-java> input;
+      handle := <fopen> (java-filename, "w");
+      <fputs> (java, handle);
+      fclose;
+      <call> ("javac", [java-filename]);
+      if ?0 then
+        <call> ("java-to-result", [class-filename]);
+        result := <ReadFromFile> "result.txt"
+      else
+        result := "compilation failed"
+      end

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str	Sun Oct 23 16:55:54 2011	(r23511)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str	Sun Oct 23 18:21:40 2011	(r23512)
@@ -7,6 +7,45 @@
   check
 
 rules
+    
+  calc:
+    Int(i) -> i
+    
+  calc:
+    Plus(x, y) -> <addS> (<calc> x, <calc> y)
 
-  // calc:
-  //  Plus(Int(x), Int(y)) -> Int(<addS> (x, y))
+  calc:
+    Mul(x, y) -> <mulS> (<calc> x, <calc> y)
+    
+  calc:
+    Fact(x) -> "1"
+    where
+      x'  := <calc> x;
+      !x' => "0"
+    
+  calc:
+    Fact(x) -> <mulS> (x', <calc> Fact(Int(x'')))
+    where
+      x' := <calc> x;
+      <gtS> (x', "0");
+      x'' := <subtS> (x', "1")
+
+  calc:
+  	Statements(s*) -> last
+  	where
+  		s'*  := <map(calc)> s*;
+  		last := <last> s'*
+
+  calc:
+    Assign(x, v) -> v'
+    where
+      v' := <calc> v;
+      rules(
+        GetValue: x -> v'
+      )
+
+  calc:
+    Var("PI") -> "3.14"
+
+  calc:
+    Var(v) -> <GetValue> v

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/trans/check.str	Sun Oct 23 16:55:54 2011	(r23511)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/trans/check.str	Sun Oct 23 18:21:40 2011	(r23512)
@@ -8,17 +8,23 @@
 
 rules
   
-  editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
-    with
-      editor-init;
-      analyze;
-      errors   := <constraint-errors> ast;
-      warnings := [];
-      notes    := []
+  analyze =
+    topdown(try(record-var))
 
-  analyze:
-    t -> t
+  record-var:
+    Assign(x, e) -> Assign(x, e)
+    with
+      rules(
+        GetVar :+ x -> x
+      )
+  
+  constraint-error:
+    Var(v) -> (v, $[Unassigned variable])
+    where
+      not(<GetVar> v)
   
-  constraint-errors:
-    t -> []
\ No newline at end of file
+  constraint-error:
+    Var(v) -> (v, $[Multiply assigned variable])
+    where
+      all-vs := <bagof-GetVar> v;
+      <gt> (<length> all-vs, 1)
\ No newline at end of file

Added: spoofax-contrib/calculang/branches/Calculang0Tested/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/trans/generate.str	Sun Oct 23 18:21:40 2011	(r23512)
@@ -0,0 +1,13 @@
+module generate
+
+rules
+  
+  to-java:
+    _ -> $<
+      public class Output {
+        public static void main(String[] args) {
+          System.out.println(42);
+          System.exit(0);
+        }
+      }
+    >
\ No newline at end of file

Added: spoofax-contrib/calculang/branches/Calculang0Tested/trans/refactor.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/trans/refactor.str	Sun Oct 23 18:21:40 2011	(r23512)
@@ -0,0 +1,26 @@
+module refactor
+
+imports
+  include/Calculang
+  calculang
+
+rules
+ 
+  rename-var:
+    (newname, selected-name, position, ast, path, project-path) -> ([(ast, new-ast)], fatal-errors, errors, warnings)
+    with
+      new-ast  := <topdown(try(rename-type(|selected-name, newname)))> ast; 
+      (errors, warnings) := <semantic-constraint-issues> (ast, new-ast);
+      fatal-errors := []
+
+  rename-type(|old-name, new-name):
+    Assign(old-name, y) -> Assign(new-name, y)
+
+  rename-type(|old-name, new-name):
+    Var(old-name) -> Var(new-name)
+    
+  semantic-constraint-issues:
+    (ast, new-ast) -> (<diff>(new-errors, errors), <diff>(new-warnings, warnings))
+    where
+      (_, errors, warnings, _) := <editor-analyze> (ast, "", "");
+      (_, new-errors, new-warnings, _) := <editor-analyze> (new-ast, "", "")

From L.C.L.Kats at tudelft.nl  Sun Oct 23 20:31:11 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 23 Oct 2011 18:31:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23513 - in
	spoofax-contrib/calculang/branches/Calculang0Tested: .
	.externalToolBuilders
Message-ID: <20111023183111.7764ECC0D9@mx4.tudelft.nl>

Author: LennartKats
Date: Sun Oct 23 18:31:10 2011
New Revision: 23513
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23513&sc=1

Log:
configuration

Added:
   spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml
      - copied, changed from r23493, spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0 build.main.xml
Deleted:
   spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0 build.main.xml
Modified:
   spoofax-contrib/calculang/branches/Calculang0Tested/.project

Copied and modified: spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml (from r23493, spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0 build.main.xml)
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0 build.main.xml	Wed Oct 19 12:42:30 2011	(r23493, copy source)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml	Sun Oct 23 18:31:10 2011	(r23513)
@@ -16,8 +16,8 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang0}/build.main.xml"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang0Tested}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang0}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang0Tested}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang0Tested/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0Tested/.project	Sun Oct 23 18:21:40 2011	(r23512)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/.project	Sun Oct 23 18:31:10 2011	(r23513)
@@ -10,7 +10,7 @@
 			<arguments>
 				<dictionary>
 					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/Calculang0 build.main.xml.launch</value>
+					<value>&lt;project&gt;/.externalToolBuilders/Calculang0Tested build.main.xml.launch</value>
 				</dictionary>
 			</arguments>
 		</buildCommand>

From L.C.L.Kats at tudelft.nl  Sun Oct 23 23:23:57 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 23 Oct 2011 21:23:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23514 -
	spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders
Message-ID: <20111023212357.A63B82B8008@mx2.tudelft.nl>

Author: LennartKats
Date: Sun Oct 23 21:23:56 2011
New Revision: 23514
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23514&sc=1

Log:
fixed launcher name

Added:
   spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml.launch
      - copied unchanged from r23513, spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml
Deleted:
   spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml

Copied: spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml.launch (from r23513, spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml.launch	Sun Oct 23 21:23:56 2011	(r23514, copy of r23513, spoofax-contrib/calculang/branches/Calculang0Tested/.externalToolBuilders/Calculang0Tested build.main.xml)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang0Tested}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang0Tested}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

From L.C.L.Kats at tudelft.nl  Sun Oct 23 23:25:45 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 23 Oct 2011 21:25:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23515 - in
	spoofax-contrib/calculang/branches/Calculang5Tested: . editor
	examples syntax tests trans
Message-ID: <20111023212545.12D38CC0C9@mx4.tudelft.nl>

Author: LennartKats
Date: Sun Oct 23 21:25:44 2011
New Revision: 23515
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23515&sc=1

Log:
Calculang tested implementation version

Added:
   spoofax-contrib/calculang/branches/Calculang5Tested/
      - copied from r23493, spoofax-contrib/calculang/branches/Calculang0Tested/
   spoofax-contrib/calculang/branches/Calculang5Tested/tests/3-variables-basic.spt
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/3-variables-basic.spt
   spoofax-contrib/calculang/branches/Calculang5Tested/tests/4-variables-advanced.spt
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/4-variables-advanced.spt
   spoofax-contrib/calculang/branches/Calculang5Tested/tests/5-compilation.spt
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/5-compilation.spt
   spoofax-contrib/calculang/branches/Calculang5Tested/tests/6-execution.spt
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/6-execution.spt
   spoofax-contrib/calculang/branches/Calculang5Tested/tests/7-refactoring.spt
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/7-refactoring.spt
   spoofax-contrib/calculang/branches/Calculang5Tested/tests/x-shell.spt
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/x-shell.spt
   spoofax-contrib/calculang/branches/Calculang5Tested/tests/y-self-application.spt
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/y-self-application.spt
   spoofax-contrib/calculang/branches/Calculang5Tested/trans/generate.str
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/generate.str
   spoofax-contrib/calculang/branches/Calculang5Tested/trans/refactor.str
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/refactor.str
Replaced:
   spoofax-contrib/calculang/branches/Calculang5Tested/editor/Calculang-Builders.esv
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-Builders.esv
   spoofax-contrib/calculang/branches/Calculang5Tested/editor/Calculang-References.esv
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-References.esv
   spoofax-contrib/calculang/branches/Calculang5Tested/examples/example.cal
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang5Tested/syntax/Calculang.sdf
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf
   spoofax-contrib/calculang/branches/Calculang5Tested/tests/1-syntax.spt
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt
   spoofax-contrib/calculang/branches/Calculang5Tested/tests/2-eval.spt
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt
   spoofax-contrib/calculang/branches/Calculang5Tested/trans/calculang.str
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang5Tested/trans/calculate.str
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang5Tested/trans/check.str
      - copied unchanged from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/check.str

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/editor/Calculang-Builders.esv (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-Builders.esv)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/editor/Calculang-Builders.esv	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-Builders.esv)
@@ -0,0 +1,29 @@
+module Calculang-Builders
+
+imports Calculang-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                                               
+  provider: include/calculang.ctree      
+  
+  observer: editor-analyze                                                                                   
+                                                                                                                               
+  builder: "Show abstract syntax (for selection)" =
+  	generate-aterm (openeditor) (realtime) (meta) (source)                                                                              
+                                                                                                                               
+  builder: "To Java (for selection)" =
+    generate-java (openeditor) (realtime) (source)                                                                              
+                                                                                                                               
+  builder: "Compile and run Java (for selection)" =
+    generate-result (openeditor) (realtime) (source)
+  
+  refactoring ID : "Rename" = rename-var
+  shortcut: "org.eclipse.jdt.ui.edit.text.java.rename.element"
+  input
+    identifier : "New Name"
\ No newline at end of file

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/editor/Calculang-References.esv (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-References.esv)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/editor/Calculang-References.esv	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/editor/Calculang-References.esv)
@@ -0,0 +1,18 @@
+module Calculang-References
+
+imports Calculang-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+               
+  reference _ :
+    editor-resolve 
+  
+  completion proposer:
+    editor-complete
\ No newline at end of file

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/examples/example.cal (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/examples/example.cal)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/examples/example.cal	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/examples/example.cal)
@@ -0,0 +1,2 @@
+x = 1
+x
\ No newline at end of file

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/syntax/Calculang.sdf (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/syntax/Calculang.sdf	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/syntax/Calculang.sdf)
@@ -0,0 +1,34 @@
+module Calculang
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+    
+    Exp -> Start {prefer}
+    INT -> Exp   {cons("Int")}
+    
+    Exp "*" Exp -> Exp {cons("Mul")}
+    Exp "+" Exp -> Exp {cons("Plus")}
+    
+    "(" Exp ")" -> Exp {bracket}
+    
+    Exp "!" -> Exp {cons("Fact"), right}
+    
+  context-free priorities
+    
+    Exp "*" Exp -> Exp {left}
+  >
+    Exp "+" Exp -> Exp {left}
+    
+  context-free syntax
+    
+    Stm*       -> Start {cons("Statements")}
+    ID "=" Exp -> Stm {cons("Assign")}
+    Exp        -> Stm
+    ID         -> Exp {cons("Var")}
+    

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/tests/1-syntax.spt (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/tests/1-syntax.spt	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/1-syntax.spt)
@@ -0,0 +1,43 @@
+module syntax 
+
+language Calculang
+
+test Add [[
+  1 + 2
+]] parse succeeds
+
+test Multiply [[
+  1 * 2
+]]
+
+test Abstract syntax (1) [[
+  1
+]]
+  parse to Int("1")
+
+test Abstract syntax (2) [[
+  1 * 2
+]]
+  parse to Mul(Int("1"), Int("2"))
+
+test Parentheses [[
+  (1 + 2)
+]]
+
+test Multiply and add [[
+  1 + 2 * 3
+]] parse to [[
+  1 + (2 * 3)
+]]
+
+test Add and multiply [[
+  1 * 2 + 3
+]] parse to [[
+  (1 * 2) + 3
+]]
+
+test Add and add [[
+  1 + 2 + 3
+]] parse to [[
+  (1 + 2) + 3
+]]

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/tests/2-eval.spt (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/tests/2-eval.spt	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/2-eval.spt)
@@ -0,0 +1,23 @@
+module eval 
+
+language Calculang
+
+test Constant [[
+  1
+]] run calc to "1"
+
+test Add [[
+  1 + 1
+]] run calc to "2"
+
+test Multiply [[
+  2 * 2
+]] run calc to "4"
+
+test Multiply and add [[
+  2 * 2 + 1
+]] run calc to "5"
+
+test Factorial [[
+	5! 
+]] run calc to "120"
\ No newline at end of file

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/tests/3-variables-basic.spt (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/3-variables-basic.spt)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/tests/3-variables-basic.spt	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/3-variables-basic.spt)
@@ -0,0 +1,32 @@
+module variables-basic
+
+language Calculang
+
+test Variable [[
+  x
+]] parse
+
+test Assignment [[
+  x = 4
+]] parse
+
+test Multiple statements [[
+	x
+	x
+]] parse to Statements([Var("x"), Var("x")])
+
+test Eval constant [[
+  PI
+]] run calc to "3.14"
+
+test Eval variable [[
+  x = 4
+  y = x * 2
+  y
+]] run calc to "8"
+
+test Eval multiple variables [[
+  x = 2
+  y = x * 2 + x
+  y
+]] run calc to "6"

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/tests/4-variables-advanced.spt (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/4-variables-advanced.spt)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/tests/4-variables-advanced.spt	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/4-variables-advanced.spt)
@@ -0,0 +1,33 @@
+module variables-basic
+
+language Calculang
+
+test Variable unassigned [[
+  y
+]] 1 error /unassigned/
+
+test Multiply assigned variable [[
+  y = 1
+  y = 2
+  y
+]] /multiply assigned/
+
+test Eval variable [[
+  x = 4
+  x
+]] run calc to "4"
+
+test Reference resolving (1) [[
+  x = 4
+  [[x]]
+]] resolve
+
+test Reference resolving (2) [[
+  [[x]] = 4
+  [[x]]
+]] resolve #2 to #1
+
+test Content completion [[
+  avariable = 1
+  [[a]]
+]] complete to "avariable"

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/tests/5-compilation.spt (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/5-compilation.spt)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/tests/5-compilation.spt	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/5-compilation.spt)
@@ -0,0 +1,12 @@
+module execution 
+
+language Calculang
+
+test Constant [[
+  1
+]] build generate-java 
+
+test Constant [[
+  1 + 2
+]] build generate-java 
+

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/tests/6-execution.spt (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/6-execution.spt)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/tests/6-execution.spt	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/6-execution.spt)
@@ -0,0 +1,11 @@
+module execution 
+
+language Calculang
+
+test 42 [[
+  42
+]] build generate-result to 42
+
+test 42, part deux [[
+  41 + 1
+]] build generate-result to 42

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/tests/7-refactoring.spt (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/7-refactoring.spt)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/tests/7-refactoring.spt	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/7-refactoring.spt)
@@ -0,0 +1,28 @@
+module refactoring 
+
+language Calculang
+
+test Basic rename [[
+  a = 1
+  [[a]]
+]] refactor rename-var("b") to [[
+  b = 1
+  b
+]]
+
+test Another rename [[
+  a = 1
+  b = 2
+  [[a]]
+]] refactor rename-var("c") to [[
+  c = 1
+  b = 2
+  c
+]]
+
+test Rename collission [[
+  a = 1
+  b = 1
+  [[a]]
+]] refactor rename-var("b") to _
+   1 error

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/tests/x-shell.spt (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/x-shell.spt)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/tests/x-shell.spt	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/x-shell.spt)
@@ -0,0 +1,18 @@
+module shell
+
+language Calculang
+
+test Arithmetic API
+  <mul> (1, 3) => 6
+
+test String-based arithmetic API
+  <mulS> ("1", "3") => "6"
+
+test Foo 
+  let
+    foo = !4
+  in
+    foo;
+    debug
+  end
+

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/tests/y-self-application.spt (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/y-self-application.spt)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/tests/y-self-application.spt	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/tests/y-self-application.spt)
@@ -0,0 +1,35 @@
+module self-application 
+
+language Spoofax-Testing
+
+test A test of a test [[[
+  
+  module testset
+  
+  language Calculang
+  
+  test Add [[
+    1 + 2
+  ]] parse succeeds
+  
+  test Multiply [[
+    1 * 2
+  ]] run calc to "2"
+  
+]]]
+
+test A test of a test [[[
+  
+  module testset
+  
+  language Calculang
+  
+  test Add [[
+    1 + 2
+  ]] parse succeeds
+  
+  test Multiply [[
+    1 * 2
+  ]] run calc to "2"
+  
+]]]

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/trans/calculang.str (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculang.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/trans/calculang.str	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculang.str)
@@ -0,0 +1,65 @@
+module calculang
+
+imports
+  libstratego-lib
+  include/Calculang
+  lib/editor-common.generated
+  check
+  calculate
+  generate
+  refactor
+
+rules // Main editor interface (defined by editor/Calculang-Builders and -References.esv)
+  
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+      
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error)> ast;
+      warnings := [];
+      notes    := []
+
+  editor-resolve:
+    (Var(x), position, ast, path, project-path) -> target
+    where
+      rules(Var: "dummy" -> "dummy");
+      target := <GetVar> x
+
+  editor-complete:
+    (Var(x), position, ast, path, project-path) -> targets
+    where
+      editor-init;
+      analyze;
+      targets := <all-keys-GetVar> x
+
+  generate-result:
+    input @ (selected, position, ast, path, project-path) -> (out-filename, result)
+    with
+      out-filename   := <guarantee-extension(|"out")> path;
+      java-filename  := "Output.java";
+      class-dir      := <dirname> path;
+      class-filename := "Output";
+      (_, java)      := <generate-java> input;
+      handle := <fopen> (java-filename, "w");
+      <fputs> (java, handle);
+      fclose;
+      <call> ("javac", [java-filename]);
+      if ?0 then
+        <call> ("java-to-result", [class-filename]);
+        result := <ReadFromFile> "result.txt"
+      else
+        result := "compilation failed"
+      end

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/trans/calculate.str (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/trans/calculate.str	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/calculate.str)
@@ -0,0 +1,51 @@
+module calculate
+
+imports
+  libstratego-lib
+  include/Calculang
+  lib/editor-common.generated
+  check
+
+rules
+    
+  calc:
+    Int(i) -> i
+    
+  calc:
+    Plus(x, y) -> <addS> (<calc> x, <calc> y)
+
+  calc:
+    Mul(x, y) -> <mulS> (<calc> x, <calc> y)
+    
+  calc:
+    Fact(x) -> "1"
+    where
+      x'  := <calc> x;
+      !x' => "0"
+    
+  calc:
+    Fact(x) -> <mulS> (x', <calc> Fact(Int(x'')))
+    where
+      x' := <calc> x;
+      <gtS> (x', "0");
+      x'' := <subtS> (x', "1")
+
+  calc:
+  	Statements(s*) -> last
+  	where
+  		s'*  := <map(calc)> s*;
+  		last := <last> s'*
+
+  calc:
+    Assign(x, v) -> v'
+    where
+      v' := <calc> v;
+      rules(
+        GetValue: x -> v'
+      )
+
+  calc:
+    Var("PI") -> "3.14"
+
+  calc:
+    Var(v) -> <GetValue> v

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/trans/check.str (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/check.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/trans/check.str	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/check.str)
@@ -0,0 +1,30 @@
+module check
+
+imports
+  libstratego-lib
+  include/Calculang
+  lib/editor-common.generated
+  calculate
+
+rules
+  
+  analyze =
+    topdown(try(record-var))
+
+  record-var:
+    Assign(x, e) -> Assign(x, e)
+    with
+      rules(
+        GetVar :+ x -> x
+      )
+  
+  constraint-error:
+    Var(v) -> (v, $[Unassigned variable])
+    where
+      not(<GetVar> v)
+  
+  constraint-error:
+    Var(v) -> (v, $[Multiply assigned variable])
+    where
+      all-vs := <bagof-GetVar> v;
+      <gt> (<length> all-vs, 1)
\ No newline at end of file

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/trans/generate.str (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/generate.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/trans/generate.str	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/generate.str)
@@ -0,0 +1,13 @@
+module generate
+
+rules
+  
+  to-java:
+    _ -> $<
+      public class Output {
+        public static void main(String[] args) {
+          System.out.println(42);
+          System.exit(0);
+        }
+      }
+    >
\ No newline at end of file

Copied: spoofax-contrib/calculang/branches/Calculang5Tested/trans/refactor.str (from r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/refactor.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5Tested/trans/refactor.str	Sun Oct 23 21:25:44 2011	(r23515, copy of r23512, spoofax-contrib/calculang/branches/Calculang0Tested/trans/refactor.str)
@@ -0,0 +1,26 @@
+module refactor
+
+imports
+  include/Calculang
+  calculang
+
+rules
+ 
+  rename-var:
+    (newname, selected-name, position, ast, path, project-path) -> ([(ast, new-ast)], fatal-errors, errors, warnings)
+    with
+      new-ast  := <topdown(try(rename-type(|selected-name, newname)))> ast; 
+      (errors, warnings) := <semantic-constraint-issues> (ast, new-ast);
+      fatal-errors := []
+
+  rename-type(|old-name, new-name):
+    Assign(old-name, y) -> Assign(new-name, y)
+
+  rename-type(|old-name, new-name):
+    Var(old-name) -> Var(new-name)
+    
+  semantic-constraint-issues:
+    (ast, new-ast) -> (<diff>(new-errors, errors), <diff>(new-warnings, warnings))
+    where
+      (_, errors, warnings, _) := <editor-analyze> (ast, "", "");
+      (_, new-errors, new-warnings, _) := <editor-analyze> (new-ast, "", "")

From M.A.Akhter at student.tudelft.nl  Mon Oct 24 00:18:48 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 23 Oct 2011 22:18:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23516 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang spxlang/index
Message-ID: <20111023221848.7A1CBCC06F@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Oct 23 22:18:48 2011
New Revision: 23516
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23516&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_related_files_of_packages.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sun Oct 23 21:25:44 2011	(r23515)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sun Oct 23 22:18:48 2011	(r23516)
@@ -28,11 +28,11 @@
 		SpxSemanticIndex spxIndex= new SpxSemanticIndex();
 		add(new SPX_exec_index_manage_command(spxIndex));
 		
-		//primitives to index spoofaxlang compilation unit 
+		// primitives to index spoofaxlang compilation unit 
 		add(new SPX_index_compilation_unit(spxIndex));
 		add(new SPX_index_get_compilation_unit(spxIndex));
 		
-		//primitives to index packages, language descriptions  and modules 
+		// primitives to index packages, language descriptions  and modules 
 		add(new SPX_index_package_declaration(spxIndex));
 		add(new SPX_index_language_descriptor(spxIndex));
 		add(new SPX_index_module_definition(spxIndex));
@@ -44,20 +44,18 @@
 		add(new SPX_index_get_module_definition(spxIndex));
 		add(new SPX_index_get_module_declarations_of(spxIndex));
 		add(new SPX_index_get_package_declarations_of(spxIndex));
-		
 		add(new SPX_index_get_imports(spxIndex));
+		add(new SPX_index_get_related_files_of_packages(spxIndex));
 		
-		//Primitives related to symbol-table - i.e. symbol definition and resolving
+		// Primitives related to symbol-table - i.e. symbol definition and resolving
 		add(new SPX_symtab_new_scope(spxIndex));
 		add(new SPX_symtab_destroy_scope(spxIndex));
 		add(new SPX_symtab_define_symbol(spxIndex));
 		add(new SPX_symtab_resolve_symbols(spxIndex));
 		add(new SPX_symtab_undefine_symbols(spxIndex));
-		
 	}
 
 	public String getOperatorRegistryName() {
 		return REGISTRY_NAME;
 	}
-
 }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_related_files_of_packages.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_related_files_of_packages.java	Sun Oct 23 22:18:48 2011	(r23516)
@@ -0,0 +1,40 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class SPX_index_get_related_files_of_packages extends SpxAbstractPrimitive {
+    private final static String NAME = "SPX_index_get_related_files_of_packages";
+    private final static int PACKAGE_LIST_INDEX = 1;
+    private final static int NO_ARGS = 2;
+
+    public SPX_index_get_related_files_of_packages(SpxSemanticIndex index) {
+    	super(index, NAME, 0, NO_ARGS);
+    }
+    
+    @Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateListTermAt(PACKAGE_LIST_INDEX);
+					
+	}
+
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoList packageList= (IStrategoList) tvars[PACKAGE_LIST_INDEX];
+		
+		IStrategoTerm retTerm = index.getRelatedFilesOfPackages(getProjectPath(tvars), packageList);
+		env.setCurrent(retTerm);
+		return true;
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sun Oct 23 21:25:44 2011	(r23515)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sun Oct 23 22:18:48 2011	(r23516)
@@ -132,6 +132,16 @@
 			return this;
 		}
 
+		SpxPrimitiveValidator validateListTermAt(int ordinal){
+			if(!Tools.isTermList(tvars[ordinal])){
+				throwException( "Illegal Arugments. Expected "
+						+" [TermList] "
+						+"at ordinal : "+ ordinal
+						+"actual : " +  tvars[ordinal]);
+			}
+			return this;
+		}
+		
 		SpxPrimitiveValidator validateApplTermAt(int ordinal){
 			if(!Tools.isTermAppl(tvars[ordinal])){
 				throwException( "Illegal Arugments. Expected "

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sun Oct 23 21:25:44 2011	(r23515)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sun Oct 23 22:18:48 2011	(r23516)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
@@ -118,7 +119,19 @@
 		}.executeWith(projectPath, packageTypedQname);
 		
 	}
-
+	
+	public IStrategoTerm getRelatedFilesOfPackages(IStrategoString projectPath, IStrategoList packageList)   throws Exception{
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm term)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
+					return idxFacade.getRelatedFilesOfPackages((IStrategoList)term);
+			}
+		}.executeWith(projectPath, packageList);
+	}
+	
 	public IStrategoTerm getPackageDeclarationsByUri(IStrategoString projectPath, IStrategoString compilationUnitUri)  throws Exception{
 		return new SpxResolver() {
 			@Override
@@ -272,4 +285,6 @@
 
 	
 
+	
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sun Oct 23 21:25:44 2011	(r23515)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sun Oct 23 22:18:48 2011	(r23516)
@@ -32,6 +32,7 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.terms.TermConverter;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.terms.StrategoListIterator;
 import org.spoofax.terms.attachments.TermAttachmentSerializer;
 import org.spoofax.terms.attachments.TermAttachmentStripper;
 
@@ -583,10 +584,33 @@
 		return lookupPackageDecl(packageId);
 	}
 	
-	
 
-	public IStrategoList getPackageDeclarations(IStrategoString filePath) {
+	public IStrategoTerm getRelatedFilesOfPackages(IStrategoList packageList) {
+		logMessage("getRelatedFilesOfPackages | Arguments : " + packageList);
+		
+		HashSet<String> resourcePaths = new HashSet<String>();
+		
+		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
+		for (IStrategoTerm packageName: StrategoListIterator.iterable(packageList)) {
+			IStrategoAppl packageTypedQName = (IStrategoAppl)packageName;
+			IStrategoList packageId = PackageDeclaration.getPackageId(this, packageTypedQName);
+			
+			PackageDeclaration decl = table.getPackageDeclaration(packageId);
+			if(decl!=null){
+				resourcePaths.addAll(decl.getAllFilePaths());
+			}
+		}
+		
+		logMessage("getRelatedFilesOfPackages | Found : " + resourcePaths);
+		IStrategoList result = this.getTermFactory().makeList();
+		for (String s : resourcePaths){
+			result = getTermFactory().makeListCons(getTermFactory().makeString(s), result);
+		}
+		
+		return result;
+	}
 
+	public IStrategoList getPackageDeclarations(IStrategoString filePath) {
 		logMessage("getPackageDeclarationsByUri | Arguments : " + filePath);
 
 		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
@@ -801,9 +825,11 @@
 	 */
 	public void persistChanges() throws IOException {
 		_persistenceManager.commit();
-
-		_persistenceManager.spxSymbolTable().printSymbols("commit",
-				this.getProjectPath(), this.indexId());
+		
+		if(Utils.DEBUG){
+			_persistenceManager.spxSymbolTable().printSymbols("commit",
+					this.getProjectPath(), this.indexId());
+		}
 
 	}
 	
@@ -1079,4 +1105,5 @@
 		
 	}
 
+
 }

From m.dejonge at tudelft.nl  Mon Oct 24 13:53:12 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 24 Oct 2011 11:53:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23517 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20111024115312.588DD2B8003@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Oct 24 11:53:11 2011
New Revision: 23517
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23517&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java	Sun Oct 23 22:18:48 2011	(r23516)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java	Mon Oct 24 11:53:11 2011	(r23517)
@@ -110,7 +110,7 @@
 	/**
 	 * Separation between first and second (TODO: average) list element:
 	 * - consists of newlines, spaces, tabs and separator (if any)
-	 * - null in case (parent) element is not a list, or is a list with 0 or 1 element
+	 * - null in case (parent) element is not an origin list, or is a list with 0 or 1 element
 	 */
 	public String getSeparation() {
 		return getSeparationString();

From m.dejonge at tudelft.nl  Mon Oct 24 17:00:21 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 24 Oct 2011 15:00:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23518 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20111024150021.830A07F8044@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Oct 24 15:00:21 2011
New Revision: 23518
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23518&sc=1

Log:
access to token sorts, used to guide the generation of testcases for the incomplete construct category

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java   (contents, props changed)
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Mon Oct 24 11:53:11 2011	(r23517)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Mon Oct 24 15:00:21 2011	(r23518)
@@ -23,6 +23,7 @@
 		
 		add(new OriginNonLayoutTokensPrimitive());
 		add(new OriginTokensPrimitive());
+		add(new OriginTokenStreamPrimitive());
 
 		//origin term strategies
 		add(new OriginSublistTermPrimitive());

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java	Mon Oct 24 15:00:21 2011	(r23518)
@@ -0,0 +1,38 @@
+package org.spoofax.interpreter.library.jsglr.origin;
+
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
+
+import java.util.ArrayList;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+
+/**
+ * Tokens, ignoring layout
+ */
+public class OriginTokenStreamPrimitive extends AbstractOriginPrimitive {
+	
+	public OriginTokenStreamPrimitive() {
+		super("SSL_EXT_origin_token_stream");
+	}
+
+	@Override
+	public IStrategoTerm call(IContext env, IStrategoTerm origin) {
+		ITokenizer tokenizer=getTokenizer(origin);
+		int startIndex=getLeftToken(origin).getIndex();
+		int endIndex = getRightToken(origin).getIndex();
+		ArrayList<IStrategoTerm> tokenTuples=new ArrayList<IStrategoTerm>();
+		for (int i = startIndex; i <= endIndex; i++) {
+			if(tokenizer.getTokenAt(i).getKind() != IToken.TK_EOF){
+				IStrategoTerm tokenText = env.getFactory().makeString(tokenizer.getTokenAt(i).toString());
+				IStrategoTerm tokenSort = env.getFactory().makeInt(tokenizer.getTokenAt(i).getKind());
+				tokenTuples.add(env.getFactory().makeTuple(tokenText, tokenSort));
+			}
+		}		
+		return env.getFactory().makeList(tokenTuples);
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java	Mon Oct 24 11:53:11 2011	(r23517)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java	Mon Oct 24 15:00:21 2011	(r23518)
@@ -8,6 +8,7 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
 
 /**
@@ -26,7 +27,7 @@
 		int endIndex = getRightToken(origin).getIndex();
 		ArrayList<IStrategoTerm> tokenStrings=new ArrayList<IStrategoTerm>();
 		for (int i = startIndex; i <= endIndex; i++) {
-			//if(tokenizer.getTokenAt(i).getKind() != IToken.TK_LAYOUT)
+			if(tokenizer.getTokenAt(i).getKind() != IToken.TK_EOF)
 				tokenStrings.add(env.getFactory().makeString(tokenizer.getTokenAt(i).toString()));
 		}		
 		return env.getFactory().makeList(tokenStrings);

From m.dejonge at tudelft.nl  Mon Oct 24 17:32:59 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 24 Oct 2011 15:32:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23519 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20111024153259.A3B8A108C030@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Oct 24 15:32:59 2011
New Revision: 23519
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23519&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java	Mon Oct 24 15:00:21 2011	(r23518)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java	Mon Oct 24 15:32:59 2011	(r23519)
@@ -12,7 +12,7 @@
 import org.spoofax.jsglr.client.imploder.ITokenizer;
 
 /**
- * Tokens, ignoring layout
+ * Tokens + TokenKind
  */
 public class OriginTokenStreamPrimitive extends AbstractOriginPrimitive {
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java	Mon Oct 24 15:00:21 2011	(r23518)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java	Mon Oct 24 15:32:59 2011	(r23519)
@@ -12,7 +12,7 @@
 import org.spoofax.jsglr.client.imploder.ITokenizer;
 
 /**
- * Tokens, ignoring layout
+ * Tokens
  */
 public class OriginTokensPrimitive extends AbstractOriginPrimitive {
 	

From tobivollebregt at gmail.com  Mon Oct 24 17:46:52 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 24 Oct 2011 15:46:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23520 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: .
	editor editor/java/org/strategoxt/imp/editors/spoofax
Message-ID: <20111024154652.C8F322B8056@mx2.tudelft.nl>

Author: tvo
Date: Mon Oct 24 15:46:52 2011
New Revision: 23520
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23520&sc=1

Log:
svn-ignore a bunch of generated files

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/   (props changed)

From tobivollebregt at gmail.com  Mon Oct 24 17:47:31 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 24 Oct 2011 15:47:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23521 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax
Message-ID: <20111024154731.69FA47F8056@mx1.tudelft.nl>

Author: tvo
Date: Mon Oct 24 15:47:31 2011
New Revision: 23521
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23521&sc=1

Log:
fix project file

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project	Mon Oct 24 15:46:52 2011	(r23520)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project	Mon Oct 24 15:47:31 2011	(r23521)
@@ -1,43 +1,33 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>org.strategoxt.imp.editors.spoofax</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
-			<triggers>full,incremental,</triggers>
-			<arguments>
-				<dictionary>
-					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/org.eclipse.jdt.core.javabuilder.launch</value>
-				</dictionary>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
-			<triggers>full,incremental,</triggers>
-			<arguments>
-				<dictionary>
-					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/SpoofaxLang build.main.xml.launch</value>
-				</dictionary>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.pde.ManifestBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.pde.SchemaBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.pde.PluginNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.editors.spoofax</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/SpoofaxLang build.main.xml.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

From L.C.L.Kats at tudelft.nl  Mon Oct 24 22:51:25 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Oct 2011 20:51:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23522 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111024205125.DC4072B8044@mx2.tudelft.nl>

Author: LennartKats
Date: Mon Oct 24 20:51:25 2011
New Revision: 23522
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23522&sc=1

Log:
basic support for string-based output matching

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Mon Oct 24 15:47:31 2011	(r23521)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Mon Oct 24 20:51:25 2011	(r23522)
@@ -142,8 +142,26 @@
   check-builder-expectation(|result) :
     ATerm(p) -> $[Unexpected output: [<write-to-string> result]]
     where
-      result' := <explode-aterm> result;
-      not(<aterm-eq> (result', p))
+      if <is-string> result; !p => fun(quoted(p')) then
+        not(<is-string-equal-modulo-whitespace> (result, <un-double-quote> p'))
+      else
+        result' := <explode-aterm> result;
+        not(<aterm-eq> (result', p))
+      end
+  
+  is-string-equal-modulo-whitespace:
+    (a, b) -> (a, b)
+    with
+      a' := <strip-whitespace> a;
+      b' := <strip-whitespace> b
+    where
+      <eq> (a', b')
+  
+  strip-whitespace =
+    string-replace(|" ", "");
+    string-replace(|"\n", "");
+    string-replace(|"\r", "");
+    string-replace(|"\t", "")
 
   check-builder-expectation(|result) :
   	(expected-ast, expected-problems) -> <separate-by(|"; "); concat-strings> refactor-errors

From L.C.L.Kats at tudelft.nl  Mon Oct 24 23:47:10 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Oct 2011 21:47:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23523 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	services stratego
Message-ID: <20111024214710.DCD36CC06F@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Oct 24 21:47:10 2011
New Revision: 23523
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23523&sc=1

Log:
instanceof check and uncommitted completion-related changes

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Mon Oct 24 20:51:25 2011	(r23522)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Mon Oct 24 21:47:10 2011	(r23523)
@@ -6,6 +6,7 @@
 import static org.spoofax.terms.Term.tryGetConstructor;
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
 import static org.spoofax.terms.attachments.ParentAttachment.getRoot;
+import static org.spoofax.terms.attachments.OriginAttachment.tryGetOrigin;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -224,15 +225,15 @@
 			return getParent(oNode);
 		
 		IStrategoTerm result = oNode;
-		IToken left = getLeftToken(result);
+		IToken left = getLeftToken(tryGetOrigin(result));
 		if (left == null) return oNode;
 		int startOffset = left.getStartOffset();
-		int endOffset = getRightToken(result).getEndOffset();
+		int endOffset = getRightToken(tryGetOrigin(result)).getEndOffset();
 		while (getParent(result) != null
 				&& !getParent(result).isList()
 				&& (getParent(result).getSubtermCount() <= 1 
-						|| (getLeftToken(getParent(result)).getStartOffset() >= startOffset
-							&& getRightToken(getParent(result)).getEndOffset() <= endOffset)))
+						|| (getLeftToken(tryGetOrigin(getParent(result))).getStartOffset() >= startOffset
+							&& getRightToken(tryGetOrigin(getParent(result))).getEndOffset() <= endOffset)))
 			result = getParent(result);
 		return result;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Oct 24 20:51:25 2011	(r23522)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Oct 24 21:47:10 2011	(r23523)
@@ -250,7 +250,6 @@
 	
 	/**
 	 * Returns the Spoofax language descript project this observer is associated with.
-	 * @return
 	 */
 	public IProject getProject()
 	{
@@ -469,7 +468,8 @@
 		IStrategoTerm ast = (IStrategoTerm) parseController.getCurrentAst();
 		if (ast == null /* UNDONE: || tryGetConstructor(ast) == null*/ || feedbackFunction == null
 				|| isRecoveryFailed(parseController)) {
-			messages.clearMarkers(((SGLRParseController) parseController).getResource());
+			if (parseController instanceof SGLRParseController)
+				messages.clearMarkers(((SGLRParseController) parseController).getResource());
 			messages.commitAllChanges();
 			return;
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java	Mon Oct 24 20:51:25 2011	(r23522)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java	Mon Oct 24 21:47:10 2011	(r23523)
@@ -52,6 +52,11 @@
 	public static IResource getResource(ISimpleTerm term) {
 		SourceAttachment resource = ParentAttachment.getRoot(term).getAttachment(TYPE);
 		if (resource == null) {
+			while (term.getAttachment(ImploderAttachment.TYPE) == null && term.getSubtermCount() > 0)
+				term = term.getSubterm(0);
+			if (term.getAttachment(ImploderAttachment.TYPE) == null)
+				return null;
+			
 			String file = ImploderAttachment.getFilename(term);
 			try {
 				return file == null ? null : EditorIOAgent.getResource(new File(file));

From L.C.L.Kats at tudelft.nl  Tue Oct 25 02:09:25 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 25 Oct 2011 00:09:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23524 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111025000925.8A29DCC05A@mx4.tudelft.nl>

Author: LennartKats
Date: Tue Oct 25 00:09:25 2011
New Revision: 23524
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23524&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Mon Oct 24 21:47:10 2011	(r23523)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Tue Oct 25 00:09:25 2011	(r23524)
@@ -116,10 +116,9 @@
        
         language (<spt-get-default-language <+ !"Language">)
        
-        test First test [[
+        test ), " ", "description", " ", $([[
         ), "  ", "test", $(
-       ]]
-       )
+       ]]), " "
     ]]
 	
   editor-complete:

From m.dejonge at tudelft.nl  Tue Oct 25 10:25:05 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 25 Oct 2011 08:25:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23525 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20111025082505.4B603108C00B@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Oct 25 08:25:03 2011
New Revision: 23525
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23525&sc=1

Log:


Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenExpandPrimitive.java   (contents, props changed)
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Tue Oct 25 00:09:25 2011	(r23524)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Tue Oct 25 08:25:03 2011	(r23525)
@@ -24,6 +24,7 @@
 		add(new OriginNonLayoutTokensPrimitive());
 		add(new OriginTokensPrimitive());
 		add(new OriginTokenStreamPrimitive());
+		add(new OriginTokenExpandPrimitive());
 
 		//origin term strategies
 		add(new OriginSublistTermPrimitive());

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenExpandPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenExpandPrimitive.java	Tue Oct 25 08:25:03 2011	(r23525)
@@ -0,0 +1,61 @@
+package org.spoofax.interpreter.library.jsglr.origin;
+
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
+
+import java.util.ArrayList;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+
+/**
+ * Tokens
+ */
+public class OriginTokenExpandPrimitive extends AbstractOriginPrimitive {
+	
+	public OriginTokenExpandPrimitive() {
+		super("SSL_EXT_origin_token_expand");
+	}
+
+	@Override
+	public IStrategoTerm call(IContext env, IStrategoTerm origin) {
+		ITokenizer tokenizer=getTokenizer(origin);
+		int startIndex=getLeftToken(origin).getIndex();
+		int endIndex = getRightToken(origin).getIndex();
+		ArrayList<IStrategoTerm> resultTerms=new ArrayList<IStrategoTerm>();
+		int i = startIndex;
+		while (i <= endIndex) {
+			IToken tok = tokenizer.getTokenAt(i);
+			if(tok.getKind() != IToken.TK_EOF){
+				IStrategoTerm containingSubTerm = getContainingSubTerm(i, origin);
+				if(containingSubTerm != null){
+					resultTerms.add(containingSubTerm);
+					i = getRightToken(containingSubTerm).getIndex();
+				}
+				else {
+					resultTerms.add(env.getFactory().makeString(tokenizer.getTokenAt(i).toString()));
+				}
+			}
+			i += 1;
+		}		
+		return env.getFactory().makeList(resultTerms);
+	}
+	
+	private boolean inTokenRange(int tokenIndex, IStrategoTerm origin){
+		int startIndex=getLeftToken(origin).getIndex();
+		int endIndex = getRightToken(origin).getIndex();
+		return startIndex <= tokenIndex && tokenIndex <= endIndex; 
+	}
+
+	private IStrategoTerm getContainingSubTerm(int tokenIndex, IStrategoTerm origin){
+		IStrategoTerm[] subTerms = origin.getAllSubterms();
+		for (int i = 0; i < subTerms.length; i++) {
+			if(inTokenRange(tokenIndex, subTerms[i]))
+				return subTerms[i];
+		}
+		return null;
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java	Tue Oct 25 00:09:25 2011	(r23524)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java	Tue Oct 25 08:25:03 2011	(r23525)
@@ -30,7 +30,8 @@
 			if(tokenizer.getTokenAt(i).getKind() != IToken.TK_EOF){
 				IStrategoTerm tokenText = env.getFactory().makeString(tokenizer.getTokenAt(i).toString());
 				IStrategoTerm tokenSort = env.getFactory().makeInt(tokenizer.getTokenAt(i).getKind());
-				tokenTuples.add(env.getFactory().makeTuple(tokenText, tokenSort));
+				IStrategoTerm tokenIndex = env.getFactory().makeInt(i);
+				tokenTuples.add(env.getFactory().makeTuple(tokenIndex, tokenText, tokenSort));
 			}
 		}		
 		return env.getFactory().makeList(tokenTuples);

From m.dejonge at tudelft.nl  Tue Oct 25 10:58:22 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 25 Oct 2011 08:58:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23526 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20111025085822.18536CC0A0@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Oct 25 08:58:21 2011
New Revision: 23526
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23526&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Tue Oct 25 08:25:03 2011	(r23525)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Tue Oct 25 08:58:21 2011	(r23526)
@@ -21,6 +21,7 @@
 		add(new OriginTextPrimitive());
 		add(new OriginEqualPrimitive());
 		
+		//token access primitives
 		add(new OriginNonLayoutTokensPrimitive());
 		add(new OriginTokensPrimitive());
 		add(new OriginTokenStreamPrimitive());

From m.dejonge at tudelft.nl  Tue Oct 25 13:07:48 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 25 Oct 2011 11:07:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23527 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20111025110748.F2A16CC06E@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Oct 25 11:07:47 2011
New Revision: 23527
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23527&sc=1

Log:
add origin-offset to lib

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str	Tue Oct 25 08:58:21 2011	(r23526)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str	Tue Oct 25 11:07:47 2011	(r23527)
@@ -138,6 +138,7 @@
   
   origin-term      = prim("SSL_EXT_origin_term", <id>)
   origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-offset    = prim("SSL_EXT_origin_offset", <id>)
   origin-location  = prim("SSL_EXT_origin_location", <id>)
   origin-line      = origin-location => (<id>, _, _, _)
   origin-column    = origin-location => (_, <id>, _, _)

From M.A.Akhter at student.tudelft.nl  Tue Oct 25 18:24:02 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 25 Oct 2011 16:24:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23528 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. data tests
Message-ID: <20111025162402.B08512B8073@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Oct 25 16:24:02 2011
New Revision: 23528
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23528&sc=1

Log:
+ added more unit tests

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Tue Oct 25 11:07:47 2011	(r23527)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Tue Oct 25 16:24:02 2011	(r23528)
@@ -56,7 +56,6 @@
 			
 		symbols = new HashMap<SpxSymbolKey, List<SpxSymbol>>();
 	}
-
 	public INamespace define(SpxSymbolTableEntry entry, SpxSemanticIndexFacade f){
 		entry.value.setNamespace(_currentNamespaceId);
 		
@@ -65,7 +64,6 @@
 		//f.persistenceManager().spxSymbolTable().commit();
 		return this;
 	}
-	
 	public Set<SpxSymbol> undefineSymbols(IStrategoTerm searchingFor, IStrategoTerm type , SpxSemanticIndexFacade  facade){
 		SpxSymbolKey key = new SpxSymbolKey(searchingFor);
 		Set<SpxSymbol> undefinedSymbols = new HashSet<SpxSymbol>();
@@ -90,8 +88,6 @@
 		//facade.persistenceManager().spxSymbolTable().commit();
 		return undefinedSymbols;
 	}
-
-	
 	/**
 	 * Defines symbol in this Namespace. Define does not replace  
 	 * old symbol mapped using the key with the new one. It just adds the 
@@ -111,8 +107,6 @@
 			symbols.put( key , values );
 		}
 	}
-	
-	
 	private static List<SpxSymbol> appendSymbols( List<SpxSymbol> origin , List<SpxSymbol> symbols){
 		if(symbols != null){
 			origin.addAll(symbols);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Tue Oct 25 11:07:47 2011	(r23527)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Tue Oct 25 16:24:02 2011	(r23528)
@@ -232,9 +232,10 @@
 		persistenceManager().logMessage(SRC, "destroyNamespace | Removing the following namespace : "  + namespaceId);
 		
 		INamespace ns = this.removeNamespace(namespaceId);
-		
+		ensureActiveNamespaceUnloaded(namespaceId);
 		persistenceManager().logMessage(SRC, "destroyNamespace | Folloiwng namesapce is removed : "  + ns);
 		
+		
 		return ns;
 	} 
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Oct 25 11:07:47 2011	(r23527)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Oct 25 16:24:02 2011	(r23528)
@@ -283,13 +283,14 @@
 	}
 	
 	public IStrategoTerm destroyScope(IStrategoAppl namespaceAppl) throws SpxSymbolTableException {
+		verifyConstructor( namespaceAppl.getConstructor(), this.getLocalNamespaceTypeCon(), "Expected LocalNamespace. This operation has not been implementated for other type of Namespace.");
 		
 		IStrategoList id = getNamespaceId(namespaceAppl);
 		
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
-		INamespace ns = symbolTable.destroyNamespace(id);
+		INamespace deletedLocalNs = symbolTable.destroyNamespace(id);
 		
-		return this.getTermFactory().makeAppl(getLocalNamespaceTypeCon(), ns.namespaceUri().id());
+		return _termFactory.makeAppl(getLocalNamespaceTypeCon(), deletedLocalNs.namespaceUri().id());
 	}
 	
 	// SymbolDef : namespace * id * type *  value -> Def  

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Tue Oct 25 11:07:47 2011	(r23527)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Tue Oct 25 16:24:02 2011	(r23528)
@@ -120,8 +120,16 @@
 	protected String getFileLocation() { return null; }
 	
 
-	static IStrategoAppl toIdTerm ( SpxSemanticIndexFacade facade , IStrategoConstructor namespaceCon, IStrategoList id)
-	{
+	/**
+	 * Converts {@code id} to qualified name . If the given id is [id],
+	 * it converts it to QName([id]) 
+	 * 
+	 * @param facade
+	 * @param namespaceCon
+	 * @param id
+	 * @return
+	 */
+	static IStrategoAppl toIdTerm ( SpxSemanticIndexFacade facade , IStrategoConstructor namespaceCon, IStrategoList id){
 		ITermFactory factory = facade.getTermFactory();
 		
 		IStrategoConstructor qnameCons = facade.getQNameCon();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java	Tue Oct 25 11:07:47 2011	(r23527)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java	Tue Oct 25 16:24:02 2011	(r23528)
@@ -14,9 +14,6 @@
 /**
  * Demonstrates more advanced usage of JDBM:
  * Secondary maps, 1:N relations.
- * 
- * @author Jan Kotek
- *
  */
 class MultiValuePersistentTable1 implements Serializable{
 	private static final long serialVersionUID = -5921814375219835440L;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Oct 25 11:07:47 2011	(r23527)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Oct 25 16:24:02 2011	(r23528)
@@ -735,7 +735,12 @@
 		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		assertNotNull(ns);
 		
-		nsAppl = (IStrategoAppl)_facade.destroyScope(moduleQnameAppl1);
+		try{
+			nsAppl = (IStrategoAppl)_facade.destroyScope(moduleQnameAppl1);
+		}
+		catch(IllegalArgumentException ex){}
+		
+		nsAppl = (IStrategoAppl)_facade.destroyScope(nsAppl);
 		assertNotNull(ns);
 		
 		ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
@@ -800,6 +805,49 @@
 		assertTrue(SpxSymbol.verifyEquals( GlobalNamespace.getGlobalNamespaceId(_facade) , actual.namespaceUri().id()) );
 	
 	}
+	
+	
+
+	public void testResolveInAnonymousScope() throws IOException, SpxSymbolTableException {
+		createExtendedScopeTree();
+		
+		IStrategoAppl globalNsAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		
+		//adding a symbol in moduleDeclarationP1M1
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		//Creating anonymous scope
+		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(globalNsAppl);
+		assertEquals(_facade.getLocalNamespaceTypeCon(), nsAppl.getConstructor());
+		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		assertNotNull(ns);
+		
+		_facade.indexSymbol(createEntry(nsAppl , symbolId1 , typeAppl1  , data1));
+		
+		//Resolving Symbol from ModuleP1M1. It will not find any symbol defined in localScope. Hence, 
+		//it will return just the symbol from the ModuleP1M1 .
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
+				nsAppl, // search origin
+				symbolId1,	//looking for 
+				_facade.getConstructor("ModuleDef", 0) // with type 
+				);
+		
+		
+		assertEquals(1, resolvedSymbols.size());
+		
+		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];// resolved from the current local namespace
+		assertEquals("ModuleDef", actual.type());
+		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
+		assertTrue(SpxSymbol.verifyEquals( (IStrategoList)nsAppl.getSubterm(0) , actual.namespaceUri().id()) );
+		
+		_facade.destroyScope(nsAppl);
+		ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		assertNull(ns);
+	}
+	
 	public void testUndefineSymbols() throws Exception{
 		createExtendedScopeTree();
 	

From m.dejonge at tudelft.nl  Wed Oct 26 09:54:27 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 26 Oct 2011 07:54:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23529 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20111026075427.264C92B8031@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Oct 26 07:54:26 2011
New Revision: 23529
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23529&sc=1

Log:
add origin info to expanded tokens

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenExpandPrimitive.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenExpandPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenExpandPrimitive.java	Tue Oct 25 16:24:02 2011	(r23528)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenExpandPrimitive.java	Wed Oct 26 07:54:26 2011	(r23529)
@@ -7,9 +7,11 @@
 import java.util.ArrayList;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
+import org.spoofax.terms.attachments.OriginAttachment;
 
 /**
  * Tokens
@@ -36,7 +38,9 @@
 					i = getRightToken(containingSubTerm).getIndex();
 				}
 				else {
-					resultTerms.add(env.getFactory().makeString(tokenizer.getTokenAt(i).toString()));
+					IStrategoString tokenTerm = env.getFactory().makeString(tokenizer.getTokenAt(i).toString());
+					OriginAttachment.setOrigin(tokenTerm, origin);
+					resultTerms.add(tokenTerm);
 				}
 			}
 			i += 1;

From m.dejonge at tudelft.nl  Wed Oct 26 10:56:10 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 26 Oct 2011 08:56:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23530 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20111026085610.143842B808D@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Oct 26 08:56:08 2011
New Revision: 23530
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23530&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Wed Oct 26 07:54:26 2011	(r23529)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Wed Oct 26 08:56:08 2011	(r23530)
@@ -225,8 +225,8 @@
 	(old-text, text-change, pos-start, pos-end) -> result-text
 	where 
 		old-chars := <explode-string> old-text; 
-		(prefix, tail) := <split-at(|pos-start)> old-chars; 
-		(heads, suffix) := <split-at(|pos-end)> old-chars; 
+		(prefix, _) := <split-at(|pos-start)> old-chars; 
+		(_, suffix) := <split-at(|pos-end)> old-chars; 
 		result-text := <conc-strings> (<implode-string> prefix, text-change, <implode-string> suffix) 
 		
 compare-text-change = 

From tobivollebregt at gmail.com  Wed Oct 26 12:29:39 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 26 Oct 2011 10:29:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23531 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: syntax
	trans trans/analyze/sdf trans/codegen/template
	trans/context/template trans/normalize trans/unit-te...
Message-ID: <20111026102939.537BF2B8091@mx2.tudelft.nl>

Author: tvo
Date: Wed Oct 26 10:29:38 2011
New Revision: 23531
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23531&sc=1

Log:
TemplateLang Refactor

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt
      - copied, changed from r23507, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf.spt
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/templatelang.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Oct 26 10:29:38 2011	(r23531)
@@ -77,20 +77,23 @@
     "[" <PlaceholderText2-LEX> ":" -> <PlaceholderPrefix2-CF> {cons("Text")}
 
     %% template parts
-    "<<" <TemplatePart1-CF>* ">>" -> <Template-CF> {cons("Template")}
+    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF> {cons("Template")}
+    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF> {cons("Template")}
+    <TemplatePart1-CF>* -> <TemplateLine1-CF> {cons("Line")}
     <TemplateString1-LEX> -> <TemplatePart1-CF> {cons("String")}
     <TemplateEscape1-LEX> -> <TemplatePart1-CF> {cons("Escape")}
     <TemplateLayout-LEX>  -> <TemplatePart1-CF> {cons("Layout")}
-    <TemplateNewline-LEX> -> <TemplatePart1-CF> {cons("Newline")}
+    %% <TemplateNewline-LEX> -> <TemplatePart1-CF> {cons("Newline")}
 
-    "[[" <TemplatePart2-CF>* "]]" -> <Template-CF> {cons("Template")}
+    "[[" {<TemplateLine2-CF> "\n"}+ "]]" -> <Template-CF> {cons("Template")}
+    <TemplatePart2-CF>* -> <TemplateLine2-CF> {cons("Line")}
     <TemplateString2-LEX> -> <TemplatePart2-CF> {cons("String")}
     <TemplateEscape2-LEX> -> <TemplatePart2-CF> {cons("Escape")}
     <TemplateLayout-LEX>  -> <TemplatePart2-CF> {cons("Layout")}
-    <TemplateNewline-LEX> -> <TemplatePart2-CF> {cons("Newline")}
+    %% <TemplateNewline-LEX> -> <TemplatePart2-CF> {cons("Newline")}
 
     %% special: no placeholders, no newlines
-    "\"" <TemplatePartQ-CF>* "\"" -> <Template-CF> {cons("Template")}
+    '"' <TemplatePartQ-CF>* '"' -> <Template-CF> {cons("SingleLineTemplate")}
     <TemplateStringQ-LEX> -> <TemplatePartQ-CF> {cons("String")}
     <TemplateEscapeQ-LEX> -> <TemplatePartQ-CF> {cons("Escape")}
     <TemplateLayout-LEX>  -> <TemplatePartQ-CF> {cons("Layout")}
@@ -104,8 +107,8 @@
     PlaceholderText2 -/- ~[\:]
 
   lexical syntax
-    [\ \t\r]* [\n] -> TemplateNewline
-    [\ \t\r]+      -> TemplateLayout
+  	[\r][\n] -> "\n"
+    [\ \t]+  -> TemplateLayout
 
     (~[\\\<\>\ \t\r\n] | Backslash1)+ -> TemplateString1
     (~[\\\[\]\ \t\r\n] | Backslash2)+ -> TemplateString2
@@ -115,7 +118,7 @@
     [\\] -> Backslash2
 
   lexical restrictions
-    TemplateLayout -/- [\ \t\r\n]
+    TemplateLayout -/- [\ \t]
 
     %% must be followed by:
     TemplateString1 -/- ~[\\\<\>\ \t\r\n]
@@ -152,16 +155,18 @@
     ("\\\\" | EscapedChar)+ -> TemplateEscapeQ
 
     %% escapes allowed in a placeholder-like construct
-    "\\ "  -> EscapedChar
-    "\\'"  -> EscapedChar
-    "\\\"" -> EscapedChar
-    "\\t"  -> EscapedChar
-    "\\r"  -> EscapedChar
-    "\\n"  -> EscapedChar
-    "\\u" [0-9A-Fa-f]+ -> UnicodeEscapedChar
-    UnicodeEscapedChar -> EscapedChar
+    "\\'" -> EscapedChar
+    '\\"' -> EscapedChar
+    "\\ " -> EscapedChar
+    "\\t" -> EscapedChar
+    "\\r" -> EscapedChar
+    "\\n" -> EscapedChar
 
-    "\\" ~[] -> EscapedChar {recover, cons("WATER")}
+    "\\u" [0-9A-Fa-f]+ -> EscapedUnicodeChar
+    EscapedUnicodeChar -> EscapedChar
+
+    "\\" ~[] -> EscapedLayoutChar {recover, cons("WATER")}
+    "\\" ~[] -> EscapedNonLayoutChar {recover, cons("WATER")}
     "<" ~[\>]+ ">" -> EscapedChar1 {recover, cons("WATER")}
     "[" ~[\]]+ "]" -> EscapedChar2 {recover, cons("WATER")}
 
@@ -171,4 +176,4 @@
     TemplateEscape2 -/- [\\]
     TemplateEscape2 -/- [\[].[\\]
     TemplateEscapeQ -/- [\\]
-    UnicodeEscapedChar -/- [0-9A-Fa-f]
+    EscapedUnicodeChar -/- [0-9A-Fa-f]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Wed Oct 26 10:29:38 2011	(r23531)
@@ -1,6 +1,7 @@
 module analyze/sdf/check
 
 imports
+  lib/editor-common.generated
  	common
  	utils/debug
  	utils/attributes
@@ -225,26 +226,24 @@
 rules // TemplateLang - Local checks
 
   context-free-syntax-error:
-    SdfProductionWithCons(_, _, attrs) ->
-      (x, $[Constructor already specified at start of production. Please remove this cons attribute.])
+    prod(_, _, attrs(attr*)) ->
+      (attr*, $[Multiple definition of constructor (already specified at start of production?)])
     where
-      x := <fetch-cons> attrs
+      <gti> (<filter(fetch-cons); length> attr*, 1)
 
   context-free-templates-error:
-    TemplateProductionWithCons(_, _, attrs) ->
-      (x, $[Constructor already specified at start of production. Please remove this cons attribute.])
+    TemplateProduction(_, _, attrs(attr*)) ->
+      (attr*, $[Multiple definition of constructor (already specified at start of production?)])
     where
-      x := <fetch-cons> attrs
+      <gti> (<filter(fetch-cons); length> attr*, 1)
 
   context-free-templates-warning:
-    Template([head | tail]) ->
-      (head, $[It is recommended to insert a linebreak between the start of a multiline template and its first element.])
+    Template([head | _]) ->
+      (head, $[Insert a linebreak between the start of a multi line template and its first element])
     where
-      <not(?Newline(_))> head; // doesn't start with newline
-      <one(?Newline(_))> tail  // does contain a newline
+    	<eq> (<origin-line>, <origin-line> head)
 
   context-free-templates-warning:
-    Layout(t) ->
-      (t, $[It is recommended not to use tab characters in templates.])
+    Layout(t) -> (t, $[Do not use tab characters in templates])
     where
-      <explode-string; one('\t')> t
+    	origin-text; explode-string; one('\t')

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Oct 26 10:29:38 2011	(r23531)
@@ -14,7 +14,7 @@
 strategies
 
   test-templatelang-to-esv:
-    (_, _, ast, _, _) -> Module(modulename, NoImports(), [Completions("", listOfCompletions)])
+    ast -> Module(modulename, NoImports(), [Completions("", listOfCompletions)])
     with
       <?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), _)])])> ast;
       <?CompilationUnit([], [Package(_, [<template-module-to-esv>])]); alltd(String(double-quote))> ast => listOfCompletions
@@ -60,48 +60,54 @@
 /*internal*/ strategies
 
   template-to-completion-template:
-    TemplateProduction(sort, Template(e* @[_|_]), attr*) -> t
+    TemplateProduction(sort, Template(line* @ [_ | _]), attr*) -> t
     with
-      part* := <template-elements-to-completion-parts> e*;
-      anno  := <template-sort-to-anno> sort;
-      if prefix := String(<collect-one(?sdf-cons(<un-double-quote>))> attr*) then
-        t := |[ completion template ~sort : ~prefix = ~*part* ~anno:anno ]|
-      else
-        t := |[ completion template ~sort : ~*part* ~anno:anno ]|
-      end
-
-  template-elements-to-completion-parts =
-    map(try(placeholder-to-completion-part));
-    // HACK
-    try(\[Cursor() | tail] -> tail\
-      + \[Newline(_), Cursor() | tail] -> tail\
-      + \[Newline(_), Layout(_), Cursor() | tail] -> tail\);
-    // END HACK
-    remove-cursor-except-first;
-    try-re-indent;
-    trim-layout;
-    map(try(text-to-completion-part));
-    concatenate-consecutive-strings;
-    map(try(String(templatelang-escape)))
+      part* := <map(template-line-to-esv);
+                try(\[[_, Cursor()] | tail] -> tail\); // HACK for Mobl <MetaAnno*>
+                remove-cursor-except-first;
+                separate-by(|String("\n"));
+                flatten-list;
+                concatenate-consecutive-strings;
+                map(try(String(templatelang-escape)))> line*;
+      // if prefix := String(<collect-one(?sdf-cons(<un-double-quote>))> attr*) then
+      //   t := |[ completion template ~sort : ~prefix = ~*part* (blank) ]|
+      // else
+        t := |[ completion template ~sort : ~*part* (blank) ]|
+      // end
+
+  template-line-to-esv:
+    Line([Layout(x), Placeholder(None(), _, <Option() + Star()>, _)]) ->
+      <spaces-to-tabs> [String(x), Cursor()]
+
+  template-line-to-esv:
+    Line(elem*) -> <map(template-element-to-esv); spaces-to-tabs> elem*
 
-  template-sort-to-anno =
-    CanNotBeBlank < !None() + !Blank()
+  spaces-to-tabs =
+    try([String(string-replace(|"  ", "\t")) | id])
 
-  placeholder-to-completion-part:
-    Placeholder(Text(name), sort(sort), _, _){} -> PlaceholderWithSort($[<[name]:], sort)
+  template-element-to-esv:
+    Placeholder(Text(name), sort(sort), _, _) -> PlaceholderWithSort($[<[name]:], sort)
 
-  placeholder-to-completion-part:
-    Placeholder(None(), sort(sort), _, _){} -> t with t :=
+  template-element-to-esv:
+    Placeholder(None(), sort(sort), <None() + Plus()>, _) ->
       PlaceholderWithSort($[<[<try(generate-placeholder)> sort]:], sort)
 
-  placeholder-to-completion-part:
-    Placeholder(Text(name), sort(sort), None(), _){Blank()} -> PlaceholderWithSort($[<[name]:], sort)
+  template-element-to-esv:
+    Placeholder(None(), sort(sort), <Option() + Star()>, _) -> []
 
-  placeholder-to-completion-part:
-    Placeholder(None(), sort(sort), None(), _){Blank()} -> t with t :=
-      PlaceholderWithSort($[<[<try(generate-placeholder)> sort]:], sort)
+  template-element-to-esv:
+    Layout(x) -> String(x)
+
+  template-element-to-esv:
+    String(_) -> <id>
+
+  remove-cursor-except-first =
+    [[id, Cursor()] | remove-cursor] <+ [id | remove-cursor-except-first] <+ []
+
+  remove-cursor =
+    ?[[_, Cursor()] | <remove-cursor>] <+ [id | remove-cursor] <+ []
 
-  // FIXME: does this make sense?
+  // FIXME: Does this make sense? Answer: not any more!
   generate-placeholder =
     bagof-Declaration;
     map(\TemplateProduction(_, Template(e*), _) -> e*\);
@@ -115,7 +121,7 @@
     <divr> (<length> <filter(?String(_))> e*, <length> e*)
 
   template-elements-to-string =
-    trim-layout;
+    // trim-layout;
     filter(
          \Placeholder(Text(x), _, _, _) -> x\
       <+ \Placeholder(None(), sort(x), _, _) -> x\
@@ -123,50 +129,3 @@
       <+ \Layout(x) -> <string-replace(|"\t", " ")> x\
     );
     concat-strings
-
-  placeholder-to-completion-part:
-    Placeholder(_, _, Option(), _){Blank()} -> Cursor()
-
-  placeholder-to-completion-part:
-    Placeholder(_, _, Plus(), _){Blank()} -> Cursor()
-
-  placeholder-to-completion-part:
-    Placeholder(_, _, Star(), _){Blank()} -> Cursor()
-
-  text-to-completion-part:
-    Newline(_) -> String("\n")
-
-  text-to-completion-part:
-    Layout(t) -> String(t)
-
-  text-to-completion-part:
-    Indent(t) -> String(<string-replace(|"  ", "\t")> t)
-
-// removing cursors (including layout before and newline after, if present)
-
-  remove-cursor-except-first =
-       [Layout(id) + Indent(id), Cursor(), Newline(id) | remove-cursor]
-    <+ [Cursor(), Newline(id) | remove-cursor]
-    <+ [Layout(id) + Indent(id), Cursor() | remove-cursor]
-    <+ [Cursor() | remove-cursor]
-    <+ [id | remove-cursor-except-first]
-    <+ []
-
-  remove-cursor =
-       \[<?Layout(_) + ?Indent(_)>, Cursor(), Newline(_) | tail] -> <remove-cursor> tail\
-    <+ \[Cursor(), Newline(_) | tail] -> <remove-cursor> tail\
-    <+ \[<?Layout(_) + ?Indent(_)>, Cursor() | tail] -> <remove-cursor> tail\
-    <+ \[Cursor() | tail] -> <remove-cursor> tail\
-    <+ [id | remove-cursor]
-    <+ []
-
-strategies
-
-  nonempty-substring-from-last-occurence-of(|t) =
-    substring-after-last-occurence-of(|t);
-    not("");
-    <conc-strings> (t, <id>)
-
-  substring-after-last-occurence-of(|t) =
-    where(is-substring(!t));
-    repeat(is-substring(!t); implode-string)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Oct 26 10:29:38 2011	(r23531)
@@ -16,7 +16,7 @@
 strategies
 
   test-templatelang-to-sdf:
-    (_, _, ast, _, _) -> "module"#([unparameterized(modulename), [], [exports(grammars)]])
+    ast -> 'module(unparameterized(modulename), [], [exports(grammars)])
     with
       init-template-options;
       <?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), sections)])])> ast;
@@ -81,7 +81,7 @@
             )
       in
         A* := <collect-om(lit(ends-with-identifier-char)); nub; string-sort-ex> sdf-section*;
-        r  := <get-keyword-follow-restriction>;
+        r  := <Options> KeywordFollowRestriction();
         if (!A* => []) + (!r => None()) then
           restrictions* := []
         else
@@ -101,116 +101,72 @@
       A* := <template-to-sdf> t
 
   template-to-sdf:
-    Template(e* @[_|_]) -> A*
+    SingleLineTemplate(elem*) -> A*
     with
-      A* := <newlines-switch(id, trim-trailing-layout, trim-leading-layout);
-             combine-consecutive-newlines;
-             filter(template-element-to-sdf);
-             flatten-list> e*
+      A* := <filter(template-element-to-sdf);
+             flatten-list> elem*
 
   template-to-sdf:
-    Template([]) -> []
-
-  template-element-to-sdf:
-    Newline(_){ /* neither Leading() nor Trailing() */ } -> A|[ "\"\\n\"" ]|
-    where not(use-no-newlines)
-
-  template-element-to-sdf:
-    Newline(_) -> A|[ "\"\\n\"" ]|
-    where use-leading-newlines
-    where not(has-annotation(|Leading()))
-
-  template-element-to-sdf:
-    Newline(_) -> A|[ "\"\\n\"" ]|
-    where use-trailing-newlines
-    where not(has-annotation(|Trailing()))
+    Template(line*) -> A*
+    with
+      A* := <filter(?Line([Layout(_), _ | _]));
+             map(template-line-to-sdf);
+             flatten-list> line*
+
+  template-line-to-sdf =
+    ?Line(<id>);
+    if not(?[Layout(_), Placeholder(_, _, _, _)]) then
+      switch <Options> Newlines()
+        case ?None()     : id
+        case ?Leading()  : ![String("\n") | <id>]
+        case ?Trailing() : (elem* -> [elem*, String("\n")])
+      end
+    end;
+    filter(template-element-to-sdf)
 
   template-element-to-sdf:
     String(x) -> <string-to-sdf> x
 
-// FIXME: unbreak this (remember to add {} anno to next strategy)
-/*
-  // Insert "\n" into generated grammar whenever
-  // 1) leading or trailing newlines is enabled
-  // 2) the sort itself does not contain a leading resp. trailing newline
-  // 3) the placeholder is on its own on the line
-  template-element-to-sdf:
-    p@ Placeholder(_, sort(sort), None(), _){Blank()} -> t'
-    with
-      t := <placeholder-to-sdf> p;
-      t' := <newlines-switch(id,
-        if not(<sort-has-leading-newline> sort) then
-          ?A; !A|[ ("\\n" A) ]|
-        end,
-        if not(<sort-has-trailing-newline> sort) then
-          ?A; !A|[ (A "\\n") ]|
-        end
-      )> t
-
-  // FIXME: generates suboptimal SDF (bad AST)
   template-element-to-sdf:
-    p@ Placeholder(_, sort(sort), <?Plus() + ?Star() + ?Option()>, _){Blank()} -> t'
-    with
-      t := <placeholder-to-sdf> p;
-      t' := <newlines-switch(id,
-        if not(<sort-has-leading-newline> sort) then
-          ?A; !A|[ ("\\n" A)? ]|
-        end,
-        if not(<sort-has-trailing-newline> sort) then
-          ?A; !A|[ (A "\\n")? ]|
-        end
-      )> t
-*/
+    Placeholder(_, sort(S), None(), _) -> A|[ S ]|
 
   template-element-to-sdf:
-    Placeholder(_, _, _, _) -> <placeholder-to-sdf>
-
-  placeholder-to-sdf:
-    Placeholder(_, sort(S'), None(), _) -> A|[ S' ]|
-
-  // TODO: this needs improvement, too much duplication and not readable enough
+    Placeholder(_, sort(S), Option(), _) -> A|[ S? ]|
 
-  placeholder-to-sdf:
+  template-element-to-sdf:
     Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ S* ]|
-    where <not(one(Separator(not(all-whitespace))))> option*
+    where <not(one(Separator(not(string-is-layout))))> option*
 
-  placeholder-to-sdf:
+  template-element-to-sdf:
     Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ { S L }* ]|
-    where <one(Separator(not(all-whitespace)))> option*
+    where <one(Separator(not(string-is-layout)))> option*
     with L := <separator-to-literal> option*
 
-  placeholder-to-sdf:
+  template-element-to-sdf:
     Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ S+ ]|
-    where <not(one(Separator(not(all-whitespace))))> option*
+    where <not(one(Separator(not(string-is-layout))))> option*
 
-  placeholder-to-sdf:
+  template-element-to-sdf:
     Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ { S L }+ ]|
-    where <one(Separator(not(all-whitespace)))> option*
+    where <one(Separator(not(string-is-layout)))> option*
     with L := <separator-to-literal> option*
 
-  // name conflicts with is-whitespace from the library
-  xxx-is-whitespace =
-    // if use-no-newlines then
-      ' ' + '\t' + '\r' + '\n'
-    // else
-    //   ' ' + '\t' + '\r'
-    // end
+  char-is-layout =
+    ' ' + '\t' + '\r' + '\n'
 
-  all-whitespace = string-as-chars(all(xxx-is-whitespace))
+  string-is-layout =
+    string-as-chars(all(char-is-layout))
 
-  remove-whitespace = string-as-chars(filter(not(xxx-is-whitespace)))
+  remove-layout =
+    string-as-chars(filter(not(char-is-layout)))
 
   separator-to-literal =
-    collect-one(?Separator(<remove-whitespace>)); escape; double-quote
-
-  placeholder-to-sdf:
-    Placeholder(_, sort(S), Option(), _) -> A|[ S? ]|
+    getfirst(?Separator(<remove-layout; templatelang-escape; double-quote>))
 
   sort-to-contentcomplete:
-    sort(S) -> p|[ CONTENTCOMPLETE -> S {recover} ]|
-
-  sort-to-insertion:
-    sort(S) -> p|[ -> S {cons("\"INSERTION\""), recover} ]|
+    sort(S) -> p|[ CONTENTCOMPLETE -> S {cons(L)} ]|
+    where
+      L := $["COMPLETION-[S]"]
 
 strategies
 
@@ -218,33 +174,19 @@
    * Sorts a list of terms on the outermost string within each term.
    */
   string-sort-ex =
-    qsort(
-      \(a, b) -> (<collect-one(is-string)> a, <collect-one(is-string)> b)\;
-      string-lt
-    )
+    qsort(<string-lt> (<collect-one(is-string)>, <collect-one(is-string)>))
 
+  /**
+   * Split on the edges delimiting identifiers.
+   * E.g. "func(x,y)" => ["func", "(", "x", ",", "y", ")"]
+   */
   string-to-sdf =
-    string-identifier-tokenize;
+    // FIXME: Use identifier lexical (or keyword follow restriction?) defined by the language.
+    string-edge-tokenize(is-alphanum + '_');
     // FIXME: Case insensitive literals need ci-lit/single-quote.
     map({raw, sdf:
-      ?raw; escape; !lit(<double-quote>); ?sdf;
-      if <explode-string; last; (is-alphanum + '_')> raw then
+      ?raw; !lit(<templatelang-escape; double-quote>); ?sdf;
+      if <explode-string; at-last(is-alphanum + '_')> raw then
         rules(Restrictions :+= sdf)
       end
     })
-
-  /**
-   * Split on the edges delimiting identifiers and then strip layout
-   * from the resulting tokens and remove empty tokens.
-   * E.g. " func ( x y )" => ["func", "(", "x", "y", ")"]
-   */
-  string-identifier-tokenize =
-    // FIXME: Use layout defined by the language.
-    let is-layout = ' ' + '\t' + '\n' + '\r'
-        strip-layout = string-as-chars(filter(not(is-layout)))
-    in
-      // FIXME: Use identifier lexical defined by the language.
-      string-edge-tokenize(is-alphanum + '_');
-      filter(strip-layout; not(""))
-    end
-

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Oct 26 10:29:38 2011	(r23531)
@@ -8,19 +8,20 @@
   context/str/parse
   context/template/declare
   normalize/templatelang
+  utils/attributes
   utils/sdf2conflicts
   utils/templatelang
 
 strategies
 
   test-templatelang-to-str:
-    (_, _, ast, _, _) -> result
+    ast -> result
     with
       init-template-options;
       <?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), sections)])])> ast;
       (options, t-sections) := <partition(?TemplateOptions(<id>))> sections;
       <try([declare-template-options-main])> options;
-      <template-sections-to-stratego; alltd(Str(escape; double-quote))> t-sections => result
+      <template-sections-to-stratego; alltd(Str(templatelang-escape; double-quote))> t-sections => result
 
 strategies
 
@@ -39,9 +40,9 @@
 
         pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
         pp-list(s|t) = map(s); separate-by(|t); concat-strings
-        pp-guarantee-newline = string-ends-with(|"\n") <+ <conc-strings> (<id>, "\n")
         // ih = indent helper, t = indent string
-        pp-ih(|t) = ?"" <+ prefix-lines(|t); pp-guarantee-newline
+        pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
+        pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
 
       [section''*]
 
@@ -76,156 +77,204 @@
     sort -> $[prettyprint-[sort] = is-string]
 
   sort-decl-in-prettyprinting:
-    TemplateProduction(sort, Template(_), _) -> sort
+    TemplateProduction(sort, _, _) -> sort
 
   sort-used-in-prettyprinting:
     Placeholder(_, sort(sort), _, _) -> sort
 
-  // Optimization for single-string-element templates
+rules
+
+  // Single line template with only Layout and String elements.
   template-to-prettyprint-strategy:
-    TemplateProduction(sort, Template([String(t)]), attrs(attr*)) ->
+    TemplateProduction(sort, SingleLineTemplate(elem*), attrs) ->
     $[prettyprint-[sort]:
-        [cons]() -> "[result]"]
+        [cons]() -> "[<templatelang-escape> t]"]
     where
-      cons   := <getfirst(?sdf-cons(<un-double-quote>))> attr*
+      [String(t)] := <map(\Layout(t) -> String(t)\ + ?String(_));
+                      concatenate-consecutive-strings> elem*;
+      cons := <fetch-cons-name> attrs
+
+  // Single line template with only a placeholder. (i.e., injection)
+  // The placeholder is at the start AND at the end of the template!
+  template-to-prettyprint-strategy:
+    TemplateProduction(sort, SingleLineTemplate([p @ Placeholder(_, _, _, _)]), attrs) ->
+    $[prettyprint-[sort]:
+        [input] -> a'
+        where
+        	[<template-element-to-prettyprint> p{"a"}]]
     with
-      result := <templatelang-escape> t
+      if cons := <fetch-cons-name> attrs then
+        input := $[[cons](a)]
+      else
+        input := "a"
+      end
 
   template-to-prettyprint-strategy:
-    TemplateProduction(sort, Template(elem*), attrs(attr*)) ->
-    <trim-chars(' ' + '\t' + '\r' + '\n')> // Workaround Stratego/856
+    TemplateProduction(sort, SingleLineTemplate(elem*), attrs) ->
     $[prettyprint-[sort]:
-        [cons]([arg'*]) -> zz
-        with
+        [input] -> zz
+        where
           [let'*]]
     where
-      not(!elem* => [String(_)])
-    where
-      cons    := <getfirst(?sdf-cons(<un-double-quote>))> attr*
+      not(<map(?Layout(_) + ?String(_))> elem*);
+      not(!elem* => [Placeholder(_, _, _, _)])
     with
-      elem'*  := <try-re-indent;
-                  !(<id>, 0);
-                  thread-map(try(rename-template-element));
-                  ?(<id>, _)> elem*;
-      arg*    := <filter(template-element-to-cons-arg)> elem'*;
-      arg'*   := <separate-by(|", ")> arg*;
-      part*   := <try(\[Newline(_) | tail] -> tail\); // strip first newline, but KEEP INDENT!
-                  // FIXME: might want to replace Newline,Indent with Newline, thereby
-                  //        making multi-line templates implicitly newline-separated.
-                  try(at-suffix(\[Newline(t), Indent(_)] -> [/*Newline(t)*/]\)); // strip last newline
-                  trim-trailing-layout;
-                  listtd(template-element-to-stratego);
-                  concatenate-consecutive-strings;
-                  map(try(?String(<templatelang-escape; double-quote>)));
-                  separate-by(|", ")> elem'*;
-      result  := <concat-strings>["zz := <concat-strings> [", part*, "]"];
-      confl*  := <bagof-SubtermConflicts> Symbol(cons, <length> arg*);
-      // if !confl* => [] then
-        let*  := <filter(template-element-to-prettyprint)> elem'*;
-      // else
-      //   let*  := <filter(?Placeholder(_, _, _, _));
-      //             add-indices; map((dec, id));
-      //             filter(template-element-to-parenthesize(|confl*))> elem'*
-      // end;
-      let'*   := <separate-by(|";\n")> [let*, result]
+      (elem'*, _)    := <thread-map(try(rename-template-element))> (elem*, 0);
+      elem''*        := <map(template-element-to-stratego)> elem'*;
+      arg*           := <filter(template-element-to-cons-arg)> elem'*;
+      let*           := <filter(template-element-to-prettyprint)> elem'*;
+      (input, let'*) := <template-common> (let*, elem''*, attrs, arg*)
 
-  // Injection (no cons, no bracket, exactly one placeholder)
   template-to-prettyprint-strategy:
-    TemplateProduction(sort, Template(elem*), attrs(attr*)) ->
+    TemplateProduction(sort, Template(line*), attrs) ->
     $[prettyprint-[sort]:
-        a -> a'
+        [input] -> zz
         where
-          [let']]
+          [let'*]]
+    with
+      (line'*, _)    := <thread-map(rename-template-line)> (line*, 0);
+      (line''*, _)   := <thread-map(template-line-to-stratego)> (line'*, 0);
+      arg*           := <mapconcat(template-line-to-cons-arg)> line'*;
+      let*           := <mapconcat(template-line-to-prettyprint)> line'*;
+      (input, let'*) := <template-common> (let*, <concat> line''*, attrs, arg*)
+
+  template-common:
+    (let*, elem*, attrs, arg*) -> (input, let'*)
     where
-      not(<getfirst(?sdf-cons(<un-double-quote>))> attr*);
-      not(<getfirst(?bracket())> attr*)
+      part*  := <concatenate-consecutive-strings;
+                 map(try(?String(<templatelang-escape; double-quote>)));
+                 separate-by(|",")> elem*;
+      result := <concat-strings>["zz := <concat-strings> [", part*, "]"];
+      let'*  := <separate-by(|";\n")> [let*, result]
     where
-      <one(?Placeholder(w, x, y, z))> elem*
-    with
-      let' := <template-element-to-prettyprint> Placeholder(w, x{"a"}, y, z)
+      if cons := <fetch-cons-name> attrs then
+        input := $[[cons]([<separate-by(|",")> arg*])]
+      else
+        if !arg* => [_] then
+          input := "a"
+        else
+          input := $[([<separate-by(|",")> arg*])]
+        end
+      end
 
+  // FIXME
   // Production without cons but with bracket annotation
   // (cons + bracket -> no need to parenthesize)
-  template-to-prettyprint-strategy:
-    TemplateProduction(sort, Template(elem*), attrs(attr*)) ->
-    ${parenthesize-{sort}(not-allowed) =
-        if not-allowed then
-          <concat-strings> ["{open}", <prettyprint-{sort}>, "{close}"]
-        else
-          prettyprint-{sort}
-        end}
-    where
-      not(<getfirst(?sdf-cons(<un-double-quote>))> attr*);
-      <getfirst(?bracket())> attr*
-    where
-      <length> <filter(?Placeholder(_, _, _, _))> elem* => 1
-      <+ debug(!"Bracket production must have exactly one placeholder: "); fail
+  // template-to-prettyprint-strategy:
+  //   TemplateProduction(sort, Template(elem*), attrs) ->
+  //   ${parenthesize-{sort}(not-allowed) =
+  //       if not-allowed then
+  //         <concat-strings> ["{open}", <prettyprint-{sort}>, "{close}"]
+  //       else
+  //         prettyprint-{sort}
+  //       end}
+  //   where
+  //     not(<fetch-cons-name> attrs);
+  //     FIXME <getfirst(?bracket())> attr*
+  //   where
+  //     <length> <filter(?Placeholder(_, _, _, _))> elem* => 1
+  //     <+ debug(!"Bracket production must have exactly one placeholder: "); fail
+  //   with
+  //     (before, placeholder, after) := <split-fetch-keep(?Placeholder(_, _, _, _))> elem*
+  //   where
+  //     [String(open)]  := <map(template-element-to-stratego'); concatenate-consecutive-strings> before;
+  //     [String(close)] := <map(template-element-to-stratego'); concatenate-consecutive-strings> after
+  //     <+ debug(!"Bracket production must have text before and after the placeholder: "); fail
+
+rules
+
+  rename-template-line:
+    (Line(elem*), index) -> (Line(elem'*), index')
     with
-      (before, placeholder, after) := <split-fetch-keep(?Placeholder(_, _, _, _))> elem*
-    where
-      [String(open)]  := <map(template-element-to-stratego'); concatenate-consecutive-strings> before;
-      [String(close)] := <map(template-element-to-stratego'); concatenate-consecutive-strings> after
-      <+ debug(!"Bracket production must have text before and after the placeholder: "); fail
+      (elem'*, index') := <thread-map(try(rename-template-element))> (elem*, index)
 
   rename-template-element:
-    (Placeholder(a, b@ sort(x), c, d){a*}, index) -> (Placeholder(a, b{newname}, c, d){a*}, newindex)
+    (Placeholder(a, b, c, d), index) -> (Placeholder(a, b, c, d){name'}, index')
     with
-      newname  := <implode-string> [<addi> ('a', index)];
-      newindex := <inc> index
+      name'  := <implode-string> [<addi> ('a', index)];
+      index' := <inc> index
+
+rules
+
+  template-line-to-cons-arg:
+    Line(elem*) -> <filter(template-element-to-cons-arg)> elem*
 
   template-element-to-cons-arg:
-    Placeholder(_, sort(_){name}, _, _) -> name
+    Placeholder(_, _, _, _){name} -> name
+
+rules
+
+  // template-line-to-stratego is to be used with thread map.
+  // The thread starts at 0 and is set to 1 once we passed the first line.
+  // It is used to determine whether we already generated the initial newline.
 
-  template-element-to-stratego =
-      \[Indent(indent), Placeholder(_, sort(_){name}, _, _), Newline(_) | tail] ->
-        [$[<pp-ih(|"[indent]")> [name]'] | tail]\
-    <+
-      // At the end, the Newline(_) may have been stripped.
-      \[Indent(indent), Placeholder(_, sort(_){name}, _, _)] ->
-        [$[<pp-ih(|"[indent]")> [name]']]\
-    <+
-      [template-element-to-stratego' | id]
-    <+
-      []
-
-  template-element-to-stratego' =
-      \Placeholder(_, sort(_){name}, _, _) -> $[[name]']\
-    + \String(t) -> String(t)\
-    + \Layout(t) -> String(t)\
-    + \Indent(t) -> String(t)\
-    + \Newline(t) -> String(t)\
+  template-line-to-stratego:
+    (Line([Layout(indent), Placeholder(_, _, _, _){name}]), 0) ->
+      ([$[<pp-ih-1(|"[indent]")> [name]']], 0)
+
+  template-line-to-stratego:
+    (Line(elem*), 0) -> (elem'*, 1)
+    where
+      not(!elem* => [Layout(_), Placeholder(_, _, _, _)]);
+      elem'* := <map(template-element-to-stratego)> elem*
+
+  template-line-to-stratego:
+    (Line([Layout(indent), Placeholder(_, _, _, _){name}]), 1) ->
+      ([$[<pp-ih-2(|"[indent]")> [name]']], 1)
+
+  template-line-to-stratego:
+    (Line(elem*), 1) -> ([String("\n") | elem'*], 1)
+    where
+      not(!elem* => [Layout(_), Placeholder(_, _, _, _)]);
+      elem'* := <map(template-element-to-stratego)> elem*
+
+  template-element-to-stratego:
+    String(t) -> <id>
+
+  template-element-to-stratego:
+    Layout(t) -> String(t)
+
+  template-element-to-stratego:
+    Placeholder(_, _, _, _){name} -> $[[name]']
+
+rules
+
+  template-line-to-prettyprint:
+    Line(elem*) -> <filter(template-element-to-prettyprint)> elem*
 
   template-element-to-prettyprint:
-    Placeholder(_, sort(x){name}, None(), _) -> $[[name]' := <prettyprint-[x]> [name]]
+    Placeholder(_, sort(x), None(), _){name} -> $[[name]' := <prettyprint-[x]> [name]]
 
   template-element-to-prettyprint:
-    Placeholder(_, sort(x){name}, <Star() + Plus()>, Options(opt*)) -> t
+    Placeholder(_, sort(x), <Star() + Plus()>, Options(opt*)){name} -> t
     with
       if sep := <getfirst(?Separator(<id>))> opt* then
-        t := $[[name]' := <pp-list(prettyprint-[x]|"[<escape> sep]")> [name]]
+        t := $[[name]' := <pp-list(prettyprint-[x]|"[<templatelang-escape> sep]")> [name]]
       else
         t := $[[name]' := <pp-list(prettyprint-[x]|" ")> [name]]
       end
 
   template-element-to-prettyprint:
-    Placeholder(_, sort(x){name}, Option(), _) -> $[[name]' := <pp-option(prettyprint-[x])> [name]]
+    Placeholder(_, sort(x), Option(), _){name} -> $[[name]' := <pp-option(prettyprint-[x])> [name]]
 
-  template-element-to-parenthesize(|conflicts):
-    (i0, Placeholder(_, sort(x){name}, None(), _)) -> $[[name]' := <parenthesize-[x]([na])> [name]]
-    where
-      not(<filter(?(i0, <id>))> conflicts => conflicts' => [])
-    with
-      let to-match =
-            {a*: \ Symbol(x, n) -> <concat-strings> ["?", x, "(", a*, ")"]
-                   with a* := <range; map(!"_"); separate-by(|", ")> (0, n) \}
-      in
-        na := <filter(to-match); separate-by(|" + ")> conflicts'
-      end
-
-  template-element-to-parenthesize(|conflicts):
-    (i0, p@ Placeholder(_, sort(x){name}, None(), _)) -> <template-element-to-prettyprint> p
-    where
-      <filter(?(i0, _))> conflicts => []
+rules
 
-  template-element-to-parenthesize(|conflicts):
-    (i0, p@ Placeholder(_, sort(x){name}, <not(?None())>, _)) -> <template-element-to-prettyprint> p
+//   template-element-to-parenthesize(|conflicts):
+//     (i0, Placeholder(_, sort(x), None(), _){name}) -> $[[name]' := <parenthesize-[x]([na])> [name]]
+//     where
+//       not(<filter(?(i0, <id>))> conflicts => conflicts' => [])
+//     with
+//       let to-match =
+//             {a*: \ Symbol(x, n) -> <concat-strings> ["?", x, "(", a*, ")"]
+//                    with a* := <range; map(!"_"); separate-by(|", ")> (0, n) \}
+//       in
+//         na := <filter(to-match); separate-by(|" + ")> conflicts'
+//       end
+//
+//   template-element-to-parenthesize(|conflicts):
+//     (i0, p@ Placeholder(_, sort(x), None(), _){name}) -> <template-element-to-prettyprint> p
+//     where
+//       <filter(?(i0, _))> conflicts => []
+//
+//   template-element-to-parenthesize(|conflicts):
+//     (i0, p@ Placeholder(_, sort(x), <not(?None())>, _){name}) -> <template-element-to-prettyprint> p

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Wed Oct 26 10:29:38 2011	(r23531)
@@ -33,29 +33,14 @@
   // namespace as if they would be declared using an equivalent piece of SDF.
 
   declare-template-definition:
-    template@ TemplateProduction(sort, Template(part*), attrs) ->
-      TemplateProduction(sort, Template(part'*), attrs)
+    prod @ TemplateProduction(sort, template, attrs) -> <id>
     with
-      <declare-sdf-definition-internal> (template, part*, sort, attrs);
-      part'* := <declare-template-placeholders> part*
-
-  declare-template-placeholders =
-    ?[Newline(_), Layout(_), Placeholder(_, _, _, _){}, Newline(_) | _];
-    [add-annotation(|Leading()), id, add-annotation(|Blank()), add-annotation(|Trailing()) | id];
-    [id, id, id | declare-template-placeholders]
-  <+
-    ?[Newline(_), Placeholder(_, _, _, _){}, Newline(_) | _];
-    [add-annotation(|Leading()), add-annotation(|Blank()), add-annotation(|Trailing()) | id];
-    [id, id | declare-template-placeholders]
-  <+
-    ?[Placeholder(_, sort(x), _, _){} | _];
-    [id | declare-template-placeholders];
-    rules(CanNotBeBlank :+ x -> x)
-  <+
-    ?[_ | _];
-    [id | declare-template-placeholders]
-  <+
-    ?[]
+      <declare-sdf-definition-internal> (prod, template, sort, attrs)
+    // with
+    //   if not(<collect-one(?sdf-cons(<un-double-quote>))> attrs);
+    //      <collect-one(?bracket())> attrs then
+    //     rules(BracketTemplateProduction :+ sort -> template)
+    //   end
 
 rules
 
@@ -77,18 +62,3 @@
   	KeywordFollowRestriction(t) -> <id>
   	with
   		rules(Options :+ KeywordFollowRestriction() -> t)
-
-strategies
-
-  use-no-newlines       = <Options> Newlines() => None()
-  use-leading-newlines  = <Options> Newlines() => Leading()
-  use-trailing-newlines = <Options> Newlines() => Trailing()
-
-  newlines-switch(none, leading, trailing) =
-    switch <Options> Newlines()
-      case ?None(): none
-      case ?Leading(): leading
-      case ?Trailing(): trailing
-    end
-
-  get-keyword-follow-restriction = <Options> KeywordFollowRestriction()

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Wed Oct 26 10:29:38 2011	(r23531)
@@ -1,22 +1,18 @@
 module templatelang
 imports
   libstratego-lib
+  lib/editor-common.generated
   include/SpoofaxLang
   utils/attributes
+  utils/templatelang
 
 strategies
 
-  test-templatelang-desugar-sdf:
-    (_, _, ast, _, _) -> <templatelang-desugar-sdf-top> ast
+  templatelang-desugar-sdf-top =
+  	alltd(origin-track-forced(templatelang-desugar-sdf))
 
-  test-templatelang-desugar:
-    (_, _, ast, _, _) -> <templatelang-desugar-top> ast
-
-strategies
-
-  templatelang-desugar-sdf-top = alltd(templatelang-desugar-sdf)
-
-  templatelang-desugar-top = innermost(templatelang-desugar)
+  templatelang-desugar-top =
+  	alltd(origin-track-forced(templatelang-desugar))
 
 rules
 
@@ -38,28 +34,99 @@
 rules
 
   templatelang-desugar:
-    NoOptions() -> Options([])
+    TemplateProduction(sort, template, a) ->
+      TemplateProduction(sort, template', attrs(attr*))
+    with
+      template' := <origin-track-forced(templatelang-template-desugar)> template;
+      attr*     := <templatelang-get-attrs> a
 
   templatelang-desugar:
-    no-attrs() -> attrs([])
+    TemplateProductionWithCons(SortCons(sort, cons), template, a) ->
+      TemplateProduction(sort, template', attrs(attr*))
+    with
+      template' := <origin-track-forced(templatelang-template-desugar)> template;
+      attr*     := [sdf-cons(<double-quote> cons) | <templatelang-get-attrs> a]
 
-  templatelang-desugar:
-    TemplateProductionWithCons(SortCons(sort, cons), tmpl, attrs(attr*)) ->
-      TemplateProduction(sort, tmpl, attrs(attr'*))
+  templatelang-get-attrs =
+    (no-attrs() -> []) + ?attrs(<id>)
+
+  templatelang-template-desugar:
+    SingleLineTemplate(elem*) -> SingleLineTemplate(elem'*)
     with
-      attr'* := [sdf-cons(<double-quote> cons) | attr*]
+      elem'* := <templatelang-element-desugar-top> elem*
 
-  templatelang-desugar:
-    Separator(x) -> Separator(<un-double-quote; unescape> x)
+  templatelang-template-desugar:
+    Template([Line(elem*)]) -> SingleLineTemplate(elem'*)
+    with
+      elem'* := <templatelang-element-desugar-top> elem*
 
-  templatelang-desugar:
+  templatelang-template-desugar:
+    Template(line*) -> Template(line'*)
+    where
+      not(!line* => [_])
+    with
+      let line-is-empty =
+            ?Line([]) + ?Line([Layout(_)])
+
+          remove-head-if-empty =
+            try(\[<line-is-empty> | t] -> t\)
+
+          remove-last-if-empty =
+            try(at-last(\[<line-is-empty>] -> []\))
+
+          line-remove-trailing-layout =
+            try(Line(at-last(\[Layout(_)] -> []\)))
+
+          line-ensure-leading-layout =
+            ?Line([Layout(_) | _]) <+ Line(![Layout("") | <id>])
+
+          line-get-indent =
+            // Only non-blank lines matter.
+            ?Line([Layout(<string-length>), _ | _])
+
+          get-indent =
+            filter(line-get-indent);
+            list-min
+
+          string-unindent(|n) =
+            ?"" <+ origin-track-forced(string-as-chars(drop(|n)))
+
+          line-unindent(|n) =
+            Line([origin-track-forced(Layout(string-unindent(|n))) | id])
+
+          unindent =
+            if get-indent => n then
+              map(line-unindent(|n))
+            end
+      in
+        !line*;
+        remove-head-if-empty;
+        remove-last-if-empty;
+        templatelang-element-desugar-top;
+        map(line-remove-trailing-layout; line-ensure-leading-layout);
+        unindent;
+        ?line'*
+      end
+
+  templatelang-element-desugar-top =
+    alltd(origin-track-forced(templatelang-element-desugar))
+
+  templatelang-element-desugar:
+    NoOptions() -> Options([])
+
+  templatelang-element-desugar:
+    Separator(x) -> Separator(<origin-track-forced(un-double-quote; unescape)> x)
+
+  templatelang-element-desugar:
     Escape(t) -> String(t')
     with
-      let parse-unicode = {before*, mid, after*:
-             split-fetch-keep(not(is-hexnum)) => (before*, mid, after*);
-             ![<hex-chars-to-int> before*, mid | after*]
-          <+ ![<hex-chars-to-int>]
-          }
+      let parse-unicode =
+            {before*, mid, after*:
+               split-fetch-keep(not(is-hexnum)) => (before*, mid, after*);
+               ![<hex-chars-to-int> before*, mid | after*]
+            <+ ![<hex-chars-to-int>]
+            }
+
           unescape =
             string-as-chars(rec x(
                \['\', ' ' | tail] -> [' '  | <x> tail]\
@@ -80,10 +147,10 @@
             <+ []
             ))
       in
-        t' := <unescape> t
+        t' := <origin-track-forced(unescape)> t
       end
 
-  templatelang-desugar:
+  templatelang-element-desugar:
     Layout(t) -> Layout(t')
-    where
-      t' := <string-replace(|"\t", "  "); not(equal(|t))> t
+    with
+      t' := <origin-track-forced(string-replace(|"\t", "  "))> t

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Wed Oct 26 10:29:38 2011	(r23531)
@@ -24,10 +24,11 @@
 	codegen/sdf/to-name-analysis
   codegen/sdf/to-signature
   codegen/main
-  
+
 imports
 	normalize/main
 	normalize/signatures
+	normalize/templatelang
 imports
 	context/-
 imports
@@ -36,12 +37,13 @@
   config
   /*
 	unit-tests/-
-	unit-tests/templatelang/-
 	unit-tests/utils/-
 	*/
 imports
 	 editor/main
 	 codegen/main
+imports
+  codegen/template/-
 
 rules
 
@@ -79,4 +81,18 @@
       test-templatelang-to-stratego;
       test-templatelang-desugar;
       test-sdf2conflicts
-*/
\ No newline at end of file
+*/
+
+strategies
+
+  //testing only
+  main =
+    editor-analyze;
+    generate-aterm;
+    test-templatelang-to-esv;
+    test-templatelang-to-sdf;
+    test-templatelang-to-str;
+    templatelang-desugar-sdf-top; // FIXME shouldn't be needed
+    templatelang-desugar-top;     // FIXME shouldn't be needed
+    build-spoofaxlang-jvm;
+    compile-spx

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -1,25 +1,21 @@
-module desugar-sdf
+module templatelang-desugar-sdf
 
 language SpoofaxLang
 start symbol SdfProduction
 
-test transform no-attrs() into attrs([]) [[ X = ]]
-build test-templatelang-desugar to
-  SdfProduction("X", [], attrs([]))
-
 test transform SdfProductionWithCons without attrs into prod [[ X.Y = ]]
-build test-templatelang-desugar-sdf to 
+run templatelang-desugar-sdf-top to 
   prod([], sort("X"), attrs([term(default(appl(unquoted("cons"),[fun(quoted("\"Y\""))])))]))
 
 test transform SdfProductionWithCons with attrs into prod [[ X.Y = {left} ]]
-build test-templatelang-desugar-sdf to
+run templatelang-desugar-sdf-top to
   // NOTE: order of attributes is not important, but this cannot be tested 
   prod([], sort("X"), attrs([term(default(appl(unquoted("cons"),[fun(quoted("\"Y\""))]))),assoc(left)]))
 
 test transform SdfProduction without attrs into prod [[ X = ]]
-build test-templatelang-desugar-sdf to
+run templatelang-desugar-sdf-top to
   prod([], sort("X"), no-attrs())
 
 test transform SdfProduction with attrs into prod [[ X = {right} ]]
-build test-templatelang-desugar-sdf to
+run templatelang-desugar-sdf-top to
   prod([], sort("X"), attrs([assoc(right)]))

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -0,0 +1,72 @@
+module templatelang-desugar-template
+
+language SpoofaxLang
+start symbol Template
+
+test transform NoOptions() into Options(...) [[ <<<Z>>> ]]
+run templatelang-template-desugar to
+  SingleLineTemplate([Placeholder(_, _, _, Options([]))])
+
+// NOTE: Do not replace the tab in the next line with a space!
+test replace tabs with two spaces [[ <<c  d>> ]]
+run templatelang-template-desugar to SingleLineTemplate([
+  String("c"), Layout("  "), String("d")
+])
+
+// FIXME: Add tab char, see also spoofax-431.spt
+test unescape common escape chars (1) [[ <<<\ \'\"\r\n>>> ]]
+run templatelang-template-desugar to SingleLineTemplate([String(" '\"\r\n")])
+
+test unescape common escape chars (2) [[ "\ \'\"\r\n" ]]
+run templatelang-template-desugar to SingleLineTemplate([String(" '\"\r\n")])
+
+test unescape escaped brackets (1) [[ <<\<\>\\>> ]]
+run templatelang-template-desugar to SingleLineTemplate([String("<>\\")])
+
+test unescape escaped brackets (2) [[[ [[\[\]\\]] ]]]
+run templatelang-template-desugar to SingleLineTemplate([String("[]\\")])
+
+test unescape line ending (1) [[ <<<\\>  
+>> ]]
+run templatelang-template-desugar to SingleLineTemplate([String("")])
+
+test unescape line ending (2) [[[ [[[\\]  
+]] ]]]
+run templatelang-template-desugar to SingleLineTemplate([String("")])
+
+test unescape unicode codepoints [[ <<<\u41\u61>>> ]]
+run templatelang-template-desugar to SingleLineTemplate([String("Aa")])
+
+test unescape separators [[ <<<Z*; separator="\n">>> ]]
+run templatelang-template-desugar to SingleLineTemplate([
+  Placeholder(_, _, _, Options([Separator("\n")]))
+])
+
+test remove first and last line [[ <<
+  >> ]]
+run templatelang-template-desugar to Template([])
+
+test don't remove middle line [[ <<
+
+  >> ]]
+run templatelang-template-desugar to Template([_])
+
+test remove indentation [[ <<
+    one
+
+       two
+  >> ]]
+run templatelang-template-desugar to Template([
+  Line([Layout(""), String("one")]),
+  Line(_),
+  Line([Layout("   "), String("two")])
+])
+
+test don't remove leading layout in single line template [[ << x>> ]]
+run templatelang-template-desugar to SingleLineTemplate([Layout(_), String(_)])
+
+test don't remove trailing layout in single line template [[ <<x >> ]]
+run templatelang-template-desugar to SingleLineTemplate([String(_), Layout(_)])
+
+test don't put leading layout in single line template [[ <<x>> ]]
+run templatelang-template-desugar to SingleLineTemplate([String(_)])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar.spt	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -1,37 +1,20 @@
 module templatelang-desugar
-
-language SpoofaxLang
-start symbol Template
 
-test transform NoOptions() into Options([]) [[ <<<Z>>> ]]
-build test-templatelang-desugar to
-  Template([Placeholder(_, _, _, Options([]))])
-
-// NOTE: Do not replace the tab in the next line with a space!
-test replace tabs with two spaces [[ <<	ddd>> ]]
-build test-templatelang-desugar to Template([Layout("  "),String("ddd")])
-
-// FIXME: Add tab char, see also spoofax-431.spt
-test unescape common escape chars [[ <<<\ \'\"\r\n>>> ]]
-build test-templatelang-desugar to Template([String(" '\"\r\n")])
-
-test unescape escaped brackets (1) [[ <<\<\>\\>> ]]
-build test-templatelang-desugar to Template([String("<>\\")])
-
-test unescape escaped brackets (2) [[[ [[\[\]\\]] ]]]
-build test-templatelang-desugar to Template([String("[]\\")])
+language SpoofaxLang
+start symbol TemplateProduction
 
-test unescape line ending (1) [[ <<<\\>  
->> ]]
-build test-templatelang-desugar to Template([String("")])
+test transform no-attrs() into attrs(...) (1) [[ X = "" ]]
+run templatelang-desugar-top to TemplateProduction(_, _, attrs(_))
 
-test unescape line ending (2) [[[ [[[\\]  
-]] ]]]
-build test-templatelang-desugar to Template([String("")])
-
-test unescape unicode codepoints [[ <<<\u41\u61>>> ]]
-build test-templatelang-desugar to Template([String("Aa")])
+test transform no-attrs() into attrs(...) (2) [[ X.Y = "" ]]
+run templatelang-desugar-top to TemplateProduction(_, _, attrs(_))
 
-test un-double-quote and unescape separators [[ <<<Z*; separator="\n">>> ]]
-build test-templatelang-desugar to Template(
-  [Placeholder(_, _, _, Options([Separator("\n")]))])
+test transform TemplateProductionWithCons without attrs into TemplateProduction [[
+	X.Y = <<a>>
+]]
+run templatelang-desugar-top to TemplateProduction(_, _, _)
+
+test transform TemplateProductionWithCons with attrs into TemplateProduction [[
+  X.Y = <<a>> {left}
+]]
+run templatelang-desugar-top to TemplateProduction(_, _, _)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -3,19 +3,31 @@
 language SpoofaxLang
 start symbol Template
 
+test empty [[ <<>> ]]
+parse to Template([Line([])])
+
 test parse common escape chars [[ <<<\ \'\"\t\r\n>>> ]]
-parse to Template([Escape("<\\ \\'\\\"\\t\\r\\n>")])
+parse to Template([Line([Escape("<\\ \\'\\\"\\t\\r\\n>")])])
 
 test parse escaped brackets (1) [[ <<\<\>\\>> ]]
-parse to Template([Escape("\\<\\>\\\\")])
+parse to Template([Line([Escape("\\<\\>\\\\")])])
 
 test parse escaped brackets (2) [[[ [[\[\]\\]] ]]]
-parse to Template([Escape("\\[\\]\\\\")])
+parse to Template([Line([Escape("\\[\\]\\\\")])])
 
 test parse line ending (1) [[ <<<\\>
 >> ]]
-parse to Template([Escape("<\\\\>\n")])
+parse to Template([Line([Escape("<\\\\>\n")])])
 
 test parse line ending (2) [[[ [[[\\]
 ]] ]]]
-parse to Template([Escape("[\\\\]\n")])
+parse to Template([Line([Escape("[\\\\]\n")])])
+
+test parse separator (1) [[ <<<X; separator="\n">>> ]]
+parse to Template([Line([Placeholder(_, _, _, Options([Separator("\"\\n\"")]))])])
+
+test parse separator (2) [[ <<<X; separator=",">>> ]]
+parse to Template([Line([Placeholder(_, _, _, Options([Separator("\",\"")]))])])
+
+test parse separator (3) [[ <<<X; separator="x y">>> ]]
+parse to Template([Line([Placeholder(_, _, _, Options([Separator("\"x y\"")]))])])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -8,7 +8,7 @@
 
 // this test succeeds
 test tab char (1) [[ <<	>> ]] // tab char!
-parse to Template([Layout("	")]) // tab char!
+parse to Template([Line([Layout("	")])]) // tab char!
 
 // this test fails
 // test tab char (2) [[ <<	>> ]] // tab char!
@@ -21,6 +21,6 @@
 // ")])
 
 // and this test succeeds(!)
-test newline char (2) [[ <<
->> ]]
-parse to Template([Newline("\n")])
+// test newline char (2) [[ <<
+// >> ]]
+// parse to Template([Newline("\n")])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -35,22 +35,28 @@
 test empty [[
   X.Y = <<>>
 ]]
-build test-templatelang-to-esv to [[
+run test-templatelang-to-esv to [[
 
 ]]
 
 test placeholder [[
-  X.Y = <<<Z>>>
+  X.Y = <<
+    foo
+    <Z>
+  >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = <Z:Z> (blank)
+run test-templatelang-to-esv to [[
+  completion template X: "foo\n" <Z:Z> (blank)
 ]]
 
 test placeholder (text) [[
-  X.Y = <<< display text : Z>>>
+  X.Y = <<
+    foo
+    < display text : Z>
+  >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = < display text :Z> (blank)
+run test-templatelang-to-esv to [[
+  completion template X: "foo\n" < display text :Z> (blank)
 ]]
 
 test placeholder (option) [[
@@ -59,8 +65,8 @@
     <Z?>
   >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = "foo\n" (cursor) (blank)
+run test-templatelang-to-esv to [[
+  completion template X: "foo\n" (cursor) (blank)
 ]]
 
 test placeholder (plus) [[
@@ -69,8 +75,8 @@
     <Z+>
   >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = "foo\n" (cursor) (blank)
+run test-templatelang-to-esv to [[
+  completion template X: "foo\n" <Z:Z> (blank)
 ]]
 
 test placeholder (star) [[
@@ -79,35 +85,19 @@
     <Z*>
   >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = "foo\n" (cursor) (blank)
+run test-templatelang-to-esv to [[
+  completion template X: "foo\n" (cursor) (blank)
 ]]
 
-test placeholder (plus, separator) [[
-  X.Y = <<
-    foo
-    <Z+; separator=", ">
-  >>
-]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = "foo\n" (cursor) (blank)
-]]
-
-test placeholder (star, separator) [[
+test placeholder and literals [[
   X.Y = <<
     foo
-    <Z*; separator=" + ">
+    <Z>
+    bar
   >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = "foo\n" (cursor) (blank)
-]]
-
-test placeholder and literals [[
-  X.Y = <<foo <Z> bar>>
-]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = "foo " <Z:Z> " bar" (blank)
+run test-templatelang-to-esv to [[
+  completion template X: "foo\n" <Z:Z> "\nbar" (blank)
 ]]
 
 test placeholder (option) and literals [[
@@ -117,8 +107,8 @@
     bar
   >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = "foo\n" (cursor) "\nbar" (blank)
+run test-templatelang-to-esv to [[
+  completion template X: "foo\n" (cursor) "\nbar" (blank)
 ]]
 
 test n placeholders => one (cursor)-directive (1) [[
@@ -127,8 +117,8 @@
     <B?>
   >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = (cursor) (blank)
+run test-templatelang-to-esv to [[
+  completion template X: (cursor) (blank)
 ]]
 
 test n placeholders => one (cursor)-directive (2) [[
@@ -138,31 +128,19 @@
     <C?>
   >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template X: "Y" = (cursor) (blank)
+run test-templatelang-to-esv to [[
+  completion template X: (cursor) (blank)
 ]]
 
-test statement [[
+test if then statement [[
   Statement.IfThen = <<
+    <MetaAnno*; separator="\n">
     if <Exp> then
       <Statement*; separator="\n">
     end
   >>
 ]]
-build test-templatelang-to-esv to [[
-  completion template Statement: "IfThen" =
+run test-templatelang-to-esv to [[
+  completion template Statement:
     "if " <Exp:Exp> " then\n\t" (cursor) "\nend" (blank)
 ]]
-
-test Mobl MetaAnno [[
-  FunctionDef.FunctionNoReturnType = <<
-    <MetaAnno*; separator="\n">
-    function <QId>(<FArg*; separator=", ">) {
-      <Statement*; separator="\n">
-    }
-  >>
-]]
-build test-templatelang-to-esv to [[
-  completion template FunctionDef: "FunctionNoReturnType" =
-    "function " <QId:QId> "(" <FArg:FArg> ") {\n\t" (cursor) "\n}" (blank)
-]]

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt (from r23507, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf.spt)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf.spt	Thu Oct 20 15:37:00 2011	(r23507, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -1,4 +1,4 @@
-module templatelang-to-sdf
+module templatelang-to-sdf-1
 
 language SpoofaxLang
 target language SDF
@@ -16,65 +16,43 @@
 ]]
 
 test empty [[
-  X.Y = <<>>
   Z.Y = <<>>  // double test to be able to re-use the footer for this test
+  X.Y = <<>>
 ]]
-build test-templatelang-to-sdf to [[
-  -> X {cons("Y")}
+run test-templatelang-to-sdf to [[
   -> Z {cons("Y")}
+  -> X {cons("Y")}
 ]]
 
-test placeholder [[
-  X.Y = <<<Z>>>
-]]
-build test-templatelang-to-sdf to [[
-  Z -> X {cons("Y")}
-]]
-
-test placeholder (text) [[
-  X.Y = <<<this text is ignored : Z>>>
-]]
-build test-templatelang-to-sdf to [[
-  Z -> X {cons("Y")}
-]]
-
-test placeholder (option) [[
-  X.Y = <<<Z?>>>
-]]
-build test-templatelang-to-sdf to [[
-  Z? -> X {cons("Y")}
-]]
-
-test placeholder (plus) [[
-  X.Y = <<<Z+>>>
-]]
-build test-templatelang-to-sdf to [[
-  Z+ -> X {cons("Y")}
-]]
+test placeholder [[ X.Y = <<<Z>>> ]]
+run test-templatelang-to-sdf to [[ Z -> X {cons("Y")} ]]
 
-test placeholder (star) [[
-  X.Y = <<<Z*>>>
-]]
-build test-templatelang-to-sdf to [[
-  Z* -> X {cons("Y")}
-]]
+test placeholder (text) [[ X.Y = <<<this text is ignored : Z>>> ]]
+run test-templatelang-to-sdf to [[ Z -> X {cons("Y")} ]]
 
-test placeholder (plus, separator) [[
-  X.Y = <<<Z+; separator=", ">>>
-]]
-build test-templatelang-to-sdf to [[
-  {Z ","}+ -> X {cons("Y")}
-]]
+test placeholder (option) [[ X.Y = <<<Z?>>> ]]
+run test-templatelang-to-sdf to [[ Z? -> X {cons("Y")} ]]
 
-test placeholder (star, separator) [[
-  X.Y = <<<Z*; separator=" + ">>>
-]]
-build test-templatelang-to-sdf to [[
-  {Z "+"}* -> X {cons("Y")}
-]]
+test placeholder (plus) [[ X.Y = <<<Z+>>> ]]
+run test-templatelang-to-sdf to [[ Z+ -> X {cons("Y")} ]]
+
+test placeholder (star) [[ X.Y = <<<Z*>>> ]]
+run test-templatelang-to-sdf to [[ Z* -> X {cons("Y")} ]]
+
+test placeholder (plus, separator) [[ X.Y = <<<Z+; separator=", ">>> ]]
+run test-templatelang-to-sdf to [[ {Z ","}+ -> X {cons("Y")} ]]
+
+test placeholder (star, separator) [[ X.Y = <<<Z*; separator=" + ">>> ]]
+run test-templatelang-to-sdf to [[ {Z "+"}* -> X {cons("Y")} ]]
+
+test escaped chars in literal [[ X.Y = <<<\"\t\n><Z>>> ]]
+run test-templatelang-to-sdf to [[ "\"\t\n" Z -> X {cons("Y")} ]]
+
+test escaped chars in separator [[ X.Y = <<<Z*; separator="\"">>> ]]
+run test-templatelang-to-sdf to [[ {Z "\""}* -> X {cons("Y")} ]]
 
 target setup footer [[
   context-free syntax
-    CONTENTCOMPLETE -> X {cons("WATER"), avoid}
-    CONTENTCOMPLETE -> Z {cons("WATER"), avoid}
+    CONTENTCOMPLETE -> Z {cons("COMPLETION-Z")}
+    CONTENTCOMPLETE -> X {cons("COMPLETION-X")}
 ]]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -0,0 +1,75 @@
+module templatelang-to-sdf-2
+
+language SpoofaxLang
+target language SDF
+
+setup [[
+  package example
+  module example
+  templates
+    // multi line template
+    Statement.IfThen = <<
+      <MetaAnno*; separator="\n">
+      if <Exp> then
+        <Statement*; separator="\n">
+      else
+        <Statement*; separator="\n">
+    >>
+    // single line template
+    Exp.Plus = <<<Exp> + <Exp>>>
+]]
+
+target setup header [[
+  module example
+  exports
+    context-free syntax  
+]]
+
+test no newlines [[
+  template options
+    newlines: none
+]]
+run test-templatelang-to-sdf to [[
+  MetaAnno* "if" Exp "then" Statement* "else" Statement* -> Statement {cons("IfThen")}  
+]]
+
+test leading newlines [[
+  template options
+    newlines: leading
+]]
+run test-templatelang-to-sdf to [[
+  MetaAnno* "\n" "if" Exp "then" Statement* "\n" "else" Statement* -> Statement {cons("IfThen")}
+]]
+
+test trailing newlines [[
+  template options
+    newlines: trailing
+]]
+run test-templatelang-to-sdf to [[
+  MetaAnno* "if" Exp "then" "\n" Statement* "else" "\n" Statement* -> Statement {cons("IfThen")}
+]]
+
+// test separating newlines [[
+//   template options
+//     newlines: separating
+// ]]
+// run test-templatelang-to-sdf to [[
+//   %% Newlines separating MetaAnnos must be at end because sort is used at start of production.  
+//   %% Newlines separating Statement must be at start because sort is used at end of production.
+//   (MetaAnno "\n")* "if" Exp "then" ("\n" Statement)* "\n" "else" ("\n" Statement)* -> Statement {cons("IfThen")}
+// 
+//   %% Issue: Cannot support separators with both a newline and another character!
+//   %%
+//   %% {MetaAnno ";\n"}+ "\n" -> MetaAnnos
+//   %% -> MetaAnnos {ast("[]")}
+//   %% "\n" {Statement ";\n"}+ -> Statements
+//   %% -> Statements {ast("[]")}
+// ]]
+
+target setup footer [[
+    Exp "+" Exp -> Exp {cons("Plus")}
+  context-free syntax
+    CONTENTCOMPLETE -> MetaAnno {cons("COMPLETION-MetaAnno")}
+    CONTENTCOMPLETE -> Statement {cons("COMPLETION-Statement")}
+    CONTENTCOMPLETE -> Exp {cons("COMPLETION-Exp")}
+]]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -20,35 +20,36 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
-    pp-guarantee-newline = string-ends-with(|"\n") <+ <conc-strings> (<id>, "\n")
-    pp-ih(|t) = ?"" <+ prefix-lines(|t); pp-guarantee-newline
+    pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
+    pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
   strategies
-    prettyprint-X: Y(a) -> zz with
+    prettyprint-X: Y(a) -> a'
       // The strategies invoked here differ per test
       // The footer contains a last, common line.
 ]]
 
 test placeholder [[ X.Y = <<<Z>>> ]]
-build test-templatelang-to-str to [[ a' := <prettyprint-Z> a; ]]
+run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
 
 test placeholder (text) [[ X.Y = <<<this text is ignored : Z>>> ]]
-build test-templatelang-to-str to [[ a' := <prettyprint-Z> a; ]]
+run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
 
 test placeholder (plus) [[ X.Y = <<<Z+>>> ]]
-build test-templatelang-to-str to [[ a' := <pp-list(prettyprint-Z|" ")> a; ]]
+run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" ")> a ]]
 
 test placeholder (star) [[ X.Y = <<<Z*>>> ]]
-build test-templatelang-to-str to [[ a' := <pp-list(prettyprint-Z|" ")> a; ]]
+run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" ")> a ]]
 
 test placeholder (plus, separator) [[ X.Y = <<<Z+; separator=", ">>> ]]
-build test-templatelang-to-str to [[ a' := <pp-list(prettyprint-Z|", ")> a; ]]
+run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|", ")> a ]]
 
 test placeholder (star, separator) [[ X.Y = <<<Z*; separator=" + ">>> ]]
-build test-templatelang-to-str to [[ a' := <pp-list(prettyprint-Z|" + ")> a; ]]
+run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" + ")> a ]]
 
-target setup footer [[
-	  zz := <concat-strings> [a']
+test escaped chars in separator [[ X.Y = <<<Z*; separator="\"\t">>> ]]
+run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|"\"\t")> a ]]
 
+target setup footer [[
   strategies
     prettyprint-Z = is-string
 ]]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -7,9 +7,7 @@
 //        input, instead of testing the exact form of the generated stratego code.
 //        This is currently not really possible, however ...
 
-// TODO: All tests are now equal, remove the duplicates?
-
-setup common input [[
+test if then statement [[
   package example
   module example
   templates
@@ -20,59 +18,22 @@
       end
     >>
 ]]
-
-target setup header [[
+run test-templatelang-to-str to [[
   module prettyprinter
   imports
     libstratego-lib
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
-    pp-guarantee-newline = string-ends-with(|"\n") <+ <conc-strings> (<id>, "\n")
-    pp-ih(|t) = ?"" <+ prefix-lines(|t); pp-guarantee-newline
+    pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
+    pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
   strategies
-]]
-
-test no newlines [[
-  template options
-    newlines : none
-]]
-build test-templatelang-to-str to [[
-  prettyprint-Statement: IfThen(a, b, c) -> zz
-    with
-      a' := <pp-list(prettyprint-MetaAnno|"\n")> a;
-      b' := <prettyprint-Exp> b;
-      c' := <pp-list(prettyprint-Statement|"\n")> c;
-      zz := <concat-strings> [<pp-ih(|"")> a', "if ", b', " then\n", <pp-ih(|"  ")> c', "end"]
-]]
-
-test leading newlines [[
-  template options
-    newlines : leading
-]]
-build test-templatelang-to-str to [[
-  prettyprint-Statement: IfThen(a, b, c) -> zz
-    with
-      a' := <pp-list(prettyprint-MetaAnno|"\n")> a;
-      b' := <prettyprint-Exp> b;
-      c' := <pp-list(prettyprint-Statement|"\n")> c;
-      zz := <concat-strings> [<pp-ih(|"")> a', "if ", b', " then\n", <pp-ih(|"  ")> c', "end"]
-]]
-
-test trailing newlines [[
-  template options
-    newlines : trailing
-]]
-build test-templatelang-to-str to [[
-  prettyprint-Statement: IfThen(a, b, c) -> zz
-    with
-      a' := <pp-list(prettyprint-MetaAnno|"\n")> a;
-      b' := <prettyprint-Exp> b;
-      c' := <pp-list(prettyprint-Statement|"\n")> c;
-      zz := <concat-strings> [<pp-ih(|"")> a', "if ", b', " then\n", <pp-ih(|"  ")> c', "end"]   
-]]
-
-target setup footer [[
+    prettyprint-Statement: IfThen(a, b, c) -> zz
+      where
+        a' := <pp-list(prettyprint-MetaAnno|"\n")> a;
+        b' := <prettyprint-Exp> b;
+        c' := <pp-list(prettyprint-Statement|"\n")> c;
+        zz := <concat-strings> [<pp-ih-1(|"")> a', "if ", b', " then", <pp-ih-2(|"  ")> c', "\nend"]
   strategies
     prettyprint-MetaAnno = is-string
     prettyprint-Exp = is-string

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt	Wed Oct 26 10:29:38 2011	(r23531)
@@ -16,16 +16,21 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
-    pp-guarantee-newline = string-ends-with(|"\n") <+ <conc-strings> (<id>, "\n")
-    pp-ih(|t) = ?"" <+ prefix-lines(|t); pp-guarantee-newline
-  strategies
+    pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
+    pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
 ]]
 
 test injection (1) [[ QId = <<<ID>>> ]]
-build test-templatelang-to-str succeeds
+run test-templatelang-to-str
 
 test injection (2) [[ QId = <<#<ID>#>> ]]
-build test-templatelang-to-str succeeds
+run test-templatelang-to-str
+
+test keyword injection (1) [[ Expression.SomeKeyword = <<somekeyword>> ]]
+run test-templatelang-to-str
+
+test keyword injection (2) [[ Expression.SomeKeyword = << somekeyword >> ]]
+run test-templatelang-to-str
 
 test indentation of placeholder at end of template [[
   Start.Configuration = <<
@@ -33,11 +38,14 @@
       <Setting*; separator="\n">
   >>
 ]]
-build test-templatelang-to-str to [[
-  prettyprint-Start :
-    Configuration(a) -> zz
-    with a' := <pp-list(prettyprint-Setting|"\n")> a
-         ; zz := <concat-strings> ["configuration\n", <pp-ih(|"  ")> a']
+run test-templatelang-to-str to [[
+  strategies
+    prettyprint-Start :
+      Configuration(a) -> zz
+      where a' := <pp-list(prettyprint-Setting|"\n")> a
+            ; zz := <concat-strings> ["configuration", <pp-ih-2(|"  ")> a']
+  strategies
+    prettyprint-Setting = is-string
 ]]
 
 // silly test; there might be a real use case though
@@ -47,14 +55,31 @@
     configuration
   >>
 ]]
-build test-templatelang-to-str to [[
-  prettyprint-Start :
-    Configuration(a) -> zz
-    with a' := <pp-list(prettyprint-Setting|"\n")> a
-         ; zz := <concat-strings> [<pp-ih(|"  ")> a', "configuration"]
+run test-templatelang-to-str to [[
+  strategies
+    prettyprint-Start :
+      Configuration(a) -> zz
+      where a' := <pp-list(prettyprint-Setting|"\n")> a
+            ; zz := <concat-strings> [<pp-ih-1(|"  ")> a', "configuration"]
+  strategies
+    prettyprint-Setting = is-string
+]]
+
+test escaped chars in literal (1) [[ X.Y = <<<\"\t>>> ]]
+run test-templatelang-to-str to [[
+  strategies
+    prettyprint-X :
+      Y() -> "\"\t"
+  strategies
 ]]
 
-target setup footer [[
+test escaped chars in literal (2) [[ X.Y = <<<\"\t><Z>>> ]]
+run test-templatelang-to-str to [[
+  strategies
+    prettyprint-X :
+      Y(a) -> zz
+      where a' := <prettyprint-Z> a
+            ; zz := <concat-strings> ["\"\t", a']
   strategies
-    prettyprint-Setting = is-string        
+    prettyprint-Z = is-string
 ]]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/templatelang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/templatelang.str	Wed Oct 26 08:56:08 2011	(r23530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/templatelang.str	Wed Oct 26 10:29:38 2011	(r23531)
@@ -11,86 +11,16 @@
   constructors
     // Options
     Newlines : X
-    // Other
-    Indent : String -> Indent
-
-strategies
-
-  sort-has-leading-newline =
-    bagof-Declaration;
-    ?[_|_];
-    all(?TemplateProduction(_, Template([Newline(_)| _]), _))
-
-  sort-has-trailing-newline =
-    bagof-Declaration;
-    ?[_|_];
-    let trailing-newline =
-          at-suffix([Newline(id), ?Layout(_) + ?Indent(_)] <+ [Newline(id)])
-    in
-      all(?TemplateProduction(_, Template(<trailing-newline>), _))
-    end
 
 strategies // Utility strategies
 
-  // is-layout is already defined somewhere else
-  xxx-is-layout = ?Layout(_) + ?Indent(_) + ?Newline(_)
-
-  trim-leading-layout =
-    ltrim(xxx-is-layout)
-
-  trim-trailing-layout =
-    rtrim(xxx-is-layout)
-
-  trim-trailing-indent =
-    rtrim(?Indent(_))
-
-  trim-layout =
-    trim-leading-layout;
-    trim-trailing-layout
-
-  // This doesn't take the indentation due to everything up to
-  // the open brackets of the template into account.
-  get-indent-string =
-    let get-indent =
-             \[Newline(_), Layout(y), _ | tail] -> [<string-replace(|"\t", "  "); string-length> y | <get-indent> tail]\
-          <+ \[Newline(_), Layout(_)] -> []\
-          <+ \[Newline(_), Newline(_) | tail] -> <get-indent> tail\
-          <+ \[Newline(_), y | tail] -> [0 | <get-indent> tail]\
-          <+ \[_ | tail] -> <get-indent> tail\
-          <+ []
-    in
-      get-indent; list-min => size;
-      // Build string from right to left, as list.
-      ![]; repeat(![' ' | <id>] | size); !['\n' | <id>];
-      implode-string
-    end
-
-  re-indent(|indent-string) =
-    \[Newline(_), Layout(indent) | tail] -> result
-    with
-      // Add a newline because indent-string contains a newline as anchor.
-      indent' := <string-replace(|indent-string, "")> <conc-strings>("\n", indent);
-      tail' := <re-indent(|indent-string)> tail;
-      result := [Newline("\n"), Indent(indent') | tail']\
-  <+
-    \[head | tail] -> [head | <re-indent(|indent-string)> tail]\
-  <+
-    []
-
-  try-re-indent =
-    if get-indent-string => is then
-      re-indent(|is)
-    end
-
   concatenate-consecutive-strings =
-       \[String(a), String(b) | tail] -> <concatenate-consecutive-strings> [String(<conc-strings> (a, b)) | tail]\
-    <+ [id | concatenate-consecutive-strings]
-    <+ []
-
-  combine-consecutive-newlines =
-       \[Newline(x){a*}, Newline(_){b*} | tail] -> <combine-consecutive-newlines> [Newline(x){a*, b*} | tail]\
-    <+ [id | combine-consecutive-newlines]
-    <+ []
+    rec r(
+         ?[String("") | <r>]
+      <+ \[String(a), String(b) | tail] -> <r> [String(<conc-strings> (a, b)) | tail]\
+      <+ [id | r]
+      <+ []
+    )
 
   templatelang-escape =
     string-replace(|"\\", "\\\\");

From tobivollebregt at gmail.com  Wed Oct 26 16:11:29 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 26 Oct 2011 14:11:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23532 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf: test trans
Message-ID: <20111026141129.2E7ADCC0C6@mx4.tudelft.nl>

Author: tvo
Date: Wed Oct 26 14:11:28 2011
New Revision: 23532
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23532&sc=1

Log:
Tweak warnings given by SDF editor

(optional sequence is fine if it contains exactly one non-terminal)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf	Wed Oct 26 10:29:38 2011	(r23531)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf	Wed Oct 26 14:11:28 2011	(r23532)
@@ -28,6 +28,12 @@
     
     Start Start -> Z
     %%X Y Z -> Bar
+
+    ","? -> X {cons("X")}
+    ("," ",")? -> X {cons("X")}
+    ("," X ",")? -> X {cons("X")} %% this is ok
+    ("," X X ",")? -> X {cons("X")}
+
   syntax
     
     "X" [A-Z]* -> <FOO-CF>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Wed Oct 26 10:29:38 2011	(r23531)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Wed Oct 26 14:11:28 2011	(r23532)
@@ -122,13 +122,11 @@
   context-free-syntax-warning:
     opt(s @ seq(_, _)) -> (s, $[Extract sequence in optional to separate productions to ensure acceptable abstract syntax])
     where
-      <occurrences(is-non-terminal)> s => 1
+      not(<occurrences(is-non-terminal)> s => 1)
 
   // TODO: don't warn for ? in {ast("...")} productions
   context-free-syntax-warning:
-    opt(lit) -> (lit, $[Extract literal in optional to separate productions to ensure consistent abstract syntax])
-    where
-      oncetd(?lit(_))
+    opt(lit(_)) -> (<id>, $[Extract literal in optional to separate productions to ensure consistent abstract syntax])
 
   /**
    * Tests if something is a non-terminal in terms of the AST produced.

From tobivollebregt at gmail.com  Wed Oct 26 16:14:08 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 26 Oct 2011 14:14:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23533 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: syntax
	trans/analyze/sdf trans/codegen/template
	trans/unit-tests/templatelang
Message-ID: <20111026141408.7B0E9108C038@mx3.tudelft.nl>

Author: tvo
Date: Wed Oct 26 14:14:08 2011
New Revision: 23533
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23533&sc=1

Log:
TemplateLang: separating newlines (dual of the generated pp wrt newlines)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Oct 26 14:11:28 2011	(r23532)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Oct 26 14:14:08 2011	(r23533)
@@ -23,9 +23,10 @@
 
     "newlines" ":" NewlineOptionValue -> TemplateOption {cons("Newlines")}
 
-    "none"     -> NewlineOptionValue {cons("None")}
-    "leading"  -> NewlineOptionValue {cons("Leading")}
-    "trailing" -> NewlineOptionValue {cons("Trailing")}
+    "none"       -> NewlineOptionValue {cons("None")}
+    "leading"    -> NewlineOptionValue {cons("Leading")}
+    "trailing"   -> NewlineOptionValue {cons("Trailing")}
+    "separating" -> NewlineOptionValue {cons("Separating")}
 
     "keyword" "-/-" Lookaheads[[SDF]] -> TemplateOption {cons("KeywordFollowRestriction")}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Wed Oct 26 14:11:28 2011	(r23532)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Wed Oct 26 14:14:08 2011	(r23533)
@@ -227,23 +227,23 @@
 
   context-free-syntax-error:
     prod(_, _, attrs(attr*)) ->
-      (attr*, $[Multiple definition of constructor (already specified at start of production?)])
+      (attr*, "Multiple definition of constructor (already specified at start of production?)")
     where
       <gti> (<filter(fetch-cons); length> attr*, 1)
 
   context-free-templates-error:
     TemplateProduction(_, _, attrs(attr*)) ->
-      (attr*, $[Multiple definition of constructor (already specified at start of production?)])
+      (attr*, "Multiple definition of constructor (already specified at start of production?)")
     where
       <gti> (<filter(fetch-cons); length> attr*, 1)
 
   context-free-templates-warning:
     Template([head | _]) ->
-      (head, $[Insert a linebreak between the start of a multi line template and its first element])
+      (head, "Insert a linebreak between the start of a multi line template and its first element")
     where
     	<eq> (<origin-line>, <origin-line> head)
 
   context-free-templates-warning:
-    Layout(t) -> (t, $[Do not use tab characters in templates])
+    Layout(t) -> (t, "Do not use tab characters in templates")
     where
     	origin-text; explode-string; one('\t')

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Oct 26 14:11:28 2011	(r23532)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Oct 26 14:14:08 2011	(r23533)
@@ -100,19 +100,75 @@
     with
       A* := <template-to-sdf> t
 
+  // Single line template.
+  //  -OR-
+  // Template with only a placeholder. (i.e., injection)
+  // The placeholder is at the start AND at the end of the template!
   template-to-sdf:
-    SingleLineTemplate(elem*) -> A*
+    < ?SingleLineTemplate(elem*)
+    + ?Template([Line(elem* @ [Layout(_), Placeholder(_, _, _, _)])]) > -> A*
     with
-      A* := <filter(template-element-to-sdf);
+      A* := <maybe-separating(
+      	       filter(template-element-to-sdf-sep <+ template-element-to-sdf),
+      	       filter(template-element-to-sdf)
+      	     );
              flatten-list> elem*
 
+  // Multi line template.
   template-to-sdf:
     Template(line*) -> A*
     with
       A* := <filter(?Line([Layout(_), _ | _]));
-             map(template-line-to-sdf);
+             maybe-separating(
+             	 !(<id>, 0); thread-map(template-line-to-sdf-sep); ?(<id>, _),
+             	 map(template-line-to-sdf)
+             );
              flatten-list> line*
 
+  maybe-separating(yes, no) =
+    if <Options> Newlines() => Separating() then yes else no end
+
+rules
+
+  template-line-to-sdf-sep:
+    (Line([Layout(_), p @ Placeholder(_, sort(S), mult, Options(option*))]), state) ->
+      (result, state)
+    where
+      <one(Separator("\n"))> option*
+    where
+      L := "\"\\n\"";
+      switch !(mult, state)
+        case ?(None()  , 0) : result := A|[ (S L)  ]|
+        case ?(Option(), 0) : result := A|[ (S L)? ]|
+        case ?(Star()  , 0) : result := A|[ (S L)* ]|
+        case ?(Plus()  , 0) : result := A|[ (S L)+ ]|
+        case ?(None()  , 1) : result := A|[ (L S)  ]|
+        case ?(Option(), 1) : result := A|[ (L S)? ]|
+        case ?(Star()  , 1) : result := A|[ (L S)* ]|
+        case ?(Plus()  , 1) : result := A|[ (L S)+ ]|
+      end
+
+  template-line-to-sdf-sep:
+    (Line(elem*), 0) -> (<template-line-to-sdf-sep-helper> elem*, 1)
+
+  template-line-to-sdf-sep:
+    (Line(elem*), 1) ->
+      ([ A|[ "\"\\n\"" ]| | <template-line-to-sdf-sep-helper> elem*], 1)
+
+  template-line-to-sdf-sep-helper =
+    not(?[Layout(_), Placeholder(_, _, _, Options(<one(Separator("\n"))>))]);
+    filter(template-element-to-sdf-sep <+ template-element-to-sdf)
+
+  template-element-to-sdf-sep:
+    Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ {S "\"\\n\""}* ]|
+    where <one(Separator("\n"))> option*
+
+  template-element-to-sdf-sep:
+    Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ {S "\"\\n\""}+ ]|
+    where <one(Separator("\n"))> option*
+
+rules
+
   template-line-to-sdf =
     ?Line(<id>);
     if not(?[Layout(_), Placeholder(_, _, _, _)]) then

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Oct 26 14:11:28 2011	(r23532)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Oct 26 14:14:08 2011	(r23533)
@@ -94,14 +94,17 @@
                       concatenate-consecutive-strings> elem*;
       cons := <fetch-cons-name> attrs
 
-  // Single line template with only a placeholder. (i.e., injection)
+  // Template with only a placeholder. (i.e., injection)
   // The placeholder is at the start AND at the end of the template!
   template-to-prettyprint-strategy:
-    TemplateProduction(sort, SingleLineTemplate([p @ Placeholder(_, _, _, _)]), attrs) ->
+    TemplateProduction(sort, template, attrs) ->
     $[prettyprint-[sort]:
         [input] -> a'
         where
-        	[<template-element-to-prettyprint> p{"a"}]]
+          [<template-element-to-prettyprint> p{"a"}]]
+    where
+      < ?SingleLineTemplate([p @ Placeholder(_, _, _, _)])
+      + ?Template([Line([Layout(_), p @ Placeholder(_, _, _, _)])]) > template
     with
       if cons := <fetch-cons-name> attrs then
         input := $[[cons](a)]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt	Wed Oct 26 14:11:28 2011	(r23532)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt	Wed Oct 26 14:14:08 2011	(r23533)
@@ -7,7 +7,8 @@
   package example
   module example
   templates
-    // multi line template
+    // multi line template
+    // placeholder @ (start, middle, end)
     Statement.IfThen = <<
       <MetaAnno*; separator="\n">
       if <Exp> then
@@ -15,8 +16,16 @@
       else
         <Statement*; separator="\n">
     >>
+    // placeholder @ start & end
+    Statements = <<
+      <Statement*; separator="\n">
+    >>
     // single line template
     Exp.Plus = <<<Exp> + <Exp>>>
+    // injection (1)
+    Statement = <<<Comment>>>
+    // injection (2)
+    Statement.Comment = <<<Comment>>>
 ]]
 
 target setup header [[
@@ -30,7 +39,8 @@
     newlines: none
 ]]
 run test-templatelang-to-sdf to [[
-  MetaAnno* "if" Exp "then" Statement* "else" Statement* -> Statement {cons("IfThen")}  
+  MetaAnno* "if" Exp "then" Statement* "else" Statement* -> Statement {cons("IfThen")}
+  Statement* -> Statements {}
 ]]
 
 test leading newlines [[
@@ -39,6 +49,7 @@
 ]]
 run test-templatelang-to-sdf to [[
   MetaAnno* "\n" "if" Exp "then" Statement* "\n" "else" Statement* -> Statement {cons("IfThen")}
+  Statement* -> Statements {}
 ]]
 
 test trailing newlines [[
@@ -47,29 +58,29 @@
 ]]
 run test-templatelang-to-sdf to [[
   MetaAnno* "if" Exp "then" "\n" Statement* "else" "\n" Statement* -> Statement {cons("IfThen")}
+  Statement* -> Statements {}
 ]]
 
-// test separating newlines [[
-//   template options
-//     newlines: separating
-// ]]
-// run test-templatelang-to-sdf to [[
-//   %% Newlines separating MetaAnnos must be at end because sort is used at start of production.  
-//   %% Newlines separating Statement must be at start because sort is used at end of production.
-//   (MetaAnno "\n")* "if" Exp "then" ("\n" Statement)* "\n" "else" ("\n" Statement)* -> Statement {cons("IfThen")}
-// 
-//   %% Issue: Cannot support separators with both a newline and another character!
-//   %%
-//   %% {MetaAnno ";\n"}+ "\n" -> MetaAnnos
-//   %% -> MetaAnnos {ast("[]")}
-//   %% "\n" {Statement ";\n"}+ -> Statements
-//   %% -> Statements {ast("[]")}
-// ]]
+test separating newlines [[
+  template options
+    newlines: separating
+]]
+run test-templatelang-to-sdf to [[
+  %% Newlines separating MetaAnnos must be at end because sort is used at start of production.  
+  %% Newlines separating Statement must be at start because sort is used at end of production.
+  (MetaAnno "\n")* "if" Exp "then" ("\n" Statement)* "\n" "else" ("\n" Statement)* -> Statement {cons("IfThen")}
+  {Statement "\n"}* -> Statements {}
+  %% Issue: Cannot support separators with both a newline and another character!
+]]
 
 target setup footer [[
-    Exp "+" Exp -> Exp {cons("Plus")}
+    Exp "+" Exp -> Exp   {cons("Plus")}
+    Comment -> Statement {}
+    Comment -> Statement {cons("Comment")}
   context-free syntax
-    CONTENTCOMPLETE -> MetaAnno {cons("COMPLETION-MetaAnno")}
-    CONTENTCOMPLETE -> Statement {cons("COMPLETION-Statement")}
-    CONTENTCOMPLETE -> Exp {cons("COMPLETION-Exp")}
+    CONTENTCOMPLETE -> MetaAnno   {cons("COMPLETION-MetaAnno")}
+    CONTENTCOMPLETE -> Statements {cons("COMPLETION-Statements")}
+    CONTENTCOMPLETE -> Exp        {cons("COMPLETION-Exp")}
+    CONTENTCOMPLETE -> Comment    {cons("COMPLETION-Comment")}
+    CONTENTCOMPLETE -> Statement  {cons("COMPLETION-Statement")}
 ]]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Wed Oct 26 14:11:28 2011	(r23532)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Wed Oct 26 14:14:08 2011	(r23533)
@@ -28,7 +28,14 @@
       // The footer contains a last, common line.
 ]]
 
-test placeholder [[ X.Y = <<<Z>>> ]]
+test placeholder (single line, injection) [[ X.Y = <<<Z>>> ]]
+run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
+
+test placeholder (multi line, injection) [[
+  X.Y = <<
+    <Z>
+  >>
+]]
 run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
 
 test placeholder (text) [[ X.Y = <<<this text is ignored : Z>>> ]]

From m.dejonge at tudelft.nl  Wed Oct 26 16:20:22 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 26 Oct 2011 14:20:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23534 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20111026142022.380582B808F@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Oct 26 14:20:21 2011
New Revision: 23534
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23534&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java	Wed Oct 26 14:14:08 2011	(r23533)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokenStreamPrimitive.java	Wed Oct 26 14:20:21 2011	(r23534)
@@ -8,8 +8,10 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
+import org.spoofax.terms.attachments.OriginAttachment;
 
 /**
  * Tokens + TokenKind
@@ -31,7 +33,11 @@
 				IStrategoTerm tokenText = env.getFactory().makeString(tokenizer.getTokenAt(i).toString());
 				IStrategoTerm tokenSort = env.getFactory().makeInt(tokenizer.getTokenAt(i).getKind());
 				IStrategoTerm tokenIndex = env.getFactory().makeInt(i);
-				tokenTuples.add(env.getFactory().makeTuple(tokenIndex, tokenText, tokenSort));
+				IStrategoTuple tokenInfo = env.getFactory().makeTuple(tokenIndex, tokenText, tokenSort);
+				IStrategoTerm nodeOfToken = OriginAttachment.getOrigin(tokenizer.getTokenAt(i).getAstNode());
+				if(nodeOfToken != null)
+					OriginAttachment.setOrigin(tokenInfo, nodeOfToken);
+				tokenTuples.add(tokenInfo);
 			}
 		}		
 		return env.getFactory().makeList(tokenTuples);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java	Wed Oct 26 14:14:08 2011	(r23533)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginTokensPrimitive.java	Wed Oct 26 14:20:21 2011	(r23534)
@@ -10,6 +10,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
+import org.spoofax.terms.attachments.OriginAttachment;
 
 /**
  * Tokens
@@ -27,8 +28,13 @@
 		int endIndex = getRightToken(origin).getIndex();
 		ArrayList<IStrategoTerm> tokenStrings=new ArrayList<IStrategoTerm>();
 		for (int i = startIndex; i <= endIndex; i++) {
-			if(tokenizer.getTokenAt(i).getKind() != IToken.TK_EOF)
-				tokenStrings.add(env.getFactory().makeString(tokenizer.getTokenAt(i).toString()));
+			if(tokenizer.getTokenAt(i).getKind() != IToken.TK_EOF){
+				IStrategoTerm tokenString = env.getFactory().makeString(tokenizer.getTokenAt(i).toString());
+				IStrategoTerm nodeOfToken = OriginAttachment.getOrigin(tokenizer.getTokenAt(i).getAstNode());
+				if(nodeOfToken != null)
+					OriginAttachment.setOrigin(tokenString, nodeOfToken);
+				tokenStrings.add(tokenString);
+			}
 		}		
 		return env.getFactory().makeList(tokenStrings);
 	}

From m.dejonge at tudelft.nl  Fri Oct 28 13:07:48 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 28 Oct 2011 11:07:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23535 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr
Message-ID: <20111028110748.505D0CC06A@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Oct 28 11:07:46 2011
New Revision: 23535
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23535&sc=1

Log:
recover-completion parse primitive to process generated error files from stratego

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java   (contents, props changed)
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java	Wed Oct 26 14:20:21 2011	(r23534)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java	Fri Oct 28 11:07:46 2011	(r23535)
@@ -23,6 +23,7 @@
         add(new JSGLR_parse_stratego());
         add(new JSGLR_open_parsetable());
         add(new JSGLR_parse_string_pt());
+        add(new JSGLR_recover_parse_string());
 	}
 
 	public String getOperatorRegistryName() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java	Wed Oct 26 14:20:21 2011	(r23534)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java	Fri Oct 28 11:07:46 2011	(r23535)
@@ -46,6 +46,9 @@
 		lastException = null;
 	}
 
+	/**
+	 * tvars: 0 => input string, 1 => table, 2 => startsymbol, 3 => path
+	 */
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 			throws InterpreterException {
@@ -70,8 +73,7 @@
 
 		lastPath = asJavaString(tvars[3]);
 		
-		JSGLRLibrary lib = getLibrary(env);
-		ParseTable table = lib.getParseTable(asJavaInt(tvars[1]));
+		ParseTable table = getParseTable(env, tvars);
 		if (table == null)
 			return false;
 
@@ -96,13 +98,18 @@
 			return svars[0].evaluate(env);
 		}
 	}
+
+	protected ParseTable getParseTable(IContext env, IStrategoTerm[] tvars) {
+		JSGLRLibrary lib = getLibrary(env);
+		ParseTable table = lib.getParseTable(asJavaInt(tvars[1]));
+		return table;
+	}
 	
 	protected IStrategoTerm call(IContext env, IStrategoString input,
 			ParseTable table, String startSymbol)
 			throws InterpreterException, IOException, SGLRException {
 		
 		SGLR parser = new SGLR(new Asfix2TreeBuilder(env.getFactory()), table);
-		
 		IStrategoTerm result = (IStrategoTerm) parser.parse(input.stringValue(), null, startSymbol);
 		
 		return result;

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java	Fri Oct 28 11:07:46 2011	(r23535)
@@ -0,0 +1,81 @@
+package org.spoofax.interpreter.library.jsglr;
+
+import static org.spoofax.interpreter.core.Tools.asJavaInt;
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.Asfix2TreeBuilder;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseTable;
+import org.spoofax.jsglr.client.SGLR;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.terms.ParseError;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.io.binary.TermReader;
+
+public class JSGLR_recover_parse_string extends JSGLR_parse_string_pt {
+	
+	private int cursorLocation;
+
+	protected JSGLR_recover_parse_string() {
+		super("JSGLR_recover_parse_string", 1, 5);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		if (Tools.isTermInt(tvars[4])) {
+			cursorLocation = Tools.asJavaInt(tvars[4]);
+		} else if (tvars[4].getSubtermCount() == 0 && tvars[4].getTermType() == IStrategoTerm.APPL && ((IStrategoAppl) tvars[2]).getConstructor().getName().equals("None")) {
+			cursorLocation = -1;
+		} else {
+			return false;
+		}
+		return super.call(env, svars, tvars);
+	}
+
+	@Override
+	protected ParseTable getParseTable(IContext env, IStrategoTerm[] tvars) {
+		String parseTableFile = asJavaString(tvars[1]);
+		final TermFactory factory = new TermFactory();
+		IStrategoTerm tableTerm;
+		try {
+			tableTerm = new TermReader(factory).parseFromFile(parseTableFile);
+			return new ParseTable(tableTerm, factory);
+		} catch (ParseError e) {
+			IOAgent io = SSLLibrary.instance(env).getIOAgent();
+			io.printError("JSGLR_recover_parse_string: could not parse " + parseTableFile + " - " + e.getMessage());
+			e.printStackTrace();
+		} catch (IOException e) {
+			IOAgent io = SSLLibrary.instance(env).getIOAgent();
+			io.printError("JSGLR_recover_parse_string: could not open " + parseTableFile + " - " + e.getMessage());
+			e.printStackTrace();
+		} catch (InvalidParseTableException e) {
+			IOAgent io = SSLLibrary.instance(env).getIOAgent();
+			io.printError("JSGLR_recover_parse_string: " + parseTableFile + " - " + e.getMessage());
+			e.printStackTrace();
+		}
+		return null;
+	}
+
+	@Override
+	protected IStrategoTerm call(IContext env, IStrategoString input,
+			ParseTable table, String startSymbol)
+			throws InterpreterException, IOException, SGLRException {
+		
+		SGLR parser = new SGLR(new Asfix2TreeBuilder(env.getFactory()), table);
+		parser.setUseStructureRecovery(true);
+		IStrategoTerm result = (IStrategoTerm) parser.parse(input.stringValue(), null, startSymbol, true, cursorLocation);
+		return result;
+	}
+}

From m.dejonge at tudelft.nl  Fri Oct 28 13:10:01 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 28 Oct 2011 11:10:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23536 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr
Message-ID: <20111028111001.87F917F800F@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Oct 28 11:10:01 2011
New Revision: 23536
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23536&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java	Fri Oct 28 11:07:46 2011	(r23535)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java	Fri Oct 28 11:10:01 2011	(r23536)
@@ -1,6 +1,5 @@
 package org.spoofax.interpreter.library.jsglr;
 
-import static org.spoofax.interpreter.core.Tools.asJavaInt;
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 
 import java.io.IOException;

From M.A.Akhter at student.tudelft.nl  Fri Oct 28 14:10:06 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 28 Oct 2011 12:10:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23537 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang spxlang/index spxlang/index/data
Message-ID: <20111028121006.13DB12B8002@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 28 12:10:04 2011
New Revision: 23537
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23537&sc=1

Log:
- incremental compilation 
- error marking

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_equal_resource_uri.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -46,6 +46,7 @@
 		add(new SPX_index_get_package_declarations_of(spxIndex));
 		add(new SPX_index_get_imports(spxIndex));
 		add(new SPX_index_get_related_files_of_packages(spxIndex));
+		add(new SPX_index_equal_resource_uri(spxIndex));
 		
 		// Primitives related to symbol-table - i.e. symbol definition and resolving
 		add(new SPX_symtab_new_scope(spxIndex));

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_equal_resource_uri.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_equal_resource_uri.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -0,0 +1,43 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
+import org.spoofax.interpreter.library.language.spxlang.index.Utils;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class SPX_index_equal_resource_uri extends SpxAbstractPrimitive {
+
+	private static String NAME = "SPX_index_equal_resource_uri";
+	private static int RESOURCE_URIS_INDEX = 1;
+	private final static int NO_ARGS = 2;
+	
+	public SPX_index_equal_resource_uri(SpxSemanticIndex index) {
+		super(index, NAME, 0, NO_ARGS);
+	}
+	
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateTupleTermAt(RESOURCE_URIS_INDEX);
+	}
+
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoTuple resTuple = (IStrategoTuple)tvars[RESOURCE_URIS_INDEX];
+		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
+		
+		String resUri1 = Tools.asJavaString(Tools.stringAt(resTuple, 0)).trim();
+		String resUri2 = Tools.asJavaString(Tools.stringAt(resTuple, 1)).trim();
+		
+		String absPath1 =  Utils.getAbsolutePathString(resUri1, agent);
+		String absPath2 =  Utils.getAbsolutePathString(resUri2, agent);
+		
+		return absPath1.equalsIgnoreCase(absPath2);
+	}
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_module_declarations_of.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -29,10 +29,11 @@
     
     @Override
 	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
-		return super.validateArguments(env, svars, tvars);
+		return super.validateArguments(env, svars, tvars)
+					.validateTupleTermAt(RES_INDEX);
 					
 	}
-
+    
     /* Retrieve Spoofaxlang ModuleDeclarations enclosed 
      * in the following a Package or a Compilation Unit specified in 
      * {@code tvars}.  

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -5,20 +5,19 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Set;
+
+import jdbm.PrimaryHashMap;
+import jdbm.PrimaryStoreMap;
+import jdbm.RecordListener;
 
 import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxCompilationUnitInfo;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import jdbm.PrimaryHashMap;
-import jdbm.PrimaryStoreMap;
-import jdbm.RecordListener;
-import jdbm.SecondaryHashMap;
-import jdbm.SecondaryKeyExtractor;
 
 public class SpxCompilationUnitTable {
 	
+	private final String SRC  = this.getClass().getSimpleName();
 	private final PrimaryHashMap<String , SpxCompilationUnitInfo> _infoMap;
 	private final PrimaryStoreMap<Long,String> _spxUnitStoreMap;
 	
@@ -27,8 +26,6 @@
      */
     protected List<RecordListener<String,SpxCompilationUnitInfo>> recordListeners = new ArrayList<RecordListener<String,SpxCompilationUnitInfo>>();
     
-    private final String SRC  = this.getClass().getSimpleName();
-    
 	/**
 	 * Creates a new instance of SymbolTable or loads existing SymbolTable with name specified  
 	 * in the following tableName argument.
@@ -45,25 +42,6 @@
 	}
 	
 	/**
-	 * Adds {@link ICompilationUnitRecordListener} in recordlistener collection 
-	 * @param rl
-	 */
-	public void addRecordListener( final ICompilationUnitRecordListener rl)
-	{
-		this.addRecordListener(rl.getCompilationUnitRecordListener());
-	}
-	
-	/**
-	 * Removes {@link ICompilationUnitRecordListener} in recordlistener collection
-	 * 
-	 * @param rl
-	 */
-	public void removeRecordListener( final ICompilationUnitRecordListener rl)
-	{
-		this.removeRecordListener(rl.getCompilationUnitRecordListener());
-	}
-	
-	/**
 	 * Defines a new symbol table entry. If the entry is already present in the symboltable, 
 	 * it updates the existing entry by invoking {@link #update(URI, IStrategoTerm)}. 
 	 * @param facade TODO
@@ -82,11 +60,13 @@
 			this.add(facade, absPath, compilationUnitRTree);  
 	}
 	
+	
 	/**
-	 * Adds the new CompilationUnit.
+	 * Adds the new SPX CompilationUnit in the symbol-table 
 	 * 
-	 * @param absPath
-	 * @param compilationUnitAST
+	 * @param facade current instance of {@link SpxSemanticIndexFacade} 
+	 * @param absPath {@link URI} representing absolute path  
+	 * @param compilationUnitAST  {@link IStrategoTerm} representation AST
 	 * @throws IOException 
 	 */
 	private void add(SpxSemanticIndexFacade facade , URI absPath , IStrategoTerm compilationUnitAST) throws IOException {
@@ -126,7 +106,9 @@
 		
 		SpxCompilationUnitInfo oldValue = _infoMap.get(Utils.uriToAbsPathString(absPath));
 		SpxCompilationUnitInfo newValue = SpxCompilationUnitInfo.newInstance(oldValue);
-		newValue.IncrementVersionNo();
+		newValue.incrVersion();
+		
+		_infoMap.put(newValue.getAbsPathString(), newValue);
 		
 		String serializedTerm = Utils.serializeToString(facade.getTermAttachmentSerializer(), compilationUnitAterm);
 		
@@ -151,12 +133,23 @@
 		remove(key);
 	}
 	
+	/**
+	 * Verify whether the {@code uri} exists in the symbol-table
+	 * 
+	 * @param uri {@link String} representation of absolute path   
+	 */
 	public void verifyUriExists(String uri)	{
 		if(!_infoMap.containsKey(uri)){
-			throw new IllegalArgumentException(" Unknown CompilationUnit Uri: "+ uri);
+			throw new IllegalArgumentException("Unknown CompilationUnit Uri: "+ uri);
 		}	
 	}
 	
+	/**
+	 * Removes CompilationUnit indexed in {@code absPathString} absolute path 
+	 * 
+	 * @param absPathString Absolute Path to the CompilationUnit to be removed
+	 * @throws IOException
+	 */
 	void remove(String absPathString) throws IOException{
 		SpxCompilationUnitInfo removedValue = _infoMap.remove(absPathString);
 		
@@ -173,15 +166,14 @@
 	
 	/**
 	 * Returns SPXCompilationUnit mapped by the specified absPath argument.
-	 * @param f TODO
-	 * @param absPath
 	 * 
-	 * @return
+	 * @param f {@link SpxSemanticIndexFacade}
+	 * @param absPath {@link URI}
+	 * 
+	 * @return SpxCompilationUnit indexed in the {@code absPath} 
 	 */
 	public IStrategoTerm get(SpxSemanticIndexFacade f, URI absPath){
-		String key = Utils.uriToAbsPathString(absPath);
-		
-		SpxCompilationUnitInfo retUnitData= _infoMap.get(key);
+		SpxCompilationUnitInfo retUnitData= getInfo(f, absPath);
 		
 		String serializedString = _spxUnitStoreMap.get(retUnitData.getRecId());
 		IStrategoTerm deserializedTerm = Utils.deserializeToTerm(f.getTermFactory(), f.getTermAttachmentSerializer(), serializedString);
@@ -189,6 +181,18 @@
 		return deserializedTerm ;
 	}
 	
+	
+	public SpxCompilationUnitInfo getInfo(SpxSemanticIndexFacade f, URI absPath){
+		String key = Utils.uriToAbsPathString(absPath);
+		
+		return  _infoMap.get(key);
+		
+	}
+	/**
+	 * Removes all the CompilationUnit from the symbol-table  
+	 *  
+	 * @throws IOException 
+	 */
 	public void clear() throws IOException{
 		Iterator<String> keyIter = _infoMap.keySet().iterator();
 		if (keyIter != null) {
@@ -198,8 +202,9 @@
 	}
 	
 	/**
-	 * Adds a {@code listener} in the collection of record listener 
-	 * @param listener
+	 * Adds a {@code listener} in the collection of record listener
+	 *  
+	 * @param listener listener to add 
 	 */
 	private void addRecordListener(final RecordListener<String, SpxCompilationUnitInfo> listener) {
 		recordListeners.add((RecordListener<String, SpxCompilationUnitInfo>) listener);
@@ -207,9 +212,29 @@
 	
 	/**
 	 * Removes {@code listener} from the collection of record listeners
-	 * @param listener
+	 * 
+	 * @param listener listener to remove 
 	 */
 	private void removeRecordListener(RecordListener<String, SpxCompilationUnitInfo> listener) {	
 		recordListeners.remove(listener);
 	}
+
+	/**
+	 * Adds {@link ICompilationUnitRecordListener} in recordlistener collection 
+	 * @param rl
+	 */
+	public void addRecordListener( final ICompilationUnitRecordListener rl)
+	{
+		this.addRecordListener(rl.getCompilationUnitRecordListener());
+	}
+	
+	/**
+	 * Removes {@link ICompilationUnitRecordListener} in recordlistener collection
+	 * 
+	 * @param rl
+	 */
+	public void removeRecordListener( final ICompilationUnitRecordListener rl)
+	{
+		this.removeRecordListener(rl.getCompilationUnitRecordListener());
+	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -168,16 +168,16 @@
 		}.executeWith(projectPath, namespaceID);
 	}
 	
-	public IStrategoTerm getModuleDeclarations(IStrategoString projectPath, IStrategoTerm retTerm) throws Exception {
+	public IStrategoTerm getModuleDeclarations(IStrategoString projectPath, IStrategoTerm searchQuery) throws Exception {
 		return new SpxResolver() {
 			@Override
 			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm res)
 					throws Exception {	
 					
 					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
-					return idxFacade.getModuleDeclarationsOf(res);
+					return idxFacade.getModuleDeclarationsOf((IStrategoTuple)res);
 			}
-		}.executeWith(projectPath, retTerm);
+		}.executeWith(projectPath, searchQuery);
 	}
 
 	public IStrategoTerm insertNewScope(IStrategoString projectPath, IStrategoAppl namespaceAppl) throws Exception{

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -20,6 +20,7 @@
 import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDefinition;
 import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxCompilationUnitInfo;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableEntry;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
@@ -50,6 +51,7 @@
 	private final TermAttachmentSerializer _termAttachmentSerializer;
 	private final TermConverter _converter;
 
+	private long _initializedOn;
 	public TermAttachmentSerializer getTermAttachmentSerializer() {
 		return _termAttachmentSerializer;
 	}
@@ -77,10 +79,11 @@
 		initKnownConstructors();
 	}
 	
-	public void initializePersistenceManager() throws Exception {
+	public synchronized void initializePersistenceManager() throws Exception {
 		_persistenceManager = new SpxPersistenceManager(this);
 		_persistenceManager.initializeSymbolTables(this._projectPath, this);
 		_indexId = _persistenceManager.getIndexId();
+		_initializedOn  = System.currentTimeMillis();
 	}
 	
 	public String indexId() {return _indexId; }
@@ -131,6 +134,15 @@
 		
 		return retTerm;
 	}
+	
+	
+	public SpxCompilationUnitInfo getCompilationUnitInfo(String absUriPath){
+		URI resUri = Utils.getAbsolutePathUri(absUriPath ,_agent);
+		
+		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+		return table.getInfo(this, resUri);
+	}
+	
 
 	/**
 	 * Removes CompilationUnit located in {@code spxCompilationUnitPath} file path.  
@@ -215,7 +227,13 @@
 		analyzedAst = (IStrategoAppl)analyzedAst;
 		spxCompilationUnitPath = (IStrategoString) spxCompilationUnitPath;
 
-		ModuleDeclaration mDecl = new ModuleDeclaration(toAbsulatePath(spxCompilationUnitPath), moduleId, packageId);
+		SpxCompilationUnitInfo info =  getCompilationUnitInfo(toAbsulatePath(spxCompilationUnitPath));
+		
+		if(info ==null){ throw new IllegalStateException("Related compilation unit is no longer exists in symbols table ");}
+		
+		ModuleDeclaration mDecl = new ModuleDeclaration(info.getAbsPathString(), moduleId, packageId);
+		mDecl.setLastModifiedOn(info.getLastModifiedOn()) ;
+		
 		table.define(this , mDecl, ast, analyzedAst);// updating/adding module to index 
 		
 		//Defining ModuleNamespace for Symbol-Table
@@ -621,7 +639,6 @@
 		if(Utils.All == filepathString) {
 			decls = table.getPackageDeclarations();  //returning all the package declarations found in the current project
 		}else{
-
 			String absFilePath = toAbsulatePath(filePath);
 			table.verifyUriExists(absFilePath); // verifying file path exists 
 			decls = table.packageDeclarationsByUri(absFilePath);
@@ -676,11 +693,22 @@
 	 * @return {@link IStrategoTerm} 
 	 * @throws SpxSymbolTableException 
 	 */
-	public IStrategoTerm getModuleDeclarationsOf(IStrategoTerm res) throws SpxSymbolTableException {
+	public IStrategoTerm getModuleDeclarationsOf(IStrategoTuple searchQueryTuple) throws SpxSymbolTableException {
+		
+		IStrategoTerm res = searchQueryTuple.getSubterm(0);
+		IStrategoString queryType = (IStrategoString)searchQueryTuple.getSubterm(1);
+		
 		IStrategoTerm retValue ;
 		
 		if(Tools.isTermAppl(res))
-			retValue  = this.getModuleDeclarations((IStrategoAppl)res);
+		{	
+			if( Utils.DIRTY  == asJavaString(queryType)) {
+				retValue  = this.getDirtyModuleDeclarations((IStrategoAppl)res);
+			}else if (Utils.All == asJavaString(queryType)){
+				retValue  = this.getModuleDeclarations((IStrategoAppl)res);
+			}else
+				throw new IllegalArgumentException("Unknown queryType argument in getModuleDeclarationOf: " + queryType);
+		}	
 		else if(Tools.isTermString(res))
 			retValue = this.getModuleDeclarations((IStrategoString)res);
 		else
@@ -730,6 +758,27 @@
 		return result;
 	}	
 	
+	
+	public IStrategoList getDirtyModuleDeclarations(IStrategoAppl packageQName) throws SpxSymbolTableException {
+		logMessage("getDirtyModuleDeclarations| Arguments : " + packageQName);
+		List<ModuleDeclaration> dirtyModuleDeclarations  = new ArrayList<ModuleDeclaration>();
+		
+		IStrategoList packageID = PackageDeclaration.getPackageId(this, packageQName);
+		
+		Iterable<ModuleDeclaration> decls = getModuleDeclarations(packageID);
+		logMessage("getDirtyModuleDeclarations | Found following result from SymbolTable : " + decls);
+		
+		for(ModuleDeclaration decl : decls ){
+			if( decl.getLastModifiedOn() >= this._initializedOn){ 
+				dirtyModuleDeclarations.add(decl);
+			}
+		}
+		IStrategoList result =  Utils.toTerm(this, dirtyModuleDeclarations);
+		logMessage("getDirtyModuleDeclarations | Returning IStrategoList : " + result );
+		
+		return result;
+	}	
+	
 	public Iterable<ModuleDeclaration> getModuleDeclarations(IStrategoList pacakgeID) throws SpxSymbolTableException
 	{
 		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
@@ -767,14 +816,16 @@
 	 * @throws Exception  If package Id is valid but does not have any language descriptor registered
 	 */
 	public IStrategoTerm getLanguageDescriptor ( IStrategoAppl packageTypedQName) throws IllegalArgumentException, Exception{
-		IStrategoList  packageQName = PackageDeclaration.getPackageId(this, packageTypedQName);
-
+		IStrategoList  packageId = PackageDeclaration.getPackageId(this, packageTypedQName);
+		IStrategoList emptyList= getTermFactory().makeList() ;
+		
 		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
-		table.verifyPackageIDExists(packageQName) ;
+		table.verifyPackageIDExists(packageId) ;
 		
-		LanguageDescriptor desc = table.getLangaugeDescriptor(packageQName);
+		LanguageDescriptor desc = table.getLangaugeDescriptor(packageId);
 		if ( desc == null){	
-			throw new SpxSymbolTableException("Not Found LanguageDescriptor for " + packageQName.toString()); 
+			// creating a empty language descriptor 
+			desc = LanguageDescriptor.newInstance(getTermFactory(), packageId , emptyList,emptyList,emptyList,emptyList ); 
 		}
 		return desc.toTerm(this);
 	}
@@ -987,7 +1038,6 @@
 	}
 
 	//TODO : better handling of the known constructors
-	
 	public IStrategoConstructor getPackageDeclCon() { return getConstructor("PackageDecl",2);}
 	
 	public IStrategoConstructor getModuleDeclCon() { return getConstructor("ModuleDecl", 3); }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -48,8 +48,9 @@
 			}	
 		}
 		
-		if(fac != null)
+		if(fac != null){
 			_registry.put(fac.getProjectPath(), fac);
+		}	
 		return fac;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -20,8 +20,11 @@
 	public static final int NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER = 1;
 	
 	public static final String All = "*";
-	public static final String All_SYMBOLS = "\"*\"";
+	public static final String DIRTY = "-";
 	public static final String CURRENT = ".";
+	
+	public static final String All_SYMBOLS = "\"*\"";
+	
 	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
 	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
 	
@@ -50,6 +53,10 @@
 		return new File(uri).getAbsolutePath();
 	}
 	
+	public static String toAbsPathString(String path) {
+		return new File(path).getAbsolutePath();
+	}
+	
 	public static URI getAbsolutePathUri(String path, IOAgent agent){
 		File file = new File(path);
 		
@@ -59,10 +66,6 @@
 	public static String getAbsolutePathString(String path , IOAgent agent){
 		return uriToAbsPathString(getAbsolutePathUri(path , agent));
 	}
-
-	public static String toAbsPathString(String path) {
-		return new File(path).getAbsolutePath();
-	}
 	
 	static String now(String dateFormat) {
 	    Calendar cal = Calendar.getInstance();
@@ -118,4 +121,6 @@
 		
 		return deserializedAterm;
 	}
+	
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -17,7 +17,7 @@
 
 public class ModuleDeclaration extends IdentifiableConstruct implements INamespaceFactory  
 {
-	private static final long serialVersionUID = -6249406731326662111L;
+	private static final long serialVersionUID = 1989975037160433882L;
 
 	public static final int ModuleTypedQNameIndex = 0;
 	public static final int ModulePathIndex = 1;
@@ -28,16 +28,9 @@
 	public final String resourceAbsPath; 
 
 	public final IStrategoList enclosingPackageID;
+	private long  lastModifiedOn;
 	
 	
-	/* (non-Javadoc)
-	 * @see org.spoofax.interpreter.library.language.spxlang.IdentifiableConstruct#getFileLocation()
-	 */
-	@Override 
-	protected String getFileLocation() {
-		return resourceAbsPath;
-	}
-
 	public ModuleDeclaration(String resourceAbsPath, IStrategoList id , IStrategoList packageID) {
 		super(id);
 		
@@ -46,56 +39,15 @@
 	}
 
 	/* (non-Javadoc)
-	 * @see java.lang.Object#toString()
+	 * @see org.spoofax.interpreter.library.language.spxlang.IdentifiableConstruct#getFileLocation()
 	 */
-	@Override
-	public String toString() {
-		return "ModuleDeclaration [ id= " + id 
-				+ ", packageId ="+ enclosingPackageID 
-				+ ", resourceAbsPath= " + resourceAbsPath+ "]";
+	@Override 
+	protected String getFileLocation() {
+		return resourceAbsPath;
 	}
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = super.hashCode();
-		result = prime * result
-				+ ((resourceAbsPath == null) ? 0 : resourceAbsPath.hashCode());
-		
-		result = prime * result + ((enclosingPackageID == null) ? 0 : enclosingPackageID.hashCode());
-		
-		return result;
-	}
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (!super.equals(obj))
-			return false;
-		if (getClass() != obj.getClass())
-			return false;
-		ModuleDeclaration other = (ModuleDeclaration) obj;
-		if (resourceAbsPath == null) {
-			if (other.resourceAbsPath != null)
-				return false;
-		} else if (!resourceAbsPath.equals(other.resourceAbsPath))
-			return false;
-		
-		if (enclosingPackageID == null) {
-			if (other.enclosingPackageID!= null)
-				return false;
-		} else if (!enclosingPackageID.match(other.enclosingPackageID))
-			return false;
-		
-		return true;
-	}
+	
 	
 	public static IStrategoList getModuleId(SpxSemanticIndexFacade facade, IStrategoAppl moduleQName ){
 		IStrategoConstructor moduleCon  = facade.getModuleQNameCon();
@@ -156,5 +108,73 @@
 	{
 		return idxFacade.persistenceManager().spxSymbolTable().toNamespaceUri(id) ;
 	}
+
+	/**
+	 * @return the lastModifiedOn
+	 */
+	public long getLastModifiedOn() {
+		return lastModifiedOn;
+	}
+
+	/**
+	 * @param lastModifiedOn the lastModifiedOn to set
+	 */
+	public void setLastModifiedOn(long lastModifiedOn) {
+		this.lastModifiedOn = lastModifiedOn;
+	}
+	
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#toString()
+	 */
+	@Override
+	public String toString() {
+		return "ModuleDeclaration [ id= " + id 
+				+ ", packageId ="+ enclosingPackageID 
+				+ ", resourceAbsPath= " + resourceAbsPath+ "]"
+				+ "{ lastModifiedOn= " + lastModifiedOn+ "}";
+	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		ModuleDeclaration other = (ModuleDeclaration) obj;
+		if (resourceAbsPath == null) {
+			if (other.resourceAbsPath != null)
+				return false;
+		} else if (!resourceAbsPath.equals(other.resourceAbsPath))
+			return false;
+		
+		if (enclosingPackageID == null) {
+			if (other.enclosingPackageID!= null)
+				return false;
+		} else if (!enclosingPackageID.match(other.enclosingPackageID))
+			return false;
+		
+		return true;
+	}
+	
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime * result
+				+ ((resourceAbsPath == null) ? 0 : resourceAbsPath.hashCode());
+		
+		result = prime * result + ((enclosingPackageID == null) ? 0 : enclosingPackageID.hashCode());
+		
+		return result;
+	}
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -1,13 +1,11 @@
 package org.spoofax.interpreter.library.language.spxlang.index.data;
 
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.interpreter.terms.TermConverter;
 
 /**
  * Represents ModuleDefinition 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java	Fri Oct 28 11:10:01 2011	(r23536)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxCompilationUnitInfo.java	Fri Oct 28 12:10:04 2011	(r23537)
@@ -3,6 +3,7 @@
 import java.io.File;
 import java.io.Serializable;
 import java.net.URI;
+import java.security.acl.LastOwnerException;
 
 /**
  * Contains information regarding Spoofaxlang CompilationUnit. 
@@ -12,11 +13,12 @@
  */
 public class SpxCompilationUnitInfo implements Serializable
 {
-	private static final long serialVersionUID = 4874917828420267542L;
+	private static final long serialVersionUID = 4366484691839493105L;
 
 	private final long _recId;
 	private int _version;
 	private final URI _absPath;
+	private long _lastModifiedOn ;
 	
 	public SpxCompilationUnitInfo(URI absPath,long recourceId){
 		this (0 , absPath , recourceId);
@@ -26,6 +28,7 @@
 		_recId = recourceId;
 		_version = versionNo;
 		_absPath = absPath;
+		_lastModifiedOn = System.currentTimeMillis();
 	}
 
 	public  long getRecId() {
@@ -36,6 +39,7 @@
 		return _version;
 	}
 	
+	public long getLastModifiedOn(){return _lastModifiedOn;}
 	URI getAbsPath() {
 		return _absPath;
 	}
@@ -48,12 +52,14 @@
 	/**
 	 * Increment version no
 	 */
-	public void IncrementVersionNo() { _version = _version + 1; }
-
+	public synchronized void incrVersion() {
+		_lastModifiedOn = System.currentTimeMillis();
+		_version = _version + 1;  
+	}
 	
 	public String toString() {
 		return "SpxComplicationUnitResourceInfo [ResourceId=" + _recId
-				+ ", VersionNo=" + _version + ", AbsPath=" + _absPath + "]";
+				+ ", VersionNo=" + _version + ", AbsPath=" + _absPath + ", LastModifiedOn=" + this.getLastModifiedOn()+ "]";
 	}
 
 	@Override

From m.dejonge at tudelft.nl  Fri Oct 28 16:01:01 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 28 Oct 2011 14:01:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23538 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr
Message-ID: <20111028140101.825B57F8017@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Oct 28 14:01:00 2011
New Revision: 23538
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23538&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java	Fri Oct 28 12:10:04 2011	(r23537)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java	Fri Oct 28 14:01:00 2011	(r23538)
@@ -13,16 +13,16 @@
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.jsglr.client.Asfix2TreeBuilder;
+import org.spoofax.jsglr.client.FilterException;
 import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.spoofax.jsglr.client.ParseTable;
 import org.spoofax.jsglr.client.SGLR;
+import org.spoofax.jsglr.client.imploder.TermTreeFactory;
+import org.spoofax.jsglr.client.imploder.TreeBuilder;
 import org.spoofax.jsglr.shared.SGLRException;
-import org.spoofax.terms.ParseError;
 import org.spoofax.terms.TermFactory;
-import org.spoofax.terms.io.binary.TermReader;
 
-public class JSGLR_recover_parse_string extends JSGLR_parse_string_pt {
+public class JSGLR_recover_parse_string extends JSGLRPrimitive {
 	
 	private int cursorLocation;
 
@@ -30,6 +30,9 @@
 		super("JSGLR_recover_parse_string", 1, 5);
 	}
 
+	/**
+	 * tvars: 0 => input string, 1 => parse table term, 2 => startsymbol, 3 => path
+	 */
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 			throws InterpreterException {
@@ -40,39 +43,69 @@
 		} else {
 			return false;
 		}
-		return super.call(env, svars, tvars);
+		if (!Tools.isTermString(tvars[0]))
+			return false;
+		if (!isParseTableTerm(tvars[1]))
+			return false;
+		if(!Tools.isTermString(tvars[3]))
+			return false;
+
+		String startSymbol;
+		if (Tools.isTermString(tvars[2])) {
+			startSymbol = Tools.asJavaString(tvars[2]);
+		} else if (tvars[2].getSubtermCount() == 0 && tvars[2].getTermType() == IStrategoTerm.APPL && ((IStrategoAppl) tvars[2]).getConstructor().getName().equals("None")) {
+			startSymbol = null;
+		} else {
+			return false;
+		}
+
+		String lastPath = asJavaString(tvars[3]);
+		
+		ParseTable table = getParseTable(env, tvars);
+		if (table == null)
+			return false;
+		try {
+			IStrategoTerm result = call(env, (IStrategoString) tvars[0], table, startSymbol);
+			env.setCurrent(result);
+			return result != null;
+		} catch (IOException e) {
+			IOAgent io = SSLLibrary.instance(env).getIOAgent();
+			io.printError("JSGLR_recover_parse_string: could not parse " + lastPath + " - " + e.getMessage());
+			return false;
+		} catch (SGLRException e) {
+			IStrategoTerm errorTerm = e.toTerm(lastPath);
+			if (e instanceof FilterException) {
+				// HACK: print stack trace for this internal error
+				e.printStackTrace();
+			}
+			env.setCurrent(errorTerm);
+			
+			// FIXME: Stratego doesn't seem to print the erroneous line in Java
+			return svars[0].evaluate(env);
+		}
+	}
+
+	private boolean isParseTableTerm(IStrategoTerm pt) {
+		return pt.getTermType() == IStrategoTerm.APPL && ((IStrategoAppl) pt).getConstructor().getName().equals("parse-table");
 	}
 
-	@Override
 	protected ParseTable getParseTable(IContext env, IStrategoTerm[] tvars) {
-		String parseTableFile = asJavaString(tvars[1]);
 		final TermFactory factory = new TermFactory();
-		IStrategoTerm tableTerm;
+		IStrategoTerm tableTerm = tvars[1];		
 		try {
-			tableTerm = new TermReader(factory).parseFromFile(parseTableFile);
 			return new ParseTable(tableTerm, factory);
-		} catch (ParseError e) {
-			IOAgent io = SSLLibrary.instance(env).getIOAgent();
-			io.printError("JSGLR_recover_parse_string: could not parse " + parseTableFile + " - " + e.getMessage());
-			e.printStackTrace();
-		} catch (IOException e) {
-			IOAgent io = SSLLibrary.instance(env).getIOAgent();
-			io.printError("JSGLR_recover_parse_string: could not open " + parseTableFile + " - " + e.getMessage());
-			e.printStackTrace();
 		} catch (InvalidParseTableException e) {
-			IOAgent io = SSLLibrary.instance(env).getIOAgent();
-			io.printError("JSGLR_recover_parse_string: " + parseTableFile + " - " + e.getMessage());
+			// TODO Auto-generated catch block
 			e.printStackTrace();
-		}
-		return null;
+			return null;
+		} 
+		 
 	}
 
-	@Override
 	protected IStrategoTerm call(IContext env, IStrategoString input,
 			ParseTable table, String startSymbol)
 			throws InterpreterException, IOException, SGLRException {
-		
-		SGLR parser = new SGLR(new Asfix2TreeBuilder(env.getFactory()), table);
+		SGLR parser = new SGLR(new TreeBuilder(new TermTreeFactory(env.getFactory())), table);
 		parser.setUseStructureRecovery(true);
 		IStrategoTerm result = (IStrategoTerm) parser.parse(input.stringValue(), null, startSymbol, true, cursorLocation);
 		return result;

From M.A.Akhter at student.tudelft.nl  Sat Oct 29 00:10:29 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 28 Oct 2011 22:10:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23539 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data
Message-ID: <20111028221029.9DCD47F805C@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Oct 28 22:10:29 2011
New Revision: 23539
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23539&sc=1

Log:
fixed cyclic imports

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Fri Oct 28 14:01:00 2011	(r23538)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Fri Oct 28 22:10:29 2011	(r23539)
@@ -62,7 +62,7 @@
 		if( packageRef.getConstructor() ==  idxFacade.getPackageQNameCon()){
 			IStrategoList id = PackageDeclaration.getPackageId(idxFacade, packageRef);
 			PackageDeclaration decl = idxFacade.lookupPackageDecl(id);
-			if(decl != null ){	
+			if((decl != null) && (!SpxSymbol.verifyEquals(this.id, id))){	
 				this.importReferences.add(id);
 				decl.addImportedTo(this.getId());
 				idxFacade.persistenceManager().spxPackageTable().definePackageDeclaration(decl);
@@ -92,10 +92,11 @@
 		allImportRefs.addAll(this.importReferences);
 		allImportRefs.addAll(this.legacyImportReferences);
 		
+		
 		IStrategoList result = termFactory.makeList();
-		for (IStrategoTerm t: allImportRefs)
+		for (IStrategoTerm t: allImportRefs){
 			result = idxFacade.getTermFactory().makeListCons(tranformToSpxImport(idxFacade,t), result);
-	
+		}	
 		return termConverter.convert(result);
 	}
 	

From m.dejonge at tudelft.nl  Sun Oct 30 17:03:48 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sun, 30 Oct 2011 16:03:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23540 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20111030160348.F0F80CC0E5@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Sun Oct 30 16:03:47 2011
New Revision: 23540
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23540&sc=1

Log:
Primitive for TermPaths

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TermPathPrimitive.java   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Fri Oct 28 22:10:29 2011	(r23539)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Sun Oct 30 16:03:47 2011	(r23540)
@@ -12,6 +12,7 @@
 	public IMPLibrary() {
 		add(new NameDialogPrimitive());
 		add(new SubtermPrimitive());
+		add(new TermPathPrimitive());
 		add(new ProjectPathPrimitive());
 		add(new PluginPathPrimitive());
 		add(new RefreshResourcePrimitive());

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TermPathPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TermPathPrimitive.java	Sun Oct 30 16:03:47 2011	(r23540)
@@ -0,0 +1,27 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Maartje de Jonge
+ */
+public class TermPathPrimitive extends AbstractPrimitive {
+
+	public TermPathPrimitive() {
+		super("SSL_EXT_term_path", 0, 1);
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		
+		if (tvars.length != 1) return false;
+		env.setCurrent(StrategoTermPath.createPath(tvars[0]));		
+		return true;
+	}
+
+}

From M.A.Akhter at student.tudelft.nl  Sun Oct 30 22:04:17 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 30 Oct 2011 21:04:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23541 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index
Message-ID: <20111030210417.5C0847F8020@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Oct 30 21:04:15 2011
New Revision: 23541
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23541&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Sun Oct 30 16:03:47 2011	(r23540)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Sun Oct 30 21:04:15 2011	(r23541)
@@ -261,8 +261,11 @@
 		return _packageLookupTable.get(id);
 	}
 
-	public Iterable<PackageDeclaration> getPackageDeclarations() {
-		return _packageLookupTable.values();
+	public Set<PackageDeclaration> getPackageDeclarations() {
+		Set<PackageDeclaration> declsToReturn = new HashSet<PackageDeclaration>();
+		
+		declsToReturn.addAll(_packageLookupTable.values());
+		return declsToReturn;
 	}
 
 	/**
@@ -302,7 +305,7 @@
 	 * @param absUri
 	 * @return {@link Iterable}
 	 */
-	public Iterable<PackageDeclaration> packageDeclarationsByUri(String absUri) {
+	public Set<PackageDeclaration> packageDeclarationsByUri(String absUri) {
 		Set<PackageDeclaration> ret = new HashSet<PackageDeclaration>();
 		Iterable<IStrategoList> retList = _uriMap.get(absUri);
 		if (retList != null) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sun Oct 30 16:03:47 2011	(r23540)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sun Oct 30 21:04:15 2011	(r23541)
@@ -631,11 +631,11 @@
 
 	public IStrategoList getPackageDeclarations(IStrategoString filePath) {
 		logMessage("getPackageDeclarationsByUri | Arguments : " + filePath);
-
+		
 		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
 		String filepathString = asJavaString(filePath);
 		
-		Iterable<PackageDeclaration> decls; 
+		Set<PackageDeclaration> decls; 
 		if(Utils.All == filepathString) {
 			decls = table.getPackageDeclarations();  //returning all the package declarations found in the current project
 		}else{

