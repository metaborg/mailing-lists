From L.C.L.Kats at tudelft.nl  Tue Dec  1 09:52:48 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 01 Dec 2009 08:52:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20328 - LennartKats -
	spoofax-imp/tags
Message-ID: <200912010852.nB18qmAr021713@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-01 08:52:48 +0000 (Tue, 01 Dec 2009)
New Revision: 20328

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20328&view=rev

Added:
   spoofax-imp/tags/spoofax-imp-0.1.2.2-using-imp-0.1.88/

Log:
Tagged version 0.1.2.2 based on IMP 0.1.88 and Eclipse 3.4.

Changes:



From L.C.L.Kats at tudelft.nl  Tue Dec  1 11:12:07 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 01 Dec 2009 10:12:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20329 - LennartKats -
	in spoofax-imp/trunk: . org.eclipse.imp
	org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm
	org.strategoxt.imp.editors.editorservice/editor/java/org/strategoxt/imp/editors/editorservice
	org.strategoxt.imp.editors.sdf
	org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf
	org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego
	org.strategoxt.imp.feature
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.updatesite
Message-ID: <200912011012.nB1AC7K7023518@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-01 10:12:06 +0000 (Tue, 01 Dec 2009)
New Revision: 20329

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20329&view=rev

Added:
   spoofax-imp/trunk/org.eclipse.imp/
   spoofax-imp/trunk/org.eclipse.imp/README
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/features/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/java/org/strategoxt/imp/editors/editorservice/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-activator.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRLexer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/StandAloneSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyTextAttribute.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Updated to IMP 0.1.101, which supports Eclipse 3.5 (SPI-10).

Changes (first 1000 lines of the diffs):


Property changes on: spoofax-imp/trunk/org.eclipse.imp
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: spoofax-imp/trunk/org.eclipse.imp/README
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/README	                        (rev 0)
+++ spoofax-imp/trunk/org.eclipse.imp/README	2009-12-01 10:12:06 UTC (rev 20329)
@@ -0,0 +1,7 @@
+This directory contains source patches for the following IMP revision:
+
+  http://dev.eclipse.org/svnroot/technology/org.eclipse.imp at r20408
+
+Note that building IMP from source code is not required for building Spoofax/IMP;
+instead, the latest Spoofax/IMP binary plugin can be installed and used as a
+baseline for rebuilding the remainder of the components.

Added: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	                        (rev 0)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2009-12-01 10:12:06 UTC (rev 20329)
@@ -0,0 +1,143 @@
+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/language/LanguageRegistry.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/language/LanguageRegistry.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/language/LanguageRegistry.java	(working copy)
+@@ -21,6 +21,8 @@
+ import java.util.List;
+ import java.util.Map;
+ 
++import org.eclipse.core.resources.IFile;
++import org.eclipse.core.resources.ResourcesPlugin;
+ import org.eclipse.core.runtime.IConfigurationElement;
+ import org.eclipse.core.runtime.IExtensionPoint;
+ import org.eclipse.core.runtime.IPath;
+@@ -134,7 +136,7 @@
+ 	public static Language findLanguage(IEditorInput editorInput, IDocumentProvider docProvider) {
+ 		if (!sIsFullyInitialized)
+ 			initializeRegistryAsNeeded();
+-		IPath path= EditorInputUtils.getPath(editorInput);
++		IPath path= EditorInputUtils.getFile(editorInput).getLocation(); // LK
+ 
+ 		return findLanguage(path, docProvider.getDocument(editorInput));
+ 	}
+@@ -164,7 +166,9 @@
+ 		            LanguageValidator validator = lang.getValidator();
+ 
+ 		            if (validator != null && docContents != null) {
+-		                if (validator.validate(docContents)) {
++		            	// LK: needed for MetaFileLanguageValidator
++		            	IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(path);
++		            	if (validator.validate(file) ||validator.validate(docContents)) {
+ 		                    return lang;
+ 		                }
+ 		            } else {
+@@ -383,7 +387,9 @@
+         for (String ext : extensions) {
+ 	        IFileEditorMapping mapping= findMappingFor(ext, mappings);
+ 
+-	        if (mapping == null || mapping.getDefaultEditor().getId().equals(sUniversalEditor.getId())) {
++	        if (mapping == null
++	        		|| (!(mapping instanceof IMPFileEditorMapping) // LK: mapping may already be a IMPFileEditorMapping 
++	        		     && mapping.getDefaultEditor().getId().equals(sUniversalEditor.getId()))) {
+ 	            // Replace the file editor mapping even if it already pointed to the universal editor,
+ 	            // since the persisted association turns into a FileEditorMapping when re-read, thus
+ 	            // losing the icon (which FileEditorMapping gets from the IEditorDescriptor).
+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ParserScheduler.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ParserScheduler.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ParserScheduler.java	(working copy)
+@@ -29,6 +29,7 @@
+ import org.eclipse.jface.text.IDocument;
+ import org.eclipse.ui.IEditorInput;
+ import org.eclipse.ui.IEditorPart;
++import org.eclipse.ui.texteditor.AbstractTextEditor;
+ import org.eclipse.ui.texteditor.IDocumentProvider;
+ 
+ /**
+@@ -64,7 +65,7 @@
+     }
+ 
+     public IStatus run(IProgressMonitor monitor) {
+-        if (fParseController == null || fDocumentProvider == null) {
++        if (fParseController == null || ((AbstractTextEditor) fEditorPart).getDocumentProvider() == null) { // LK: test if document provider is null to find out if editor was closed
+             /* Editor was closed, or no parse controller */
+             return Status.OK_STATUS;
+         }
+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/internal/PresentationController.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/internal/PresentationController.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/editor/internal/PresentationController.java	(working copy)
+@@ -109,6 +109,9 @@
+         IRegion bigRegion= fColorer.calculateDamageExtent(region, fParseCtlr);
+ 
+         if (bigRegion != null) {
++        	// LK: (no changes, just a comment)
++        	// No synchronized statement here avoids a deadlock in the colorer implementation,
++        	// which might need main thread access to create new SWT Color Objects 
+             fWorkItems.push(bigRegion);
+         }
+     }
+@@ -157,7 +160,7 @@
+             int offset= locator.getStartOffset(token);
+             int end= locator.getEndOffset(token);
+ 
+-            if (offset <= prevEnd && end >= prevOffset) {
++            if (offset <= prevEnd /*&& end >= prevOffset*/) { // LK: Avoid illegal styleRange
+                 continue;
+             }
+             changeTokenPresentation(parseController, presentation, token, locator);
+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/UniversalEditor.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/UniversalEditor.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/editor/UniversalEditor.java	(working copy)
+@@ -42,6 +42,7 @@
+ import org.eclipse.imp.editor.internal.AnnotationCreator;
+ import org.eclipse.imp.editor.internal.EditorErrorTickUpdater;
+ import org.eclipse.imp.editor.internal.FoldingController;
++import org.eclipse.imp.editor.internal.PresentationController;
+ import org.eclipse.imp.editor.internal.ProblemMarkerManager;
+ import org.eclipse.imp.editor.internal.ToggleBreakpointsAdapter;
+ import org.eclipse.imp.help.IMPHelp;
+@@ -257,6 +258,16 @@
+         setInsertMode(SMART_INSERT);
+         fProblemMarkerManager= new ProblemMarkerManager();
+     }
++    
++    public ServiceControllerManager getServiceControllerManager() { // LK
++        return fServiceControllerManager;
++    }
++    
++    public void updateColoring(Region region) { // LK
++        PresentationController presentation = fServiceControllerManager.getPresentationController();
++		presentation.damage(region);
++        presentation.update(fLanguageServiceManager.getParseController(), new NullProgressMonitor());
++    }
+ 
+     public Object getAdapter(Class required) {
+         if (IContentOutlinePage.class.equals(required)) {
+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/preferences/PreferenceCache.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/preferences/PreferenceCache.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/preferences/PreferenceCache.java	(working copy)
+@@ -17,7 +17,7 @@
+ public class PreferenceCache {
+     public static boolean emitMessages= false;
+ 
+-    public static int tabWidth= 8;
++    public static int tabWidth= 4; // LK: sane default tab width
+ 
+     public static Font sourceFont;
+ 
+Index: org.eclipse.imp.runtime/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.runtime/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.runtime/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-ManifestVersion: 2
+ Bundle-Name: IMP Runtime (Incubation)
+ Bundle-SymbolicName: org.eclipse.imp.runtime; singleton:=true
+-Bundle-Version: 0.1.101
++Bundle-Version: 0.1.101.qualifier
+ Bundle-Activator: org.eclipse.imp.runtime.RuntimePlugin
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/Activator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/Activator.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/Activator.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -1,6 +1,5 @@
 package org.strategoxt.imp.editors.aterm;
 
-import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.imp.preferences.PreferencesService;
 import org.eclipse.imp.runtime.PluginBase;
 import org.osgi.framework.BundleContext;
@@ -36,15 +35,10 @@
     return kPluginID;
   }
 
-  protected static PreferencesService preferencesService = null;
-
-  public static PreferencesService getPreferencesService()
+  @Override public String getLanguageID()
   { 
-    if(preferencesService == null)
-    { 
-      preferencesService = new PreferencesService(ResourcesPlugin.getWorkspace().getRoot().getProject());
-      preferencesService.setLanguageName(kLanguageName);
-    }
-    return preferencesService;
+    return kLanguageName;
   }
+
+  protected static PreferencesService preferencesService = null;
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/java/org/strategoxt/imp/editors/editorservice/Activator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/java/org/strategoxt/imp/editors/editorservice/Activator.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/java/org/strategoxt/imp/editors/editorservice/Activator.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -1,6 +1,5 @@
 package org.strategoxt.imp.editors.editorservice;
 
-import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.imp.preferences.PreferencesService;
 import org.eclipse.imp.runtime.PluginBase;
 import org.osgi.framework.BundleContext;
@@ -36,15 +35,10 @@
     return kPluginID;
   }
 
-  protected static PreferencesService preferencesService = null;
-
-  public static PreferencesService getPreferencesService()
+  @Override public String getLanguageID()
   { 
-    if(preferencesService == null)
-    { 
-      preferencesService = new PreferencesService(ResourcesPlugin.getWorkspace().getRoot().getProject());
-      preferencesService.setLanguageName(kLanguageName);
-    }
-    return preferencesService;
+    return kLanguageName;
   }
+
+  protected static PreferencesService preferencesService = null;
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-12-01 10:12:06 UTC (rev 20329)
@@ -6,8 +6,6 @@
         <property name="sdfmodule" value="SDF"/>
         <property name="esvmodule" value="SDF"/>
         <property name="strmodule" value="sdf"/>
-        
-        <!-- Standard build file without ppgen dependency follows -->
     
         <!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -118,8 +116,8 @@
         <target name="utils-files">
             <mkdir dir="utils"/>
             <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils"/>
-            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar"         todir="utils"/>
-            <copy file="${eclipse.spoofaximp.strategojar}"              todir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils"/>
         </target>
     
         <target name="pack-sdf" unless="externaldef">
@@ -225,7 +223,7 @@
         </target>
     
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree" depends="rtg2sig">
+        <target name="stratego.ctree" depends="rtg2sig,ppgen">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -243,7 +241,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig">
+        <target name="stratego.jar" depends="rtg2sig,ppgen">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -290,7 +288,7 @@
         </target>
         
         <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
             <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
@@ -309,4 +307,4 @@
             <delete dir="${build}"/>
             <delete file="${src-gen}/trans/Main.java"/>
         </target>
-    </project>
+    </project>
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/Activator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/Activator.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/Activator.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -1,6 +1,5 @@
 package org.strategoxt.imp.editors.sdf;
 
-import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.imp.preferences.PreferencesService;
 import org.eclipse.imp.runtime.PluginBase;
 import org.osgi.framework.BundleContext;
@@ -36,15 +35,10 @@
     return kPluginID;
   }
 
-  protected static PreferencesService preferencesService = null;
-
-  public static PreferencesService getPreferencesService()
+  @Override public String getLanguageID()
   { 
-    if(preferencesService == null)
-    { 
-      preferencesService = new PreferencesService(ResourcesPlugin.getWorkspace().getRoot().getProject());
-      preferencesService.setLanguageName(kLanguageName);
-    }
-    return preferencesService;
+    return kLanguageName;
   }
+
+  protected static PreferencesService preferencesService = null;
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/Activator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/Activator.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/Activator.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -1,6 +1,5 @@
 package org.strategoxt.imp.editors.stratego;
 
-import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.imp.preferences.PreferencesService;
 import org.eclipse.imp.runtime.PluginBase;
 import org.osgi.framework.BundleContext;
@@ -36,15 +35,10 @@
     return kPluginID;
   }
 
-  protected static PreferencesService preferencesService = null;
-
-  public static PreferencesService getPreferencesService()
+  @Override public String getLanguageID()
   { 
-    if(preferencesService == null)
-    { 
-      preferencesService = new PreferencesService(ResourcesPlugin.getWorkspace().getRoot().getProject());
-      preferencesService.setLanguageName(kLanguageName);
-    }
-    return preferencesService;
+    return kLanguageName;
   }
+
+  protected static PreferencesService preferencesService = null;
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-01 10:12:06 UTC (rev 20329)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.1.2.2"
+      version="0.2"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -94,52 +94,38 @@
          id="org.eclipse.imp.lpg"
          download-size="0"
          install-size="0"
-         version="0.1.79.qualifier"
+         version="0.1.84"
          unpack="false"/>
 
    <plugin
-         id="org.eclipse.imp.lpg.runtime"
-         download-size="0"
-         install-size="0"
-         version="0.1.79.qualifier"
-         unpack="false"/>
-
-   <plugin
          id="org.eclipse.imp.runtime"
          download-size="0"
          install-size="0"
-         version="0.1.88.qualifier"
+         version="0.1.101.qualifier"
          unpack="false"/>
 
    <plugin
          id="lpg.runtime"
          download-size="0"
          install-size="0"
-         version="2.0.16.qualifier"
+         version="2.0.17"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.smapi"
          download-size="0"
          install-size="0"
-         version="0.1.86"
+         version="0.1.89.2"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.smapifier"
          download-size="0"
          install-size="0"
-         version="0.1.86"
+         version="0.1.89.2"
          unpack="false"/>
 
    <plugin
-         id="org.eclipse.imp.xform"
-         download-size="0"
-         install-size="0"
-         version="0.1.87"
-         unpack="false"/>
-
-   <plugin
          id="org.strategoxt.imp.editors.editorservice"
          download-size="0"
          install-size="0"
@@ -154,38 +140,31 @@
          unpack="false"/>
 
    <plugin
-         id="org.eclipse.imp.lpg.metatooling"
-         download-size="0"
-         install-size="0"
-         version="0.1.79.qualifier"
-         unpack="false"/>
-
-   <plugin
          id="org.eclipse.imp.metatooling"
          download-size="0"
          install-size="0"
-         version="0.1.79.qualifier"
+         version="0.1.92"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.preferences"
          download-size="0"
          install-size="0"
-         version="0.1.79.qualifier"
+         version="0.1.86"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.prefspecs"
          download-size="0"
          install-size="0"
-         version="0.1.79.qualifier"
+         version="0.1.89"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.presentation"
          download-size="0"
          install-size="0"
-         version="0.1.1.qualifier"
+         version="0.1.7.qualifier"
          unpack="false"/>
 
    <plugin
@@ -227,4 +206,25 @@
          install-size="0"
          version="0.1.1.qualifier"/>
 
+   <plugin
+         id="org.eclipse.imp.java.hosted"
+         download-size="0"
+         install-size="0"
+         version="0.1.2"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.lpg.ide"
+         download-size="0"
+         install-size="0"
+         version="0.1.87"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.xform"
+         download-size="0"
+         install-size="0"
+         version="0.1.91"
+         unpack="false"/>
+
 </feature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-activator.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-activator.str	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-activator.str	2009-12-01 10:12:06 UTC (rev 20329)
@@ -13,7 +13,6 @@
     <output-java-file> compilation-unit |[
       package pkgname;
       
-      import org.eclipse.core.resources.ResourcesPlugin;
       import org.eclipse.imp.preferences.PreferencesService;
       import org.eclipse.imp.runtime.PluginBase;
       import org.osgi.framework.BundleContext;
@@ -42,7 +41,6 @@
         @Override
         public void start(BundleContext context) throws Exception {
           super.start(context);
-      
         }
       
         @Override
@@ -50,8 +48,14 @@
           return kPluginID;
         }
       
+        @Override
+        public String getLanguageID() {
+          return kLanguageName;
+        }
+      
         protected static PreferencesService preferencesService = null;
       
+        /* UNDONE: Activator.getPreferencesService()
         public static PreferencesService getPreferencesService() {
           if (preferencesService == null) {
             preferencesService = new PreferencesService(ResourcesPlugin
@@ -67,5 +71,6 @@
           }
           return preferencesService;
         }
+        */
       }
     ]|

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -28,6 +28,7 @@
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.IMPJSGLRLibrary;
 import org.strategoxt.imp.runtime.stratego.IMPLibrary;
+import org.strategoxt.imp.runtime.stratego.ReportWithFailure;
 import org.strategoxt.imp.runtime.stratego.adapter.WrappedAstNodeFactory;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
 
@@ -145,6 +146,7 @@
 		result.addOperatorRegistry(new IMPJSGLRLibrary(sglrLibrary));
 		result.addOperatorRegistry(new IMPLibrary());
 		result.setIOAgent(new EditorIOAgent());
+		ReportWithFailure.init();
 		
 		return result;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -37,7 +37,7 @@
 	public static final String ROOT_LANGUAGE = "DynamicRoot";
 
 	protected static final Language DESCRIPTOR_LANGUAGE =
-		new Language("EditorService-builtin", "org.strategoxt.imp.builtin.editorservice", "", ROOT_LANGUAGE, "", "", "", null);
+		new Language("EditorService-builtin", "org.strategoxt.imp.builtin.editorservice", "", ROOT_LANGUAGE, null, "", null, "", "", null);
 	
 	private final Map<AbstractService, Object> services = new WeakHashMap<AbstractService, Object>();
 	
@@ -254,24 +254,28 @@
 	}
 	
 	// INTERPRETING
-    
-    /**
-     * Gets the language for this descriptor, but does not register it.
-     */
-    public Language getLanguage() throws BadDescriptorException {
-        if (language == null) {
-            language = new Language(
-                getProperty("LanguageName"),
-                getProperty("LanguageId", getProperty("LanguageName")),
-                getProperty("Description", ""),
-                ROOT_LANGUAGE,          // ("Extends" is not used for IMP)
-                getProperty("URL", ""),
-                getProperty("Extensions"),
-                getProperty("Aliases", ""),
-                new MetaFileLanguageValidator(this));
-        }
-        return language;
-    }
+	
+	/**
+	 * Gets the language for this descriptor, but does not register it.
+	 */
+	public Language getLanguage() throws BadDescriptorException {
+		if (language == null) {
+			language = new Language(
+				getProperty("LanguageName"),
+				getProperty("LanguageId", getProperty("LanguageName")),
+				getProperty("Description", ""),
+				ROOT_LANGUAGE,		  // ("Extends" is not used for IMP)
+				getProperty("Icon", ""), // TODO: icon path in esv language
+				getProperty("URL", ""),
+				// FIXME: ID of the bundle containing the language descriptor and icon for this language
+				//        (does getAttachmentProvider() already provide enough functionality for this?)
+				getProperty("LanguageId", getProperty("LanguageName")), 
+				getProperty("Extensions"),
+				getProperty("Aliases", ""),
+				new MetaFileLanguageValidator(this));
+		}
+		return language;
+	}
 
 	private String getParseTableName() throws BadDescriptorException {
 		String file = getProperty("Table", getProperty("LanguageName"));
@@ -288,8 +292,8 @@
 	}
 
 	public String[] getExtendedLanguages() {
-    	return getPropertyArray("Extends");
-    }
+		return getPropertyArray("Extends");
+	}
 
 	/**
 	 * Get a set of all files attached to this descriptor (e.g., .ctree or

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -18,6 +18,7 @@
 import org.eclipse.jface.text.IRegion;
 import org.eclipse.jface.text.Region;
 import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
 
 /**
  * Dynamic proxy class to a parse controller.
@@ -63,9 +64,12 @@
 		// Reinitalize path etc. if descriptor was reloaded
 		if (super.getWrapped().getProject() == null)
 			initialize(null, null, null);
+		
+		IParseController result = super.getWrapped(); 
+
 		if (lastEditor == null && EditorState.isUIThread())
 			lastEditor = EditorState.getEditorFor(this);
-		return super.getWrapped();
+		return result;
 	}
 
 	public IAnnotationTypeInfo getAnnotationTypeInfo() {
@@ -76,8 +80,8 @@
 		return getWrapped().getCurrentAst();
 	}
 
-	public ISourcePositionLocator getNodeLocator() {
-		return getWrapped().getNodeLocator();
+	public ISourcePositionLocator getSourcePositionLocator() {
+		return getWrapped().getSourcePositionLocator();
 	}
 
 	public IPath getPath() {
@@ -127,14 +131,18 @@
 		}
 	}
 
-	public Object parse(String input, boolean scanOnly, IProgressMonitor monitor) {
-		Object result = getWrapped().parse(input, scanOnly, monitor);
+	public Object parse(String input, IProgressMonitor monitor) {
+		IParseController parser = getWrapped();
+		if (parser instanceof SGLRParseController)
+			((SGLRParseController) parser).setEditor(lastEditor);
+		
+		Object result = parser.parse(input, monitor);
 		if (isReinitialized && lastEditor != null) {
 			// Update other services
 			// TODO: Trigger colorer update
 			// lastEditor.getEditor().getServiceControllerManager().getPresentationController().damage(new Region(0, input.length()));
 			
-			lastEditor.getEditor().damage(new Region(0, input.length()));
+			lastEditor.getEditor().updateColoring(new Region(0, input.length()));
 			lastEditor.getEditor().fParserScheduler.notifyModelListeners(new NullProgressMonitor());
 			isReinitialized = false;
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -32,10 +32,10 @@
 		super(ITokenColorer.class);
 	}
 	
-	public IRegion calculateDamageExtent(IRegion seed) {
+	public IRegion calculateDamageExtent(IRegion seed, IParseController controller) {
 		if (!isInitialized()) return seed;
 		
-		return getWrapped().calculateDamageExtent(seed);
+		return getWrapped().calculateDamageExtent(seed, controller);
 	}
 
 	public TextAttribute getColoring(IParseController controller, Object token) {
@@ -43,6 +43,10 @@
 		lastParseController = controller;
 		TextAttribute result = getWrapped().getColoring(controller, token);
 		if (isReinitializing) result = toGray(result);
+		if (token.toString().indexOf("2") > -1
+				&& (result.getForeground() == null || result.getForeground().getRed() == 0 || result.getForeground().getBlue() == 0)) {
+			System.out.print(""); // DEBUG
+		}
 		return result;
 	}
 	
@@ -54,7 +58,7 @@
 			lastEditor = ((DynamicParseController) lastParseController).getLastEditor().getEditor();
 
 		if (lastEditor != null && !lastEditor.getTitleImage().isDisposed()) {
-			lastEditor.damage(new Region(0, lastEditor.getServiceControllerManager().getSourceViewer().getDocument().getLength()));
+			lastEditor.updateColoring(new Region(0, lastEditor.getServiceControllerManager().getSourceViewer().getDocument().getLength()));
 			IModelListener presentation = lastEditor.getServiceControllerManager().getPresentationController();
 			presentation.update(lastParseController, new NullProgressMonitor());
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -9,6 +9,7 @@
 import java.util.Map;
 import java.util.WeakHashMap;
 
+import lpg.runtime.ILexStream;
 import lpg.runtime.Monitor;
 import lpg.runtime.PrsStream;
 
@@ -189,6 +190,11 @@
 			Debug.stopTimer("File parsed");
 		}
 	}
+	
+	@Deprecated
+	public void reset(ILexStream lexStream) {
+		throw new UnsupportedOperationException();
+	}
 
 	/**
 	 * Retrieve the original tokenizer for an asfix tree,

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -6,6 +6,8 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
+import lpg.runtime.IPrsStream;
+
 import org.spoofax.jsglr.SGLRException;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKindManager;
@@ -96,5 +98,10 @@
 			inputFile.delete();
 		}
 	}
+	
+	@Deprecated
+	public IPrsStream getIPrsStream() {
+		throw new UnsupportedOperationException();
+	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -3,6 +3,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import lpg.runtime.IPrsStream;
+
 import org.spoofax.jsglr.BadTokenException;
 import org.spoofax.jsglr.Disambiguator;
 import org.spoofax.jsglr.FilterException;
@@ -64,6 +66,10 @@
 		return parser.getDisambiguator();
 	}
 	
+	public IPrsStream getIPrsStream() {
+		return super.getController().getIPrsStream();
+	}
+	
 	@Override
 	protected ATerm doParseNoImplode(char[] inputChars, String filename)
 			throws TokenExpectedException, BadTokenException, SGLRException, IOException {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -117,7 +117,11 @@
 	}
 	
 	public void commitChanges() {
-		handler.commitChanges();
+		try {
+			handler.commitChanges();
+		} catch (RuntimeException e) {
+			Environment.logException("Could not commit syntax error marker changes", e);
+		}
 	}
 
     /**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRLexer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRLexer.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRLexer.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -3,6 +3,7 @@
 import org.eclipse.imp.parser.ILexer;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
 
+import lpg.runtime.ILexStream;
 import lpg.runtime.IPrsStream;
 import lpg.runtime.LexStream;
 import lpg.runtime.Monitor;
@@ -23,7 +24,11 @@
 		this.lexStream = lexStream;
 	}
 	
-	// IMP legacy / compatibility
+	public ILexStream getILexStream() {
+		return lexStream;
+	}
+	
+	// IMP/LPG legacy / compatibility
 
 	@Deprecated
 	public int[] getKeywordKinds() {
@@ -39,4 +44,9 @@
 	public void lexer(Monitor monitor, IPrsStream prsStream) {
 		// We don't do that.
 	}
+
+	@Deprecated
+	public void reset(char[] contentsArray, String filePath) {
+		throw new UnsupportedOperationException();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-01 08:52:48 UTC (rev 20328)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-01 10:12:06 UTC (rev 20329)
@@ -27,6 +27,7 @@
 import org.eclipse.imp.services.IAnnotationTypeInfo;
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
 import org.eclipse.jface.text.IRegion;
+import org.eclipse.jface.text.Region;
 import org.spoofax.jsglr.BadTokenException;
 import org.spoofax.jsglr.NoRecoveryRulesException;
 import org.spoofax.jsglr.ParseTable;
@@ -36,6 +37,7 @@
 import org.spoofax.jsglr.TokenExpectedException;
 import org.spoofax.jsglr.Tools;
 import org.strategoxt.imp.runtime.Debug;
+import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.parser.ast.AstNode;
@@ -63,7 +65,7 @@
 	
 	private final ParseErrorHandler errorHandler = new ParseErrorHandler(this);
 	
-	private final ReentrantLock parseLock = new ReentrantLock();
+	private final ReentrantLock parseLock = new ReentrantLock(true);
 	
 	private final JSGLRI parser;
 	
@@ -79,7 +81,11 @@
 	
 	private IPath path;
 	
+	private EditorState editor;
+	
 	private volatile boolean isStartupParsed;
+	
+	private volatile boolean isColorerQueued;
 
 	// Simple accessors
 	
@@ -118,6 +124,10 @@
 		path = path.removeFirstSegments(path.matchingFirstSegments(project.getLocation()));
 		return project.getFile(path);
     }
+    
+    public void setEditor(EditorState editor) {
+		this.editor = editor;
+	}
 	
 	// Parsing and initialization
     
@@ -155,8 +165,13 @@
 		this.project = project;
 		this.errorHandler.setMessages(messages);
     }
+    
+    @Deprecated
+    public final AstNode parse(String input, boolean scanOnly, IProgressMonitor monitor) {
+    	return parse(input, monitor);
+    }
 
-	public AstNode parse(String input, boolean scanOnly, IProgressMonitor monitor) {
+	public AstNode parse(String input, IProgressMonitor monitor) {
 		if (input.length() == 0) {
 			currentParseStream = null;
 			return currentAst = null;
@@ -179,7 +194,9 @@
 			currentParseStream = null; // avoid twitchy colorer
 			if (isStartupParsed)
 				Job.getJobManager().beginRule(resource, monitor); // enter lock
-			parseLock.lock(); // Parse lock must be locked _after_ resource lock
+			assert !parseLock.isLocked() : "Parse lock must be locked after resource lock";
+			parseLock.lock();
+			System.out.println("PARSE! " + System.currentTimeMillis()); // DEBUG
 			
 			Debug.startTimer();
 			
@@ -216,24 +233,15 @@
 		} catch (ParseTimeoutException e) {
 			// TODO: Don't show stack trace for this
 			if (monitor.isCanceled()) return null;
-			errorHandler.clearErrors();
-			errorHandler.setRecoveryAvailable(false);
-			errorHandler.reportError(parser.getTokenizer(), e);
+			reportGenericException(e);
 		} catch (TokenExpectedException e) {
-			errorHandler.clearErrors(); // (must not be synchronized; uses workspace lock)
-			errorHandler.reportError(parser.getTokenizer(), e);
+			reportGenericException(e);
 		} catch (BadTokenException e) {
-			errorHandler.clearErrors();
-			errorHandler.setRecoveryAvailable(false);
-			errorHandler.reportError(parser.getTokenizer(), e);
+			reportGenericException(e);
 		} catch (SGLRException e) {
-			errorHandler.clearErrors();
-			errorHandler.setRecoveryAvailable(false);
-			errorHandler.reportError(parser.getTokenizer(), e);
+			reportGenericException(e);
 		} catch (IOException e) {
-			errorHandler.clearErrors();
-			errorHandler.setRecoveryAvailable(false);
-			errorHandler.reportError(parser.getTokenizer(), e);
+			reportGenericException(e);
 		} catch (OperationCanceledException e) {
 			return null;
 		} catch (RuntimeException e) {
@@ -241,9 +249,16 @@
 			errorHandler.reportError(parser.getTokenizer(), e);
 		} finally {
 			errorHandler.commitChanges();
+			
 			if (isStartupParsed) Job.getJobManager().endRule(resource);
 			else isStartupParsed = true;
+			
+			boolean mustRecolor = isColorerQueued && editor != null;
+			IPrsStream parseStream = currentParseStream;
+			isColorerQueued = false;
+			
 			parseLock.unlock();
+			if (mustRecolor) forceRecolor(parseStream);
 		}
 		
 		if (!monitor.isCanceled())
@@ -252,9 +267,16 @@
 		return currentAst;
 	}
 
+	private void reportGenericException(Exception e) {
+		errorHandler.clearErrors();
+		errorHandler.setRecoveryAvailable(false);
+		errorHandler.reportError(parser.getTokenizer(), e);
+	}
+
 	private void updateFeedBack() {
 		// HACK: Need to call IModelListener.update manually; the IMP extension point is not implemented?!

(293 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Tue Dec  1 11:48:40 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 01 Dec 2009 10:48:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20330 - LennartKats -
	in strc-java/trunk: META-INF
	java/runtime/org/strategoxt/lang/compat/override test/basic trans
Message-ID: <200912011048.nB1AmdKS024005@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-01 10:48:39 +0000 (Tue, 01 Dec 2009)
New Revision: 20330

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20330&view=rev

Modified:
   strc-java/trunk/META-INF/MANIFEST.MF
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str
   strc-java/trunk/test/basic/readterm_1.str
   strc-java/trunk/trans/Makefile.am
   strc-java/trunk/trans/java-optimize.str

Log:


Changes:

Modified: strc-java/trunk/META-INF/MANIFEST.MF
===================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	2009-12-01 10:12:06 UTC (rev 20329)
+++ strc-java/trunk/META-INF/MANIFEST.MF	2009-12-01 10:48:39 UTC (rev 20330)
@@ -67,10 +67,10 @@
  org.strategoxt.strj,
  shared
 Require-Bundle: org.spoofax.aterm,
- org.spoofax.interpreter.core;bundle-version="0.3.13",
- org.spoofax.interpreter.adapter.aterm;bundle-version="0.3.11",
- org.spoofax.jsglr;bundle-version="0.2.1",
- org.spoofax.interpreter.library.jsglr;bundle-version="0.3.9"
+ org.spoofax.interpreter.core,
+ org.spoofax.interpreter.adapter.aterm,
+ org.spoofax.jsglr,
+ org.spoofax.interpreter.library.jsglr
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ClassPath: ., java/runtime/,
    java/strategoxt.jar

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str	2009-12-01 10:12:06 UTC (rev 20329)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str	2009-12-01 10:48:39 UTC (rev 20330)
@@ -27,12 +27,14 @@
 
     log(|Info(), ["Calling external tool ", program, " ", <try(separate-by(|" "); concat-strings)> args]);
     prim("SSL_EXT_call", program, args) => 0
+  /* UNDONE: added a Java extension for calling a tool with a custom environment
   <+
     // (Java extension)
     ?(program, env, args);
 
     log(|Info(), ["Calling external tool ", program, " ", <try(separate-by(|" "); concat-strings)> args]);
     prim("SSL_EXT_call", (program, env), args) => 0
+  */
 
   override fork(child) =
     fatal-err(|"Forking of applications is not supported on Java at this time")

Modified: strc-java/trunk/test/basic/readterm_1.str
===================================================================
--- strc-java/trunk/test/basic/readterm_1.str	2009-12-01 10:12:06 UTC (rev 20329)
+++ strc-java/trunk/test/basic/readterm_1.str	2009-12-01 10:48:39 UTC (rev 20330)
@@ -8,5 +8,9 @@
   main =
     t := Some([1,2{3}]{4}){5};
     <WriteToTextFile> ("readterm_1.trm", t);
-    <ReadFromFile> "readterm_1.trm" => t
+    <ReadFromFile> "readterm_1.trm" => t;
+    
+    t2 := Some([1,2]);
+    <WriteToTextFile> ("readterm_1.trm", t2);
+    <ReadFromFile> "readterm_1.trm" => t2
 

Modified: strc-java/trunk/trans/Makefile.am
===================================================================
--- strc-java/trunk/trans/Makefile.am	2009-12-01 10:12:06 UTC (rev 20329)
+++ strc-java/trunk/trans/Makefile.am	2009-12-01 10:48:39 UTC (rev 20330)
@@ -54,7 +54,7 @@
 	strj -la org.strategoxt.strj -la stratego-parallel -i strj-parallel.str
 
 %.java : %.str strj
-	./strj -i $< -o $@ --verbose 2 -la stratego-lib -la java-front -la stratego-sglr
+	./strj -i $< -o $@ --verbose 2 -la stratego-lib -la java-front -la stratego-sglr -la stratego-xtc
 
 %.class : %.java
 	$(JAVAC) $(JAVACFLAGS) $<

Modified: strc-java/trunk/trans/java-optimize.str
===================================================================
--- strc-java/trunk/trans/java-optimize.str	2009-12-01 10:12:06 UTC (rev 20329)
+++ strc-java/trunk/trans/java-optimize.str	2009-12-01 10:48:39 UTC (rev 20330)
@@ -139,6 +139,11 @@
     bstm* |[ IStrategoTerm x = null; bstm* ]| -> ([<Hd> | bstm_decl*], e_cons, bstm_body*)
     where
       (bstm_decl*, e_cons, bstm_body*) := <match-decls-and-appl-test> bstm*
+  
+  match-decls-and-appl-test :
+    bstm* |[ x = term; bstm* ]| -> ([<Hd> | bstm_decl*], e_cons, bstm_body*)
+    where
+      (bstm_decl*, e_cons, bstm_body*) := <match-decls-and-appl-test> bstm*
     
   match-decls-and-appl-test :
     bstm* |[



From L.C.L.Kats at tudelft.nl  Tue Dec  1 11:49:11 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 01 Dec 2009 10:49:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20331 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF
Message-ID: <200912011049.nB1AnBnM024009@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-01 10:49:11 +0000 (Tue, 01 Dec 2009)
New Revision: 20331

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20331&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF

Log:
Removed AspectJ dependency from JSGLR.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF	2009-12-01 10:48:39 UTC (rev 20330)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF	2009-12-01 10:49:11 UTC (rev 20331)
@@ -7,6 +7,5 @@
 Bundle-Vendor: Spoofax.org
 Require-Bundle: org.spoofax.aterm,
  org.junit,
- org.spoofax.interpreter.core,
- org.aspectj.runtime
+ org.spoofax.interpreter.core
 Bundle-RequiredExecutionEnvironment: J2SE-1.5



From L.C.L.Kats at tudelft.nl  Tue Dec  1 14:14:09 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 01 Dec 2009 13:14:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20332 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <200912011314.nB1DE9t5026547@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-01 13:14:09 +0000 (Tue, 01 Dec 2009)
New Revision: 20332

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20332&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Log:
cleanup

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-01 10:49:11 UTC (rev 20331)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-01 13:14:09 UTC (rev 20332)
@@ -194,9 +194,9 @@
 			currentParseStream = null; // avoid twitchy colorer
 			if (isStartupParsed)
 				Job.getJobManager().beginRule(resource, monitor); // enter lock
-			assert !parseLock.isLocked() : "Parse lock must be locked after resource lock";
+			assert !parseLock.isHeldByCurrentThread() : "Parse lock must be locked after resource lock";
 			parseLock.lock();
-			System.out.println("PARSE! " + System.currentTimeMillis()); // DEBUG
+			// System.out.println("PARSE! " + System.currentTimeMillis()); // DEBUG
 			
 			Debug.startTimer();
 			
@@ -253,8 +253,8 @@
 			if (isStartupParsed) Job.getJobManager().endRule(resource);
 			else isStartupParsed = true;
 			
-			boolean mustRecolor = isColorerQueued && editor != null;
 			IPrsStream parseStream = currentParseStream;
+			boolean mustRecolor = isColorerQueued && editor != null && parseStream != null;
 			isColorerQueued = false;
 			
 			parseLock.unlock();
@@ -320,7 +320,7 @@
 			stream = getIPrsStream();
 		} finally {
 			isColorerQueued = false;
-			System.out.println("COLOR! " + System.currentTimeMillis()); // DEBUG
+			// System.out.println("COLOR! " + System.currentTimeMillis()); // DEBUG
 			parseLock.unlock();
 		}
 		
@@ -336,26 +336,13 @@
 	}
 
 	private void forceRecolor(IPrsStream parseStream) {
-		System.out.println("RECOLOR! " + System.currentTimeMillis()); // DEBUG
+		// System.out.println("RECOLOR! " + System.currentTimeMillis()); // DEBUG
 		isColorerQueued = true;
 		try {
-			/*new Job("Reschedule syntax highlighting") {
-				@Override
-				protected IStatus run(IProgressMonitor monitor) {
-					IPrsStream parseStream;
-					parseLock.lock();
-					try {
-					parseStream = currentParseStream;
-					} finally {*/
-						isColorerQueued = false;
-					/*	parseLock.unlock();
-					}*/
-					System.out.println("RECOLOR GO! " + System.currentTimeMillis()); // DEBUG
-					assert !parseLock.isLocked() : "Parse lock may not be locked: dead lock risk with colorer queue";
-					editor.getEditor().updateColoring(new Region(0, parseStream.getStreamLength() - 1));
-					/*return Status.OK_STATUS;
-				}
-			}.schedule();*/
+			isColorerQueued = false;
+			// System.out.println("RECOLOR GO! " + System.currentTimeMillis()); // DEBUG
+			assert !parseLock.isHeldByCurrentThread() : "Parse lock may not be locked: dead lock risk with colorer queue";
+			editor.getEditor().updateColoring(new Region(0, parseStream.getStreamLength() - 1));
 		} catch (RuntimeException e) {
 			Environment.logException("Could reschedule syntax highlighter", e);
 		}



From L.C.L.Kats at tudelft.nl  Wed Dec  2 15:15:07 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Dec 2009 14:15:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20333 - LennartKats -
	strc-java/trunk/trans
Message-ID: <200912021416.nB2EFtK6016883@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-02 14:15:07 +0000 (Wed, 02 Dec 2009)
New Revision: 20333

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20333&view=rev

Modified:
   strc-java/trunk/trans/strj-options.str

Log:
Don't fail if option -c isued or if -F is used with a non-Java output filename.

Changes:

Modified: strc-java/trunk/trans/strj-options.str
===================================================================
--- strc-java/trunk/trans/strj-options.str	2009-12-01 13:14:09 UTC (rev 20332)
+++ strc-java/trunk/trans/strj-options.str	2009-12-02 14:15:07 UTC (rev 20333)
@@ -29,7 +29,7 @@
     )
   ; display-version
   ; strc-announce
-  ; if <get-config> "-o"; base-filename; not(<eq> (<id>, <jify>)) then
+  ; if <get-config> "-o"; base-filename; not(<eq> (<id>, <jify>)); not(<get-config> "-F") then
       <get-config> "-o"
     ; fatal-err(|"Output file name is not a legal Java name")
     end
@@ -102,6 +102,11 @@
     , !"--Xecj33           Generate code compatible with ECJ 3.3 and lower";
       if-java-platform(fail)
     )
+  <+
+    Option("-c",
+      warn(|"Ignored unsupported option -c")
+    , fail
+    )
   
   <+ ArgOption(fail, fail, !"")
   <+ ArgOption(fail, fail, !"General options:")



From L.C.L.Kats at tudelft.nl  Wed Dec  2 15:18:32 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Dec 2009 14:18:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20334 - LennartKats -
	strc-java/trunk/trans
Message-ID: <200912021420.nB2EJKAh016949@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-02 14:18:32 +0000 (Wed, 02 Dec 2009)
New Revision: 20334

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20334&view=rev

Modified:
   strc-java/trunk/trans/strj-options.str

Log:


Changes:

Modified: strc-java/trunk/trans/strj-options.str
===================================================================
--- strc-java/trunk/trans/strj-options.str	2009-12-02 14:15:07 UTC (rev 20333)
+++ strc-java/trunk/trans/strj-options.str	2009-12-02 14:18:32 UTC (rev 20334)
@@ -104,7 +104,7 @@
     )
   <+
     Option("-c",
-      warn(|"Ignored unsupported option -c")
+      warn-msg(|"Ignored unsupported option -c")
     , fail
     )
   



From L.C.L.Kats at tudelft.nl  Wed Dec  2 15:22:49 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Dec 2009 14:22:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20335 - LennartKats -
	strc-java/trunk/trans
Message-ID: <200912021424.nB2ENb38017027@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-02 14:22:49 +0000 (Wed, 02 Dec 2009)
New Revision: 20335

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20335&view=rev

Modified:
   strc-java/trunk/trans/strj-options.str

Log:
Don't be so complainy when --library is used with -F and no package name is specified.

Changes:

Modified: strc-java/trunk/trans/strj-options.str
===================================================================
--- strc-java/trunk/trans/strj-options.str	2009-12-02 14:18:32 UTC (rev 20334)
+++ strc-java/trunk/trans/strj-options.str	2009-12-02 14:22:49 UTC (rev 20335)
@@ -33,7 +33,7 @@
       <get-config> "-o"
     ; fatal-err(|"Output file name is not a legal Java name")
     end
-  ; if <get-config> "--library"; not(<get-config> "-p") then
+  ; if <get-config> "--library"; not(<get-config> "-p" + <get-config> "-F") then
       // TODO: Allow programs without a packagename?
       //       (we'd have to disable the class-splitting filter)
       fatal-err-msg(|"No package name specified")



From L.C.L.Kats at tudelft.nl  Wed Dec  2 16:55:04 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Dec 2009 15:55:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20336 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/strc
	strc-java/trunk/trans
Message-ID: <200912021555.nB2Ft4Ro018573@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-02 15:55:04 +0000 (Wed, 02 Dec 2009)
New Revision: 20336

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20336&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str
   strc-java/trunk/trans/strj-options.str
   strc-java/trunk/trans/strj.str

Log:
Changes to lib*.rtree signature file generation:
- "name for library same as name for base file" is now really a warning
  (e.g., when you do strc -i foo.str -o foo --library)
- signatures are now also created when -F is specified
- signatures are now also created by STRJ


Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-02 14:22:49 UTC (rev 20335)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-02 15:55:04 UTC (rev 20336)
@@ -30,8 +30,8 @@
     xtc-input(
       strc-front-end
       ; strc-optimize
-      ; strc-output-frontend
       ; strc-export-external-defs
+      ; strc-output-frontend
       ; strc-back-end
       ; strc-c-compile
     )
@@ -57,24 +57,22 @@
 
   strc-export-external-defs =
     strc-if-lib(where(
-      log-timed(
-        defs-to-external-defs
-	; where(
-	    <not(eq)>(<get-config>"baseout",<get-config>"basein")
-	    <+ <get-config>"baseout"
-	       ; warn(|<concat-strings>["Name for library same as name for base file", <id>])
-	       ; fail
-          )
-        ; write-to
-        ; copy-to(strc-getoutfile(!".rtree") => file1)
-	; log(|Info(), ["Abstract syntax in '", file1, "'"])
-
-        ; xtc-io-transform(pp-stratego-string)
-        ; copy-to(strc-getoutfile(!".str") => file2)
-	; log(|Info(), ["Concrete syntax in '", file2, "'"])
-      | "Export of externals succeeded"
-      , 1
-      )
+      if <eq> (<get-config> "baseout", <get-config> "basein") then
+        <get-config> "baseout"
+        ; warn(|<concat-strings>["Could not export library signature: name for library same as name for base file"])
+      else
+        log-timed(
+          defs-to-external-defs
+          ; write-to
+          ; copy-to(strc-getoutfile(!".rtree") => file1)
+          ; log(|Info(), ["Abstract syntax in '", file1, "'"])
+          ; xtc-io-transform(pp-stratego-string)
+          ; copy-to(strc-getoutfile(!".str") => file2)
+          ; log(|Info(), ["Concrete syntax in '", file2, "'"])
+        | "Export of externals succeeded"
+        , 1
+        )
+      end
     ))
 
 strategies

Modified: strc-java/trunk/trans/strj-options.str
===================================================================
--- strc-java/trunk/trans/strj-options.str	2009-12-02 14:22:49 UTC (rev 20335)
+++ strc-java/trunk/trans/strj-options.str	2009-12-02 15:55:04 UTC (rev 20336)
@@ -34,8 +34,6 @@
     ; fatal-err(|"Output file name is not a legal Java name")
     end
   ; if <get-config> "--library"; not(<get-config> "-p" + <get-config> "-F") then
-      // TODO: Allow programs without a packagename?
-      //       (we'd have to disable the class-splitting filter)
       fatal-err-msg(|"No package name specified")
     end
   

Modified: strc-java/trunk/trans/strj.str
===================================================================
--- strc-java/trunk/trans/strj.str	2009-12-02 14:22:49 UTC (rev 20335)
+++ strc-java/trunk/trans/strj.str	2009-12-02 15:55:04 UTC (rev 20336)
@@ -49,6 +49,7 @@
     end
   ; try(mark-always-needed(|<get-config> "-m", 0, 0))
   ; strc-optimize
+  ; strc-export-external-defs
   ; strc-output-frontend
   ; s2j
   ; with(clean-output-dir)
@@ -68,17 +69,19 @@
     end
   
   delete-java-files-in-dir =
-    log(|Info(), ["Deleting existing java files in output directory ", <id>])
-  ; with(olddir := <getcwd>)
-  ; finally(
-      chdir
-    ; <readdir> "."
-    ; list-loop(
-        if has-extension(|"java") then
-          remove-file
-        end
+    log-timed(
+      with(olddir := <getcwd>)
+    ; finally(
+        chdir
+      ; <readdir> "."
+      ; list-loop(
+          if has-extension(|"java") then
+            remove-file
+          end
+        )
+      , <chdir> olddir
       )
-    , <chdir> olddir
+    | <conc-strings> ("Deleted existing java files in output directory ", <id>), 1
     )
   <+
     warn(|"Could not clean output directory")



From L.C.L.Kats at tudelft.nl  Wed Dec  2 21:14:42 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Dec 2009 20:14:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20337 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	parser services
Message-ID: <200912022014.nB2KEg0s022400@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-02 20:14:42 +0000 (Wed, 02 Dec 2009)
New Revision: 20337

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20337&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:
Adjusted parser scheduling and locks. Now controlling colorer scheduling from the parse controller, rather than letting IMP decide when to do it.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-02 15:55:04 UTC (rev 20336)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-02 20:14:42 UTC (rev 20337)
@@ -1,10 +1,13 @@
 package org.strategoxt.imp.runtime.parser;
 
 import static org.spoofax.jsglr.Term.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
 import lpg.runtime.IToken;
 
 import org.eclipse.core.resources.IMarker;
-import org.eclipse.imp.parser.IMessageHandler;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.terms.TermConverter;
@@ -62,38 +65,28 @@
 	 */
 	public static final char UNEXPECTED_EOF_CHAR = (char) -2;
 	
+	private static Context asyncAmbReportingContext;
+	
 	private final AstMessageHandler handler = new AstMessageHandler(AstMessageHandler.PARSE_MARKER_TYPE);
 	
 	private final SGLRParseController source;
 	
 	private boolean isRecoveryAvailable = true;
-
-	private IMessageHandler messages; // TODO: remove ParseErrorHandler.messages?
 	
 	private int offset;
 	
 	private boolean inLexicalContext;
 	
-	private Context ambReportingContext;
+	private List<Runnable> errorReports = new ArrayList<Runnable>();
 
 	public ParseErrorHandler(SGLRParseController source) {
 		this.source = source;
 	}
 	
 	public void clearErrors() {
-		try {
-			messages.clearMessages();
-		} catch (RuntimeException e) {
-			// Might happen if editor is closed
-			Environment.logException("Exception occurred in clearing error markers", e);
-		}
 		handler.clearMarkers(source.getResource());
 	}
 	
-	public void setMessages(IMessageHandler messages) {
-		this.messages = messages;
-	}
-	
 	/**
 	 * Informs the parse error handler that recovery is unavailable.
 	 * This information is reflected in any parse error messages.
@@ -105,8 +98,9 @@
 	/**
 	 * Report WATER + INSERT errors from parse tree
 	 */
-	public void reportNonFatalErrors(SGLRTokenizer tokenizer, ATerm top) {
+	public void gatherNonFatalErrors(SGLRTokenizer tokenizer, ATerm top) {
 		try {
+			errorReports.clear();
 			offset = 0;
 			reportSkippedFragments(tokenizer);
 			ATermAppl asfix = termAt(top, 0);
@@ -115,9 +109,20 @@
 			reportError(tokenizer, e);
 		}
 	}
-	
+
 	public void commitChanges() {
+		// Threading concerns:
+		//   - must not be synchronized; uses resource lock
+		//   - when ran directly from the main thread, it may block other
+		//     UI threads that already have a lock on my resource,
+		//     but are waiting to run in the UI thread themselves
+		//   - reporting errors at startup may trigger the above condition,
+		//     at least for files with an in-workspace editor(?)
+		assert !source.getParseLock().isHeldByCurrentThread();
 		try {
+			for (Runnable marker : errorReports) {
+				marker.run();
+			}
 			handler.commitChanges();
 		} catch (RuntimeException e) {
 			Environment.logException("Could not commit syntax error marker changes", e);
@@ -210,20 +215,29 @@
 	private void reportAmbiguity(SGLRTokenizer tokenizer, ATermAppl amb, int startOffset) {
 		if (!inLexicalContext) {
 			IToken token = tokenizer.makeErrorToken(startOffset, offset - 1);
-			if (ambReportingContext == null) {
-				stratego_sglr.init();
-				ambReportingContext = stratego_aterm.init();
-			}
-			ITermFactory factory = ambReportingContext.getFactory();
-			IStrategoTerm ambTerm;
+			reportWarningAtTokens(token, token, "Fragment is ambiguous: " + ambToString(amb));
+		}
+	}
+
+	private String ambToString(ATermAppl amb) {
+		if (asyncAmbReportingContext == null) {
+			stratego_sglr.init();
+			asyncAmbReportingContext = stratego_aterm.init();
+		}
+
+		assert !Thread.holdsLock(Environment.getSyncRoot()) : "Potential deadlock";
+		
+		synchronized (asyncAmbReportingContext) {
+			ITermFactory factory = asyncAmbReportingContext.getFactory();
+			IStrategoTerm result;
+			
 			synchronized (Environment.getSyncRoot()) {
-				ambTerm = TermConverter.convert(factory, Environment.getWrappedATermFactory().wrapTerm(amb));
+				result = TermConverter.convert(factory, Environment.getWrappedATermFactory().wrapTerm(amb));
 			}
 			
-			ambTerm = factory.makeAppl(factory.makeConstructor("parsetree", 2), ambTerm, factory.makeInt(2));
-			ambTerm = implode_asfix_0_0.instance.invoke(ambReportingContext, ambTerm);
-			
-			reportWarningAtTokens(token, token, "Fragment is ambiguous: " + ambTerm.toString());
+			result = factory.makeAppl(factory.makeConstructor("parsetree", 2), result, factory.makeInt(2));
+			result = implode_asfix_0_0.instance.invoke(asyncAmbReportingContext, result);
+			return result.toString();
 		}
 	}
 	
@@ -294,17 +308,29 @@
 	private void reportErrorAtTokens(final IToken left, final IToken right, String message) {
 		final String message2 = isRecoveryAvailable ? message : message + " (recovery unavailable)";
 		
-		handler.addMarker(source.getResource(), left, right, message2, IMarker.SEVERITY_ERROR);
+		errorReports.add(new Runnable() {
+			public void run() {
+				handler.addMarker(source.getResource(), left, right, message2, IMarker.SEVERITY_ERROR);
+			}
+		});
 	}
 	
 	private void reportWarningAtTokens(final IToken left, final IToken right, final String message) {
-		handler.addMarker(source.getResource(), left, right, message, IMarker.SEVERITY_WARNING);
+		errorReports.add(new Runnable() {
+			public void run() {
+				handler.addMarker(source.getResource(), left, right, message, IMarker.SEVERITY_WARNING);
+			}
+		});
 	}
 	
 	private void reportErrorAtFirstLine(String message) {
 		final String message2 = isRecoveryAvailable ? message : message + " (recovery unavailable)";
 		
-		handler.addMarkerFirstLine(source.getResource(), message2, IMarker.SEVERITY_ERROR);
+		errorReports.add(new Runnable() {
+			public void run() {
+				handler.addMarkerFirstLine(source.getResource(), message2, IMarker.SEVERITY_ERROR);
+			}
+		});
 	}	
 	
 	private static boolean isErrorProduction(ATermAppl attrs, String consName) {		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-02 15:55:04 UTC (rev 20336)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-02 20:14:42 UTC (rev 20337)
@@ -63,10 +63,10 @@
 
 	private final TokenKindManager tokenManager = new TokenKindManager();
 	
-	private final ParseErrorHandler errorHandler = new ParseErrorHandler(this);
-	
 	private final ReentrantLock parseLock = new ReentrantLock(true);
 	
+	private final ReentrantLock errorReportingLock = new ReentrantLock(true);
+	
 	private final JSGLRI parser;
 	
 	private final Language language;
@@ -85,7 +85,7 @@
 	
 	private volatile boolean isStartupParsed;
 	
-	private volatile boolean isColorerQueued;
+	private volatile boolean disallowColorer;
 
 	// Simple accessors
 	
@@ -107,6 +107,10 @@
 	public final JSGLRI getParser() {
 		return parser;
 	}
+	
+	protected ReentrantLock getParseLock() {
+		return parseLock;
+	}
 
 	/**
 	 * @return either a project-relative path, if getProject() is non-null, or
@@ -158,12 +162,10 @@
 		}
     }
 
-    public void initialize(IPath filePath, ISourceProject project,
-    		IMessageHandler messages) {
+    public void initialize(IPath filePath, ISourceProject project, IMessageHandler messages) {
     	
 		this.path = filePath;
 		this.project = project;
-		this.errorHandler.setMessages(messages);
     }
     
     @Deprecated
@@ -179,24 +181,26 @@
 		
 		if (getPath() == null)
 		    throw new IllegalStateException("SGLR parse controller not initialized");
-
-		String filename = getPath().toPortableString();
 		
 		// XXX: SGLR.asyncAbort() is never called until the old parse actually completes
+		//      (or is it?!)
 		//      need to intercept cancellation events in the running thread's monitor instead
 		getParser().asyncAbort();
+
+		IPrsStream parseStream;
+		String filename = getPath().toPortableString();
+		IResource resource = getResource();
+		ParseErrorHandler errorHandler = new ParseErrorHandler(this); // thread-local
 		
-		IResource resource = getResource();
 		try {
-			// while (PlatformUI.getWorkbench().getDisplay().readAndDispatch());
-			
 			// Can't do resource locking when Eclipse is still starting up; causes deadlock
-			currentParseStream = null; // avoid twitchy colorer
+			disallowColorer = isStartupParsed;
 			if (isStartupParsed)
 				Job.getJobManager().beginRule(resource, monitor); // enter lock
+			disallowColorer = isStartupParsed;
 			assert !parseLock.isHeldByCurrentThread() : "Parse lock must be locked after resource lock";
 			parseLock.lock();
-			// System.out.println("PARSE! " + System.currentTimeMillis()); // DEBUG
+			System.out.println("PARSE! " + System.currentTimeMillis()); // DEBUG
 			
 			Debug.startTimer();
 			
@@ -207,21 +211,9 @@
 			if (monitor.isCanceled()) return null;
 			RootAstNode ast = parser.internalImplode(asfix);
 
-			if (isStartupParsed) {
-				// Threading concerns:
-				//   - must not be synchronized; uses resource lock
-				//   - when ran directly from the main thread, it may block other
-				//     UI threads that already have a lock on my resource,
-				//     but are waiting to run in the UI thread themselves
-				//   - reporting errors at startup may trigger the above condition,
-				//     at least for files with an in-workspace editor(?)
-				//
-				// TODO: Consider using Display.asyncExec for reporting errors;
-				//       this could be integrated into the AstMessageHandler class!
-				errorHandler.setRecoveryAvailable(true);
-				errorHandler.clearErrors();
-				errorHandler.reportNonFatalErrors(parser.getTokenizer(), asfix);
-			}
+			errorHandler.clearErrors();
+			errorHandler.setRecoveryAvailable(true);
+			errorHandler.gatherNonFatalErrors(parser.getTokenizer(), asfix);
 			
 			// TODO: Delay parse error markers for newly typed text
 			//       (the new ast should then also be delayed as to get the old coloring)
@@ -233,47 +225,56 @@
 		} catch (ParseTimeoutException e) {
 			// TODO: Don't show stack trace for this
 			if (monitor.isCanceled()) return null;
-			reportGenericException(e);
+			reportGenericException(errorHandler, e);
 		} catch (TokenExpectedException e) {
-			reportGenericException(e);
+			reportGenericException(errorHandler, e);
 		} catch (BadTokenException e) {
-			reportGenericException(e);
+			reportGenericException(errorHandler, e);
 		} catch (SGLRException e) {
-			reportGenericException(e);
+			reportGenericException(errorHandler, e);
 		} catch (IOException e) {
-			reportGenericException(e);
+			reportGenericException(errorHandler, e);
 		} catch (OperationCanceledException e) {
 			return null;
 		} catch (RuntimeException e) {
 			Environment.logException("Internal parser error", e);
 			errorHandler.reportError(parser.getTokenizer(), e);
 		} finally {
-			errorHandler.commitChanges();
-			
 			if (isStartupParsed) Job.getJobManager().endRule(resource);
 			else isStartupParsed = true;
 			
-			IPrsStream parseStream = currentParseStream;
-			boolean mustRecolor = isColorerQueued && editor != null && parseStream != null;
-			isColorerQueued = false;
+			parseStream = currentParseStream;
 			
 			parseLock.unlock();
-			if (mustRecolor) forceRecolor(parseStream);
 		}
 		
+		// TODO: is coloring, then error marking best?
+		
+		if (!monitor.isCanceled() && parseStream != null && editor != null)
+			forceRecolor(parseStream);
+		
+		// TODO: really realyl make sure error marking is not applied when a new parse is started
+		errorReportingLock.lock(); // ensure only 1 thread reports errors at a time
+		try {
+			if (!monitor.isCanceled()) 
+				errorHandler.commitChanges();
+		} finally {
+			errorReportingLock.unlock();
+		}
+		
 		if (!monitor.isCanceled())
-			updateFeedBack();
+			updateFeedBack(errorHandler);
 
-		return currentAst;
+		return monitor.isCanceled() ? null : currentAst;
 	}
 
-	private void reportGenericException(Exception e) {
+	private void reportGenericException(ParseErrorHandler errorHandler, Exception e) {
 		errorHandler.clearErrors();
 		errorHandler.setRecoveryAvailable(false);
 		errorHandler.reportError(parser.getTokenizer(), e);
 	}
 
-	private void updateFeedBack() {
+	private void updateFeedBack(ParseErrorHandler errorHandler) {
 		// HACK: Need to call IModelListener.update manually; the IMP extension point is not implemented?!
 		// TODO: use UniversalEditor.addModelListener() instead?
 		//       must attach to an editor and remember to which ones we already attached
@@ -283,9 +284,11 @@
 		} catch (BadDescriptorException e) {
 			Environment.logException("Unexpected error during analysis", e);
 			errorHandler.reportError(parser.getTokenizer(), e);
+			errorHandler.commitChanges();
 		} catch (RuntimeException e) {
 			Environment.logException("Unexpected exception during analysis", e);
 			errorHandler.reportError(parser.getTokenizer(), e);
+			errorHandler.commitChanges();
 		}
 	}
 	
@@ -313,35 +316,34 @@
 	 * syntax highlighting.
 	 */
 	public Iterator<IToken> getTokenIterator(IRegion region) {
-		IPrsStream stream;
-		isColorerQueued = true;
-		parseLock.lock();
-		try {
+		// Threading concerns:
+		// - the colorer runs in the main thread and should not be blocked by an lock
+		// - a parser thread with a parse lock may need main thread acess to report locks
+		
+		IPrsStream stream = currentParseStream;
+		if (currentParseStream == null && !isStartupParsed)
 			stream = getIPrsStream();
-		} finally {
-			isColorerQueued = false;
-			// System.out.println("COLOR! " + System.currentTimeMillis()); // DEBUG
-			parseLock.unlock();
-		}
 		
-		if (stream == null) {
+		if (stream == null || disallowColorer) {
 			return SGLRTokenIterator.EMPTY;
 		} else if (stream.getTokens().size() == 0 || getCurrentAst() == null) {
 			// Parse hasn't succeeded yet, consider the entire stream as one big token
 			stream.addToken(new SGLRToken(stream, region.getOffset(), stream.getStreamLength() - 1,
 					TokenKind.TK_UNKNOWN.ordinal()));
+		} else {
+			System.out.println("COLOR! " + System.currentTimeMillis()); // DEBUG
 		}
 		
+		disallowColorer = true;
+		
 		return new SGLRTokenIterator(stream, region);
 	}
 
 	private void forceRecolor(IPrsStream parseStream) {
-		// System.out.println("RECOLOR! " + System.currentTimeMillis()); // DEBUG
-		isColorerQueued = true;
 		try {
-			isColorerQueued = false;
-			// System.out.println("RECOLOR GO! " + System.currentTimeMillis()); // DEBUG
+			System.out.println("RECOLOR! " + System.currentTimeMillis()); // DEBUG
 			assert !parseLock.isHeldByCurrentThread() : "Parse lock may not be locked: dead lock risk with colorer queue";
+			disallowColorer = false;
 			editor.getEditor().updateColoring(new Region(0, parseStream.getStreamLength() - 1));
 		} catch (RuntimeException e) {
 			Environment.logException("Could reschedule syntax highlighter", e);
@@ -353,26 +355,29 @@
 	 * if it hasn't been parsed before.
 	 */
 	protected IPrsStream getIPrsStream() {
-		if (currentParseStream != null)
-			return currentParseStream;
-
+		IPrsStream result = currentParseStream;
+		if (result != null)
+			return result;
+	
 		forceInitialParse();
 		return currentParseStream;
 	}
 
 	private void forceInitialParse() {
+		if (isStartupParsed) return;
+		
 		parseLock.lock();
 		try {
-			if (isStartupParsed)
-				return;
-	
+			if (isStartupParsed) return;
+		} finally {
+			parseLock.unlock();
+		}
+		try{
 			parse(getContents(), new NullProgressMonitor());
 		} catch (IOException e) {
 			Environment.logException("Forced parse failed", e);
 		} catch (CoreException e) {
 			Environment.logException("Forced parse failed", e);
-		} finally {
-			parseLock.unlock();
 		}
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-12-02 15:55:04 UTC (rev 20336)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-12-02 20:14:42 UTC (rev 20337)
@@ -79,6 +79,7 @@
 				|| targetFile.getLocalTimeStamp() > lastChanged) {
 			enabled = false;
 			selection = null;
+			editor.removeModelListener(this);
 			return false;
 		} else {
 			return true;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-02 15:55:04 UTC (rev 20336)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-02 20:14:42 UTC (rev 20337)
@@ -61,7 +61,7 @@
  */
 public class StrategoObserver implements IModelListener {
 	
-	private static final long OBSERVER_DELAY = 500;
+	private static final long OBSERVER_DELAY = 1000;
 	
 	private final Descriptor descriptor;
 	



From L.C.L.Kats at tudelft.nl  Thu Dec  3 17:22:16 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 03 Dec 2009 16:22:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20338 - LennartKats -
	in strategoxt/trunk/strc-core: lib/stratego/strc/front tests/test1
Message-ID: <200912031622.nB3GMGTu017187@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-03 16:22:16 +0000 (Thu, 03 Dec 2009)
New Revision: 20338

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20338&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
   strategoxt/trunk/strc-core/tests/test1/test112.str
   strategoxt/trunk/strc-core/tests/test1/test113.str

Log:
- Sander found some more cases where tabs don't mix with string interpolation; fixed 'em
- Allow integers and reals in string anti-quotations

Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-12-02 20:14:42 UTC (rev 20337)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-12-03 16:22:16 UTC (rev 20338)
@@ -36,8 +36,7 @@
       // Unpadd the initial string
     ; [QStr(
          string-as-chars(
-           ![<id>]
-         ; remove-padding(|<padding-length> initial, <padding-length> initial) => ([<id>], _)
+           remove-padding-single-line(|<padding-length> initial)
          )
        )
       | id
@@ -123,6 +122,11 @@
   <+
     []
   ; !([], max)
+  
+  remove-padding-single-line(|n):
+    s -> s'
+    with
+      ([s'], _) := <remove-padding(|n, n)> [s]
 
   internal split-at-newlines =
     at-suffix(
@@ -141,17 +145,25 @@
       <!t
        ; (   concat-strings(|)
           <+ is-string(|)
-          <+ { x, y: ?x; prim("SSL_stacktrace_get_all_frame_names",|); ?[ _ | y]; !y; report-failure(|~str:message {^[]}, x) }
+          <+ int-to-string(|)
+          <+ real-to-string(|)
+          <+ { x, y :
+               ?x
+               ; prim("SSL_stacktrace_get_all_frame_names",|); ?[ _ | y]
+               ; !y
+               ; report-failure(|~str:message {^[]}, x)
+             }
          )
-       ; string-replace(|"\n", t_padded)>
+       ; string-replace(|"\n", ~str:s_padded {^[]})>
     ]|
     with
-      t_padded := Anno(Str(<string-as-chars(!['\n' | <drop(!n)>])> s), Op("Nil", []))
+      s_padded := <string-as-chars(!['\n' | <remove-padding-single-line(|n)>])> s
     ; x := <new>
     ; y := <new>
     ; (  message := <conc-strings> ("Internal error: escaped term in string quotation is not a string in ", <WithContext>)
       <+ message := "Internal error: escaped term in string quotation is not a string"
       )
+    
 
   DesugarQuoted :
     StringEscape2(s, t) -> StringEscape1(s, t)

Modified: strategoxt/trunk/strc-core/tests/test1/test112.str
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/test112.str	2009-12-02 20:14:42 UTC (rev 20337)
+++ strategoxt/trunk/strc-core/tests/test1/test112.str	2009-12-03 16:22:16 UTC (rev 20338)
@@ -59,4 +59,7 @@
    2$ z$>$";
 
     !${ block {"{"} foo $}$  }; show(|11) =>
-"block { foo }"
+"block { foo }";
+
+    !$[ 1[2]3 ]; show(|12) => "123"
+

Modified: strategoxt/trunk/strc-core/tests/test1/test113.str
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/test113.str	2009-12-02 20:14:42 UTC (rev 20337)
+++ strategoxt/trunk/strc-core/tests/test1/test113.str	2009-12-03 16:22:16 UTC (rev 20338)
@@ -37,4 +37,35 @@
 "Sometimes, I even like spaces with my tabs.
   Makes people angry and confused sometimes.
   Again, Sorry! Shame on me. Sorry!
-Sorry! Sorry!"
+Sorry! Sorry!";
+	n := $[	1
+		2 ];
+	!$[
+		tabs go here
+			0
+			[n]
+	]; show(|4) =>
+"
+	tabs go here
+		0
+		1
+		2
+";
+	!$[	tabs go here
+			0
+			[n]
+	]; show(|5) =>
+"tabs go here
+	0
+	1
+	2
+";
+	!$[ tabs go here
+			0
+			[n]
+	]; show(|6) =>
+"tabs go here
+	0
+	1
+	2
+"



From L.C.L.Kats at tudelft.nl  Fri Dec  4 17:15:12 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 04 Dec 2009 16:15:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20339 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/strc
Message-ID: <200912041615.nB4GFCCx025414@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-04 16:15:12 +0000 (Fri, 04 Dec 2009)
New Revision: 20339

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20339&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str

Log:


Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-03 16:22:16 UTC (rev 20338)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-04 16:15:12 UTC (rev 20339)
@@ -66,9 +66,11 @@
           ; write-to
           ; copy-to(strc-getoutfile(!".rtree") => file1)
           ; log(|Info(), ["Abstract syntax in '", file1, "'"])
-          ; xtc-io-transform(pp-stratego-string)
-          ; copy-to(strc-getoutfile(!".str") => file2)
-          ; log(|Info(), ["Concrete syntax in '", file2, "'"])
+          ; if not(<get-config> "--no-concrete-syntax-externals") then
+              xtc-io-transform(pp-stratego-string)
+            ; copy-to(strc-getoutfile(!".str") => file2)
+            ; log(|Info(), ["Concrete syntax in '", file2, "'"])
+            end
         | "Export of externals succeeded"
         , 1
         )



From L.C.L.Kats at tudelft.nl  Fri Dec  4 17:18:32 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 04 Dec 2009 16:18:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20340 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/front
Message-ID: <200912041618.nB4GIWDL025446@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-04 16:18:32 +0000 (Fri, 04 Dec 2009)
New Revision: 20340

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20340&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str

Log:
Avoid the internal keyword for now.

Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-12-04 16:15:12 UTC (rev 20339)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-12-04 16:18:32 UTC (rev 20340)
@@ -51,12 +51,12 @@
   ; try(at-last([QStr(string-as-chars(rtrim(' ' + '\t')))]))
   ; map(try(DesugarQStr))
   
-  internal get-padding-chars =
+  get-padding-chars =
     [' ' + '\t' | get-padding-chars]
   <+
     ![]
   
-  internal padding-length =
+  padding-length =
     string-replace(|"\t", "    "); string-length
   
   /**
@@ -128,7 +128,7 @@
     with
       ([s'], _) := <remove-padding(|n, n)> [s]
 
-  internal split-at-newlines =
+  split-at-newlines =
     at-suffix(
        (['\n'       | tl] -> [])
     <+ (['\r', '\n' | tl] -> [])



From m.dejonge at tudelft.nl  Fri Dec  4 20:44:38 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 04 Dec 2009 19:44:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20341 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: .
	CriticalScenarios CriticalScenarios/CurrentRegion History
	History/Languages_23_11_2009 History/Languages_23_11_2009/Details
	History/Languages_4_12_2009
	History/Languages_4_12_2009/Details Input/Scope
	Input/SpoofaxExamples src src/scenariotests src/testrun src/tests
Message-ID: <200912041944.nB4Jici1027913@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-04 19:44:33 +0000 (Fri, 04 Dec 2009)
New Revision: 20341

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20341&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_BraceLess.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_Double.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_EndOnly.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/SimpleLine.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_EXACT_multipleErrors2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_EXACT_sloppyCode.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_TOO_SMALL_testB6.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_bad-performance-stratego-sugar.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_currentLineError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_doubleClosed_If.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_flawedDeclaration.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_flawedImport.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_foo.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_methodOutsideClass.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_previousLineError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break1.str_java.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break1.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break14.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break20.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break21.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break24.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break27.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break28.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break4.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break6.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break7.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break1.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break13.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break20.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break21.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break24.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break28.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break6.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break7.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break0.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break12.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break14.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break2.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break20.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break21.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break24.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break26.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break28.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break4.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break6.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break7.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testA1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testA3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testA4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testA5.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testA6.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testB1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testB3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testB4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testB5.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testC1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testC4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testE1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testE2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testF2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testF3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testFile.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testG3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testH1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testH2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testH3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testH4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testI1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testI2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testI3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testI4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testI5.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testI6.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testJ1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testJ2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testK2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_testK3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_unclosedBlockComment.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_unclosedString.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_with1.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_with2.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/MERGED_REGION_erroneous.app.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/MERGED_REGION_testBridgeFG.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/MIS_DIAGNOSED_test-java-traits.2.break23.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/MIS_DIAGNOSED_test-java-traits.3.break23.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_EXACT_twoSeparatedErrors.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_flawed_IfBlock.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_morePartsStructureError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_multipleErrors.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_priorSiblingError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.2.break16.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.2.break17.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.2.break19.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.2.break26.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.2.break3.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.2.break34.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.2.break35.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.2.break9.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break12.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break16.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break17.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break19.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break2.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break26.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break27.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break3.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break34.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break35.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break4.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.3.break9.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.break1.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.break16.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.break17.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.break25.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.break3.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.break34.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_test-java-traits.break9.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testC2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testD1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testD2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testD3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testD4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testE3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testF1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testFile.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testFile2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testG1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_testG2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_unclosedMethod.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/NEAR_EXACT_unclosed_If.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_line-before-comment.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.2.break10.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.2.break11.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.2.break15.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.2.break18.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.2.break30.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.2.break31.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.2.break32.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.2.break5.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.2.break8.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break10.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break14.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break15.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break18.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break22.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break30.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break31.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break32.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break33.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break5.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.3.break8.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break10.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break11.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break13.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break15.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break18.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break23.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break29.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break30.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break31.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break32.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break35.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break5.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_test-java-traits.break8.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_testB2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_testC3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_testL1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_testL2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/RECOVERY_FAILED_unclosedClassBody.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_javafragment.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.2.break13.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.2.break2.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.2.break22.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.2.break25.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.2.break33.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.3.break11.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.3.break25.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.break19.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.break22.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_test-java-traits.break27.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_BIG_testK1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_SMALL_flawedMethodHeader.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_SMALL_test-java-traits.2.break12.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_SMALL_test-java-traits.2.break29.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_SMALL_test-java-traits.3.break29.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/TOO_SMALL_testA2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/WebDSL.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_EXACT_multipleErrors2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_EXACT_sloppyCode.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_NEAR_EXACT_testB6.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_bad-performance-stratego-sugar.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_currentLineError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_doubleClosed_If.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_flawedDeclaration.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_flawedImport.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_methodOutsideClass.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_previousLineError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break1.str_java.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break1.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break14.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break20.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break21.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break23.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break24.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break27.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break28.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break32.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break4.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break6.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.2.break7.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.3.break1.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.3.break13.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.3.break20.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.3.break21.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.3.break23.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.3.break24.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.3.break28.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.3.break6.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.3.break7.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break12.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break14.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break2.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break20.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break21.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break24.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break26.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break28.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break32.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break4.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break6.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_test-java-traits.break7.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testA1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testA3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testA4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testA5.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testB1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testB3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testB4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testB5.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testC1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testC4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testE1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testE2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testF2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testF3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testFile.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testG3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testH1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testH2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testH3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testH4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testI1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testI2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testI3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testI4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testI5.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testI6.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testJ1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testJ2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testK2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testK3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_testL1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_unclosedBlockComment.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_unclosedString.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_with1.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/EXACT_with2.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/MERGED_REGION_erroneous.app.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/MERGED_REGION_testBridgeFG.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/MIS_DIAGNOSED_test-java-traits.break0.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_EXACT_twoSeparatedErrors.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_flawed_IfBlock.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_morePartsStructureError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_multipleErrors.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_priorSiblingError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break10.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break11.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break13.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break15.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break16.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break17.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break19.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break3.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break34.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break35.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.2.break9.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break12.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break16.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break17.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break19.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break2.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break27.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break3.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break34.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break35.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break4.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.3.break9.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break1.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break10.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break11.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break13.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break15.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break16.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break17.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break23.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break25.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break27.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break3.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break34.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_test-java-traits.break9.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testA6.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testC2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testD1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testD2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testD3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testD4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testE3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testF1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testFile.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testFile2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testG1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_testG2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_unclosedMethod.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NEAR_EXACT_unclosed_If.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/NO_SYNTAX_ERRORS_foo.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.2.break18.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.2.break30.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.2.break31.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.2.break5.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.2.break8.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break10.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break14.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break15.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break18.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break22.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break30.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break31.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break32.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break33.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break5.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.3.break8.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.break18.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.break29.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.break30.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.break31.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.break35.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.break5.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_test-java-traits.break8.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_testB2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_testC3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_testL2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/RECOVERY_FAILED_unclosedClassBody.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_javafragment.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_line-before-comment.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_test-java-traits.2.break2.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_test-java-traits.2.break22.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_test-java-traits.2.break25.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_test-java-traits.2.break33.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_test-java-traits.3.break11.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_test-java-traits.3.break25.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_test-java-traits.3.break26.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_test-java-traits.break19.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_test-java-traits.break22.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_BIG_testK1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_SMALL_flawedMethodHeader.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_SMALL_test-java-traits.2.break12.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_SMALL_test-java-traits.2.break26.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_SMALL_test-java-traits.2.break29.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_SMALL_test-java-traits.3.break29.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/TOO_SMALL_testA2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/WebDSL.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/wrongDiagnosedFiles.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/CriticalScenarios_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/CriticalScenarios_Stratego.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluationRuns.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java

Log:
previous region selection, improved and tested

Changes (first 1000 lines of the diffs):

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-12-04 16:18:32 UTC (rev 20340)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-12-04 19:44:33 UTC (rev 20341)
@@ -3,7 +3,7 @@
 	<classpathentry excluding="evaluationData/" kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/RecoveryLogging"/>
+	<classpathentry exported="true" kind="src" path="/RecoveryLogging"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.aterm"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr [spoofax-recovery branch]"/>
 	<classpathentry kind="src" path="/strc-java"/>

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing.java	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,31 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment()//@START
+  {
+      if(true){
+         int corrLine1;}
+         if(true)
+             return 5;
+         }
+      }
+  } //@END    
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  } 
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_BraceLess.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_BraceLess.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_BraceLess.java	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,31 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true)) //@START @CR_START
+    	  int //@END @CR_END
+      corrLine3();
+      return 5;
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_Double.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_Double.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_Double.java	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true)) //@START @CR_START
+      {
+    	  int i=1;
+          return 1;  
+      } //@END @CR_END
+      corrLine3();
+      return 5;
+  }          
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_EndOnly.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_EndOnly.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeNotation_EndOnly.java	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,33 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      while(true)){ //@START @CR_START
+          int i;
+          return 1;  
+      } //@END @CR_END
+      corrLine3();
+      return 5;
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/SimpleLine.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/SimpleLine.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/SimpleLine.java	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      errorLine()); //@START @END //@CR_START @CR_END
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_EXACT_multipleErrors2.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_EXACT_multipleErrors2.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_EXACT_multipleErrors2.java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,15 @@
+Filename: Input/Common/multipleErrors2.java
+Evaluations: [EXACT, EXACT]
+Region selection times (ms): [1, 3]
+
+Skipped fragments: 
+
+
+    	  String s = "bla bla bla"//; @START @END
+    	  
+
+
+      else{ //@START
+         corrLine3(); //}     
+      corrLine4( //); //@END
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_EXACT_sloppyCode.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_EXACT_sloppyCode.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_EXACT_sloppyCode.java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,35 @@
+Filename: Input/Common/sloppyCode.java
+Evaluations: [EXACT, EXACT]
+Region selection times (ms): [4, 1, 4, 34]
+
+Skipped fragments: 
+
+
+      while(true) //@START
+      { 
+        bla2(); /* }*/
+      stm(); // @END
+    
+
+
+  private int correctMethod2()
+  
+
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod3()
+  
+
+
+      while(true) //@START
+      { 
+        bla2();
+        stm(); /* }*/ // @END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_TOO_SMALL_testB6.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_TOO_SMALL_testB6.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_TOO_SMALL_testB6.java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,16 @@
+Filename: Input/Scope/testB6.java
+Evaluations: [EXACT, TOO_SMALL]
+Region selection times (ms): [1, 2]
+
+Skipped fragments: 
+
+
+	void m() { //@START
+		int a;
+	}} //@END
+	
+
+
+	void o() { //@START
+		int c;
+	

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_bad-performance-stratego-sugar.str.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_bad-performance-stratego-sugar.str.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_bad-performance-stratego-sugar.str.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,10 @@
+Filename: Input/SpoofaxExamples/bad-performance-stratego-sugar.str
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+  sdf-desugar = //@START
+    <call> ("org.strategoxt.tools.sdf-desugar", [<id>] //@END
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_currentLineError.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_currentLineError.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_currentLineError.java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Common/currentLineError.java
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+    int i); //@START @END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_doubleClosed_If.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_doubleClosed_If.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_doubleClosed_If.java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,11 @@
+Filename: Input/Common/doubleClosed_If.java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+    if(true)/*{*/ //@START
+      i = 5;
+    } //@END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_flawedDeclaration.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_flawedDeclaration.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_flawedDeclaration.java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,10 @@
+Filename: Input/Common/flawedDeclaration.java
+Evaluations: [EXACT]
+Region selection times (ms): [2]
+
+Skipped fragments: 
+
+
+  private int errorDeclaration /*;*/ //@START @END
+
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_flawedImport.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_flawedImport.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_flawedImport.java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Common/flawedImport.java
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+import java.ErrorImport/*;*/ //@START @END
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_foo.str.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_foo.str.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_foo.str.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,38 @@
+Filename: Input/SpoofaxExamples/foo.str
+Evaluations: [EXACT]
+Region selection times (ms): [4]
+
+Skipped fragments: 
+
+
+strategie\ //@START
+
+  main-foo =
+    fatal-err(|"No main strategy")
+        
+  editor-analyze:
+    (ast, path, fullpath) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      try(dr-scope-all-end);
+      dr-scope-all-start;
+      alltd(record-entity)
+    with
+      errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+   
+  include-origin(s):
+    t -> (t, message)
+    where
+      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
+  
+  editor-resolve:
+    (Type(type), position, ast, path, fullpath) -> target
+    where
+      target := <GetEntity> type
+
+  editor-hover:
+    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) //@END
+
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_methodOutsideClass.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_methodOutsideClass.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_methodOutsideClass.java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,12 @@
+Filename: Input/Common/methodOutsideClass.java
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+private int bla() //@START
+{ 
+  bla();
+} //@END
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_previousLineError.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_previousLineError.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_previousLineError.java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Common/previousLineError.java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+    int i = bla(/*);*/ //@START @END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break1.str_java.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break1.str_java.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break1.str_java.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,19 @@
+Filename: Input/Dryad/test-java-traits.2.break1.str_java.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [5]
+
+Skipped fragments: 
+
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")  /* ERROR remove )*/   /* ERROR remove ) */ //@END
+
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break1.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break1.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break1.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,19 @@
+Filename: Input/Dryad/test-java-traits.2.break1.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [5]
+
+Skipped fragments: 
+
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")      /* ERROR remove )*/    /* ERROR remove ) */ //@END
+
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break14.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break14.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break14.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Dryad/test-java-traits.2.break14.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+         abstract class $Trait_Bar { void baz() {} } /* ERROR add */ } /* ERROR */ /* ERROR add */ } /* ERROR */ //@START @END
+         

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break20.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break20.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break20.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,40 @@
+Filename: Input/Dryad/test-java-traits.2.break20.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [5]
+
+Skipped fragments: 
+
+
+  java-trait-tests = where(<set-config/* ERROR remove > */ /* ERROR remove ( */Stage(), 1)); //@START
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	) //@END
+  
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break21.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break21.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break21.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Dryad/test-java-traits.2.break21.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+      <assimilate-java-traits/* ERROR remove > */ "trait Bar /* ERROR remove { */ void bar() {} }"; // write Bar classfile //@START @END
+      

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break24.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break24.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break24.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Dryad/test-java-traits.2.break24.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [2]
+
+Skipped fragments: 
+
+
+        testsuite-section(class-trait-tests  |"Traits from classfiles"/* ERROR remove ) *//* ERROR remove ; */ //@START @END
+        

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break27.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break27.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break27.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Dryad/test-java-traits.2.break27.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+    , output /* ERROR add */ , /* ERROR */ /* ERROR add */ , /* ERROR */ //@START @END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break28.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break28.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break28.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,13 @@
+Filename: Input/Dryad/test-java-traits.2.break28.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+    where/* ERROR remove ( */ //@START
+      /* ERROR remove < */set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    ); //@END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break4.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break4.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break4.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,12 @@
+Filename: Input/Dryad/test-java-traits.2.break4.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+      scoped-set-config/* ERROR remove ( */!Stage(/* ERROR remove ) */, !0, //@START
+        assimilate-java-traits
+      ); //@END
+      
+      

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break6.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break6.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break6.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,40 @@
+Filename: Input/Dryad/test-java-traits.2.break6.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [6]
+
+Skipped fragments: 
+
+
+  java-trait-tests = where(<set-config> (Stage(), 1/* ERROR remove ) *//* ERROR remove ) */; //@START
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	) //@END
+  
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break7.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break7.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.2.break7.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,40 @@
+Filename: Input/Dryad/test-java-traits.2.break7.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [27]
+
+Skipped fragments: 
+
+
+  java-trait-tests = where(<set-config> (Stage(), 1)/* ERROR remove ) *//* ERROR remove ; */ //@START
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	) //@END
+  
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break1.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break1.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break1.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,21 @@
+Filename: Input/Dryad/test-java-traits.3.break1.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [6]
+
+Skipped fragments: 
+
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting"/* ERROR remove ) */
+      /* ERROR remove )*/
+    /* ERROR remove ) */ //@END
+
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break13.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break13.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break13.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,10 @@
+Filename: Input/Dryad/test-java-traits.3.break13.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+         class Foo                 { void baz() {/* ERROR remove } */ /* ERROR remove } */ //@START
+         abstract class $Trait_Bar /* ERROR remove { */ void baz() {} } //@END
+         

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break20.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break20.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break20.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,40 @@
+Filename: Input/Dryad/test-java-traits.3.break20.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [6]
+
+Skipped fragments: 
+
+
+  java-trait-tests = where(<set-config/* ERROR remove > */ /* ERROR remove ( */Stage()/* ERROR remove , */ 1)); //@START
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	) //@END
+  
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break21.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break21.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break21.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Dryad/test-java-traits.3.break21.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+      <assimilate-java-traits/* ERROR remove > */ "trait Bar /* ERROR remove { */ void bar(/* ERROR remove ) */ {} }"; // write Bar classfile //@START @END
+      

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break24.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break24.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break24.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,10 @@
+Filename: Input/Dryad/test-java-traits.3.break24.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [3]
+
+Skipped fragments: 
+
+
+        testsuite-section(trait-output-tests |"Rewrite to classes")/* ERROR remove ; */ //@START
+        testsuite-section(class-trait-tests  |"Traits from classfiles"/* ERROR remove ) *//* ERROR remove ; */ //@END
+        

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break28.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break28.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break28.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,13 @@
+Filename: Input/Dryad/test-java-traits.3.break28.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [2]
+
+Skipped fragments: 
+
+
+    where/* ERROR remove ( */ //@START
+      /* ERROR remove < */set-config> /* ERROR remove ( */Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    ); //@END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break6.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break6.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break6.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,40 @@
+Filename: Input/Dryad/test-java-traits.3.break6.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [6]
+
+Skipped fragments: 
+
+
+  java-trait-tests = where(<set-config> (Stage(/* ERROR remove ) */, 1/* ERROR remove ) *//* ERROR remove ) */; //@START
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	) //@END
+  
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break7.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break7.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.3.break7.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,40 @@
+Filename: Input/Dryad/test-java-traits.3.break7.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [6]
+
+Skipped fragments: 
+
+
+  java-trait-tests = where(<set-config> (Stage(/* ERROR remove ) */, 1)/* ERROR remove ) *//* ERROR remove ; */ //@START
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	) //@END
+  
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break0.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break0.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break0.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,10 @@
+Filename: Input/Dryad/test-java-traits.break0.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+  hi mom /* ERROR */ //@START @END
+  
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break12.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break12.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break12.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Dryad/test-java-traits.break12.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+         class Foo                 /* ERROR remove { */ void bar() {} } //@START @END
+         

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break14.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break14.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/EXACT_test-java-traits.break14.str_java.txt	2009-12-04 19:44:33 UTC (rev 20341)
@@ -0,0 +1,9 @@
+Filename: Input/Dryad/test-java-traits.break14.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+

(7831 diff lines omitted)


From m.dejonge at tudelft.nl  Fri Dec  4 20:51:50 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 04 Dec 2009 19:51:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20342 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912041951.nB4Jpo9u027984@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-04 19:51:50 +0000 (Fri, 04 Dec 2009)
New Revision: 20342

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20342&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj

Log:
previous regions captured

Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-04 19:44:33 UTC (rev 20341)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-04 19:51:50 UTC (rev 20342)
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import org.spoofax.jsglr.FineGrainedRepair;
+//import org.spoofax.jsglr.IStructureSkipper;
 import org.spoofax.jsglr.IStructureSkipper;
 import org.spoofax.jsglr.IndentInfo;
 import org.spoofax.jsglr.Main;
@@ -47,7 +48,7 @@
     pointcut regionTesting(RegionRecovery rs, StructureSkipSuggestion regionTested):
         execution(void RegionRecovery.testRegion(StructureSkipSuggestion)) && target(rs) && args(regionTested);
    
-  
+ // /*
     pointcut prevRegion(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPreviousSkipSuggestions())&& target(rs);
     
     after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prevRegions): prevRegion(rs) {
@@ -70,11 +71,11 @@
   	  }
    }
 
-    
+   // */
     before(String x, String y, SGLR s): parsing(x, y, s) {
         currentFile=new FileLog();
         currentFile.setFileName(x);
-        //System.out.println("KKL"+x);
+        System.out.println("KKL"+x);
     }   
     
     after(RegionRecovery rs, StructureSkipSuggestion region): regionTesting(rs, region) {



From m.dejonge at tudelft.nl  Fri Dec  4 21:23:31 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 04 Dec 2009 20:23:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20343 - MaartjeDeJonge -
	sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests
Message-ID: <200912042023.nB4KNV5d028420@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-04 20:23:31 +0000 (Fri, 04 Dec 2009)
New Revision: 20343

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20343&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java

Log:
current region tests for Java
(do not pass for current current-region-selection, so improvement is needed)

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-04 19:51:50 UTC (rev 20342)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-04 20:23:31 UTC (rev 20343)
@@ -31,33 +31,49 @@
 	private SGLR sglr;
 	protected String directory;
 	
-	protected abstract String getFragmentForComparing(FileLog fileLog); 
+	protected String getFragmentForComparing(FileLog fileLog){ 
+		return getExpectedRegions(fileLog).get(0).trim();
+	} 
 	
 	protected void setParseTable(String parseTable) throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException{
 		initSGLR(parseTable);
 	}
 	
-	protected void assertCorrectPreviousRegion(String fileName)
+	protected void assertRegionCorrectlySelected(String fileName)
 			throws Exception {
-		RecoveryLogging.aspectOf().getFileLog().clear();
-		ArrayList<ErroneousRegion> expectedPrevs=ErroneousRegion.collectExpectedRegions(directoryPath(fileName), START_SIGN, END_SIGN);
-		writeParseTree(directoryPath(fileName));
-		String expectedFragment=expectedPrevs.get(0).getCodeFragment().trim();
-		FileLog fileLog=RecoveryLogging.aspectOf().getFileLog();
+		FileLog fileLog = createFilelog(fileName);
 		String actualFragment=getFragmentForComparing(fileLog);
+		ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.collectExpectedRegions(directoryPath(fileName), START_SIGN, END_SIGN);
+		String expectedFragment=expectedRegions.get(0).getCodeFragment().trim();
 		if (!actualFragment.equals(expectedFragment)) {
 			System.out.println("------- region (expected)");
 			System.out.println(expectedFragment);
 			System.out.println("------- region (actual)");
 			System.out.println(actualFragment);
 		}
-		Assert.assertEquals(expectedPrevs.size(), fileLog.getRegionInfo().size());//same nr of regions
-		Assert.assertEquals(1, fileLog.getRegionInfo().get(0).getPrevRegions().size()); //one prev region
+		Assert.assertEquals(expectedRegions.size(), fileLog.getRegionInfo().size());//same nr of regions
+		Assert.assertEquals(1, getExpectedRegions(fileLog).size()); //one prev region
 		Assert.assertEquals(expectedFragment, actualFragment);
 		Assert.assertEquals(expectedFragment, actualFragment);
 		
 	}
+	
+	protected void assertSize(String fileName, int nrOfSelectedRegions) throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException, SGLRException{
+		FileLog fileLog = createFilelog(fileName);
+		Assert.assertEquals(nrOfSelectedRegions, getExpectedRegions(fileLog).size());
+	}
 
+	private FileLog createFilelog(String fileName)
+			throws FileNotFoundException, IOException,
+			InvalidParseTableException, NoRecoveryRulesException, SGLRException {
+		RecoveryLogging.aspectOf().getFileLog().clear();
+		writeParseTree(directoryPath(fileName));
+		FileLog fileLog=RecoveryLogging.aspectOf().getFileLog();
+		return fileLog;
+	}
+
+	protected abstract ArrayList<String> getExpectedRegions(FileLog fileLog);
+
 	private void writeParseTree(String testFile) throws FileNotFoundException, IOException,
 			InvalidParseTableException, NoRecoveryRulesException, SGLRException {  
 		FileInputStream fis=new FileInputStream(testFile);	

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Java.java	2009-12-04 19:51:50 UTC (rev 20342)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Java.java	2009-12-04 20:23:31 UTC (rev 20343)
@@ -2,6 +2,7 @@
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.util.ArrayList;
 
 import logging.FileLog;
 
@@ -21,13 +22,42 @@
 	}
 	
 	protected String getFragmentForComparing(FileLog fileLog){ 
-		return fileLog.getSkippedFragments().get(0).trim(); //TODO: current
+		return getExpectedRegions(fileLog).get(0).trim();
 	}
 	
 	@Test
-	public void testH3() throws Exception{
-		String fileName="testH3.java";		
-		assertCorrectPreviousRegion(fileName);		
+	public void testSimpleLine() throws Exception{
+		String fileName="SimpleLine.java";		
+		assertRegionCorrectlySelected(fileName);		
 	}
+	
+	@Test
+	public void testScopeNotation_BraceLess() throws Exception{
+		String fileName="ScopeNotation_BraceLess.java";		
+		assertRegionCorrectlySelected(fileName);		
+	}
+	
+	@Test
+	public void testScopeNotation_Double() throws Exception{
+		String fileName="ScopeNotation_Double.java";		
+		assertRegionCorrectlySelected(fileName);		
+	}
+	
+	@Test
+	public void testScopeNotation_EndOnly() throws Exception{
+		String fileName="ScopeNotation_EndOnly.java";		
+		assertRegionCorrectlySelected(fileName);		
+	}
+	
+	@Test
+	public void testScopeErrorOnClosing() throws Exception{
+		String fileName="ScopeError_OnClosing.java";	
+		assertSize(fileName, 0);
+	}
 
+	@Override
+	protected ArrayList<String> getExpectedRegions(FileLog fileLog) {
+		return fileLog.getRegionInfo().get(0).getCurrRegions();
+	}
+
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Stratego.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Stratego.java	2009-12-04 19:51:50 UTC (rev 20342)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Stratego.java	2009-12-04 20:23:31 UTC (rev 20343)
@@ -2,6 +2,7 @@
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.util.ArrayList;
 
 import logging.FileLog;
 
@@ -27,7 +28,12 @@
 	@Test
 	public void testFoo() throws Exception{
 		String fileName="foo.str";		
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 
+	@Override
+	protected ArrayList<String> getExpectedRegions(FileLog fileLog) {
+		return fileLog.getRegionInfo().get(0).getCurrRegions();
+	}
+
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java	2009-12-04 19:51:50 UTC (rev 20342)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java	2009-12-04 20:23:31 UTC (rev 20343)
@@ -1,28 +1,18 @@
 package scenariotests;
 
-import java.io.File;
-import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.ArrayList;
 
 import logging.FileLog;
-import logging.RecoveryLogging;
 
-import org.junit.Assert;
 import org.junit.Test;
 import org.spoofax.jsglr.InvalidParseTableException;
 import org.spoofax.jsglr.NoRecoveryRulesException;
-import org.spoofax.jsglr.ParseTable;
-import org.spoofax.jsglr.ParseTableManager;
-import org.spoofax.jsglr.SGLR;
-import org.spoofax.jsglr.SGLRException;
 
 import testrun.InfraStructure;
 
-import evaluating.ErroneousRegion;
 
-
 public class PreviousRegion_Java extends CriticalScenarios_Base{
 	
 	public PreviousRegion_Java() throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException{
@@ -40,31 +30,36 @@
 	@Test
 	public void testSimpleLine() throws Exception{
 		String fileName="SimpleLine.java";		
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testScopeNotation_BraceLess() throws Exception{
 		String fileName="ScopeNotation_BraceLess.java";
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testScopeNotation_Double() throws Exception{
 		String fileName="ScopeNotation_Double.java";		
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testScopeNotation_EndOnly() throws Exception{
 		String fileName="ScopeNotation_EndOnly.java";		
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testScopeError_OnClosing() throws Exception{
 		String fileName="ScopeError_OnClosing.java";		
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
+	}
+
+	@Override
+	protected ArrayList<String> getExpectedRegions(FileLog fileLog) {
+		return fileLog.getRegionInfo().get(0).getPrevRegions();
 	}	
 
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java	2009-12-04 19:51:50 UTC (rev 20342)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java	2009-12-04 20:23:31 UTC (rev 20343)
@@ -33,74 +33,75 @@
 		START_SIGN = "@BW_START";
 	}
 	
-	protected String getFragmentForComparing(FileLog fileLog){ 
-		return fileLog.getRegionInfo().get(0).getPrevRegions().get(0).trim();
-	}
-	
 	@Test
 	public void testCommaFirstLine() throws Exception{
 		String fileName="Comma_FirstLine.str_java";		
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testCommaSeparator() throws Exception{
 		String fileName="CommaSeparator.str_java";		
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testComma() throws Exception{
 		String fileName="Comma.str_java";		
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testBigRegion() throws Exception{
 		String fileName="BigRegion.str_java";
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testSimpleLine() throws Exception{
 		String fileName="SimpleLine.str";
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testErrorInJava() throws Exception{
 		String fileName="ErrorInJava.str_java";
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testErrorInJava_Comma() throws Exception{
 		String fileName="ErrorInJava_Comma.str_java";
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testMidStratetgy() throws Exception{
 		String fileName="MidStrategy.str_java";
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testFirstStratetgy() throws Exception{
 		String fileName="FirstStrategy.str";
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testLastStratetgy() throws Exception{
 		String fileName="LastStrategy.str_java";
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testBraceStartingPrevLine() throws Exception{
 		String fileName="BraceStartingPrevLine.str";
-		assertCorrectPreviousRegion(fileName);		
+		assertRegionCorrectlySelected(fileName);		
 	}
+
+	@Override
+	protected ArrayList<String> getExpectedRegions(FileLog fileLog) {
+		return fileLog.getRegionInfo().get(0).getPrevRegions();
+	}
 	
 }



From m.dejonge at tudelft.nl  Fri Dec  4 21:30:01 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 04 Dec 2009 20:30:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20344 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/History:
	Languages_23_11_2009 Languages_4_12_2009
Message-ID: <200912042030.nB4KU1Ti028472@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-04 20:30:01 +0000 (Fri, 04 Dec 2009)
New Revision: 20344

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20344&view=rev

Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_23_11_2009/Details/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_4_12_2009/Details/

Log:
remove details

Changes:



From L.C.L.Kats at tudelft.nl  Mon Dec  7 10:27:11 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 07 Dec 2009 09:27:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20345 - LennartKats -
	strc-java/trunk/trans
Message-ID: <200912070927.nB79RB0u024604@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-07 09:27:10 +0000 (Mon, 07 Dec 2009)
New Revision: 20345

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20345&view=rev

Modified:
   strc-java/trunk/trans/java-simplify.str
   strc-java/trunk/trans/s2j.str
   strc-java/trunk/trans/strj-options.str

Log:
Disabled the -Xecj33 compatibility option by default.

Changes:

Modified: strc-java/trunk/trans/java-simplify.str
===================================================================
--- strc-java/trunk/trans/java-simplify.str	2009-12-04 20:30:01 UTC (rev 20344)
+++ strc-java/trunk/trans/java-simplify.str	2009-12-07 09:27:10 UTC (rev 20345)
@@ -14,9 +14,24 @@
 strategies
 
   java-simplify =
-    topdown-consnil(
+    with(
+      try(<get-config> "--stacktrace" => 1 => stacktrace1)
+    ; try(<get-config> "--stacktrace" => 0 => stacktrace0)
+    ; try(OldECJCompatibility => oldecj)
+    )
+  ; topdown-consnil(
       try(Block(flatten-list))
     ; repeat(java-simplify-stm + java-simplify-expr)
+    ; if !stacktrace1 then
+        try(java-simplify-stm-trace-always)
+      else
+        if !stacktrace0 then
+          try(java-simplify-stm-trace-never)
+        end
+      end
+    ; if not(!oldecj) then
+        try(java-simplify-ecj-compatibility)
+      end
     )
   
   internal all-consnil(s) =
@@ -47,16 +62,18 @@
     x{a*} -> x{}
     where
       not(!a* => [])
+  
+  java-simplify-ecj-compatibility :
+    bstm* |[ boolean TRUE = true; bstm* ]| -> bstm*
+  
+  java-simplify-ecj-compatibility :
+    bstm |[ if (TRUE) stm ]| -> |[ if (true) stm ]|
     
-  java-simplify-stm :
+  java-simplify-stm-trace-always :
     bstm* |[ if (TRACES_ENABLED) stm bstm* ]| -> bstm* |[ stm bstm* ]|
-    where
-      <get-config> "--stacktrace" => 1
 
-  java-simplify-stm :
+  java-simplify-stm-trace-never :
     bstm* |[ if (TRACES_ENABLED) stm bstm* ]| -> bstm*
-    where
-      <get-config> "--stacktrace" => 0
   
   java-eliminate-stacktrace =
     alltd(

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-12-04 20:30:01 UTC (rev 20344)
+++ strc-java/trunk/trans/s2j.str	2009-12-07 09:27:10 UTC (rev 20345)
@@ -511,7 +511,6 @@
        public IStrategoTerm invoke(Context context, IStrategoTerm term, param*) {
            // As an ECJ 3.3 reachability detection bug workaround,
            // we assign a non-final boolean TRUE to true
-           // TODO: only use boolean TRUE if -Xecj33 is passed
            boolean TRUE = true;
            ITermFactory termFactory = context.getFactory();
            bstm_init*

Modified: strc-java/trunk/trans/strj-options.str
===================================================================
--- strc-java/trunk/trans/strj-options.str	2009-12-04 20:30:01 UTC (rev 20344)
+++ strc-java/trunk/trans/strj-options.str	2009-12-07 09:27:10 UTC (rev 20345)
@@ -19,6 +19,7 @@
   ; <set-config> ("--statistics", 1)
   ; <set-config> ("-O", 2)
   ; <set-config> ("-I", [])
+  ; <set-config> ( "--no-concrete-syntax-externals", 1)
  
   strj-parse-options =
     with(



From L.C.L.Kats at tudelft.nl  Mon Dec  7 10:33:51 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 07 Dec 2009 09:33:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20346 - LennartKats -
	in strc-java/trunk/test: . basic
Message-ID: <200912070933.nB79Xp3K024880@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-07 09:33:51 +0000 (Mon, 07 Dec 2009)
New Revision: 20346

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20346&view=rev

Added:
   strc-java/trunk/test/basic/camelCase_1.str
Modified:
   strc-java/trunk/test/Makefile.am

Log:
Support capitals in the main strategy name.

Changes:

Modified: strc-java/trunk/test/Makefile.am
===================================================================
--- strc-java/trunk/test/Makefile.am	2009-12-07 09:27:10 UTC (rev 20345)
+++ strc-java/trunk/test/Makefile.am	2009-12-07 09:33:51 UTC (rev 20346)
@@ -93,6 +93,9 @@
 %.ctree : %.str
 	../trans/strj -O 0 -la java-front --format-check 0 -F -I ../java/runtime/org/strategoxt/lang/parallel/stratego_parallel -i $< -o $@
 
+basic/camelCase_1.ctree : basic/camelCase_1.str
+	../trans/strj -O 0 -la java-front --format-check 0 -F -I ../java/runtime/org/strategoxt/lang/parallel/stratego_parallel -m camelCase_1 -i $< -o $@
+
 %.str : %.astr
 	aster -i $< -o $@
 

Added: strc-java/trunk/test/basic/camelCase_1.str
===================================================================
--- strc-java/trunk/test/basic/camelCase_1.str	                        (rev 0)
+++ strc-java/trunk/test/basic/camelCase_1.str	2009-12-07 09:33:51 UTC (rev 20346)
@@ -0,0 +1,9 @@
+module camelCase_1
+
+imports
+
+  libstratego-lib
+
+strategies
+
+  camelCase_1 = debug(!"success")



From L.C.L.Kats at tudelft.nl  Mon Dec  7 11:04:20 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 07 Dec 2009 10:04:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20347 - LennartKats -
	strc-java/trunk/trans
Message-ID: <200912071004.nB7A4KBk025585@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-07 10:04:20 +0000 (Mon, 07 Dec 2009)
New Revision: 20347

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20347&view=rev

Modified:
   strc-java/trunk/trans/s2j.str

Log:
Actually committed the capitals in main strategies fix.

Changes:

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-12-07 09:33:51 UTC (rev 20346)
+++ strc-java/trunk/trans/s2j.str	2009-12-07 10:04:20 UTC (rev 20347)
@@ -285,7 +285,7 @@
     with
       x_name := <MainClassName>
     ; main   := <get-config <+ !"main"> "-m"
-    ; x_main := <conc-strings> (<jify> main, "_0_0")
+    ; x_main := <conc-strings> (<jify; dollars-for-capitals> main, "_0_0")
   
   // TODO: do interop strategy additions in a fully on-demand fashion?
   //       (need to adapt VarScope class to do so)



From L.C.L.Kats at tudelft.nl  Mon Dec  7 11:04:28 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 07 Dec 2009 10:04:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20348 - LennartKats -
	strc-java/trunk/trans
Message-ID: <200912071004.nB7A4S4S025588@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-07 10:04:28 +0000 (Mon, 07 Dec 2009)
New Revision: 20348

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20348&view=rev

Modified:
   strc-java/trunk/trans/strj.str

Log:
Disabled library signature generation for now.

Changes:

Modified: strc-java/trunk/trans/strj.str
===================================================================
--- strc-java/trunk/trans/strj.str	2009-12-07 10:04:20 UTC (rev 20347)
+++ strc-java/trunk/trans/strj.str	2009-12-07 10:04:28 UTC (rev 20348)
@@ -49,11 +49,10 @@
     end
   ; try(mark-always-needed(|<get-config> "-m", 0, 0))
   ; strc-optimize
-  ; strc-export-external-defs
+    // TODO: strc-export-external-defs
   ; strc-output-frontend
   ; s2j
   ; with(clean-output-dir)
-    // TODO: output .rtree file for libraries?
   ; log-timed(list-loop(output-java) | "Pretty printing succeeded", 1)
   
   clean-output-dir =



From m.dejonge at tudelft.nl  Mon Dec  7 11:18:44 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 07 Dec 2009 10:18:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20349 - MaartjeDeJonge -
	sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion
Message-ID: <200912071018.nB7AIikT025716@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-07 10:18:44 +0000 (Mon, 07 Dec 2009)
New Revision: 20349

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20349&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing2.java

Log:
java-current

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing2.java	2009-12-07 10:18:44 UTC (rev 20349)
@@ -0,0 +1,28 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment()
+  {
+      if(true)//@START
+    	  return 5;}}
+      }//@END  
+  }   
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  } 
+
+}
+



From R.B.Vermaas at tudelft.nl  Mon Dec  7 15:35:54 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 07 Dec 2009 14:35:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20350 - rob - hydra/jobs
Message-ID: <200912071435.nB7EZsBL029651@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-12-07 14:35:54 +0000 (Mon, 07 Dec 2009)
New Revision: 20350

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20350&view=rev

Modified:
   hydra/jobs/aspectj-front.nix

Log:


Changes:

Modified: hydra/jobs/aspectj-front.nix
===================================================================
--- hydra/jobs/aspectj-front.nix	2009-12-07 10:18:44 UTC (rev 20349)
+++ hydra/jobs/aspectj-front.nix	2009-12-07 14:35:54 UTC (rev 20350)
@@ -3,7 +3,6 @@
 , hydraConfig ? ../. 
 , baselineNix ? ../baseline.nix
 , aspectjFrontCheckout ? { outPath = ../../dryad ; rev = 1234 ; }
-, javaFront ? (import ./java-front.nix {}).build {}
 } :
 
 let
@@ -13,7 +12,6 @@
       inputs = { 
         inherit officialRelease ; 
         inherit aspectjFrontCheckout ;
-        inherit javaFront ;
         inherit hydraConfig ;
         inherit baselineNix ;
         inherit nixpkgs; 



From m.dejonge at tudelft.nl  Mon Dec  7 17:29:18 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 07 Dec 2009 16:29:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20351 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios CriticalScenarios/CurrentRegion
	CriticalScenarios/ParentRegion
	CriticalScenarios/PreviousRegion History History/Languages
	History/Languages/Details src/scenariotests
Message-ID: <200912071629.nB7GTIhY031289@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-07 16:29:13 +0000 (Mon, 07 Dec 2009)
New Revision: 20351

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20351&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/BigRegion.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/Comma.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ErrorInJava.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnOpening.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava_Comma.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ParentWronglyClosed.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnOpening.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_EXACT_multipleErrors2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_EXACT_sloppyCode.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_NEAR_EXACT_testB6.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_bad-performance-stratego-sugar.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_currentLineError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_doubleClosed_If.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedDeclaration.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedImport.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedMethodHeader.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawed_IfBlock.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_methodOutsideClass.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_previousLineError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break1.str_java.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break1.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break14.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break20.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break23.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break24.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break27.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break28.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break3.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break32.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break33.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break4.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break6.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break7.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break1.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break13.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break16.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break20.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break23.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break24.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break28.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break3.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break6.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.3.break7.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break12.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break14.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break16.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break17.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break2.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break20.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break24.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break26.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break28.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break3.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break32.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break4.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break6.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break7.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.break9.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testA1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testA3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testA4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testA5.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testB1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testB3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testB4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testB5.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testC1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testC4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testE1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testE2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testF2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testF3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testFile.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testG3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testH1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testH2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testH3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testH4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testI1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testI2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testI3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testI4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testI5.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testI6.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testJ1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testJ2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testK2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testK3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_testL1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_unclosedBlockComment.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_unclosedString.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_with1.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_with2.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/MERGED_REGION_erroneous.app.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/MERGED_REGION_testBridgeFG.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/MIS_DIAGNOSED_test-java-traits.break0.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_EXACT_twoSeparatedErrors.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_morePartsStructureError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_multipleErrors.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_priorSiblingError.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break10.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break11.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break13.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break15.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break16.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break17.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break19.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break21.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break34.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break35.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.2.break9.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break12.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break17.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break19.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break2.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break21.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break27.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break34.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break35.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break4.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.3.break9.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break1.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break10.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break11.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break13.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break15.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break21.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break23.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break25.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break27.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_test-java-traits.break34.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testA6.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testC2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testD1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testD2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testD3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testD4.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testE3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testF1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testFile.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testFile2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testG1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_testG2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_unclosedMethod.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NEAR_EXACT_unclosed_If.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/NO_SYNTAX_ERRORS_foo.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.2.break18.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.2.break30.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.2.break31.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.2.break5.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.2.break8.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break10.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break14.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break15.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break18.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break22.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break30.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break31.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break32.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break33.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break5.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.3.break8.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.break18.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.break29.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.break30.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.break31.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.break35.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.break5.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_test-java-traits.break8.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_testB2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_testC3.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_testL2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/RECOVERY_FAILED_unclosedClassBody.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_javafragment.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_line-before-comment.str.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_test-java-traits.2.break2.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_test-java-traits.2.break22.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_test-java-traits.2.break25.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_test-java-traits.3.break11.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_test-java-traits.3.break25.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_test-java-traits.3.break26.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_test-java-traits.break19.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_test-java-traits.break22.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_BIG_testK1.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_SMALL_test-java-traits.2.break12.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_SMALL_test-java-traits.2.break26.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_SMALL_test-java-traits.2.break29.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_SMALL_test-java-traits.3.break29.str_java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/TOO_SMALL_testA2.java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/WebDSL.txt
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/wrongDiagnosedFiles.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava_Comma.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java

Log:
current-region-improved recovery

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/BigRegion.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/BigRegion.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/BigRegion.str	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,71 @@
+module foo
+
+imports
+  libstratego-lib
+  foo
+
+
+strategie\ //@START //@CR_START
+
+  main-foo =
+    fatal-err(|"No main strategy")
+        
+  editor-analyze:
+    (ast, path, fullpath) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      try(dr-scope-all-end);
+      dr-scope-all-start;
+      alltd(record-entity)
+    with
+      errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+   
+  include-origin(s):
+    t -> (t, message)
+    where
+      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
+  
+  editor-resolve:
+    (Type(type), position, ast, path, fullpath) -> target
+    where
+      target := <GetEntity> type
+
+  editor-hover:
+    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) //@END //@CR_END
+
+rules
+
+  record-entity:
+    Entity(x_declaration, body) -> Entity(x_declaration, body)
+    with
+      x_reference := x_declaration;
+      rules(
+        GetEntity: x_reference -> x_declaration
+      )
+    
+  constraint-error:
+    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
+    where
+      not(!type => "String");
+      not(!type => "Int");
+      not(<GetEntity> type)
+  
+  constraint-warning:
+    Entity(x, _) -> "Entity names must start with a capital"
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  constraint-note:
+    Module("example", _) -> "This is just an example program in the \"entities\" language"
+
+signature constructors
+
+  // These definitions are not strictly necessary,
+  // but they ensure that the build doesn't break if the syntax
+  // is changed and these constructors no longer exist
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/Comma.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/Comma.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/Comma.str_java	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+    ); 
+    test-traits(@#)) //@START @CR_START 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+    ) //@END @CR_END
+  
+    trait-output-tests = where(<set-config> (Stage(), 4));
+      test-traits(
+        !"class Foo with Bar {} trait Bar { void bar() {} }"
+      , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ErrorInJava.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ErrorInJava.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ErrorInJava.str_java	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }}} @START @END  @CR_START @CR_END 
+         abstract class $Trait_Bar { void bar() {} }
+	   ]| 
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnOpening.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnOpening.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnOpening.java	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true) //@START @CR_START
+      { $ m j i )%
+    	  int i=1;
+          return 1;  
+      } //@END @CR_END
+      corrLine3();
+      return 5;
+  }          
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava.str_java	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar( //) {} } @START @END @BW_START @BW_END
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava_Comma.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava_Comma.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava_Comma.str_java	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ //@BW_START
+         class Foo                 { void bar() {} //} @START @END  
+         abstract class $Trait_Bar { void bar() {} }
+	   ]| //@BW_END
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ParentWronglyClosed.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ParentWronglyClosed.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ParentWronglyClosed.java	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,31 @@
+/* Misinterpreted statements - if  Extra brace resulting in methods outside of class*/
+class C {
+	void m() {
+		int a;
+		if (true) {
+			int b;
+		}
+	}
+} //@START @END
+	void n() {
+		int a;
+		if (true) {
+			int b;
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		int c;
+	}
+	void o() {
+		int a;
+		if (true) {
+			int b;
+		}
+		if (true) {
+			int c;
+		}
+		int d;
+	}
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava.str_java	2009-12-07 14:35:54 UTC (rev 20350)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava.str_java	2009-12-07 16:29:13 UTC (rev 20351)
@@ -57,6 +57,7 @@
     test-traits(
       !"class Foo with Bar {} trait Bar { void bar() {} }"
     , !compilation-unit |[ 
+         abstract class $Trait_Bar { void bar() {} }
          class Foo                 { void bar( //) {} } @START @END @BW_START @BW_END
          abstract class $Trait_Bar { void bar() {} }
 	   ]|

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava_Comma.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava_Comma.str_java	2009-12-07 14:35:54 UTC (rev 20350)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava_Comma.str_java	2009-12-07 16:29:13 UTC (rev 20351)
@@ -57,6 +57,7 @@
     test-traits(
       !"class Foo with Bar {} trait Bar { void bar() {} }"
     , !compilation-unit |[ //@BW_START
+         class Foo                 { void bar() {} }
          class Foo                 { void bar() {} //} @START @END  
          abstract class $Trait_Bar { void bar() {} }
 	   ]| //@BW_END

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnOpening.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnOpening.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnOpening.java	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true //@START @BW_START @BW_END
+      {
+    	  int i=1;
+          return 1;  
+      } //@END 
+      corrLine3();
+      return 5;
+  }          
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_EXACT_multipleErrors2.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_EXACT_multipleErrors2.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_EXACT_multipleErrors2.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,15 @@
+Filename: Input/Common/multipleErrors2.java
+Evaluations: [EXACT, EXACT]
+Region selection times (ms): [1, 7]
+
+Skipped fragments: 
+
+
+    	  String s = "bla bla bla"//; @START @END
+    	  
+
+
+      else{ //@START
+         corrLine3(); //}     
+      corrLine4( //); //@END
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_EXACT_sloppyCode.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_EXACT_sloppyCode.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_EXACT_sloppyCode.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,46 @@
+Filename: Input/Common/sloppyCode.java
+Evaluations: [EXACT, EXACT]
+Region selection times (ms): [3, 3, 28]
+
+Skipped fragments: 
+
+
+      while(true) //@START
+      { 
+        bla2(); /* }*/
+      stm(); // @END
+    
+
+
+  private int ErrorMissingClosing()
+  { 
+    if(bla1())
+    { 
+      bla();
+      while(true) //@START
+      { 
+        bla2();
+        stm(); /* }*/ // @END
+    }
+    int i;
+    int j;
+    bla3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod3()
+  
+
+
+      while(true) //@START
+      { 
+        bla2();
+        stm(); /* }*/ // @END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_NEAR_EXACT_testB6.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_NEAR_EXACT_testB6.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_NEAR_EXACT_testB6.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,20 @@
+Filename: Input/Scope/testB6.java
+Evaluations: [EXACT, NEAR_EXACT]
+Region selection times (ms): [5, 2]
+
+Skipped fragments: 
+
+
+	void m() { //@START
+		int a;
+	}} //@END
+	
+
+
+	void o() { //@START
+		int c;
+	/*}*/ //@END
+	void p() {
+		int d;
+	}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_bad-performance-stratego-sugar.str.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_bad-performance-stratego-sugar.str.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_bad-performance-stratego-sugar.str.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,10 @@
+Filename: Input/SpoofaxExamples/bad-performance-stratego-sugar.str
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+  sdf-desugar = //@START
+    <call> ("org.strategoxt.tools.sdf-desugar", [<id>] //@END
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_currentLineError.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_currentLineError.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_currentLineError.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,9 @@
+Filename: Input/Common/currentLineError.java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+    int i); //@START @END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_doubleClosed_If.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_doubleClosed_If.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_doubleClosed_If.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,11 @@
+Filename: Input/Common/doubleClosed_If.java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+    if(true)/*{*/ //@START
+      i = 5;
+    } //@END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedDeclaration.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedDeclaration.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedDeclaration.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,10 @@
+Filename: Input/Common/flawedDeclaration.java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+  private int errorDeclaration /*;*/ //@START @END
+
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedImport.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedImport.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedImport.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,9 @@
+Filename: Input/Common/flawedImport.java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+import java.ErrorImport/*;*/ //@START @END
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedMethodHeader.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedMethodHeader.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawedMethodHeader.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,14 @@
+Filename: Input/Common/flawedMethodHeader.java
+Evaluations: [EXACT]
+Region selection times (ms): [1]
+
+Skipped fragments: 
+
+
+  private int Fragment()) //@START
+  { 
+    int i = 1;
+    int i;
+  } //@END
+
+  

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawed_IfBlock.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawed_IfBlock.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_flawed_IfBlock.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,10 @@
+Filename: Input/Common/flawed_IfBlock.java
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+    if(bla())){ //@START
+        i = 0; //@END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_methodOutsideClass.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_methodOutsideClass.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_methodOutsideClass.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,12 @@
+Filename: Input/Common/methodOutsideClass.java
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+private int bla() //@START
+{ 
+  bla();
+} //@END
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_previousLineError.java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_previousLineError.java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_previousLineError.java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,9 @@
+Filename: Input/Common/previousLineError.java
+Evaluations: [EXACT]
+Region selection times (ms): [0]
+
+Skipped fragments: 
+
+
+    int i = bla(/*);*/ //@START @END
+    

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break1.str_java.str_java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break1.str_java.str_java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Details/EXACT_test-java-traits.2.break1.str_java.str_java.txt	2009-12-07 16:29:13 UTC (rev 20351)
@@ -0,0 +1,19 @@
+Filename: Input/Dryad/test-java-traits.2.break1.str_java.str_java
+Evaluations: [EXACT]
+Region selection times (ms): [5]
+
+Skipped fragments: 
+
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")  /* ERROR remove )*/   /* ERROR remove ) */ //@END

(3849 diff lines omitted)


From m.dejonge at tudelft.nl  Mon Dec  7 17:33:44 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 07 Dec 2009 16:33:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20352 - MaartjeDeJonge
	- sglr-recovery/trunk/Evaluation_RegionRecovery/History
Message-ID: <200912071633.nB7GXiQv031332@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-07 16:33:44 +0000 (Mon, 07 Dec 2009)
New Revision: 20352

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20352&view=rev

Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/

Log:


Changes:



From m.dejonge at tudelft.nl  Tue Dec  8 19:13:50 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 08 Dec 2009 18:13:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20353 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios CriticalScenarios/CurrentRegion
	CriticalScenarios/JustTry CriticalScenarios/PreviousRegion
	CriticalScenarios/SeparatorProblems
	CriticalScenarios/ZoomInRegion History
	History/Languages_7-12-2009 History/Languages_8_12_2009
	src/evaluating src/scenariotests
Message-ID: <200912081813.nB8IDoRH021606@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-08 18:13:50 +0000 (Tue, 08 Dec 2009)
New Revision: 20353

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20353&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/LastRegion2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/Comma_FirstLine.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastBWChild.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion_Current.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ZoomInRegion/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ZoomInRegion/ErrorInJava_Comma.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ZoomInRegion/LastStrategy.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_7-12-2009/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_7-12-2009/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_7-12-2009/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_7-12-2009/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_7-12-2009/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_7-12-2009/WebDSL.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_8_12_2009/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_8_12_2009/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_8_12_2009/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_8_12_2009/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_8_12_2009/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_8_12_2009/WebDSL.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Separator_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/BraceStartingPrevLine_SemiColumn.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/CommaAndSemiColumn.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeperatorMustBeSkipped/
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BigRegion.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnOpening.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CurrentRegion_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java

Log:
separator problem implemented and tested

Changes (first 1000 lines of the diffs):

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing.java	2009-12-07 16:33:44 UTC (rev 20352)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/CurrentRegion/ScopeError_OnClosing.java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -10,15 +10,15 @@
      return corrInt;
   }
 
-  private int ErrorFragment()//@START
+  private int ErrorFragment()
   {
       if(true){
-         int corrLine1;}
+         int corrLine1;}//@START
          if(true)
              return 5;
-         }
+         }  //@END   
       }
-  } //@END    
+  } 
   
   private int correctMethod2(){
       corr2();

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/LastRegion2.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/LastRegion2.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/LastRegion2.str_java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+    /*@SEP_START*/ ); 
+    test-traits( //@START 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+      ]|
+    )) //@END @SEP_END
+  
+    trait-output-tests = where(<set-config> (Stage(), 4));
+      test-traits(
+        !"class Foo with Bar {} trait Bar { void bar() {} }"
+      , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BigRegion.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BigRegion.str_java	2009-12-07 16:33:44 UTC (rev 20352)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BigRegion.str_java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -75,7 +75,7 @@
          abstract class $Trait_Bar { void baz() {} }
          abstract class $Trait_Baz { void baz() {} }
 	   ]|
-	); //@START
+	/*@START*/); 
     test-traits( 
       !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
     , !compilation-unit |[ 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java	2009-12-07 16:33:44 UTC (rev 20352)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -10,15 +10,15 @@
      return corrInt;
   }
 
-  private int ErrorFragment()//@START @BW_START
+  private int ErrorFragment()//@BW_START
   {
       if(true){
-         int corrLine1;}
+         int corrLine1;}//@START 
          if(true)
              return 5;
-         }
+         }//@END  
       }
-  } //@END  @BW_END    
+  } //@BW_END    
   
   private int correctMethod2(){
       corr2();

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnOpening.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnOpening.java	2009-12-07 16:33:44 UTC (rev 20352)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnOpening.java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -13,11 +13,11 @@
   private int ErrorFragment(){
       int corrLine1;
       corrLine2();
-      if(true //@START @BW_START @BW_END
+      if(true //@START //@END @BW_START @BW_END
       {
     	  int i=1;
           return 1;  
-      } //@END 
+      } 
       corrLine3();
       return 5;
   }          

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java	2009-12-07 16:33:44 UTC (rev 20352)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -13,10 +13,10 @@
   private int ErrorFragment(){
       int corrLine1;
       corrLine2();
-      while(true){ //@START @BW_START
+      while(true){ // @BW_START
           int i;
-          return 1;}  
-      } //@END @BW_END
+          return 1;}  //@START @END
+      } //@BW_END
       corrLine3();
       return 5;
   }      


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/BraceStartingPrevLine_SemiColumn.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeperatorMustBeSkipped/BraceStartingPrevLine_SemiColumn.str	2009-11-29 11:10:31 UTC (rev 20324)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/BraceStartingPrevLine_SemiColumn.str	2009-12-08 18:13:50 UTC (rev 20353)
@@ -1,70 +0,0 @@
-module foo
-
-imports
-  libstratego-lib
-  foo
-
-strategies 
-
-  main-foo =
-    fatal-err(|"No main strategy")
-        
-  editor-analyze:
-    (ast, path, fullpath) -> (errors, warnings, notes)
-    with
-      // Analysis: scope and record dynamic rules
-      (try(dr-scope-all-end));
-      (try(dr-scope-all-end));
-      (try(dr-scope-all-end));
-      (try(dr-scope-all-end /*@START @END @BW_START @BW_END*/
-      alltd(record-entity)  with errors   := <collect-all(include-origin(constraint-error))> ast;
-      warnings := <collect-all(include-origin(constraint-warning))> ast;
-      notes    := <collect-all(include-origin(constraint-note))> ast
-   
-  include-origin(s):
-    t -> (t, message)
-    where
-      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
-  
-  editor-resolve:
-    (Type(type), position, ast, path, fullpath) -> target
-    where
-      target := <GetEntity> type
-
-  editor-hover:
-    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) 
-
-rules
-
-  record-entity:
-    Entity(x_declaration, body) -> Entity(x_declaration, body)
-    with
-      x_reference := x_declaration;
-      rules(
-        GetEntity: x_reference -> x_declaration
-      )
-    
-  constraint-error:
-    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
-    where
-      not(!type => "String");
-      not(!type => "Int");
-      not(<GetEntity> type)
-  
-  constraint-warning:
-    Entity(x, _) -> "Entity names must start with a capital"
-    where
-      not(<explode-string; Hd; is-upper> x)
-  
-  constraint-note:
-    Module("example", _) -> "This is just an example program in the \"entities\" language"
-
-signature constructors
-
-  // These definitions are not strictly necessary,
-  // but they ensure that the build doesn't break if the syntax
-  // is changed and these constructors no longer exist
-  Module   : ID * List(Entity)   -> Module
-  Entity   : ID * List(Property) -> Entity
-  Property : ID * Type           -> Property
-  Type     : ID                  -> Type

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/CommaAndSemiColumn.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeperatorMustBeSkipped/CommaAndSemiColumn.str_java	2009-11-29 11:10:31 UTC (rev 20324)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/CommaAndSemiColumn.str_java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -1,121 +0,0 @@
-module test-java-traits
-
-imports
-  libstratego-lib
-  libdryad-compiler
-  java-traits
-
-strategies
-
-  main-test-java-traits =
-    option-wrap(
-      fail-fast-option + test-only-option + general-options
-    , test-suite(
-        !"Java trait tests"
-      , 
-        testsuite-section(java-trait-tests   |"Rewrite to Java");
-        testsuite-section(trait-output-tests |"Rewrite to classes");
-        testsuite-section(class-trait-tests  |"Traits from classfiles");
-        testsuite-section(trait-error-tests  |"Error reporting")
-      )
-    )
-
-  test-traits(input, output) =
-    do-test(
-      input
-    , assimilate-java-traits; strip-annos
-    , input
-    , output
-    )
-  
-  /** Unit test: retrieve al error messages; compare. */
-  test-catch-error(input, output) =
-    do-test(
-      input
-    , catch-error
-    , input
-    , output
-    )
-
-  catch-error =
-    let provide-error(catch) =
-      scoped-set-config(!Stage(), !0,
-        assimilate-java-traits
-      );
-      
-      try(dryad-compiler(
-        ?DryadError(_, _); catch; fail // catch & abort at error
-      ))
-    in
-      collect-argument-invokes(provide-error)
-    end
-  
-/** Unit tests. */
-strategies
-
-  java-trait-tests = where(<set-config> (Stage(), 1));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void bar() {} }
-         abstract class $Trait_Bar { void bar() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 {}
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-    ); 
-    test-traits( //@START @BW_START 
-      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
-    , !compilation-unit |[ 
-         class Foo                 { void required() {} ~Semicolon }
-         abstract class $Trait_Bar { void required(); }
-	   ]|
-    )) //@END @BW_END
-  
-    trait-output-tests = where(<set-config> (Stage(), 4));
-      test-traits(
-        !"class Foo with Bar {} trait Bar { void bar() {} }"
-      , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
-    )
-  
-  class-trait-tests =
-    where(
-      <set-config> (Stage(), 4);
-      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
-      <set-config> (Stage(), 1)
-    );
-    test-traits(
-      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
-    , ?[ compilation-unit |[ 
-           class Foo { void bar() {} }
-	     ]|
-	   , _ // bar
-	   ]
-    )
-
-  trait-error-tests =
-    test-catch-error(
-      !"class Foo with Undeclared {}"
-    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
-    );
-    test-catch-error(
-      !"class Foo with Bar {} trait Bar { void required(); }"
-    , ?[DryadError("Missing required method", _)]
-    );
-    test-catch-error(
-      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
-    , ?[DryadError("Circular reference from trait","Loop2")
-       ,DryadError("Circular reference from trait","Loop1")]
-    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/Comma_FirstLine.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/Comma_FirstLine.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/Comma_FirstLine.str_java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input( //@START @SEP_START //@END //@SEP_END
+    , assimilate-java-traits; strip-annos 
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	); 
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastBWChild.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastBWChild.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastBWChild.str	2009-12-08 18:13:50 UTC (rev 20353)
@@ -0,0 +1,69 @@
+module foo
+
+imports
+  libstratego-lib
+  foo
+
+strategies 
+
+  main-foo =
+    fatal-err(|"No main strategy")
+        
+  editor-analyze:
+    (ast, path, fullpath) -> (errors, warnings, notes)
+    with // @BW_START
+      // Analysis: scope and record dynamic rules
+      try(dr-scope-all-end);
+      dr-scope-all-start;
+      (alltd(record-entity) // @START @END @BW_END
+    with errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+   
+  include-origin(s):
+    t -> (t, message)
+    where
+      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
+  
+  editor-resolve:
+    (Type(type), position, ast, path, fullpath) -> target
+    where
+      target := <GetEntity> type
+
+  editor-hover:
+    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) 
+
+rules
+
+  record-entity:
+    Entity(x_declaration, body) -> Entity(x_declaration, body)
+    with
+      x_reference := x_declaration;
+      rules(
+        GetEntity: x_reference -> x_declaration
+      )
+    
+  constraint-error:
+    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
+    where
+      not(!type => "String");
+      not(!type => "Int");
+      not(<GetEntity> type)
+  
+  constraint-warning:
+    Entity(x, _) -> "Entity names must start with a capital"
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  constraint-note:
+    Module("example", _) -> "This is just an example program in the \"entities\" language"
+
+signature constructors
+
+  // These definitions are not strictly necessary,
+  // but they ensure that the build doesn't break if the syntax
+  // is changed and these constructors no longer exist
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion.str_java (from rev 20324, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeperatorMustBeSkipped/CommaAndSemiColumn.str_java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion.str_java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+    );  
+    test-traits( //@START /*@SEP_START*/ 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+    )) //@END @SEP_END
+  
+    trait-output-tests = where(<set-config> (Stage(), 4));
+      test-traits(
+        !"class Foo with Bar {} trait Bar { void bar() {} }"
+      , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion.str_java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion2.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion2.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion2.str_java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+    ); 
+    test-traits( //@START /*@SEP_START*/ 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+      ]|
+    )) //@END @SEP_END
+  
+    trait-output-tests = where(<set-config> (Stage(), 4));
+      test-traits(
+        !"class Foo with Bar {} trait Bar { void bar() {} }"
+      , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion_Current.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion_Current.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion_Current.str_java	2009-12-08 18:13:50 UTC (rev 20353)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+    ); 
+    test-traits(@#)) //@START @CR_START 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+    ) //@END @CR_END
+  
+    trait-output-tests = where(<set-config> (Stage(), 4));
+      test-traits(
+        !"class Foo with Bar {} trait Bar { void bar() {} }"
+      , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);

(1274 diff lines omitted)


From m.dejonge at tudelft.nl  Tue Dec  8 19:15:47 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 08 Dec 2009 18:15:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20354 - MaartjeDeJonge
	- in sglr-recovery/trunk/RecoveryLogging: . Backup src/logging
Message-ID: <200912081815.nB8IFluY021624@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-08 18:15:47 +0000 (Tue, 08 Dec 2009)
New Revision: 20354

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20354&view=rev

Added:
   sglr-recovery/trunk/RecoveryLogging/Backup/
   sglr-recovery/trunk/RecoveryLogging/Backup/ConsoleWriter.java
   sglr-recovery/trunk/RecoveryLogging/Backup/FileLog.java
   sglr-recovery/trunk/RecoveryLogging/Backup/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/Backup/RegionLog.java
   sglr-recovery/trunk/RecoveryLogging/Backup/TimeMeasuring.aj
Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java

Log:


Changes:

Added: sglr-recovery/trunk/RecoveryLogging/Backup/ConsoleWriter.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/Backup/ConsoleWriter.java	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/Backup/ConsoleWriter.java	2009-12-08 18:15:47 UTC (rev 20354)
@@ -0,0 +1,17 @@
+package logging;
+
+public class ConsoleWriter {
+    
+    public static void writeToConsole(FileLog inputFile){
+        System.out.println(inputFile.getFileName());
+        for (RegionLog region : inputFile.getRegionInfo()) {
+            System.out.println("\t execution times: ");
+            System.out.println(region.getExecutionTimetable());
+            System.out.println("\t skipped fragment: ");
+            System.out.println(region.getSkippedFragment());
+            System.out.println("\t inspected fragments: ");
+            System.out.println(region.getInspectedFragments());
+        }        
+    }
+
+}

Added: sglr-recovery/trunk/RecoveryLogging/Backup/FileLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/Backup/FileLog.java	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/Backup/FileLog.java	2009-12-08 18:15:47 UTC (rev 20354)
@@ -0,0 +1,46 @@
+package logging;
+
+import java.util.ArrayList;
+import java.util.TreeMap;
+
+public class FileLog {
+    private String fileName; 
+    private ArrayList<RegionLog> regionInfo;
+    
+    public FileLog(){
+        regionInfo=new ArrayList<RegionLog>();
+        fileName="";
+    }
+    public String getFileName() {
+        return fileName;
+    }
+    void setFileName(String fileName) {
+        this.fileName = fileName;
+    }
+    public ArrayList<RegionLog> getRegionInfo() {
+        return regionInfo;
+    }
+    void addRegionInfo(RegionLog region) {
+        regionInfo.add(region);
+    } 
+    
+    public ArrayList<String> getSkippedFragments(){
+    	ArrayList<String> result=new ArrayList<String>();
+    	for (RegionLog region : getRegionInfo()) {
+			result.add(region.getSkippedFragment());
+		}
+    	return result;
+    }
+    
+    public ArrayList<Long> getRegionSelectionTimes(){
+    	ArrayList<Long> result=new ArrayList<Long>();
+    	for (RegionLog region : getRegionInfo()) {
+			result.add(region.getRegionSelectionTime());
+		}
+    	return result;
+    }
+	public void clear() {
+		regionInfo.clear();
+	}
+
+}

Added: sglr-recovery/trunk/RecoveryLogging/Backup/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/Backup/RecoveryLogging.aj	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/Backup/RecoveryLogging.aj	2009-12-08 18:15:47 UTC (rev 20354)
@@ -0,0 +1,104 @@
+package logging;
+
+import java.util.ArrayList;
+import org.spoofax.jsglr.FineGrainedRepair;
+import org.spoofax.jsglr.IStructureSkipper;
+import org.spoofax.jsglr.IndentInfo;
+import org.spoofax.jsglr.Main;
+import org.spoofax.jsglr.RecoveryConnector;
+import org.spoofax.jsglr.RegionRecovery;
+import org.spoofax.jsglr.SGLR;
+import org.spoofax.jsglr.StructureSkipSuggestion;
+
+public aspect RecoveryLogging extends TimeMeasuring{
+
+    private FileLog currentFile;
+    private RegionLog currentRegion;
+    private ArrayList<FileLog> recoveryInfoOfFiles;
+
+    public FileLog getFileLog() {
+        return currentFile;
+    }
+    
+    public ArrayList<FileLog> getRecoveryInfoOfFiles() {
+        return recoveryInfoOfFiles;
+    }
+
+    public RecoveryLogging(){
+        currentFile=new FileLog();
+        currentRegion=new RegionLog();
+        recoveryInfoOfFiles=new ArrayList<FileLog>();
+    }
+    
+    pointcut parsing(String x, String y, SGLR s): 
+        execution(long Main.parseFile(String, String, SGLR))&& args(x, y, s);
+
+    pointcut recovering():
+        execution(void RecoveryConnector.doRecoverSteps());
+    
+    pointcut timing():
+        execution(boolean RegionRecovery.selectErroneousFragment()) ||
+        execution(void FineGrainedRepair.findRecoverBranch(ArrayList<IndentInfo>, int)) ||
+        execution(void RecoveryConnector.doRecoverSteps());
+    
+    pointcut regionSelection(RegionRecovery rs):
+        execution(boolean RegionRecovery.selectErroneousFragment()) && target(rs);
+    
+    pointcut regionTesting(RegionRecovery rs, StructureSkipSuggestion regionTested):
+        execution(void RegionRecovery.testRegion(StructureSkipSuggestion)) && target(rs) && args(regionTested);
+   
+  
+    pointcut prevRegion(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPreviousSkipSuggestions())&& target(rs);
+    
+    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prevRegions): prevRegion(rs) {
+	  if (!prevRegions.isEmpty()) {
+		  currentRegion.addPrevRegion(rs.getHistory().getFragment(prevRegions.get(0)));
+		  System.out.println("**************** PREVIOUS REGIONS *************");
+		  System.out.println(rs.getHistory().getFragment(prevRegions.get(0)));
+		  System.out.println("********************************************");
+	  }
+    }
+    
+    pointcut currRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getCurrentSkipSuggestions())&& target(rs);
+
+    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> currentRegions): currRegions(rs) {
+  	  if (!currentRegions.isEmpty()) {
+  		  //currentRegion.addPrevRegion(rs.getHistory().getFragment(prevRegions.get(0)));
+  		  System.out.println("****************** CURRENT REGIONS ****************");
+  		  System.out.println(rs.getHistory().getFragment(currentRegions.get(0)));
+  		  System.out.println("********************************************");
+  	  }
+   }
+
+    
+    before(String x, String y, SGLR s): parsing(x, y, s) {
+        currentFile=new FileLog();
+        currentFile.setFileName(x);
+        //System.out.println("KKL"+x);
+    }   
+    
+    after(RegionRecovery rs, StructureSkipSuggestion region): regionTesting(rs, region) {
+            currentRegion.addInspectedFragments(rs.getInputFragment(region));
+    }
+    
+    after(RegionRecovery rs): regionSelection(rs) {
+        if(rs.hasFoundErroneousRegion())
+            currentRegion.setSkippedFragment(rs.getErrorFragment());
+    }
+    
+    after(): recovering(){
+        currentFile.addRegionInfo(currentRegion);
+        currentRegion=new RegionLog();
+    }
+    
+    after(String x, String y, SGLR s): parsing(x, y, s) {
+       recoveryInfoOfFiles.add(currentFile);
+       //ConsoleWriter.writeToConsole(currentFile);
+       
+    } 
+    
+    @Override
+    protected void afterMethodExecuted(String methodName, long duration) {
+        currentRegion.addExecutionTime(methodName, duration);
+    }
+}

Added: sglr-recovery/trunk/RecoveryLogging/Backup/RegionLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/Backup/RegionLog.java	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/Backup/RegionLog.java	2009-12-08 18:15:47 UTC (rev 20354)
@@ -0,0 +1,55 @@
+package logging;
+
+import java.util.ArrayList;
+import java.util.TreeMap;
+
+public class RegionLog {
+    private TreeMap<String, Long> executionTimetable;
+    private String skippedFragment;
+    private ArrayList<String> inspectedFragments;
+    private ArrayList<String> prevRegions;
+    
+    
+    public ArrayList<String> getPrevRegions() {
+		return prevRegions;
+	}
+
+	public void addPrevRegion(String prevRegion) {
+		this.prevRegions.add(prevRegion);
+	}
+
+	public RegionLog(){
+        executionTimetable=new TreeMap<String, Long>();
+        inspectedFragments=new ArrayList<String>();
+        prevRegions=new ArrayList<String>();
+    }
+    
+    public TreeMap<String, Long> getExecutionTimetable() {
+        return executionTimetable;
+    }
+    void addExecutionTime(String methodName, long executionTime) {
+        executionTimetable.put(methodName, executionTime);
+    }
+    
+    public String getSkippedFragment() {
+        return skippedFragment;
+    }
+    
+    void setSkippedFragment(String skippedFragment) {
+        this.skippedFragment = skippedFragment;
+    }
+    
+    public ArrayList<String> getInspectedFragments() {
+        return inspectedFragments;
+    }
+    
+    void addInspectedFragments(String inspectedFragment) {
+        inspectedFragments.add(inspectedFragment);
+    }
+    
+    public long getRegionSelectionTime(){
+        if(!executionTimetable.containsKey("selectErroneousFragment"))
+            return -1;
+        return executionTimetable.get("selectErroneousFragment");
+    }
+}

Added: sglr-recovery/trunk/RecoveryLogging/Backup/TimeMeasuring.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/Backup/TimeMeasuring.aj	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/Backup/TimeMeasuring.aj	2009-12-08 18:15:47 UTC (rev 20354)
@@ -0,0 +1,28 @@
+package logging;
+
+import java.util.TreeMap;
+
+public abstract aspect TimeMeasuring {
+    
+    private TreeMap<String, Long> execTimes;
+    
+    public TimeMeasuring(){
+        execTimes=new TreeMap<String, Long>();
+    }
+    
+    abstract pointcut timing();
+    
+    Object around(): timing() {
+        long beforeTime = System.currentTimeMillis();
+        try {
+            return proceed();
+        } finally {
+            String methodName=thisJoinPoint.getSignature().getName();
+            long duration=System.currentTimeMillis()-beforeTime;
+            execTimes.put(methodName, duration);          
+            afterMethodExecuted(methodName, duration);
+        }
+    }
+
+    protected abstract void afterMethodExecuted(String methodName, long duration);
+}

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-08 18:13:50 UTC (rev 20353)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-08 18:15:47 UTC (rev 20354)
@@ -52,22 +52,28 @@
     pointcut prevRegion(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPreviousSkipSuggestions())&& target(rs);
     
     after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prevRegions): prevRegion(rs) {
-	  if (!prevRegions.isEmpty()) {
-		  currentRegion.addPrevRegion(rs.getHistory().getFragment(prevRegions.get(0)));
-		  System.out.println("**************** PREVIOUS REGIONS *************");
-		  System.out.println(rs.getHistory().getFragment(prevRegions.get(0)));
-		  System.out.println("********************************************");
+	  for (StructureSkipSuggestion prev : prevRegions) {
+		  String region = rs.getHistory().getFragment(prev);
+		  //System.out.println("KK: "+String.copyValueOf(prev.getAdditionalTokens()));
+		  //System.out.print(region);
+		  String correctedRegion=region.substring(prev.getAdditionalTokens().length);
+		  //System.out.print(correctedRegion);
+		  //System.out.println("uuuuuuuuuuuuuuu");
+		  currentRegion.addPrevRegion(correctedRegion);
 	  }
+		  //System.out.println("**************** PREVIOUS REGIONS *************");
+		  //System.out.println(rs.getHistory().getFragment(prevRegions.get(0)));
+		  //System.out.println("********************************************");
     }
     
     pointcut currRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getCurrentSkipSuggestions())&& target(rs);
 
     after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> currentRegions): currRegions(rs) {
   	  if (!currentRegions.isEmpty()) {
-  		  //currentRegion.addPrevRegion(rs.getHistory().getFragment(prevRegions.get(0)));
-  		  System.out.println("****************** CURRENT REGIONS ****************");
-  		  System.out.println(rs.getHistory().getFragment(currentRegions.get(0)));
-  		  System.out.println("********************************************");
+  		  currentRegion.addCurrRegion(rs.getHistory().getFragment(currentRegions.get(0)));
+  		  //System.out.println("****************** CURRENT REGIONS ****************");
+  		  //System.out.println(rs.getHistory().getFragment(currentRegions.get(0)));
+  		  ////System.out.println("********************************************");
   	  }
    }
 
@@ -75,15 +81,16 @@
     before(String x, String y, SGLR s): parsing(x, y, s) {
         currentFile=new FileLog();
         currentFile.setFileName(x);
-        System.out.println("KKL"+x);
+        //System.out.println("KKL"+x);
     }   
     
     after(RegionRecovery rs, StructureSkipSuggestion region): regionTesting(rs, region) {
             currentRegion.addInspectedFragments(rs.getInputFragment(region));
+            //System.out.println(rs.getInputFragment(region));
     }
     
-    after(RegionRecovery rs): regionSelection(rs) {
-        if(rs.hasFoundErroneousRegion())
+    after(RegionRecovery rs) returning (boolean succeeded): regionSelection(rs) {
+        if(succeeded)
             currentRegion.setSkippedFragment(rs.getErrorFragment());
     }
     

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-08 18:13:50 UTC (rev 20353)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-08 18:15:47 UTC (rev 20354)
@@ -1,6 +1,8 @@
 package logging;
 
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 import java.util.TreeMap;
 
 public class RegionLog {
@@ -8,8 +10,8 @@
     private String skippedFragment;
     private ArrayList<String> inspectedFragments;
     private ArrayList<String> prevRegions;
+    private ArrayList<String> currRegions;
     
-    
     public ArrayList<String> getPrevRegions() {
 		return prevRegions;
 	}
@@ -17,11 +19,20 @@
 	public void addPrevRegion(String prevRegion) {
 		this.prevRegions.add(prevRegion);
 	}
+	
+	public ArrayList<String> getCurrRegions() {
+		return currRegions;
+	}
 
+	public void addCurrRegion(String prevRegion) {
+		this.currRegions.add(prevRegion);
+	}
+
 	public RegionLog(){
         executionTimetable=new TreeMap<String, Long>();
         inspectedFragments=new ArrayList<String>();
         prevRegions=new ArrayList<String>();
+        currRegions= new ArrayList<String>();
     }
     
     public TreeMap<String, Long> getExecutionTimetable() {



From m.dejonge at tudelft.nl  Tue Dec  8 19:17:14 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 08 Dec 2009 18:17:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20355 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912081817.nB8IHEUt021644@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-08 18:17:14 +0000 (Tue, 08 Dec 2009)
New Revision: 20355

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20355&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java

Log:
improved region recovery implementation (only current and previous)

Changes:

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-08 18:17:14 UTC (rev 20355)
@@ -0,0 +1,335 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+import org.spoofax.jsglr.StructureSkipper.indentShift;
+
+public class NewStructureSkipper implements IStructureSkipper {
+
+    enum indentShift{
+        INDENT,
+        DEDENT,
+        SAME_INDENT
+    }
+    
+    private SGLR myParser;
+    private int failureIndex;
+    private StructuralTokenRecognizer structTokens;
+    
+    public ParserHistory getHistory() {
+        return myParser.getHistory();
+    }
+    
+    public NewStructureSkipper(SGLR sglr){   
+        myParser=sglr;
+        structTokens=new StructuralTokenRecognizer();
+    }
+    
+    public void clear() {
+        // TODO Auto-generated method stub
+
+    }
+
+    public ArrayList<StructureSkipSuggestion> getCurrentSkipSuggestions()
+            throws IOException {
+        int indexLastLine=failureIndex;
+        if (isScopeClosingLine(indexLastLine))
+            return new ArrayList<StructureSkipSuggestion>();
+        if (isScopeOpeningLine(indexLastLine) && indexLastLine>0)
+            return selectRegion(indexLastLine-1);
+        return selectRegion(indexLastLine);
+    }
+    
+    private ArrayList<StructureSkipSuggestion> selectRegion(int indexLine)
+    throws IOException {
+        IndentInfo startLine = IndentInfo.cloneIndentInfo(getHistory().getLine(indexLine));
+        ArrayList<IndentInfo> endLocations=findCurrentEnd(startLine);
+        ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
+        for (IndentInfo endSkip : endLocations) {
+            StructureSkipSuggestion skipConstruct=new StructureSkipSuggestion();
+            skipConstruct.setSkipLocations(startLine, endSkip, indexLine, -1);            
+            skipSuggestions.add(skipConstruct);
+            addSeparatorIncludingRegion_Forwards(skipSuggestions, skipConstruct);
+            addSeperatorIncludingRegion_Backwards(skipSuggestions, skipConstruct);
+        }        
+        return skipSuggestions;
+    }    
+
+    public StructureSkipSuggestion getErroneousPrefix() throws IOException {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public ArrayList<StructureSkipSuggestion> getParentSkipSuggestions()
+            throws IOException {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public ArrayList<StructureSkipSuggestion> getPickErroneousChild(
+            StructureSkipSuggestion prevRegion) throws IOException {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public ArrayList<StructureSkipSuggestion> getPreviousSkipSuggestions()
+            throws IOException {
+        ArrayList<StructureSkipSuggestion> prevRegions=new ArrayList<StructureSkipSuggestion>();
+        int indexEnd=failureIndex;
+        if(isScopeClosingLine(indexEnd))
+            indexEnd++;         
+        IndentInfo endSkip=IndentInfo.cloneIndentInfo(getHistory().getLine(indexEnd));
+        //int indexStart = indexEnd-3;
+        int indexStart = backwardsSkip(indexEnd);
+        if(indexStart<0)
+            return prevRegions;
+        IndentInfo startSkip=IndentInfo.cloneIndentInfo(getHistory().getLine(indexStart));
+        StructureSkipSuggestion previousRegion=new StructureSkipSuggestion();
+        previousRegion.setSkipLocations(startSkip, endSkip, indexStart, indexEnd);
+        prevRegions.add(previousRegion);
+        
+        addSeperatorIncludingRegion_Backwards(prevRegions, previousRegion);
+        addSeparatorIncludingRegion_Forwards(prevRegions, previousRegion);            
+        return prevRegions;
+    }
+
+    private void addSeperatorIncludingRegion_Backwards(
+            ArrayList<StructureSkipSuggestion> prevRegions, 
+            StructureSkipSuggestion previousRegion) throws IOException {
+        int indexStart=previousRegion.getIndexHistoryStart();
+        if(indexStart>0 && isSeparatorEndingLine(indexStart-1)){
+            char[] toParse = structTokens.removeSeparatorAtTheEnd(readLine(indexStart-1));
+            IndentInfo startSkip2=IndentInfo.cloneIndentInfo(getHistory().getLine(indexStart-1));
+            IndentInfo endSkip2=IndentInfo.cloneIndentInfo(previousRegion.getEndSkip());
+            StructureSkipSuggestion previousRegion2=new StructureSkipSuggestion();
+            previousRegion2.setSkipLocations(startSkip2, endSkip2, indexStart-1, previousRegion.getIndexHistoryEnd());
+            previousRegion2.setAdditionalTokens(toParse);
+            prevRegions.add(previousRegion2);
+        }
+    }
+
+    private void addSeparatorIncludingRegion_Forwards(
+            ArrayList<StructureSkipSuggestion> regions,
+            StructureSkipSuggestion aRegion) throws IOException {
+        if(isSeparatorStartingLine(aRegion.getEndSkip())){
+            IndentInfo startSkip3=IndentInfo.cloneIndentInfo(aRegion.getStartSkip());
+            IndentInfo endSkip3=IndentInfo.cloneIndentInfo(aRegion.getEndSkip());
+            int indentShift=separatorIndent(endSkip3)- endSkip3.getIndentValue();
+            endSkip3.setTokensSeen(endSkip3.getTokensSeen()+indentShift);
+            StructureSkipSuggestion previousRegion3=new StructureSkipSuggestion();
+            previousRegion3.setSkipLocations(startSkip3, endSkip3, aRegion.getIndexHistoryStart(), aRegion.getIndexHistoryEnd());
+            regions.add(previousRegion3);
+        }
+    }
+    
+    private int backwardsSkip(int indexLine) throws IOException { 
+        int indentValue = getHistory().getLine(indexLine).getIndentValue();
+        boolean sawChilds=false;
+        boolean closingSeen=false;
+        boolean openingSeen=false;
+        boolean ignoreSeps=!isSeparatorStartingLine(indexLine);
+        int indexHistoryLines=indexLine;
+        while(indexHistoryLines>0){
+            indexHistoryLines-=1;
+            int indentSkipPosition=getHistory().getLine(indexHistoryLines).getIndentValue();
+            indentShift shift=calculateShift(indentValue, indentSkipPosition);
+            switch (shift) {
+            case DEDENT:
+                if(!sawChilds)
+                    return -1;
+                return indexHistoryLines;              
+            case INDENT:      
+                if(!ignoreSeps && !isSeparatorStartingLine(indexHistoryLines) && separatorIndent(indexLine)==indentSkipPosition)
+                    return indexHistoryLines;
+                sawChilds=true; //TODO: lastChild instead of previous struct?
+                break;
+            case SAME_INDENT: 
+                if(!sawChilds && isScopeClosingLine(indexHistoryLines))
+                    closingSeen=true;
+                else
+                    if(closingSeen && isScopeOpeningLine(indexHistoryLines))
+                        openingSeen=true;
+                    else
+                        if(!(ignoreSeps && isSeparatorStartingLine(indexHistoryLines)))
+                            return indexHistoryLines;        
+                break;
+            default:
+                break;
+            }
+        }  
+        if(indexLine != 0)
+            return 0;//SOF
+        return -1;
+    }  
+    
+    private int separatorIndent(int indexLine) throws IOException {
+        int indentValue = getHistory().getLine(indexLine).getIndentValue();
+        String lineContent = readLine(indexLine);
+        return indentValue+structTokens.separatorIndent(lineContent);
+    }
+    
+    private int separatorIndent(IndentInfo line) throws IOException {
+        int indentValue = line.getIndentValue();
+        String lineContent = readLine(line);
+        return indentValue+structTokens.separatorIndent(lineContent);
+    }
+
+    private boolean isScopeOpeningLine(IndentInfo line) throws IOException {
+        String lineContent = readLine(line);
+        return structTokens.isScopeOpeningLine(lineContent);
+    }
+    
+    private boolean isScopeOpeningLine(int index) throws IOException {
+        String lineContent = readLine(index);
+        return structTokens.isScopeOpeningLine(lineContent);
+    }
+    
+    private boolean isSeparatorStartingLine(int index) throws IOException {
+        String lineContent = readLine(index);
+        return structTokens.isSeparatorStartedLine(lineContent);
+    }
+    
+    private boolean isSeparatorStartingLine(IndentInfo line) throws IOException {
+        String lineContent = readLine(line);
+        return structTokens.isSeparatorStartedLine(lineContent);
+    }
+    
+    private boolean isSeparatorEndingLine(int index) throws IOException {
+        String lineContent = readLine(index);
+        return structTokens.isSeparatorEndingLine(lineContent);
+    }
+    
+    private boolean isSeparatorEndingLine(IndentInfo line) throws IOException {
+        String lineContent = readLine(line);
+        return structTokens.isSeparatorEndingLine(lineContent);
+    }
+    
+    private boolean isSeparatorLine(IndentInfo line) throws IOException {
+        String lineContent = readLine(line);
+        return structTokens.isSeparatorStartedLine(lineContent);
+    }
+
+    private indentShift calculateShift(int indentStartLine, int indentSkipPosition) {
+        int difference=indentStartLine-indentSkipPosition;
+        if(difference>0)
+            return indentShift.DEDENT;
+        if(difference<0)
+            return indentShift.INDENT;
+        return indentShift.SAME_INDENT;
+    } 
+
+    private boolean isScopeClosingLine(int index) throws IOException {
+        String lineContent = readLine(index);
+        return structTokens.isScopeClosingLine(lineContent);
+    }
+    private boolean isScopeClosingLine(IndentInfo line) throws IOException {
+        String lineContent = readLine(line);
+        return structTokens.isScopeClosingLine(lineContent);
+    }
+
+    private String readLine(int index) throws IOException {
+        while(getHistory().getIndexLastLine()<=index)
+            getHistory().readRecoverToken(myParser);
+        IndentInfo line=getHistory().getLine(index);
+        return readLine(line);
+    }
+
+    private String readLine(IndentInfo line) {
+        int startTok = line.getTokensSeen();
+        String lineContent=getHistory().readLine(startTok);
+        return lineContent;
+    }
+
+    public ArrayList<StructureSkipSuggestion> getPriorSkipSuggestions()
+            throws IOException {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public ArrayList<StructureSkipSuggestion> getSibblingBackwardSuggestions()
+            throws IOException {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public ArrayList<StructureSkipSuggestion> getSibblingForwardSuggestions()
+            throws IOException {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public ArrayList<StructureSkipSuggestion> getSibblingSurroundingSuggestions()
+            throws IOException {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(
+            StructureSkipSuggestion prevRegion) {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public void setFailureIndex(int failureIndex) {
+       this.failureIndex=failureIndex;
+    }
+    
+    private ArrayList<IndentInfo> findCurrentEnd(IndentInfo startLine) throws IOException{
+        getHistory().setTokenIndex(startLine.getTokensSeen());
+        int indentStartLine=startLine.getIndentValue();        
+        boolean hasIndentChilds=false;
+        boolean isSecondLine=true;
+        ArrayList<IndentInfo> endLocations=new ArrayList<IndentInfo>();
+        IndentInfo nextLine = skipLine(startLine);
+        while(myParser.currentToken!=SGLR.EOF){            
+            int indentSkipPosition=nextLine.getIndentValue();
+            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
+            switch (shift) {
+            case DEDENT:               
+                endLocations.add(nextLine);                
+                return endLocations;                
+            case INDENT:
+                hasIndentChilds=true;
+                break;
+            case SAME_INDENT:
+                if(hasIndentChilds && isScopeClosingLine(nextLine)){
+                    nextLine = skipLine(nextLine);
+                    endLocations.add(nextLine);
+                    return endLocations;
+                }
+                if((!isSecondLine || !isScopeOpeningLine(nextLine)) && !isSeparatorLine(nextLine)){
+                     endLocations.add(nextLine);
+                     return endLocations;
+                }
+                break;
+            default:
+                break;
+            }
+            isSecondLine=false;
+            nextLine=skipLine(nextLine);
+        }
+        endLocations.add(nextLine); //EOF
+        return endLocations;
+    }
+    
+    private IndentInfo skipLine(IndentInfo line) throws IOException {
+        IndentationHandler skipIndentHandler=new IndentationHandler();
+        getHistory().setTokenIndex(Math.max(0, line.getTokensSeen()-1));
+        int newLineNumber=line.getLineNumber();
+        skipIndentHandler.setInLeftMargin(false);
+        getHistory().readRecoverToken(myParser);
+        while(myParser.currentToken!=SGLR.EOF){
+            getHistory().readRecoverToken(myParser);
+            if(myParser.currentToken=='\n')
+                newLineNumber++;
+            skipIndentHandler.updateIndentation(myParser.currentToken);
+            if(skipIndentHandler.lineMarginEnded()){
+                IndentInfo result = new IndentInfo(newLineNumber, getHistory().getTokenIndex()-1, skipIndentHandler.getIndentValue());
+                return result;
+            }            
+        }
+        return new IndentInfo(newLineNumber+1, getHistory().getTokenIndex()-1, 0);// EOF
+    }
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java	2009-12-08 18:17:14 UTC (rev 20355)
@@ -0,0 +1,65 @@
+package org.spoofax.jsglr;
+
+public class StructuralTokenRecognizer {
+    
+    private final static String[] closingTokens={"}", ")", "]|", ">", "|", "]"};
+    private final static String[] openingTokens={"{", "(", "|[", "<", "|", "["};
+    private final static String[] separatorTokens={",", ";", "<+"};
+    
+    public boolean isScopeClosingLine(String s){
+        return startsWith(s, closingTokens);
+    }
+    
+    public boolean isScopeOpeningLine(String s){
+        return startsWith(s, openingTokens);
+    }
+    
+    public boolean isSeparatorStartedLine(String s){
+        return startsWith(s, separatorTokens);
+    }
+
+    private boolean startsWith(String s, String[] tokens) {
+        for (int i = 0; i < tokens.length; i++) {
+            if(s.startsWith(tokens[i]))
+                return true;
+        }
+        return false;
+    }
+    
+    private boolean endsWith(String s, String[] tokens) {
+        s = s.trim();
+        for (int i = 0; i < tokens.length; i++) {
+            if(s.endsWith(tokens[i]))
+                return true;
+        }
+        return false;
+    }
+
+    public int separatorIndent(String lineContent) {
+        String line = lineContent.trim();
+        int length=line.length();
+        for (int i = 0; i < separatorTokens.length; i++) {
+            if(line.startsWith(separatorTokens[i])){
+                line=line.substring(separatorTokens[i].length());
+                line = line.trim();
+            }
+        }
+        return length-line.length();
+    }
+
+    public boolean isSeparatorEndingLine(String line) {
+        return endsWith(line, separatorTokens);
+    }
+    
+    public char[] removeSeparatorAtTheEnd(String aLine) {
+        String line = aLine.trim();
+        for (int i = 0; i < separatorTokens.length; i++) {
+            if(line.endsWith(separatorTokens[i])){
+                String toParse=line.substring(0, line.length()-separatorTokens[i].length());
+                return toParse.toCharArray();
+            }
+        }
+        return new char[0];
+    }
+
+}



From m.dejonge at tudelft.nl  Tue Dec  8 19:17:42 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 08 Dec 2009 18:17:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20356 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912081817.nB8IHgjO021652@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-08 18:17:42 +0000 (Tue, 08 Dec 2009)
New Revision: 20356

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20356&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java

Log:
improved region recovery implementation (only current and previous)

Changes:

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java	2009-12-08 18:17:42 UTC (rev 20356)
@@ -0,0 +1,44 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+public interface IStructureSkipper {
+
+    ParserHistory getHistory();
+    
+    public abstract void setFailureIndex(int failureIndex);
+
+    public abstract void clear();
+
+    public abstract StructureSkipSuggestion getErroneousPrefix()
+            throws IOException;
+
+    public abstract ArrayList<StructureSkipSuggestion> getCurrentSkipSuggestions()
+            throws IOException;
+
+    public abstract ArrayList<StructureSkipSuggestion> getPreviousSkipSuggestions()
+            throws IOException;
+
+    public abstract ArrayList<StructureSkipSuggestion> getPriorSkipSuggestions()
+            throws IOException;
+
+    public abstract ArrayList<StructureSkipSuggestion> getParentSkipSuggestions()
+            throws IOException;
+
+    public abstract ArrayList<StructureSkipSuggestion> getSibblingForwardSuggestions()
+            throws IOException;
+
+    public abstract ArrayList<StructureSkipSuggestion> getSibblingBackwardSuggestions()
+            throws IOException;
+
+    public abstract ArrayList<StructureSkipSuggestion> getSibblingSurroundingSuggestions()
+            throws IOException;
+
+    public abstract ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(
+            StructureSkipSuggestion prevRegion);
+
+    public abstract ArrayList<StructureSkipSuggestion> getPickErroneousChild(
+            StructureSkipSuggestion prevRegion) throws IOException;
+
+}
\ No newline at end of file



From L.C.L.Kats at tudelft.nl  Wed Dec  9 10:04:35 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 09 Dec 2009 09:04:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20357 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
Message-ID: <200912090904.nB994Z16002208@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-09 09:04:35 +0000 (Wed, 09 Dec 2009)
New Revision: 20357

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20357&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ProductionAttributeReader.java

Log:
Support (A ";")* like expressions in grammars in the imploder.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ProductionAttributeReader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ProductionAttributeReader.java	2009-12-08 18:17:42 UTC (rev 20356)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ProductionAttributeReader.java	2009-12-09 09:04:35 UTC (rev 20357)
@@ -76,18 +76,16 @@
     }
     
     private String getSortUncached(ATermAppl node) {
-    	while (node.getChildCount() > 0 && isAppl(node)) {
-    		String cons = asAppl(node).getName();
+    	for (ATerm current = node; current.getChildCount() > 0 && isAppl(current); current = termAt(current, 0)) {
+    		String cons = asAppl(current).getName();
 			if (cons.equals("sort"))
-    			return applAt(node, 0).getName();
+    			return applAt(current, 0).getName();
     		if (cons.equals("alt"))
-    			return getAltSortName(node);
+    			return getAltSortName(current);
     		if (cons.equals("parameterized-sort"))
-    			return getParameterizedSortName(node);
+    			return getParameterizedSortName(current);
     		if (cons.equals("char-class"))
     			return null;
-    		
-    		node = termAt(node, 0);
     	}
     	
     	return null;



From m.dejonge at tudelft.nl  Wed Dec  9 10:52:57 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 09 Dec 2009 09:52:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20358 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912090952.nB99qvln003078@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-09 09:52:57 +0000 (Wed, 09 Dec 2009)
New Revision: 20358

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20358&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java

Log:
Force prefix disabled

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-09 09:04:35 UTC (rev 20357)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-09 09:52:57 UTC (rev 20358)
@@ -102,8 +102,9 @@
         }
         Tools.debug("FineGrained Repair Failed");
         //WHITESPACE REPAIR
-        if (skipSucceeded) {            
-            whiteSpaceParse(errorFragment); 
+        if (skipSucceeded) {    
+            whiteSpaceParse(skipRecovery.getErrorFragmentPlusSeparator());
+            //whiteSpaceParse(errorFragment); 
             if(recoverySucceeded()){
                 Tools.debug("WhiteSpace Repair Succeeded");
                 //System.err.print("************* WS-succeeded");
@@ -114,7 +115,7 @@
             }
         }
         //FORCE PREFIX ACCEPT
-        else {            
+        /*else {            
             EofRecovery eofR = new EofRecovery(mySGLR);
             eofR.enforceAccept(getHistory().getBigReducePoint().getStackNodes());
             if(recoverySucceeded()){
@@ -125,7 +126,7 @@
                 Tools.debug("Enforcing Accepting Stack - Failed"); 
               //System.err.print("******************* AS-Failed");
             }
-        }
+        }*/
         active = false;
     }
     
@@ -199,7 +200,7 @@
         getHistory().setTokenIndex(skipRecovery.getEndSkipPosition());
         while(!getHistory().hasFinishedRecoverTokens() && mySGLR.activeStacks.size()>0){        
             getHistory().readRecoverToken(mySGLR);
-            //Tools.debug("***"+(char)mySGLR.currentToken);
+            //System.out.println("@@@@@@@@@@ "+(char)mySGLR.currentToken);
             mySGLR.doParseStep();            
         }        
     }



From L.C.L.Kats at tudelft.nl  Wed Dec  9 11:07:41 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 09 Dec 2009 10:07:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20359 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt
Message-ID: <200912091007.nB9A7fMW003655@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-09 10:07:41 +0000 (Wed, 09 Dec 2009)
New Revision: 20359

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20359&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java

Log:
Also support dynamic loading of jars that were compiled without a package name (like acoda.jar is right now).

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-12-09 09:52:57 UTC (rev 20358)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-12-09 10:07:41 UTC (rev 20359)
@@ -211,7 +211,7 @@
 		
 		while (jarEntries.hasMoreElements()) {
 			String entry = jarEntries.nextElement().getName();
-			if (entry.endsWith("/InteropRegisterer.class") || entry.equals("InteropRegisterer.class")) {
+			if (entry.endsWith("/InteropRegisterer.class") || entry.endsWith("$InteropRegisterer.class") || entry.equals("InteropRegisterer.class")) {
 				final int POSTFIX = ".class".length();
 				String className = entry.substring(0, entry.length() - POSTFIX);
 				className = className.replace('/', '.');



From L.C.L.Kats at tudelft.nl  Wed Dec  9 11:12:23 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 09 Dec 2009 10:12:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20360 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt
Message-ID: <200912091012.nB9ACNX0003690@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-09 10:12:23 +0000 (Wed, 09 Dec 2009)
New Revision: 20360

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20360&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/IncompatibleJarException.java

Log:
More sanity checking in dynamic jar loading.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-12-09 10:07:41 UTC (rev 20359)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-12-09 10:12:23 UTC (rev 20360)
@@ -207,7 +207,8 @@
 		URL protocolfulUrl = new URL("jar", "", jar + "!/");
 		JarURLConnection connection = (JarURLConnection) protocolfulUrl.openConnection();
 		JarFile jarFile = connection.getJarFile();
-		Enumeration<JarEntry> jarEntries = jarFile.entries();
+		Enumeration<JarEntry> jarEntries = jarFile.entries();		
+		boolean foundRegisterer = false;
 		
 		while (jarEntries.hasMoreElements()) {
 			String entry = jarEntries.nextElement().getName();
@@ -221,6 +222,7 @@
 					Object registerObject = registerClass.newInstance();
 					if (registerObject instanceof InteropRegisterer) {
 						((InteropRegisterer) registerObject).registerLazy(getContext(), getCompiledContext(), classLoader);
+						foundRegisterer = true;
 					} else {
 						throw new IncompatibleJarException(jar, new ClassCastException("Unknown type for InteropRegisterer"));
 					}
@@ -233,6 +235,9 @@
 				}
 			}
 		}
+		
+		if (!foundRegisterer)
+			throw new IncompatibleJarException(jar, "No STRJ InteropRegisterer classes found");
 	}
 
 	/**

Modified: strc-java/trunk/java/runtime/org/strategoxt/IncompatibleJarException.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/IncompatibleJarException.java	2009-12-09 10:07:41 UTC (rev 20359)
+++ strc-java/trunk/java/runtime/org/strategoxt/IncompatibleJarException.java	2009-12-09 10:12:23 UTC (rev 20360)
@@ -12,7 +12,7 @@
 	private final URL jar;
 
 	public IncompatibleJarException(URL jar) {
-		this(jar, null);
+		this(jar, (Throwable) null);
 	}
 
 	public IncompatibleJarException(URL jar, Throwable cause) {
@@ -20,6 +20,11 @@
 		this.jar = jar;
 	}
 
+	public IncompatibleJarException(URL jar, String message) {
+		super(message + ":" + jar);
+		this.jar = jar;
+	}
+
 	public URL getJar() {
 		return jar;
 	}



From L.C.L.Kats at tudelft.nl  Wed Dec  9 13:24:06 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 09 Dec 2009 12:24:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20361 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego
	strc-java/trunk/java
	strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
Message-ID: <200912091224.nB9CO6wV005792@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-09 12:24:06 +0000 (Wed, 09 Dec 2009)
New Revision: 20361

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20361&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SSL_EXT_report_failure_1_0.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/java-integration.str
   strc-java/trunk/java/spoofax-libs.jar

Log:
Simplified calls to InteropSDefT strategies, improving performance and compatibility with overrides.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2009-12-09 10:12:23 UTC (rev 20360)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2009-12-09 12:24:06 UTC (rev 20361)
@@ -25,8 +25,6 @@
 
     private final IStrategoTerm[] tvars;
 
-    private static int counter = 0;
-
     public CallT(String name, Strategy[] svars, IStrategoTerm[] tvars) {
         this.name = name;
         this.svars = svars;
@@ -52,6 +50,10 @@
             System.err.println("[" + depth + "] - " + sdef.getName());
             depth++;
         }
+
+        Strategy result = sdef.getParametrizedBody(svars, tvars);
+        if (result != null)
+            return addHook(result, env.getVarScope());
     
         String[] formalTermArgs = sdef.getTermParams();
         SVar[] formalStrategyArgs = sdef.getStrategyParams();
@@ -91,7 +93,7 @@
             else {
                 SVar[] stratArgs = new SVar[0];
                 String[] termArgs = new String[0];
-                target = new SDefT(makeTempName(formal.name), stratArgs, termArgs, actual, env.getVarScope());
+                target = new SDefT(SDefT.createAnonymousName(formal.name), stratArgs, termArgs, actual, env.getVarScope());
             }
 
             newScope.addSVar(formal.name, target);
@@ -107,22 +109,9 @@
         }
 
         final VarScope oldVarScope = env.getVarScope();
-        final CallT th = this;
-        Strategy body = sdef.getBody();
-        body.getHook().push(new Hook(){
-        	public IConstruct onSuccess(IContext env) throws InterpreterException {
-                env.restoreVarScope(oldVarScope);
-                env.getStackTracer().popOnSuccess();
-        		return th.getHook().pop().onSuccess(env);
-        	}
-        	public IConstruct onFailure(IContext env) throws InterpreterException {
-        		env.restoreVarScope(oldVarScope);
-        		env.getStackTracer().popOnFailure();
-        		return th.getHook().pop().onFailure(env);
-        	}
-        });
         env.setVarScope(newScope);
-        return body;
+        
+        return addHook(sdef.getBody(), oldVarScope);
     }
 
     public Strategy evalWithArgs(IContext env, Strategy[] sv, IStrategoTerm[] actualTVars) throws InterpreterException {
@@ -140,6 +129,9 @@
         if (sdef == null)
             throw new InterpreterException("Not found '" + name + "'");
 
+        Strategy result = sdef.getParametrizedBody(sv, actualTVars);
+        if (result != null)
+            return addHook(result, env.getVarScope());
     
         String[] formalTermArgs = sdef.getTermParams();
         SVar[] formalStrategyArgs = sdef.getStrategyParams();
@@ -179,7 +171,7 @@
             else {
                 SVar[] stratArgs = new SVar[0];
                 String[] termArgs = new String[0];
-                target = new SDefT(makeTempName(formal.name), stratArgs, termArgs, actual, env.getVarScope());
+                target = new SDefT(SDefT.createAnonymousName(formal.name), stratArgs, termArgs, actual, env.getVarScope());
             }
 
             newScope.addSVar(formal.name, target);
@@ -192,31 +184,30 @@
 
         final VarScope oldVarScope = env.getVarScope();
         env.setVarScope(newScope);
-        final CallT th = this;
-        Strategy body = sdef.getBody();
-        body.getHook().push(new Hook(){
+        
+        return addHook(sdef.getBody(), oldVarScope);
+    }
+
+    private Strategy addHook(Strategy strategy, final VarScope oldVarScope) {
+        strategy.getHook().push(new Hook() {
         	public IConstruct onSuccess(IContext env) throws InterpreterException {
                 env.restoreVarScope(oldVarScope);
                 env.getStackTracer().popOnSuccess();
-        		return th.getHook().pop().onSuccess(env);
+        		return CallT.this.getHook().pop().onSuccess(env);
         	}
         	public IConstruct onFailure(IContext env) throws InterpreterException {
         		env.restoreVarScope(oldVarScope);
         		env.getStackTracer().popOnFailure();
-        		return th.getHook().pop().onFailure(env);
+        		return CallT.this.getHook().pop().onFailure(env);
         	}
         });
-        return body;
+        return strategy;
     }
 
     private IStrategoTerm[] getTermArguments() {
         return tvars;
     }
 
-    private static String makeTempName(String s) {
-        return "<anon_" + s + "_" + counter + ">";
-    }
-
     @Override
     public String toString() {
         return "CallT(\"" + getTargetStrategyName() + "\"," + svars + "," + tvars + ")";

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java	2009-12-09 10:12:23 UTC (rev 20360)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java	2009-12-09 12:24:06 UTC (rev 20361)
@@ -13,8 +13,12 @@
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.VarScope;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SDefT implements IConstruct {
+
+    private static int counter = 0;
+    
     private String name;
 
     private SVar[] strategyArgs;
@@ -107,6 +111,10 @@
         return body;
     }
     
+    public Strategy getParametrizedBody(Strategy[] sargs, IStrategoTerm[] targs) {
+        return null; // overridden InteropSDefT for compiled strategies
+    }
+    
     protected void setBody(Strategy body) {
         this.body = body;
     }
@@ -157,4 +165,8 @@
 	public boolean evaluate(IContext env) throws InterpreterException {
 		return body.evaluate(env);
 	}
+
+    protected static String createAnonymousName(String s) {
+        return "<anon_" + s + "_" + (counter++) + ">";
+    }
 }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2009-12-09 10:12:23 UTC (rev 20360)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2009-12-09 12:24:06 UTC (rev 20361)
@@ -125,34 +125,33 @@
 	public org.spoofax.interpreter.stratego.Strategy getBody() {
 		org.spoofax.interpreter.stratego.Strategy result = super.getBody();
 		if (result == null) {
-			result = new org.spoofax.interpreter.stratego.Strategy() {
-				public IConstruct eval(IContext env) throws InterpreterException {
-					return evaluate(env)
-						? getHook().pop().onSuccess(env)
-						: getHook().pop().onFailure(env);
-				}
-				
-				@Override
-				public boolean evaluate(IContext env) throws InterpreterException {
-					return InteropSDefT.this.evaluate(env);
-				}
-	
-				public void prettyPrint(StupidFormatter fmt) {
-					InteropSDefT.this.prettyPrint(fmt);
-				}
-				
-				@Override
-				protected String getTraceName() {
-					return getName();
-				}
-			};
+			result = new StrategyBody();
 			setBody(result);
 		}
 		return result;
 	}
 	
 	@Override
-	public boolean evaluate(IContext env) throws InterpreterException {
+	public org.spoofax.interpreter.stratego.Strategy getParametrizedBody(
+			final org.spoofax.interpreter.stratego.Strategy[] sargs,
+			final IStrategoTerm[] targs) {
+		
+		return new StrategyBody() {
+			@Override
+			public boolean evaluate(IContext env) throws InterpreterException {
+				SDefT[] sargDefs = new SDefT[sargs.length];
+				for (int i = 0; i < sargs.length; i++) {
+					sargDefs[i] = new SDefT("s" + i, NO_SVARS, NO_STRINGS, sargs[i], env.getVarScope());
+				}
+				return InteropSDefT.this.evaluate(env, InteropStrategy.toInteropStrategies(sargDefs, env), targs);
+			}
+		};
+	}
+	
+	@Override
+	public boolean evaluate(IContext env)
+			throws  InterpreterErrorExit, InterpreterExit, InterpreterException {
+		
 		VarScope scope = env.getVarScope();
 		SVar[] svars = getStrategyParams();
 		String[] tvars = getTermParams();
@@ -171,10 +170,15 @@
 			targs[i] = targ;
 		}
 		
-		Strategy[] sdefargs = InteropStrategy.toInteropStrategies(sargs, env);
+		return evaluate(env, InteropStrategy.toInteropStrategies(sargs, env), targs);
+	}
+
+	private boolean evaluate(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterErrorExit, InterpreterExit, InterpreterException {
+		
 		IStrategoTerm result;
 		try {
-			result = getStrategy().invokeDynamic(compiledContext, env.current(), sdefargs, targs);
+			result = getStrategy().invokeDynamic(compiledContext, env.current(), sargs, targs);
 		} catch (StrategoErrorExit e) {
 			throw new InterpreterErrorExit(e.getMessage(), e.getTerm(), e);
 		} catch (StrategoExit e) {
@@ -212,5 +216,32 @@
 			
 		return strategy;
 	}
+	
+	/**
+	 * The strategy body used by the interpreter.
+	 * 
+	 * @author Lennart Kats <lennart add lclnet.nl>
+	 */
+	private class StrategyBody extends org.spoofax.interpreter.stratego.Strategy {
+		public IConstruct eval(IContext env) throws InterpreterException {
+			return evaluate(env)
+				? getHook().pop().onSuccess(env)
+				: getHook().pop().onFailure(env);
+		}
+		
+		@Override
+		public boolean evaluate(IContext env) throws InterpreterException {
+			return InteropSDefT.this.evaluate(env);
+		}
+
+		public void prettyPrint(StupidFormatter fmt) {
+			InteropSDefT.this.prettyPrint(fmt);
+		}
+		
+		@Override
+		protected String getTraceName() {
+			return getName();
+		}
+	}
 }
 

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/SSL_EXT_report_failure_1_0.java (from rev 20331, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReportWithFailure.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SSL_EXT_report_failure_1_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SSL_EXT_report_failure_1_0.java	2009-12-09 12:24:06 UTC (rev 20361)
@@ -0,0 +1,71 @@
+package org.strategoxt.lang;
+
+import static org.spoofax.interpreter.core.Tools.*;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.stratego_lib.log_0_3;
+import org.strategoxt.stratego_lib.report_failure_1_0;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SSL_EXT_report_failure_1_0 extends report_failure_1_0 {
+	
+	private report_failure_1_0 proceed = instance;
+	
+	private final LogIntercept logIntercept = new LogIntercept();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		synchronized (this) {
+			try {
+				logIntercept.enabled = true;
+				logIntercept.lastMessage = null;
+				logIntercept.lastTerm = null;
+				return proceed.invoke(context, current, s);
+			} catch (StrategoExit e) {
+				if (logIntercept.lastMessage != null && isTermString(logIntercept.lastMessage)) {
+					throw new StrategoErrorExit(asJavaString(logIntercept.lastMessage), logIntercept.lastTerm);
+				} else {
+					throw new StrategoExit(e);
+				}
+			} finally {
+				logIntercept.enabled = false;
+			}
+		}
+	}
+	
+	/**
+	 * Intercepts logging messages.
+	 */
+	private class LogIntercept extends log_0_3 {
+		
+		private final log_0_3 proceed = instance;
+		
+		IStrategoTerm lastTerm;
+		
+		IStrategoTerm lastMessage;
+		
+		boolean enabled;
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm level, IStrategoTerm message, IStrategoTerm term) {
+			if (enabled) {
+				synchronized (SSL_EXT_report_failure_1_0.this) {
+					if (enabled) {
+						lastTerm = term;
+						lastMessage = message;
+					}
+				}
+			}
+			return proceed.invoke(context, current, level, message, term);
+		}
+	}
+}
+
+
+
+
+
+
+

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/java-integration.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/java-integration.str	2009-12-09 10:12:23 UTC (rev 20360)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/java-integration.str	2009-12-09 12:24:06 UTC (rev 20361)
@@ -28,6 +28,11 @@
       SRTS-EXT-fatal-err(|message, <try(concat-strings)> term)
     )
   
+  override report-failure(exit) = // used for with failures
+    SRTS-EXT-report-failure(exit)
+  
+  external SRTS-EXT-report-failure(exit|)
+  
   external SRTS-EXT-fatal-err(|msg, term)
   
   // TODO: exception rethrowing in risky, finally?

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Wed Dec  9 16:36:17 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 09 Dec 2009 15:36:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20364 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego
	strc-java/trunk/java
Message-ID: <200912091536.nB9FaHi9008863@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-09 15:36:16 +0000 (Wed, 09 Dec 2009)
New Revision: 20364

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20364&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Reverted getParametrizedBody() usage for now; not working.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2009-12-09 13:44:38 UTC (rev 20363)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2009-12-09 15:36:16 UTC (rev 20364)
@@ -51,9 +51,13 @@
             depth++;
         }
 
-        Strategy result = sdef.getParametrizedBody(svars, tvars);
-        if (result != null)
-            return addHook(result, env.getVarScope());
+        /* UNDONE: getParametrizedBody is trouble
+        if (svars.length == 0) {
+            Strategy result = sdef.getParametrizedBody(svars, tvars);
+            if (result != null)
+                return addHook(result, env.getVarScope());
+        }
+        */
     
         String[] formalTermArgs = sdef.getTermParams();
         SVar[] formalStrategyArgs = sdef.getStrategyParams();
@@ -129,9 +133,13 @@
         if (sdef == null)
             throw new InterpreterException("Not found '" + name + "'");
 
-        Strategy result = sdef.getParametrizedBody(sv, actualTVars);
-        if (result != null)
-            return addHook(result, env.getVarScope());
+        /* UNDONE: getParametrizedBody is trouble
+        if (sv.length == 0) {
+            Strategy result = sdef.getParametrizedBody(sv, actualTVars);
+            if (result != null)
+                return addHook(result, env.getVarScope());
+        }
+        */
     
         String[] formalTermArgs = sdef.getTermParams();
         SVar[] formalStrategyArgs = sdef.getStrategyParams();

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Wed Dec  9 16:36:30 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 09 Dec 2009 15:36:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20365 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt/lang
Message-ID: <200912091536.nB9FaUIJ008866@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-09 15:36:30 +0000 (Wed, 09 Dec 2009)
New Revision: 20365

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20365&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_report_failure_1_0.java
Removed:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SSL_EXT_report_failure_1_0.java

Log:


Changes:

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_report_failure_1_0.java (from rev 20361, strc-java/trunk/java/runtime/org/strategoxt/lang/SSL_EXT_report_failure_1_0.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_report_failure_1_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_report_failure_1_0.java	2009-12-09 15:36:30 UTC (rev 20365)
@@ -0,0 +1,71 @@
+package org.strategoxt.lang;
+
+import static org.spoofax.interpreter.core.Tools.*;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.stratego_lib.log_0_3;
+import org.strategoxt.stratego_lib.report_failure_1_0;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SRTS_EXT_report_failure_1_0 extends report_failure_1_0 {
+	
+	private report_failure_1_0 proceed = instance;
+	
+	private final LogIntercept logIntercept = new LogIntercept();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		synchronized (this) {
+			try {
+				logIntercept.enabled = true;
+				logIntercept.lastMessage = null;
+				logIntercept.lastTerm = null;
+				return proceed.invoke(context, current, s);
+			} catch (StrategoExit e) {
+				if (logIntercept.lastMessage != null && isTermString(logIntercept.lastMessage)) {
+					throw new StrategoErrorExit(asJavaString(logIntercept.lastMessage), logIntercept.lastTerm);
+				} else {
+					throw new StrategoExit(e);
+				}
+			} finally {
+				logIntercept.enabled = false;
+			}
+		}
+	}
+	
+	/**
+	 * Intercepts logging messages.
+	 */
+	private class LogIntercept extends log_0_3 {
+		
+		private final log_0_3 proceed = instance;
+		
+		IStrategoTerm lastTerm;
+		
+		IStrategoTerm lastMessage;
+		
+		boolean enabled;
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm level, IStrategoTerm message, IStrategoTerm term) {
+			if (enabled) {
+				synchronized (SRTS_EXT_report_failure_1_0.this) {
+					if (enabled) {
+						lastTerm = term;
+						lastMessage = message;
+					}
+				}
+			}
+			return proceed.invoke(context, current, level, message, term);
+		}
+	}
+}
+
+
+
+
+
+
+

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/SSL_EXT_report_failure_1_0.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SSL_EXT_report_failure_1_0.java	2009-12-09 15:36:16 UTC (rev 20364)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SSL_EXT_report_failure_1_0.java	2009-12-09 15:36:30 UTC (rev 20365)
@@ -1,71 +0,0 @@
-package org.strategoxt.lang;
-
-import static org.spoofax.interpreter.core.Tools.*;
-
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.stratego_lib.log_0_3;
-import org.strategoxt.stratego_lib.report_failure_1_0;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class SSL_EXT_report_failure_1_0 extends report_failure_1_0 {
-	
-	private report_failure_1_0 proceed = instance;
-	
-	private final LogIntercept logIntercept = new LogIntercept();
-	
-	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-		synchronized (this) {
-			try {
-				logIntercept.enabled = true;
-				logIntercept.lastMessage = null;
-				logIntercept.lastTerm = null;
-				return proceed.invoke(context, current, s);
-			} catch (StrategoExit e) {
-				if (logIntercept.lastMessage != null && isTermString(logIntercept.lastMessage)) {
-					throw new StrategoErrorExit(asJavaString(logIntercept.lastMessage), logIntercept.lastTerm);
-				} else {
-					throw new StrategoExit(e);
-				}
-			} finally {
-				logIntercept.enabled = false;
-			}
-		}
-	}
-	
-	/**
-	 * Intercepts logging messages.
-	 */
-	private class LogIntercept extends log_0_3 {
-		
-		private final log_0_3 proceed = instance;
-		
-		IStrategoTerm lastTerm;
-		
-		IStrategoTerm lastMessage;
-		
-		boolean enabled;
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm level, IStrategoTerm message, IStrategoTerm term) {
-			if (enabled) {
-				synchronized (SSL_EXT_report_failure_1_0.this) {
-					if (enabled) {
-						lastTerm = term;
-						lastMessage = message;
-					}
-				}
-			}
-			return proceed.invoke(context, current, level, message, term);
-		}
-	}
-}
-
-
-
-
-
-
-



From m.dejonge at tudelft.nl  Thu Dec 10 10:02:24 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 10 Dec 2009 09:02:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20366 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios CriticalScenarios/JustTry
	CriticalScenarios/ParentRegion CriticalScenarios/PreviousRegion
	CriticalScenarios/PriorRegion CriticalScenarios/SeparatorProblems
	CriticalScenarios/ZoomInRegion History
	History/Languages_9_12_2009 History/Languages_9_12_2009_b
	History/Languages_9_12_2009_b/RECOVERY_FAILED src/evaluating
	src/scenariotests src/tests
Message-ID: <200912100902.nBA92OUT024400@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-10 09:02:23 +0000 (Thu, 10 Dec 2009)
New Revision: 20366

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20366&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/line-before-comment.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_BraceLess.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_Double.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_EndOnly.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/UnHeadedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/UnHeadedRegion2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/separatorIndent_bw.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/separatorIndent_bw2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/break32.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/UnopenedIf.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/NextRegion.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/PrevRegion.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ZoomInRegion/LastChild.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009/WebDSL.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Common_unclosedClassBody.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Dryad_test-java-traits.3.break33.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Scope_testB2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Scope_testC3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Scope_testL1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Scope_testL2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/WebDSL.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/ParentRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/ParentRegion_Stratego.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/LastRegion2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava.str_java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava_Comma.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LastStrategy.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Separator_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java

Log:
parent region: separator, indent of startline is used to find the end line

Changes (first 1000 lines of the diffs):

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/LastRegion2.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/LastRegion2.str_java	2009-12-09 15:36:30 UTC (rev 20365)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/LastRegion2.str_java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -1,121 +0,0 @@
-module test-java-traits
-
-imports
-  libstratego-lib
-  libdryad-compiler
-  java-traits
-
-strategies
-
-  main-test-java-traits =
-    option-wrap(
-      fail-fast-option + test-only-option + general-options
-    , test-suite(
-        !"Java trait tests"
-      , 
-        testsuite-section(java-trait-tests   |"Rewrite to Java");
-        testsuite-section(trait-output-tests |"Rewrite to classes");
-        testsuite-section(class-trait-tests  |"Traits from classfiles");
-        testsuite-section(trait-error-tests  |"Error reporting")
-      )
-    )
-
-  test-traits(input, output) =
-    do-test(
-      input
-    , assimilate-java-traits; strip-annos
-    , input
-    , output
-    )
-  
-  /** Unit test: retrieve al error messages; compare. */
-  test-catch-error(input, output) =
-    do-test(
-      input
-    , catch-error
-    , input
-    , output
-    )
-
-  catch-error =
-    let provide-error(catch) =
-      scoped-set-config(!Stage(), !0,
-        assimilate-java-traits
-      );
-      
-      try(dryad-compiler(
-        ?DryadError(_, _); catch; fail // catch & abort at error
-      ))
-    in
-      collect-argument-invokes(provide-error)
-    end
-  
-/** Unit tests. */
-strategies
-
-  java-trait-tests = where(<set-config> (Stage(), 1));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void bar() {} }
-         abstract class $Trait_Bar { void bar() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 {}
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-    /*@SEP_START*/ ); 
-    test-traits( //@START 
-      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
-    , !compilation-unit |[ 
-         class Foo                 { void required() {} ~Semicolon }
-         abstract class $Trait_Bar { void required(); }
-      ]|
-    )) //@END @SEP_END
-  
-    trait-output-tests = where(<set-config> (Stage(), 4));
-      test-traits(
-        !"class Foo with Bar {} trait Bar { void bar() {} }"
-      , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
-    )
-  
-  class-trait-tests =
-    where(
-      <set-config> (Stage(), 4);
-      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
-      <set-config> (Stage(), 1)
-    );
-    test-traits(
-      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
-    , ?[ compilation-unit |[ 
-           class Foo { void bar() {} }
-	     ]|
-	   , _ // bar
-	   ]
-    )
-
-  trait-error-tests =
-    test-catch-error(
-      !"class Foo with Undeclared {}"
-    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
-    );
-    test-catch-error(
-      !"class Foo with Bar {} trait Bar { void required(); }"
-    , ?[DryadError("Missing required method", _)]
-    );
-    test-catch-error(
-      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
-    , ?[DryadError("Circular reference from trait","Loop2")
-       ,DryadError("Circular reference from trait","Loop1")]
-    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/line-before-comment.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/line-before-comment.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/line-before-comment.str	2009-12-10 09:02:23 UTC (rev 20366)
@@ -0,0 +1,142 @@
+module arithmetic
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/Arithmetic
+
+rules // Main editor interface (defined by the .esv files)
+  
+  /**
+   * Analyzes the current program.
+   * Returns a Tuple with errors, warnings, and notes;
+   * each a list of (term, message) tuples.
+   */
+  editor-analyze:
+    (ast, path, project-path) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      try(dr-scope-all-end);
+      dr-scope-all-start;
+      alltd(record-entity)
+    with
+      errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+  
+  /**
+   * Resolves a reference when the user control-clicks or presses F3 in the editor.
+   * For the entities language, only Type(_) nodes are resolved by default.
+   */
+  editor-resolve:
+    (Type(type), position, ast, path, project-path) -> target
+    where
+      target := <GetEntity> type
+
+  /**
+   * Returns "hover help" information for a particular node in the editor.
+   * For references, this rule is invoked using the resolved term.
+   */
+  editor-hover:
+    (target, position, ast, path, project-path) -> <conc-strings> ("Hover help: ", <write-to-string> target)
+  
+  /**
+   * Transforms a selection to Java.
+   */
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result-string)
+    with
+      filename      := <guarantee-extension(|"ppa")> path;
+      result-string := <eval /*; pp-aterm-box; box2text-string(|120) */> selected
+  
+  eval = innermost(evaluate); topdown(try(int-to-string)) //; topdown(del-origin; try(inc; dec))
+  evaluate: add(ea1, ea2) -> r with  r:= <add>(<string-to-int> ea1, <string-to-int> ea2)
+  evaluate: num(x) -> x
+  del-origin =
+    Expressions([del-origin'; dec; inc]; del-origin'); del-origin'
+  
+  del-origin': x#(c*) -> x#(c*)
+  de //@START @END
+  
+  /**
+   * Prints the abstract syntax ATerm of a selection.
+   */
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result-string)
+    with
+      filename      := <guarantee-extension(|"aterm")> path;
+      result-string := <pp-aterm-box; box2text-string(|120)> selected
+  
+  /**
+   * Adds the originating term to the result of a constraint rule,
+   * and concatenates strings in the resulting message if necessary.
+   */
+  include-origin(s):
+    t -> (t', message')
+    where
+      result := <s> t
+    with
+      if not(!result => (t', message)) then
+        message := result;
+        t'      := t
+      end;
+      message' := <try(all(is-string <+ write-to-string); concat-strings)> message
+
+rules // Semantic rules
+    
+  /**
+   * Reports an error if a property type is undefined.
+   */
+  constraint-error:
+    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
+    where
+      not(!type => "String");
+      not(!type => "Int");
+      not(<GetEntity> type)
+  
+  /**
+   * Reports an error if an entity is defined more than once.
+   * This constraint is implemented by testing if the "bag" of
+   * all entities x is not a singleton list.
+   * This error is reported on the entity name x.
+   */
+  constraint-error:
+    Entity(x, _) -> (x, "Duplicate entity name")
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  /**
+   * Reports a warning if an entity name does not start with a capital.
+   * This error is reported on the entity name x.
+   */
+  constraint-warning:
+    Entity(x, _) -> (x, "Entity names must start with a capital")
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  /**
+   * Adds a note to modules named "example."
+   */
+  constraint-note:
+    Module("example", _) -> "This is just an example program in the \"entities\" language (this note is defined in trans/arithmetic.str)"
+
+  /**
+   * Records the definition of an entity in a dynamic rule GetEntity.
+   */
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      rules(
+        GetEntity :+ x -> x
+      )
+
+signature constructors
+
+  // These definitions are not strictly necessary, but they
+  // ensure that the build doesn't break if the example syntax
+  // is changed and these constructors no longer exist.
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava.str_java	2009-12-09 15:36:30 UTC (rev 20365)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava.str_java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -1,122 +0,0 @@
-module test-java-traits
-
-imports
-  libstratego-lib
-  libdryad-compiler
-  java-traits
-
-strategies
-
-  main-test-java-traits =
-    option-wrap(
-      fail-fast-option + test-only-option + general-options
-    , test-suite(
-        !"Java trait tests"
-      , 
-        testsuite-section(java-trait-tests   |"Rewrite to Java");
-        testsuite-section(trait-output-tests |"Rewrite to classes");
-        testsuite-section(class-trait-tests  |"Traits from classfiles");
-        testsuite-section(trait-error-tests  |"Error reporting")
-      )
-    )
-
-  test-traits(input, output) =
-    do-test(
-      input
-    , assimilate-java-traits; strip-annos
-    , input
-    , output
-    )
-  
-  /** Unit test: retrieve al error messages; compare. */
-  test-catch-error(input, output) =
-    do-test(
-      input
-    , catch-error
-    , input
-    , output
-    )
-
-  catch-error =
-    let provide-error(catch) =
-      scoped-set-config(!Stage(), !0,
-        assimilate-java-traits
-      );
-      
-      try(dryad-compiler(
-        ?DryadError(_, _); catch; fail // catch & abort at error
-      ))
-    in
-      collect-argument-invokes(provide-error)
-    end
-  
-/** Unit tests. */
-strategies
-
-  java-trait-tests = where(<set-config> (Stage(), 1));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void bar( //) {} } @START @END @BW_START @BW_END
-         abstract class $Trait_Bar { void bar() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void baz() {} }
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 {}
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
-    , !compilation-unit |[ 
-         class Foo                 { void required() {} ~Semicolon }
-         abstract class $Trait_Bar { void required(); }
-	   ]|
-	)
-  
-  trait-output-tests = where(<set-config> (Stage(), 4));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
-    )
-  
-  class-trait-tests =
-    where(
-      <set-config> (Stage(), 4);
-      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
-      <set-config> (Stage(), 1)
-    );
-    test-traits(
-      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
-    , ?[ compilation-unit |[ 
-           class Foo { void bar() {} }
-	     ]|
-	   , _ // bar
-	   ]
-    )
-
-  trait-error-tests =
-    test-catch-error(
-      !"class Foo with Undeclared {}"
-    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
-    );
-    test-catch-error(
-      !"class Foo with Bar {} trait Bar { void required(); }"
-    , ?[DryadError("Missing required method", _)]
-    );
-    test-catch-error(
-      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
-    , ?[DryadError("Circular reference from trait","Loop2")
-       ,DryadError("Circular reference from trait","Loop1")]
-    )

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava_Comma.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava_Comma.str_java	2009-12-09 15:36:30 UTC (rev 20365)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ErrorInJava_Comma.str_java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -54,13 +54,13 @@
 strategies
 
   java-trait-tests = where(<set-config> (Stage(), 1));
-    test-traits(
+    test-traits()//@START @P_START
       !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , !compilation-unit |[ //@BW_START
-         class Foo                 { void bar() {} //} @START @END  
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }  
          abstract class $Trait_Bar { void bar() {} }
-	   ]| //@BW_END
-	);
+	   ]|
+	);//@END @P_END
     test-traits(
       !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
     , !compilation-unit |[ 

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_BraceLess.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_BraceLess.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_BraceLess.java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -0,0 +1,31 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true //@START @P_START
+    	  return 5; //@END @P_END
+      corrLine3();
+      return 5;
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_Double.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_Double.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_Double.java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -0,0 +1,27 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment()//{ //@START @P_START
+      int corrLine1;
+      return 5;
+  }          //@END @P_END
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_EndOnly.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_EndOnly.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/ScopeNotation_EndOnly.java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -0,0 +1,27 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment()//{ //@START @P_START
+      int corrLine1;
+      return 5;
+  }      //@END @P_END
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/UnHeadedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/UnHeadedRegion.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/UnHeadedRegion.java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){ 
+      if(true)
+    	  return 5;
+      { //@START @P_START
+    	  int i()@    	  
+      ] //@END @P_END
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/UnHeadedRegion2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/UnHeadedRegion2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/UnHeadedRegion2.java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -0,0 +1,32 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){ 
+      if(true){
+    	  return 5;
+      }
+      { //@START @P_START
+    	  int i
+    	  int j;
+      ] //@END @P_END
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/separatorIndent_bw.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/separatorIndent_bw.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/separatorIndent_bw.str_java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit /* ERROR remove |[ */  //@START @P_START
+           class Foo /* ERROR remove { */ void bar() {} }
+	     ]|
+	   , _ // bar
+	   ] //@END @P_END
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/separatorIndent_bw2.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/separatorIndent_bw2.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ParentRegion/separatorIndent_bw2.str_java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -0,0 +1,126 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(//@START @P_START
+      input(  
+    , assimilate-java-traits; strip-annos 8 & \
+    , output @ **
+    ]; //@END //@P_END
+    do-more-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	); 
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LastStrategy.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LastStrategy.str_java	2009-12-09 15:36:30 UTC (rev 20365)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LastStrategy.str_java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -53,7 +53,7 @@
 /** Unit tests. */
 strategies
 
-  java-trait-tests = where(<set-config> (Stage(), 1)); //@BW_START
+  java-trait-tests = where(<set-config> (Stage(), 1)); 
     test-traits(
       !"class Foo with Bar {} trait Bar { void bar() {} }"
     , !compilation-unit |[ 
@@ -76,7 +76,7 @@
          abstract class $Trait_Baz { void baz() {} }
 	   ]|
 	);
-    test-traits(
+    test-traits(//@BW_START
       !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
     , !compilation-unit |[ //@START
          class Foo                 { void required() {} ~Semicolon }

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/break32.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/break32.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/break32.str_java	2009-12-10 09:02:23 UTC (rev 20366)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[  //@START @BW_START
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]| /* ERROR add */ ]| /* ERROR */ /* ERROR add */ ]| /* ERROR */ //@END @BW_END
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+

(1589 diff lines omitted)


From m.dejonge at tudelft.nl  Thu Dec 10 10:07:25 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 10 Dec 2009 09:07:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20367 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912100907.nBA97PEb024444@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-10 09:07:25 +0000 (Thu, 10 Dec 2009)
New Revision: 20367

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20367&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java

Log:
parent and prior regions are measured

Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-10 09:02:23 UTC (rev 20366)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-10 09:07:25 UTC (rev 20367)
@@ -54,29 +54,53 @@
     after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prevRegions): prevRegion(rs) {
 	  for (StructureSkipSuggestion prev : prevRegions) {
 		  String region = rs.getHistory().getFragment(prev);
-		  //System.out.println("KK: "+String.copyValueOf(prev.getAdditionalTokens()));
-		  //System.out.print(region);
 		  String correctedRegion=region.substring(prev.getAdditionalTokens().length);
-		  //System.out.print(correctedRegion);
-		  //System.out.println("uuuuuuuuuuuuuuu");
 		  currentRegion.addPrevRegion(correctedRegion);
-	  }
-		  //System.out.println("**************** PREVIOUS REGIONS *************");
-		  //System.out.println(rs.getHistory().getFragment(prevRegions.get(0)));
-		  //System.out.println("********************************************");
+		  System.out.println("************   PREVIOUS REGION  **********");
+		  System.out.println(correctedRegion);
+		  System.out.println("********************************************");
+	  }		  
     }
     
     pointcut currRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getCurrentSkipSuggestions())&& target(rs);
 
     after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> currentRegions): currRegions(rs) {
-  	  if (!currentRegions.isEmpty()) {
-  		  currentRegion.addCurrRegion(rs.getHistory().getFragment(currentRegions.get(0)));
-  		  //System.out.println("****************** CURRENT REGIONS ****************");
-  		  //System.out.println(rs.getHistory().getFragment(currentRegions.get(0)));
-  		  ////System.out.println("********************************************");
+  	  for (StructureSkipSuggestion aRegion: currentRegions) {
+  		  String region = rs.getHistory().getFragment(aRegion);
+		  String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
+  		  currentRegion.addCurrRegion(correctedRegion);
+  		  	System.out.println("************   CURRENT REGION  **********");
+		    System.out.println(correctedRegion);
+		    System.out.println("********************************************");
   	  }
    }
+    
+    pointcut parentRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getParentSkipSuggestions())&& target(rs);
 
+    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> parRegions): parentRegions(rs) {
+    	for (StructureSkipSuggestion aRegion: parRegions) {
+    		String region = rs.getHistory().getFragment(aRegion);
+  		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
+    		currentRegion.addParentRegion(correctedRegion);
+  		    System.out.println("************   PARENT REGION  **********");
+  		    System.out.println(correctedRegion);
+  		    System.out.println("********************************************");
+  	  }
+   }
+    
+    pointcut priorRegionsPC(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPriorSkipSuggestions())&& target(rs);
+
+    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): priorRegionsPC(rs) {
+    	for (StructureSkipSuggestion aRegion: prRegions) {
+    		String region = rs.getHistory().getFragment(aRegion);
+  		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
+    		currentRegion.addPriorRegion(correctedRegion);
+  		    System.out.println("************   PRIOR REGION  **********");
+  		    System.out.println(correctedRegion);
+  		    System.out.println("********************************************");
+  	  }
+   }
+
    // */
     before(String x, String y, SGLR s): parsing(x, y, s) {
         currentFile=new FileLog();

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-10 09:02:23 UTC (rev 20366)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-10 09:07:25 UTC (rev 20367)
@@ -11,6 +11,8 @@
     private ArrayList<String> inspectedFragments;
     private ArrayList<String> prevRegions;
     private ArrayList<String> currRegions;
+    private ArrayList<String> parentRegions;
+    private ArrayList<String> priorRegions;
     
     public ArrayList<String> getPrevRegions() {
 		return prevRegions;
@@ -24,6 +26,22 @@
 		return currRegions;
 	}
 
+	public void addParentRegion(String prevRegion) {
+		this.parentRegions.add(prevRegion);
+	}
+	
+	public ArrayList<String> getParentRegions() {
+		return parentRegions;
+	}
+
+	public void addPriorRegion(String priorRegion) {
+		this.priorRegions.add(priorRegion);
+	}
+	
+	public ArrayList<String> getPriorRegions() {
+		return priorRegions;
+	}
+	
 	public void addCurrRegion(String prevRegion) {
 		this.currRegions.add(prevRegion);
 	}
@@ -33,6 +51,8 @@
         inspectedFragments=new ArrayList<String>();
         prevRegions=new ArrayList<String>();
         currRegions= new ArrayList<String>();
+        parentRegions= new ArrayList<String>();
+        priorRegions=new ArrayList<String>();
     }
     
     public TreeMap<String, Long> getExecutionTimetable() {



From m.dejonge at tudelft.nl  Thu Dec 10 11:59:36 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 10 Dec 2009 10:59:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20368 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios/PriorRegion CriticalScenarios/Siblings
	src/scenariotests
Message-ID: <200912101059.nBAAxa86025941@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-10 10:59:35 +0000 (Thu, 10 Dec 2009)
New Revision: 20368

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20368&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/unOpenedIf.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/ifElse.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/ifElse_Ext.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PriorRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/SiblingRegion_Java.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/UnopenedIf.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java

Log:
siblings backward

Changes:

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/UnopenedIf.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/UnopenedIf.java	2009-12-10 09:07:25 UTC (rev 20367)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/UnopenedIf.java	2009-12-10 10:59:35 UTC (rev 20368)
@@ -1,32 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){
-     corr2();    
-     return corrInt;
-  }
-
-  private int ErrorFragment(){
-      if(true)
-           return 5;
-      }
-      int j; 
-      int i; 
-      i=5; j=6;
-      doIets(i,j);
-  }      
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  }
-  
-
-}
-

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/unOpenedIf.java (from rev 20366, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/UnopenedIf.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/unOpenedIf.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/unOpenedIf.java	2009-12-10 10:59:35 UTC (rev 20368)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      if(true)//@PR_START @START
+           return 5;
+      }//@PR_END @END
+      int h; 
+      int j; 
+      int i;
+      doIets(i,j);
+      doIets(i,j);
+      doIets(i,j);
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PriorRegion/unOpenedIf.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/ifElse.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/ifElse.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/ifElse.java	2009-12-10 10:59:35 UTC (rev 20368)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true)//@SIB_START @START
+    	  return 5;
+      }
+      else
+    	  return 4;//@SIB_END @END
+      corrLine3();
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/ifElse_Ext.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/ifElse_Ext.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/ifElse_Ext.java	2009-12-10 10:59:35 UTC (rev 20368)
@@ -0,0 +1,37 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true) //@SIB_START @START
+    	  return 5;
+      }
+      else if(false)
+    	  return 4;
+      else{
+    	  return 6;
+      } //@END @SIB_END
+      corrLine3();
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors.java	2009-12-10 10:59:35 UTC (rev 20368)
@@ -0,0 +1,36 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true)}
+    	  return 5;
+      }
+      if(f==g))
+    	  return 4;
+      mmm mmm mmm
+      bla(;
+      corrLine3();
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-10 09:07:25 UTC (rev 20367)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-10 10:59:35 UTC (rev 20368)
@@ -107,6 +107,19 @@
 
 	protected abstract ArrayList<String> getActualRegions(FileLog fileLog);
 
+	protected void assertActualRegionsContainExpected(String fileName)
+	throws FileNotFoundException, IOException,
+	InvalidParseTableException, NoRecoveryRulesException,
+	SGLRException, Exception {
+		FileLog fileLog= createFilelog(fileName);
+		ArrayList<String> actualFragments=getActualRegions(fileLog);
+		for (int i=0; i<actualFragments.size(); i++) {
+			actualFragments.set(i, actualFragments.get(i).trim());
+		}
+		String expectedRegion=getExpectedRegion(fileName);
+		Assert.assertTrue(actualFragments.contains(expectedRegion));
+	}
+
 	private void writeParseTree(String testFile) throws FileNotFoundException, IOException,
 			InvalidParseTableException, NoRecoveryRulesException, SGLRException {  
 		FileInputStream fis=new FileInputStream(testFile);	

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java	2009-12-10 09:07:25 UTC (rev 20367)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java	2009-12-10 10:59:35 UTC (rev 20368)
@@ -11,4 +11,6 @@
 	public static final String DIR_CRITICAL_SCENARIOS_SEPARATOR = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"SeparatorProblems";
 	public static final String DIR_JUST_TRY = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"JustTry";
 	public static final String DIR_CRITICAL_SCENARIOS_PARENT = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"ParentRegion";
+	public static final String DIR_CRITICAL_SCENARIOS_PRIOR = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"PriorRegion";
+	public static final String DIR_CRITICAL_SCENARIOS_SIBLING = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Siblings";
 }

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PriorRegion_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PriorRegion_Java.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PriorRegion_Java.java	2009-12-10 10:59:35 UTC (rev 20368)
@@ -0,0 +1,42 @@
+package scenariotests;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import logging.FileLog;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.NoRecoveryRulesException;
+import org.spoofax.jsglr.SGLRException;
+
+import testrun.InfraStructure;
+
+
+public class PriorRegion_Java extends CriticalScenarios_Base{
+	
+	public PriorRegion_Java() throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException{
+		super.setParseTable(InfraStructure.JAVA_GRAMMAR);
+		directory=InfrastructureCriticalScenarios.DIR_CRITICAL_SCENARIOS_PRIOR;
+		END_SIGN = "@PR_END";
+		START_SIGN = "@PR_START";
+	}
+	
+	protected String getFragmentForComparing(FileLog fileLog){ 
+		return fileLog.getRegionInfo().get(0).getPriorRegions().get(0).trim();
+	}
+
+	@Test
+	public void testUnOpenedIf() throws Exception{
+		String fileName="unOpenedIf.java";
+		assertActualRegionsContainExpected(fileName);		
+	}
+
+	@Override
+	protected ArrayList<String> getActualRegions(FileLog fileLog) {
+		return fileLog.getRegionInfo().get(0).getPriorRegions();
+	}	
+
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/SiblingRegion_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/SiblingRegion_Java.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/SiblingRegion_Java.java	2009-12-10 10:59:35 UTC (rev 20368)
@@ -0,0 +1,48 @@
+package scenariotests;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import logging.FileLog;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.NoRecoveryRulesException;
+import org.spoofax.jsglr.SGLRException;
+
+import testrun.InfraStructure;
+
+
+public class SiblingRegion_Java extends CriticalScenarios_Base{
+	
+	public SiblingRegion_Java() throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException{
+		super.setParseTable(InfraStructure.JAVA_GRAMMAR);
+		directory=InfrastructureCriticalScenarios.DIR_CRITICAL_SCENARIOS_SIBLING;
+		END_SIGN = "@SIB_END";
+		START_SIGN = "@SIB_START";
+	}
+	
+	protected String getFragmentForComparing(FileLog fileLog){ 
+		return fileLog.getRegionInfo().get(0).getPriorRegions().get(0).trim();
+	}
+
+	@Test
+	public void testIfElse() throws Exception{
+		String fileName="ifElse.java";
+		assertActualRegionsContainExpected(fileName);		
+	}
+
+	@Test
+	public void testIfElseExt() throws Exception{
+		String fileName="ifElse_Ext.java";
+		assertActualRegionsContainExpected(fileName);		
+	}
+	
+	@Override
+	protected ArrayList<String> getActualRegions(FileLog fileLog) {
+		return fileLog.getRegionInfo().get(0).getSiblingRegions();
+	}	
+
+}



From m.dejonge at tudelft.nl  Thu Dec 10 12:00:09 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 10 Dec 2009 11:00:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20369 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912101100.nBAB097V026115@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-10 11:00:09 +0000 (Thu, 10 Dec 2009)
New Revision: 20369

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20369&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java

Log:
siblings backward

Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-10 10:59:35 UTC (rev 20368)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-10 11:00:09 UTC (rev 20369)
@@ -100,7 +100,20 @@
   		    System.out.println("********************************************");
   	  }
    }
+    
+    pointcut sibRegionsPC(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingBackwardSuggestions())&& target(rs);
 
+    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): sibRegionsPC(rs) {
+    	for (StructureSkipSuggestion aRegion: prRegions) {
+    		String region = rs.getHistory().getFragment(aRegion);
+  		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
+    		currentRegion.addSiblingRegion(correctedRegion);
+  		    System.out.println("************   SIBLING REGION  **********");
+  		    System.out.println(correctedRegion);
+  		    System.out.println("********************************************");
+  	  }
+   }
+
    // */
     before(String x, String y, SGLR s): parsing(x, y, s) {
         currentFile=new FileLog();

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-10 10:59:35 UTC (rev 20368)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-10 11:00:09 UTC (rev 20369)
@@ -13,6 +13,7 @@
     private ArrayList<String> currRegions;
     private ArrayList<String> parentRegions;
     private ArrayList<String> priorRegions;
+    private ArrayList<String> siblingRegions;
     
     public ArrayList<String> getPrevRegions() {
 		return prevRegions;
@@ -42,6 +43,14 @@
 		return priorRegions;
 	}
 	
+	public void addSiblingRegion(String sibRegion) {
+		this.siblingRegions.add(sibRegion);
+	}
+	
+	public ArrayList<String> getSiblingRegions() {
+		return siblingRegions;
+	}
+	
 	public void addCurrRegion(String prevRegion) {
 		this.currRegions.add(prevRegion);
 	}
@@ -53,6 +62,7 @@
         currRegions= new ArrayList<String>();
         parentRegions= new ArrayList<String>();
         priorRegions=new ArrayList<String>();
+        siblingRegions=new ArrayList<String>();
     }
     
     public TreeMap<String, Long> getExecutionTimetable() {



From m.dejonge at tudelft.nl  Thu Dec 10 12:01:15 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 10 Dec 2009 11:01:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20370 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912101101.nBAB1F67026351@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-10 11:01:15 +0000 (Thu, 10 Dec 2009)
New Revision: 20370

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20370&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java

Log:
sibling bw + prior

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-10 11:00:09 UTC (rev 20369)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-10 11:01:15 UTC (rev 20370)
@@ -58,30 +58,89 @@
 
     public StructureSkipSuggestion getErroneousPrefix() throws IOException {
         // TODO Auto-generated method stub
-        return null;
+        return new StructureSkipSuggestion();
     }
 
-    public ArrayList<StructureSkipSuggestion> getParentSkipSuggestions()
-            throws IOException {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
     public ArrayList<StructureSkipSuggestion> getPickErroneousChild(
             StructureSkipSuggestion prevRegion) throws IOException {
         // TODO Auto-generated method stub
-        return null;
+        return new ArrayList<StructureSkipSuggestion>();
     }
+    
+    public ArrayList<StructureSkipSuggestion> getParentSkipSuggestions() throws IOException{
+        int errorLineIndex=failureIndex;
+        IndentInfo startLine = getHistory().getLine(errorLineIndex);
+        int startSkipIndex=findParentBegin(errorLineIndex);
+        return selectRegion(startSkipIndex);
+        /*
+        IndentInfo endSkip=findParentEnd(startLine);
+        IndentInfo startSkip = IndentInfo.cloneIndentInfo(getHistory().getLine(startSkipIndex));
+        ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
+        StructureSkipSuggestion skipConstruct=new StructureSkipSuggestion();            
+        skipConstruct.setSkipLocations(startSkip, endSkip, startSkipIndex, -1);
+        skipSuggestions.add(skipConstruct);                
+        return skipSuggestions;
+        */
+    }   
+    /*
+    private IndentInfo findParentEnd(IndentInfo startLine) throws IOException{
+        getHistory().setTokenIndex(startLine.getTokensSeen());
+        int indentStartLine=startLine.getIndentValue();
+        IndentInfo nextLine=skipLine(startLine);
+        while(myParser.currentToken!=SGLR.EOF){            
+            int indentSkipPosition=nextLine.getIndentValue();
+            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
+            if (shift==indentShift.DEDENT) {  
+                if(isScopeClosingLine(nextLine)){
+                    nextLine=skipLine(nextLine);
+                    if(nextLine==null)
+                        break;
+                }                              
+                return nextLine;                
+            
+            }
+            nextLine=skipLine(nextLine);
+        }         
+        return nextLine; //EOF
+    }*/
 
+    private int findParentBegin(int startLineIndex) throws IOException{
+        IndentInfo startLine = IndentInfo.cloneIndentInfo(getHistory().getLine(startLineIndex));
+        int indentStartLine=separatorIndent(startLine); //startLine.getIndentValue();
+        int indexHistoryLines=startLineIndex;
+        while(indexHistoryLines > 0){
+            indexHistoryLines-=1;
+            IndentInfo currentLine=getHistory().getLine(indexHistoryLines);
+            int indentSkipPosition=currentLine.getIndentValue();
+            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
+            if (shift==indentShift.DEDENT){
+                if(isScopeOpeningLine(indexHistoryLines))
+                {
+                        IndentInfo prevLine = getHistory().getLine(indexHistoryLines-1);
+                        if((!isScopeClosingLine(prevLine)) && calculateShift(currentLine.getIndentValue(), prevLine.getIndentValue())==indentShift.SAME_INDENT){                            
+                            return indexHistoryLines-1;
+                        }                        
+                }                
+                return indexHistoryLines;
+            }            
+        }        
+        return 0; //SOF
+    } 
+    
     public ArrayList<StructureSkipSuggestion> getPreviousSkipSuggestions()
             throws IOException {
-        ArrayList<StructureSkipSuggestion> prevRegions=new ArrayList<StructureSkipSuggestion>();
         int indexEnd=failureIndex;
-        if(isScopeClosingLine(indexEnd))
+        return selectPrevRegion(indexEnd);
+    }
+
+    private ArrayList<StructureSkipSuggestion> selectPrevRegion(int indexEnd)
+            throws IOException {
+        ArrayList<StructureSkipSuggestion> prevRegions=new ArrayList<StructureSkipSuggestion>();       
+        boolean onClosing=isScopeClosingLine(indexEnd);
+        int indexStart = backwardsSkip(indexEnd, onClosing);
+        if(onClosing)
             indexEnd++;         
         IndentInfo endSkip=IndentInfo.cloneIndentInfo(getHistory().getLine(indexEnd));
-        //int indexStart = indexEnd-3;
-        int indexStart = backwardsSkip(indexEnd);
         if(indexStart<0)
             return prevRegions;
         IndentInfo startSkip=IndentInfo.cloneIndentInfo(getHistory().getLine(indexStart));
@@ -123,10 +182,10 @@
         }
     }
     
-    private int backwardsSkip(int indexLine) throws IOException { 
+    private int backwardsSkip(int indexLine, boolean onClosing) throws IOException { 
         int indentValue = getHistory().getLine(indexLine).getIndentValue();
         boolean sawChilds=false;
-        boolean closingSeen=false;
+        boolean closingSeen=onClosing;
         boolean openingSeen=false;
         boolean ignoreSeps=!isSeparatorStartingLine(indexLine);
         int indexHistoryLines=indexLine;
@@ -243,32 +302,60 @@
 
     public ArrayList<StructureSkipSuggestion> getPriorSkipSuggestions()
             throws IOException {
-        // TODO Auto-generated method stub
-        return null;
+        ArrayList<StructureSkipSuggestion> priorRegions= new ArrayList<StructureSkipSuggestion>();
+        int pos=failureIndex;
+        ArrayList<StructureSkipSuggestion> prevRegions=selectPrevRegion(pos);
+        do{
+            if(!prevRegions.isEmpty())
+                pos=prevRegions.get(0).getIndexHistoryStart();
+            prevRegions=selectPrevRegion(pos);
+            priorRegions.addAll(prevRegions);
+        }while (pos>0 && !prevRegions.isEmpty());
+            
+        return priorRegions;
     }
 
     public ArrayList<StructureSkipSuggestion> getSibblingBackwardSuggestions()
             throws IOException {
-        // TODO Auto-generated method stub
-        return null;
+        ArrayList<StructureSkipSuggestion> bwSkips=new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> priorSiblings=new ArrayList<StructureSkipSuggestion>();
+        priorSiblings.addAll(selectPrevRegion(failureIndex));
+        priorSiblings.addAll(getPriorSkipSuggestions());
+        ArrayList<StructureSkipSuggestion> currentRegionSuggestions=selectRegion(failureIndex);
+        for (StructureSkipSuggestion currSugestion : currentRegionSuggestions) {
+            for (int i = 0; i < priorSiblings.size(); i++) {
+                StructureSkipSuggestion priorSuggestion=priorSiblings.get(i);
+                StructureSkipSuggestion mergedSkip=mergeRegions(currSugestion, priorSuggestion);
+                bwSkips.add(mergedSkip);
+            }
+        }
+        return bwSkips;
     }
 
+    private StructureSkipSuggestion mergeRegions(StructureSkipSuggestion fwSuggestion,
+            StructureSkipSuggestion bwSuggestion) {
+        StructureSkipSuggestion mergedSkip=new StructureSkipSuggestion();
+        mergedSkip.setSkipLocations(IndentInfo.cloneIndentInfo(bwSuggestion.getStartSkip()), IndentInfo.cloneIndentInfo(fwSuggestion.getEndSkip()), bwSuggestion.getIndexHistoryStart(), fwSuggestion.getIndexHistoryEnd());
+        mergedSkip.setAdditionalTokens(bwSuggestion.getAdditionalTokens());
+        return mergedSkip;
+    }
+
     public ArrayList<StructureSkipSuggestion> getSibblingForwardSuggestions()
             throws IOException {
         // TODO Auto-generated method stub
-        return null;
+        return new ArrayList<StructureSkipSuggestion>();
     }
 
     public ArrayList<StructureSkipSuggestion> getSibblingSurroundingSuggestions()
             throws IOException {
         // TODO Auto-generated method stub
-        return null;
+        return new ArrayList<StructureSkipSuggestion>();
     }
 
     public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(
             StructureSkipSuggestion prevRegion) {
         // TODO Auto-generated method stub
-        return null;
+        return new ArrayList<StructureSkipSuggestion>();
     }
 
     public void setFailureIndex(int failureIndex) {
@@ -277,7 +364,7 @@
     
     private ArrayList<IndentInfo> findCurrentEnd(IndentInfo startLine) throws IOException{
         getHistory().setTokenIndex(startLine.getTokensSeen());
-        int indentStartLine=startLine.getIndentValue();        
+        int indentStartLine=separatorIndent(startLine);        
         boolean hasIndentChilds=false;
         boolean isSecondLine=true;
         ArrayList<IndentInfo> endLocations=new ArrayList<IndentInfo>();



From m.dejonge at tudelft.nl  Thu Dec 10 12:01:55 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 10 Dec 2009 11:01:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20371 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912101101.nBAB1trc026364@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-10 11:01:55 +0000 (Thu, 10 Dec 2009)
New Revision: 20371

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20371&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipSuggestion.java

Log:
additional chars to support separator skipping

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipSuggestion.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipSuggestion.java	2009-12-10 11:01:15 UTC (rev 20370)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipSuggestion.java	2009-12-10 11:01:55 UTC (rev 20371)
@@ -6,6 +6,7 @@
     private IndentInfo endSkip; 
     private int indexHistoryStart;
     private int indexHistoryEnd;
+    private char[] additionalTokens;
     
     public int getIndexHistoryStart() {
         return indexHistoryStart;
@@ -44,6 +45,7 @@
     public StructureSkipSuggestion(){
         indexHistoryEnd=-1;
         indexHistoryStart=-1;
+        additionalTokens=new char[0];
     }   
     
     public IndentInfo getStartSkip() {
@@ -65,4 +67,12 @@
         indexHistoryEnd=indexEnd;
         setSkipLocations(startSkip, endSkip);
     }
+    
+    public void setAdditionalTokens(char[] toParse) {
+        additionalTokens=toParse;
+    }
+
+    public char[] getAdditionalTokens() {
+        return additionalTokens;
+    }    
 }



From L.C.L.Kats at tudelft.nl  Thu Dec 10 16:48:23 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 10 Dec 2009 15:48:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20372 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego
	strc-java/trunk/java
	strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
	strc-java/trunk/trans
Message-ID: <200912101548.nBAFmNDI031216@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-10 15:48:23 +0000 (Thu, 10 Dec 2009)
New Revision: 20372

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20372&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/report_failure_compat_1_0.java
Removed:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_report_failure_1_0.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/java-integration.str
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/trans/strj.str

Log:
Fixed exceptions thrown for "with" clauses.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	2009-12-10 11:01:55 UTC (rev 20371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	2009-12-10 15:48:23 UTC (rev 20372)
@@ -1,5 +1,7 @@
 package org.spoofax.interpreter.core;
 
+import static java.lang.Math.*;
+
 import java.io.PrintStream;
 
 import org.spoofax.interpreter.library.IOAgent;
@@ -99,6 +101,12 @@
         return results;
     }
     
+    public void setTrace(String[] trace) {
+        currentDepth = min(trace.length, currentDepth);
+        failureDepth = trace.length;
+        frames = trace;
+    }
+    
     /**
      * Prints the stack trace to the error output stream of the IOAgent.
      */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2009-12-10 11:01:55 UTC (rev 20371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2009-12-10 15:48:23 UTC (rev 20372)
@@ -38,13 +38,15 @@
         if (DebugUtil.isDebugging()) {
             debug("CallT.eval() - ", env.current());
         }
-        
-        env.getStackTracer().push(name);
 
     	SDefT sdef = env.lookupSVar(name);
     	
         if (sdef == null)
             throw new InterpreterException("Not found '" + name + "'");
+        
+        boolean isCompiledStrategy = sdef.isCompiledStrategy();
+        if (!isCompiledStrategy)
+            env.getStackTracer().push(name);
 
         if(DebugUtil.tracing) {
             System.err.println("[" + depth + "] - " + sdef.getName());
@@ -115,7 +117,7 @@
         final VarScope oldVarScope = env.getVarScope();
         env.setVarScope(newScope);
         
-        return addHook(sdef.getBody(), oldVarScope);
+        return addHook(sdef.getBody(), isCompiledStrategy, oldVarScope);
     }
 
     public Strategy evalWithArgs(IContext env, Strategy[] sv, IStrategoTerm[] actualTVars) throws InterpreterException {
@@ -125,13 +127,15 @@
         if (DebugUtil.isDebugging()) {
             debug("CallT.eval() - ", env.current());
         }
-        
-        env.getStackTracer().push(name);
 
         SDefT sdef = env.lookupSVar(name); //getsdef(env);
     	
         if (sdef == null)
             throw new InterpreterException("Not found '" + name + "'");
+        
+        boolean isCompiledStrategy = sdef.isCompiledStrategy();
+        if (!isCompiledStrategy)
+            env.getStackTracer().push(name);
 
         /* UNDONE: getParametrizedBody is trouble
         if (sv.length == 0) {
@@ -193,19 +197,21 @@
         final VarScope oldVarScope = env.getVarScope();
         env.setVarScope(newScope);
         
-        return addHook(sdef.getBody(), oldVarScope);
+        return addHook(sdef.getBody(), isCompiledStrategy, oldVarScope);
     }
 
-    private Strategy addHook(Strategy strategy, final VarScope oldVarScope) {
+    private Strategy addHook(Strategy strategy, final boolean isCompiledStrategy, final VarScope oldVarScope) {
         strategy.getHook().push(new Hook() {
         	public IConstruct onSuccess(IContext env) throws InterpreterException {
                 env.restoreVarScope(oldVarScope);
-                env.getStackTracer().popOnSuccess();
+                if (!isCompiledStrategy)
+                    env.getStackTracer().popOnSuccess();
         		return CallT.this.getHook().pop().onSuccess(env);
         	}
         	public IConstruct onFailure(IContext env) throws InterpreterException {
         		env.restoreVarScope(oldVarScope);
-        		env.getStackTracer().popOnFailure();
+                if (!isCompiledStrategy)
+                    env.getStackTracer().popOnFailure();
         		return CallT.this.getHook().pop().onFailure(env);
         	}
         });

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java	2009-12-10 11:01:55 UTC (rev 20371)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java	2009-12-10 15:48:23 UTC (rev 20372)
@@ -115,6 +115,10 @@
         return null; // overridden InteropSDefT for compiled strategies
     }
     
+    public boolean isCompiledStrategy() {
+        return false; // overridden InteropSDefT for compiled strategies
+    }
+    
     protected void setBody(Strategy body) {
         this.body = body;
     }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2009-12-10 11:01:55 UTC (rev 20371)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2009-12-10 15:48:23 UTC (rev 20372)
@@ -72,6 +72,11 @@
 	protected void setName(String name) {
 		throw new UnsupportedOperationException();
 	}
+    
+    @Override
+    public boolean isCompiledStrategy() {
+        return true;
+    }
 
 	@Override
 	public SVar[] getStrategyParams() {

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_report_failure_1_0.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_report_failure_1_0.java	2009-12-10 11:01:55 UTC (rev 20371)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_report_failure_1_0.java	2009-12-10 15:48:23 UTC (rev 20372)
@@ -1,71 +0,0 @@
-package org.strategoxt.lang;
-
-import static org.spoofax.interpreter.core.Tools.*;
-
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.stratego_lib.log_0_3;
-import org.strategoxt.stratego_lib.report_failure_1_0;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class SRTS_EXT_report_failure_1_0 extends report_failure_1_0 {
-	
-	private report_failure_1_0 proceed = instance;
-	
-	private final LogIntercept logIntercept = new LogIntercept();
-	
-	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-		synchronized (this) {
-			try {
-				logIntercept.enabled = true;
-				logIntercept.lastMessage = null;
-				logIntercept.lastTerm = null;
-				return proceed.invoke(context, current, s);
-			} catch (StrategoExit e) {
-				if (logIntercept.lastMessage != null && isTermString(logIntercept.lastMessage)) {
-					throw new StrategoErrorExit(asJavaString(logIntercept.lastMessage), logIntercept.lastTerm);
-				} else {
-					throw new StrategoExit(e);
-				}
-			} finally {
-				logIntercept.enabled = false;
-			}
-		}
-	}
-	
-	/**
-	 * Intercepts logging messages.
-	 */
-	private class LogIntercept extends log_0_3 {
-		
-		private final log_0_3 proceed = instance;
-		
-		IStrategoTerm lastTerm;
-		
-		IStrategoTerm lastMessage;
-		
-		boolean enabled;
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm level, IStrategoTerm message, IStrategoTerm term) {
-			if (enabled) {
-				synchronized (SRTS_EXT_report_failure_1_0.this) {
-					if (enabled) {
-						lastTerm = term;
-						lastMessage = message;
-					}
-				}
-			}
-			return proceed.invoke(context, current, level, message, term);
-		}
-	}
-}
-
-
-
-
-
-
-

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-12-10 11:01:55 UTC (rev 20371)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-12-10 15:48:23 UTC (rev 20372)
@@ -45,8 +45,7 @@
 	public void activateComponent(String component) {
 		if ("stratego_lib".equals(component)) {
 			context.addOperatorRegistry(new CompatLibrary());
-			// DEBUG
-			// SRTS_all.instance = new StackSaver(SRTS_all.instance);
+			report_failure_compat_1_0.init();
 		} else if ("stratego_sglr".equals(component)) {
 			WrappedATermFactory atermFactory = new WrappedATermFactory();
 			context.addOperatorRegistry(new JSGLRLibrary(atermFactory));

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/java-integration.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/java-integration.str	2009-12-10 11:01:55 UTC (rev 20371)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/java-integration.str	2009-12-10 15:48:23 UTC (rev 20372)
@@ -28,11 +28,6 @@
       SRTS-EXT-fatal-err(|message, <try(concat-strings)> term)
     )
   
-  override report-failure(exit) = // used for with failures
-    SRTS-EXT-report-failure(exit)
-  
-  external SRTS-EXT-report-failure(exit|)
-  
   external SRTS-EXT-fatal-err(|msg, term)
   
   // TODO: exception rethrowing in risky, finally?

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/report_failure_compat_1_0.java (from rev 20365, strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_report_failure_1_0.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/report_failure_compat_1_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/report_failure_compat_1_0.java	2009-12-10 15:48:23 UTC (rev 20372)
@@ -0,0 +1,93 @@
+package org.strategoxt.lang.compat;
+
+import static org.spoofax.interpreter.core.Tools.*;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.StrategoErrorExit;
+import org.strategoxt.lang.StrategoExit;
+import org.strategoxt.lang.Strategy;
+import org.strategoxt.stratego_lib.log_0_2;
+import org.strategoxt.stratego_lib.report_failure_1_0;
+
+/**
+ * Overrides report-failure(s) to throw a proper StrategoErrorExit exception
+ * (used for with clause failures). 
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class report_failure_compat_1_0 extends report_failure_1_0 {
+	
+	private static volatile boolean isInited;
+	
+	private final report_failure_1_0 proceed = instance;
+	
+	private final LogIntercept logIntercept = new LogIntercept();
+
+	public static void init() {
+		if (!isInited) {
+			report_failure_1_0.instance = new report_failure_compat_1_0();
+			isInited = true;
+		}
+	}
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		synchronized (this) {
+			String[] trace = context.getTrace();
+			try {
+				logIntercept.proceed = log_0_2.instance;
+				logIntercept.enabled = true;
+				log_0_2.instance = logIntercept;
+				
+				return proceed.invoke(context, current, s);
+			} catch (StrategoExit e) {
+				IStrategoTerm message = logIntercept.lastMessage.get();
+				IStrategoTerm term = logIntercept.lastTerm.get();
+				context.setTrace(trace);
+				if (message != null && isTermString(message)) {
+					throw new StrategoErrorExit(asJavaString(message), term);
+				} else {
+					throw new StrategoExit(e);
+				}
+			} finally {
+				log_0_2.instance = logIntercept.proceed;
+				logIntercept.enabled = false;
+			}
+		}
+	}
+	
+	/**
+	 * Intercepts logging messages.
+	 */
+	private class LogIntercept extends log_0_2 {
+		
+		log_0_2 proceed;
+		
+		ThreadLocal<IStrategoTerm> lastTerm = new ThreadLocal<IStrategoTerm>();
+		
+		ThreadLocal<IStrategoTerm> lastMessage = new ThreadLocal<IStrategoTerm>();
+		
+		boolean enabled;
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm level, IStrategoTerm message) {
+			if (enabled) {
+				synchronized (report_failure_compat_1_0.this) {
+					if (enabled) {
+						lastTerm.set(current);
+						lastMessage.set(message);
+					}
+				}
+			}
+			return proceed.invoke(context, current, level, message);
+		}
+	}
+}
+
+
+
+
+
+
+

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/trans/strj.str
===================================================================
--- strc-java/trunk/trans/strj.str	2009-12-10 11:01:55 UTC (rev 20371)
+++ strc-java/trunk/trans/strj.str	2009-12-10 15:48:23 UTC (rev 20372)
@@ -49,7 +49,7 @@
     end
   ; try(mark-always-needed(|<get-config> "-m", 0, 0))
   ; strc-optimize
-    // TODO: strc-export-external-defs
+  // TODO; strc-export-external-defs!
   ; strc-output-frontend
   ; s2j
   ; with(clean-output-dir)



From m.dejonge at tudelft.nl  Thu Dec 10 16:58:39 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 10 Dec 2009 15:58:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20373 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios/Siblings
	History/Languages_9_12_2009_b/RECOVERY_FAILED Input/Common
	Input/Scope src/evaluating src/scenariotests
Message-ID: <200912101558.nBAFwdYw031331@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-10 15:58:39 +0000 (Thu, 10 Dec 2009)
New Revision: 20373

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20373&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors_bw.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Dryad_test-java-traits.3.break33.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedClassBody.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testL2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/SiblingRegion_Java.java

Log:
surrounding-siblings

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors.java	2009-12-10 15:48:23 UTC (rev 20372)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors.java	2009-12-10 15:58:39 UTC (rev 20373)
@@ -11,17 +11,21 @@
   }
 
   private int ErrorFragment(){
+	  int j;
       int corrLine1;
-      corrLine2();
-      if(true)}
+      corrLine2(); // @SIB_START
+      if(true) //@START 
     	  return 5;
       }
+      int i;
       if(f==g))
     	  return 4;
       mmm mmm mmm
-      bla(;
-      corrLine3();
-      corrLine3();
+      bla(; //@END //@SIB_END
+      corrLine3(); 
+      corrLine3(); 
+      bla();
+      int i;
   }      
   
   private int correctMethod2(){

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors_bw.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors_bw.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Siblings/multipleErrors_bw.java	2009-12-10 15:58:39 UTC (rev 20373)
@@ -0,0 +1,36 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true) //@START @SIB_START
+    	  return 5;
+      }
+      int i;
+      if(f==g))
+    	  return 4; //@END @SIB_END
+      bla();
+      corrLine3();
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Dryad_test-java-traits.3.break33.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Dryad_test-java-traits.3.break33.str_java	2009-12-10 15:48:23 UTC (rev 20372)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_9_12_2009_b/RECOVERY_FAILED/Input_Dryad_test-java-traits.3.break33.str_java	2009-12-10 15:58:39 UTC (rev 20373)
@@ -29,7 +29,7 @@
     )
   
   /** Unit test: retrieve al error messages; compare. /* ERROR removing "end of comment ->"  /* ERROR add */ ( /* ERROR */ //@START
-/* ERROR add */ ; /* ERROR */  //@END
+  /* ERROR add */ ; /* ERROR */  //@END
   test-catch-error(input, output) =
     do-test(
       input

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedClassBody.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedClassBody.java	2009-12-10 15:48:23 UTC (rev 20372)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedClassBody.java	2009-12-10 15:58:39 UTC (rev 20373)
@@ -1,4 +1,4 @@
-class X  //@START
+class X  
 { 
   private int correctMethod1()
   { 
@@ -16,4 +16,4 @@
   }
 /*}*/
   
-//@END
+

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB2.java	2009-12-10 15:48:23 UTC (rev 20372)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB2.java	2009-12-10 15:58:39 UTC (rev 20373)
@@ -1,5 +1,5 @@
 /* Bumpy road - Incomplete */
-class C { //@START
+class C { 
 	void m() {
 		int a;
 	}
@@ -10,4 +10,4 @@
 		int c;
 	}
 	void p() {
-		int d; /*	} }*/ //@END
+		int d; /*	} }*/ 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testL2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testL2.java	2009-12-10 15:48:23 UTC (rev 20372)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testL2.java	2009-12-10 15:58:39 UTC (rev 20373)
@@ -1,5 +1,5 @@
 /* Misinterpreted statements - if */
-class C { //@START
+class C { 
 	void m() {
 		int a;
 		if (true) {
@@ -27,4 +27,4 @@
 		}
 		int d;
 	}
-	int k;//} //} //@END
+	int k;//} //} 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java	2009-12-10 15:48:23 UTC (rev 20372)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java	2009-12-10 15:58:39 UTC (rev 20373)
@@ -21,10 +21,22 @@
 		myFilePaths=paths;
 	}
 	
-	public void saveFilesInResultDir() throws IOException{		
-		ArrayList<String> failures=testrun.getTotalStats().getResultList(Evaluation.RECOVERY_FAILED);
+	public void saveFilesInResultDir() throws IOException{
+		saveFiles(Evaluation.RECOVERY_FAILED);
+		saveFiles(Evaluation.EXACT_EXCEPT_ONE);
+		saveFiles(Evaluation.NEAR_EXACT);
+		saveFiles(Evaluation.MERGED_REGION);
+		saveFiles(Evaluation.INTRODUCED_REGION);
+		saveFiles(Evaluation.MIS_DIAGNOSED);
+		saveFiles(Evaluation.RECOVERY_FAILED);
+		saveFiles(Evaluation.TOO_BIG);
+		saveFiles(Evaluation.TOO_SMALL);
+	}
+
+	private void saveFiles(Evaluation eval) {
+		ArrayList<String> failures=testrun.getTotalStats().getResultList(eval);
 		String dirName=pathToTestrunDir();
-		dirName=dirName+File.separator+Evaluation.RECOVERY_FAILED.toString();
+		dirName=dirName+File.separator+eval.toString();
 		File dir = new File(dirName);
 		dir.mkdir();
 		for (String path : failures) {

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/SiblingRegion_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/SiblingRegion_Java.java	2009-12-10 15:48:23 UTC (rev 20372)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/SiblingRegion_Java.java	2009-12-10 15:58:39 UTC (rev 20373)
@@ -35,6 +35,18 @@
 	}
 
 	@Test
+	public void testmultipleErrors() throws Exception{
+		String fileName="multipleErrors.java";
+		assertActualRegionsContainExpected(fileName);		
+	}
+	
+	@Test
+	public void testmultipleErrorsBW() throws Exception{
+		String fileName="multipleErrors_bw.java";
+		assertActualRegionsContainExpected(fileName);		
+	}
+	
+	@Test
 	public void testIfElseExt() throws Exception{
 		String fileName="ifElse_Ext.java";
 		assertActualRegionsContainExpected(fileName);		



From m.dejonge at tudelft.nl  Thu Dec 10 16:59:06 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 10 Dec 2009 15:59:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20374 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912101559.nBAFx6Wh031337@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-10 15:59:05 +0000 (Thu, 10 Dec 2009)
New Revision: 20374

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20374&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java

Log:
surrounding sib

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-10 15:58:39 UTC (rev 20373)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-10 15:59:05 UTC (rev 20374)
@@ -34,16 +34,24 @@
     public ArrayList<StructureSkipSuggestion> getCurrentSkipSuggestions()
             throws IOException {
         int indexLastLine=failureIndex;
-        if (isScopeClosingLine(indexLastLine))
-            return new ArrayList<StructureSkipSuggestion>();
-        if (isScopeOpeningLine(indexLastLine) && indexLastLine>0)
+        if (isScopeOpeningLine(indexLastLine) && indexLastLine>0 && getHistory().getLine(indexLastLine-1).getIndentValue()==getHistory().getLine(indexLastLine).getIndentValue())
             return selectRegion(indexLastLine-1);
         return selectRegion(indexLastLine);
     }
     
     private ArrayList<StructureSkipSuggestion> selectRegion(int indexLine)
     throws IOException {
-        IndentInfo startLine = IndentInfo.cloneIndentInfo(getHistory().getLine(indexLine));
+        if (isScopeClosingLine(indexLine))
+            return new ArrayList<StructureSkipSuggestion>();
+        IndentInfo startLine = getHistory().getLine(indexLine);
+        return selectRegion(indexLine, startLine);
+    }
+
+    private ArrayList<StructureSkipSuggestion> selectRegion(int indexLine,
+            IndentInfo line) throws IOException {
+        IndentInfo startLine = IndentInfo.cloneIndentInfo(line);
+        if (isScopeClosingLine(startLine))
+            return new ArrayList<StructureSkipSuggestion>();
         ArrayList<IndentInfo> endLocations=findCurrentEnd(startLine);
         ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
         for (IndentInfo endSkip : endLocations) {
@@ -302,31 +310,52 @@
 
     public ArrayList<StructureSkipSuggestion> getPriorSkipSuggestions()
             throws IOException {
+        int pos=failureIndex;
+        return getPriorRegions(pos);
+    }
+
+    private ArrayList<StructureSkipSuggestion> getPriorRegions(int pos)
+            throws IOException {
         ArrayList<StructureSkipSuggestion> priorRegions= new ArrayList<StructureSkipSuggestion>();
-        int pos=failureIndex;
         ArrayList<StructureSkipSuggestion> prevRegions=selectPrevRegion(pos);
         do{
             if(!prevRegions.isEmpty())
                 pos=prevRegions.get(0).getIndexHistoryStart();
             prevRegions=selectPrevRegion(pos);
             priorRegions.addAll(prevRegions);
-        }while (pos>0 && !prevRegions.isEmpty());
-            
+        }while (pos>0 && !prevRegions.isEmpty());            
         return priorRegions;
     }
+    
+    public ArrayList<StructureSkipSuggestion> getCurrentAndNextSkipSuggestions()
+    throws IOException {
+        ArrayList<StructureSkipSuggestion> nextRegions= new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> currRegions=selectRegion(failureIndex);
+        int i=0;
+        do{
+            i++;
+            for (StructureSkipSuggestion r : currRegions) {
+                if(r.getAdditionalTokens().length==0)
+                nextRegions.add(r);
+            }            
+            if(!currRegions.isEmpty())                
+                currRegions=selectRegion(currRegions.get(0).getIndexHistoryEnd(), currRegions.get(0).getEndSkip());
+        }while (i<10 && !currRegions.isEmpty());
+        return nextRegions;
+    }
 
     public ArrayList<StructureSkipSuggestion> getSibblingBackwardSuggestions()
             throws IOException {
         ArrayList<StructureSkipSuggestion> bwSkips=new ArrayList<StructureSkipSuggestion>();
-        ArrayList<StructureSkipSuggestion> priorSiblings=new ArrayList<StructureSkipSuggestion>();
-        priorSiblings.addAll(selectPrevRegion(failureIndex));
-        priorSiblings.addAll(getPriorSkipSuggestions());
+        ArrayList<StructureSkipSuggestion> priorSiblings=getPriorRegions(failureIndex);
         ArrayList<StructureSkipSuggestion> currentRegionSuggestions=selectRegion(failureIndex);
         for (StructureSkipSuggestion currSugestion : currentRegionSuggestions) {
             for (int i = 0; i < priorSiblings.size(); i++) {
                 StructureSkipSuggestion priorSuggestion=priorSiblings.get(i);
-                StructureSkipSuggestion mergedSkip=mergeRegions(currSugestion, priorSuggestion);
-                bwSkips.add(mergedSkip);
+                if(currSugestion.getAdditionalTokens().length==0){//ignore suggestions based on adding the separator
+                    StructureSkipSuggestion mergedSkip=mergeRegions(currSugestion, priorSuggestion);
+                    bwSkips.add(mergedSkip);
+                }
             }
         }
         return bwSkips;
@@ -342,14 +371,52 @@
 
     public ArrayList<StructureSkipSuggestion> getSibblingForwardSuggestions()
             throws IOException {
-        // TODO Auto-generated method stub
-        return new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> fwSkips=new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> nextSiblings=getCurrentAndNextSkipSuggestions();
+        ArrayList<StructureSkipSuggestion> prevRegionSuggestions=selectPrevRegion(failureIndex);
+        for (StructureSkipSuggestion priorSuggestion : prevRegionSuggestions) {
+            for (int i = 0; i < nextSiblings.size(); i++) {
+                StructureSkipSuggestion nextSuggestion=nextSiblings.get(i);
+                StructureSkipSuggestion mergedSkip=mergeRegions(nextSuggestion, priorSuggestion);
+                fwSkips.add(mergedSkip);            
+            }
+        }
+        return fwSkips;
     }
 
     public ArrayList<StructureSkipSuggestion> getSibblingSurroundingSuggestions()
             throws IOException {
-        // TODO Auto-generated method stub
-        return new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> surroundingSkips=new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> priorSiblings=getPriorRegions(failureIndex);
+        ArrayList<StructureSkipSuggestion> nextSiblings=getCurrentAndNextSkipSuggestions();
+        if(nextSiblings.size()>1 && priorSiblings.size()>0){
+            nextSiblings.remove(0);
+            StructureSkipSuggestion nextSuggestion=null;
+            StructureSkipSuggestion priorSuggestion=null;
+            int j=0;
+            int i = 0;            
+            while(i < nextSiblings.size() || j < priorSiblings.size()) {                
+                if (i<nextSiblings.size()) {
+                    nextSuggestion = nextSiblings.get(i); 
+                    i++;
+                }                         
+                if (j<priorSiblings.size()) {
+                    priorSuggestion = priorSiblings.get(j);  
+                    j++;
+                }
+                StructureSkipSuggestion mergedSkip=mergeRegions(nextSuggestion, priorSuggestion);
+                surroundingSkips.add(mergedSkip);
+                if (j<priorSiblings.size()) {
+                    priorSuggestion = priorSiblings.get(j); 
+                    if(priorSuggestion.getAdditionalTokens().length!=0){
+                        StructureSkipSuggestion mergedSkipPlus=mergeRegions(nextSuggestion, priorSuggestion);
+                        surroundingSkips.add(mergedSkipPlus);
+                        j++;
+                    }
+                }
+            }
+        }
+        return surroundingSkips;
     }
 
     public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(



From m.dejonge at tudelft.nl  Thu Dec 10 16:59:24 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 10 Dec 2009 15:59:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20375 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912101559.nBAFxOsB031343@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-10 15:59:24 +0000 (Thu, 10 Dec 2009)
New Revision: 20375

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20375&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj

Log:
surrounding-siblings

Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-10 15:59:05 UTC (rev 20374)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-10 15:59:24 UTC (rev 20375)
@@ -101,9 +101,11 @@
   	  }
    }
     
-    pointcut sibRegionsPC(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingBackwardSuggestions())&& target(rs);
+    pointcut sibBWRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingBackwardSuggestions())&& target(rs);
+    pointcut sibFWRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingForwardSuggestions())&& target(rs);
+    pointcut sibSurrRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingSurroundingSuggestions())&& target(rs);
 
-    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): sibRegionsPC(rs) {
+    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): sibBWRegions(rs) || sibFWRegions(rs)||sibSurrRegions(rs){
     	for (StructureSkipSuggestion aRegion: prRegions) {
     		String region = rs.getHistory().getFragment(aRegion);
   		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);



From L.C.L.Kats at tudelft.nl  Fri Dec 11 13:26:10 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 11 Dec 2009 12:26:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20376 - LennartKats -
	in strategoxt/trunk: stratego-front/syn
	strc-core/lib/stratego/strc/front strc-core/lib/stratego/strc/strc
Message-ID: <200912111226.nBBCQAeV015594@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-11 12:26:10 +0000 (Fri, 11 Dec 2009)
New Revision: 20376

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20376&view=rev

Modified:
   strategoxt/trunk/stratego-front/syn/Stratego-Core-Strategies.sdf
   strategoxt/trunk/strc-core/lib/stratego/strc/front/stratego-ensugar.str
   strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str

Log:
Library signature pretty-printing and parsing fixes.

Changes:

Modified: strategoxt/trunk/stratego-front/syn/Stratego-Core-Strategies.sdf
===================================================================
--- strategoxt/trunk/stratego-front/syn/Stratego-Core-Strategies.sdf	2009-12-10 15:59:24 UTC (rev 20375)
+++ strategoxt/trunk/stratego-front/syn/Stratego-Core-Strategies.sdf	2009-12-11 12:26:10 UTC (rev 20376)
@@ -30,7 +30,16 @@
     Id "(" {Typedid ","}* 
        "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
 
+    "external"
+    EmptyId "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
 
+
+  sorts EmptyId
+  lexical syntax
+  
+    -> EmptyId
+
   sorts Anno
   context-free syntax
     "extend"      -> Anno {cons("Extend")}

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/stratego-ensugar.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/stratego-ensugar.str	2009-12-10 15:59:24 UTC (rev 20375)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/stratego-ensugar.str	2009-12-11 12:26:10 UTC (rev 20376)
@@ -88,6 +88,7 @@
     + Var(AddLeadingPrime)
     + SVar(AddLeadingPrime)
     + OpDecl(AddLeadingPrime,id)
+    + ExtOpDecl(AddLeadingPrime,id)
     + Op(AddLeadingPrime,id)
 
   AddLeadingPrime :

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-10 15:59:24 UTC (rev 20375)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-11 12:26:10 UTC (rev 20376)
@@ -63,11 +63,11 @@
       else
         log-timed(
           defs-to-external-defs
-          ; write-to
-          ; copy-to(strc-getoutfile(!".rtree") => file1)
+          ; where(write-to; copy-to(strc-getoutfile(!".rtree") => file1))
           ; log(|Info(), ["Abstract syntax in '", file1, "'"])
           ; if not(<get-config> "--no-concrete-syntax-externals") then
-              xtc-io-transform(pp-stratego-string)
+              pp-stratego-string
+            ; print-to
             ; copy-to(strc-getoutfile(!".str") => file2)
             ; log(|Info(), ["Concrete syntax in '", file2, "'"])
             end



From L.C.L.Kats at tudelft.nl  Fri Dec 11 15:03:48 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 11 Dec 2009 14:03:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20377 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/front
Message-ID: <200912111403.nBBE3mwd016846@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-11 14:03:48 +0000 (Fri, 11 Dec 2009)
New Revision: 20377

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20377&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/front/stratego-ensugar.str

Log:
Fixed another signature pretty-printing problem.

Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/stratego-ensugar.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/stratego-ensugar.str	2009-12-11 12:26:10 UTC (rev 20376)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/stratego-ensugar.str	2009-12-11 14:03:48 UTC (rev 20377)
@@ -83,7 +83,12 @@
   EnsugarOnce =
       DefaultVarDec(AddLeadingPrime)
     + RDef(AddLeadingPrime,id,id)
+    + RDefT(AddLeadingPrime,id,id,id)
+    + RDefNoArgs(AddLeadingPrime,id)
     + SDef(AddLeadingPrime,id,id)
+    + SDefT(AddLeadingPrime,id,id,id)
+    + SDefNoArgs(AddLeadingPrime,id)
+    + ExtSDef(AddLeadingPrime,id,id)
     + VarDec(AddLeadingPrime,id)
     + Var(AddLeadingPrime)
     + SVar(AddLeadingPrime)



From R.B.Vermaas at tudelft.nl  Fri Dec 11 16:12:38 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Dec 2009 15:12:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20378 - rob - hydra/jobs
Message-ID: <200912111512.nBBFCcKe017805@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-12-11 15:12:37 +0000 (Fri, 11 Dec 2009)
New Revision: 20378

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20378&view=rev

Modified:
   hydra/jobs/asf-support.nix
   hydra/jobs/aspectj-front.nix
   hydra/jobs/aster.nix
   hydra/jobs/aterm.nix
   hydra/jobs/c-library.nix
   hydra/jobs/config-support.nix
   hydra/jobs/dryad-compiler.nix
   hydra/jobs/dryad.nix
   hydra/jobs/error-support.nix
   hydra/jobs/java-front.nix
   hydra/jobs/jimple-front.nix
   hydra/jobs/lutin.nix
   hydra/jobs/pil.nix
   hydra/jobs/prolog-tools.nix
   hydra/jobs/pt-support.nix
   hydra/jobs/ptable-support.nix
   hydra/jobs/sdf-library.nix
   hydra/jobs/sdf-support.nix
   hydra/jobs/stratego-libraries.nix
   hydra/jobs/stratego-shell.nix
   hydra/jobs/strategoxt-manual.nix
   hydra/jobs/strategoxt-utils.nix
   hydra/jobs/strc-java.nix
   hydra/jobs/tide-support.nix
   hydra/jobs/toolbuslib.nix
   hydra/jobs/xdoc.nix

Log:


Changes:

Modified: hydra/jobs/asf-support.nix
===================================================================
--- hydra/jobs/asf-support.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/asf-support.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -2,7 +2,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , aterm ? (import ./aterm.nix {}).build {}
 , ptSupport ? (import ./pt-support.nix {}).build {}
@@ -21,7 +21,7 @@
         inherit asfSupportCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/aspectj-front.nix
===================================================================
--- hydra/jobs/aspectj-front.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/aspectj-front.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , aspectjFrontCheckout ? { outPath = ../../dryad ; rev = 1234 ; }
 } :
 
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit aspectjFrontCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/aster.nix
===================================================================
--- hydra/jobs/aster.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/aster.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , asterCheckout ? { outPath = ../../aster ; rev = 1234 ; } 
 } :
 
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit asterCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/aterm.nix
===================================================================
--- hydra/jobs/aterm.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/aterm.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , atermCheckout ? {outPath = ../../aterm ; rev = 12345;} 
 } :
@@ -16,7 +16,7 @@
         inherit atermCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
         makeDebs = true; 
         makeRPMs = true;

Modified: hydra/jobs/c-library.nix
===================================================================
--- hydra/jobs/c-library.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/c-library.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -2,7 +2,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , aterm ? (import ./aterm.nix {}).build {}
 , cLibraryCheckout ? {outPath = ../../c-library ; rev = 12345;} 
@@ -19,7 +19,7 @@
         inherit cLibraryCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/config-support.nix
===================================================================
--- hydra/jobs/config-support.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/config-support.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -2,7 +2,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , aterm ? (import ./aterm.nix {}).build {}
 , configSupportCheckout ? {outPath = ../../config-support ; rev = 12345;} 
@@ -19,7 +19,7 @@
         inherit configSupportCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/dryad-compiler.nix
===================================================================
--- hydra/jobs/dryad-compiler.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/dryad-compiler.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , dryadCompilerCheckout ? { outPath = ../../dryad-compiler ; rev = 1234 ; }
 , dryad ? (import ./dryad.nix {}).build {}
 , javaFront ? (import ./java-front.nix {}).build {}
@@ -17,7 +17,7 @@
         inherit dryad ;
         inherit javaFront ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/dryad.nix
===================================================================
--- hydra/jobs/dryad.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/dryad.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , dryadCheckout ? { outPath = ../../dryad ; rev = 1234 ; }
 , javaFront ? (import ./java-front.nix {}).build {}
 } :
@@ -15,7 +15,7 @@
         inherit dryadCheckout ;
         inherit javaFront ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/error-support.nix
===================================================================
--- hydra/jobs/error-support.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/error-support.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , aterm ? (import ./aterm.nix {}).build {}
 , toolbuslib ? (import ./toolbuslib.nix {}).build {}
@@ -20,7 +20,7 @@
         inherit errorSupportCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/java-front.nix
===================================================================
--- hydra/jobs/java-front.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/java-front.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , javaFrontCheckout ? { outPath = ../../java-front ; rev = 1234 ; }
 } :
 
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit javaFrontCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
         makeDebs = true;
         makeRPMs = true;

Modified: hydra/jobs/jimple-front.nix
===================================================================
--- hydra/jobs/jimple-front.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/jimple-front.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , jimpleFrontCheckout ? { outPath = ../../jimple-front ; rev = 1234 ; }
 } :
 
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit jimpleFrontCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/lutin.nix
===================================================================
--- hydra/jobs/lutin.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/lutin.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , lutinCheckout ? { outPath = ../../lutin ; rev = 1234 ; }
 , dryad ? (import ./dryad.nix {}).build {}
 , javaFront ? (import ./java-front.nix {}).build {}
@@ -21,7 +21,7 @@
         inherit prologTools ;
         inherit strategoxtUtils ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/pil.nix
===================================================================
--- hydra/jobs/pil.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/pil.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , pilCheckout ? { outPath = ../../pil ; rev = 1234 ; }
 } :
 
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit pilCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
         makeDebs = true;
 #        makeRPMs = true;

Modified: hydra/jobs/prolog-tools.nix
===================================================================
--- hydra/jobs/prolog-tools.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/prolog-tools.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , prologToolsCheckout ? { outPath = ../../prolog-tools ; rev = 1234 ; }
 } :
 
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit prologToolsCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/pt-support.nix
===================================================================
--- hydra/jobs/pt-support.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/pt-support.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -2,7 +2,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , aterm ? (import ./aterm.nix {}).build {}
 , toolbuslib ? (import ./toolbuslib.nix {}).build {}
@@ -20,7 +20,7 @@
         inherit ptSupportCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/ptable-support.nix
===================================================================
--- hydra/jobs/ptable-support.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/ptable-support.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -2,7 +2,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , ptSupport ? (import ./pt-support.nix {}).build {}
 , aterm ? (import ./aterm.nix {}).build {}
@@ -19,7 +19,7 @@
         inherit ptableSupportCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/sdf-library.nix
===================================================================
--- hydra/jobs/sdf-library.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/sdf-library.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env-release.nix {}).build {}
 , sdfLibraryCheckout ? {outPath = ../../sdf-library ; rev = 12345;} 
 } :
@@ -16,7 +16,7 @@
         inherit sdfLibraryCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/sdf-support.nix
===================================================================
--- hydra/jobs/sdf-support.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/sdf-support.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -2,7 +2,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , aterm ? (import ./aterm.nix {}).build {}
 , ptSupport ? (import ./pt-support.nix {}).build {}
@@ -22,7 +22,7 @@
         inherit sdfSupportCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/stratego-libraries.nix
===================================================================
--- hydra/jobs/stratego-libraries.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/stratego-libraries.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , strategoLibrariesCheckout ? { outPath = ../../strategoxt/stratego-libraries ; rev = 1234 ; } 
 , std ? ""
 } :
@@ -14,7 +14,7 @@
         inherit officialRelease ; 
         inherit strategoLibrariesCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/stratego-shell.nix
===================================================================
--- hydra/jobs/stratego-shell.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/stratego-shell.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , strategoShellCheckout ? { outPath = ../../stratego-shell ; rev = 1234 ; } 
 } :
 
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit strategoShellCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/strategoxt-manual.nix
===================================================================
--- hydra/jobs/strategoxt-manual.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/strategoxt-manual.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -2,7 +2,7 @@
 , officialRelease ? false
 , system ? "i686-linux"
 , hydraConfig ? ../. 
-#, baselineNix ? ../baseline.nix
+#
 , strategoxtManualCheckout ? { outPath = ../../strategoxt-manual ; rev = 1234 ; } 
 , strategoxt ? (import ./strategoxt.nix {}).build {}
 } :

Modified: hydra/jobs/strategoxt-utils.nix
===================================================================
--- hydra/jobs/strategoxt-utils.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/strategoxt-utils.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , strategoxtUtilsCheckout ? { outPath = ../../strategoxt-utils ; rev = 1234 ; } 
 } :
 
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit strategoxtUtilsCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/strc-java.nix
===================================================================
--- hydra/jobs/strc-java.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/strc-java.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , strcJavaCheckout ? { outPath = ../../strc-java ; rev = 1234 ; }
 } :
 
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit strcJavaCheckout ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/tide-support.nix
===================================================================
--- hydra/jobs/tide-support.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/tide-support.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -2,7 +2,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , aterm ? (import ./aterm.nix {}).build {}
 , toolbuslib ? (import ./toolbuslib.nix {}).build {}
@@ -20,7 +20,7 @@
         inherit aterm toolbuslib ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/toolbuslib.nix
===================================================================
--- hydra/jobs/toolbuslib.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/toolbuslib.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -2,7 +2,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../. 
-, baselineNix ? ../baseline.nix
+
 , metaBuildEnv ? (import ./meta-build-env.nix {}).build {}
 , aterm ? (import ./aterm.nix {}).build {}
 , toolbuslibCheckout ? {outPath = ../../toolbuslib ; rev = 12345;} 
@@ -19,7 +19,7 @@
         inherit toolbuslibCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
       } ; 
    

Modified: hydra/jobs/xdoc.nix
===================================================================
--- hydra/jobs/xdoc.nix	2009-12-11 14:03:48 UTC (rev 20377)
+++ hydra/jobs/xdoc.nix	2009-12-11 15:12:37 UTC (rev 20378)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 , officialRelease ? false
 , hydraConfig ? ../.
-, baselineNix ? ../baseline.nix
+
 , xdocCheckout ? { outPath = ../../xdoc ; rev = 1234 ; }
 , strategoxtUtils ? (import ./strategoxt-utils.nix {}).build {}
 } :
@@ -15,7 +15,7 @@
         inherit xdocCheckout ;
         inherit strategoxtUtils ;
         inherit hydraConfig ;
-        inherit baselineNix ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs; 
       } ; 
    



From R.B.Vermaas at tudelft.nl  Fri Dec 11 16:23:53 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Dec 2009 15:23:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20379 - rob - in hydra:
	. jobs
Message-ID: <200912111523.nBBFNrL1017952@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-12-11 15:23:53 +0000 (Fri, 11 Dec 2009)
New Revision: 20379

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20379&view=rev

Modified:
   hydra/job.nix
   hydra/jobs/aterm.nix

Log:


Changes:

Modified: hydra/job.nix
===================================================================
--- hydra/job.nix	2009-12-11 15:12:37 UTC (rev 20378)
+++ hydra/job.nix	2009-12-11 15:23:53 UTC (rev 20379)
@@ -5,7 +5,7 @@
   systemPkgs = system : import inputs.nixpkgs ( { inherit system; } );
   pkgsDebRPM = import inputs.nixpkgs { system = "i686-linux" ; } ;
 
-  builder = import ./build.nix ( inputs // { pkgsDefault = pkgs ; baseline = import inputs.baselineNix ; } ) ;
+  builder = import ./build.nix ( inputs // { pkgsDefault = pkgs ; baseline = if inputs ? baselineNix then import inputs.baselineNix else {}; } ) ;
 
   tarballTop = builder.easyTarball pkgs spec ;
 

Modified: hydra/jobs/aterm.nix
===================================================================
--- hydra/jobs/aterm.nix	2009-12-11 15:12:37 UTC (rev 20378)
+++ hydra/jobs/aterm.nix	2009-12-11 15:23:53 UTC (rev 20379)
@@ -16,7 +16,6 @@
         inherit atermCheckout ; 
         inherit officialRelease ; 
         inherit hydraConfig ;
-        baselineNix = "${hydraConfig}/baseline.nix" ;
         inherit nixpkgs;
         makeDebs = true; 
         makeRPMs = true;



From R.B.Vermaas at tudelft.nl  Fri Dec 11 16:25:12 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Dec 2009 15:25:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20380 - rob - hydra
Message-ID: <200912111525.nBBFPCeY017990@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-12-11 15:25:12 +0000 (Fri, 11 Dec 2009)
New Revision: 20380

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20380&view=rev

Modified:
   hydra/job.nix

Log:


Changes:

Modified: hydra/job.nix
===================================================================
--- hydra/job.nix	2009-12-11 15:23:53 UTC (rev 20379)
+++ hydra/job.nix	2009-12-11 15:25:12 UTC (rev 20380)
@@ -5,7 +5,7 @@
   systemPkgs = system : import inputs.nixpkgs ( { inherit system; } );
   pkgsDebRPM = import inputs.nixpkgs { system = "i686-linux" ; } ;
 
-  builder = import ./build.nix ( inputs // { pkgsDefault = pkgs ; baseline = if inputs ? baselineNix then import inputs.baselineNix else {}; } ) ;
+  builder = import ./build.nix ( inputs // { pkgsDefault = pkgs ; baseline = if inputs ? baselineNix then import inputs.baselineNix else pkgs: {}; } ) ;
 
   tarballTop = builder.easyTarball pkgs spec ;
 



From R.B.Vermaas at tudelft.nl  Fri Dec 11 16:33:13 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Dec 2009 15:33:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20381 - rob -
	hydra/meta-environment
Message-ID: <200912111533.nBBFXDI6018082@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-12-11 15:33:13 +0000 (Fri, 11 Dec 2009)
New Revision: 20381

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20381&view=rev

Modified:
   hydra/meta-environment/packages.nix

Log:


Changes:

Modified: hydra/meta-environment/packages.nix
===================================================================
--- hydra/meta-environment/packages.nix	2009-12-11 15:25:12 UTC (rev 20380)
+++ hydra/meta-environment/packages.nix	2009-12-11 15:33:13 UTC (rev 20381)
@@ -20,10 +20,10 @@
 
       buildInputs = [pkgs.pkgconfig];
       requires = [];
+      patches = [ ./sizeof.patch ];
 
       svnBuildInputs = autotools pkgs;
       svnRequires = [];
-      svnPatches = [ ./sizeof.patch ];
 
       systemSupported = systemSupport pkgs commonSystemsSupported;
 
@@ -47,11 +47,10 @@
 
       svnBuildInputs = [pkgs.tetex pkgs.transfig] ++ (autotools pkgs);
       svnRequires = [metaBuildEnv];
-      patches = [ ./aterm-max-long.patch ] ++ (
+      patches = 
         if isMinGW pkgs then
           [ ./aterm-mingw-asm.patch ]
-          # [ ./aterm-mingw-asm-64-bit-fixes.patch ]
-        else [] ) ;
+        else []  ;
 
       rpmBuildSupported = true;
 
@@ -59,7 +58,7 @@
 
       binArchives =
         if isMinGW pkgs then [{ inherit requires; }] else [];
-
+      customEnv = { dontDisableStatic = true; }; 
     };
 
   sdfLibrary =
@@ -172,6 +171,28 @@
       systemSupported = systemSupport pkgs commonSystemsSupported;
     };
 
+  rstoreSupport =
+    pkgs : rec {
+      fullName = "rstore-support";
+      attrPrefix = "rstoreSupport";
+      packageName = "rstore-support";
+
+      contactEmail = "meta-users-list at cwi.nl";
+      notifyAddresses = ["martin.bravenboer at gmail.com"];
+
+      svn = {
+        trunk = "svn+ssh://svn.cwi.nl/rstore-support/trunk";
+      };
+
+      buildInputs = [pkgs.pkgconfig];
+      requires = [aterm];
+
+      svnBuildInputs = autotools pkgs;
+      svnRequires = [metaBuildEnv] ++ requires;
+
+      systemSupported = systemSupport pkgs commonSystemsSupported;
+    };
+
   configSupport =
     pkgs : rec {
       fullName = "config-support";
@@ -494,17 +515,18 @@
         };
 
       bundles = [
-        cLibrary
         toolbuslib
-        configSupport
         errorSupport
         ptSupport
         asfSupport
         sdfSupport
+        cLibrary
+        configSupport
+        rstoreSupport
         ptableSupport
+  #      relationStores
+        tideSupport
         sglr
-        tideSupport
-        relationStores
         ascSupport
         pgen
         sdfLibrary



From L.C.L.Kats at tudelft.nl  Sat Dec 12 12:54:33 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 12 Dec 2009 11:54:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20382 - LennartKats -
 in spoofax-imp/trunk: . org.eclipse.imp
 org.strategoxt.imp.editors.aterm/.externalToolBuilders
 org.strategoxt.imp.editors.editorservice
 org.strategoxt.imp.editors.editorservice/trans
 org.strategoxt.imp.editors.sdf org.strategoxt.imp.editors.sdf/editor
 org.strategoxt.imp.editors.sdf/trans org.strategoxt.imp.editors.stratego
 org.strategoxt.imp.editors.stratego/.externalToolBuilders
 org.strategoxt.imp.editors.stratego/editor
 org.strategoxt.imp.editors.stratego/icons
 org.strategoxt.imp.editors.stratego/syntax org.strategoxt.imp.runtime
 org.strategoxt.imp.runtime/icons
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens
 org.strategoxt.imp.runtim! e/src/org/strategoxt/imp/runtime/services
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <200912121154.nBCBsXc2001048@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-12 11:54:31 +0000 (Sat, 12 Dec 2009)
New Revision: 20382

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20382&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/icons/
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/icons/stratego.gif
   spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/spi-file.gif
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/MarkerSignature.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHoverHelper.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/MarkerAttributes.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReportWithFailure.java
Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorRegistry.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRTokenizer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TextAttributeReferenceMap.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java

Log:
org.strategoxt.imp.runtime: Various recent fixes and improvements
- This revision fixes support for Eclipse 3.5 (minus the package explorer icons) [SPI-10]
- Revised the parse/error marking locking structure, again
- Parse error markers are now displayed with a delay after parsing;
  much better from a usability point of view


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/Makefile	2009-12-12 11:54:31 UTC (rev 20382)
@@ -1,6 +1,6 @@
 DEFS=-Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib -Declipse.spoofaximp.strategojar=utils/strategoxt.jar
 
-all :
+all : org.eclipse.imp/org.eclipse.imp.runtime.patch
 	$(MAKE) -C org.strategoxt.imp.generator all
 	(cd org.strategoxt.imp.editors.editorservice && ant -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def $(DEFS))
 	(cd org.strategoxt.imp.editors.sdf && ant -Dexternaldef=syntax/SDF.def $(DEFS))
@@ -16,3 +16,10 @@
 
 new-libs :
 	$(MAKE) -C org.strategoxt.imp.generator new-libs
+
+org.eclipse.imp/org.eclipse.imp.runtime.patch : .PHONY
+	if [ "$(ECLIPSE_IMP)" != "" ]; then \
+	  (cd $(ECLIPSE_IMP); svn diff org.eclipse.imp.runtime) > $@; \
+	fi
+
+.PHONY :

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2009-12-12 11:54:31 UTC (rev 20382)
@@ -63,6 +63,17 @@
              /* Editor was closed, or no parse controller */
              return Status.OK_STATUS;
          }
+@@ -82,8 +83,9 @@
+             // Just make sure the document contents gets parsed once (and only once).
+             fMsgHandler.clearMessages();
+             fParseController.parse(document.get(), monitor);
+-            if (!monitor.isCanceled())
++            if (!monitor.isCanceled()) {
+                 notifyModelListeners(monitor);
++            }
+         } catch (Exception e) {
+             ErrorHandler.reportError("Error running parser for language " + fParseController.getLanguage().getName() + " and input " + editorInput.getName() + ":", e);
+             // RMF 8/2/2006 - Notify the AST listeners even on an exception - the compiler front end
 Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/internal/PresentationController.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/internal/PresentationController.java	(revision 22255)
@@ -115,6 +126,60 @@
  
      public Object getAdapter(Class required) {
          if (IContentOutlinePage.class.equals(required)) {
+@@ -1771,7 +1782,8 @@
+                 if (fServiceControllerManager.getPresentationController() != null) {
+ //                  System.out.println("Scheduling repair for damage to region " + damage.getOffset() + ":" + damage.getLength() + " in doc of length " + fDocument.getLength());
+                     fServiceControllerManager.getPresentationController().damage(damage);
+-                    if (hyperlinkRestore) {
++                    // LK: just always color for post-marker color correctness
++                    if (hyperlinkRestore || true) {
+ //                      System.out.println("** Forcing repair for hyperlink damage to region " + damage.getOffset() + ":" + damage.getLength() + " in doc of length " + fDocument.getLength());
+                         fServiceControllerManager.getPresentationController().update(fLanguageServiceManager.getParseController(), fProgressMonitor);
+                     }
+@@ -1845,6 +1857,7 @@
+     }
+ 
+     public IParseController getParseController() {
++    	if (fLanguageServiceManager == null) return null; // LK
+         return fLanguageServiceManager.getParseController();
+     }
+     
+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/utils/AnnotationUtils.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/utils/AnnotationUtils.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/utils/AnnotationUtils.java	(working copy)
+@@ -21,6 +21,7 @@
+ import org.eclipse.jface.text.Position;
+ import org.eclipse.jface.text.source.Annotation;
+ import org.eclipse.jface.text.source.IAnnotationModel;
++import org.eclipse.jface.text.source.ILineDiffInfo;
+ import org.eclipse.jface.text.source.ISourceViewer;
+ import org.eclipse.jface.text.source.projection.AnnotationBag;
+ 
+@@ -30,6 +31,7 @@
+ 
+     public static String formatAnnotationList(List<Annotation> annotations) {
+         if (annotations != null) {
++            removeLineDiffInfo(annotations); // LK
+             if (annotations.size() == 1) {
+                 // optimization
+                 Annotation annotation= (Annotation) annotations.get(0);
+@@ -52,6 +54,15 @@
+         return null;
+     }
+ 
++	private static void removeLineDiffInfo(List<Annotation> annotations) { // LK
++		if (annotations == null) return;
++		for (Iterator<Annotation> iter = annotations.iterator(); iter.hasNext(); ) {
++    		Annotation annotation = iter.next();
++    		if (annotation instanceof ILineDiffInfo)
++    			iter.remove();
++    	}
++	}
++	
+     public static IAnnotationModel getAnnotationModel(ISourceViewer viewer) {
+         // if (viewer instanceof ISourceViewerExtension2) {
+         // ISourceViewerExtension2 extension= (ISourceViewerExtension2) viewer;
 Index: org.eclipse.imp.runtime/src/org/eclipse/imp/preferences/PreferenceCache.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/preferences/PreferenceCache.java	(revision 22255)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	2009-12-12 11:54:31 UTC (rev 20382)
@@ -2,7 +2,7 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/aux&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260395950355_24&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
 <listEntry value="/org.strategoxt.imp.editors.aterm/build.xml"/>
 </listAttribute>
@@ -20,9 +20,9 @@
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.editors.aterm"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
-<mapEntry key="externaldef" value="syntax/ATerm.def"/>
 <mapEntry key="eclipse.spoofaximp.strategojar" value="${env_var:HOME}/.nix-profile/share/strc-java/strategoxt.jar"/>
 <mapEntry key="eclipse.spoofaximp.jars" value="${workspace_loc:/org.strategoxt.imp.generator/lib/}"/>
+<mapEntry key="externaldef" value="syntax/ATerm.def"/>
 </mapAttribute>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.aterm/build.xml}"/>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	2009-12-12 11:54:31 UTC (rev 20382)
@@ -0,0 +1,6 @@
+module editorservice
+
+// TODO: warn about multi-char highlighted brackets
+// TODO: check if provider/imported/etc. files exist
+// TODO: check if there is _any_ provider for observer etc.
+// TODO: check if the provider is not a .str
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-12-12 11:54:31 UTC (rev 20382)
@@ -6,6 +6,8 @@
         <property name="sdfmodule" value="SDF"/>
         <property name="esvmodule" value="SDF"/>
         <property name="strmodule" value="sdf"/>
+        
+        <!-- Standard build file without ppgen dependency follows -->
     
         <!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -116,8 +118,8 @@
         <target name="utils-files">
             <mkdir dir="utils"/>
             <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils"/>
-            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils"/>
-            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar"         todir="utils"/>
+            <copy file="${eclipse.spoofaximp.strategojar}"              todir="utils"/>
         </target>
     
         <target name="pack-sdf" unless="externaldef">
@@ -223,7 +225,7 @@
         </target>
     
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree" depends="rtg2sig,ppgen">
+        <target name="stratego.ctree" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -241,7 +243,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig,ppgen">
+        <target name="stratego.jar" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -288,7 +290,7 @@
         </target>
         
         <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
             <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
@@ -307,4 +309,4 @@
             <delete dir="${build}"/>
             <delete file="${src-gen}/trans/Main.java"/>
         </target>
-    </project>
\ No newline at end of file
+    </project>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	2009-12-12 11:54:31 UTC (rev 20382)
@@ -8,6 +8,9 @@
   provider : include/sdf.ctree
   
   observer : editor-analyze
+  
+  // builder : "Show current term (for selection)" =
+  //   generate-ast (realtime) (openeditor)
 
   builder : "Show pretty printer rules (for selection)" =
     generate-pp-rules (realtime) (openeditor)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-12-12 11:54:31 UTC (rev 20382)
@@ -10,9 +10,12 @@
   context-free-syntax : Term -> Term
   sort                : Term -> Term
   term                : Term -> Term
-  cons                : Term -> Term
+  default             : Term -> Term
   iter-star           : Term -> Term
   iter-plus           : Term -> Term
+  unquoted            : Term -> Term
+  attrs               : Term -> Term
+  appl                : Term * Term -> Term
   iter-star-sep       : Term * Term -> Term
   iter-plus-sep       : Term * Term -> Term
   prod                : Term * Term * Term -> Term
@@ -21,15 +24,16 @@
 rules
 
   editor-analyze:
-    (ast, path, project-path) -> (errors, [], [])
+    (ast, path, project-path) -> ([], warnings, [])
     with
-      errors := [] // TODO
-      // errors := <alltd(context-free-syntax(collect-all(context-free-syntax-error)))> ast
+      warnings := <collect(?context-free-syntax(<filter(context-free-syntax-warning)>))> ast
   
   context-free-syntax-warning:
-    prod(s*, s, a*) -> (s, "Production should contain a {cons(\"Label\")} attribute for the abstract syntax or a {bracket} attribute")
+    prod(p, s, attrs(a*)) -> (<id>, $[Production should contain a {cons("Label")} attribute to label the abstract syntax])
     where
-      not(!s* => [sort(x)])
+      not(<collect(?sort(_))> p => [_])
+    ; not(<one(?term(default(appl(unquoted("cons"), [_]))))> a*)
+    ; not(<one(?term(default(appl(unquoted("bracket"), []))))> a*)
 
 rules
 
@@ -40,7 +44,8 @@
       selected' := <add-context; sdf-desugar> (selected, ast, project-path);
       result    := <ppgenerate; pp-pp-table> selected'
     <+
-      fatal-err(|"Could not generate pretty printer rules for this selection.\n Only productions with {cons()} attributes are supported.")
+      fatal-err(|$[Could not generate pretty printer rules for this selection.
+                   Only productions with {cons()} attributes are supported.])
   
   generate-rtg:
     (selected, position, ast, path, project-path) -> (filename, result)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch	2009-12-12 11:54:31 UTC (rev 20382)
@@ -2,7 +2,7 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.stratego/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.stratego/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.stratego/aux&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260395909594_13&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.stratego/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.stratego/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
 <listEntry value="/org.strategoxt.imp.editors.stratego/build.xml"/>
 </listAttribute>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project	2009-12-12 11:54:31 UTC (rev 20382)
@@ -1,9 +1,11 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
+<?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-      <name>org.strategoxt.imp.editors.stratego</name>
-      <comment></comment>
-      <buildSpec>
+	<name>org.strategoxt.imp.editors.stratego</name>
+	<comment></comment>
+	<projects>
+		<project>org.strategoxt.imp.generator</project>
+	</projects>
+	<buildSpec>
 		<buildCommand>
 			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
 			<triggers>full,incremental,</triggers>
@@ -14,24 +16,24 @@
 				</dictionary>
 			</arguments>
 		</buildCommand>
-        <buildCommand>
-          <name>org.eclipse.jdt.core.javabuilder</name>
-          <arguments>
-          </arguments>
-        </buildCommand>
-        <buildCommand>
-          <name>org.eclipse.pde.ManifestBuilder</name>
-          <arguments>
-          </arguments>
-        </buildCommand>
-        <buildCommand>
-          <name>org.eclipse.pde.SchemaBuilder</name>
-          <arguments>
-          </arguments>
-        </buildCommand>
-      </buildSpec>
-      <natures>
-        <nature>org.eclipse.pde.PluginNature</nature>
-        <nature>org.eclipse.jdt.core.javanature</nature>
-      </natures>
-    </projectDescription>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.properties	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.properties	2009-12-12 11:54:31 UTC (rev 20382)
@@ -5,4 +5,5 @@
                plugin.xml,\
                include/,\
                bin/,\
-               .
+               .,\
+               icons/

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv	2009-12-12 11:54:31 UTC (rev 20382)
@@ -12,3 +12,18 @@
     0 128 64
     255 255 255
     italic
+
+  _.Str : blue
+  
+  _.StringEscape1 : gray  
+  _.StringEscape2 : gray  
+  _.StringEscape3 : gray  
+  _.StringEscape4 : gray
+  
+  _.QDollar : blue
+  _.QBr     : gray
+
+  QuotedBracket1 : blue
+  QuotedBracket2 : blue
+  QuotedBracket3 : blue
+  QuotedBracket4 : blue
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/icons/stratego.gif
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/icons/stratego.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/plugin.xml	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/plugin.xml	2009-12-12 11:54:31 UTC (rev 20382)
@@ -3,7 +3,7 @@
 
 <plugin>
        <extension point="org.eclipse.imp.runtime.languageDescription">
-          <language extensions="str" description="Plain Stratego editor" language="Stratego-Sugar" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.editors.stratego.StrategoSugarValidator" validatorClass="org.strategoxt.imp.editors.stratego.StrategoSugarValidator"></language>
+          <language extensions="str" description="Plain Stratego editor" language="Stratego-Sugar" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.editors.stratego.StrategoSugarValidator" validatorClass="org.strategoxt.imp.editors.stratego.StrategoSugarValidator" icon="icons/stratego.gif"></language>
        </extension>
        <extension id="org.strategoxt.imp.editors.stratego.parser" name="Stratego Parser" point="org.eclipse.imp.runtime.parser">
           <parser class="org.strategoxt.imp.editors.stratego.StrategoSugarParseController" language="Stratego-Sugar">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	2009-12-12 11:54:31 UTC (rev 20382)
@@ -456,7 +456,16 @@
     Id "(" {Typedid ","}* 
        "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
 
+    "external"
+    EmptyId "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
 
+
+  sorts EmptyId
+  lexical syntax
+  
+    -> EmptyId
+
   sorts Anno
   context-free syntax
     "extend"      -> Anno {cons("Extend")}
@@ -584,10 +593,10 @@
 
   sorts
     StringQuotation
-    StringQuotedPart1 StringQuotedChars1
-    StringQuotedPart2 StringQuotedChars2
-    StringQuotedPart3 StringQuotedChars3
-    StringQuotedPart4 StringQuotedChars4
+    StringQuotedPart1 StringQuotedChars1 DollarOpen1 DollarClose1 QuotedBracket1 Dollar1
+    StringQuotedPart2 StringQuotedChars2 DollarOpen2 DollarClose2 QuotedBracket2 Dollar2
+    StringQuotedPart3 StringQuotedChars3 DollarOpen3 DollarClose3 QuotedBracket3 Dollar3
+    StringQuotedPart4 StringQuotedChars4 DollarOpen4 DollarClose4 QuotedBracket4  Dollar4
     Padding
 
   context-free syntax
@@ -595,30 +604,44 @@
     StringQuotation -> PreTerm
 
   syntax
-  
-    %% TODO: use $[ to escape [ ?
 
     StringQuotation -> <PreTerm-CF>
 
     "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
      Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
     <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
-    ~[\[\]]+                                                -> <StringQuotedChars1-LEX>
+    <Dollar1-LEX>                                           -> StringQuotedPart1 {cons("QDollar")}
+    "$" <QuotedBracket1-LEX> "$"                            -> StringQuotedPart1 {cons("QBr")}
+    ~[\[\]\$]+                                              -> <StringQuotedChars1-LEX>
+    [\[\]]                                                  -> <QuotedBracket1-LEX>
+    "$"                                                     -> <Dollar1-LEX>
 
     "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
      Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
     <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
-    ~[\{\}]+                                                -> <StringQuotedChars2-LEX>
+    <Dollar2-LEX>                                           -> StringQuotedPart2 {cons("QDollar")}
+    "$" <QuotedBracket2-LEX> "$"                            -> StringQuotedPart2 {cons("QBr")}
+    ~[\{\}\$]+                                              -> <StringQuotedChars2-LEX>
+    [\{\}]                                                  -> <QuotedBracket2-LEX>
+    "$"                                                     -> <Dollar2-LEX>
 
     "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
     Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
     <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
-    ~[\[\]]*                                                -> <StringQuotedChars3-LEX>
+    <Dollar3-LEX>                                           -> StringQuotedPart3 {cons("QDollar")}
+    "$" <QuotedBracket3-LEX> "$"                            -> StringQuotedPart3 {cons("QBr")}
+    ~[\(\)\$]+                                              -> <StringQuotedChars3-LEX>
+    [\(\)]                                                  -> <QuotedBracket3-LEX>
+    "$"                                                     -> <Dollar3-LEX>
 
     "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
     Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
-    <StringQuotedChars4-LEX>                                -> StringQuotedChars4 {cons("QStr")}
-    ~[\<\>]+                                                -> <StringQuotedChars4-LEX>
+    <StringQuotedChars4-LEX>                                -> StringQuotedPart4 {cons("QStr")}
+    <Dollar4-LEX>                                           -> StringQuotedPart4 {cons("QDollar")}
+    "$" <QuotedBracket4-LEX> "$"                            -> StringQuotedPart4 {cons("QBr")}
+    ~[\<\>\$]+                                              -> <StringQuotedChars4-LEX>
+    [\<\>]                                                  -> <QuotedBracket4-LEX>
+    "$"                                                     -> <Dollar4-LEX>
    
     %% Padding is a dummy lexical that will contain the indentation prefix of every quotation
     <Padding-LEX>                                           -> Padding
@@ -626,10 +649,14 @@
 
   lexical restrictions
 
-    StringQuotedChars1 -/- ~[\[\]]   
-    StringQuotedChars2 -/- ~[\{\}]    
-    StringQuotedChars3 -/- ~[\(\)]    
-    StringQuotedChars4 -/- ~[\<\>]
+    StringQuotedChars1 -/- ~[\[\]\$]   
+    StringQuotedChars2 -/- ~[\{\}\$]    
+    StringQuotedChars3 -/- ~[\(\)\$]    
+    StringQuotedChars4 -/- ~[\<\>\$]
+    Dollar1            -/- [\[\]] . [\$]
+    Dollar2            -/- [\{\}] . [\$]
+    Dollar3            -/- [\(\)] . [\$]
+    Dollar4            -/- [\<\>] . [\$]
 
 module Stratego-Core-Constants
 exports

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/spi-file.gif
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/spi-file.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-12-12 11:54:31 UTC (rev 20382)
@@ -179,6 +179,7 @@
             verticalRulerPreferenceKey="analysisAnnotationVerticalKey"
             verticalRulerPreferenceValue="true"/>
    </extension>
+   
    <extension
          point="org.eclipse.imp.runtime.annotationHover">
       <annotationHover
@@ -186,6 +187,14 @@
             language="DynamicRoot">
       </annotationHover>
    </extension>
+   
+   <extension
+         point="org.eclipse.imp.runtime.hoverHelper">
+      <hoverHelper
+            class="org.strategoxt.imp.runtime.services.AnnotationHoverHelper"
+            language="DynamicRoot">
+      </hoverHelper>
+   </extension>
 
    <extension
          point="org.eclipse.ui.actionSets">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-12-12 11:54:31 UTC (rev 20382)
@@ -7,12 +7,7 @@
 import lpg.runtime.IToken;
 
 import org.eclipse.core.resources.IFile;
-import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.model.ISourceProject;
@@ -28,7 +23,6 @@
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.ide.IDE;
-import org.eclipse.ui.progress.UIJob;
 import org.eclipse.ui.texteditor.IDocumentProvider;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
@@ -137,6 +131,11 @@
 		return getParseController().getCurrentAst();
 	}
 	
+	public void scheduleParserUpdate(long delay) {
+		if (!getEditor().getTitleImage().isDisposed())
+			getEditor().fParserScheduler.schedule(delay);
+	}
+	
 	/**
 	 * Gets the document model for this editor, which can be used to manipulate
 	 * the contents of the editor.
@@ -195,34 +194,29 @@
 	 * 
 	 * Exceptions are swallowed and logged.
 	 */
-	public static void asyncOpenEditor(Display display, IProject project, String filename, final boolean activate) {
-		final IResource file = project.findMember(filename);
-		if (!file.exists() || !(file instanceof IFile)) {
-			Environment.logException("Cannot open an editor for " + filename);
-			return;
-		}
-		asyncOpenEditor(display, (IFile) file, activate);
+	public static void asyncOpenEditor(Display display, final IFile file, final boolean activate) {
+		display.asyncExec(new Runnable() {
+			public void run() {
+				openEditor(file, activate);
+			}
+		});
 	}
 
 	/**
-	 * Asynchronously opens or activates an editor.
+	 * Opens a new editor. Must be invoked from the UI thread.
 	 * 
-	 * Exceptions are swallowed and logged.
+	 * PartInitExceptions are swallowed and logged.
 	 */
-	public static void asyncOpenEditor(Display display, final IFile file, final boolean activate) {
-		Job job = new UIJob("Open editor") {
-			@Override
-			public IStatus runInUIThread(IProgressMonitor monitor) {
-				IWorkbenchPage page =
-					PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
-				try {
-					IDE.openEditor(page, file, UniversalEditor.EDITOR_ID, activate);
-				} catch (PartInitException e) {
-					Environment.logException("Cannot open an editor for " + file, e);
-				}
-				return Status.OK_STATUS;
-			}
-		};
-		job.schedule();
+	public static void openEditor(final IFile file, final boolean activate) {
+		if (!isUIThread())
+			throw new IllegalStateException("Must be called from UI thread");
+		
+		IWorkbenchPage page =
+			PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
+		try {
+			IDE.openEditor(page, file, UniversalEditor.EDITOR_ID, activate);
+		} catch (PartInitException e) {
+			Environment.logException("Cannot open an editor for " + file, e);
+		}
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-12 11:54:31 UTC (rev 20382)
@@ -6,13 +6,12 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.runtime.RuntimePlugin;
 import org.eclipse.jface.dialogs.ErrorDialog;
-import org.eclipse.ui.progress.UIJob;
+import org.eclipse.swt.widgets.Display;
 import org.spoofax.interpreter.adapter.aterm.UnsharedWrappedATermFactory;
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.core.InterpreterException;
@@ -28,7 +27,6 @@
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.IMPJSGLRLibrary;
 import org.strategoxt.imp.runtime.stratego.IMPLibrary;
-import org.strategoxt.imp.runtime.stratego.ReportWithFailure;
 import org.strategoxt.imp.runtime.stratego.adapter.WrappedAstNodeFactory;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
 
@@ -87,12 +85,22 @@
 		assert Thread.holdsLock(getSyncRoot()) : "Please use the course-grained Environment.getSyncRoot() lock";
 	}
 	
-	public static void assertMainThread() {
-		if (mainThread == null)
-			mainThread = Thread.currentThread();
-		assert mainThread == Thread.currentThread() : "Please only perform this operation from the main thread";
+	private static void initMainThread() {
+		Thread thread = Thread.currentThread();
+		if (thread.getName().equals("main"))
+			mainThread = thread;
 	}
 	
+	public static boolean isMainThread() {
+		if (mainThread == null) initMainThread();
+		if (mainThread == null) return false;
+		return Thread.currentThread() == mainThread;
+	}
+	
+	public static void assertNotMainThread() {
+		assert !isMainThread() : "Potential deadlock when performing this synchronized operation from the main thread";
+	}
+	
 	// BASIC ACCESSORS
 	
 	public static WrappedAstNodeFactory getTermFactory() {
@@ -146,7 +154,6 @@
 		result.addOperatorRegistry(new IMPJSGLRLibrary(sglrLibrary));
 		result.addOperatorRegistry(new IMPLibrary());
 		result.setIOAgent(new EditorIOAgent());
-		ReportWithFailure.init();
 		
 		return result;
 	}
@@ -205,13 +212,11 @@
 	}
 
 	public static void asynOpenErrorDialog(final String caption, final String message, final Throwable exception) {
-		new UIJob("Report error") {
-			@Override
-			public IStatus runInUIThread(IProgressMonitor monitor) {
+		Display.getDefault().asyncExec(new Runnable() {
+			public void run() {
 				Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message, exception);
 				ErrorDialog.openError(null, caption, null, status);
-				return Status.OK_STATUS;
 			}
-		}.schedule();
+		});
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-12 11:54:31 UTC (rev 20382)
@@ -25,6 +25,7 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 
@@ -34,11 +35,16 @@
  * @see DescriptorFactory#load(IFile, IResource)
  */
 public class Descriptor {
+	
 	public static final String ROOT_LANGUAGE = "DynamicRoot";
 
 	protected static final Language DESCRIPTOR_LANGUAGE =
 		new Language("EditorService-builtin", "org.strategoxt.imp.builtin.editorservice", "", ROOT_LANGUAGE, null, "", null, "", "", null);
 	
+	protected static final String DEFAULT_ICON = "icons/IMP-editor.gif";
+	
+	protected static final String DEFAULT_ICON_BUNDLE = RuntimeActivator.getDefault().getBundle().getSymbolicName();
+	
 	private final Map<AbstractService, Object> services = new WeakHashMap<AbstractService, Object>();
 	
 	private final List<AbstractServiceFactory> serviceFactories = new ArrayList<AbstractServiceFactory>();
@@ -265,11 +271,11 @@
 				getProperty("LanguageId", getProperty("LanguageName")),
 				getProperty("Description", ""),
 				ROOT_LANGUAGE,		  // ("Extends" is not used for IMP)
-				getProperty("Icon", ""), // TODO: icon path in esv language
+				DEFAULT_ICON, // TODO: icon path in esv language
 				getProperty("URL", ""),
 				// FIXME: ID of the bundle containing the language descriptor and icon for this language
 				//        (does getAttachmentProvider() already provide enough functionality for this?)
-				getProperty("LanguageId", getProperty("LanguageName")), 
+				DEFAULT_ICON_BUNDLE, 
 				getProperty("Extensions"),
 				getProperty("Aliases", ""),
 				new MetaFileLanguageValidator(this));

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorRegistry.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorRegistry.java	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorRegistry.java	2009-12-12 11:54:31 UTC (rev 20382)
@@ -7,10 +7,13 @@
 import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
+import org.eclipse.imp.runtime.RuntimePlugin;
+import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.IEditorDescriptor;
 import org.eclipse.ui.IFileEditorMapping;
 import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.internal.UIPlugin;
 import org.eclipse.ui.internal.registry.EditorDescriptor;
 import org.eclipse.ui.internal.registry.EditorRegistry;
 import org.eclipse.ui.internal.registry.FileEditorMapping;
@@ -99,17 +102,18 @@
 			FileEditorMapping mapping = getMapping(mappings, extension);
 			boolean existing = mapping != null;
 			if (!existing)
-	            mapping = new FileEditorMapping(extension);
+	            mapping = new DynamicEditorMapping(language, extension); // TODO: create something like a IMPFileEditorMapping, linking to our favorite image 
 			
+	        /* UNDONE: no longer setting default editor; breaks icon
 	        IEditorDescriptor defaultEditor = mapping.getDefaultEditor();
 	        
 	        if (defaultEditor == null || defaultEditor.getId().equals("")
 	        		|| "str".equals(extension) || "sdf".equals(extension)) {
 	        	mapping.setDefaultEditor(universalEditor);
-	        } else {
+	        } else {*/
 	        	if (!isUniversalEditorIncluded(mapping))
 	        		mapping.addEditor(universalEditor);
-	        }
+	        //}
 	        
 	        if (!existing)
 	        	mappings.add(mapping);
@@ -132,4 +136,24 @@
 			return null;
 		}
 	}
+	
+	/**
+	 * Maps an extension to an editor and provides editors with an icon.
+	 */
+	private static class DynamicEditorMapping extends FileEditorMapping {
+		
+		private final ImageDescriptor imageDescriptor =
+			UIPlugin.imageDescriptorFromPlugin(
+					RuntimePlugin.getInstance().getID(), Descriptor.DEFAULT_ICON);
+
+		public DynamicEditorMapping(Language language, String extension) {
+			super(language.getName(), extension);
+		}
+		
+		@Override
+		public ImageDescriptor getImageDescriptor() {
+			return imageDescriptor;
+		}
+		
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-12-12 11:54:31 UTC (rev 20382)
@@ -126,9 +126,8 @@
 	public void reinitialize(Descriptor newDescriptor) throws BadDescriptorException {
 		super.reinitialize(newDescriptor);
 		isReinitialized = true;
-		if (lastEditor != null && !lastEditor.getEditor().getTitleImage().isDisposed()) {
-			lastEditor.getEditor().fParserScheduler.schedule(REINIT_PARSE_DELAY);
-		}
+		if (lastEditor != null)
+			lastEditor.scheduleParserUpdate(REINIT_PARSE_DELAY);
 	}
 
 	public Object parse(String input, IProgressMonitor monitor) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2009-12-12 11:54:31 UTC (rev 20382)
@@ -1,8 +1,6 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
-import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.imp.editor.UniversalEditor;
-import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.imp.services.ITokenColorer;
 import org.eclipse.jface.text.IRegion;
@@ -43,10 +41,6 @@
 		lastParseController = controller;
 		TextAttribute result = getWrapped().getColoring(controller, token);
 		if (isReinitializing) result = toGray(result);
-		if (token.toString().indexOf("2") > -1
-				&& (result.getForeground() == null || result.getForeground().getRed() == 0 || result.getForeground().getBlue() == 0)) {
-			System.out.print(""); // DEBUG
-		}
 		return result;
 	}
 	
@@ -57,15 +51,13 @@
 		if (lastParseController instanceof DynamicParseController)
 			lastEditor = ((DynamicParseController) lastParseController).getLastEditor().getEditor();
 
-		if (lastEditor != null && !lastEditor.getTitleImage().isDisposed()) {
+		if (lastEditor != null && !lastEditor.getTitleImage().isDisposed())
 			lastEditor.updateColoring(new Region(0, lastEditor.getServiceControllerManager().getSourceViewer().getDocument().getLength()));
-			IModelListener presentation = lastEditor.getServiceControllerManager().getPresentationController();
-			presentation.update(lastParseController, new NullProgressMonitor());
-		}
 	}
 	
 	@Override
 	public void reinitialize(Descriptor newDescriptor) throws BadDescriptorException {
+		super.reinitialize(newDescriptor);
 		isReinitializing = false;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-11 15:33:13 UTC (rev 20381)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-12 11:54:31 UTC (rev 20382)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime.parser;
 
+import static java.lang.Math.*;
 import static org.spoofax.jsglr.Term.*;
 
 import java.util.ArrayList;
@@ -8,6 +9,10 @@
 import lpg.runtime.IToken;
 
 import org.eclipse.core.resources.IMarker;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.terms.TermConverter;
@@ -18,8 +23,10 @@
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.ast.AsfixAnalyzer;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
+import org.strategoxt.imp.runtime.parser.ast.MarkerSignature;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRTokenizer;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
+import org.strategoxt.imp.runtime.services.StrategoObserver;
 import org.strategoxt.lang.Context;
 import org.strategoxt.stratego_aterm.stratego_aterm;
 import org.strategoxt.stratego_sglr.implode_asfix_0_0;
@@ -64,7 +71,15 @@
 	 * The parse stream character that indicates EOF was unexpected.
 	 */
 	public static final char UNEXPECTED_EOF_CHAR = (char) -2;
+
+	public static final String UNEXPECTED_TOKEN_POSTFIX = "' not expected here";
 	
+	public static final String UNEXPECTED_TOKEN_PREFIX = "Syntax error, '";
+	
+	public static final String UNEXPECTED_REGION = "Could not parse this fragment: misplaced construct(s)";
+	
+	public static final int PARSE_ERROR_DELAY = min(StrategoObserver.OBSERVER_DELAY + 50, 1000);
+	
 	private static Context asyncAmbReportingContext;
 	
 	private final AstMessageHandler handler = new AstMessageHandler(AstMessageHandler.PARSE_MARKER_TYPE);
@@ -77,6 +92,8 @@
 	
 	private boolean inLexicalContext;
 	
+	private volatile int additionsVersionId;
+	
 	private List<Runnable> errorReports = new ArrayList<Runnable>();
 
 	public ParseErrorHandler(SGLRParseController source) {
@@ -109,26 +126,99 @@
 			reportError(tokenizer, e);
 		}
 	}
-
-	public void commitChanges() {
-		// Threading concerns:
+	
+	/**
+	 * @see AstMessageHandler#commitDeletions()
+	 */
+	public void commitDeletions() {
 		//   - must not be synchronized; uses resource lock
 		//   - when ran directly from the main thread, it may block other
 		//     UI threads that already have a lock on my resource,
 		//     but are waiting to run in the UI thread themselves
 		//   - reporting errors at startup may trigger the above condition,
 		//     at least for files with an in-workspace editor(?)
-		assert !source.getParseLock().isHeldByCurrentThread();
-		try {
-			for (Runnable marker : errorReports) {
-				marker.run();
-			}
-			handler.commitChanges();
-		} catch (RuntimeException e) {
-			Environment.logException("Could not commit syntax error marker changes", e);
+		//   - also see SGLRParseController.onParseCompleted
+		assert source.getParseLock().isHeldByCurrentThread();
+		assert !Thread.holdsLock(Environment.getSyncRoot()) : "Potential deadlock";
+		
+		for (Runnable marker : errorReports) {
+			marker.run();
 		}
+		errorReports.clear();
+		handler.commitDeletions();
 	}
+	
+	/**
+	 * @see AstMessageHandler#commitMultiErrorLineAdditions()
+	 */

(1553 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Sat Dec 12 12:58:30 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 12 Dec 2009 11:58:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20383 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator
	org.strategoxt.imp.generator/META-INF
	org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/sdf2imp/util
	org.strategoxt.imp.generator/test org.strategoxt.imp.metatooling
	org.strategoxt.imp.metatooling/META-INF
	org.strategoxt.imp.metatooling/lib
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
Message-ID: <200912121158.nBCBwUmP001119@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-12 11:58:30 +0000 (Sat, 12 Dec 2009)
New Revision: 20383

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20383&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/lib/
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/lib/dummy.jar
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-folding-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-outliner-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-editor-service.sh
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-foo.sh
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java

Log:
(Much) better performance of editor building and loading [SPI-22]
- Ant build script no longer reloads Stratego components every time it runs [SPI-17]
- Don't generate files unnecessarily [SPI-21]
- Now less dependent on Ant properties (javac still needs a utils/strategoxt.jar file) [SPI-19]
- build.xml now directly launches the editor loader so you see what happens and it's less fragile


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-12-12 11:58:30 UTC (rev 20383)
@@ -15,7 +15,8 @@
  org.junit,
  org.eclipse.swt,
  org.spoofax.compiler,
- org.strategoxt.strj
+ org.strategoxt.strj,
+ org.eclipse.ant.core
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-12-12 11:58:30 UTC (rev 20383)
@@ -37,7 +37,8 @@
 STRJ=`if which strj >/dev/null; then echo strj; elif [ -e strategoxt.jar ]; then echo java -server -Xss4m -jar strategoxt.jar; else echo Please install strj or put strategoxt.jar into the current directory. >&2; exit 1; fi`
 
 SDFINCLUDES = \
-    -Idef ${HOME}/.nix-profile/share/java-front/Stratego-Java-EBlock.def
+    -Idef ${HOME}/.nix-profile/share/java-front/Stratego-Java-EBlock.def \
+    -Idef ${HOME}/opt/java-front/share/java-front/Stratego-Java-EBlock.def
 
 # I don't care much for nullary constructor warnings unless it's about lowercase ones, such as 'start'
 STRCSTFU=2>&1 | grep -vE 'warning ] Nullary constructor .*[A-Z]|warning ] multiple external| \[ExtSDef\(|stratego-trm|module-name-checked|module-name-checked"' \

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties	2009-12-12 11:58:30 UTC (rev 20383)
@@ -1,8 +1,10 @@
 output.org.strategoxt.imp.metatooling/ = bin/
-source.includes = src,src-gen/
+source.includes = src,\
+                  src-gen/,
 bin.includes = META-INF/,\
                includes,\
                lib/make_permissive.jar,\
-               lib/sdf2imp.jar
+               lib/sdf2imp.jar,\
+               plugin.xml
 src.includes = src/,\
                lib/

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-12-12 11:58:30 UTC (rev 20383)
@@ -58,7 +58,7 @@
     with(<chdir> <dirname>; <chdir> "..");
     guarantee-extension(|"def"); // remove .main.esv
     base-filename;
-    (file-exists <+ <conc-strings> ("include/", <id>));
+    (file-exists <+ !$[include/[<id>]]);
     if not(file-exists) then
       fatal-err(|"Accompanying .def file not found.")
     end;
@@ -78,7 +78,7 @@
         !FILE(<id>)
       else
         where(
-          <file-exists> <conc-strings> ("include/", <InputFile>)
+          <file-exists> $[include/[<InputFile>]]
         <+
           <file-exists <+ mkdir> "include";
           <copy-file> (<InputFile>, "include")
@@ -95,11 +95,13 @@
       end;
       create-grammar;
       create-trans;
-      input := <pack-default-sdf> FILE(<conc-strings> ("syntax/", <get-sdf-main-module>, ".sdf"))
+      input := <pack-default-sdf> FILE($[syntax/[<get-sdf-main-module>].sdf])
     end;
-  
+    
     configure-main-descriptor;
-    <sdf2rtg => RTG(_, ProdRules(<id>)); register-rtg> input;
+    if is-heuristic-services-needed then
+      <sdf2rtg => RTG(_, ProdRules(<id>)); register-rtg> input
+    end;
     
     if not(IsLaunchedFromEclipse) then
       // We could build the table here, but doing it from ant is more customizable
@@ -131,15 +133,31 @@
     create-build-xml;
     create-builder-xml;
     create-example-file;
+    create-trans-helper;
     copy-jars;
     copy-def-file;
     
     say(!"SUCCESS: completed with 0 fatal errors.")
+
+  is-heuristic-services-needed =
+    not(
+      <is-older-than> (
+        <guarantee-extension(|"rtg")> <InputFile>
+      , [ $[[<descriptor-name>]-Outliner.generated.esv],
+          $[[<descriptor-name>]-Outliner.esv],
+          $[[<descriptor-name>]-Folding.generated.esv],
+          $[[<descriptor-name>]-Folding.esv]]
+      )
+    )
   
   // (Note that these xtc calls are intercepted by the Spoofax/IMP runtime.)
   sdf2rtg:
     FILE(sdf) -> rtg
     with
+      <file-exists> <guarantee-extension(|".rtg")> sdf;
+      verbose-msg(!"Importing regular tree grammar from", id);
+      parse-rtg-file
+    <+
       verbose-msg(!"Analyzing grammar...");
       if FILE(has-extension(|"sdf")) then
         fatal-err(|"Input file must be a .def file.")
@@ -151,31 +169,12 @@
       sdf-desugar;
       core-sdf-grammar2rtg => rtg
 
-  /* UNDONE: sdf2def converts a single SDF file to a DEF file.
-  sdf2def: 
-    FILE(sdf) -> FILE(def)
-    where      
-      <file-exists <+ mkdir> "include";
-      def       := <conc-strings> ("include/", <get-sdf-main-module>, ".def");
-      streamin  := <fopen> (sdf, "r");
-      streamout := <fopen> (def, "w");
-      finally(
-        <fputs> ("definition\n", streamout);
-        repeat(
-          <fgetc> streamin; <fputc> (<id>, streamout)
-        )
-      , <fclose> streamin;
-        <fclose> streamout
-      )
-  */
-
   pack-default-sdf:
     FILE(sdf) -> FILE(def)
     with
-      def := <conc-strings> ("include/", <get-sdf-main-module>, ".def");
+      def := $[include/[<get-sdf-main-module>].def];
       <file-exists <+ mkdir> "include";
       
-      // <xtc-command(!"pack-sdf")> ["-i", sdf, "-o", def | <pass-verbose>]
       <pack-sdf(|[IncludeDir("syntax")])> FILE(sdf) => (_, def-asfix);
       stream := <fopen> (def, "w");
       <asfix-yield(|stream)> def-asfix;

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-12 11:58:30 UTC (rev 20383)
@@ -7,6 +7,7 @@
 strategies
 
   // TODO: -XX:+TieredCompilation in Java 7?
+  // TODO: generate .pp.af file
 
   create-build-xml =
     <file-exists> "build.xml"
@@ -57,7 +58,6 @@
                         -la stratego-lib -la stratego-sglr
                         -la stratego-gpp -la stratego-xtc
                         -la stratego-aterm"/>
-        <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -89,8 +89,7 @@
         </target>
         
         <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
-            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
                 <arg value="-p"/>
@@ -122,8 +121,7 @@
         </target>
     
         <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="utils/make_permissive.jar:utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-o"/>
@@ -134,9 +132,9 @@
 
         <target name="utils-files">
             <mkdir dir="utils"/>
-            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils"/>
-            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar"         todir="utils"/>
-            <copy file="${eclipse.spoofaximp.strategojar}"              todir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
         </target>
     
         <target name="pack-sdf" unless="externaldef">
@@ -151,8 +149,7 @@
         </target>
     
         <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
-            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
+            <java classname="start" failonerror="true">
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
                 <arg value="${syntax}/${sdfmodule}.sdf"/>
@@ -184,8 +181,7 @@
         </target>
     
         <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
-            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
+            <java classname="start" failonerror="true">
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.rtg"/>
@@ -206,8 +202,7 @@
         </target>
     
         <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
-            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
+            <java classname="start" failonerror="true">
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
@@ -231,13 +226,12 @@
         </target>
     
         <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
-            <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
+            <java classname="start" failonerror="true">
                 <arg value="org.strategoxt.tools.main-ppgen"/>
                 <arg value="-i"/>
-                <arg value="${sdfmodule}.def"/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-o"/>
-                <arg value="${sdfmodule}.pp"/>
+                <arg value="${include}/${sdfmodule}.pp"/>
             </java>
         </target>
     
@@ -279,8 +273,7 @@
         </target>
             
         <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
-            <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
                 <arg value="-o"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-12-12 11:58:30 UTC (rev 20383)
@@ -14,7 +14,7 @@
     <file-exists> <conc-strings> (".externalToolBuilders/", <builder-xml-name>)
   <+
     // We use plain text since the XML pretty printer has problems with this file.
-    // Also, half the time ${project_name} and ${project_loc} don't work,
+    // Also, half the time ${project_name} AND ${project_loc} don't work,
     // so we're using a compile-time 'project-name' variable instead.
     project-name := <ProjectName <+ get-sdf-main-module>;
     

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-12-12 11:58:30 UTC (rev 20383)
@@ -17,21 +17,17 @@
     sdf-name := <get-sdf-main-module>;
     
     <output-text-file(|["trans"], <conc-strings> (name, ".str"))>
-    <conc-strings>
-(
-"module ", name, "
 
+${module {name}
+
 imports
   libstratego-lib
   libstratego-gpp
   libstratego-aterm
-  include/", sdf-name, "
+  include/{sdf-name}
+  include/entities
 
-/**
- * Main editor interface
- * (defined by the ", sdf-name, "-Builders/-References.esv files)
- */
-rules
+rules // Main editor interface (defined by the {sdf-name}-Builders/-References.esv files)
   
   /**
    * Analyzes the current program.
@@ -74,19 +70,20 @@
       target := <GetEntity> type
 
   /**
-   * Returns \"hover help\" information for a particular node in the editor.
+   * Returns "hover help" information for a particular node in the editor.
    * For references, this rule is invoked using the resolved term.
    */
   editor-hover:
-    (target, position, ast, path, project-path) -> <conc-strings> (\"Hover help: \", <write-to-string> target)
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
   
   /**
    * Transforms a selection to Java.
    */
   generate-java:
-    (selected, position, ast, path, project-path) -> (\"filename\", \"result-string\")
+    (selected, position, ast, path, project-path) -> (filename, result)
     with
-      fatal-err(|\"Not implemented\")
+      filename := <guarantee-extension(|"java")> path;
+      result   := <bottomup(try(to-java))> selected
   
   /**
    * Prints the abstract syntax ATerm of a selection.
@@ -94,66 +91,93 @@
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result-string)
     with
-      filename      := <guarantee-extension(|\"aterm\")> path;
+      filename      := <guarantee-extension(|"aterm")> path;
       result-string := <pp-aterm-box; box2text-string(|120)> selected
 
-/**
- * Semantic rules
- */
-rules
+rules // Code generation
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d*]
+     ]
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] ${$
+           [p*]
+       $}$
+     ]
+
+  to-java:
+    Property(x, t) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] ${$
+          return [x];  
+      $}$
+      
+      public [t] set_[x] ([t] [x]) ${$
+          this.[x] = [x];    
+      $}$
+    ]    
+  
+ to-java:
+    Type(t) -> t
+
+rules // Semantic rules
     
   /**
    * Reports an error if a property type is undefined.
    * This error is reported on the type name.
    */
   constraint-error:
-    Property(x, Type(type)) -> (type, [\"Type \", type, \" is not defined\"])
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
     where
-      not(!type => \"String\"); // String and Int are built-in types
-      not(!type => \"Int\");
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
       not(<GetEntity> type) // no entity for this type
   
   /**
    * Reports an error if an entity is defined more than once.
-   * This constraint is implemented by testing if the \"bag\" of
+   * This constraint is implemented by testing if the "bag" of
    * all entities x is not a singleton list.
    * This error is reported on the entity name x.
    */
   constraint-error:
-    Entity(x, _) -> (x, \"Duplicate entity name\")
+    Entity(x, _) -> (x, $[Duplicate entity name])
     where
       not(<bagof-GetEntity> x => [_])
   
-  /**
-   * Reports a warning if an entity name does not start with a capital.
-   * This error is reported on the entity name x.
-   */
   constraint-warning:
-    Entity(x, _) -> (x, \"Entity names must start with a capital\")
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
     where
       not(<explode-string; Hd; is-upper> x)
   
-  /**
-   * Adds a note to modules named \"example.\"
-   */
   constraint-note:
-    Module(x, _) -> (x, [\"This is just an example program in the \\\"entities\\\" language,\",
-                         \" (this note is defined in trans/", name, ".str) ])\"])
-    where
-      !x => \"example\"
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                     (this note is defined in trans/{name}.str) ])
 
-signature constructors
+}
 
-  // HACK: Below are copies of the signatures of the terms used in this file.
-  // These definitions are actually automatically generated in the imported
-  // include/", sdf-name, ".str module. However, to ensure that this example
-  // file doesn't break if the syntax is changed, we also include them here.
-  // Consider this a newbie treat; now that you got this far reading through
-  // this file, just try removing them and see if the build still works! ;)
-  
-  Module   : ID * List(Entity)   -> Module
-  Entity   : ID * List(Property) -> Entity
-  Property : ID * Type           -> Property
-  Type     : ID                  -> Type
-"
-)
+  create-trans-helper =
+    <file-exists> "include/entities.str"
+  <+
+    name     := <trans-module-name>;
+    sdf-name := <get-sdf-main-module>;
+    <output-text-file(|["include"], "entities.str")>
+    ${module {name}
+
+      signature constructors
+
+        // Below are copies of the signatures of the terms used in example {name}.str file.
+        // These definitions are actually automatically generated in the imported
+        // include/{sdf-name}.str module. However, to ensure that this example
+        // file doesn't break if the syntax is changed, we also include them here.
+          
+        Module   : ID * List(Entity)   -> Module
+        Entity   : ID * List(Property) -> Entity
+        Property : ID * Type           -> Property
+        Type     : ID                  -> Type
+    }

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str	2009-12-12 11:58:30 UTC (rev 20383)
@@ -69,7 +69,10 @@
         white     = 255 255 255   
         black     = 0 0 0         
         gray      = 128 128 128   
-        grey      = gray          
+        grey      = gray       
+        orange    = 255 165 0
+        pink      = 255 105 180   
+        brown     = 139 69 19
         default   = _       
       ]|
     )

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-folding-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-folding-descriptor.str	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-folding-descriptor.str	2009-12-12 11:58:30 UTC (rev 20383)
@@ -23,6 +23,11 @@
       ]|
     );
     
+    if is-heuristic-services-needed then
+      create-derived-folding-descriptor
+    end
+  
+  create-derived-folding-descriptor =
     output-derived-descriptor-file(
       <descriptor-name> "-Folding.generated"
     , 

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-outliner-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-outliner-descriptor.str	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-outliner-descriptor.str	2009-12-12 11:58:30 UTC (rev 20383)
@@ -24,6 +24,11 @@
       ]|
     );
     
+    if is-heuristic-services-needed then
+      create-derived-outliner-descriptor
+    end
+  
+  create-derived-outliner-descriptor =
     output-derived-descriptor-file(
       <descriptor-name> "-Outliner.generated"
     , 

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str	2009-12-12 11:58:30 UTC (rev 20383)
@@ -96,6 +96,15 @@
   fetch-imports:
     Module(_, NoImports(), _) -> <id>
 
+  is-older-than =
+    ?(file, otherfiles);
+    basetime := <modification-time> file;
+    !otherfiles;
+    list-loop(
+      <lt> (basetime, <modification-time>)
+    )
+    
+
 /**
  * @internal
  */

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-editor-service.sh
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-editor-service.sh	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-editor-service.sh	2009-12-12 11:58:30 UTC (rev 20383)
@@ -10,3 +10,6 @@
 
 ../../sdf2imp -i $ES.def -p $ES.tbl -m EditorService -s Module -e esv --verbose 2
 ../../sdf2imp -i $ES.def -m EditorService --verbose 2
+
+cd ..
+rm -rf editorservice

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-foo.sh
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-foo.sh	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-foo.sh	2009-12-12 11:58:30 UTC (rev 20383)
@@ -7,3 +7,6 @@
 cd foo
 
 ../../sdf2imp -m Foo -e foo --verbose 2
+
+cd ..
+rm -rf foo

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh	2009-12-12 11:58:30 UTC (rev 20383)
@@ -12,3 +12,6 @@
 ../../sdf2imp -i $SJ.def -m Stratego-Java-15
 ../../sdf2imp -i editor/Stratego-Java-15.main.esv
 (cd editor; ../../../sdf2imp -i Stratego-Java-15.main.esv)
+
+cd ..
+rm -rf stratego-java

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-12-12 11:58:30 UTC (rev 20383)
@@ -29,7 +29,8 @@
  org.strategoxt.imp.editors.stratego,
  org.strategoxt.imp.editors.aterm,
  org.eclipse.ant.core,
- org.strategoxt.imp.nativebundle
+ org.strategoxt.imp.nativebundle,
+ org.apache.ant
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-Activator: org.strategoxt.imp.metatooling.MetatoolingActivator
 Bundle-ActivationPolicy: lazy

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/build.properties	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/build.properties	2009-12-12 11:58:30 UTC (rev 20383)
@@ -3,4 +3,5 @@
 bin.includes = META-INF/,\
                plugin.xml,\
                .,\
-               icons/
+               icons/,\
+               lib/dummy.jar

Added: spoofax-imp/trunk/org.strategoxt.imp.metatooling/lib/dummy.jar
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.metatooling/lib/dummy.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml	2009-12-12 11:58:30 UTC (rev 20383)
@@ -2,6 +2,10 @@
 <?eclipse version="3.0"?>
 
 <plugin>
+   <!-- We indirectly put our plugins on the Ant classpath by putting a dummy jar on it -->
+   <extension point="org.eclipse.ant.core.extraClasspathEntries">
+      <extraClasspathEntry library="lib/dummy.jar"/>
+   </extension>
    <extension
          point="org.eclipse.imp.runtime.languageDescription">
       <language

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java	2009-12-12 11:58:30 UTC (rev 20383)
@@ -19,6 +19,8 @@
 		if (!result.endsWith(".jar")) { // ensure correct jar at development time
 			String result2 = result + "/../strategoxt.jar";
 			if (new File(result2).exists()) return result2;
+			result2 = result + "/java/strategoxt.jar";
+			if (new File(result2).exists()) return result2;
 		}
 		return result;
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java	2009-12-12 11:58:30 UTC (rev 20383)
@@ -0,0 +1,34 @@
+package org.strategoxt.imp.metatooling.building;
+
+import java.io.File;
+import java.net.URI;
+import java.util.Arrays;
+
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.IWorkspace;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * Triggers descriptor building and loading from an Ant build file.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class AntDescriptorBuilder {
+	public static void main(String[] args) {
+		if (args == null || args.length == 0 || !new File(args[0]).exists())
+			throw new IllegalArgumentException("Existing descriptor file expected: " + Arrays.toString(args));
+		
+		URI uri = new File(args[0]).toURI();
+		IWorkspace workspace = ResourcesPlugin.getWorkspace();
+		IResource[] resources = workspace.getRoot().findFilesForLocationURI(uri);
+		if (resources.length == 0)
+			throw new IllegalArgumentException("File not in workspace: " + args[0]);
+		
+		synchronized (Environment.getSyncRoot()) {
+			DynamicDescriptorUpdater.getInstance().updateResource(resources[0], new NullProgressMonitor(), false);
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-12-12 11:54:31 UTC (rev 20382)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-12-12 11:58:30 UTC (rev 20383)
@@ -141,6 +141,8 @@
 			if (!jar1.endsWith(".jar")) { // ensure correct jar at development time
 				String jar1a = jar1 + "/../strategoxt.jar";
 				if (new File(jar1a).exists()) jar1 = jar1a;
+				jar1a = jar1 + "/java/strategoxt.jar";
+				if (new File(jar1a).exists()) jar1 = jar1a;
 			}
 			assert jar1.endsWith(".jar") && jar2.endsWith(".jar") && jar3.endsWith(".jar") : "Library files are not in JAR"; // please refresh the strj projectin Eclipse
 			sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "--verbose", "2", "-jar", jar1, jar2, jar3);
@@ -186,13 +188,13 @@
 
 		monitor.setTaskName("Opening editor tabs");
 		Display display = getShell().getDisplay();
-		EditorState.asyncOpenEditor(display,  project, "/trans/" + toStrategoName(languageName) +  ".str", true);
+		EditorState.asyncOpenEditor(display, project.getFile("/trans/" + toStrategoName(languageName) +  ".str"), true);
 		monitor.worked(1);
-		EditorState.asyncOpenEditor(display, project, "/editor/" + languageName +  ".main.esv", true);
+		EditorState.asyncOpenEditor(display, project.getFile("/editor/" + languageName +  ".main.esv"), true);
 		monitor.worked(1);
-		EditorState.asyncOpenEditor(display, project, "/syntax/" + languageName +  ".sdf", true);
+		EditorState.asyncOpenEditor(display, project.getFile("/syntax/" + languageName +  ".sdf"), true);
 		monitor.worked(1);
-		EditorState.asyncOpenEditor(display, project, "/test/example." + extensions.split(",")[0], false);
+		EditorState.asyncOpenEditor(display, project.getFile("/test/example." + extensions.split(",")[0]), false);
 		monitor.done();
 	}
  	



From L.C.L.Kats at tudelft.nl  Sat Dec 12 13:26:04 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 12 Dec 2009 12:26:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20384 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp: .
	services
Message-ID: <200912121226.nBCCQ4lr001760@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-12 12:26:04 +0000 (Sat, 12 Dec 2009)
New Revision: 20384

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20384&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/common.str

Log:
Minor fixes related to not generating files unnecessarily (SPI-21)


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-12-12 11:58:30 UTC (rev 20383)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-12-12 12:26:04 UTC (rev 20384)
@@ -143,10 +143,11 @@
     not(
       <is-older-than> (
         <guarantee-extension(|"rtg")> <InputFile>
-      , [ $[[<descriptor-name>]-Outliner.generated.esv],
-          $[[<descriptor-name>]-Outliner.esv],
-          $[[<descriptor-name>]-Folding.generated.esv],
-          $[[<descriptor-name>]-Folding.esv]]
+      , [ <descriptor-name> "Outliner.generated.esv"
+        , <descriptor-name> "Outliner.esv"
+        , <descriptor-name> "Folding.generated.esv"
+        , <descriptor-name> "Folding.esv"
+        ]
       )
     )
   
@@ -154,9 +155,9 @@
   sdf2rtg:
     FILE(sdf) -> rtg
     with
-      <file-exists> <guarantee-extension(|".rtg")> sdf;
+      <file-exists> <guarantee-extension(|"rtg")> sdf;
       verbose-msg(!"Importing regular tree grammar from", id);
-      parse-rtg-file
+      parse-rtg-file => rtg
     <+
       verbose-msg(!"Analyzing grammar...");
       if FILE(has-extension(|"sdf")) then
@@ -179,4 +180,3 @@
       stream := <fopen> (def, "w");
       <asfix-yield(|stream)> def-asfix;
       <fclose> stream
-

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/common.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/common.str	2009-12-12 11:58:30 UTC (rev 20383)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/common.str	2009-12-12 12:26:04 UTC (rev 20384)
@@ -19,7 +19,7 @@
   // TODO2: descriptor-name should have an aterm argument, overloading main-descriptor-name
   
   descriptor-name:
-    name -> <conc-strings> (prefix, name)
+    name -> $[[prefix][name]]
     with
       prefix := <DescriptorNamePrefix <+ get-sdf-main-module>
   



From L.C.L.Kats at tudelft.nl  Mon Dec 14 10:10:27 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 14 Dec 2009 09:10:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20385 - LennartKats -
	strategoxt/trunk/sdf-front/parse
	strategoxt/trunk/stratego-libraries/lib/spec/system/io
	strc-java/trunk/.settings strc-java/trunk/java
	strc-java/trunk/java/runtime/org/strategoxt
	strc-java/trunk/java/tools/org/strategoxt/tools/lib
	strc-java/trunk/tools strc-java/trunk/trans
Message-ID: <200912140910.nBE9ARcD017792@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-14 09:10:27 +0000 (Mon, 14 Dec 2009)
New Revision: 20385

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20385&view=rev

Modified:
   strategoxt/trunk/sdf-front/parse/pack-sdf.str
   strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str
   strc-java/trunk/.settings/org.eclipse.jdt.core.prefs
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/pack-sdf.str
   strc-java/trunk/tools/strj-jar
   strc-java/trunk/trans/s2j.str

Log:
Fixed Windows path problems as reported by Danny (SPI-27) related to STR-782.

Changes:

Modified: strategoxt/trunk/sdf-front/parse/pack-sdf.str
===================================================================
--- strategoxt/trunk/sdf-front/parse/pack-sdf.str	2009-12-12 12:26:04 UTC (rev 20384)
+++ strategoxt/trunk/sdf-front/parse/pack-sdf.str	2009-12-14 09:10:27 UTC (rev 20385)
@@ -118,7 +118,7 @@
             end
   
          is-qualified =
-           ?['/' | _] + ?['.' | _ ]
+           ?['/' | _] + ?['.' | _ ] + ?['\' | _] + [is-alpha, ':', '\' | id]
 
      in ?(<id>, _)
       ; ?IncludePathName(<qualify-pathname>)

Modified: strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str	2009-12-12 12:26:04 UTC (rev 20384)
+++ strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str	2009-12-14 09:10:27 UTC (rev 20385)
@@ -146,14 +146,17 @@
 strategies
 
   /**
-   * Returns directory portion of pathname in a POSIX compatible way.
+   * Returns directory portion of pathname in a POSIX compatible way,
+   * after converting all backslashes to forward slashes.
    *
    * @inc   dirname
    * @type  String -> String
    */
   dirname =
     string-as-chars(
-      /* (1) Strip trailing slashes */
+      /* (0) Convert backslashes to forward slashes */
+      all(try(\'\' -> '/'\))
+    ; /* (1) Strip trailing slashes */
       try(split-init-last; ?(<id>, '/'))
     ; /* (2) If string consists entirely of slash characters, string shall be
              set to a single slash character.  In this case, skip steps (3)
@@ -194,7 +197,7 @@
   /**
    * Succeeds if the input pathname is a relative path.
    *
-   * A pathname is relative if it does not start with a /.
+   * A pathname is relative if is-abspath fails.
    *
    * @type  String -> String
    * @since 0.9.4
@@ -209,7 +212,7 @@
    * @inc   base-filename-test
    */
   base-filename =
-      <string-tokenize> (['/'], <id>)
+      <string-tokenize> (['/','\'], <id>)
     ; last
   
 /**

Modified: strc-java/trunk/.settings/org.eclipse.jdt.core.prefs
===================================================================
--- strc-java/trunk/.settings/org.eclipse.jdt.core.prefs	2009-12-12 12:26:04 UTC (rev 20384)
+++ strc-java/trunk/.settings/org.eclipse.jdt.core.prefs	2009-12-14 09:10:27 UTC (rev 20385)
@@ -1,4 +1,4 @@
-#Mon Jun 01 12:56:28 CEST 2009
+#Sat Dec 12 16:28:42 CET 2009
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
@@ -11,6 +11,8 @@
 org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=ignore
 org.eclipse.jdt.core.compiler.problem.deprecation=warning
 org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
 org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
@@ -35,6 +37,7 @@
 org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
 org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
 org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
 org.eclipse.jdt.core.compiler.problem.missingJavadocComments=ignore
 org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding=disabled
 org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility=public
@@ -44,6 +47,7 @@
 org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility=public
 org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
 org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
 org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
 org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
 org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-12-12 12:26:04 UTC (rev 20384)
+++ strc-java/trunk/java/Makefile.am	2009-12-14 09:10:27 UTC (rev 20385)
@@ -81,7 +81,7 @@
 
 SPOOFAX=../../../spoofax/trunk/spoofax
 CLASSPATH=runtime:lib:compiler:tools:spoofax-libs.jar:.
-JAVACFLAGS=-J-Xmx1024m -J-Xms512m -J-server -J-XX:+UseConcMarkSweepGC -cp $(CLASSPATH) -source 5 -nowarn -d bin
+JAVACFLAGS=-J-Xmx1024m -J-Xms512m -J-server -J-XX:+UseConcMarkSweepGC -cp $(CLASSPATH) -source 5 -target 5 -nowarn -d bin
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 
 STRJ=XTC_REPOSITORY="$(BUILD_REPOSITORY)" ../trans/strj
@@ -168,6 +168,12 @@
 lib/org/strategoxt/stratego_rtg/rtg.tbl : $(STRATEGOXT)/share/sdf/stratego-regular/rtg.tbl
 	[ -e lib/org/strategoxt/stratego_rtg ] || mkdir lib/org/strategoxt/stratego_rtg
 	$(ATERM)/bin/baffle -ws -i $< -o $@
+	@if [ `du -b $@ | grep -o '[0-9]*'` -lt 500 ]; then \
+		echo $@ corrupted >&2; \
+		ls -l $@; \
+		rm $@; \
+		exit 1 ;\
+	fi
 
 lib/org/strategoxt/stratego_gpp/Main.java : $(STRATEGOXT)/share/libstratego-gpp.ctree ../trans/strj
 	$(STRJ) -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/sdf/gpp -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.stratego_gpp -la stratego-lib -la stratego-lib -la stratego-sglr

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-12-12 12:26:04 UTC (rev 20384)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-12-14 09:10:27 UTC (rev 20385)
@@ -206,6 +206,7 @@
 
 		URL protocolfulUrl = new URL("jar", "", jar + "!/");
 		JarURLConnection connection = (JarURLConnection) protocolfulUrl.openConnection();
+		connection.setUseCaches(false);
 		JarFile jarFile = connection.getJarFile();
 		Enumeration<JarEntry> jarEntries = jarFile.entries();		
 		boolean foundRegisterer = false;

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/pack-sdf.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/pack-sdf.str	2009-12-12 12:26:04 UTC (rev 20384)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/pack-sdf.str	2009-12-14 09:10:27 UTC (rev 20385)
@@ -106,14 +106,14 @@
   pack-sdf-parse-sdf =
     let qualify-pathname =
             where(explode-string => cs)
-          ; if <is-qualified> cs then
+          ; if <pack-is-qualified> cs then
               id
             else
               <implode-string> ['.', '/' | cs]
             end
   
-         is-qualified =
-           ?['/' | _] + ?['.' | _ ]
+         pack-is-qualified =
+           ?['/' | _] + ?['.' | _ ] + ?['\' | _] + [is-alpha, ':', '\' | id]
 
      in ?(<id>, _)
       ; ?IncludePathName(<qualify-pathname>)

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2009-12-12 12:26:04 UTC (rev 20384)
+++ strc-java/trunk/tools/strj-jar	2009-12-14 09:10:27 UTC (rev 20385)
@@ -87,9 +87,9 @@
 ## COMPILATION
 
 mkdir -p $TEMPDIR || exit 1
-echo "$JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH -d \$TEMPDIR $INPUT $INPUT2 $INPUT3"
+echo "$JAVAC -source 5 -target 5 -nowarn $JAVACFLAGS -cp $CLASSPATH -d \$TEMPDIR $INPUT $INPUT2 $INPUT3"
 set -o pipefail
-$JAVAC -source 5 -nowarn $JAVACFLAGS -cp "$CLASSPATH" -d $TEMPDIR $INPUT $INPUT2 $INPUT3 \
+$JAVAC -source 5 -target 5 -nowarn $JAVACFLAGS -cp "$CLASSPATH" -d $TEMPDIR $INPUT $INPUT2 $INPUT3 \
   | tee $TEMPDIR/javac.log
 if [ $? != 0 ]; then
   if grep "annot be resolved" $TEMPDIR/javac.log >/dev/null; then

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-12-12 12:26:04 UTC (rev 20384)
+++ strc-java/trunk/trans/s2j.str	2009-12-14 09:10:27 UTC (rev 20385)
@@ -134,7 +134,7 @@
          if (isIniting) return null;
          isIniting = true;
          ITermFactory termFactory = context.getFactory();
-         if (constantFactory != termFactory) {
+         if (constantFactory == null) { // don't reinit constants by default
            initConstructors(termFactory);
            initConstants(termFactory);
          }
@@ -157,13 +157,13 @@
      ~*main
      
      ~*<java-split-method> |[
-       private static void initConstructors(ITermFactory termFactory) {
+       public static void initConstructors(ITermFactory termFactory) {
          ~*cnstr-inits
        }
      ]|
      
      ~*<java-split-method> |[
-       private static void initConstants(ITermFactory termFactory) {
+       public static void initConstants(ITermFactory termFactory) {
          ~*cnst-inits
        }
      ]|



From L.C.L.Kats at tudelft.nl  Mon Dec 14 10:40:01 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 14 Dec 2009 09:40:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20386 - LennartKats -
	strc-java/trunk/java
Message-ID: <200912140940.nBE9e2Bd018179@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-14 09:40:01 +0000 (Mon, 14 Dec 2009)
New Revision: 20386

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20386&view=rev

Modified:
   strc-java/trunk/java/Makefile.am

Log:


Changes:

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-12-14 09:10:27 UTC (rev 20385)
+++ strc-java/trunk/java/Makefile.am	2009-12-14 09:40:01 UTC (rev 20386)
@@ -101,8 +101,8 @@
 	  echo "Standard library classes not found; please run 'make all' first." >&2; exit 1; \
 	fi 
 	cp spoofax-libs.jar strategoxt.jar.tmp
-	$(JAR) uf strategoxt.jar.tmp $(JARIN0) $(JARIN1) $(JARIN2) $(JARIN3)
-	$(JAR) uf strategoxt.jar.tmp META-INF/MANIFEST.MF -C bin .
+	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF $(JARIN0) $(JARIN1) $(JARIN2) $(JARIN3)
+	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF -C bin .
 	jar i strategoxt.jar.tmp
 	mv strategoxt.jar.tmp strategoxt.jar
 



From R.B.Vermaas at tudelft.nl  Mon Dec 14 10:40:59 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 14 Dec 2009 09:40:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20387 - rob - hydra/jobs
Message-ID: <200912140940.nBE9ex6n018184@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-12-14 09:40:59 +0000 (Mon, 14 Dec 2009)
New Revision: 20387

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20387&view=rev

Modified:
   hydra/jobs/strategoxt.nix

Log:
added svn to svn build inputs

Changes:

Modified: hydra/jobs/strategoxt.nix
===================================================================
--- hydra/jobs/strategoxt.nix	2009-12-14 09:40:01 UTC (rev 20386)
+++ hydra/jobs/strategoxt.nix	2009-12-14 09:40:59 UTC (rev 20387)
@@ -32,6 +32,7 @@
     [ pkgs.autoconf
       pkgs.automake110x
       pkgs.libtool
+      pkgs.subversion
     ] ++ defaultBuildInputs pkgs;
 
   makeStrategoXTTarball = { name, baseline, useTempPrefix ? false }:  



From R.B.Vermaas at tudelft.nl  Mon Dec 14 10:41:45 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 14 Dec 2009 09:41:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20388 - rob -
	hydra/strategoxt
Message-ID: <200912140941.nBE9fj8k018199@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-12-14 09:41:45 +0000 (Mon, 14 Dec 2009)
New Revision: 20388

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20388&view=rev

Modified:
   hydra/strategoxt/packages.nix

Log:
added svn to svn build inputs

Changes:

Modified: hydra/strategoxt/packages.nix
===================================================================
--- hydra/strategoxt/packages.nix	2009-12-14 09:40:59 UTC (rev 20387)
+++ hydra/strategoxt/packages.nix	2009-12-14 09:41:45 UTC (rev 20388)
@@ -84,12 +84,12 @@
       };
 
       svnBuildInputs = autotools pkgs;
-      svnRequires = [strategoxt] ++ requires;
+      svnRequires = [strategoxt sdf2Bundle] ++ requires;
       svnConfigureFlags = "--enable-baseline";
       makeDistRequiresInstall = true;
 
       buildInputs = [pkgs.pkgconfig];
-      requires = [aterm sdf2Bundle];
+      requires = [aterm];
 
       /**
        * On MinGW the POSIX strategies are not supported.
@@ -1478,6 +1478,7 @@
       pkgs.automake110x
       pkgs.libtool
       pkgs.pkgconfig
+      pkgs.subversion
     ];
 
   genericRPM =



From m.dejonge at tudelft.nl  Mon Dec 14 11:26:45 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 14 Dec 2009 10:26:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20389 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios CriticalScenarios/Zoom Input/Dryad
	Input/Scope src/scenariotests
Message-ID: <200912141026.nBEAQjaH018998@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-14 10:26:45 +0000 (Mon, 14 Dec 2009)
New Revision: 20389

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20389&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/LastChild.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ZoomInRegion/
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break18.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break23.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break22.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break23.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java

Log:


Changes:


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/LastChild.java (from rev 20366, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/ZoomInRegion/LastChild.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/LastChild.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/LastChild.java	2009-12-14 10:26:45 UTC (rev 20389)
@@ -0,0 +1,27 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){//@LC_START
+	  if(true) //@START @Z_START
+		  corrInt();
+	  }//@END @Z_END
+      int i;
+  } //@LC_END
+
+}
+

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break18.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break18.str_java	2009-12-14 09:41:45 UTC (rev 20388)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break18.str_java	2009-12-14 10:26:45 UTC (rev 20389)
@@ -98,12 +98,12 @@
       <set-config> (Stage(), 1)
     );
     test-traits(
-      !["class Foo with Bar {}", FILE("$Trait_Bar.class")] /* ERROR add */ ] /* ERROR */ /* ERROR add */ ] /* ERROR */ //@START
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")] /* ERROR add */ ] /* ERROR */ /* ERROR add */ ] /* ERROR */ //@START //@END
     , ?[ compilation-unit |[ 
            class Foo { void bar() {} }
 	     ]|
 	   , _ // bar
-	   ] //@END
+	   ] 
     )
 
   trait-error-tests =

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break23.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break23.str_java	2009-12-14 09:41:45 UTC (rev 20388)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break23.str_java	2009-12-14 10:26:45 UTC (rev 20389)
@@ -58,9 +58,7 @@
       !"class Foo with Bar {} trait Bar { void bar() {} }"
     , !compilation-unit |[ 
          class Foo                 { void bar() {} }
-         abstract class $Trait_Bar { void bar() {} }
-	   /* ERROR remove ]| */
-	/* ERROR remove ) */; //@END
+         abstract class $Trait_Bar { void bar() {} } /* ERROR remove ]| */	/* ERROR remove ) */; //@END
     test-traits(
       !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
     , !compilation-unit |[ 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break22.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break22.str_java	2009-12-14 09:41:45 UTC (rev 20388)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break22.str_java	2009-12-14 10:26:45 UTC (rev 20389)
@@ -98,12 +98,12 @@
       <set-config> (Stage(), 1)
     );
     test-traits(
-      !["class Foo with Bar {}"/* ERROR remove , */ FILE("$Trait_Bar.class"/* ERROR remove ) *//* ERROR remove ] */ //@START
+      !["class Foo with Bar {}"/* ERROR remove , */ FILE("$Trait_Bar.class"/* ERROR remove ) *//* ERROR remove ] */ //@START // @END
     , ?[ compilation-unit |[ 
            class Foo { void bar() {} }
 	     ]|
 	   , _ // bar
-	   ] // @END
+	   ] 
     )
 
   trait-error-tests =

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break23.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break23.str_java	2009-12-14 09:41:45 UTC (rev 20388)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break23.str_java	2009-12-14 10:26:45 UTC (rev 20389)
@@ -58,9 +58,7 @@
       !"class Foo with Bar {} trait Bar { void bar() {} }"
     , !compilation-unit |[ 
          class Foo                 { void bar() {} }
-         abstract class $Trait_Bar { void bar() {} /* ERROR remove } */
-	   /* ERROR remove ]| */
-	/* ERROR remove ) */; //@END
+         abstract class $Trait_Bar { void bar() {} /* ERROR remove } */	   /* ERROR remove ]| */	/* ERROR remove ) */; //@END
     test-traits(
       !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
     , !compilation-unit |[ 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA2.java	2009-12-14 09:41:45 UTC (rev 20388)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA2.java	2009-12-14 10:26:45 UTC (rev 20389)
@@ -1,5 +1,5 @@
 /* Peak program - Incomplete */
-class C {  //@START
+class C {  
 	void m() {
 		if (true) {
 			for (int i; i < 10; i++) {
@@ -7,4 +7,4 @@
 					if (true) {
 						int a;
 					}
-				} 	/* 	}	} 	} }*/ //@END
+				} 	/* 	}	} 	} }*/ 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java	2009-12-14 09:41:45 UTC (rev 20388)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java	2009-12-14 10:26:45 UTC (rev 20389)
@@ -13,4 +13,5 @@
 	public static final String DIR_CRITICAL_SCENARIOS_PARENT = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"ParentRegion";
 	public static final String DIR_CRITICAL_SCENARIOS_PRIOR = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"PriorRegion";
 	public static final String DIR_CRITICAL_SCENARIOS_SIBLING = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Siblings";
+	public static final String DIR_CRITICAL_SCENARIOS_ZOOM = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Zoom";
 }

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java	2009-12-14 10:26:45 UTC (rev 20389)
@@ -0,0 +1,41 @@
+package scenariotests;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import logging.FileLog;
+
+import org.junit.Test;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.NoRecoveryRulesException;
+
+import testrun.InfraStructure;
+
+
+public class Zoom_Java extends CriticalScenarios_Base{
+	
+	public Zoom_Java() throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException{
+		super.setParseTable(InfraStructure.JAVA_GRAMMAR);
+		directory=InfrastructureCriticalScenarios.DIR_CRITICAL_SCENARIOS_ZOOM;
+		END_SIGN = "@Z_END";
+		START_SIGN = "@Z_START";
+	}
+	
+	protected String getFragmentForComparing(FileLog fileLog){ 
+		return fileLog.getRegionInfo().get(0).getParentRegions().get(0).trim();
+	}
+
+	@Test
+	public void testUnheaded() throws Exception{
+		String fileName="UnHeadedRegion.java";
+		assertRegionCorrectlySelected(fileName);		
+	}
+		
+
+	@Override
+	protected ArrayList<String> getActualRegions(FileLog fileLog) {
+		return fileLog.getRegionInfo().get(0).getPrevRegions();
+	}	
+
+}



From m.dejonge at tudelft.nl  Mon Dec 14 16:39:44 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 14 Dec 2009 15:39:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20390 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios/PreviousRegion CriticalScenarios/Zoom
	src/scenariotests
Message-ID: <200912141539.nBEFdiGY023806@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-14 15:39:44 +0000 (Mon, 14 Dec 2009)
New Revision: 20390

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20390&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LastChildren.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/DeepZoom.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/SimpleZoom.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Separator_Stratego.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java

Log:
zoom, lastchild

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LastChildren.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LastChildren.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LastChildren.java	2009-12-14 15:39:44 UTC (rev 20390)
@@ -0,0 +1,26 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      if(true){
+    	  if(3==5){
+    		  bla();
+    		  if(true)//{ //@START //@BW_START
+    			  blabla();
+    			  return i;
+    		  }    	//	 @END   @BW_END
+    	  }
+      }
+  } 
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/DeepZoom.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/DeepZoom.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/DeepZoom.java	2009-12-14 15:39:44 UTC (rev 20390)
@@ -0,0 +1,38 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      while(i>4){
+	      if(false){
+	    	  bla();
+		      if(true){ //@Z_START @START
+		    	  int i=1;
+		    	  return i;  //}//@Z_END @END
+		  }
+	      i++;
+	  }
+      corrLine3();
+      return 5;
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/SimpleZoom.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/SimpleZoom.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Zoom/SimpleZoom.java	2009-12-14 15:39:44 UTC (rev 20390)
@@ -0,0 +1,32 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true){ //@Z_START @START
+    	  int i=1;
+    	  return i;  //}//@Z_END @END
+      corrLine3();
+      return 5;
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-14 10:26:45 UTC (rev 20389)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-14 15:39:44 UTC (rev 20390)
@@ -42,10 +42,17 @@
 		file.compareRegions(InfraStructure.JAVA_GRAMMAR);
 		System.out.println(file.getRegionEvaluations().get(0));
 	}*/
-	
+	protected Evaluation assertEvaluation(String fileName, Evaluation expectedEval)
+	throws FileNotFoundException {
+		Evaluation eval=evaluateFile(fileName);
+		Assert.assertEquals(expectedEval, eval);
+		return eval;
+	}
 	protected Evaluation evaluateFile(String fileName) throws FileNotFoundException {
 		Testcase file = new Testcase(directory + File.separator + fileName);
 		file.compareRegions(parseTable);
+		System.out.println("SKIPPED FRAGMENTS");
+		System.out.println(file.getRecoverLog().getSkippedFragments());		
 		return file.getRegionEvaluations().get(0);
 	}
 	

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java	2009-12-14 10:26:45 UTC (rev 20389)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java	2009-12-14 15:39:44 UTC (rev 20390)
@@ -53,8 +53,9 @@
 	
 	@Test
 	public void testScopeError_OnClosing() throws Exception{
-		String fileName="ScopeError_OnClosing.java";		
-		assertRegionCorrectlySelected(fileName);		
+		String fileName="ScopeError_OnClosing.java";
+		assertActualRegionsContainExpected(fileName);
+		//assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
@@ -62,6 +63,13 @@
 		String fileName="ScopeError_OnOpening.java";
 		assertRegionCorrectlySelected(fileName);		
 	}
+	
+	@Test
+	public void testLastChildren() throws Exception{
+		String fileName="LastChildren.java";
+		assertActualRegionsContainExpected(fileName);
+		//assertRegionCorrectlySelected(fileName);		
+	}
 
 	@Override
 	protected ArrayList<String> getActualRegions(FileLog fileLog) {

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java	2009-12-14 10:26:45 UTC (rev 20389)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Stratego.java	2009-12-14 15:39:44 UTC (rev 20390)
@@ -42,7 +42,8 @@
 	@Test
 	public void testBreak32() throws Exception{
 		String fileName="break32.str_java";		
-		assertRegionCorrectlySelected(fileName);		
+		assertActualRegionsContainExpected(fileName);
+		//assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
@@ -53,8 +54,9 @@
 	
 	@Test
 	public void testComma() throws Exception{
-		String fileName="Comma.str_java";		
-		assertRegionCorrectlySelected(fileName);		
+		String fileName="Comma.str_java";	
+		assertActualRegionsContainExpected(fileName);
+		//assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
@@ -78,13 +80,15 @@
 	@Test
 	public void testErrorInJava_Comma() throws Exception{
 		String fileName="ErrorInJava_Comma.str_java";
-		assertRegionCorrectlySelected(fileName);		
+		assertActualRegionsContainExpected(fileName);
+		//assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test
 	public void testMidStratetgy() throws Exception{
 		String fileName="MidStrategy.str_java";
-		assertRegionCorrectlySelected(fileName);		
+		assertActualRegionsContainExpected(fileName);
+		//assertRegionCorrectlySelected(fileName);	
 	}
 	
 	@Test
@@ -96,7 +100,8 @@
 	@Test
 	public void testLastStratetgy() throws Exception{
 		String fileName="LastStrategy.str_java";
-		assertRegionCorrectlySelected(fileName);		
+		assertActualRegionsContainExpected(fileName);
+		//assertRegionCorrectlySelected(fileName);		
 	}
 	
 	@Test

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Separator_Stratego.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Separator_Stratego.java	2009-12-14 10:26:45 UTC (rev 20389)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Separator_Stratego.java	2009-12-14 15:39:44 UTC (rev 20390)
@@ -63,7 +63,7 @@
 		String fileName="LastRegion.str_java";	
 		String expectedRegion=getExpectedRegion(fileName);
 		FileLog fileLog = createFilelog(fileName);
-		String actualRegion=fileLog.getRegionInfo().get(0).getPrevRegions().get(1).trim();
+		String actualRegion=fileLog.getRegionInfo().get(0).getPrevRegions().get(3).trim();
 		assertTrue(actualRegion.startsWith(";"));
 		//System.out.println(actualRegion);
 		actualRegion=adaptActualFragment(actualRegion);
@@ -99,7 +99,7 @@
 		String fileName="LastRegion2.str_java";	
 		String expectedRegion=getExpectedRegion(fileName);
 		FileLog fileLog = createFilelog(fileName);
-		String actualRegion=fileLog.getRegionInfo().get(0).getPrevRegions().get(1).trim();
+		String actualRegion=fileLog.getRegionInfo().get(0).getPrevRegions().get(3).trim();
 		assertTrue(actualRegion.startsWith(";"));
 		actualRegion=adaptActualFragment(actualRegion);
 		String firstRegion=fileLog.getRegionInfo().get(0).getPrevRegions().get(0).trim();

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java	2009-12-14 10:26:45 UTC (rev 20389)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java	2009-12-14 15:39:44 UTC (rev 20390)
@@ -11,6 +11,7 @@
 import org.spoofax.jsglr.NoRecoveryRulesException;
 
 import testrun.InfraStructure;
+import evaluating.Evaluation;
 
 
 public class Zoom_Java extends CriticalScenarios_Base{
@@ -27,12 +28,19 @@
 	}
 
 	@Test
-	public void testUnheaded() throws Exception{
-		String fileName="UnHeadedRegion.java";
-		assertRegionCorrectlySelected(fileName);		
+	public void testSimpleZoom() throws Exception{
+		String fileName="SimpleZoom.java";		
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
 	}
+	
+	@Test
+	public void testDeepZoom() throws Exception{
+		String fileName="DeepZoom.java";	
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
+	}
 		
-
 	@Override
 	protected ArrayList<String> getActualRegions(FileLog fileLog) {
 		return fileLog.getRegionInfo().get(0).getPrevRegions();



From m.dejonge at tudelft.nl  Mon Dec 14 16:40:48 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 14 Dec 2009 15:40:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20391 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912141540.nBEFemV6023828@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-14 15:40:47 +0000 (Mon, 14 Dec 2009)
New Revision: 20391

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20391&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentInfo.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipSuggestion.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipper.java

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java	2009-12-14 15:39:44 UTC (rev 20390)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java	2009-12-14 15:40:47 UTC (rev 20391)
@@ -36,7 +36,7 @@
             throws IOException;
 
     public abstract ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(
-            StructureSkipSuggestion prevRegion);
+            StructureSkipSuggestion prevRegion) throws IOException;
 
     public abstract ArrayList<StructureSkipSuggestion> getPickErroneousChild(
             StructureSkipSuggestion prevRegion) throws IOException;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentInfo.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentInfo.java	2009-12-14 15:39:44 UTC (rev 20390)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentInfo.java	2009-12-14 15:40:47 UTC (rev 20391)
@@ -10,10 +10,10 @@
 public class IndentInfo {
     
     private final int lineNumber;
-    private final int tokensSeen;
+    private int tokensSeen;
     private final int indentValue;
-    private final ArrayDeque<Frame> stackNodes;
-        
+    private final ArrayDeque<Frame> stackNodes;    
+    
     public ArrayDeque<Frame> getStackNodes() {
         return stackNodes;
     }   
@@ -31,6 +31,10 @@
         return tokensSeen;
     }
 
+    public void setTokensSeen(int tokenPos) {
+        tokensSeen=tokenPos;
+    }
+    
     public int getIndentValue() {
         return indentValue;
     }
@@ -89,5 +93,7 @@
             }
         }
         return result;
-    }    
+    }
+
+    
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-14 15:39:44 UTC (rev 20390)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-14 15:40:47 UTC (rev 20391)
@@ -2,11 +2,15 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 
 import org.spoofax.jsglr.StructureSkipper.indentShift;
 
 public class NewStructureSkipper implements IStructureSkipper {
 
+    private final static int MAX_NR_OF_LINES=30;
+    private final static int MAX_NR_OF_STRUCTURES=20;
+    
     enum indentShift{
         INDENT,
         DEDENT,
@@ -48,11 +52,33 @@
     }
 
     private ArrayList<StructureSkipSuggestion> selectRegion(int indexLine,
-            IndentInfo line) throws IOException {
+            IndentInfo lineXX) throws IOException {           
+        if (isScopeClosingLine(indexLine))
+            return new ArrayList<StructureSkipSuggestion>();        
+        ArrayList<Integer> endLocations=findCurrentEnd(indexLine);
+        ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
+        IndentInfo startLine=IndentInfo.cloneIndentInfo(getHistory().getLine(indexLine));
+        for (Integer endSkipIndex : endLocations) {
+            IndentInfo endSkip=IndentInfo.cloneIndentInfo(getHistory().getLine(endSkipIndex));
+            StructureSkipSuggestion skipConstruct=new StructureSkipSuggestion();
+            skipConstruct.setSkipLocations(startLine, endSkip, indexLine, endSkipIndex);            
+            skipSuggestions.add(skipConstruct);
+            addSeparatorIncludingRegion_Forwards(skipSuggestions, skipConstruct);
+            addSeperatorIncludingRegion_Backwards(skipSuggestions, skipConstruct);
+        }        
+        return skipSuggestions;
+    }    
+    
+    /*
+    private ArrayList<StructureSkipSuggestion> selectRegion(int indexLine,
+            IndentInfo lineXX) throws IOException {
+        IndentInfo line = getHistory().getLine(indexLine);
         IndentInfo startLine = IndentInfo.cloneIndentInfo(line);
+        //IndentInfo startLine = IndentInfo.cloneIndentInfo(line);
         if (isScopeClosingLine(startLine))
             return new ArrayList<StructureSkipSuggestion>();
-        ArrayList<IndentInfo> endLocations=findCurrentEnd(startLine);
+        //ArrayList<IndentInfo> endLocations=findCurrentEnd(startLine);
+        Arr
         ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
         for (IndentInfo endSkip : endLocations) {
             StructureSkipSuggestion skipConstruct=new StructureSkipSuggestion();
@@ -62,7 +88,7 @@
             addSeperatorIncludingRegion_Backwards(skipSuggestions, skipConstruct);
         }        
         return skipSuggestions;
-    }    
+    } */   
 
     public StructureSkipSuggestion getErroneousPrefix() throws IOException {
         // TODO Auto-generated method stub
@@ -146,8 +172,15 @@
         ArrayList<StructureSkipSuggestion> prevRegions=new ArrayList<StructureSkipSuggestion>();       
         boolean onClosing=isScopeClosingLine(indexEnd);
         int indexStart = backwardsSkip(indexEnd, onClosing);
-        if(onClosing)
-            indexEnd++;         
+        if(onClosing){
+            if(indexEnd>0){
+               if(isScopeClosingLine(indexEnd-1))
+                   prevRegions.addAll(selectPrevRegion(indexEnd-1));
+               else
+                   prevRegions.addAll(selectRegion(indexEnd-1));
+            }
+            indexEnd++;
+        }         
         IndentInfo endSkip=IndentInfo.cloneIndentInfo(getHistory().getLine(indexEnd));
         if(indexStart<0)
             return prevRegions;
@@ -419,12 +452,56 @@
         return surroundingSkips;
     }
 
-    public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(
-            StructureSkipSuggestion prevRegion) {
-        // TODO Auto-generated method stub
-        return new ArrayList<StructureSkipSuggestion>();
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getZoomOnPreviousSuggestions(org.spoofax.jsglr.StructureSkipSuggestion)
+     */
+    public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(StructureSkipSuggestion prevRegion) throws IOException{
+        ArrayList<StructureSkipSuggestion> result = new ArrayList<StructureSkipSuggestion>();
+        if(!prevRegion.canBeDecomposed()){ 
+            result.add(prevRegion);
+            return result;
+        }
+        ArrayList<Integer> indentLevels=new ArrayList<Integer>();       
+        for (int i = prevRegion.getIndexHistoryStart()+1; i < prevRegion.getIndexHistoryEnd(); i++) {
+            int indentOfLine=getHistory().getLine(i).getIndentValue();
+            if(!indentLevels.contains(indentOfLine))
+                indentLevels.add(indentOfLine);
+        }
+        Collections.sort(indentLevels);
+        //indentLevels.remove(indentLevels.size()-1);       
+        System.out.println(indentLevels);
+        for (int i = prevRegion.getIndexHistoryStart(); i < prevRegion.getIndexHistoryEnd(); i++) {
+            int indentOfLine=getHistory().getLine(i).getIndentValue();
+            if(!indentLevels.contains(indentOfLine))
+                indentLevels.add(indentOfLine);
+        }
+        int indentOfLevel;
+        int lineIndex;
+        for (int level = 0; level < indentLevels.size(); level++) {
+            indentOfLevel=indentLevels.get(level);
+            lineIndex = prevRegion.getIndexHistoryStart();            
+            while (lineIndex < prevRegion.getIndexHistoryEnd()) {
+                int indentOfLine=getHistory().getLine(lineIndex).getIndentValue();
+                if(indentOfLine==indentOfLevel){                    
+                    ArrayList<StructureSkipSuggestion> regions = selectRegion(lineIndex);                     
+                    if(regions.size()>0){
+                        lineIndex=regions.get(0).getIndexHistoryEnd();
+                        Collections.reverse(regions);
+                        result.addAll(regions);
+                    }
+                    else
+                        lineIndex++;
+                }
+                else
+                    lineIndex++;
+            }
+       }    
+        Collections.reverse(result);
+        return result;
     }
 
+    
+
     public void setFailureIndex(int failureIndex) {
        this.failureIndex=failureIndex;
     }
@@ -467,6 +544,45 @@
         return endLocations;
     }
     
+    private ArrayList<Integer> findCurrentEnd(int indexStartLine) throws IOException{
+        IndentInfo startLine=getHistory().getLine(indexStartLine);
+        int indentStartLine=separatorIndent(startLine);        
+        boolean hasIndentChilds=false;
+        boolean isSecondLine=true;
+        ArrayList<Integer> endLocations=new ArrayList<Integer>();
+        int indexNextLine=skipLine(indexStartLine);        
+        while(myParser.currentToken!=SGLR.EOF){            
+            IndentInfo nextLine = getHistory().getLine(indexNextLine);
+            int indentSkipPosition=nextLine.getIndentValue();
+            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
+            switch (shift) {
+            case DEDENT:               
+                endLocations.add(indexNextLine);                
+                return endLocations;                
+            case INDENT:
+                hasIndentChilds=true;
+                break;
+            case SAME_INDENT:
+                if(hasIndentChilds && isScopeClosingLine(nextLine)){
+                    indexNextLine = skipLine(indexNextLine);
+                    endLocations.add(indexNextLine);
+                    return endLocations;
+                }
+                if((!isSecondLine || !isScopeOpeningLine(nextLine)) && !isSeparatorLine(nextLine)){
+                     endLocations.add(indexNextLine);
+                     return endLocations;
+                }
+                break;
+            default:
+                break;
+            }
+            isSecondLine=false;
+            indexNextLine=skipLine(indexNextLine);            
+        }
+        endLocations.add(indexNextLine); //EOF
+        return endLocations;
+    }
+    
     private IndentInfo skipLine(IndentInfo line) throws IOException {
         IndentationHandler skipIndentHandler=new IndentationHandler();
         getHistory().setTokenIndex(Math.max(0, line.getTokensSeen()-1));
@@ -485,5 +601,21 @@
         }
         return new IndentInfo(newLineNumber+1, getHistory().getTokenIndex()-1, 0);// EOF
     }
+    
+    private int skipLine(int indexLine) throws IOException {
+        IndentInfo line =getHistory().getLine(indexLine);
+        IndentationHandler skipIndentHandler=new IndentationHandler();
+        getHistory().setTokenIndex(Math.max(0, line.getTokensSeen()-1));        
+        skipIndentHandler.setInLeftMargin(false);
+        getHistory().readRecoverToken(myParser);
+        while(myParser.currentToken!=SGLR.EOF){
+            getHistory().readRecoverToken(myParser);            
+            skipIndentHandler.updateIndentation(myParser.currentToken);
+            if(skipIndentHandler.lineMarginEnded()){
+                return indexLine+=1;
+            }            
+        }
+        return getHistory().getIndexLastLine();// EOF
+    }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipSuggestion.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipSuggestion.java	2009-12-14 15:39:44 UTC (rev 20390)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipSuggestion.java	2009-12-14 15:40:47 UTC (rev 20391)
@@ -12,7 +12,13 @@
         return indexHistoryStart;
     }
     
-    public boolean isPreviousRegion(){
+    public boolean canBeDecomposed() {
+        if(!isPreviousRegion())
+            return false;
+        return getIndexHistoryEnd()-getIndexHistoryStart() > 3;
+    }
+    
+    private boolean isPreviousRegion(){
         return indexHistoryStart>=0 && indexHistoryEnd>=0;
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipper.java	2009-12-14 15:39:44 UTC (rev 20390)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipper.java	2009-12-14 15:40:47 UTC (rev 20391)
@@ -3,7 +3,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 
-public class StructureSkipper {
+public class StructureSkipper implements IStructureSkipper {
     
     //restrictions on area searched for erroneous region
     private final static int MAX_NR_OF_LINES=30;
@@ -11,6 +11,9 @@
     private int indexPrevChild;
     private int failureIndex;
     
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#setFailureIndex(int)
+     */
     public void setFailureIndex(int failureIndex) {
         this.failureIndex = failureIndex;
     }
@@ -56,7 +59,7 @@
     private SGLR myParser;
     private IndentationHandler skipIndentHandler;
     
-    private ParserHistory getHistory() {
+    public ParserHistory getHistory() {
         return myParser.getHistory();
     }
     
@@ -66,10 +69,16 @@
         clear();
     }
 
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#clear()
+     */
     public void clear() {
         indexPrevChild=-1;
     }
     
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getErroneousPrefix()
+     */
     public StructureSkipSuggestion getErroneousPrefix() throws IOException{
         getHistory().setTokenIndex(getFailureLine().getTokensSeen());
         IndentInfo nextLine = viewNextLine(getFailureLine());
@@ -79,6 +88,9 @@
         return prefix;
     }
     
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getCurrentSkipSuggestions()
+     */
     public ArrayList<StructureSkipSuggestion> getCurrentSkipSuggestions() throws IOException{
         int indexLastLine=failureIndex;
         if (isErrorOnClosingLine(indexLastLine))
@@ -99,6 +111,9 @@
         return skipSuggestions;
     }    
     
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getPreviousSkipSuggestions()
+     */
     public ArrayList<StructureSkipSuggestion> getPreviousSkipSuggestions() throws IOException{
         int indexEnd=failureIndex;
         return selectPreviousRegion(indexEnd);
@@ -143,6 +158,9 @@
         return skipSuggestions;
     } 
     
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getPriorSkipSuggestions()
+     */
     public ArrayList<StructureSkipSuggestion> getPriorSkipSuggestions() throws IOException{
         //int indexLastLine=failureIndex;
         return selectPriorRegions(indexPrevChild);
@@ -165,6 +183,9 @@
         return skipSuggestions;
     } 
 
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getParentSkipSuggestions()
+     */
     public ArrayList<StructureSkipSuggestion> getParentSkipSuggestions() throws IOException{
         int errorLineIndex=failureIndex;
         IndentInfo startLine = getHistory().getLine(errorLineIndex);
@@ -178,6 +199,9 @@
         return skipSuggestions;
     }    
     
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getSibblingForwardSuggestions()
+     */
     public ArrayList<StructureSkipSuggestion> getSibblingForwardSuggestions() throws IOException{        
         int startSkipIndex = findPreviousBegin(failureIndex);
         if(startSkipIndex<0)
@@ -203,6 +227,9 @@
         return skipSuggestions;
     }   
     
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getSibblingBackwardSuggestions()
+     */
     public ArrayList<StructureSkipSuggestion> getSibblingBackwardSuggestions() throws IOException {
         int indexErrorLine=failureIndex;
         ArrayList<IndentInfo> endSkipLocations=findCurrentEnd(getFailureLine());
@@ -225,6 +252,9 @@
         return skipSuggestions;
     }
 
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getSibblingSurroundingSuggestions()
+     */
     public ArrayList<StructureSkipSuggestion> getSibblingSurroundingSuggestions() throws IOException {        
         ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
         int indexErrorLine=failureIndex;
@@ -288,9 +318,7 @@
         return skipSuggestions;
     }
 
-    /*
-     * * 
-     */
+   
     private ArrayList<IndentInfo> findCurrentEnd(IndentInfo startLine) throws IOException{
         getHistory().setTokenIndex(startLine.getTokensSeen());
         int indentStartLine=startLine.getIndentValue();        
@@ -426,9 +454,14 @@
         return nextLine; //EOF
     }
     
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getZoomOnPreviousSuggestions(org.spoofax.jsglr.StructureSkipSuggestion)
+     */
     public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(StructureSkipSuggestion prevRegion){
         ArrayList<StructureSkipSuggestion> result = new ArrayList<StructureSkipSuggestion>();
-        if(!prevRegion.isPreviousRegion() || (prevRegion.getIndexHistoryEnd()-prevRegion.getIndexHistoryStart() < 3)){
+        //region before failure line 
+        //region more then two lines
+        if(!prevRegion.canBeDecomposed()){
             result.add(prevRegion);
             return result;
         }
@@ -482,9 +515,12 @@
         return result;
     }
     
+    /* (non-Javadoc)
+     * @see org.spoofax.jsglr.IStructureSkipper#getPickErroneousChild(org.spoofax.jsglr.StructureSkipSuggestion)
+     */
     public ArrayList<StructureSkipSuggestion> getPickErroneousChild(StructureSkipSuggestion prevRegion) throws IOException{
         ArrayList<StructureSkipSuggestion> result=new ArrayList<StructureSkipSuggestion>();
-        if(!prevRegion.isPreviousRegion() || (prevRegion.getIndexHistoryEnd()-prevRegion.getIndexHistoryStart() < 2)){            
+        if(!prevRegion.canBeDecomposed()){            
             result.add(prevRegion);
             return result;
         }        



From m.dejonge at tudelft.nl  Mon Dec 14 16:41:07 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 14 Dec 2009 15:41:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20392 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912141541.nBEFf7w1023839@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-14 15:41:06 +0000 (Mon, 14 Dec 2009)
New Revision: 20392

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20392&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java

Log:
zoom, lastchild

Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-14 15:40:47 UTC (rev 20391)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-14 15:41:06 UTC (rev 20392)
@@ -69,12 +69,25 @@
   		  String region = rs.getHistory().getFragment(aRegion);
 		  String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
   		  currentRegion.addCurrRegion(correctedRegion);
-  		  	System.out.println("************   CURRENT REGION  **********");
-		    System.out.println(correctedRegion);
-		    System.out.println("********************************************");
+  		  System.out.println("************   CURRENT REGION  **********");
+		  System.out.println(correctedRegion);
+		  System.out.println("********************************************");
   	  }
    }
     
+    pointcut zoomRegionsPC(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getZoomOnPreviousSuggestions(StructureSkipSuggestion))&& target(rs);
+
+    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): zoomRegionsPC(rs) {
+    	for (StructureSkipSuggestion aRegion: prRegions) {
+    		String region = rs.getHistory().getFragment(aRegion);
+  		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
+    		currentRegion.addZoomRegion(correctedRegion);
+  		    //System.out.println("************   ZOOM REGION  **********");
+  		    //System.out.println(correctedRegion);
+  		    //System.out.println("********************************************");
+  	  }
+   }
+    
     pointcut parentRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getParentSkipSuggestions())&& target(rs);
 
     after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> parRegions): parentRegions(rs) {
@@ -82,9 +95,9 @@
     		String region = rs.getHistory().getFragment(aRegion);
   		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
     		currentRegion.addParentRegion(correctedRegion);
-  		    System.out.println("************   PARENT REGION  **********");
-  		    System.out.println(correctedRegion);
-  		    System.out.println("********************************************");
+  		    //System.out.println("************   PARENT REGION  **********");
+  		    //System.out.println(correctedRegion);
+  		    //System.out.println("********************************************");
   	  }
    }
     
@@ -95,9 +108,9 @@
     		String region = rs.getHistory().getFragment(aRegion);
   		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
     		currentRegion.addPriorRegion(correctedRegion);
-  		    System.out.println("************   PRIOR REGION  **********");
-  		    System.out.println(correctedRegion);
-  		    System.out.println("********************************************");
+  		    //System.out.println("************   PRIOR REGION  **********");
+  		    //System.out.println(correctedRegion);
+  		    //System.out.println("********************************************");
   	  }
    }
     
@@ -110,9 +123,9 @@
     		String region = rs.getHistory().getFragment(aRegion);
   		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
     		currentRegion.addSiblingRegion(correctedRegion);
-  		    System.out.println("************   SIBLING REGION  **********");
-  		    System.out.println(correctedRegion);
-  		    System.out.println("********************************************");
+  		    //System.out.println("************   SIBLING REGION  **********");
+  		    //System.out.println(correctedRegion);
+  		    //System.out.println("********************************************");
   	  }
    }
 

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-14 15:40:47 UTC (rev 20391)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-14 15:41:06 UTC (rev 20392)
@@ -14,6 +14,7 @@
     private ArrayList<String> parentRegions;
     private ArrayList<String> priorRegions;
     private ArrayList<String> siblingRegions;
+    private ArrayList<String> zoomRegions;
     
     public ArrayList<String> getPrevRegions() {
 		return prevRegions;
@@ -54,6 +55,14 @@
 	public void addCurrRegion(String prevRegion) {
 		this.currRegions.add(prevRegion);
 	}
+	
+	public void addZoomRegion(String zRegion) {
+		this.zoomRegions.add(zRegion);
+	}
+	
+	public ArrayList<String> getZoomRegions() {
+		return zoomRegions;
+	}
 
 	public RegionLog(){
         executionTimetable=new TreeMap<String, Long>();
@@ -63,6 +72,7 @@
         parentRegions= new ArrayList<String>();
         priorRegions=new ArrayList<String>();
         siblingRegions=new ArrayList<String>();
+        zoomRegions=new ArrayList<String>();
     }
     
     public TreeMap<String, Long> getExecutionTimetable() {



From m.dejonge at tudelft.nl  Mon Dec 14 16:43:15 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 14 Dec 2009 15:43:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20393 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/History: .
	Languages_14_12_2009
Message-ID: <200912141543.nBEFhGOK023868@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-14 15:43:15 +0000 (Mon, 14 Dec 2009)
New Revision: 20393

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20393&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/WebDSL.txt
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt

Log:
new evaluation data (improved: zoom+lastchild)

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Java.txt	2009-12-14 15:43:15 UTC (rev 20393)
@@ -0,0 +1,44 @@
+Testsuite: Java
+
+General
+	Number of files: 70
+	Number of evaluated files: 66
+	Number of evaluated regions: 71
+	Score: 8.716417910447761
+
+Performance
+	Average region selection time: 8
+	Maximum region selection time: 75
+	Number of performance critical files: 0
+	Percentage of performance critical files: 0
+	Performance Critical: []
+
+Overview
+	EXACT:56
+	EXACT_EXCEPT_ONE:1
+	NEAR_EXACT:2
+	TOO_BIG:1
+	TOO_SMALL:1
+	MIS_DIAGNOSED:0
+	MERGED_REGION:4
+	INTRODUCED_REGION:0
+	WRONG_DATA:0
+	RECOVERY_FAILED:2
+	RECOVERY_FAILED_AS_EXPECTED:0
+	NO_SYNTAX_ERRORS:0
+	NO_EXPECTED_REGION:4
+
+Files
+	EXACT:[Input/SpoofaxExamples/javafragment.java, Input/Scope/testD4.java, Input/Scope/testH3.java, Input/Scope/testE3.java, Input/Scope/testH4.java, Input/Scope/testF2.java, Input/Scope/testC1.java, Input/Scope/testD3.java, Input/Scope/testE2.java, Input/Scope/testJ1.java, Input/Scope/testI2.java, Input/Scope/testI1.java, Input/Scope/testA4.java, Input/Scope/testD1.java, Input/Scope/testFile2.java, Input/Scope/testB5.java, Input/Scope/testK2.java, Input/Scope/testF3.java, Input/Scope/testI6.java, Input/Scope/testFile.java, Input/Scope/testH2.java, Input/Scope/testA5.java, Input/Scope/testB1.java, Input/Scope/testG2.java, Input/Scope/testC4.java, Input/Scope/testK3.java, Input/Scope/testE1.java, Input/Scope/testH1.java, Input/Scope/testF1.java, Input/Scope/testG3.java, Input/Scope/testC2.java, Input/Scope/testA6.java, Input/Scope/testB4.java, Input/Scope/testB3.java, Input/Scope/testA1.java, Input/Scope/testI5.java, Input/Scope/testJ2.java, Input/Scope/testI4.java, Input/Sco!
 pe/testA3.java, Input/Scope/testD2.java, Input/Common/flawedImport.java, Input/Common/flawed_IfBlock.java, Input/Common/unclosedMethod.java, Input/Common/flawedDeclaration.java, Input/Common/doubleClosed_If.java, Input/Common/priorSiblingError.java, Input/Common/unclosedBlockComment.java, Input/Common/currentLineError.java, Input/Common/testFile.java, Input/Common/methodOutsideClass.java, Input/Common/twoSeparatedErrors.java, Input/Common/twoSeparatedErrors.java, Input/Common/previousLineError.java, Input/Common/flawedMethodHeader.java, Input/Common/unclosedString.java, Input/Common/unclosed_If.java]
+	EXACT_EXCEPT_ONE:[Input/Common/multipleErrors.java]
+	NEAR_EXACT:[Input/Scope/testG1.java, Input/Scope/testI3.java]
+	TOO_BIG:[Input/Scope/testK1.java]
+	TOO_SMALL:[Input/Common/morePartsStructureError.java]
+	MIS_DIAGNOSED:[]
+	MERGED_REGION:[Input/Scope/testB6.java, Input/Common/testBridgeFG.java, Input/Common/sloppyCode.java, Input/Common/multipleErrors2.java]
+	INTRODUCED_REGION:[]
+	WRONG_DATA:[]
+	RECOVERY_FAILED:[Input/Scope/testC3.java, Input/Scope/testL1.java]
+	RECOVERY_FAILED_AS_EXPECTED:[]
+	NO_SYNTAX_ERRORS:[]
+	NO_EXPECTED_REGION:[Input/Scope/testL2.java, Input/Scope/testA2.java, Input/Scope/testB2.java, Input/Common/unclosedClassBody.java]

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Statistic_Overview.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Statistic_Overview.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Statistic_Overview.txt	2009-12-14 15:43:15 UTC (rev 20393)
@@ -0,0 +1,32 @@
+Testrun: Languages
+Description: Evaluates the region selection algorithm for different languages
+
+General
+	Number of files: 182
+	Number of evaluated files: 177
+	Number of evaluated regions: 183
+	Score: 8.455056179775282
+
+Performance
+	Average region selection time: 8
+	Maximum region selection time: 146
+	Number of performance critical files: 4
+	Percentage of performance critical files: 2
+	Performance Critical: [Input/Dryad/test-java-traits.3.break33.str_java, Input/Dryad/test-java-traits.3.break2.str_java, Input/Dryad/test-java-traits.2.break2.str_java, Input/Dryad/test-java-traits.3.break12.str_java]
+
+                    EXACT          EXACT_EXCEPT_  NEAR_EXACT     TOO_BIG        OTHER          SCORE          
+Java                56             1              2              1              11             8.71641791044  
+WebDSL              0              0              0              0              1              1.0            
+Stratego            4              0              0              0              1              10.0           
+Stratego-Java       64             12             26             2              2              8.30188679245  
+                    -------------  -------------  -------------  -------------  -------------  
+                    124            13             28             3              15             8.45505617977  
+
+                    AVERAGE (ms)   MAX (ms)       CRITICAL       CRITICAL(%)    
+Java                8              75             0              0              
+WebDSL              5              5              0              0              
+Stratego            3              11             0              0              
+Stratego-Java       8              146            4              3              
+                    -------------  -------------  -------------  -------------  
+                    8              146            4              2              
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Stratego-Java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Stratego-Java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Stratego-Java.txt	2009-12-14 15:43:15 UTC (rev 20393)
@@ -0,0 +1,44 @@
+Testsuite: Stratego-Java
+
+General
+	Number of files: 106
+	Number of evaluated files: 106
+	Number of evaluated regions: 106
+	Score: 8.30188679245283
+
+Performance
+	Average region selection time: 8
+	Maximum region selection time: 146
+	Number of performance critical files: 4
+	Percentage of performance critical files: 3
+	Performance Critical: [Input/Dryad/test-java-traits.3.break33.str_java, Input/Dryad/test-java-traits.3.break2.str_java, Input/Dryad/test-java-traits.2.break2.str_java, Input/Dryad/test-java-traits.3.break12.str_java]
+
+Overview
+	EXACT:64
+	EXACT_EXCEPT_ONE:12
+	NEAR_EXACT:26
+	TOO_BIG:2
+	TOO_SMALL:1
+	MIS_DIAGNOSED:0
+	MERGED_REGION:0
+	INTRODUCED_REGION:0
+	WRONG_DATA:0
+	RECOVERY_FAILED:1
+	RECOVERY_FAILED_AS_EXPECTED:0
+	NO_SYNTAX_ERRORS:0
+	NO_EXPECTED_REGION:0
+
+Files
+	EXACT:[Input/Dryad/test-java-traits.break8.str_java, Input/Dryad/test-java-traits.break20.str_java, Input/Dryad/test-java-traits.2.break35.str_java, Input/Dryad/test-java-traits.2.break14.str_java, Input/Dryad/test-java-traits.2.break23.str_java, Input/Dryad/test-java-traits.2.break34.str_java, Input/Dryad/test-java-traits.2.break32.str_java, Input/Dryad/test-java-traits.break32.str_java, Input/Dryad/test-java-traits.break27.str_java, Input/Dryad/test-java-traits.3.break13.str_java, Input/Dryad/test-java-traits.2.break4.str_java, Input/Dryad/test-java-traits.2.break24.str_java, Input/Dryad/test-java-traits.break4.str_java, Input/Dryad/test-java-traits.break35.str_java, Input/Dryad/test-java-traits.2.break10.str_java, Input/Dryad/test-java-traits.3.break8.str_java, Input/Dryad/test-java-traits.3.break2.str_java, Input/Dryad/test-java-traits.3.break10.str_java, Input/Dryad/test-java-traits.break0.str_java, Input/Dryad/test-java-traits.3.break23.str_java, Input/Dryad/test-jav!
 a-traits.3.break29.str_java, Input/Dryad/test-java-traits.break6.str_java, Input/Dryad/test-java-traits.2.break28.str_java, Input/Dryad/test-java-traits.break16.str_java, Input/Dryad/test-java-traits.3.break30.str_java, Input/Dryad/test-java-traits.3.break20.str_java, Input/Dryad/test-java-traits.break24.str_java, Input/Dryad/test-java-traits.2.break3.str_java, Input/Dryad/test-java-traits.break12.str_java, Input/Dryad/test-java-traits.3.break3.str_java, Input/Dryad/test-java-traits.break14.str_java, Input/Dryad/test-java-traits.3.break28.str_java, Input/Dryad/test-java-traits.3.break4.str_java, Input/Dryad/test-java-traits.3.break7.str_java, Input/Dryad/test-java-traits.break26.str_java, Input/Dryad/test-java-traits.2.break1.str_java.str_java, Input/Dryad/test-java-traits.break3.str_java, Input/Dryad/test-java-traits.3.break34.str_java, Input/Dryad/test-java-traits.break28.str_java, Input/Dryad/test-java-traits.3.break6.str_java, Input/Dryad/test-java-traits.3.break16.str_!
 java, Input/Dryad/test-java-traits.3.break32.str_java, Input/Dryad/t
-java-traits.break2.str_java, Input/Dryad/test-java-traits.break10.str_java, Input/Dryad/test-java-traits.break7.str_java, Input/Dryad/test-java-traits.3.break17.str_java, Input/Dryad/test-java-traits.2.break16.str_java, Input/Dryad/test-java-traits.2.break29.str_java, Input/Dryad/test-java-traits.3.break26.str_java, Input/Dryad/test-java-traits.break9.str_java, Input/Dryad/test-java-traits.2.break6.str_java, Input/Dryad/test-java-traits.2.break12.str_java, Input/Dryad/test-java-traits.2.break27.str_java, Input/Dryad/test-java-traits.2.break17.str_java, Input/Dryad/test-java-traits.2.break7.str_java, Input/Dryad/test-java-traits.2.break33.str_java, Input/Dryad/test-java-traits.2.break20.str_java, Input/Dryad/test-java-traits.break17.str_java, Input/Dryad/test-java-traits.2.break1.str_java, Input/Dryad/test-java-traits.2.break8.str_java, Input/Dryad/test-java-traits.3.break35.str_java, Input/Dryad/test-java-traits.3.break1.str_java, Input/Dryad/test-java-traits.break34.str_ja!
 va, Input/Dryad/test-java-traits.3.break24.str_java]
+	EXACT_EXCEPT_ONE:[Input/Dryad/test-java-traits.break22.str_java, Input/Dryad/test-java-traits.2.break18.str_java, Input/Dryad/test-java-traits.2.break22.str_java, Input/Dryad/test-java-traits.3.break21.str_java, Input/Dryad/test-java-traits.break25.str_java, Input/Dryad/test-java-traits.2.break21.str_java, Input/Dryad/test-java-traits.3.break22.str_java, Input/Dryad/test-java-traits.2.break25.str_java, Input/Dryad/test-java-traits.break18.str_java, Input/Dryad/test-java-traits.break21.str_java, Input/Dryad/test-java-traits.3.break25.str_java, Input/Dryad/test-java-traits.3.break18.str_java]
+	NEAR_EXACT:[Input/Dryad/test-java-traits.break13.str_java, Input/Dryad/test-java-traits.2.break15.str_java, Input/Dryad/test-java-traits.3.break5.str_java, Input/Dryad/test-java-traits.break1.str_java, Input/Dryad/test-java-traits.2.break31.str_java, Input/Dryad/test-java-traits.break19.str_java, Input/Dryad/test-java-traits.3.break11.str_java, Input/Dryad/test-java-traits.3.break31.str_java, Input/Dryad/test-java-traits.break30.str_java, Input/Dryad/test-java-traits.2.break19.str_java, Input/Dryad/test-java-traits.2.break9.str_java, Input/Dryad/test-java-traits.break23.str_java, Input/Dryad/test-java-traits.break29.str_java, Input/Dryad/test-java-traits.3.break9.str_java, Input/Dryad/test-java-traits.2.break11.str_java, Input/Dryad/test-java-traits.break15.str_java, Input/Dryad/test-java-traits.3.break15.str_java, Input/Dryad/test-java-traits.2.break5.str_java, Input/Dryad/test-java-traits.break5.str_java, Input/Dryad/test-java-traits.3.break14.str_java, Input/Dryad/test-!
 java-traits.3.break12.str_java, Input/Dryad/test-java-traits.2.break13.str_java, Input/Dryad/test-java-traits.3.break19.str_java, Input/Dryad/test-java-traits.2.break30.str_java, Input/Dryad/test-java-traits.break11.str_java, Input/Dryad/test-java-traits.break31.str_java]
+	TOO_BIG:[Input/Dryad/test-java-traits.3.break33.str_java, Input/Dryad/test-java-traits.2.break2.str_java]
+	TOO_SMALL:[Input/Dryad/test-java-traits.2.break26.str_java]
+	MIS_DIAGNOSED:[]
+	MERGED_REGION:[]
+	INTRODUCED_REGION:[]
+	WRONG_DATA:[]
+	RECOVERY_FAILED:[Input/Dryad/test-java-traits.3.break27.str_java]
+	RECOVERY_FAILED_AS_EXPECTED:[]
+	NO_SYNTAX_ERRORS:[]
+	NO_EXPECTED_REGION:[]

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Stratego.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Stratego.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/Stratego.txt	2009-12-14 15:43:15 UTC (rev 20393)
@@ -0,0 +1,44 @@
+Testsuite: Stratego
+
+General
+	Number of files: 5
+	Number of evaluated files: 4
+	Number of evaluated regions: 5
+	Score: 10.0
+
+Performance
+	Average region selection time: 3
+	Maximum region selection time: 11
+	Number of performance critical files: 0
+	Percentage of performance critical files: 0
+	Performance Critical: []
+
+Overview
+	EXACT:4
+	EXACT_EXCEPT_ONE:0
+	NEAR_EXACT:0
+	TOO_BIG:0
+	TOO_SMALL:0
+	MIS_DIAGNOSED:0
+	MERGED_REGION:0
+	INTRODUCED_REGION:0
+	WRONG_DATA:0
+	RECOVERY_FAILED:0
+	RECOVERY_FAILED_AS_EXPECTED:0
+	NO_SYNTAX_ERRORS:1
+	NO_EXPECTED_REGION:0
+
+Files
+	EXACT:[Input/SpoofaxExamples/with1.str, Input/SpoofaxExamples/with2.str, Input/SpoofaxExamples/bad-performance-stratego-sugar.str, Input/SpoofaxExamples/line-before-comment.str]
+	EXACT_EXCEPT_ONE:[]
+	NEAR_EXACT:[]
+	TOO_BIG:[]
+	TOO_SMALL:[]
+	MIS_DIAGNOSED:[]
+	MERGED_REGION:[]
+	INTRODUCED_REGION:[]
+	WRONG_DATA:[]
+	RECOVERY_FAILED:[]
+	RECOVERY_FAILED_AS_EXPECTED:[]
+	NO_SYNTAX_ERRORS:[Input/SpoofaxExamples/foo.str]
+	NO_EXPECTED_REGION:[]

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/WebDSL.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/WebDSL.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_14_12_2009/WebDSL.txt	2009-12-14 15:43:15 UTC (rev 20393)
@@ -0,0 +1,44 @@
+Testsuite: WebDSL
+
+General
+	Number of files: 1
+	Number of evaluated files: 1
+	Number of evaluated regions: 1
+	Score: 1.0
+
+Performance
+	Average region selection time: 5
+	Maximum region selection time: 5
+	Number of performance critical files: 0
+	Percentage of performance critical files: 0
+	Performance Critical: []
+
+Overview
+	EXACT:0
+	EXACT_EXCEPT_ONE:0
+	NEAR_EXACT:0
+	TOO_BIG:0
+	TOO_SMALL:0
+	MIS_DIAGNOSED:0
+	MERGED_REGION:1
+	INTRODUCED_REGION:0
+	WRONG_DATA:0
+	RECOVERY_FAILED:0
+	RECOVERY_FAILED_AS_EXPECTED:0
+	NO_SYNTAX_ERRORS:0
+	NO_EXPECTED_REGION:0
+
+Files
+	EXACT:[]
+	EXACT_EXCEPT_ONE:[]
+	NEAR_EXACT:[]
+	TOO_BIG:[]
+	TOO_SMALL:[]
+	MIS_DIAGNOSED:[]
+	MERGED_REGION:[Input/SpoofaxExamples/erroneous.app]
+	INTRODUCED_REGION:[]
+	WRONG_DATA:[]
+	RECOVERY_FAILED:[]
+	RECOVERY_FAILED_AS_EXPECTED:[]
+	NO_SYNTAX_ERRORS:[]
+	NO_EXPECTED_REGION:[]

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt	2009-12-14 15:41:06 UTC (rev 20392)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt	2009-12-14 15:43:15 UTC (rev 20393)
@@ -16,4 +16,7 @@
 set tabsize=4 in SGLR
 
 9-12-2009_b
-Regions starting with a separator are treated with indent + indentOf(, )
\ No newline at end of file
+Regions starting with a separator are treated with indent + indentOf(, )
+
+14-12-2009
+zoom, lastchild
\ No newline at end of file



From m.dejonge at tudelft.nl  Mon Dec 14 17:05:22 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 14 Dec 2009 16:05:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20394 - MaartjeDeJonge -
	sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating
Message-ID: <200912141605.nBEG5M72024473@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-14 16:05:22 +0000 (Mon, 14 Dec 2009)
New Revision: 20394

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20394&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java

Log:
save recovered files in output dirs

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-12-14 15:43:15 UTC (rev 20393)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-12-14 16:05:22 UTC (rev 20394)
@@ -65,7 +65,7 @@
 	private static String writeRecoveredFile(String testFile, String parseTable)
 			throws FileNotFoundException, IOException,
 			InvalidParseTableException, NoRecoveryRulesException, SGLRException, InterruptedException {
-		String fileName=testFile.replace(File.separatorChar, '.');
+		String fileName=testFile.replace(File.separatorChar, '_');
 		String recoveredFile=FilePaths.OUTPUT_REGION_SKIP+fileName;
 		String parseTreeFile = FilePaths.OUTPUT_REGION_SKIP+fileName+PARSETREE_EXTENSION;
 		writeParseTree(testFile, parseTable, parseTreeFile);	

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java	2009-12-14 15:43:15 UTC (rev 20393)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java	2009-12-14 16:05:22 UTC (rev 20394)
@@ -9,6 +9,8 @@
 import java.io.OutputStream;
 import java.io.PrintStream;
 import java.util.ArrayList;
+
+import testrun.InfraStructure;
 import logging.RegionLog;
 
 public class EvaluationOutput {
@@ -41,6 +43,7 @@
 		dir.mkdir();
 		for (String path : failures) {
 			copyfile(path, dirName+File.separator+path.replace(File.separatorChar, '_'));
+			copyfile(FilePaths.OUTPUT_REGION_SKIP+path.replace(File.separatorChar, '_'), dirName+File.separator+path.replace(File.separatorChar, '_')+".rec");
 		}
 	}
 	



From L.C.L.Kats at tudelft.nl  Mon Dec 14 17:20:54 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 14 Dec 2009 16:20:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20395 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
	strc-java/trunk/java/runtime/org/strategoxt/lang/terms
Message-ID: <200912141620.nBEGKs0F024656@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-14 16:20:54 +0000 (Mon, 14 Dec 2009)
New Revision: 20395

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20395&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoString.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java

Log:
Escape newlines when printing term strings.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java	2009-12-14 16:05:22 UTC (rev 20394)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java	2009-12-14 16:20:54 UTC (rev 20395)
@@ -15,7 +15,7 @@
         new PrintStream(new LoggingOutputStream(System.err), true); 
     private final PrintStream stdout =
         new PrintStream(new LoggingOutputStream(System.out), true);
-    private final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
+    final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
     
     public String getLog() {
     	return bytes.toString();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoString.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoString.java	2009-12-14 16:05:22 UTC (rev 20394)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoString.java	2009-12-14 16:20:54 UTC (rev 20395)
@@ -54,7 +54,10 @@
     }
     
     public void prettyPrint(ITermPrinter pp) {
-        pp.print("\"" + value.replace("\\", "\\\\").replace("\"", "\\\"") + "\"");
+        pp.print("\"");
+        pp.print(stringValue().replace("\\", "\\\\").replace("\"", "\\\"")
+                .replace("\n", "\\n").replace("\r", "\\r"));
+        pp.print("\"");
         printAnnotations(pp);
     }
  
@@ -62,7 +65,8 @@
     public String toString() {
         StringBuilder result = new StringBuilder();
         result.append("\"");
-        result.append(value.replace("\\", "\\\\").replace("\"", "\\\""));
+        result.append(stringValue().replace("\\", "\\\\").replace("\"", "\\\"")
+                .replace("\n", "\\n").replace("\r", "\\r"));
         result.append("\"");
         appendAnnotations(result);
         return result.toString();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java	2009-12-14 16:05:22 UTC (rev 20394)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java	2009-12-14 16:20:54 UTC (rev 20395)
@@ -18,7 +18,8 @@
 
     public void prettyPrint(ITermPrinter pp) {
     	pp.print("\"");
-    	pp.print(stringValue().replace("\\", "\\\\").replace("\"", "\\\""));
+    	pp.print(stringValue().replace("\\", "\\\\").replace("\"", "\\\"")
+    			.replace("\n", "\\n").replace("\r", "\\r"));
     	pp.print("\"");
     	printAnnotations(pp);
     }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java	2009-12-14 16:05:22 UTC (rev 20394)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java	2009-12-14 16:20:54 UTC (rev 20395)
@@ -80,7 +80,10 @@
     }
     
     public void prettyPrint(ITermPrinter pp) {
-        pp.print("\"" + stringValue().replace("\\", "\\\\").replace("\"", "\\\"") + "\"");
+        pp.print("\"");
+        pp.print(stringValue().replace("\\", "\\\\").replace("\"", "\\\"")
+        		.replace("\n", "\\n").replace("\r", "\\r"));
+        pp.print("\"");
         printAnnotations(pp);
     }
  
@@ -88,7 +91,8 @@
     public String toString() {
         StringBuilder result = new StringBuilder();
         result.append("\"");
-        result.append(stringValue().replace("\\", "\\\\").replace("\"", "\\\""));
+        result.append(stringValue().replace("\\", "\\\\").replace("\"", "\\\"")
+        		.replace("\n", "\\n").replace("\r", "\\r"));
         result.append("\"");
         appendAnnotations(result);
         return result.toString();



From L.C.L.Kats at tudelft.nl  Mon Dec 14 17:35:24 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 14 Dec 2009 16:35:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20396 - LennartKats -
 spoofax-imp/trunk/org.eclipse.imp
 spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders
 spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders
 spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders
 spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans
 spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders
 spoofax-imp/trunk/org.strategoxt.imp.feature
 spoofax-imp/trunk/org.strategoxt.imp.generator
 spoofax-imp/trunk/org.strategoxt.imp.generator/lib
 spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
 spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF
 spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling
 spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
 spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
 spoofa!
 x-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
 spoofax-imp/trunk/org.strategoxt.imp.nativebundle
 spoofax-imp/trunk/org.strategoxt.imp.runtime
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
 spoofax-imp/trunk/org.strategoxt.imp.updatesite strc-java/trunk/java
 strc-java/trunk/java/runtime/org/strategoxt/lang/compat
Message-ID: <200912141635.nBEGZOmC024803@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-14 16:35:24 +0000 (Mon, 14 Dec 2009)
New Revision: 20396

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20396&view=rev

Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/report_failure_compat_1_0.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Various fixes.

Changes:

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2009-12-14 16:35:24 UTC (rev 20396)
@@ -42,6 +42,22 @@
  	            // Replace the file editor mapping even if it already pointed to the universal editor,
  	            // since the persisted association turns into a FileEditorMapping when re-read, thus
  	            // losing the icon (which FileEditorMapping gets from the IEditorDescriptor).
+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ServiceControllerManager.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ServiceControllerManager.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ServiceControllerManager.java	(working copy)
+@@ -48,6 +48,11 @@
+         if (fLanguageServiceManager.getHyperLinkDetector() != null)+             fHyperLinkController= new SourceHyperlinkController(fLanguageServiceManager.getHyperLinkDetector(), fTextEditor);+     }++    ++    public ServiceControllerManager() { // LK: TODO: REMOVE ME++    	fTextEditor = null;++    ++    }+ +     public void initialize() {+         IRegionSelectionService regionSelector= (IRegionSelectionService) fTextEditor.getAdapter(IRegionSelectionService.class); Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ParserScheduler.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ParserScheduler.java	(revision 22255)
@@ -206,3 +222,11 @@
  Bundle-Activator: org.eclipse.imp.runtime.RuntimePlugin
  Bundle-ActivationPolicy: lazy
  Eclipse-LazyStart: true
+@@ -30,6 +30,7 @@
+  org.eclipse.imp.builder,
+  org.eclipse.imp.core,
+  org.eclipse.imp.editor,
++ org.eclipse.imp.editor.internal,
+  org.eclipse.imp.indexing,
+  org.eclipse.imp.language,
+  org.eclipse.imp.model,

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	2009-12-14 16:35:24 UTC (rev 20396)
@@ -2,9 +2,9 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260395950355_24&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-Folding.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=!
 &quot;/ATerm/editor/ATerm-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
-<listEntry value="/org.strategoxt.imp.editors.aterm/build.xml"/>
+<listEntry value="/ATerm/build.xml"/>
 </listAttribute>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
 <listEntry value="1"/>
@@ -17,16 +17,11 @@
 </listAttribute>
 <stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
-<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.editors.aterm"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="ATerm"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
-<mapEntry key="eclipse.spoofaximp.strategojar" value="${env_var:HOME}/.nix-profile/share/strc-java/strategoxt.jar"/>
-<mapEntry key="eclipse.spoofaximp.jars" value="${workspace_loc:/org.strategoxt.imp.generator/lib/}"/>
-<mapEntry key="externaldef" value="syntax/ATerm.def"/>
-</mapAttribute>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.aterm/build.xml}"/>
-<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.editors.aterm}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/ATerm/build.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/ATerm}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch	2009-12-14 16:35:24 UTC (rev 20396)
@@ -2,9 +2,9 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Folding.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclip!
 se.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
-<listEntry value="/org.strategoxt.imp.editors.editorservice/build.xml"/>
+<listEntry value="/EditorService/build.xml"/>
 </listAttribute>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
 <listEntry value="1"/>
@@ -17,17 +17,11 @@
 </listAttribute>
 <stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
-<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.editors.editorservice"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="EditorService"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
-<mapEntry key="eclipse.running" value="true"/>
-<mapEntry key="externaldef" value="${workspace_loc:/org.strategoxt.imp.generator}/src/syntax/EditorService.def"/>
-<mapEntry key="eclipse.spoofaximp.strategojar" value="${env_var:HOME}/.nix-profile/share/strc-java/strategoxt.jar"/>
-<mapEntry key="eclipse.spoofaximp.jars" value="${workspace_loc:/org.strategoxt.imp.generator/lib/}"/>
-</mapAttribute>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.editorservice/build.xml}"/>
-<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.editors.editorservice}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/EditorService/build.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/EditorService}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch	2009-12-14 16:35:24 UTC (rev 20396)
@@ -2,9 +2,9 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.sdf/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/editor/SDF-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/editor/SDF-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/editor/SDF-Folding.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/e!
 ditor/SDF-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/editor/SDF-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/editor/SDF-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
-<listEntry value="/org.strategoxt.imp.editors.sdf/build.xml"/>
+<listEntry value="/SDF/build.xml"/>
 </listAttribute>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
 <listEntry value="1"/>
@@ -17,17 +17,11 @@
 </listAttribute>
 <stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
-<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.editors.sdf"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="SDF"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
-<mapEntry key="eclipse.running" value="true"/>
-<mapEntry key="externaldef" value="syntax/SDF.def"/>
-<mapEntry key="eclipse.spoofaximp.strategojar" value="${env_var:HOME}/.nix-profile/share/strc-java/strategoxt.jar"/>
-<mapEntry key="eclipse.spoofaximp.jars" value="${workspace_loc:/org.strategoxt.imp.generator/lib/}"/>
-</mapAttribute>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.sdf/build.xml}"/>
-<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.editors.sdf}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/SDF/build.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/SDF}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-12-14 16:35:24 UTC (rev 20396)
@@ -7,6 +7,7 @@
 
 signature constructors
 
+  reject              : Term
   context-free-syntax : Term -> Term
   sort                : Term -> Term
   term                : Term -> Term
@@ -23,17 +24,27 @@
 
 rules
 
+  // TODO: Report actual SDF errors
+  // TODO: Warn for A ( "," A )* instead of { A "," }*  
+
   editor-analyze:
     (ast, path, project-path) -> ([], warnings, [])
     with
       warnings := <collect(?context-free-syntax(<filter(context-free-syntax-warning)>))> ast
   
   context-free-syntax-warning:
-    prod(p, s, attrs(a*)) -> (<id>, $[Production should contain a {cons("Label")} attribute to label the abstract syntax])
+    prod(p, s, a*) -> (target, $[Missing {cons("Label")} attribute to label the abstract syntax])
     where
       not(<collect(?sort(_))> p => [_])
-    ; not(<one(?term(default(appl(unquoted("cons"), [_]))))> a*)
-    ; not(<one(?term(default(appl(unquoted("bracket"), []))))> a*)
+    ; if !a* => attrs(a'*) then
+        not(<one(term(default(appl(unquoted("cons"), [id]))))> a'*)
+      ; not(<one(term(default(appl(unquoted("bracket" + "reject"), []))))> a'*)
+      ; not(<one(reject())> a'*)
+      ; not(!s => sort("Keyword")) 
+      ; target := a*
+      else
+        target := s
+      end
 
 rules
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch	2009-12-14 16:35:24 UTC (rev 20396)
@@ -2,9 +2,9 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260395909594_13&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.stratego/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.stratego/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/Stratego-Sugar/editor/Stratego-Sugar-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/Stratego-Sugar/editor/Stratego-Sugar-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/Stratego-Sugar/editor/Stratego-Sugar-Folding.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org!
 .eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/Stratego-Sugar/editor/Stratego-Sugar-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/Stratego-Sugar/editor/Stratego-Sugar-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/Stratego-Sugar/editor/Stratego-Sugar-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/Stratego-Sugar/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/Stratego-Sugar/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
-<listEntry value="/org.strategoxt.imp.editors.stratego/build.xml"/>
+<listEntry value="/Stratego-Sugar/build.xml"/>
 </listAttribute>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
 <listEntry value="1"/>
@@ -17,17 +17,11 @@
 </listAttribute>
 <stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
-<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.editors.stratego"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="Stratego-Sugar"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
-<mapEntry key="eclipse.running" value="true"/>
-<mapEntry key="externaldef" value="syntax/Stratego-Sugar.def"/>
-<mapEntry key="eclipse.spoofaximp.strategojar" value="${env_var:HOME}/.nix-profile/share/strc-java/strategoxt.jar"/>
-<mapEntry key="eclipse.spoofaximp.jars" value="${workspace_loc:/org.strategoxt.imp.generator/lib/}"/>
-</mapAttribute>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.stratego/build.xml}"/>
-<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.editors.stratego}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Stratego-Sugar/build.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Stratego-Sugar}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-14 16:35:24 UTC (rev 20396)
@@ -39,8 +39,7 @@
          id="org.strategoxt.imp.runtime"
          download-size="0"
          install-size="0"
-         version="0.1.1.qualifier"
-         unpack="false"/>
+         version="0.1.1.qualifier"/>
 
    <plugin
          id="org.spoofax.aterm"

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties	2009-12-14 16:35:24 UTC (rev 20396)
@@ -4,7 +4,6 @@
 bin.includes = META-INF/,\
                includes,\
                lib/make_permissive.jar,\
-               lib/sdf2imp.jar,\
-               plugin.xml
+               lib/sdf2imp.jar
 src.includes = src/,\
                lib/

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-14 16:35:24 UTC (rev 20396)
@@ -83,9 +83,9 @@
         <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running">
-            <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
-            <touch file="${include}/${esvmodule}.packed.esv"/>
-            <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
         </target>
         
         <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
@@ -156,7 +156,7 @@
                 <arg value="-o"/>
                 <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-I"/>
-                <arg value="${trans}"/>
+                <arg value="${syntax}"/>
                 <arg value="-I"/>
                 <arg value="${lib}"/>
                 <arg line="${build.sdf.imports}"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-12-14 16:35:24 UTC (rev 20396)
@@ -8,45 +8,57 @@
   builder-xml-name =
     // Note that we cannot use ProjectName here since
     // it may not be set after the first time this runs
-    <conc-strings> (<get-sdf-main-module>, " build.xml.launch")
+    !$[[<get-sdf-main-module>] build.xml.launch]
 
   create-builder-xml =
-    <file-exists> <conc-strings> (".externalToolBuilders/", <builder-xml-name>)
+    <file-exists> $[.externalToolBuilders/[<builder-xml-name>]]
   <+
+    not(ProjectName);
+    warn-msg(|$[Project name not specified, cannot regenerate [<builder-xml-name>]])
+  <+
     // We use plain text since the XML pretty printer has problems with this file.
-    // Also, half the time ${project_name} AND ${project_loc} don't work,
+    // Also, half the time ${project_name} AND ${project_loc} don't work
+    // (they might only work in the context of the project or whatever),
     // so we're using a compile-time 'project-name' variable instead.
-    project-name := <ProjectName <+ get-sdf-main-module>;
+    // FIXME: use of project-name in builder.xml breaks project renaming :(
+    // TODO: maybe ${build_project} works? seems tricky for new projects
+    project-name := <ProjectName>;
+    sdf-name     := <get-sdf-main-module>;
     
-    <output-text-file(|[".externalToolBuilders"], <builder-xml-name>)>
-    <conc-strings>
-(
-"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
-<launchConfiguration type=\"org.eclipse.ant.AntLaunchConfigurationType\">
-<stringAttribute key=\"bad_container_name\" value=\".externalToolBuilders\"/>
-<booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"false\"/>
-<stringAttribute key=\"org.eclipse.debug.core.ATTR_REFRESH_SCOPE\" value=\"${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", project-name, "/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", project-name, "/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", project-name, "/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}\"/>
-<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">
-<listEntry value=\"/", project-name, "/build.xml\"/>
+    <output-text-file(|[".externalToolBuilders"], <builder-xml-name>)> 
+$[ <?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/[
+    project-name]/editor/[sdf-name]-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/[
+    project-name]/editor/[sdf-name]-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/[
+    project-name]/editor/[sdf-name]-Folding.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/[
+    project-name]/editor/[sdf-name]-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/[
+    project-name]/editor/[sdf-name]-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/[
+    project-name]/editor/[sdf-name]-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/[
+    project-name]/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/[
+    project-name]/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/[project-name]/build.xml"/>
 </listAttribute>
-<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">
-<listEntry value=\"1\"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
 </listAttribute>
-<booleanAttribute key=\"org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND\" value=\"false\"/>
-<listAttribute key=\"org.eclipse.jdt.launching.CLASSPATH\">
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
 </listAttribute>
-<stringAttribute key=\"org.eclipse.jdt.launching.CLASSPATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>
-<booleanAttribute key=\"org.eclipse.jdt.launching.DEFAULT_CLASSPATH\" value=\"false\"/>
-<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"", project-name, "\"/>
-<stringAttribute key=\"org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_ANT_TARGETS\" value=\"all,\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE\" value=\"${project}\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${workspace_loc:/", project-name, "/build.xml}\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${workspace_loc:/", project-name, "}\"/>
-<stringAttribute key=\"process_factory_id\" value=\"org.eclipse.ant.ui.remoteAntProcessFactory\"/>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="[project-name]"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/[project-name]/build.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/[project-name]}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>
-"
-)
+]

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-12-14 16:35:24 UTC (rev 20396)
@@ -167,14 +167,15 @@
     name     := <trans-module-name>;
     sdf-name := <get-sdf-main-module>;
     <output-text-file(|["include"], "entities.str")>
-    ${module {name}
+    ${module entities
 
       signature constructors
 
-        // Below are copies of the signatures of the terms used in example {name}.str file.
-        // These definitions are actually automatically generated in the imported
-        // include/{sdf-name}.str module. However, to ensure that this example
-        // file doesn't break if the syntax is changed, we also include them here.
+        // Below are copies of the signatures of the terms used in example
+        // trans/{name}.str file. These definitions should also be automatically 
+        // generated in the imported include/{sdf-name}.str module. However,
+        // to ensure that the example transformation doesn't break when the
+        // syntax is changed, we also hard-coded them here.
           
         Module   : ID * List(Entity)   -> Module
         Entity   : ID * List(Property) -> Entity

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-12-14 16:35:24 UTC (rev 20396)
@@ -29,8 +29,7 @@
  org.strategoxt.imp.editors.stratego,
  org.strategoxt.imp.editors.aterm,
  org.eclipse.ant.core,
- org.strategoxt.imp.nativebundle,
- org.apache.ant
+ org.strategoxt.imp.nativebundle
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-Activator: org.strategoxt.imp.metatooling.MetatoolingActivator
 Bundle-ActivationPolicy: lazy

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -11,7 +11,7 @@
  */
 public class NativePrefixAntPropertyProvider implements IAntPropertyValueProvider {
 
-	public String getAntPropertyValue(String antPropertyName) {
+	public String getAntPropertyValue(String antPropertyName) {		
 		try {
 			// Ensure proper chmod first
 			return SDFBundleCommand.getInstance().getBinaryPath();

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -23,7 +23,6 @@
 import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
-import org.strategoxt.imp.runtime.stratego.StrategoConsole;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoExit;
@@ -100,7 +99,7 @@
 				String log = agent.getLog().trim();
 				Environment.logException("Unable to build descriptor:\n" + log);
 				messageHandler.addMarkerFirstLine(mainFile, "Unable to build descriptor (see error log)", SEVERITY_ERROR);
-				StrategoConsole.activateConsole();
+				// UNDONE: StrategoConsole.activateConsole(); (not good for ant triggered builds)
 				return;
 			}
 			

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -63,16 +63,25 @@
 	
 	/**
 	 * Loads the editor for the specified descriptor,
-	 * and ignore it the next resource event arrives.
+	 * and ignore it at the next resource event arrives.
 	 */
 	public void forceUpdate(IResource resource) {
 		synchronized (Environment.getSyncRoot()) {
 			assert resource.toString().endsWith(".packed.esv");
-			asyncIgnoreOnce.add(resource);
+			forceNoUpdate(resource);
 			loadPackedDescriptor(resource);
 		}
 	}
 
+	/**
+	 * Ignores the specified descriptor at the next resource event arrives.
+	 */
+	public void forceNoUpdate(IResource resource) {
+		synchronized (Environment.getSyncRoot()) {
+			asyncIgnoreOnce.add(resource);
+		}
+	}
+
 	public void resourceChanged(final IResourceChangeEvent event) {
 		if (event.getType() == IResourceChangeEvent.POST_CHANGE && isSignificantChange(event.getDelta())) {
 			// TODO: aggregate multiple events into a single job?

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -109,7 +109,7 @@
 	}
 	
  	private void doFinish(String languageName, String projectName, String packageName, String extensions, IProgressMonitor monitor) throws IOException, CoreException {
-		final int TASK_COUNT = 17;
+		final int TASK_COUNT = 20;
 		lastProject = null;
 		monitor.beginTask("Creating " + languageName + " project", TASK_COUNT);
 		
@@ -169,10 +169,12 @@
 				project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
 				monitor.worked(1);
 				
-				monitor.setTaskName("Building example editor");
+				monitor.setTaskName("Building and loading example editor");
 				project.build(IncrementalProjectBuilder.FULL_BUILD, null);
-				monitor.worked(4);
+				monitor.worked(6);
 
+				// TODO: Optimize - don't reload editor (already done from Ant file)
+				// DynamicDescriptorUpdater.getInstance().forceNoUpdate(descriptor);
 				monitor.setTaskName("Loading editor");
 				IResource descriptor = project.findMember("include/" + languageName + ".packed.esv");
 				DynamicDescriptorUpdater.getInstance().forceUpdate(descriptor);
@@ -189,7 +191,7 @@
 		monitor.setTaskName("Opening editor tabs");
 		Display display = getShell().getDisplay();
 		EditorState.asyncOpenEditor(display, project.getFile("/trans/" + toStrategoName(languageName) +  ".str"), true);
-		monitor.worked(1);
+		monitor.worked(2);
 		EditorState.asyncOpenEditor(display, project.getFile("/editor/" + languageName +  ".main.esv"), true);
 		monitor.worked(1);
 		EditorState.asyncOpenEditor(display, project.getFile("/syntax/" + languageName +  ".sdf"), true);

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties	2009-12-14 16:35:24 UTC (rev 20396)
@@ -3,8 +3,7 @@
 bin.includes = META-INF/,\
                .,\
                native/
-bin.excludes = native/sdf.tar.gz,\
-               native/macosx/.svn/,\
+bin.excludes = native/macosx/.svn/,\
                native/linux/.svn/,\
                native/cygwin/.svn/,\
                native/.svn/

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-12-14 16:35:24 UTC (rev 20396)
@@ -122,7 +122,8 @@
             colorPreferenceValue="255,128,147"/>
    </extension>
 
-   <!-- TODO: proper red and orange colors for errors and warnings? -->
+   <!-- TODO: proper red and orange colors for errors and warnings?   -->
+   <!-- Note that post-deployment colors may differ from debug colors -->
    <extension
          id="org.strategoxt.imp.runtime.parsemarkerspec"
          point="org.eclipse.ui.editors.markerAnnotationSpecification">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -161,8 +161,8 @@
 		if (ignoreEmptyEmpySelection && selection.y == 0)
 			return null;
 		
-		IToken start = getParseController().getTokenIterator(new Region(selection.x, 0)).next();
-		IToken end = getParseController().getTokenIterator(new Region(selection.x + selection.y - 1, 0)).next();
+		IToken start = getParseController().getTokenIterator(new Region(selection.x, 0), true).next();
+		IToken end = getParseController().getTokenIterator(new Region(selection.x + selection.y - 1, 0), true).next();
 		
 		IPrsStream tokens = start.getIPrsStream();
 		int layout = TokenKind.TK_LAYOUT.ordinal();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -236,11 +236,17 @@
 				return openAttachment(path, true);
 			return new BufferedInputStream(new FileInputStream(path));
 		} else { // read from jar
-			InputStream result = getAttachmentProvider().getResourceAsStream("/" + path);
+			Class provider = getAttachmentProvider();
+			InputStream result = provider.getResourceAsStream("/" + path);
+			if (result == null) // Try non-windows path
+				result = provider.getResourceAsStream("/" + path.replace('\\', '/'));
 			if (result == null) { // read resource listed in descriptor
 				if (!onlyListedFiles)
 					return openAttachment(path, true);
 				String specified = onlyListedFiles ? "specified file " : "";
+				Environment.logException("Attachment " + path
+						+ " not found in plugin with attachment provider "
+						+ provider.getName());
 				throw new FileNotFoundException(specified + path
 						+ " not found in editor service plugin");
 			}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -342,6 +342,11 @@
 	 *         allowed or no parse stream is available the time of invocation
 	 */
 	public Iterator<IToken> getTokenIterator(IRegion region) {
+		return getTokenIterator(region, false);
+	}
+	
+	
+	public Iterator<IToken> getTokenIterator(IRegion region, boolean notForColorer) {
 		// Threading concerns:
 		// - the colorer runs in the main thread and should not be blocked by ANY lock
 		// - CANNOT acquire parse lock:
@@ -351,14 +356,12 @@
 		
 		IPrsStream stream = currentParseStream;
 		
-		if (stream == null || disallowColorer || (editor != null && stream.getILexStream().getStreamLength() != editor.getDocument().getLength())) {
+		if (!notForColorer && (stream == null || disallowColorer || (editor != null && stream.getILexStream().getStreamLength() != editor.getDocument().getLength()))) {
 			return SGLRTokenIterator.EMPTY;
 		} else if (stream.getTokens().size() == 0 || getCurrentAst() == null) {
 			// Parse hasn't succeeded yet, consider the entire stream as one big token
 			stream.addToken(new SGLRToken(stream, region.getOffset(), stream.getStreamLength() - 1,
 					TokenKind.TK_UNKNOWN.ordinal()));
-		} else {
-			// System.out.println("COLOR! " + System.currentTimeMillis()); // DEBUG
 		}
 		
 		// UNDONE: Cannot disable colorer afterwards, need it to remove error markers

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -3,7 +3,9 @@
 import static org.spoofax.interpreter.core.Tools.*;
 
 import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
+import java.io.PrintStream;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.CoreException;
@@ -67,7 +69,7 @@
 		// TODO: refactor
 		String filename = null;
 		String result = null;
-		Exception errorReport = null;
+		String errorReport = null;
 		
 		synchronized (observer.getSyncRoot()) {
 			try {
@@ -110,13 +112,15 @@
 						: ppATerm(resultTerm);
 				}
 			} catch (InterpreterErrorExit e) {
-				observer.reportRewritingFailed();
 				Environment.logException("Builder failed:\n" + observer.getLog(), e);
 				if (editor.getDescriptor().isDynamicallyLoaded()) StrategoConsole.activateConsole();
 				if (errorReportFile == null || !openEditor) {
 					openError(editor, e.getMessage());
 				} else {
-					errorReport = e;
+					ByteArrayOutputStream trace = new ByteArrayOutputStream();
+					observer.getRuntime().getCompiledContext().printStackTrace(new PrintStream(trace), false);
+					errorReport = "[ERROR] " + e.getMessage() + "\n\t" + ppATerm(e.getTerm())
+							+ "\nrewriting failed at\n" + trace.toString();
 				}
 			} catch (UndefinedStrategyException e) {
 				reportGenericException(editor, e);
@@ -131,7 +135,7 @@
 
 		try {
 			if (errorReport != null) {
-				setFileContents(editor, errorReportFile, "ERROR: " + errorReport.getMessage());
+				setFileContents(editor, errorReportFile, errorReport);
 			}
 		
 			if (result != null) {
@@ -154,7 +158,9 @@
 		Context context = observer.getRuntime().getCompiledContext();
 		term = pp_aterm_box_0_0.instance.invoke(context, term);
 		term = box2text_string_0_1.instance.invoke(context, term, Environment.getTermFactory().makeInt(120));
-		return asJavaString(term);
+		String result = term.toString();
+		assert result.startsWith("\"") && result.endsWith("\"");
+		return result.substring(1, result.length() - 1);
 	}
 
 	private void reportGenericException(EditorState editor, Exception e) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -263,7 +263,7 @@
 				}
 			}
 		} finally {
-			System.out.println("OBSERVED " + System.currentTimeMillis());
+			// System.out.println("OBSERVED " + System.currentTimeMillis()); // DEBUG
 			// processEditorRecolorEvents(parseController);
 		}
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-12-14 16:20:54 UTC (rev 20395)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-12-14 16:35:24 UTC (rev 20396)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <site>
-   <description url="http://www.lclnet.nl/update">
+   <description name="Spoofax/IMP" url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
    <feature url="features/org.strategoxt.imp_0.2.0.jar" id="org.strategoxt.imp" version="0.2">

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/report_failure_compat_1_0.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/report_failure_compat_1_0.java	2009-12-14 16:20:54 UTC (rev 20395)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/report_failure_compat_1_0.java	2009-12-14 16:35:24 UTC (rev 20396)
@@ -41,6 +41,8 @@
 				log_0_2.instance = logIntercept;
 				
 				return proceed.invoke(context, current, s);
+			} catch (StrategoErrorExit e) {
+			    throw new StrategoErrorExit(e.getMessage(), e.getTerm(), e);
 			} catch (StrategoExit e) {
 				IStrategoTerm message = logIntercept.lastMessage.get();
 				IStrategoTerm term = logIntercept.lastTerm.get();

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Mon Dec 14 17:37:32 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 14 Dec 2009 16:37:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20397 - LennartKats -
	in strategoxt/trunk: stratego-front/pp stratego-front/syn
	strc-core/lib/stratego/strc/front strc-core/lib/stratego/strc/pp
Message-ID: <200912141637.nBEGbW6p024830@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-14 16:37:32 +0000 (Mon, 14 Dec 2009)
New Revision: 20397

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20397&view=rev

Modified:
   strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp
   strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp
   strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
   strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str

Log:
Introduced a new QDollar constructor for proper syntax highlighting.

Changes:

Modified: strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp
===================================================================
--- strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp	2009-12-14 16:35:24 UTC (rev 20396)
+++ strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp	2009-12-14 16:37:32 UTC (rev 20397)
@@ -277,6 +277,7 @@
    StringEscape3                                      -- H hs=0 [ KW["("] _2 KW[")"] ],
    StringEscape4                                      -- H hs=0 [ KW["<"] _2 KW[">"] ],
    QStr                                               -- _1,
+   QDollar                                            -- _1,
    QBr                                                -- H hs=0 [ KW["$"] _1 KW["$"] ],
    ExtSDefInl                                         -- V is=2 [H  [KW["external"] H hs=0 [_1 KW["("] H  [_2]] KW["|"] H hs=0 [H  [_3] KW[")"]] KW["="]] _4],
    ExtSDefInl.2:iter-star-sep                         -- _1 KW[","],

Modified: strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp
===================================================================
--- strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp	2009-12-14 16:35:24 UTC (rev 20396)
+++ strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp	2009-12-14 16:37:32 UTC (rev 20397)
@@ -263,6 +263,7 @@
    StringEscape3                                      -- H hs=0 [ KW["("] _2 KW[")"] ],
    StringEscape4                                      -- H hs=0 [ KW["<"] _2 KW[">"] ],
    QStr                                               -- _1,
+   QDollar                                            -- _1,
    QBr                                                -- H hs=0 [ KW["$"] _1 KW["$"] ],
    ExtSDefInl                                         -- V is=2 [H  [KW["external"] H hs=0 [_1 KW["("] H  [_2]] KW["|"] H hs=0 [H  [_3] KW[")"]] KW["="]] _4],
    ExtSDefInl.2:iter-star-sep                         -- _1 KW[","],

Modified: strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf
===================================================================
--- strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf	2009-12-14 16:35:24 UTC (rev 20396)
+++ strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf	2009-12-14 16:37:32 UTC (rev 20397)
@@ -20,7 +20,7 @@
     "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
      Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
     <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
-    <Dollar1-LEX>                                           -> StringQuotedPart1 {cons("QStr")}
+    <Dollar1-LEX>                                           -> StringQuotedPart1 {cons("QDollar")}
     "$" <QuotedBracket1-LEX> "$"                            -> StringQuotedPart1 {cons("QBr")}
     ~[\[\]\$]+                                              -> <StringQuotedChars1-LEX>
     [\[\]]                                                  -> <QuotedBracket1-LEX>
@@ -29,7 +29,7 @@
     "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
      Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
     <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
-    <Dollar2-LEX>                                           -> StringQuotedPart2 {cons("QStr")}
+    <Dollar2-LEX>                                           -> StringQuotedPart2 {cons("QDollar")}
     "$" <QuotedBracket2-LEX> "$"                            -> StringQuotedPart2 {cons("QBr")}
     ~[\{\}\$]+                                              -> <StringQuotedChars2-LEX>
     [\{\}]                                                  -> <QuotedBracket2-LEX>
@@ -38,7 +38,7 @@
     "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
     Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
     <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
-    <Dollar3-LEX>                                           -> StringQuotedPart3 {cons("QStr")}
+    <Dollar3-LEX>                                           -> StringQuotedPart3 {cons("QDollar")}
     "$" <QuotedBracket3-LEX> "$"                            -> StringQuotedPart3 {cons("QBr")}
     ~[\(\)\$]+                                              -> <StringQuotedChars3-LEX>
     [\(\)]                                                  -> <QuotedBracket3-LEX>
@@ -47,7 +47,7 @@
     "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
     Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
     <StringQuotedChars4-LEX>                                -> StringQuotedPart4 {cons("QStr")}
-    <Dollar4-LEX>                                           -> StringQuotedPart4 {cons("QStr")}
+    <Dollar4-LEX>                                           -> StringQuotedPart4 {cons("QDollar")}
     "$" <QuotedBracket4-LEX> "$"                            -> StringQuotedPart4 {cons("QBr")}
     ~[\<\>\$]+                                              -> <StringQuotedChars4-LEX>
     [\<\>]                                                  -> <QuotedBracket4-LEX>

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-12-14 16:35:24 UTC (rev 20396)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-12-14 16:37:32 UTC (rev 20397)
@@ -25,7 +25,7 @@
     ; t''*    :=  t'*{"quoted"}
   
   normalize-quoted(|padding) =
-    map(try(DesugarQBr))
+    map(try(DesugarToQStr))
   ; if ?[QStr(_) | _] then
       // Combine padding before the initial string with the padding inside it
       [QStr(<conc-strings> (padding, <id>) => initial) | id]
@@ -163,7 +163,6 @@
     ; (  message := <conc-strings> ("Internal error: escaped term in string quotation is not a string in ", <WithContext>)
       <+ message := "Internal error: escaped term in string quotation is not a string"
       )
-    
 
   DesugarQuoted :
     StringEscape2(s, t) -> StringEscape1(s, t)
@@ -179,6 +178,9 @@
     with
       s' := <conc-strings> ("\"", s, "\"")
 
-  DesugarQBr :
+  DesugarToQStr :
     QBr(s) -> QStr(s)
 
+  DesugarToQStr :
+    QDollar(s) -> QStr(s)
+

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str	2009-12-14 16:35:24 UTC (rev 20396)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str	2009-12-14 16:37:32 UTC (rev 20397)
@@ -358,6 +358,9 @@
     QStr(i) -> S(i)
   
   stratego-to-abox :
+    QDollar(i) -> S(i)
+  
+  stratego-to-abox :
     QBr(i) -> |[ H hs=0 [ "$" ~lit:i "$"] ]|
 
   stratego-to-abox =



From L.C.L.Kats at tudelft.nl  Mon Dec 14 18:01:38 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 14 Dec 2009 17:01:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20398 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	strc-java/trunk/java/runtime/org/strategoxt/lang
Message-ID: <200912141701.nBEH1chV025278@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-14 17:01:38 +0000 (Mon, 14 Dec 2009)
New Revision: 20398

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20398&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-12-14 16:37:32 UTC (rev 20397)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-12-14 17:01:38 UTC (rev 20398)
@@ -117,10 +117,11 @@
 				if (errorReportFile == null || !openEditor) {
 					openError(editor, e.getMessage());
 				} else {
-					ByteArrayOutputStream trace = new ByteArrayOutputStream();
-					observer.getRuntime().getCompiledContext().printStackTrace(new PrintStream(trace), false);
-					errorReport = "[ERROR] " + e.getMessage() + "\n\t" + ppATerm(e.getTerm())
-							+ "\nrewriting failed at\n" + trace.toString();
+					// UNDONE: Printing stack trace in editor
+					// ByteArrayOutputStream trace = new ByteArrayOutputStream();
+					// observer.getRuntime().getCompiledContext().printStackTrace(new PrintStream(trace), false);
+					errorReport = e.getMessage();
+					if (e.getTerm() != null) errorReport += "\n\t" + ppATerm(e.getTerm());
 				}
 			} catch (UndefinedStrategyException e) {
 				reportGenericException(editor, e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2009-12-14 16:37:32 UTC (rev 20397)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2009-12-14 17:01:38 UTC (rev 20398)
@@ -72,6 +72,8 @@
 			IStrategoAstNode oldSubtree = (IStrategoAstNode) oldParent.getChildren().get(i);
 			IStrategoAstNode newSubtree;
 			if (i == newParent.getChildren().size()) {
+				if (i == 0) // fallback
+					return findIdenticalSubtree(oldAst, newAst, selection);
 				newSubtree = (IStrategoAstNode) newParent.getChildren().get(--i);
 			} else if (i > newParent.getChildren().size()) {
 				return findIdenticalSubtree(oldAst, newAst, selection);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java	2009-12-14 16:37:32 UTC (rev 20397)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java	2009-12-14 17:01:38 UTC (rev 20398)
@@ -18,6 +18,7 @@
 		if (message == null || message.getTermType() != STRING)
 			return null;
 		
+		context.popOnExit(false);
 		if (term.getTermType() == TUPLE && term.getSubtermCount() == 0) {
 			throw new StrategoErrorExit(asJavaString(message));
 		} else {



From L.C.L.Kats at tudelft.nl  Mon Dec 14 21:23:43 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 14 Dec 2009 20:23:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20399 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
Message-ID: <200912142023.nBEKNh85027755@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-14 20:23:43 +0000 (Mon, 14 Dec 2009)
New Revision: 20399

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20399&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPAnnoLocationPrimitive.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPJSGLRLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java

Log:
Fixed position information for files parsed from Stratego (SPI-24)

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -27,6 +27,7 @@
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.IMPJSGLRLibrary;
 import org.strategoxt.imp.runtime.stratego.IMPLibrary;
+import org.strategoxt.imp.runtime.stratego.IMPParseStringPTPrimitive;
 import org.strategoxt.imp.runtime.stratego.adapter.WrappedAstNodeFactory;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
 
@@ -153,6 +154,8 @@
 		SGLRCompatLibrary sglrLibrary = (SGLRCompatLibrary) result.getContext().getOperatorRegistry(SGLRCompatLibrary.REGISTRY_NAME);
 		result.addOperatorRegistry(new IMPJSGLRLibrary(sglrLibrary));
 		result.addOperatorRegistry(new IMPLibrary());
+		assert result.getContext().lookupOperator(IMPParseStringPTPrimitive.NAME) instanceof IMPParseStringPTPrimitive;
+		assert result.getCompiledContext().lookupPrimitive(IMPParseStringPTPrimitive.NAME) instanceof IMPParseStringPTPrimitive;
 		result.setIOAgent(new EditorIOAgent());
 		
 		return result;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -183,7 +183,7 @@
 			currentTokenizer = new SGLRTokenizer(inputChars, filename);
 			result = doParseNoImplode(inputChars, filename);
 			parsedCache.put(cachingKey, result);
-			tokenizerCache.put(result, currentTokenizer);
+			putTokenizer(result, currentTokenizer);
 		
 			return result;
 		} finally {
@@ -203,6 +203,13 @@
 	public static SGLRTokenizer getTokenizer(ATerm asfix) {
 		return tokenizerCache.get(asfix);
 	}
+
+	/**
+	 * Store the original tokenizer for an asfix tree.
+	 */
+	public static SGLRTokenizer putTokenizer(ATerm asfix, SGLRTokenizer tokenizer) {
+		return tokenizerCache.put(asfix, tokenizer);
+	}
 	
 	protected abstract ATerm doParseNoImplode(char[] inputChars, String filename)
 			throws TokenExpectedException, BadTokenException, SGLRException, IOException;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -12,6 +12,9 @@
 import lpg.runtime.IToken;
 import lpg.runtime.PrsStream;
 
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.TermConverter;
 import org.spoofax.jsglr.RecoveryConnector;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
@@ -55,6 +58,8 @@
 	
 	private final ProductionAttributeReader reader = new ProductionAttributeReader();
 	
+	private final TermConverter converter = new TermConverter(Environment.getTermFactory());
+	
 	private final TokenKindManager tokenManager;
 	
 	protected SGLRTokenizer tokenizer;
@@ -122,6 +127,8 @@
 		ATermAppl rhs = termAt(prod, PROD_RHS);
 		ATermAppl attrs = termAt(prod, PROD_ATTRS);
 		ATermList contents = termAt(appl, APPL_CONTENTS);
+		ATermList annos = appl.getAnnotations();
+		// TODO: use annos as annotations for resulting terms
 		
 		IToken prevToken = tokenizer.currentToken();
 		
@@ -131,7 +138,7 @@
 		if (lexicalStart) inLexicalContext = true;
 		
 		if (!inLexicalContext && "sort".equals(rhs.getName()) && lhs.getLength() == 1 && termAt(contents, 0).getType() == ATerm.INT) {
-			return createIntTerminal(contents, rhs);
+			return setAnnos(createIntTerminal(contents, rhs), annos);
 		}
 		
 		boolean isList = !inLexicalContext && AsfixAnalyzer.isList(rhs);
@@ -144,13 +151,21 @@
 			implodeChildNodes(contents);
 		
 		if (lexicalStart || isVar) {
-			return createStringTerminal(lhs, rhs, attrs);
+			return setAnnos(createStringTerminal(lhs, rhs, attrs), annos);
 		} else if (inLexicalContext) {
 			return null; // don't create tokens inside lexical context; just create one big token at the top
 		} else {
-			return createNodeOrInjection(lhs, rhs, attrs, prevToken, children, isList);
+			return setAnnos(createNodeOrInjection(lhs, rhs, attrs, prevToken, children, isList), annos);
 		}
 	}
+	
+	private AstNode setAnnos(AstNode node, ATermList annos) {
+		if (node != null && annos != null && !annos.isEmpty()) {
+			IStrategoTerm termAnnos = converter.convert(Environment.getWrappedATermFactory().wrapTerm(annos));
+			node.setAnnotations((IStrategoList) termAnnos);
+		}
+		return node;
+	}
 
 	protected ArrayList<AstNode> implodeChildNodes(ATermList contents) {
 		ArrayList<AstNode> results = inLexicalContext

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -10,6 +10,7 @@
 import lpg.runtime.IToken;
 
 import org.eclipse.core.resources.IResource;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.interpreter.terms.InlinePrinter;
@@ -42,6 +43,8 @@
 	private IToken leftToken, rightToken;
 	
 	private AstNode parent;
+	
+	private IStrategoList annotations;
 		
 	// Accessors
 	
@@ -113,6 +116,14 @@
 			return (RootAstNode) result;
 	}
 	
+	public IStrategoList getAnnotations() {
+		return annotations;
+	}
+	
+	protected void setAnnotations(IStrategoList annotations) {
+		this.annotations = annotations;
+	}
+	
 	public IStrategoTerm getTerm() {
 		if (term != null) return term;
 		else return Environment.getTermFactory().wrap(this);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -126,6 +126,8 @@
 			} else if (filename.endsWith(".jar")) {
 				initRuntime(monitor);
 				jars.add(filename);
+			} else if (filename.endsWith(".str")) {
+				Environment.asynOpenErrorDialog("Loading analysis components", "Cannot use .str files as a provider: please specify a .ctree or .jar file instead (usually built in /include/)", null);
 			}
 		}
 		

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPAnnoLocationPrimitive.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPAnnoLocationPrimitive.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPAnnoLocationPrimitive.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -0,0 +1,49 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.spoofax.interpreter.adapter.aterm.WrappedATerm;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.IOperatorRegistry;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.TermConverter;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.parser.JSGLRI;
+import org.strategoxt.lang.compat.sglr.STRSGLR_anno_location;
+
+import aterm.ATerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class IMPAnnoLocationPrimitive extends STRSGLR_anno_location {
+	
+	private final TermConverter converter = new TermConverter(Environment.getWrappedATermFactory());
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		
+		IStrategoTerm oldAsfix = tvars[0];
+		
+		boolean result = super.call(env, svars, tvars);
+		if (!result) return false;
+		
+		// Restore tree metadata mappings
+		IStrategoTerm newAsfix = env.current();
+		IOperatorRegistry registry = env.getOperatorRegistry(IMPJSGLRLibrary.REGISTRY_NAME);
+		IMPParseStringPTPrimitive mapping = (IMPParseStringPTPrimitive) registry.get(IMPParseStringPTPrimitive.NAME);
+
+		char[] oldChars = mapping.getInputChars(oldAsfix);
+		if (oldChars == null) return true;
+
+		// TODO: Optimize - Aagh stop it with all the term conversions!!
+		ATerm newAsfixTerm = ((WrappedATerm) converter.convert(newAsfix)).getATerm();
+		mapping.putInputChars(newAsfix, oldChars);
+		mapping.putInputTerm(newAsfix, newAsfixTerm);
+		
+		JSGLRI.putTokenizer(newAsfixTerm, JSGLRI.getTokenizer(mapping.getInputTerm(oldAsfix)));
+		
+		return true;
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -1,7 +1,9 @@
 package org.strategoxt.imp.runtime.stratego;
 
+import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.IOperatorRegistry;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.imp.runtime.parser.ast.AsfixImploder;
 import org.strategoxt.imp.runtime.parser.ast.AstNode;
@@ -28,16 +30,19 @@
 			return super.invoke(context, asfix, implodeConcreteSyntax);
 		
 		IOperatorRegistry library = context.getOperatorRegistry(IMPJSGLRLibrary.REGISTRY_NAME);
-		IMPParseStringPTPrimitive jsglr = (IMPParseStringPTPrimitive) library.get(IMPParseStringPTPrimitive.NAME);
-		if (jsglr == null) {
+		AbstractPrimitive mappingPrimitive = library.get(IMPParseStringPTPrimitive.NAME);
+		if (!(mappingPrimitive instanceof IMPParseStringPTPrimitive)) {
 			// Spoofax/IMP parsing may not be used for this context
 			return super.invoke(context, asfix, implodeConcreteSyntax);
 		}
+
+		IMPParseStringPTPrimitive mapping = (IMPParseStringPTPrimitive) mappingPrimitive;
 		
-		char[] inputChars = jsglr.getInputChars(asfix);
-		ATerm asfixATerm = jsglr.getInputTerm(asfix);
+		char[] inputChars = mapping.getInputChars(asfix);
+		ATerm asfixATerm = mapping.getInputTerm(asfix);
 		
 		if (inputChars == null || asfix == null) {
+			Environment.logException("Could not find origin term for asfix tree");
 			return outer.invoke(context, asfix, implodeConcreteSyntax);
 		}
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPJSGLRLibrary.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPJSGLRLibrary.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPJSGLRLibrary.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -1,6 +1,5 @@
 package org.strategoxt.imp.runtime.stratego;
 
-import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
 import org.strategoxt.stratego_sglr.implode_asfix_1_0;
@@ -8,12 +7,13 @@
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class IMPJSGLRLibrary extends JSGLRLibrary {
+public class IMPJSGLRLibrary extends SGLRCompatLibrary {
 
 	public IMPJSGLRLibrary(SGLRCompatLibrary sglrLibrary) {
 		super(Environment.getWrappedATermFactory());
 		
 		add(new IMPParseStringPTPrimitive(Environment.getWrappedATermFactory(), sglrLibrary.getFilterSettings()));
+		add(new IMPAnnoLocationPrimitive());
 	}
 	
 	public static void init() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -74,11 +74,19 @@
 			
 		result = termConverter.convert(result);
 
-		inputTermMap.put(result, asfix);
-		inputCharMap.put(result, inputChars);
+		putInputTerm(result, asfix);
+		putInputChars(result, inputChars);
 		
 		return result;
 	}
+
+	protected char[] putInputChars(IStrategoTerm asfix, char[] inputChars) {
+		return inputCharMap.put(asfix, inputChars);
+	}
+
+	protected ATerm putInputTerm(IStrategoTerm asfix, final ATerm asfixATerm) {
+		return inputTermMap.put(asfix, asfixATerm);
+	}
 	
 	public char[] getInputChars(IStrategoTerm asfix) {
 		return inputCharMap.get(asfix);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -5,6 +5,7 @@
 import lpg.runtime.IAst;
 
 import org.eclipse.core.resources.IResource;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
@@ -18,6 +19,8 @@
 	
 	IStrategoTerm getTerm();
 	
+	IStrategoList getAnnotations();
+	
 	String getConstructor();
 	
 	void setConstructor(String constructor);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -22,19 +22,24 @@
 public class WrappedAstNodeFactory extends TermFactory implements ITermFactory {
 	
 	public IStrategoTerm wrap(IStrategoAstNode node) {
-		if(node instanceof IntAstNode) {
-			return new WrappedAstNodeInt(node);
+		IStrategoTerm result;
+		if (node instanceof IntAstNode) {
+			result = new WrappedAstNodeInt(node);
 		} else if (node instanceof StringAstNode) {
-			return new WrappedAstNodeString(node);
+			result = new WrappedAstNodeString(node);
 		} else if (node instanceof ListAstNode) {
-			return new WrappedAstNodeList(this, node, 0);
+			result = new WrappedAstNodeList(this, node, 0);
 		} else {
 			// TODO: ensure maximal sharing of node constructors
 			//       (term constructors are also maximally shared!)
-			return "()".equals(node.getConstructor())
+			result = "()".equals(node.getConstructor())
 				? new WrappedAstNodeTuple(node)
 				: new WrappedAstNodeAppl(this, node);
 		}
+		IStrategoList annos = node.getAnnotations();
+		if (annos != null)
+			result = annotateTerm(result, annos);
+		return result;
 	}
 	
 	protected IStrategoList wrapList(IStrategoAstNode node, int offset) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-12-14 17:01:38 UTC (rev 20398)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-12-14 20:23:43 UTC (rev 20399)
@@ -33,8 +33,8 @@
 
 	public void registerComponent(String component) {
 		synchronized (asyncComponents) {
-			asyncComponents.add(component);
-			activateComponent(component);
+			if (asyncComponents.add(component))
+				activateComponent(component);
 		}
 	}
 	



From L.C.L.Kats at tudelft.nl  Tue Dec 15 11:25:15 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 15 Dec 2009 10:25:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20400 - LennartKats -
	strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr
	strategoxt/trunk/stratego-libraries/sglr/tests
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
Message-ID: <200912151025.nBFAPFRB007505@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-15 10:25:15 +0000 (Tue, 15 Dec 2009)
New Revision: 20400

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20400&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse-table.str
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str
   strategoxt/trunk/stratego-libraries/sglr/tests/stratego-sglr-tests.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str

Log:
Added a memo-open-parse-table strategy that is called when a parse table hasn't been manually opened, simplifying the interface of the parsing strategies.

Changes:

Modified: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse-table.str
===================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse-table.str	2009-12-14 20:23:43 UTC (rev 20399)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse-table.str	2009-12-15 10:25:15 UTC (rev 20400)
@@ -15,9 +15,20 @@
    * @type SerializedParseTable -> ParseTable
    */
   open-parse-table =
-    ?tbl
-    ; prim("STRSGLR_open_parse_table", tbl) => table
-    ; !ParseTable(table)
+      prim("STRSGLR_open_parse_table", <id>)
+    ; !ParseTable(<id>)
+    
+  /**
+   * Open a parse table for use in parsing, memoizing the resulting table.
+   *
+   * @type SerializedParseTable -> ParseTable
+   */
+  memo-open-parse-table =
+    MemoOpenParseTable
+  <+
+    ?trm
+    ; open-parse-table => tbl
+    ; rules(MemoOpenParseTable : trm -> tbl)
 
   /**
    * Close an open parse table.

Modified: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str
===================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str	2009-12-14 20:23:43 UTC (rev 20399)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str	2009-12-15 10:25:15 UTC (rev 20400)
@@ -68,7 +68,7 @@
     parse-string-pt(on-parse-error | tbl, start-symbol, "string")
 
   parse-string-pt(on-parse-error |tbl, start-symbol, path) =
-    where(!tbl => ParseTable(internal-tbl))
+    where(<try(memo-open-parse-table)> tbl => ParseTable(internal-tbl))
     ; ?string
     ; prim("STRSGLR_parse_string_pt", on-parse-error | string, internal-tbl, start-symbol, path)
 
@@ -128,7 +128,7 @@
     parse-stream-pt(on-parse-error | tbl, start-symbol, "stream")
     
   parse-stream-pt(on-parse-error | tbl, start-symbol, path) =
-    where(!tbl => ParseTable(internal-tbl))
+    where(<try(memo-open-parse-table)> tbl => ParseTable(internal-tbl))
     ; ?Stream(stream)
     ; prim("STRSGLR_parse_stream_pt", on-parse-error | stream, internal-tbl, start-symbol, path)
 

Modified: strategoxt/trunk/stratego-libraries/sglr/tests/stratego-sglr-tests.str
===================================================================
--- strategoxt/trunk/stratego-libraries/sglr/tests/stratego-sglr-tests.str	2009-12-14 20:23:43 UTC (rev 20399)
+++ strategoxt/trunk/stratego-libraries/sglr/tests/stratego-sglr-tests.str	2009-12-15 10:25:15 UTC (rev 20400)
@@ -50,10 +50,16 @@
 
   simple-parse-tests =
       where(
-        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
+        <ReadFromFile> "ExpInt.tbl" => unopenedtbl; open-parse-table => tbl
       ; <ReadFromFile> "ExpIntAmb.tbl"; open-parse-table => ambtbl
       )
 
+    ; apply-and-check(!"Parse an expression, implictly opening the parse table"
+      , parse-string-pt(|unopenedtbl)
+      , !"1 + 1"
+      , is-parse-tree
+      )
+
     ; apply-and-check(!"Parse a simple expression"
       , parse-string-pt(|tbl)
       , !"1 + 1"
@@ -1245,4 +1251,4 @@
     Foo : A * A -> A
     Foo : A * A * A -> A
 
-    pos-info : AnnoKey
\ No newline at end of file
+    pos-info : AnnoKey

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-12-14 20:23:43 UTC (rev 20399)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-12-15 10:25:15 UTC (rev 20400)
@@ -2,6 +2,7 @@
 
 imports
   libstratego-lib
+  libstratego-sglr
 
 signature
   sorts ParseTable
@@ -36,7 +37,14 @@
 strategies
 
   jsglr-parse-string-pt(on-parse-error | tbl, start-symbol, path) =
-      where(!tbl => ParseTable(internal-tbl))
+      where(<try(memo-open-parse-table)> tbl => ParseTable(internal-tbl))
     ; ?string
     ; prim("JSGLR_parse_string_pt_compat", on-parse-error | string, internal-tbl, start-symbol, path)
     
+  internal memo-open-parse-table = // HACK: copied here until a new STRC baseline is set
+    MemoOpenParseTable'
+  <+
+    ?trm
+    ; open-parse-table => tbl
+    ; rules(MemoOpenParseTable' : trm -> tbl)
+



From L.C.L.Kats at tudelft.nl  Tue Dec 15 11:45:22 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 15 Dec 2009 10:45:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20401 - LennartKats -
	in strc-java/trunk/java: .
	runtime/org/strategoxt/lang/compat/override
Message-ID: <200912151045.nBFAjMEX007691@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-15 10:45:22 +0000 (Tue, 15 Dec 2009)
New Revision: 20401

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20401&view=rev

Modified:
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str

Log:


Changes:

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-12-15 10:25:15 UTC (rev 20400)
+++ strc-java/trunk/java/Makefile.am	2009-12-15 10:45:22 UTC (rev 20401)
@@ -205,7 +205,7 @@
 	$(STRJ) -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.jsglr_parser_compat -la stratego-lib -la stratego-sglr -la stratego-xtc
 
 runtime/org/strategoxt/lang/compat/override/jsglr_parser/Main.java : runtime/org/strategoxt/lang/compat/override/jsglr-parser.str ../trans/strj
-	$(STRJ) -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.jsglr_parser -la stratego-lib
+	$(STRJ) -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.jsglr_parser -la stratego-lib -la stratego-sglr
 
 runtime/org/strategoxt/lang/compat/override/performance_tweaks/Main.java : runtime/org/strategoxt/lang/compat/override/performance-tweaks.str ../trans/strj
 	$(STRJ) -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.performance_tweaks -la stratego-lib

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-12-15 10:25:15 UTC (rev 20400)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-12-15 10:45:22 UTC (rev 20401)
@@ -37,7 +37,7 @@
 strategies
 
   jsglr-parse-string-pt(on-parse-error | tbl, start-symbol, path) =
-      where(<try(memo-open-parse-table)> tbl => ParseTable(internal-tbl))
+      where(<try(not(?ParseTable(_)); debug(!"IN"); memo-open-parse-table)> tbl => ParseTable(internal-tbl))
     ; ?string
     ; prim("JSGLR_parse_string_pt_compat", on-parse-error | string, internal-tbl, start-symbol, path)
     



From L.C.L.Kats at tudelft.nl  Tue Dec 15 11:46:23 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 15 Dec 2009 10:46:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20402 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
Message-ID: <200912151046.nBFAkNAb007697@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-15 10:46:23 +0000 (Tue, 15 Dec 2009)
New Revision: 20402

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20402&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str

Log:


Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-12-15 10:45:22 UTC (rev 20401)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-12-15 10:46:23 UTC (rev 20402)
@@ -37,7 +37,7 @@
 strategies
 
   jsglr-parse-string-pt(on-parse-error | tbl, start-symbol, path) =
-      where(<try(not(?ParseTable(_)); debug(!"IN"); memo-open-parse-table)> tbl => ParseTable(internal-tbl))
+      where(<try(not(?ParseTable(_)); memo-open-parse-table)> tbl => ParseTable(internal-tbl))
     ; ?string
     ; prim("JSGLR_parse_string_pt_compat", on-parse-error | string, internal-tbl, start-symbol, path)
     



From L.C.L.Kats at tudelft.nl  Tue Dec 15 13:10:27 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 15 Dec 2009 12:10:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20403 - LennartKats -
	in strc-java/trunk: java/tools/org/strategoxt/tools/lib test
Message-ID: <200912151210.nBFCARd4009371@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-15 12:10:27 +0000 (Tue, 15 Dec 2009)
New Revision: 20403

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20403&view=rev

Modified:
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/ppgen.str
   strc-java/trunk/test/test-tools.sh

Log:
Fixed ppgen -t option

Changes:

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/ppgen.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/ppgen.str	2009-12-15 10:46:23 UTC (rev 20402)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/ppgen.str	2009-12-15 12:10:27 UTC (rev 20403)
@@ -20,7 +20,9 @@
   ppgen = 
     <pre-process-sdf> (<get-input-type>, <id>)
     ; ppgenerate
-    ; if not(<get-config> "--output-type" => AST()) then
+    ; if <get-config> "--output-type" => AST() then
+        write-to
+      else
         pp-pp-table; print-to
       end
 

Modified: strc-java/trunk/test/test-tools.sh
===================================================================
--- strc-java/trunk/test/test-tools.sh	2009-12-15 10:46:23 UTC (rev 20402)
+++ strc-java/trunk/test/test-tools.sh	2009-12-15 12:10:27 UTC (rev 20403)
@@ -1,4 +1,5 @@
 #!/bin/sh -e
 
-java -cp ../java/strategoxt.jar start org.strategoxt.tools.main-sdf2rtg -i strc1/Expressions.def -m Expressions | \
-java -cp ../java/strategoxt.jar start org.strategoxt.tools.main-rtg2sig --module Expressions > /dev/null
+CLASSPATH="../java/spoofax-libs.jar:../java/bin:../java/strategoxt.jar"
+java -cp $CLASSPATH start org.strategoxt.tools.main-sdf2rtg -i strc1/Expressions.def -m Expressions | \
+java -cp $CLASSPATH start org.strategoxt.tools.main-rtg2sig --module Expressions > /dev/null



From L.C.L.Kats at tudelft.nl  Tue Dec 15 13:11:06 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 15 Dec 2009 12:11:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20404 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <200912151211.nBFCB6Xn009383@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-15 12:11:06 +0000 (Tue, 15 Dec 2009)
New Revision: 20404

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20404&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Log:
Made ppgen optional and added .pp.af file generation.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-15 12:10:27 UTC (rev 20403)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-15 12:11:06 UTC (rev 20404)
@@ -220,17 +220,27 @@
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
             </dependset>
             <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
             <antcall target="ppgen.helper"/>
         </target>
     
         <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
-            <java classname="start" failonerror="true">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="start" failonerror="false">
                 <arg value="org.strategoxt.tools.main-ppgen"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="start" failonerror="false">
+                <arg value="org.strategoxt.tools.pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+                <arg value="-o"/>
                 <arg value="${include}/${sdfmodule}.pp"/>
             </java>
         </target>



From L.C.L.Kats at tudelft.nl  Tue Dec 15 13:11:14 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 15 Dec 2009 12:11:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20405 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading parser services
Message-ID: <200912151211.nBFCBEQl009386@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-15 12:11:14 +0000 (Tue, 15 Dec 2009)
New Revision: 20405

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20405&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-15 12:11:06 UTC (rev 20404)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-15 12:11:14 UTC (rev 20405)
@@ -92,7 +92,6 @@
 		for (AbstractService service : services.keySet())
 			service.reinitialize(newDescriptor);
 		attachedFiles = null;
-		// UNDONE: StrategoBuilderListener.rescheduleAllListeners(); // TODO: cleanup
 	}
 	
 	/**
@@ -277,7 +276,7 @@
 				getProperty("LanguageId", getProperty("LanguageName")),
 				getProperty("Description", ""),
 				ROOT_LANGUAGE,		  // ("Extends" is not used for IMP)
-				DEFAULT_ICON, // TODO: icon path in esv language
+				DEFAULT_ICON, // TODO: use a default icon path /icons/editor.gif, if it exists
 				getProperty("URL", ""),
 				// FIXME: ID of the bundle containing the language descriptor and icon for this language
 				//        (does getAttachmentProvider() already provide enough functionality for this?)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-12-15 12:11:06 UTC (rev 20404)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-12-15 12:11:14 UTC (rev 20405)
@@ -138,9 +138,6 @@
 		Object result = parser.parse(input, monitor);
 		if (isReinitialized && lastEditor != null) {
 			// Update other services
-			// TODO: Trigger colorer update
-			// lastEditor.getEditor().getServiceControllerManager().getPresentationController().damage(new Region(0, input.length()));
-			
 			lastEditor.getEditor().updateColoring(new Region(0, input.length()));
 			lastEditor.getEditor().fParserScheduler.notifyModelListeners(new NullProgressMonitor());
 			isReinitialized = false;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-12-15 12:11:06 UTC (rev 20404)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-12-15 12:11:14 UTC (rev 20405)
@@ -112,8 +112,6 @@
 	
 	// Parsing
 	
-	 // TODO: use IStrategoAstNode as result types?
-	
 	/**
 	 * Parse an input, returning the AST and initializing the parse stream.
 	 * 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java	2009-12-15 12:11:06 UTC (rev 20404)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java	2009-12-15 12:11:14 UTC (rev 20405)
@@ -42,6 +42,7 @@
         	  if (folding.getAttribute(constructor, sort, 0) != null) {
         		  makeCompleteAnnotation(node);
         		  // TODO: Fold node by default
+        		  Environment.logException("Folding annotation (folded) not implemented");
         		  break;
         	  }
           }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-12-15 12:11:06 UTC (rev 20404)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-12-15 12:11:14 UTC (rev 20405)
@@ -3,9 +3,7 @@
 import static org.spoofax.interpreter.core.Tools.*;
 
 import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
-import java.io.PrintStream;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.CoreException;
@@ -226,7 +224,7 @@
 		assert !Thread.holdsLock(observer.getSyncRoot()) || Thread.holdsLock(Environment.getSyncRoot())
 			: "Opening a new editor and acquiring a resource lock can cause a deadlock";
 		
-		// TODO: WorkBenchPage.openEdiotr with a custom IEditorInput?
+		// TODO: non-persistent editor: WorkBenchPage.openEditor with a custom IEditorInput?
 		IWorkbenchPage page =
 			PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
 		



From L.C.L.Kats at tudelft.nl  Tue Dec 15 15:02:47 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 15 Dec 2009 14:02:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20408 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	services stratego/adapter
Message-ID: <200912151402.nBFE2lBi011623@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-15 14:02:47 +0000 (Tue, 15 Dec 2009)
New Revision: 20408

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20408&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java

Log:
Fixed pp-aterm handling.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-12-15 12:42:21 UTC (rev 20407)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-12-15 14:02:47 UTC (rev 20408)
@@ -15,11 +15,14 @@
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.ide.IDE;
+import org.spoofax.interpreter.adapter.aterm.WrappedATerm;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.TermConverter;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.RuntimeActivator;
@@ -107,7 +110,7 @@
 				if (resultTerm != null && filename != null) {
 					result = isTermString(resultTerm) 
 						? asJavaString(resultTerm)
-						: ppATerm(resultTerm);
+						: ppATerm(resultTerm).stringValue();
 				}
 			} catch (InterpreterErrorExit e) {
 				Environment.logException("Builder failed:\n" + observer.getLog(), e);
@@ -119,7 +122,7 @@
 					// ByteArrayOutputStream trace = new ByteArrayOutputStream();
 					// observer.getRuntime().getCompiledContext().printStackTrace(new PrintStream(trace), false);
 					errorReport = e.getMessage();
-					if (e.getTerm() != null) errorReport += "\n\t" + ppATerm(e.getTerm());
+					if (e.getTerm() != null) errorReport += "\n\t" + toEscapedString(ppATerm(e.getTerm()));
 				}
 			} catch (UndefinedStrategyException e) {
 				reportGenericException(editor, e);
@@ -153,15 +156,17 @@
 		}
 	}
 
-	private String ppATerm(IStrategoTerm term) {
+	private IStrategoString ppATerm(IStrategoTerm term) {
 		Context context = observer.getRuntime().getCompiledContext();
 		term = pp_aterm_box_0_0.instance.invoke(context, term);
 		term = box2text_string_0_1.instance.invoke(context, term, Environment.getTermFactory().makeInt(120));
-		String result = term.toString();
-		assert result.startsWith("\"") && result.endsWith("\"");
-		return result.substring(1, result.length() - 1);
+		return (IStrategoString) term;
 	}
 
+	private static String toEscapedString(IStrategoString term) {
+		return ((WrappedATerm) TermConverter.convert(Environment.getWrappedATermFactory(), term)).toString();
+	}
+
 	private void reportGenericException(EditorState editor, Exception e) {
 		boolean isDynamic = editor.getDescriptor().isDynamicallyLoaded();
 		Environment.logException("Builder failed for " + (isDynamic ? "" : "non-") + "dynamically loaded editor", e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-12-15 12:42:21 UTC (rev 20407)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-12-15 14:02:47 UTC (rev 20408)
@@ -135,7 +135,8 @@
 				return false;				
 			}
 		} else if (termType != TUPLE) {
-			throw new IllegalStateException("Unexpected type of term with kids: " + this);
+			// UNDONE: throw new IllegalStateException("Unexpected type of term with kids: " + this);
+			return false;
 		}
 
 		return true;



From L.C.L.Kats at tudelft.nl  Tue Dec 15 16:07:54 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 15 Dec 2009 15:07:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20409 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.updatesite
Message-ID: <200912151507.nBFF7sbP012482@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-15 15:07:54 +0000 (Tue, 15 Dec 2009)
New Revision: 20409

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20409&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Moved common build functionality to build.common.xml

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-15 14:02:47 UTC (rev 20408)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-15 15:07:54 UTC (rev 20409)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.2"
+      version="0.2.0.1"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-15 14:02:47 UTC (rev 20408)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-15 15:07:54 UTC (rev 20409)
@@ -7,9 +7,9 @@
 strategies
 
   // TODO: -XX:+TieredCompilation in Java 7?
-  // TODO: generate .pp.af file
 
   create-build-xml =
+    create-build-common-xml;
     <file-exists> "build.xml"
   <+
     name       := <get-sdf-main-module>;
@@ -36,29 +36,46 @@
         <property name="build" location="bin"/>
         <property name="dist" location="bin/dist"/>
         
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="--library
+                        -I &quot;${trans}&quot; -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
         <!-- External .def and .jar locations
         <property name="externaldef" location="syntax/${sdfmodule}.def"/>
         <property name="externaljar" value="../lib.jar"/>
         <property name="externaljarflags" value="-la org.lib"/>
         -->
     
-        <!--
-            Environment configuration:
-            Spoofax/IMP includes native versions of the SDF executables (build.strategoxt.sdf),
-            and Java alternatives for the Stratego alternatives (build.strategoxt.stratego)
-        -->
+        <!-- Environment configuration for command-line builds -->
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
-        <property name="build.sdf.imports" value=""/>
-        <property name="build.stratego.args" value="--library
-                        -I &quot;${trans}&quot;
-                        -I &quot;${basedir}&quot;
-                        -la stratego-lib -la stratego-sglr
-                        -la stratego-gpp -la stratego-xtc
-                        -la stratego-aterm"/>
-        
+    
+        <import file="build.common.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp"/>
+    </project>
+    <%
+  
+  create-build-common-xml =
+    <file-exists> "build.common.xml"
+  <+
+    name       := <get-sdf-main-module>;
+    name'      := <trans-module-name>;
+    classname  := <get-main-class-name>;
+    pkgname    := <BasePackage <+ default-package-name>;
+    
+    <output-xml-file(|[], "build.common.xml")>
+    %>
+    <?xml version="1.0" encoding="UTF-8"?>
+    <project name="common">
+    
+        <target name="spoofaximp" depends="stratego.ctree,sdf2table,sdf2imp"/>
+    
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
@@ -77,8 +94,6 @@
         <mkdir dir="${dist}"/>
         <mkdir dir="${include}"/>
         <mkdir dir="${lib}"/>
-    
-        <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
 
         <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-12-15 14:02:47 UTC (rev 20408)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-12-15 15:07:54 UTC (rev 20409)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.2.0.jar" id="org.strategoxt.imp" version="0.2">
+   <feature url="features/org.strategoxt.imp_0.2.0.1.jar" id="org.strategoxt.imp" version="0.2.0.1">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP"/>



From m.dejonge at tudelft.nl  Tue Dec 15 16:12:38 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 15 Dec 2009 15:12:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20410 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios CriticalScenarios/JustTry
	CriticalScenarios/Problematic History History/Languages
	Input/Dryad src/evaluating src/scenariotests
Message-ID: <200912151512.nBFFCcPt012537@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-15 15:12:38 +0000 (Tue, 15 Dec 2009)
New Revision: 20410

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20410&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Common_morePartsStructureError.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Dryad_test-java-traits.2.break2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Dryad_test-java-traits.3.break27.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testC3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testK1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testL1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_multipleErrors2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_multipleErrors2.java.rec
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_sloppyCode.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_sloppyCode.java.rec
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_testBridgeFG.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_testBridgeFG.java.rec
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java.rec
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_bad-performance-stratego-sugar.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app.rec
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/WebDSL.txt
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break26.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break33.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java

Log:
-fix bugs
-all recoveries succeeds for Dryad and SLE set
-some work to do on updating history (in case of multiple errors regions tend to get merged)

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Common_morePartsStructureError.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Common_morePartsStructureError.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Common_morePartsStructureError.java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,32 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int errorFragment()
+  { 
+    int corrLine1;
+    corrLine2();
+    if(bla()) //@START
+    { 
+      int i;
+      return 2; /* }*/
+    else
+      if(true)
+        return 4;
+      else
+        return 5; //@END
+    corrLine3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Dryad_test-java-traits.2.break2.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Dryad_test-java-traits.2.break2.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Dryad_test-java-traits.2.break2.str_java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      ) /* ERROR remove ) */ 
+
+  test-traits/* ERROR remove ( */input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    ) //@END
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Dryad_test-java-traits.3.break27.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Dryad_test-java-traits.3.break27.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Dryad_test-java-traits.3.break27.str_java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) = //@START
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output ,, 
+    )) //@END
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testC3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testC3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testC3.java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,42 @@
+/* Rocky mountains - Incomplete */
+class C { //@START
+	int a;
+	void C() {
+		int b;
+	}
+	void m() {
+		if (true) {
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		if (true) {
+			int e;
+		}
+		int f;
+	}
+	class D {
+		void m() {
+			if (true) {
+				for (int i=0;i<10;i++) {
+					int g;
+					int h;
+					if (true) {
+						int j;
+					}
+				}
+			}
+		}
+		void n() {
+			int k;
+		}
+	}
+	int n() {
+		return 0; /*	}} */ //@END
+		
+class E {
+	void m() {
+		int a;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testK1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testK1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testK1.java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,16 @@
+
+/* Peak program  Extra brace*/
+class C {
+	void m() {
+		if (true) {
+			for (int i; i < 10; i++) {
+				if (true) {
+					if (true) {
+						int a;
+					}
+				}
+			}
+			} //@START @END
+		} 
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testL1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testL1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/JustTry/Input_Scope_testL1.java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,31 @@
+/* Misinterpreted statements - if  Extra brace resulting in methods outside of class*/
+class C {
+	void m() {
+		int a;
+		if (true) {
+			int b;
+		}
+	}
+} //@START @END
+	void n() {
+		int a;
+		if (true) {
+			int b;
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		int c;
+	}
+	void o() {
+		int a;
+		if (true) {
+			int b;
+		}
+		if (true) {
+			int c;
+		}
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_multipleErrors2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_multipleErrors2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_multipleErrors2.java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int correctMethod2(){
+      int corrLine1;
+      if(true){
+    	  String s = "bla bla bla"//; @START @END
+    	  corrLine2();
+      }
+      else{ //@START
+         corrLine3(); //}     
+      corrLine4( //); //@END
+  }
+      
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+  
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_multipleErrors2.java.rec
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_multipleErrors2.java.rec	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_multipleErrors2.java.rec	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+                               
+                    
+               
+    	                                         
+    	              
+       
+                    
+                              
+                            
+   
+      
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+  
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_sloppyCode.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_sloppyCode.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_sloppyCode.java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,77 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int ErrorTooMuchClosing()
+  { 
+    if(bla1())
+    { 
+      while(true) //@START
+      { 
+        bla2(); /* }*/
+      stm(); // @END
+    }
+    int i;
+    int j;
+    bla3();
+  }  
+
+  private int ErrorMissingClosing()
+  { 
+    if(bla1())
+    { 
+      bla();
+      while(true) //@START
+      { 
+        bla2();
+        stm(); /* }*/ // @END
+    }
+    int i;
+    int j;
+    bla3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod3()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_sloppyCode.java.rec
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_sloppyCode.java.rec	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_sloppyCode.java.rec	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,77 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+                                   
+    
+              
+      
+                          
+        
+                      
+                    
+     
+          
+          
+           
+     
+
+                                   
+    
+              
+      
+            
+                          
+        
+               
+                             
+     
+          
+          
+           
+   
+
+                              
+    
+            
+            
+                    
+                   
+   
+
+  private int correctMethod3()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_testBridgeFG.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_testBridgeFG.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_testBridgeFG.java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,34 @@
+class X  
+{ 
+  private int method1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int method2()
+  { 
+    int Line1;
+    if(false){ //@START
+	    if(true)
+	    { 
+	       Line2();
+	       Line3();
+	    Line4();
+	    Line5(); //@END
+    Line6();
+    Line7() //@START @END
+  }
+    
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+  
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_testBridgeFG.java.rec
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_testBridgeFG.java.rec	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Common_testBridgeFG.java.rec	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,34 @@
+class X  
+{ 
+  private int method1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+                       
+    
+              
+                       
+	            
+	      
+	               
+	               
+	            
+	                   
+            
+                         
+   
+    
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+  
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,14 @@
+/* Bumpy road - Double error, extra right brace and missing right brace */
+class C {
+	void m() { //@START
+		int a;
+	}} //@END
+	void n() {
+		int b;
+	}
+	void o() { //@START
+		int c; 	/*}*/ //@END
+	void p() {
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java.rec
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java.rec	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java.rec	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,15 @@
+/* Bumpy road - Double error, extra right brace and missing right brace */
+class C {
+	                   
+		      
+	         
+	          
+		      
+	 
+	                   
+		      
+	            
+	          
+		      
+	 
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_bad-performance-stratego-sugar.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_bad-performance-stratego-sugar.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_bad-performance-stratego-sugar.str	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,75 @@
+module sdf
+
+imports
+  libstratego-lib
+  libstratego-sdf
+  libstrc
+
+signature constructors
+
+  context-free-syntax : Term -> Term
+  sort                : Term -> Term
+  term                : Term -> Term
+  cons                : Term -> Term
+  iter-star           : Term -> Term
+  iter-plus           : Term -> Term
+  iter-star-sep       : Term * Term -> Term
+  iter-plus-sep       : Term * Term -> Term
+  prod                : Term * Term * Term -> Term
+  
+
+rules
+
+  editor-analyze:
+    (ast, path, project-path) -> (errors, [], [])
+    with
+      errors := <alltd(context-free-syntax(collect-all(context-free-syntax-error)))> ast
+  
+  context-free-syntax-error:
+    prod(s*, s, a*) -> (s, "Production should contain a {cons(\"Label\")} attribute used as a label in the abstract syntax")
+    where
+      <collect(?sort(_) + ?iter-star(_) + ?iter-plus(_) + ?iter-star-sep(_, _) + ?iter-plus-sep(_, _))> s;
+      <not(one(?term(cons(_))))> a*
+
+rules
+
+  generate-pp-rules:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    where
+      filename  := <guarantee-extension(|"pp")> path;
+      selected' := <add-context; sdf-desugar> (selected, ast, project-path);
+      result    := <ppgenerate; pp-pp-table> selected'
+    <+
+      fatal-err(|"Could not generate pretty printer rules for this selection.\n Only productions with {cons()} attributes are supported.")
+  
+  generate-rtg:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    where
+      filename  := <guarantee-extension(|"pp")> path;
+      selected' := <add-context; sdf-desugar> (selected, ast, project-path);
+      result    := <core-rtg2sig; pp-stratego-string> selected'
+    <+
+      fatal-err(|"Could not generate abstract syntax signatures for this selection.\n Only productions with {cons()} attributes are supported.")
+  
+  add-context =
+    if not(oncetd(?context-free-syntax(_))) then
+      if is-list then
+        !context-free-syntax(<id>)
+      else
+        !context-free-syntax([<id>])
+      end
+    end
+
+rules // External tools not included in the standard libraries
+
+  ppgenerate =
+    <call> ("org.strategoxt.tools.ppgenerate", [<id>])
+
+  core-rtg2sig =
+    <call> ("org.strategoxt.tools.core-rtg2sig", [<id>])
+
+  pp-pp-table =
+    <call> ("org.strategoxt.tools.pp-pp-table", [<id>])
+  
+  sdf-desugar = //@START
+    <call> ("org.strategoxt.tools.sdf-desugar", [<id>] //@END

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,29 @@
+module notrecoverednicely
+
+ entity PublicationList {
+    publications -> Set<Publication>
+
+    buckets <> Set<PublicationBucket>
+
+    function add(pub : Publication) {
+      publications.add(pub);
+    }
+    function insert(val : String, pub : Publication) {
+      for(b : PublicationBucket in buckets) {
+        if(b.key == val) {
+          b.add(pub);
+          b.size := b.size + 1;
+         return;
+        }
+      }
+      buckets.add(PublicationBucket{ publications := x } /*@START @END*/
+    }
+
+    publicationKey -> PublicationKey /*@START @END*/
+
+    function foo() {
+      for(pub : Publication in this.publications) {
+        insert(pub.year, pub);
+      }
+    }
+  }
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app.rec
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app.rec	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app.rec	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,29 @@
+module notrecoverednicely
+
+                         
+                                    
+
+                                     
+
+                                     
+                            
+     
+                                                      
+                                             
+                          
+                     
+                               
+                
+         
+       
+                                                                        
+     
+
+                                                    
+
+                    
+                                                   
+                              
+       
+     
+   
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Java.txt	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,44 @@
+Testsuite: Java
+
+General
+	Number of files: 70
+	Number of evaluated files: 66
+	Number of evaluated regions: 71
+	Score: 9.253731343283581
+
+Performance
+	Average region selection time: 11
+	Maximum region selection time: 175
+	Number of performance critical files: 2
+	Percentage of performance critical files: 2
+	Performance Critical: [Input/Scope/testD4.java, Input/Scope/testE3.java]
+
+Overview
+	EXACT:57
+	EXACT_EXCEPT_ONE:4
+	NEAR_EXACT:2
+	TOO_BIG:0
+	TOO_SMALL:0
+	MIS_DIAGNOSED:0
+	MERGED_REGION:4
+	INTRODUCED_REGION:0
+	WRONG_DATA:0
+	RECOVERY_FAILED:0
+	RECOVERY_FAILED_AS_EXPECTED:0
+	NO_SYNTAX_ERRORS:0
+	NO_EXPECTED_REGION:4
+
+Files
+	EXACT:[Input/SpoofaxExamples/javafragment.java, Input/Scope/testH3.java, Input/Scope/testH4.java, Input/Scope/testF2.java, Input/Scope/testC1.java, Input/Scope/testC3.java, Input/Scope/testK1.java, Input/Scope/testD3.java, Input/Scope/testE2.java, Input/Scope/testJ1.java, Input/Scope/testI2.java, Input/Scope/testI1.java, Input/Scope/testA4.java, Input/Scope/testD1.java, Input/Scope/testFile2.java, Input/Scope/testB5.java, Input/Scope/testK2.java, Input/Scope/testF3.java, Input/Scope/testI6.java, Input/Scope/testFile.java, Input/Scope/testH2.java, Input/Scope/testA5.java, Input/Scope/testB1.java, Input/Scope/testG2.java, Input/Scope/testL1.java, Input/Scope/testC4.java, Input/Scope/testK3.java, Input/Scope/testE1.java, Input/Scope/testH1.java, Input/Scope/testF1.java, Input/Scope/testG3.java, Input/Scope/testC2.java, Input/Scope/testA6.java, Input/Scope/testB4.java, Input/Scope/testB3.java, Input/Scope/testA1.java, Input/Scope/testI5.java, Input/Scope/testJ2.java, Input/Sco!
 pe/testI4.java, Input/Scope/testA3.java, Input/Common/flawedImport.java, Input/Common/flawed_IfBlock.java, Input/Common/unclosedMethod.java, Input/Common/flawedDeclaration.java, Input/Common/doubleClosed_If.java, Input/Common/priorSiblingError.java, Input/Common/unclosedBlockComment.java, Input/Common/currentLineError.java, Input/Common/testFile.java, Input/Common/methodOutsideClass.java, Input/Common/twoSeparatedErrors.java, Input/Common/twoSeparatedErrors.java, Input/Common/morePartsStructureError.java, Input/Common/previousLineError.java, Input/Common/flawedMethodHeader.java, Input/Common/unclosedString.java, Input/Common/unclosed_If.java]
+	EXACT_EXCEPT_ONE:[Input/Scope/testD4.java, Input/Scope/testE3.java, Input/Scope/testD2.java, Input/Common/multipleErrors.java]
+	NEAR_EXACT:[Input/Scope/testG1.java, Input/Scope/testI3.java]
+	TOO_BIG:[]
+	TOO_SMALL:[]
+	MIS_DIAGNOSED:[]
+	MERGED_REGION:[Input/Scope/testB6.java, Input/Common/testBridgeFG.java, Input/Common/sloppyCode.java, Input/Common/multipleErrors2.java]
+	INTRODUCED_REGION:[]
+	WRONG_DATA:[]
+	RECOVERY_FAILED:[]
+	RECOVERY_FAILED_AS_EXPECTED:[]
+	NO_SYNTAX_ERRORS:[]
+	NO_EXPECTED_REGION:[Input/Scope/testL2.java, Input/Scope/testA2.java, Input/Scope/testB2.java, Input/Common/unclosedClassBody.java]

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Statistic_Overview.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Statistic_Overview.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/Statistic_Overview.txt	2009-12-15 15:12:38 UTC (rev 20410)
@@ -0,0 +1,32 @@
+Testrun: Languages
+Description: Evaluates the region selection algorithm for different languages
+
+General
+	Number of files: 182
+	Number of evaluated files: 177
+	Number of evaluated regions: 183
+	Score: 8.820224719101123
+
+Performance
+	Average region selection time: 8
+	Maximum region selection time: 175
+	Number of performance critical files: 2
+	Percentage of performance critical files: 1
+	Performance Critical: [Input/Scope/testD4.java, Input/Scope/testE3.java]
+
+                    EXACT          EXACT_EXCEPT_  NEAR_EXACT     TOO_BIG        OTHER          SCORE          
+Java                57             4              2              0              8              9.25373134328  
+WebDSL              0              0              0              0              1              1.0            
+Stratego            3              0              0              1              1              7.75           
+Stratego-Java       68             12             26             0              0              8.66037735849  
+                    -------------  -------------  -------------  -------------  -------------  
+                    128            16             28             1              10             8.82022471910  
+
+                    AVERAGE (ms)   MAX (ms)       CRITICAL       CRITICAL(%)    

(348 diff lines omitted)


From m.dejonge at tudelft.nl  Tue Dec 15 16:13:01 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 15 Dec 2009 15:13:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20411 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912151513.nBFFD1iu012544@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-15 15:13:00 +0000 (Tue, 15 Dec 2009)
New Revision: 20411

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20411&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj

Log:


Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-15 15:12:38 UTC (rev 20410)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-15 15:13:00 UTC (rev 20411)
@@ -82,9 +82,9 @@
     		String region = rs.getHistory().getFragment(aRegion);
   		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
     		currentRegion.addZoomRegion(correctedRegion);
-  		    //System.out.println("************   ZOOM REGION  **********");
-  		    //System.out.println(correctedRegion);
-  		    //System.out.println("********************************************");
+  		    System.out.println("************   ZOOM REGION  **********");
+  		    System.out.println(correctedRegion);
+  		    System.out.println("********************************************");
   	  }
    }
     
@@ -95,9 +95,9 @@
     		String region = rs.getHistory().getFragment(aRegion);
   		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
     		currentRegion.addParentRegion(correctedRegion);
-  		    //System.out.println("************   PARENT REGION  **********");
-  		    //System.out.println(correctedRegion);
-  		    //System.out.println("********************************************");
+  		    System.out.println("************   PARENT REGION  **********");
+  		    System.out.println(correctedRegion);
+  		    System.out.println("********************************************");
   	  }
    }
     
@@ -108,9 +108,9 @@
     		String region = rs.getHistory().getFragment(aRegion);
   		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
     		currentRegion.addPriorRegion(correctedRegion);
-  		    //System.out.println("************   PRIOR REGION  **********");
-  		    //System.out.println(correctedRegion);
-  		    //System.out.println("********************************************");
+  		    System.out.println("************   PRIOR REGION  **********");
+  		    System.out.println(correctedRegion);
+  		    System.out.println("********************************************");
   	  }
    }
     
@@ -123,9 +123,9 @@
     		String region = rs.getHistory().getFragment(aRegion);
   		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
     		currentRegion.addSiblingRegion(correctedRegion);
-  		    //System.out.println("************   SIBLING REGION  **********");
-  		    //System.out.println(correctedRegion);
-  		    //System.out.println("********************************************");
+  		    System.out.println("************   SIBLING REGION  **********");
+  		    System.out.println(correctedRegion);
+  		    System.out.println("********************************************");
   	  }
    }
 



From m.dejonge at tudelft.nl  Tue Dec 15 16:17:40 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 15 Dec 2009 15:17:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20412 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912151517.nBFFHeDL012633@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-15 15:17:40 +0000 (Tue, 15 Dec 2009)
New Revision: 20412

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20412&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java

Log:
-first version of improved region recovery
-all recoveries succeeds for Dryad and SLE set

todo:
-clean up code
-robustness: limit region searching
-updating history after recovery
-handling problematic cases

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	2009-12-15 15:13:00 UTC (rev 20411)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	2009-12-15 15:17:40 UTC (rev 20412)
@@ -101,18 +101,21 @@
             ous = System.out;
 
         long parsingTime = 0;
+        ATerm t=null;
         try {
         	parsingTime = System.currentTimeMillis();
-            ATerm t=sglr.parse(fis);            
-            parsingTime = System.currentTimeMillis() - parsingTime;
-            if(t != null)
-                ous.write(t.toString().getBytes());
+            t=sglr.parse(fis);            
+            parsingTime = System.currentTimeMillis() - parsingTime;            
         } catch(BadTokenException e) {
             System.err.println("Parsing failed : " + e.getMessage());
         } catch(SGLRException e) {
             // Detailed message for other exceptions
             System.err.println("Parsing failed : " + e);
         }
+        if(t != null){            
+            String outputString=t.toString();
+            ous.write(outputString.getBytes());
+        }
         return parsingTime;
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-15 15:13:00 UTC (rev 20411)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-15 15:17:40 UTC (rev 20412)
@@ -59,12 +59,18 @@
         ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
         IndentInfo startLine=IndentInfo.cloneIndentInfo(getHistory().getLine(indexLine));
         for (Integer endSkipIndex : endLocations) {
-            IndentInfo endSkip=IndentInfo.cloneIndentInfo(getHistory().getLine(endSkipIndex));
-            StructureSkipSuggestion skipConstruct=new StructureSkipSuggestion();
-            skipConstruct.setSkipLocations(startLine, endSkip, indexLine, endSkipIndex);            
-            skipSuggestions.add(skipConstruct);
-            addSeparatorIncludingRegion_Forwards(skipSuggestions, skipConstruct);
-            addSeperatorIncludingRegion_Backwards(skipSuggestions, skipConstruct);
+            if (endSkipIndex>indexLine) {
+                IndentInfo endSkip = IndentInfo.cloneIndentInfo(getHistory()
+                        .getLine(endSkipIndex));
+                StructureSkipSuggestion skipConstruct = new StructureSkipSuggestion();
+                skipConstruct.setSkipLocations(startLine, endSkip, indexLine,
+                        endSkipIndex);
+                skipSuggestions.add(skipConstruct);
+                addSeparatorIncludingRegion_Forwards(skipSuggestions,
+                        skipConstruct);
+                addSeperatorIncludingRegion_Backwards(skipSuggestions,
+                        skipConstruct);
+            }
         }        
         return skipSuggestions;
     }    
@@ -102,10 +108,23 @@
     }
     
     public ArrayList<StructureSkipSuggestion> getParentSkipSuggestions() throws IOException{
+        ArrayList<StructureSkipSuggestion> parentSkips = new ArrayList<StructureSkipSuggestion>();
         int errorLineIndex=failureIndex;
-        IndentInfo startLine = getHistory().getLine(errorLineIndex);
-        int startSkipIndex=findParentBegin(errorLineIndex);
-        return selectRegion(startSkipIndex);
+        for (int i = 0; i < 3; i++) {  //TODO: better control structure          
+            int startSkipIndex = findParentBegin(errorLineIndex);
+            ArrayList<StructureSkipSuggestion> skips=selectRegion(startSkipIndex);
+            if(skips.isEmpty()){
+                StructureSkipSuggestion closingSkip=new StructureSkipSuggestion();
+                closingSkip.setSkipLocations(IndentInfo.cloneIndentInfo(getHistory().getLine(startSkipIndex)), IndentInfo.cloneIndentInfo(getHistory().getLine(failureIndex)), startSkipIndex, failureIndex);
+                parentSkips.add(closingSkip);
+            }
+            parentSkips.addAll(skips);
+            if(skips.size()>0)
+                errorLineIndex=skips.get(0).getIndexHistoryStart();
+            else
+                i=50;
+        }
+        return parentSkips;
         /*
         IndentInfo endSkip=findParentEnd(startLine);
         IndentInfo startSkip = IndentInfo.cloneIndentInfo(getHistory().getLine(startSkipIndex));
@@ -145,7 +164,7 @@
         while(indexHistoryLines > 0){
             indexHistoryLines-=1;
             IndentInfo currentLine=getHistory().getLine(indexHistoryLines);
-            int indentSkipPosition=currentLine.getIndentValue();
+            int indentSkipPosition=separatorIndent(currentLine); //currentLine.getIndentValue();
             indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
             if (shift==indentShift.DEDENT){
                 if(isScopeOpeningLine(indexHistoryLines))
@@ -245,10 +264,13 @@
                 sawChilds=true; //TODO: lastChild instead of previous struct?
                 break;
             case SAME_INDENT: 
-                if(!sawChilds && isScopeClosingLine(indexHistoryLines))
+                if(!sawChilds && isScopeClosingLine(indexHistoryLines)){
+                    if(closingSeen)
+                        return indexHistoryLines+1;
                     closingSeen=true;
+                }
                 else
-                    if(closingSeen && isScopeOpeningLine(indexHistoryLines))
+                    if(sawChilds && isScopeOpeningLine(indexHistoryLines))
                         openingSeen=true;
                     else
                         if(!(ignoreSeps && isSeparatorStartingLine(indexHistoryLines)))
@@ -329,10 +351,13 @@
     }
 
     private String readLine(int index) throws IOException {
-        while(getHistory().getIndexLastLine()<=index)
+        while(getHistory().getIndexLastLine()<=index && myParser.currentToken!=SGLR.EOF)
             getHistory().readRecoverToken(myParser);
-        IndentInfo line=getHistory().getLine(index);
-        return readLine(line);
+        if(index<=getHistory().getIndexLastLine()){
+            IndentInfo line=getHistory().getLine(index);
+            return readLine(line);
+        }
+        return "";
     }
 
     private String readLine(IndentInfo line) {
@@ -371,8 +396,10 @@
                 if(r.getAdditionalTokens().length==0)
                 nextRegions.add(r);
             }            
-            if(!currRegions.isEmpty())                
+            if(!currRegions.isEmpty()){
+                System.out.println(currRegions.get(0).getIndexHistoryStart()+" => "+ currRegions.get(0).getIndexHistoryEnd());
                 currRegions=selectRegion(currRegions.get(0).getIndexHistoryEnd(), currRegions.get(0).getEndSkip());
+            }
         }while (i<10 && !currRegions.isEmpty());
         return nextRegions;
     }
@@ -579,7 +606,7 @@
             isSecondLine=false;
             indexNextLine=skipLine(indexNextLine);            
         }
-        endLocations.add(indexNextLine); //EOF
+        endLocations.add(getHistory().getIndexLastLine()); //EOF
         return endLocations;
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2009-12-15 15:13:00 UTC (rev 20411)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2009-12-15 15:17:40 UTC (rev 20412)
@@ -45,7 +45,7 @@
      
     public void reset(){
         newLinePoints.clear();
-        recoverTokenStream = new char[200];
+        recoverTokenStream = new char[5000];
         recoverTokenCount = 0;
         indexConstruct=0;
         tokenIndex=0;
@@ -58,14 +58,17 @@
     /*
      * Set current token of parser based on recover tokens or read from new tokens
      */
-    public void readRecoverToken(SGLR myParser) throws IOException{        
-        if (hasFinishedRecoverTokens()) {
-            myParser.readNextToken();                
-            indentHandler.updateIndentation(myParser.currentToken);
-            keepToken((char)myParser.currentToken);
-            
-            if(indentHandler.lineMarginEnded())
-                keepNewLinePoint(myParser, true);
+    public void readRecoverToken(SGLR myParser) throws IOException{  
+        if (hasFinishedRecoverTokens()) {             
+            if(myParser.currentToken!=SGLR.EOF){                
+                if(getIndexLastToken()>0 && recoverTokenStream[getIndexLastToken()]!=SGLR.EOF){
+                    myParser.readNextToken();
+                    indentHandler.updateIndentation(myParser.currentToken);
+                    keepToken((char)myParser.currentToken);   
+                    if(indentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF)
+                        keepNewLinePoint(myParser, true);
+                }
+            }
         }
         myParser.currentToken = recoverTokenStream[tokenIndex];
         tokenIndex++;
@@ -87,7 +90,7 @@
         indentHandler.updateIndentation(myParser.currentToken);
         keepToken((char)myParser.currentToken);
         tokenIndex++;
-        if(indentHandler.lineMarginEnded())
+        if(indentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF)
             keepNewLinePoint(myParser, false);
     }
     
@@ -98,6 +101,8 @@
     }
 
     private void keepToken(char currentToken) {
+        if(getIndexLastToken()>0 && recoverTokenStream[getIndexLastToken()]==SGLR.EOF)
+            return;
         recoverTokenStream[recoverTokenCount++] = currentToken;         
         if (recoverTokenCount == recoverTokenStream.length) {
             char[] copy = recoverTokenStream;
@@ -192,6 +197,18 @@
         return fragment;
     }
     
+    public String readLine(int StartTok) {
+        String fragment="";
+        int pos=StartTok;
+        char currentTok=' ';
+        while(currentTok!='\n' && currentTok!=SGLR.EOF && pos<recoverTokenCount) {            
+            currentTok=recoverTokenStream[pos];
+            fragment+= currentTok;
+            pos++;
+        }        
+        return fragment;
+    }
+    
     /*
      * current construct in navigation
      */

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-15 15:13:00 UTC (rev 20411)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-15 15:17:40 UTC (rev 20412)
@@ -183,9 +183,11 @@
     
     private void tryParsing(String fragment, boolean asLayout) throws IOException{
         // Skip any leading whitespace, since we already parsed up to that point
-        int indexFragment = findFirstNonLayoutToken(fragment);        
+        int indexFragment = findFirstNonLayoutToken(fragment);      
+        //System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
         while(indexFragment<fragment.length() && mySGLR.activeStacks.size()>0) {                        
             mySGLR.currentToken=fragment.charAt(indexFragment);
+            //System.out.print((char)mySGLR.currentToken);
             //Tools.debug((char)mySGLR.currentToken);
             indexFragment++;
             if(!asLayout)
@@ -198,9 +200,10 @@
     public void parseRemainingTokens() throws IOException{
         //Tools.debug("REMAINING: ");
         getHistory().setTokenIndex(skipRecovery.getEndSkipPosition());
-        while(!getHistory().hasFinishedRecoverTokens() && mySGLR.activeStacks.size()>0){        
+        //System.out.println("@@@@@@@@@@@@@");
+        while(!getHistory().hasFinishedRecoverTokens() && mySGLR.activeStacks.size()>0 && mySGLR.acceptingStack==null){        
             getHistory().readRecoverToken(mySGLR);
-            //System.out.println("@@@@@@@@@@ "+(char)mySGLR.currentToken);
+            //System.out.print((char)mySGLR.currentToken);
             mySGLR.doParseStep();            
         }        
     }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-12-15 15:13:00 UTC (rev 20411)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-12-15 15:17:40 UTC (rev 20412)
@@ -10,11 +10,12 @@
 public class RegionRecovery {
 
     private SGLR myParser;
-    StructureSkipper regionSelector;
+    IStructureSkipper regionSelector;
+    IStructureSkipper newRegionSelector;
     private StructureSkipSuggestion erroneousRegion;
     private boolean hasFoundErroneousRegion;
     private int errorDetectionLocation;
-    private static int NR_OF_LINES_TILL_SUCCESS=2;
+    private static int NR_OF_LINES_TILL_SUCCESS=3;
     private boolean useDebugMode;
     
     /**
@@ -45,6 +46,7 @@
     public RegionRecovery(SGLR sglr){
         myParser=sglr;
         regionSelector = new StructureSkipper(sglr);
+        newRegionSelector=new NewStructureSkipper(sglr);
     }
     
     private ParserHistory getHistory() {
@@ -72,6 +74,11 @@
         int tokIndexLine=getHistory().getTokensSeenStartLine(getStartSkipPosition().getTokensSeen());
         return getHistory().getFragment(tokIndexLine, getEndSkipPosition()-1);
     }
+    
+    public String getErrorFragmentPlusSeparator() {
+        int tokIndexLine=erroneousRegion.getStartSkip().getTokensSeen()+erroneousRegion.getAdditionalTokens().length; //getHistory().getTokensSeenStartLine(getStartSkipPosition().getTokensSeen());
+        return getHistory().getFragment(tokIndexLine, getEndSkipPosition()-1);
+    }
 
     /**
      * Returns location where erroneous region starts, including left margin
@@ -89,54 +96,59 @@
      * Selects erroneous region based on layout 
      */
     public boolean selectErroneousFragment() throws IOException { 
+        newRegionSelector=new NewStructureSkipper(myParser);
         regionSelector.clear();
         regionSelector.setFailureIndex(getHistory().getIndexLastLine());
+        newRegionSelector.setFailureIndex(getHistory().getIndexLastLine());
         errorDetectionLocation=getHistory().getIndexLastToken();
         hasFoundErroneousRegion=false;         
-        ArrayList<StructureSkipSuggestion> prevRegions=regionSelector.getPreviousSkipSuggestions();
+        //ArrayList<StructureSkipSuggestion> prevRegions=regionSelector.getPreviousSkipSuggestions();
+        ArrayList<StructureSkipSuggestion> prevRegions=newRegionSelector.getPreviousSkipSuggestions();
         logRecoverInfo("PREVIOUS REGION");        
         if(trySetErroneousRegion(prevRegions)){
-            ArrayList<StructureSkipSuggestion> decomposedRegions=regionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
+            ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
             boolean findSmallerPart= trySetErroneousRegion(decomposedRegions);
             if(findSmallerPart){
-                ArrayList<StructureSkipSuggestion> childRegions=regionSelector.getPickErroneousChild(erroneousRegion);
-                trySetErroneousRegion(childRegions);
+               // ArrayList<StructureSkipSuggestion> childRegions=regionSelector.getPickErroneousChild(erroneousRegion);
+               // trySetErroneousRegion(childRegions);
             }
             return true;
         }
-        ArrayList<StructureSkipSuggestion> currentRegions=regionSelector.getCurrentSkipSuggestions();
+        //ArrayList<StructureSkipSuggestion> currentRegions=regionSelector.getCurrentSkipSuggestions();
+        ArrayList<StructureSkipSuggestion> currentRegions=newRegionSelector.getCurrentSkipSuggestions();
         logRecoverInfo("CURRENT REGION");
         if(trySetErroneousRegion(currentRegions)){            
             return true;
         }
         logRecoverInfo("PRIOR REGIONS");
-        ArrayList<StructureSkipSuggestion> priorRegions=regionSelector.getPriorSkipSuggestions();
+        ArrayList<StructureSkipSuggestion> priorRegions=newRegionSelector.getPriorSkipSuggestions();
         if(trySetErroneousRegion(priorRegions)){
-            ArrayList<StructureSkipSuggestion> decomposedRegions=regionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
+            ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
             boolean findSmallerPart=trySetErroneousRegion(decomposedRegions);
             if(findSmallerPart){
-                ArrayList<StructureSkipSuggestion> childRegions=regionSelector.getPickErroneousChild(erroneousRegion);
+                ArrayList<StructureSkipSuggestion> childRegions=newRegionSelector.getPickErroneousChild(erroneousRegion);
                 trySetErroneousRegion(childRegions);
             }
             return true;
         }
         logRecoverInfo("FW-SIB REGIONS");
-        ArrayList<StructureSkipSuggestion> siblingForWardRegions=regionSelector.getSibblingForwardSuggestions();
+        ArrayList<StructureSkipSuggestion> siblingForWardRegions=newRegionSelector.getSibblingForwardSuggestions();
         if(trySetErroneousRegion(siblingForWardRegions)){            
             return true;
         }
         logRecoverInfo("BW-SIB REGIONS");
-        ArrayList<StructureSkipSuggestion> siblingBackWardRegions=regionSelector.getSibblingBackwardSuggestions();
+        ArrayList<StructureSkipSuggestion> siblingBackWardRegions=newRegionSelector.getSibblingBackwardSuggestions();
         if(trySetErroneousRegion(siblingBackWardRegions)){            
             return true;
         }
         logRecoverInfo("SURROUNDING-SIB REGIONS");
-        ArrayList<StructureSkipSuggestion> siblingSurroundingRegions=regionSelector.getSibblingSurroundingSuggestions();
+        //System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
+        ArrayList<StructureSkipSuggestion> siblingSurroundingRegions=newRegionSelector.getSibblingSurroundingSuggestions();
         if(trySetErroneousRegion(siblingSurroundingRegions)){            
             return true;
         }
         logRecoverInfo("PARENT REGION");
-        ArrayList<StructureSkipSuggestion> parentRegion=regionSelector.getParentSkipSuggestions();
+        ArrayList<StructureSkipSuggestion> parentRegion=newRegionSelector.getParentSkipSuggestions();
         if(trySetErroneousRegion(parentRegion)){            
             return true;
         }        
@@ -173,21 +185,40 @@
     }
 
     private void testRegion(StructureSkipSuggestion aSkip) throws IOException {
+       // System.out.println("MMMMMMMMMMM");
+        //System.out.println(getInputFragment(aSkip));
         logRecoverInfoBlock(getInputFragment(aSkip));           
         IndentInfo endPos=aSkip.getEndSkip();
         getHistory().setTokenIndex(endPos.getTokensSeen());
         myParser.activeStacks.clear();
         myParser.acceptingStack=null;
-        myParser.activeStacks.addAll(endPos.getStackNodes());
+        myParser.activeStacks.addAll(endPos.getStackNodes());        
+        for (char aChar : aSkip.getAdditionalTokens()) {
+            myParser.currentToken=aChar;
+           // System.out.print((char)aChar);
+            myParser.doParseStep();
+        }
+        if(aSkip.getAdditionalTokens().length>0){
+            //System.out.println("$$ skip additional characters $$");
+            aSkip.getStartSkip().fillStackNodes(myParser.activeStacks);
+            aSkip.getStartSkip().setTokensSeen(aSkip.getStartSkip().getTokensSeen() + aSkip.getAdditionalTokens().length);
+            aSkip.setAdditionalTokens(new char[0]);
+        }
         int nrOfParsedLines=0;
         logRecoverInfo("CONTINUE PARSING: ");
+        //System.out.println("CONTINUE PARSING: ");
+        IndentationHandler indentHandler = new IndentationHandler();
+        indentHandler.setInLeftMargin(false);
         while((myParser.activeStacks.size() > 0 && nrOfParsedLines<NR_OF_LINES_TILL_SUCCESS) || !getHistory().hasFinishedRecoverTokens()) {                       
             getHistory().readRecoverToken(myParser); 
+            indentHandler.updateIndentation(myParser.currentToken);
+           // System.out.print((char)myParser.currentToken);
             logRecoverInfo((char)myParser.currentToken);            
             myParser.doParseStep();
-            if(getHistory().getTokenIndex()>errorDetectionLocation && myParser.currentToken=='\n')
+            if(getHistory().getTokenIndex()>errorDetectionLocation && indentHandler.lineMarginEnded())
                 nrOfParsedLines++;
         }
+        return;
     }
 
     public String getInputFragment(StructureSkipSuggestion aSkip) {



From R.B.Vermaas at tudelft.nl  Wed Dec 16 09:18:42 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 16 Dec 2009 08:18:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20413 - rob -
	hydra/strategoxt
Message-ID: <200912160818.nBG8IgmS027247@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-12-16 08:18:42 +0000 (Wed, 16 Dec 2009)
New Revision: 20413

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20413&view=rev

Modified:
   hydra/strategoxt/packages.nix

Log:
strategoxt.jar in build-products for strc-java

Changes:

Modified: hydra/strategoxt/packages.nix
===================================================================
--- hydra/strategoxt/packages.nix	2009-12-15 15:17:40 UTC (rev 20412)
+++ hydra/strategoxt/packages.nix	2009-12-16 08:18:42 UTC (rev 20413)
@@ -426,6 +426,13 @@
 
       rpmBuildSupported = true;
       rpmRequires = requires ++ [jdk];
+
+      customEnv = {
+        postInstall = '' 
+          ensureDir $out/nix-support
+          echo "file jar $out/share/strc-java/strategoxt.jar" >> $out/nix-support/hydra-build-products
+        '';
+      };
     };
 
   /**



From L.C.L.Kats at tudelft.nl  Wed Dec 16 09:51:40 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 08:51:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20414 - LennartKats -
	in spoofax-imp/trunk: . org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.aterm/.externalToolBuilders
	org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.editors.editorservice/.externalToolBuilders
	org.strategoxt.imp.editors.sdf
	org.strategoxt.imp.editors.sdf/.externalToolBuilders
	org.strategoxt.imp.editors.stratego
	org.strategoxt.imp.editors.stratego/.externalToolBuilders
	org.strategoxt.imp.feature org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/sdf2imp/util
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	org.strategoxt.imp.updatesite org.strategoxt.imp.updatesite/plugins
Message-ID: <200912160851.nBG8peZH027690@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 08:51:39 +0000 (Wed, 16 Dec 2009)
New Revision: 20414

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20414&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.common.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.common.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.common.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.common.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/lpg.runtime_2.0.16.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.lpg.metatooling_0.1.79.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.lpg.runtime_0.1.79.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.lpg_0.1.79.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.metatooling_0.1.79.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.preferences_0.1.79.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.prefspecs_0.1.79.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.presentation_0.1.1.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.runtime_0.1.88.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.smapi_0.1.86.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.smapifier_0.1.86.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.eclipse.imp.xform_0.1.87.jar
Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-folding-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-outliner-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
- Split up build.xml for projects into build.main.xml and build.common.xml (turns out Eclipse overwrites and deletes files named build.xml when deploying plugins)
- Updated build files for built-in editors

Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-12-16 08:18:42 UTC (rev 20413)
+++ spoofax-imp/trunk/Makefile	2009-12-16 08:51:39 UTC (rev 20414)
@@ -2,10 +2,10 @@
 
 all : org.eclipse.imp/org.eclipse.imp.runtime.patch
 	$(MAKE) -C org.strategoxt.imp.generator all
-	(cd org.strategoxt.imp.editors.editorservice && ant -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def $(DEFS))
-	(cd org.strategoxt.imp.editors.sdf && ant -Dexternaldef=syntax/SDF.def $(DEFS))
-	(cd org.strategoxt.imp.editors.stratego && ant -Dexternaldef=syntax/Stratego-Sugar.def $(DEFS))
-	(cd org.strategoxt.imp.editors.aterm && ant -Dexternaldef=syntax/ATerm.def $(DEFS))
+	(cd org.strategoxt.imp.editors.editorservice && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar ant -f build.main.xml -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def $(DEFS))
+	(cd org.strategoxt.imp.editors.sdf && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar ant -f build.main.xml -Dexternaldef=syntax/SDF.def $(DEFS))
+	(cd org.strategoxt.imp.editors.stratego && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar ant -f build.main.xml -Dexternaldef=syntax/Stratego-Sugar.def $(DEFS))
+	(cd org.strategoxt.imp.editors.aterm && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar ant -f build.main.xml -Dexternaldef=syntax/ATerm.def $(DEFS))
 
 check : all
 	$(MAKE) -C org.strategoxt.imp.generator check

Copied: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.main.xml.launch (from rev 20412, spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.main.xml.launch	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.main.xml.launch	2009-12-16 08:51:39 UTC (rev 20414)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/ATerm-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/ATerm-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/ATerm-Folding.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&!
 lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/ATerm-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/ATerm-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/ATerm-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.strategoxt.imp.editors.aterm/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.editors.aterm"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.aterm/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.editors.aterm}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.main.xml.launch
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	2009-12-16 08:18:42 UTC (rev 20413)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	2009-12-16 08:51:39 UTC (rev 20414)
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
-<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
-<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-Folding.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=!
 &quot;/ATerm/editor/ATerm-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/ATerm-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/ATerm/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
-<listEntry value="/ATerm/build.xml"/>
-</listAttribute>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
-<listEntry value="1"/>
-</listAttribute>
-<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
-<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
-<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
-<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
-<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
-</listAttribute>
-<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
-<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="ATerm"/>
-<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/ATerm/build.xml}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/ATerm}"/>
-<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
-</launchConfiguration>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.project
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.project	2009-12-16 08:18:42 UTC (rev 20413)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.project	2009-12-16 08:51:39 UTC (rev 20414)
@@ -10,7 +10,7 @@
 			<arguments>
 				<dictionary>
 					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/ATerm build.xml.launch</value>
+					<value>&lt;project&gt;/.externalToolBuilders/ATerm build.main.xml.launch</value>
 				</dictionary>
 			</arguments>
 		</buildCommand>
@@ -34,4 +34,4 @@
         <nature>org.eclipse.pde.PluginNature</nature>
         <nature>org.eclipse.jdt.core.javanature</nature>
       </natures>
-    </projectDescription>
\ No newline at end of file
+    </projectDescription>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.common.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.common.xml	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.common.xml	2009-12-16 08:51:39 UTC (rev 20414)
@@ -0,0 +1,275 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="common">
+    
+        <target name="spoofaximp" depends="stratego.ctree,sdf2table,sdf2imp"/>
+    
+        <!-- Initialization -->
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <fail if="externaljar" unless="externaljarflags"/>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files">
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
+            <java classname="start" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
+            <java classname="start" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
+            <java classname="start" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="start" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="start" failonerror="false">
+                <arg value="org.strategoxt.tools.pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp"/>
+            </java>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig,ppgen">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${include}"/>
+                <param name="build.stratego.extraargs" value="-F --library"/>
+                <param name="build.stratego.extension" value="ctree"/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,ppgen">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
+                <param name="build.stratego.extraargs" value="-la java-front"/>
+                <param name="build.stratego.extension" value="java"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="-clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+            </java>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Copied: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.main.xml (from rev 20412, spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.main.xml	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.main.xml	2009-12-16 08:51:39 UTC (rev 20414)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="ATerm" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="ATerm"/>
+        <property name="esvmodule" value="ATerm"/>
+        <property name="strmodule" value="aterm"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="--library
+                        -I &quot;${trans}&quot; -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- External .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.common.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp"/>
+    </project>
\ No newline at end of file


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.main.xml
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-12-16 08:18:42 UTC (rev 20413)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-12-16 08:51:39 UTC (rev 20414)
@@ -1,312 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
-<project name="ATerm" default="all">
-        
-        <!-- Key input modules -->
-        <property name="sdfmodule" value="ATerm"/>
-        <property name="esvmodule" value="ATerm"/>
-        <property name="strmodule" value="aterm"/>
-        
-        <!-- Standard build file without ppgen dependency follows -->
-    
-        <!-- Project directories -->
-        <property name="trans" location="trans"/>
-        <property name="src-gen" location="editor/java"/>
-        <property name="syntax" location="syntax"/>
-        <property name="include" location="include"/>
-        <property name="lib" location="lib"/>
-        <property name="build" location="bin"/>
-        <property name="dist" location="bin/dist"/>
-        
-        <!-- External .def and .jar locations
-        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
-        <property name="externaljar" value="../lib.jar"/>
-        <property name="externaljarflags" value="-la org.lib"/>
-        -->
-    
-        <!--
-            Environment configuration:
-            Spoofax/IMP includes native versions of the SDF executables (build.strategoxt.sdf),
-            and Java alternatives for the Stratego alternatives (build.strategoxt.stratego)
-        -->
-        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
-            <isset property="eclipse.spoofaximp.nativeprefix"/>
-        </condition>
-        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
-        <property name="build.sdf.imports" value=""/>
-        <property name="build.stratego.args" value="--library
-                        -I &quot;${trans}&quot;
-                        -I &quot;${basedir}&quot;
-                        -la stratego-lib -la stratego-sglr
-                        -la stratego-gpp -la stratego-xtc
-                        -la stratego-aterm"/>
-        <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
-        
-        <!-- Initialization -->
-        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
-        <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
-            <isset property="externaldef"/>
-        </condition>
-        <condition property="externaljarimport" value=":${externaljar}" else="">
-            <isset property="externaljar"/>
-        </condition>
-        <fail if="externaljar" unless="externaljarflags"/>
-        <condition property="externaljarflags" value="${externaljarflags}" else="">
-            <isset property="externaljarflags"/>
-        </condition>
-        <mkdir dir="${build}"/>
-        <mkdir dir="${src-gen}"/>
-        <mkdir dir="${dist}"/>
-        <mkdir dir="${include}"/>
-        <mkdir dir="${lib}"/>
-    
-        <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
-
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
-        
-        <target name="sdf2imp.eclipse" if="eclipse.running">
-            <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
-            <touch file="${include}/${esvmodule}.packed.esv"/>
-            <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
-        </target>
-        
-        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
-            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
-                <arg value="-i"/>
-                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
-                <arg value="-p"/>
-                <arg value="${include}/${sdfmodule}.tbl"/>
-            </java>
-        </target>
-    
-        <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
-                <arg value="-i"/>
-                <srcfile/>
-                <arg value="-o"/>
-                <targetfile/>
-                <arg value="-m"/>
-                <arg value="${sdfmodule}"/>
-                
-                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
-                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
-            </apply>
-        </target>
-        
-        <target name="make-permissive" depends="pack-sdf,copy-sdf">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.def"/>
-                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
-            <antcall target="make-permissive.helper"/>
-        </target>
-    
-        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="utils/make_permissive.jar:utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}-Permissive.def"/>
-                <arg line="--optimize on"/>
-            </java>
-        </target>
-
-        <target name="utils-files">
-            <mkdir dir="utils"/>
-            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils"/>
-            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar"         todir="utils"/>
-            <copy file="${eclipse.spoofaximp.strategojar}"              todir="utils"/>
-        </target>
-    
-        <target name="pack-sdf" unless="externaldef">
-            <dependset>
-                <srcfileset dir="${syntax}">
-                    <include name="**/*.sdf"/>
-                </srcfileset>
-                <targetfileset file="${include}/${sdfmodule}.def"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
-            <antcall target="pack-sdf.helper"/>
-        </target>
-    
-        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
-            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
-                <arg value="org.strategoxt.tools.main-pack-sdf"/>
-                <arg value="-i"/>
-                <arg value="${syntax}/${sdfmodule}.sdf"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-I"/>
-                <arg value="${trans}"/>
-                <arg value="-I"/>
-                <arg value="${lib}"/>
-                <arg line="${build.sdf.imports}"/>
-            </java>
-        </target>
-    
-        <target name="copy-sdf" if="externaldef">
-            <copy file="${externaldef}" todir="${include}" preservelastmodified="true"/>
-        </target>
-    
-        <target name="copy-jar" if="externaljar">
-            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
-        </target>
-    
-        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.rtg"/>
-                <targetfileset file="${include}/${sdfmodule}.str"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
-            <antcall target="rtg2sig.helper"/>
-        </target>
-    
-        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
-            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
-                <arg value="org.strategoxt.tools.main-rtg2sig"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.rtg"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.str"/>
-                <arg value="--module"/>
-                <arg value="${sdfmodule}"/>
-            </java>
-        </target>
-        
-        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.def"/>
-                <targetfileset file="${include}/${sdfmodule}.rtg"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
-            <antcall target="sdf2rtg.helper"/>
-        </target>
-    
-        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
-            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
-                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-m"/>
-                <arg value="${sdfmodule}"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.rtg"/>
-                <arg value="--ignore-missing-cons"/>
-                <arg value="-Xnativepath"/>
-                <arg value="${build.strategoxt.sdf}"/>
-            </java>
-        </target>
-        
-        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.def"/>
-                <targetfileset file="${include}/${sdfmodule}.pp"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
-            <antcall target="ppgen.helper"/>
-        </target>
-    
-        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
-            <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
-                <arg value="org.strategoxt.tools.main-ppgen"/>
-                <arg value="-i"/>
-                <arg value="${sdfmodule}.def"/>
-                <arg value="-o"/>
-                <arg value="${sdfmodule}.pp"/>
-            </java>
-        </target>
-    
-        <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree" depends="rtg2sig">
-            <dependset>
-                <srcfileset dir="${basedir}">
-                    <include name="**/*.str"/>
-                </srcfileset>
-                <targetfileset file="${include}/${strmodule}.ctree"/>
-            </dependset>
-            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
-            <antcall target="copy-jar"/>
-            <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${include}"/>
-                <param name="build.stratego.extraargs" value="-F --library"/>
-                <param name="build.stratego.extension" value="ctree"/>
-                <param name="build.stratego.compiler" value="strc"/>
-            </antcall>
-        </target>
-    
-        <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig">
-            <dependset>
-                <srcfileset dir="${basedir}">
-                    <include name="**/*.str"/>
-                </srcfileset>
-                <targetfileset file="${src-gen}/trans/Main.java"/>
-            </dependset>
-            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
-            <antcall target="copy-jar"/>
-            <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
-                <param name="build.stratego.extraargs" value="-la java-front"/>
-                <param name="build.stratego.extension" value="java"/>
-            </antcall>
-            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
-            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
-        </target>
-            
-        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
-            <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
-                <jvmarg line="${build.jvmargs}"/>
-                <arg value="-i"/>
-                <arg value="${trans}/${strmodule}.str"/>
-                <arg value="-o"/>
-                <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
-                <arg value="-p"/>
-                <arg value="trans"/>
-                <arg value="-clean"/>
-                <arg line="${build.stratego.args}"/>
-                <arg line="${build.stratego.extraargs}"/>
-                <arg line="${externaljarflags}"/>
-                <arg line="${externaldefimport}"/>
-            </java>
-            <mkdir dir="${build}/trans"/>
-        </target>
-                
-        <!-- Stratego to C-based native executable -->
-        <target name="stratego.c">
-            <antcall target="stratego.c.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/include"/>
-                <param name="build.stratego.extraargs" value=""/>
-                <param name="build.stratego.extension" value=""/>
-                <param name="build.stratego.compiler" value="strc"/>
-            </antcall>
-        </target>
-        
-        <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
-            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
-                <arg value="-i"/>
-                <srcfile/>
-                <arg value="-o"/>
-                <targetfile/>
-                <arg line="${build.stratego.args}"/>
-                <arg line="${build.stratego.extraargs}"/>
-                <arg line="${externaldefimport}"/>
-                
-                <fileset file="${trans}/${strmodule}.str"/>
-                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
-            </apply>
-        </target>
-        
-        <target name="clean" description="clean up">
-            <delete dir="${build}"/>
-            <delete file="${src-gen}/trans/Main.java"/>
-        </target>
-    </project>

Copied: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.main.xml.launch (from rev 20412, spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.main.xml.launch	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.main.xml.launch	2009-12-16 08:51:39 UTC (rev 20414)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Folding.g!
 enerated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/EditorService-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.editorservice/utils&quot;!
  type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}

+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.strategoxt.imp.editors.editorservice/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.editors.editorservice"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.editorservice/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.editors.editorservice}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.main.xml.launch
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch	2009-12-16 08:18:42 UTC (rev 20413)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch	2009-12-16 08:51:39 UTC (rev 20414)
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
-<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
-<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Folding.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclip!
 se.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/EditorService-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/EditorService/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
-<listEntry value="/EditorService/build.xml"/>
-</listAttribute>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
-<listEntry value="1"/>
-</listAttribute>
-<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
-<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
-<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
-<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
-<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
-</listAttribute>
-<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
-<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="EditorService"/>
-<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/EditorService/build.xml}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/EditorService}"/>
-<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
-</launchConfiguration>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.project
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.project	2009-12-16 08:18:42 UTC (rev 20413)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.project	2009-12-16 08:51:39 UTC (rev 20414)
@@ -12,7 +12,7 @@
 			<arguments>
 				<dictionary>
 					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/EditorService build.xml.launch</value>
+					<value>&lt;project&gt;/.externalToolBuilders/EditorService build.main.xml.launch</value>
 				</dictionary>
 			</arguments>
 		</buildCommand>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.common.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.common.xml	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.common.xml	2009-12-16 08:51:39 UTC (rev 20414)
@@ -0,0 +1,275 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="common">
+    
+        <target name="spoofaximp" depends="stratego.ctree,sdf2table,sdf2imp"/>
+    
+        <!-- Initialization -->
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <fail if="externaljar" unless="externaljarflags"/>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files">
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
+            <java classname="start" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
+            <java classname="start" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>

(2213 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Wed Dec 16 10:07:44 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 09:07:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20415 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr
Message-ID: <200912160907.nBG97iRO028103@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 09:07:44 +0000 (Wed, 16 Dec 2009)
New Revision: 20415

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20415&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/.project

Log:
Re-added the Java builder to org.spoofax.jsglr (hopefully this doesn't mess up AJDT builds)

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/.project
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/.project	2009-12-16 08:51:39 UTC (rev 20414)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/.project	2009-12-16 09:07:44 UTC (rev 20415)
@@ -11,6 +11,11 @@
 			</arguments>
 		</buildCommand>
 		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
 			<name>org.eclipse.ajdt.core.ajbuilder</name>
 			<arguments>
 			</arguments>



From L.C.L.Kats at tudelft.nl  Wed Dec 16 10:09:24 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 09:09:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20416 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <200912160909.nBG99O5Q028115@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 09:09:24 +0000 (Wed, 16 Dec 2009)
New Revision: 20416

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20416&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java

Log:
JSGLR version bump

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF	2009-12-16 09:07:44 UTC (rev 20415)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF	2009-12-16 09:09:24 UTC (rev 20416)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: Scannerless Generalized LR parser
 Bundle-SymbolicName: org.spoofax.jsglr
-Bundle-Version: 0.2.1.qualifier
+Bundle-Version: 0.2.2.qualifier
 Export-Package: org.spoofax.jsglr
 Bundle-Vendor: Spoofax.org
 Require-Bundle: org.spoofax.aterm,

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-12-16 09:07:44 UTC (rev 20415)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-12-16 09:09:24 UTC (rev 20416)
@@ -28,8 +28,6 @@
     protected static final int NUM_CHARS = 256; 
 
     private static final long serialVersionUID = -3372429249660900093L;
-    
-    private static boolean printedWarning;
 
     private State[] states;
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-16 09:07:44 UTC (rev 20415)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-16 09:09:24 UTC (rev 20416)
@@ -87,7 +87,7 @@
          id="org.spoofax.jsglr"
          download-size="0"
          install-size="0"
-         version="0.2.1.qualifier"
+         version="0.2.2.qualifier"
          unpack="false"/>
 
    <plugin



From L.C.L.Kats at tudelft.nl  Wed Dec 16 11:06:29 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 10:06:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20417 - LennartKats -
	strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr
Message-ID: <200912161006.nBGA6TMd029232@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 10:06:29 +0000 (Wed, 16 Dec 2009)
New Revision: 20417

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20417&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str

Log:
Fixed a parse table loading regression

Changes:

Modified: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str
===================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str	2009-12-16 09:09:24 UTC (rev 20416)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str	2009-12-16 10:06:29 UTC (rev 20417)
@@ -128,7 +128,7 @@
     parse-stream-pt(on-parse-error | tbl, start-symbol, "stream")
     
   parse-stream-pt(on-parse-error | tbl, start-symbol, path) =
-    where(<try(memo-open-parse-table)> tbl => ParseTable(internal-tbl))
+    where(<try(not(?ParseTable(_)); memo-open-parse-table)> tbl => ParseTable(internal-tbl))
     ; ?Stream(stream)
     ; prim("STRSGLR_parse_stream_pt", on-parse-error | stream, internal-tbl, start-symbol, path)
 



From m.dejonge at tudelft.nl  Wed Dec 16 14:02:02 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 16 Dec 2009 13:02:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20418 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios CriticalScenarios/Eof_Failure
	CriticalScenarios/Problematic
	CriticalScenarios/SeparatorProblems History
	History/Languages_15_12_2009 History/Languages_16_12_2009
	Input/Common Input/Dryad Input/Scope Input/SpoofaxExamples
	src/scenariotests
Message-ID: <200912161302.nBGD22gq032308@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-16 13:02:02 +0000 (Wed, 16 Dec 2009)
New Revision: 20418

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20418&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA4.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testB5.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testD2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testD4.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testE3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/unclosedBlockComment.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testF1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_15_12_2009/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Statistic_Overview.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Stratego-Java.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Stratego.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/WebDSL.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/EOF_Failure_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PrevRegion_Java.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java.rec
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app.rec
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages/
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedBlockComment.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break19.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break19.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java

Log:
- some test fixed
- eof problems tested

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA1.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,11 @@
+/* Peak program - Incomplete */
+class C {
+	void m() {
+		if (true) {
+			for (int i; i < 10; i++) { //@START @Z_START
+				if (true) {
+					if (true) {
+						int a;	/* 	} 	} 	} 	*/ //@END @Z_END
+		}
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA3.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,13 @@
+/* Peak program - Incomplete */
+class C {
+	void m() {
+		if (true) { //@START @Z_START
+			for (int i; i < 10; i++) {
+				if (true) {
+					if (true) {
+						int a;
+					}
+				}
+			}	//} //@END @Z_END
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA4.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA4.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testA4.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,12 @@
+/* Peak program - Incomplete */
+class C {
+	void m() {
+		if (true) {
+			for (int i; i < 10; i++) { //@START @Z_START
+				if (true) {
+					if (true) {
+						int a;
+					} 	/*	} 	} 	*/ //@END @Z_END
+		}
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testB5.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testB5.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testB5.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,13 @@
+/* Bumpy road - Incomplete */
+class C {
+	void m() {
+		int a;
+	}
+	void n() {
+		int b;
+	}
+	void o() {
+		int c;
+	}
+	void p() { int d; 	/*}*/ //@START @Z_START @END @Z_END
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testD2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testD2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testD2.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,29 @@
+/* Misinterpreted statements - if - Incomplete */
+class C {
+	void m() {
+		int a;
+		if (true) {
+			int b;
+		}
+	}
+	void n() {
+		int a;
+		if (true) {
+			int b;
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		int c;
+	}
+	void o() {
+		int a;
+		if (true) { //@START @Z_START
+			int b;		//} //@END @Z_END
+		if (true) {
+			int c;
+		}
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testD4.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testD4.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testD4.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,29 @@
+/* Misinterpreted statements - if - Incomplete */
+class C {
+	void m() {
+		int a;
+		if (true) {
+			int b;
+		}
+	}
+	void n() {
+		int a;
+		if (true) {
+			int b;
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		int c;
+	}
+	void o() {
+		int a;
+		if (true) {
+			int b;
+		}
+		if (true) { //@START @Z_START
+			int c;	//	} //@END @Z_END
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testE3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testE3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/Input_Scope_testE3.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,16 @@
+/* Misinterpreted statements - for - Incomplete */
+class C {
+	void m() {
+		for (int i=0;i<10;i++) {
+			int a;
+		}
+	}
+	void n() {
+		for (int i=0;i<10;i++) {
+			for (int j=0;j<10;j++) { //@START @Z_START
+				int a; //} //@END @Z_END
+			int b;
+		}
+		int c;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/unclosedBlockComment.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/unclosedBlockComment.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Eof_Failure/unclosedBlockComment.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,24 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  /* //@START @Z_START //@END @Z_END
+  private int correctMethod2(){
+      int corrLine1;
+      if(true){
+    	  String s = "bla bla bla";
+    	  corrLine2();
+      }
+      corrLine3();     
+      corrLine4();
+  }
+}
+

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java.rec
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java.rec	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testB6.java.rec	2009-12-16 13:02:02 UTC (rev 20418)
@@ -1,15 +0,0 @@
-/* Bumpy road - Double error, extra right brace and missing right brace */
-class C {
-	                   
-		      
-	         
-	          
-		      
-	 
-	                   
-		      
-	            
-	          
-		      
-	 
-}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testF1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testF1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_Scope_testF1.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,24 @@
+/* Several statements in a row - Incomplete */
+class C {
+	int a;
+	int b;
+	public C() {
+		int a;
+	}
+	int c;
+	void m() {
+		int a;
+		if (true) { //@START
+			int a;
+			int b; 	//} @END
+		int b;
+		if (true) {
+			int a;
+		}
+	}
+	int d;
+	void n() {
+		int a;
+	}
+	int e;
+}

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app.rec
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app.rec	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/Input_SpoofaxExamples_erroneous.app.rec	2009-12-16 13:02:02 UTC (rev 20418)
@@ -1,29 +0,0 @@
-module notrecoverednicely
-
-                         
-                                    
-
-                                     
-
-                                     
-                            
-     
-                                                      
-                                             
-                          
-                     
-                               
-                
-         
-       
-                                                                        
-     
-
-                                                    
-
-                    
-                                                   
-                              
-       
-     
-   
\ No newline at end of file

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion.str_java	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeparatorProblems/LastRegion.str_java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -81,7 +81,7 @@
     , !compilation-unit |[ 
          class Foo                 { void required() {} ~Semicolon }
          abstract class $Trait_Bar { void required(); }
-	   ]|
+      ]|
     )) //@END @SEP_END
   
     trait-output-tests = where(<set-config> (Stage(), 4));


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_15_12_2009
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Java.txt	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,44 @@
+Testsuite: Java
+
+General
+	Number of files: 70
+	Number of evaluated files: 66
+	Number of evaluated regions: 71
+	Score: 9.373134328358208
+
+Performance
+	Average region selection time: 24
+	Maximum region selection time: 415
+	Number of performance critical files: 3
+	Percentage of performance critical files: 4
+	Performance Critical: [Input/Scope/testD4.java, Input/Scope/testE3.java, Input/Scope/testC3.java]
+
+Overview
+	EXACT:61
+	EXACT_EXCEPT_ONE:1
+	NEAR_EXACT:1
+	TOO_BIG:0
+	TOO_SMALL:0
+	MIS_DIAGNOSED:0
+	MERGED_REGION:4
+	INTRODUCED_REGION:0
+	WRONG_DATA:0
+	RECOVERY_FAILED:0
+	RECOVERY_FAILED_AS_EXPECTED:0
+	NO_SYNTAX_ERRORS:0
+	NO_EXPECTED_REGION:4
+
+Files
+	EXACT:[Input/SpoofaxExamples/javafragment.java, Input/Scope/testD4.java, Input/Scope/testH3.java, Input/Scope/testE3.java, Input/Scope/testH4.java, Input/Scope/testF2.java, Input/Scope/testC1.java, Input/Scope/testC3.java, Input/Scope/testK1.java, Input/Scope/testD3.java, Input/Scope/testE2.java, Input/Scope/testJ1.java, Input/Scope/testI2.java, Input/Scope/testI1.java, Input/Scope/testA4.java, Input/Scope/testD1.java, Input/Scope/testFile2.java, Input/Scope/testB5.java, Input/Scope/testK2.java, Input/Scope/testF3.java, Input/Scope/testI3.java, Input/Scope/testI6.java, Input/Scope/testFile.java, Input/Scope/testH2.java, Input/Scope/testA5.java, Input/Scope/testB1.java, Input/Scope/testG2.java, Input/Scope/testL1.java, Input/Scope/testC4.java, Input/Scope/testK3.java, Input/Scope/testE1.java, Input/Scope/testH1.java, Input/Scope/testF1.java, Input/Scope/testG3.java, Input/Scope/testC2.java, Input/Scope/testA6.java, Input/Scope/testB4.java, Input/Scope/testB3.java, Input/Sco!
 pe/testA1.java, Input/Scope/testI5.java, Input/Scope/testJ2.java, Input/Scope/testI4.java, Input/Scope/testA3.java, Input/Scope/testD2.java, Input/Common/flawedImport.java, Input/Common/flawed_IfBlock.java, Input/Common/unclosedMethod.java, Input/Common/flawedDeclaration.java, Input/Common/doubleClosed_If.java, Input/Common/priorSiblingError.java, Input/Common/unclosedBlockComment.java, Input/Common/currentLineError.java, Input/Common/testFile.java, Input/Common/methodOutsideClass.java, Input/Common/twoSeparatedErrors.java, Input/Common/twoSeparatedErrors.java, Input/Common/morePartsStructureError.java, Input/Common/previousLineError.java, Input/Common/flawedMethodHeader.java, Input/Common/unclosedString.java, Input/Common/unclosed_If.java]
+	EXACT_EXCEPT_ONE:[Input/Common/multipleErrors.java]
+	NEAR_EXACT:[Input/Scope/testG1.java]
+	TOO_BIG:[]
+	TOO_SMALL:[]
+	MIS_DIAGNOSED:[]
+	MERGED_REGION:[Input/Scope/testB6.java, Input/Common/testBridgeFG.java, Input/Common/sloppyCode.java, Input/Common/multipleErrors2.java]
+	INTRODUCED_REGION:[]
+	WRONG_DATA:[]
+	RECOVERY_FAILED:[]
+	RECOVERY_FAILED_AS_EXPECTED:[]
+	NO_SYNTAX_ERRORS:[]
+	NO_EXPECTED_REGION:[Input/Scope/testL2.java, Input/Scope/testA2.java, Input/Scope/testB2.java, Input/Common/unclosedClassBody.java]

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Statistic_Overview.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Statistic_Overview.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Statistic_Overview.txt	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,32 @@
+Testrun: Languages
+Description: Evaluates the region selection algorithm for different languages
+
+General
+	Number of files: 182
+	Number of evaluated files: 177
+	Number of evaluated regions: 183
+	Score: 9.129213483146067
+
+Performance
+	Average region selection time: 19
+	Maximum region selection time: 415
+	Number of performance critical files: 6
+	Percentage of performance critical files: 3
+	Performance Critical: [Input/Scope/testD4.java, Input/Scope/testE3.java, Input/Scope/testC3.java, Input/Dryad/test-java-traits.break6.str_java, Input/Dryad/test-java-traits.break7.str_java, Input/Dryad/test-java-traits.3.break12.str_java]
+
+                    EXACT          EXACT_EXCEPT_  NEAR_EXACT     TOO_BIG        OTHER          SCORE          
+Java                61             1              1              0              8              9.37313432835  
+WebDSL              0              0              0              0              1              1.0            
+Stratego            4              0              0              0              1              10.0           
+Stratego-Java       74             14             18             0              0              9.01886792452  
+                    -------------  -------------  -------------  -------------  -------------  
+                    139            15             19             0              10             9.12921348314  
+
+                    AVERAGE (ms)   MAX (ms)       CRITICAL       CRITICAL(%)    
+Java                24             415            3              4              
+WebDSL              9              9              0              0              
+Stratego            8              27             0              0              
+Stratego-Java       17             274            3              2              
+                    -------------  -------------  -------------  -------------  
+                    19             415            6              3              
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Stratego-Java.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Stratego-Java.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Stratego-Java.txt	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,44 @@
+Testsuite: Stratego-Java
+
+General
+	Number of files: 106
+	Number of evaluated files: 106
+	Number of evaluated regions: 106
+	Score: 9.018867924528301
+
+Performance
+	Average region selection time: 17
+	Maximum region selection time: 274
+	Number of performance critical files: 3
+	Percentage of performance critical files: 2
+	Performance Critical: [Input/Dryad/test-java-traits.break6.str_java, Input/Dryad/test-java-traits.break7.str_java, Input/Dryad/test-java-traits.3.break12.str_java]
+
+Overview
+	EXACT:74
+	EXACT_EXCEPT_ONE:14
+	NEAR_EXACT:18
+	TOO_BIG:0
+	TOO_SMALL:0
+	MIS_DIAGNOSED:0
+	MERGED_REGION:0
+	INTRODUCED_REGION:0
+	WRONG_DATA:0
+	RECOVERY_FAILED:0
+	RECOVERY_FAILED_AS_EXPECTED:0
+	NO_SYNTAX_ERRORS:0
+	NO_EXPECTED_REGION:0
+
+Files
+	EXACT:[Input/Dryad/test-java-traits.break8.str_java, Input/Dryad/test-java-traits.break20.str_java, Input/Dryad/test-java-traits.break13.str_java, Input/Dryad/test-java-traits.2.break35.str_java, Input/Dryad/test-java-traits.2.break14.str_java, Input/Dryad/test-java-traits.2.break23.str_java, Input/Dryad/test-java-traits.2.break15.str_java, Input/Dryad/test-java-traits.2.break34.str_java, Input/Dryad/test-java-traits.3.break33.str_java, Input/Dryad/test-java-traits.2.break32.str_java, Input/Dryad/test-java-traits.break32.str_java, Input/Dryad/test-java-traits.break27.str_java, Input/Dryad/test-java-traits.3.break13.str_java, Input/Dryad/test-java-traits.2.break4.str_java, Input/Dryad/test-java-traits.2.break24.str_java, Input/Dryad/test-java-traits.break4.str_java, Input/Dryad/test-java-traits.break35.str_java, Input/Dryad/test-java-traits.2.break10.str_java, Input/Dryad/test-java-traits.3.break8.str_java, Input/Dryad/test-java-traits.3.break2.str_java, Input/Dryad/test-ja!
 va-traits.3.break10.str_java, Input/Dryad/test-java-traits.2.break26.str_java, Input/Dryad/test-java-traits.break0.str_java, Input/Dryad/test-java-traits.3.break23.str_java, Input/Dryad/test-java-traits.3.break29.str_java, Input/Dryad/test-java-traits.break6.str_java, Input/Dryad/test-java-traits.2.break28.str_java, Input/Dryad/test-java-traits.break16.str_java, Input/Dryad/test-java-traits.3.break30.str_java, Input/Dryad/test-java-traits.3.break20.str_java, Input/Dryad/test-java-traits.break24.str_java, Input/Dryad/test-java-traits.2.break3.str_java, Input/Dryad/test-java-traits.break12.str_java, Input/Dryad/test-java-traits.3.break3.str_java, Input/Dryad/test-java-traits.break14.str_java, Input/Dryad/test-java-traits.3.break28.str_java, Input/Dryad/test-java-traits.3.break4.str_java, Input/Dryad/test-java-traits.3.break7.str_java, Input/Dryad/test-java-traits.break26.str_java, Input/Dryad/test-java-traits.2.break1.str_java.str_java, Input/Dryad/test-java-traits.break3.str!
 _java, Input/Dryad/test-java-traits.2.break11.str_java, Input/Dryad/
t-java-traits.3.break34.str_java, Input/Dryad/test-java-traits.break28.str_java, Input/Dryad/test-java-traits.break15.str_java, Input/Dryad/test-java-traits.3.break6.str_java, Input/Dryad/test-java-traits.3.break16.str_java, Input/Dryad/test-java-traits.3.break32.str_java, Input/Dryad/test-java-traits.break2.str_java, Input/Dryad/test-java-traits.break10.str_java, Input/Dryad/test-java-traits.break7.str_java, Input/Dryad/test-java-traits.3.break17.str_java, Input/Dryad/test-java-traits.2.break16.str_java, Input/Dryad/test-java-traits.2.break2.str_java, Input/Dryad/test-java-traits.2.break29.str_java, Input/Dryad/test-java-traits.3.break26.str_java, Input/Dryad/test-java-traits.break9.str_java, Input/Dryad/test-java-traits.2.break6.str_java, Input/Dryad/test-java-traits.2.break13.str_java, Input/Dryad/test-java-traits.2.break12.str_java, Input/Dryad/test-java-traits.2.break27.str_java, Input/Dryad/test-java-traits.2.break17.str_java, Input/Dryad/test-java-traits.2.break7.str_!
 java, Input/Dryad/test-java-traits.2.break33.str_java, Input/Dryad/test-java-traits.2.break20.str_java, Input/Dryad/test-java-traits.break17.str_java, Input/Dryad/test-java-traits.2.break1.str_java, Input/Dryad/test-java-traits.2.break8.str_java, Input/Dryad/test-java-traits.3.break35.str_java, Input/Dryad/test-java-traits.3.break1.str_java, Input/Dryad/test-java-traits.break34.str_java, Input/Dryad/test-java-traits.break11.str_java, Input/Dryad/test-java-traits.3.break24.str_java, Input/Dryad/test-java-traits.3.break27.str_java]
+	EXACT_EXCEPT_ONE:[Input/Dryad/test-java-traits.break22.str_java, Input/Dryad/test-java-traits.2.break18.str_java, Input/Dryad/test-java-traits.2.break22.str_java, Input/Dryad/test-java-traits.2.break19.str_java, Input/Dryad/test-java-traits.3.break21.str_java, Input/Dryad/test-java-traits.break25.str_java, Input/Dryad/test-java-traits.2.break21.str_java, Input/Dryad/test-java-traits.3.break22.str_java, Input/Dryad/test-java-traits.3.break19.str_java, Input/Dryad/test-java-traits.2.break25.str_java, Input/Dryad/test-java-traits.break18.str_java, Input/Dryad/test-java-traits.break21.str_java, Input/Dryad/test-java-traits.3.break25.str_java, Input/Dryad/test-java-traits.3.break18.str_java]
+	NEAR_EXACT:[Input/Dryad/test-java-traits.3.break5.str_java, Input/Dryad/test-java-traits.break1.str_java, Input/Dryad/test-java-traits.2.break31.str_java, Input/Dryad/test-java-traits.break19.str_java, Input/Dryad/test-java-traits.3.break11.str_java, Input/Dryad/test-java-traits.3.break31.str_java, Input/Dryad/test-java-traits.break30.str_java, Input/Dryad/test-java-traits.2.break9.str_java, Input/Dryad/test-java-traits.break23.str_java, Input/Dryad/test-java-traits.break29.str_java, Input/Dryad/test-java-traits.3.break9.str_java, Input/Dryad/test-java-traits.3.break15.str_java, Input/Dryad/test-java-traits.2.break5.str_java, Input/Dryad/test-java-traits.break5.str_java, Input/Dryad/test-java-traits.3.break14.str_java, Input/Dryad/test-java-traits.3.break12.str_java, Input/Dryad/test-java-traits.2.break30.str_java, Input/Dryad/test-java-traits.break31.str_java]
+	TOO_BIG:[]
+	TOO_SMALL:[]
+	MIS_DIAGNOSED:[]
+	MERGED_REGION:[]
+	INTRODUCED_REGION:[]
+	WRONG_DATA:[]
+	RECOVERY_FAILED:[]
+	RECOVERY_FAILED_AS_EXPECTED:[]
+	NO_SYNTAX_ERRORS:[]
+	NO_EXPECTED_REGION:[]

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Stratego.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Stratego.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/Stratego.txt	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,44 @@
+Testsuite: Stratego
+
+General
+	Number of files: 5
+	Number of evaluated files: 4
+	Number of evaluated regions: 5
+	Score: 10.0
+
+Performance
+	Average region selection time: 8
+	Maximum region selection time: 27
+	Number of performance critical files: 0
+	Percentage of performance critical files: 0
+	Performance Critical: []
+
+Overview
+	EXACT:4
+	EXACT_EXCEPT_ONE:0
+	NEAR_EXACT:0
+	TOO_BIG:0
+	TOO_SMALL:0
+	MIS_DIAGNOSED:0
+	MERGED_REGION:0
+	INTRODUCED_REGION:0
+	WRONG_DATA:0
+	RECOVERY_FAILED:0
+	RECOVERY_FAILED_AS_EXPECTED:0
+	NO_SYNTAX_ERRORS:1
+	NO_EXPECTED_REGION:0
+
+Files
+	EXACT:[Input/SpoofaxExamples/with1.str, Input/SpoofaxExamples/with2.str, Input/SpoofaxExamples/bad-performance-stratego-sugar.str, Input/SpoofaxExamples/line-before-comment.str]
+	EXACT_EXCEPT_ONE:[]
+	NEAR_EXACT:[]
+	TOO_BIG:[]
+	TOO_SMALL:[]
+	MIS_DIAGNOSED:[]
+	MERGED_REGION:[]
+	INTRODUCED_REGION:[]
+	WRONG_DATA:[]
+	RECOVERY_FAILED:[]
+	RECOVERY_FAILED_AS_EXPECTED:[]
+	NO_SYNTAX_ERRORS:[Input/SpoofaxExamples/foo.str]
+	NO_EXPECTED_REGION:[]

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/WebDSL.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/WebDSL.txt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/Languages_16_12_2009/WebDSL.txt	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,44 @@
+Testsuite: WebDSL
+
+General
+	Number of files: 1
+	Number of evaluated files: 1
+	Number of evaluated regions: 1
+	Score: 1.0
+
+Performance
+	Average region selection time: 9
+	Maximum region selection time: 9
+	Number of performance critical files: 0
+	Percentage of performance critical files: 0
+	Performance Critical: []
+
+Overview
+	EXACT:0
+	EXACT_EXCEPT_ONE:0
+	NEAR_EXACT:0
+	TOO_BIG:0
+	TOO_SMALL:0
+	MIS_DIAGNOSED:0
+	MERGED_REGION:1
+	INTRODUCED_REGION:0
+	WRONG_DATA:0
+	RECOVERY_FAILED:0
+	RECOVERY_FAILED_AS_EXPECTED:0
+	NO_SYNTAX_ERRORS:0
+	NO_EXPECTED_REGION:0
+
+Files
+	EXACT:[]
+	EXACT_EXCEPT_ONE:[]
+	NEAR_EXACT:[]
+	TOO_BIG:[]
+	TOO_SMALL:[]
+	MIS_DIAGNOSED:[]
+	MERGED_REGION:[Input/SpoofaxExamples/erroneous.app]
+	INTRODUCED_REGION:[]
+	WRONG_DATA:[]
+	RECOVERY_FAILED:[]
+	RECOVERY_FAILED_AS_EXPECTED:[]
+	NO_SYNTAX_ERRORS:[]
+	NO_EXPECTED_REGION:[]

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/History/description.txt	2009-12-16 13:02:02 UTC (rev 20418)
@@ -19,4 +19,10 @@
 Regions starting with a separator are treated with indent + indentOf(, )
 
 14-12-2009
-zoom, lastchild
\ No newline at end of file
+zoom, lastchild
+
+15-12-2009
+all functionality implemented
+
+16-12-2009
+bug fixed in zoom, some testfiles corrected
\ No newline at end of file

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedBlockComment.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedBlockComment.java	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedBlockComment.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -10,7 +10,7 @@
      return corrInt;
   }
 
-  /* //@START
+  /* //@START //@END
   private int correctMethod2(){
       int corrLine1;
       if(true){
@@ -19,6 +19,6 @@
       }
       corrLine3();     
       corrLine4();
-  }//@END
+  }
 }
 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break19.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break19.str_java	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break19.str_java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -102,9 +102,7 @@
     , ?[ compilation-unit |[ 
            class Foo { void bar() {} }
 	     ]|
-	   , _ // bar
-	   /* ERROR removed ] */
-    /* ERROR removed ) */  //@END
+	   , _ // bar  /* ERROR removed ] */    /* ERROR removed ) */  //@END
 
   trait-error-tests =
     test-catch-error(

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break19.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break19.str_java	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break19.str_java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -102,9 +102,7 @@
     , ?[ compilation-unit |[ 
            class Foo { void bar() {} }
 	     /* ERROR remove ]| */
-	   , _ // bar
-	   /* ERROR removed ] */
-    /* ERROR removed ) */ //@END
+	   , _ // bar   /* ERROR removed ] */  /* ERROR removed ) */ //@END
 
   trait-error-tests =
     test-catch-error(

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI3.java	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI3.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -10,8 +10,8 @@
 		m().m();
 		m(new D() { 
 				void m() {  //@START
-					int a; 
-				//} @END
+					int a; //} @END
+				
 			});
 	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str	2009-12-16 13:02:02 UTC (rev 20418)
@@ -4,7 +4,7 @@
   libstratego-lib
   foo
 
-/*
+
 strategie\ //@START
 
   main-foo =
@@ -34,7 +34,7 @@
 
   editor-hover:
     (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) //@END
-*/
+
 rules
 
   record-entity:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/EOF_Failure_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/EOF_Failure_Java.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/EOF_Failure_Java.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,89 @@
+package scenariotests;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import logging.FileLog;
+
+import org.junit.Test;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.NoRecoveryRulesException;
+
+import evaluating.Evaluation;
+
+import testrun.InfraStructure;
+
+
+public class EOF_Failure_Java extends CriticalScenarios_Base{
+	
+	public EOF_Failure_Java() throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException{
+		super.setParseTable(InfraStructure.JAVA_GRAMMAR);
+		directory=InfrastructureCriticalScenarios.DIR_CRITICAL_SCENARIOS_EOF_FAILURE;
+		END_SIGN = "@Z_END";
+		START_SIGN = "@Z_START";
+	}
+	
+	@Test
+	public void testBWSearch1() throws Exception{
+		String fileName="unclosedBlockComment.java";		
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
+	}
+	
+	@Test
+	public void testBWSearch2() throws Exception{
+		String fileName="Input_Scope_testA1.java";		
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
+	}
+	
+	@Test
+	public void testBWSearch3() throws Exception{
+		String fileName="Input_Scope_testA3.java";		
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
+	}
+	
+	@Test
+	public void testBWSearch4() throws Exception{
+		String fileName="Input_Scope_testA4.java";		
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
+	}
+	
+	@Test
+	public void testBWSearch5() throws Exception{
+		String fileName="Input_Scope_testB5.java";		
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
+	}
+	
+	@Test
+	public void testBWSearch6() throws Exception{
+		String fileName="Input_Scope_testD2.java";		
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
+	}
+	
+	@Test
+	public void testBWSearch7() throws Exception{
+		String fileName="Input_Scope_testD4.java";		
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
+	}
+
+	@Test
+	public void testBWSearch8() throws Exception{
+		String fileName="Input_Scope_testE3.java";		
+		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
+		System.out.println(eval);
+	}
+	
+	@Override
+	protected ArrayList<String> getActualRegions(FileLog fileLog) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -15,4 +15,5 @@
 	public static final String DIR_CRITICAL_SCENARIOS_SIBLING = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Siblings";
 	public static final String DIR_CRITICAL_SCENARIOS_ZOOM = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Zoom";
 	public static final String DIR_PROBLEMS = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Problematic";
+	public static final String DIR_CRITICAL_SCENARIOS_EOF_FAILURE = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Eof_Failure";
 }

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PrevRegion_Java.java (from rev 20390, sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PrevRegion_Java.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PrevRegion_Java.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -0,0 +1,79 @@
+package scenariotests;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import logging.FileLog;
+
+import org.junit.Test;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.NoRecoveryRulesException;
+
+import testrun.InfraStructure;
+
+
+public class PrevRegion_Java extends CriticalScenarios_Base{
+	
+	public PrevRegion_Java() throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException{
+		super.setParseTable(InfraStructure.JAVA_GRAMMAR);
+		directory=InfrastructureCriticalScenarios.DIR_CRITICAL_SCENARIOS_PREVIOUS;
+		END_SIGN = "@BW_END";
+		START_SIGN = "@BW_START";
+	}
+	
+	protected String getFragmentForComparing(FileLog fileLog){ 
+		return fileLog.getRegionInfo().get(0).getPrevRegions().get(0).trim();
+	}
+
+	
+	@Test
+	public void testSimpleLine() throws Exception{
+		String fileName="SimpleLine.java";		
+		assertRegionCorrectlySelected(fileName);		
+	}
+	
+	@Test
+	public void testScopeNotation_BraceLess() throws Exception{
+		String fileName="ScopeNotation_BraceLess.java";
+		assertRegionCorrectlySelected(fileName);		
+	}
+	
+	@Test
+	public void testScopeNotation_Double() throws Exception{
+		String fileName="ScopeNotation_Double.java";		
+		assertRegionCorrectlySelected(fileName);		
+	}
+	
+	@Test
+	public void testScopeNotation_EndOnly() throws Exception{
+		String fileName="ScopeNotation_EndOnly.java";		
+		assertRegionCorrectlySelected(fileName);		
+	}
+	
+	@Test
+	public void testScopeError_OnClosing() throws Exception{
+		String fileName="ScopeError_OnClosing.java";
+		assertActualRegionsContainExpected(fileName);
+		//assertRegionCorrectlySelected(fileName);		
+	}
+	
+	@Test
+	public void testScopeError_OnOpening() throws Exception{
+		String fileName="ScopeError_OnOpening.java";
+		assertRegionCorrectlySelected(fileName);		
+	}
+	
+	@Test
+	public void testLastChildren() throws Exception{
+		String fileName="LastChildren.java";
+		assertActualRegionsContainExpected(fileName);
+		//assertRegionCorrectlySelected(fileName);		
+	}
+
+	@Override
+	protected ArrayList<String> getActualRegions(FileLog fileLog) {
+		return fileLog.getRegionInfo().get(0).getPrevRegions();
+	}	
+
+}


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PrevRegion_Java.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/PreviousRegion_Java.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -1,79 +0,0 @@
-package scenariotests;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.ArrayList;
-
-import logging.FileLog;
-
-import org.junit.Test;
-import org.spoofax.jsglr.InvalidParseTableException;
-import org.spoofax.jsglr.NoRecoveryRulesException;
-
-import testrun.InfraStructure;
-
-
-public class PreviousRegion_Java extends CriticalScenarios_Base{
-	
-	public PreviousRegion_Java() throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException{
-		super.setParseTable(InfraStructure.JAVA_GRAMMAR);
-		directory=InfrastructureCriticalScenarios.DIR_CRITICAL_SCENARIOS_PREVIOUS;
-		END_SIGN = "@BW_END";
-		START_SIGN = "@BW_START";
-	}
-	
-	protected String getFragmentForComparing(FileLog fileLog){ 
-		return fileLog.getRegionInfo().get(0).getPrevRegions().get(0).trim();
-	}
-
-	
-	@Test
-	public void testSimpleLine() throws Exception{
-		String fileName="SimpleLine.java";		
-		assertRegionCorrectlySelected(fileName);		
-	}
-	
-	@Test
-	public void testScopeNotation_BraceLess() throws Exception{
-		String fileName="ScopeNotation_BraceLess.java";
-		assertRegionCorrectlySelected(fileName);		
-	}
-	
-	@Test
-	public void testScopeNotation_Double() throws Exception{
-		String fileName="ScopeNotation_Double.java";		
-		assertRegionCorrectlySelected(fileName);		
-	}
-	
-	@Test
-	public void testScopeNotation_EndOnly() throws Exception{
-		String fileName="ScopeNotation_EndOnly.java";		
-		assertRegionCorrectlySelected(fileName);		
-	}
-	
-	@Test
-	public void testScopeError_OnClosing() throws Exception{
-		String fileName="ScopeError_OnClosing.java";
-		assertActualRegionsContainExpected(fileName);
-		//assertRegionCorrectlySelected(fileName);		
-	}
-	
-	@Test
-	public void testScopeError_OnOpening() throws Exception{
-		String fileName="ScopeError_OnOpening.java";
-		assertRegionCorrectlySelected(fileName);		
-	}
-	
-	@Test
-	public void testLastChildren() throws Exception{
-		String fileName="LastChildren.java";
-		assertActualRegionsContainExpected(fileName);
-		//assertRegionCorrectlySelected(fileName);		
-	}
-
-	@Override
-	protected ArrayList<String> getActualRegions(FileLog fileLog) {
-		return fileLog.getRegionInfo().get(0).getPrevRegions();
-	}	
-
-}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/Zoom_Java.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -22,10 +22,6 @@
 		END_SIGN = "@Z_END";
 		START_SIGN = "@Z_START";
 	}
-	
-	protected String getFragmentForComparing(FileLog fileLog){ 
-		return fileLog.getRegionInfo().get(0).getParentRegions().get(0).trim();
-	}
 
 	@Test
 	public void testSimpleZoom() throws Exception{
@@ -40,10 +36,15 @@
 		Evaluation eval = assertEvaluation(fileName, Evaluation.EXACT);
 		System.out.println(eval);
 	}
-		
+
+
+
 	@Override
 	protected ArrayList<String> getActualRegions(FileLog fileLog) {
-		return fileLog.getRegionInfo().get(0).getPrevRegions();
-	}	
+		// TODO Auto-generated method stub
+		return null;
+	}
+		
+	
 
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java	2009-12-16 10:06:29 UTC (rev 20417)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java	2009-12-16 13:02:02 UTC (rev 20418)
@@ -125,6 +125,28 @@
 		Assert.assertEquals(Evaluation.EXACT, file.getRegionEvaluations().get(0));
 	}
 	
+	@Test
+	public void testRunFile10() throws FileNotFoundException {
+		Testcase file = new Testcase(InfrastructureCriticalScenarios.DIR_PROBLEMS + File.separator + "Input_Scope_testF1.java");
+		file.compareRegions(InfraStructure.JAVA_GRAMMAR);
+		System.out.println(file.getRegionEvaluations().get(0));
+		System.out.println("SKIPPED SKIPPED SKIPPED");
+		System.out.println(file.getRecoverLog().getSkippedFragments());
+		Assert.assertEquals(Evaluation.EXACT, file.getRegionEvaluations().get(0));
+	}
+	
+	
+	
+	@Test
+	public void testRunFile9() throws FileNotFoundException {
+		Testcase file = new Testcase(InfrastructureCriticalScenarios.DIR_PROBLEMS+ File.separator + "Input_SpoofaxExamples_bad-performance-stratego-sugar.str");
+		file.compareRegions(InfraStructure.STRATEGO_JAVA_GRAMMAR);
+		System.out.println(file.getRegionEvaluations().get(0));
+		System.out.println("SKIPPED SKIPPED SKIPPED");
+		System.out.println(file.getRecoverLog().getSkippedFragments());
+		Assert.assertEquals(Evaluation.EXACT, file.getRegionEvaluations().get(0));
+	}
+	
 	//@Test TODO: update history with recovered lines 

(3 diff lines omitted)


From m.dejonge at tudelft.nl  Wed Dec 16 14:03:31 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 16 Dec 2009 13:03:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20419 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912161303.nBGD3V9w032333@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-16 13:03:31 +0000 (Wed, 16 Dec 2009)
New Revision: 20419

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20419&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java

Log:
- zoom for eof problems
- bug in zoom fixed
- clean up in regionrecovery

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-16 13:02:02 UTC (rev 20418)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-16 13:03:31 UTC (rev 20419)
@@ -485,23 +485,18 @@
     public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(StructureSkipSuggestion prevRegion) throws IOException{
         ArrayList<StructureSkipSuggestion> result = new ArrayList<StructureSkipSuggestion>();
         if(!prevRegion.canBeDecomposed()){ 
-            result.add(prevRegion);
+            //result.add(prevRegion);
             return result;
         }
         ArrayList<Integer> indentLevels=new ArrayList<Integer>();       
-        for (int i = prevRegion.getIndexHistoryStart()+1; i < prevRegion.getIndexHistoryEnd(); i++) {
-            int indentOfLine=getHistory().getLine(i).getIndentValue();
-            if(!indentLevels.contains(indentOfLine))
-                indentLevels.add(indentOfLine);
-        }
-        Collections.sort(indentLevels);
-        //indentLevels.remove(indentLevels.size()-1);       
-        System.out.println(indentLevels);
         for (int i = prevRegion.getIndexHistoryStart(); i < prevRegion.getIndexHistoryEnd(); i++) {
             int indentOfLine=getHistory().getLine(i).getIndentValue();
             if(!indentLevels.contains(indentOfLine))
                 indentLevels.add(indentOfLine);
         }
+        Collections.sort(indentLevels);
+        indentLevels.remove(0);       
+        System.out.println(indentLevels);        
         int indentOfLevel;
         int lineIndex;
         for (int level = 0; level < indentLevels.size(); level++) {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-16 13:02:02 UTC (rev 20418)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-16 13:03:31 UTC (rev 20419)
@@ -34,7 +34,7 @@
     
     private Map<Integer, char[]> getBPSuggestions(){
         Map<Integer, char[]> bpSuggestions = getBridges();
-        int startPos = skipRecovery.getErrorFragmentStartPosition();
+        int startPos = skipRecovery.getStartPositionErrorFragment_InclLeftMargin();
         
         Map<Integer, char[]> bpSuggestAbsolute = new HashMap<Integer, char[]>();
         for (Integer aKey : bpSuggestions.keySet()) {
@@ -71,7 +71,7 @@
         boolean skipSucceeded = skipRecovery.selectErroneousFragment(); //decides whether whitespace parse makes sense
         mySGLR.acceptingStack=null;
         long startSkip=System.currentTimeMillis();
-        String errorFragment = skipRecovery.getErrorFragment();
+        String errorFragment = skipRecovery.getErrorFragmentWithLeftMargin();
         long durationSkip=System.currentTimeMillis()-startSkip;
         Tools.debug("Skip time: "+ durationSkip);
         //System.err.print("Skip time: "+ durationSkip+ "  ");
@@ -103,7 +103,7 @@
         Tools.debug("FineGrained Repair Failed");
         //WHITESPACE REPAIR
         if (skipSucceeded) {    
-            whiteSpaceParse(skipRecovery.getErrorFragmentPlusSeparator());
+            whiteSpaceParse(skipRecovery.getErrorFragment());
             //whiteSpaceParse(errorFragment); 
             if(recoverySucceeded()){
                 Tools.debug("WhiteSpace Repair Succeeded");
@@ -144,7 +144,7 @@
     }
 
     private void whiteSpaceParse(String errorFragment) throws IOException {
-        mySGLR.activeStacks.addAll(skipRecovery.getStartSkipPosition().getStackNodes());            
+        mySGLR.activeStacks.addAll(skipRecovery.getStartLineErrorFragment().getStackNodes());            
         tryParsing(errorFragment, true);
         parseRemainingTokens();
     }
@@ -152,12 +152,12 @@
     private void tryFineGrainedRepair() throws IOException {
         FineGrainedRepair fineGrained=new FineGrainedRepair(mySGLR);   
         fineGrained.setBpSuggestions(getBPSuggestions());
-        fineGrained.findRecoverBranch(skipRecovery.getSkippedLines(), skipRecovery.getEndSkipPosition());        
+        fineGrained.findRecoverBranch(skipRecovery.getSkippedLines(), skipRecovery.getEndPositionErrorFragment());        
     }
 
     private void tryBridgeRepair(String errorFragment) throws IOException {
         String repairedFragment = repairBridges(errorFragment);
-        mySGLR.activeStacks.addAll(skipRecovery.getStartSkipPosition().getStackNodes());   
+        mySGLR.activeStacks.addAll(skipRecovery.getStartLineErrorFragment().getStackNodes());   
         tryParsing(repairedFragment, false);      
         parseRemainingTokens();
     }
@@ -199,7 +199,7 @@
     
     public void parseRemainingTokens() throws IOException{
         //Tools.debug("REMAINING: ");
-        getHistory().setTokenIndex(skipRecovery.getEndSkipPosition());
+        getHistory().setTokenIndex(skipRecovery.getEndPositionErrorFragment());
         //System.out.println("@@@@@@@@@@@@@");
         while(!getHistory().hasFinishedRecoverTokens() && mySGLR.activeStacks.size()>0 && mySGLR.acceptingStack==null){        
             getHistory().readRecoverToken(mySGLR);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-12-16 13:02:02 UTC (rev 20418)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-12-16 13:03:31 UTC (rev 20419)
@@ -1,3 +1,4 @@
+//TODO: samenwerking met recovery connector eenduidiger
 package org.spoofax.jsglr;
 
 import java.io.IOException;
@@ -9,24 +10,13 @@
  */
 public class RegionRecovery {
 
-    private SGLR myParser;
-    IStructureSkipper regionSelector;
-    IStructureSkipper newRegionSelector;
-    private StructureSkipSuggestion erroneousRegion;
-    private boolean hasFoundErroneousRegion;
+    private SGLR myParser;    
+    private StructureSkipSuggestion erroneousRegion;    
     private int errorDetectionLocation;
     private static int NR_OF_LINES_TILL_SUCCESS=3;
     private boolean useDebugMode;
     
     /**
-     * Says whether an erroneous region is found
-     * @return
-     */
-    public boolean hasFoundErroneousRegion() {
-        return hasFoundErroneousRegion;
-    }
-    
-    /**
      * Prints information about the selected regions to the console
      */
     public void setUseDebugMode(boolean useDebugMode) {
@@ -34,19 +24,10 @@
     }
 
     /**
-     * Used for testing, accepts a recovery only after end of file is reached
-     */
-    public void setEndOfFileSuccessMode(){
-        NR_OF_LINES_TILL_SUCCESS=Integer.MAX_VALUE;
-    }
-    
-    /**
      * Supports error recovery by selecting the region containing the error
      */
     public RegionRecovery(SGLR sglr){
-        myParser=sglr;
-        regionSelector = new StructureSkipper(sglr);
-        newRegionSelector=new NewStructureSkipper(sglr);
+        myParser=sglr;        
     }
     
     private ParserHistory getHistory() {
@@ -56,65 +37,59 @@
     /** *
      *  Returns info about the parser configuration at the start of the erroneous region 
      */
-    public IndentInfo getStartSkipPosition() {
+    public IndentInfo getStartLineErrorFragment() {
         return erroneousRegion.getStartSkip();
     }
     
     /**
      * returns the location of the first non-erroneous character
      */
-    public int getEndSkipPosition() {
+    public int getEndPositionErrorFragment() {
         return erroneousRegion.getEndSkip().getTokensSeen();
     }
 
     /**
      *  Returns error fragment including the left margin (needed for bridge-parsing)
      */
-    public String getErrorFragment() {
-        int tokIndexLine=getHistory().getTokensSeenStartLine(getStartSkipPosition().getTokensSeen());
-        return getHistory().getFragment(tokIndexLine, getEndSkipPosition()-1);
+    public String getErrorFragmentWithLeftMargin() {
+        int tokIndexLine=getHistory().getTokensSeenStartLine(getStartLineErrorFragment().getTokensSeen());
+        return getHistory().getFragment(tokIndexLine, getEndPositionErrorFragment()-1);
     }
     
-    public String getErrorFragmentPlusSeparator() {
-        int tokIndexLine=erroneousRegion.getStartSkip().getTokensSeen()+erroneousRegion.getAdditionalTokens().length; //getHistory().getTokensSeenStartLine(getStartSkipPosition().getTokensSeen());
-        return getHistory().getFragment(tokIndexLine, getEndSkipPosition()-1);
+    public String getErrorFragment() {
+        int tokIndexLine=erroneousRegion.getStartSkip().getTokensSeen();//+erroneousRegion.getAdditionalTokens().length; 
+        return getHistory().getFragment(tokIndexLine, getEndPositionErrorFragment()-1);
     }
 
     /**
      * Returns location where erroneous region starts, including left margin
      */
-    public int getErrorFragmentStartPosition() {
-        int tokIndexLine=getHistory().getTokensSeenStartLine(getStartSkipPosition().getTokensSeen());
+    public int getStartPositionErrorFragment_InclLeftMargin() {
+        int tokIndexLine=getHistory().getTokensSeenStartLine(getStartLineErrorFragment().getTokensSeen());
         return tokIndexLine;
     }
 
     public ArrayList<IndentInfo> getSkippedLines() {        
-        return getHistory().getLinesFromTo(erroneousRegion.getIndexHistoryStart(), getEndSkipPosition());
+        return getHistory().getLinesFromTo(erroneousRegion.getIndexHistoryStart(), getEndPositionErrorFragment());
     }      
 
     /**
      * Selects erroneous region based on layout 
      */
     public boolean selectErroneousFragment() throws IOException { 
-        newRegionSelector=new NewStructureSkipper(myParser);
-        regionSelector.clear();
-        regionSelector.setFailureIndex(getHistory().getIndexLastLine());
+        NewStructureSkipper newRegionSelector=new NewStructureSkipper(myParser);
+        //StructureSkipper regionSelector = new StructureSkipper(myParser);//TODO: use newregionSelector
+        //regionSelector.clear();
+        //regionSelector.setFailureIndex(getHistory().getIndexLastLine());
         newRegionSelector.setFailureIndex(getHistory().getIndexLastLine());
         errorDetectionLocation=getHistory().getIndexLastToken();
-        hasFoundErroneousRegion=false;         
-        //ArrayList<StructureSkipSuggestion> prevRegions=regionSelector.getPreviousSkipSuggestions();
         ArrayList<StructureSkipSuggestion> prevRegions=newRegionSelector.getPreviousSkipSuggestions();
         logRecoverInfo("PREVIOUS REGION");        
         if(trySetErroneousRegion(prevRegions)){
             ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
-            boolean findSmallerPart= trySetErroneousRegion(decomposedRegions);
-            if(findSmallerPart){
-               // ArrayList<StructureSkipSuggestion> childRegions=regionSelector.getPickErroneousChild(erroneousRegion);
-               // trySetErroneousRegion(childRegions);
-            }
+            trySetErroneousRegion(decomposedRegions);
             return true;
-        }
-        //ArrayList<StructureSkipSuggestion> currentRegions=regionSelector.getCurrentSkipSuggestions();
+        }        
         ArrayList<StructureSkipSuggestion> currentRegions=newRegionSelector.getCurrentSkipSuggestions();
         logRecoverInfo("CURRENT REGION");
         if(trySetErroneousRegion(currentRegions)){            
@@ -124,11 +99,7 @@
         ArrayList<StructureSkipSuggestion> priorRegions=newRegionSelector.getPriorSkipSuggestions();
         if(trySetErroneousRegion(priorRegions)){
             ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
-            boolean findSmallerPart=trySetErroneousRegion(decomposedRegions);
-            if(findSmallerPart){
-                ArrayList<StructureSkipSuggestion> childRegions=newRegionSelector.getPickErroneousChild(erroneousRegion);
-                trySetErroneousRegion(childRegions);
-            }
+            trySetErroneousRegion(decomposedRegions);
             return true;
         }
         logRecoverInfo("FW-SIB REGIONS");
@@ -141,8 +112,7 @@
         if(trySetErroneousRegion(siblingBackWardRegions)){            
             return true;
         }
-        logRecoverInfo("SURROUNDING-SIB REGIONS");
-        //System.out.println("&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
+        logRecoverInfo("SURROUNDING-SIB REGIONS");        
         ArrayList<StructureSkipSuggestion> siblingSurroundingRegions=newRegionSelector.getSibblingSurroundingSuggestions();
         if(trySetErroneousRegion(siblingSurroundingRegions)){            
             return true;
@@ -151,7 +121,8 @@
         ArrayList<StructureSkipSuggestion> parentRegion=newRegionSelector.getParentSkipSuggestions();
         if(trySetErroneousRegion(parentRegion)){            
             return true;
-        }        
+        }
+        /*
         else {
             logRecoverInfo("PREFIX");
             erroneousRegion=regionSelector.getErroneousPrefix();
@@ -163,7 +134,15 @@
                 trySetErroneousRegion(childRegions);
             }
             return findSmallerPart; //false;
+        }*/
+        erroneousRegion=new StructureSkipSuggestion();
+        if(getHistory().getIndexLastLine()>=0){
+            erroneousRegion.setSkipLocations(getHistory().getLine(0), getHistory().getLastLine(), 0, getHistory().getIndexLastLine());
+            ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
+            boolean findSmallerPart=trySetErroneousRegion(decomposedRegions);
+            return findSmallerPart; //false;
         }
+        return false;
     }
 
     private boolean trySetErroneousRegion(ArrayList<StructureSkipSuggestion> regions) throws IOException {
@@ -171,12 +150,13 @@
         int indexSkips=0;
         myParser.acceptingStack=null; 
         myParser.activeStacks.clear(); //undo success
-        while (indexSkips < regions.size() && !successCriterion()) {
+        boolean hasFoundErroneousRegion=false;
+        while (indexSkips < regions.size() && !hasFoundErroneousRegion) {
             aSkip = regions.get(indexSkips);            
             testRegion(aSkip);
+            hasFoundErroneousRegion=successCriterion();
             indexSkips++;            
-        }
-        hasFoundErroneousRegion=successCriterion();
+        }        
         if(hasFoundErroneousRegion){
             erroneousRegion=aSkip;   
             logRecoverInfo("Erroneous region set ");
@@ -185,35 +165,25 @@
     }
 
     private void testRegion(StructureSkipSuggestion aSkip) throws IOException {
-       // System.out.println("MMMMMMMMMMM");
-        //System.out.println(getInputFragment(aSkip));
+        System.out.println("%%%%%%%%%%% TEST REGION %%%%%%%%%%%");
+        System.out.println(getInputFragment(aSkip));
         logRecoverInfoBlock(getInputFragment(aSkip));           
         IndentInfo endPos=aSkip.getEndSkip();
         getHistory().setTokenIndex(endPos.getTokensSeen());
         myParser.activeStacks.clear();
         myParser.acceptingStack=null;
         myParser.activeStacks.addAll(endPos.getStackNodes());        
-        for (char aChar : aSkip.getAdditionalTokens()) {
-            myParser.currentToken=aChar;
-           // System.out.print((char)aChar);
-            myParser.doParseStep();
-        }
-        if(aSkip.getAdditionalTokens().length>0){
-            //System.out.println("$$ skip additional characters $$");
-            aSkip.getStartSkip().fillStackNodes(myParser.activeStacks);
-            aSkip.getStartSkip().setTokensSeen(aSkip.getStartSkip().getTokensSeen() + aSkip.getAdditionalTokens().length);
-            aSkip.setAdditionalTokens(new char[0]);
-        }
+        parseAdditionalTokens(aSkip);
         int nrOfParsedLines=0;
-        logRecoverInfo("CONTINUE PARSING: ");
-        //System.out.println("CONTINUE PARSING: ");
+        logRecoverInfo("CONTINUE PARSING: "); 
+        System.out.println("%%%%%%%%%%% CONTINUE PARSING %%%%%%%%%%%");
         IndentationHandler indentHandler = new IndentationHandler();
         indentHandler.setInLeftMargin(false);
-        while((myParser.activeStacks.size() > 0 && nrOfParsedLines<NR_OF_LINES_TILL_SUCCESS) || !getHistory().hasFinishedRecoverTokens()) {                       
+        while((myParser.activeStacks.size() > 0 && nrOfParsedLines<NR_OF_LINES_TILL_SUCCESS)) {//|| !getHistory().hasFinishedRecoverTokens() 
             getHistory().readRecoverToken(myParser); 
-            indentHandler.updateIndentation(myParser.currentToken);
-           // System.out.print((char)myParser.currentToken);
-            logRecoverInfo((char)myParser.currentToken);            
+            indentHandler.updateIndentation(myParser.currentToken);           
+            logRecoverInfo((char)myParser.currentToken); 
+            System.out.print((char)myParser.currentToken);
             myParser.doParseStep();
             if(getHistory().getTokenIndex()>errorDetectionLocation && indentHandler.lineMarginEnded())
                 nrOfParsedLines++;
@@ -221,6 +191,20 @@
         return;
     }
 
+    private void parseAdditionalTokens(
+            StructureSkipSuggestion aSkip) throws IOException {
+        for (char aChar : aSkip.getAdditionalTokens()) {
+            myParser.currentToken=aChar;           
+            myParser.doParseStep();
+        }
+        if(aSkip.getAdditionalTokens().length>0){            
+            aSkip.getStartSkip().fillStackNodes(myParser.activeStacks);
+            aSkip.getEndSkip().fillStackNodes(myParser.activeStacks);
+            aSkip.getStartSkip().setTokensSeen(aSkip.getStartSkip().getTokensSeen() + aSkip.getAdditionalTokens().length);
+            aSkip.setAdditionalTokens(new char[0]);
+        }
+    }
+
     public String getInputFragment(StructureSkipSuggestion aSkip) {
         return getHistory().getFragment(aSkip.getStartSkip().getTokensSeen(), aSkip.getEndSkip().getTokensSeen()-1);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-12-16 13:02:02 UTC (rev 20418)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-12-16 13:03:31 UTC (rev 20419)
@@ -30,7 +30,7 @@
     
     static final int EOF = ParseTable.NUM_CHARS;
     
-    static final int TAB_SIZE = 8;
+    static final int TAB_SIZE = 4;//8;
     
     private static final Timer abortTimer = new Timer(true);
     



From L.C.L.Kats at tudelft.nl  Wed Dec 16 14:44:58 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 13:44:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20420 - LennartKats -
	strategoxt/trunk/strc-core/tests/test1
Message-ID: <200912161344.nBGDiw8O000328@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 13:44:58 +0000 (Wed, 16 Dec 2009)
New Revision: 20420

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20420&view=rev

Added:
   strategoxt/trunk/strc-core/tests/test1/test114.str
   strategoxt/trunk/strc-core/tests/test1/test115.str
Modified:
   strategoxt/trunk/strc-core/tests/test1/Makefile.am

Log:
Added a failing test case that demonstrates a regression in signature handling

Changes:

Modified: strategoxt/trunk/strc-core/tests/test1/Makefile.am
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-12-16 13:03:31 UTC (rev 20419)
+++ strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-12-16 13:44:58 UTC (rev 20420)
@@ -26,7 +26,8 @@
 		  test84 test85 test86 test87 test88 test89 test90		 \
 		  test91 test92 test93 test94 test95 test96			 \
 		  test97 test98	test99 test100 test101 test102 test103		 \
-		  test104 test105 test106 test107 test108 test109 test110 test111 test112 test113	 \
+		  test104 test105 test106 test107 test108 test109 test110 test111 test112 test113 \
+		  test114 test115	 \
 		  io-test10 io-test11 io-test1 io-test2 io-test3 io-test4	 \
                   qcons-test01 qcons-test02 qcons-test03 qcons-test04		 \
                   test-chain01 test-chain02 test-chain03			 \
@@ -122,6 +123,8 @@
 test109_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 test112_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 test113_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
+test114_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
+test115_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 
 test_chain01_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 test_chain02_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
@@ -254,6 +257,8 @@
 nodist_test111_SOURCES = test111.c
 nodist_test112_SOURCES = test112.c
 nodist_test113_SOURCES = test113.c
+nodist_test114_SOURCES = test114.c
+nodist_test115_SOURCES = test115.c
 
 nodist_test_chain01_SOURCES = test-chain01.c
 nodist_test_chain02_SOURCES = test-chain02.c
@@ -301,6 +306,9 @@
 cs-test03.c : ExpStratego.tbl
 cs-test04.c : ExpStratego.tbl Expressions.str
 
+test115 : test115.str
+	$(SCOMPILE) -la stratego-sdf -la stratego-lib -i $< -o $@
+
 ExpStratego.def : Expressions.sdf ExpStratego.sdf
 
 

Added: strategoxt/trunk/strc-core/tests/test1/test114.str
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/test114.str	                        (rev 0)
+++ strategoxt/trunk/strc-core/tests/test1/test114.str	2009-12-16 13:44:58 UTC (rev 20420)
@@ -0,0 +1,13 @@
+module test114a
+
+imports
+  libstratego-lib
+  libstratego-sdf
+
+signature constructors
+  
+  sort : Term -> Term
+
+strategies
+
+  main = !sort(1); sort(id)

Added: strategoxt/trunk/strc-core/tests/test1/test115.str
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/test115.str	                        (rev 0)
+++ strategoxt/trunk/strc-core/tests/test1/test115.str	2009-12-16 13:44:58 UTC (rev 20420)
@@ -0,0 +1,7 @@
+module test115
+
+imports
+  libstratego-lib
+  libstratego-sdf
+  test114
+



From L.C.L.Kats at tudelft.nl  Wed Dec 16 14:48:15 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 13:48:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20421 - LennartKats -
	strategoxt/trunk/strc-core/tests/test1
Message-ID: <200912161348.nBGDmFGB000376@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 13:48:15 +0000 (Wed, 16 Dec 2009)
New Revision: 20421

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20421&view=rev

Modified:
   strategoxt/trunk/strc-core/tests/test1/Makefile.am

Log:
Disabled Makefile workaround to use the baseline version for test115.

Changes:

Modified: strategoxt/trunk/strc-core/tests/test1/Makefile.am
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-12-16 13:44:58 UTC (rev 20420)
+++ strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-12-16 13:48:15 UTC (rev 20421)
@@ -306,8 +306,8 @@
 cs-test03.c : ExpStratego.tbl
 cs-test04.c : ExpStratego.tbl Expressions.str
 
-test115 : test115.str
-	$(SCOMPILE) -la stratego-sdf -la stratego-lib -i $< -o $@
+# test115 : test115.str
+# 	$(SCOMPILE) -la stratego-sdf -la stratego-lib -i $< -o $@
 
 ExpStratego.def : Expressions.sdf ExpStratego.sdf
 



From L.C.L.Kats at tudelft.nl  Wed Dec 16 15:24:21 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 14:24:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20422 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/strc
Message-ID: <200912161424.nBGEOLG0001225@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 14:24:21 +0000 (Wed, 16 Dec 2009)
New Revision: 20422

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20422&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str

Log:
Switched the order in which signature files are created; abstract syntax should get the most recent date stamp.

Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-16 13:48:15 UTC (rev 20421)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-16 14:24:21 UTC (rev 20422)
@@ -63,14 +63,17 @@
       else
         log-timed(
           defs-to-external-defs
-          ; where(write-to; copy-to(strc-getoutfile(!".rtree") => file1))
-          ; log(|Info(), ["Abstract syntax in '", file1, "'"])
           ; if not(<get-config> "--no-concrete-syntax-externals") then
-              pp-stratego-string
-            ; print-to
-            ; copy-to(strc-getoutfile(!".str") => file2)
-            ; log(|Info(), ["Concrete syntax in '", file2, "'"])
+              where(
+                pp-stratego-string
+              ; print-to
+              ; copy-to(strc-getoutfile(!".str") => file2)
+              ; log(|Info(), ["Concrete syntax in '", file2, "'"])
+              )
             end
+          ; write-to
+          ; log(|Info(), ["Abstract syntax in '", file1, "'"])
+          ; copy-to(strc-getoutfile(!".rtree") => file1)
         | "Export of externals succeeded"
         , 1
         )



From L.C.L.Kats at tudelft.nl  Wed Dec 16 15:25:09 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 14:25:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20423 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/strc
Message-ID: <200912161425.nBGEP9oW001239@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 14:25:09 +0000 (Wed, 16 Dec 2009)
New Revision: 20423

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20423&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str

Log:


Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-16 14:24:21 UTC (rev 20422)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2009-12-16 14:25:09 UTC (rev 20423)
@@ -72,8 +72,8 @@
               )
             end
           ; write-to
+          ; copy-to(strc-getoutfile(!".rtree") => file1)
           ; log(|Info(), ["Abstract syntax in '", file1, "'"])
-          ; copy-to(strc-getoutfile(!".rtree") => file1)
         | "Export of externals succeeded"
         , 1
         )



From m.dejonge at tudelft.nl  Wed Dec 16 17:12:22 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 16 Dec 2009 16:12:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20424 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912161612.nBGGCMlf003334@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-16 16:12:22 +0000 (Wed, 16 Dec 2009)
New Revision: 20424

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20424&view=rev

Removed:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipper.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java

Log:
-clean newStructureskipper
-restrict searching for regions


Changes (first 1000 lines of the diffs):

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-16 14:25:09 UTC (rev 20423)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-16 16:12:22 UTC (rev 20424)
@@ -4,113 +4,124 @@
 import java.util.ArrayList;
 import java.util.Collections;
 
-import org.spoofax.jsglr.StructureSkipper.indentShift;
+public class NewStructureSkipper {
 
-public class NewStructureSkipper implements IStructureSkipper {
-
     private final static int MAX_NR_OF_LINES=30;
-    private final static int MAX_NR_OF_STRUCTURES=20;
-    
+    private static final int MAX_NR_OF_STRUCTURES = 20;
+
+    private SGLR myParser;    
+    private StructuralTokenRecognizer structTokens;
+
     enum indentShift{
         INDENT,
         DEDENT,
         SAME_INDENT
-    }
-    
-    private SGLR myParser;
-    private int failureIndex;
-    private StructuralTokenRecognizer structTokens;
-    
+    }    
+
     public ParserHistory getHistory() {
         return myParser.getHistory();
     }
-    
+
     public NewStructureSkipper(SGLR sglr){   
         myParser=sglr;
         structTokens=new StructuralTokenRecognizer();
     }
-    
-    public void clear() {
-        // TODO Auto-generated method stub
 
+    public ArrayList<StructureSkipSuggestion> getPreviousSkipSuggestions(int failureIndex)
+    throws IOException {
+        return selectPrevRegion(failureIndex);
     }
-
-    public ArrayList<StructureSkipSuggestion> getCurrentSkipSuggestions()
-            throws IOException {
-        int indexLastLine=failureIndex;
-        if (isScopeOpeningLine(indexLastLine) && indexLastLine>0 && getHistory().getLine(indexLastLine-1).getIndentValue()==getHistory().getLine(indexLastLine).getIndentValue())
-            return selectRegion(indexLastLine-1);
-        return selectRegion(indexLastLine);
+    
+    public ArrayList<StructureSkipSuggestion> getCurrentSkipSuggestions(int failureIndex) throws IOException {
+        if (failureIndex>0 && isScopeOpeningLine(failureIndex) && getHistory().getLine(failureIndex-1).getIndentValue()==getHistory().getLine(failureIndex).getIndentValue())
+            return selectRegion(failureIndex-1);
+        return selectRegion(failureIndex);
     }
     
-    private ArrayList<StructureSkipSuggestion> selectRegion(int indexLine)
+    public ArrayList<StructureSkipSuggestion> getPriorSkipSuggestions(int failureIndex) throws IOException {
+        return getPriorRegions(failureIndex);
+    }
+    
+    public ArrayList<StructureSkipSuggestion> getSibblingBackwardSuggestions(int failureIndex)
     throws IOException {
-        if (isScopeClosingLine(indexLine))
-            return new ArrayList<StructureSkipSuggestion>();
-        IndentInfo startLine = getHistory().getLine(indexLine);
-        return selectRegion(indexLine, startLine);
+        ArrayList<StructureSkipSuggestion> bwSkips=new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> priorSiblings=getPriorRegions(failureIndex);
+        ArrayList<StructureSkipSuggestion> currentRegionSuggestions=selectRegion(failureIndex);
+        if(currentRegionSuggestions.isEmpty())
+            currentRegionSuggestions=selectPrevRegion(failureIndex);
+        for (StructureSkipSuggestion currSugestion : currentRegionSuggestions) {
+            for (int i = 0; i < priorSiblings.size(); i++) {
+                StructureSkipSuggestion priorSuggestion=priorSiblings.get(i);
+                if(currSugestion.getAdditionalTokens().length==0){//ignore suggestions based on adding the separator
+                    StructureSkipSuggestion mergedSkip=mergeRegions(currSugestion, priorSuggestion);
+                    bwSkips.add(mergedSkip);
+                }
+            }
+        }
+        return bwSkips;
     }
-
-    private ArrayList<StructureSkipSuggestion> selectRegion(int indexLine,
-            IndentInfo lineXX) throws IOException {           
-        if (isScopeClosingLine(indexLine))
-            return new ArrayList<StructureSkipSuggestion>();        
-        ArrayList<Integer> endLocations=findCurrentEnd(indexLine);
-        ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
-        IndentInfo startLine=IndentInfo.cloneIndentInfo(getHistory().getLine(indexLine));
-        for (Integer endSkipIndex : endLocations) {
-            if (endSkipIndex>indexLine) {
-                IndentInfo endSkip = IndentInfo.cloneIndentInfo(getHistory()
-                        .getLine(endSkipIndex));
-                StructureSkipSuggestion skipConstruct = new StructureSkipSuggestion();
-                skipConstruct.setSkipLocations(startLine, endSkip, indexLine,
-                        endSkipIndex);
-                skipSuggestions.add(skipConstruct);
-                addSeparatorIncludingRegion_Forwards(skipSuggestions,
-                        skipConstruct);
-                addSeperatorIncludingRegion_Backwards(skipSuggestions,
-                        skipConstruct);
+    
+    public ArrayList<StructureSkipSuggestion> getSibblingForwardSuggestions(int failureIndex)
+    throws IOException {
+        ArrayList<StructureSkipSuggestion> fwSkips=new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> nextSiblings=getCurrentAndNextSkipSuggestions(failureIndex);
+        ArrayList<StructureSkipSuggestion> prevRegionSuggestions=selectPrevRegion(failureIndex);
+        if(prevRegionSuggestions.isEmpty()){
+            prevRegionSuggestions=getCurrentSkipSuggestions(failureIndex);
+            nextSiblings.remove(0);
+        }
+        for (StructureSkipSuggestion priorSuggestion : prevRegionSuggestions) {
+            for (int i = 0; i < nextSiblings.size(); i++) {
+                StructureSkipSuggestion nextSuggestion=nextSiblings.get(i);
+                StructureSkipSuggestion mergedSkip=mergeRegions(nextSuggestion, priorSuggestion);
+                fwSkips.add(mergedSkip);            
             }
-        }        
-        return skipSuggestions;
-    }    
+        }
+        return fwSkips;
+    }
     
-    /*
-    private ArrayList<StructureSkipSuggestion> selectRegion(int indexLine,
-            IndentInfo lineXX) throws IOException {
-        IndentInfo line = getHistory().getLine(indexLine);
-        IndentInfo startLine = IndentInfo.cloneIndentInfo(line);
-        //IndentInfo startLine = IndentInfo.cloneIndentInfo(line);
-        if (isScopeClosingLine(startLine))
-            return new ArrayList<StructureSkipSuggestion>();
-        //ArrayList<IndentInfo> endLocations=findCurrentEnd(startLine);
-        Arr
-        ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
-        for (IndentInfo endSkip : endLocations) {
-            StructureSkipSuggestion skipConstruct=new StructureSkipSuggestion();
-            skipConstruct.setSkipLocations(startLine, endSkip, indexLine, -1);            
-            skipSuggestions.add(skipConstruct);
-            addSeparatorIncludingRegion_Forwards(skipSuggestions, skipConstruct);
-            addSeperatorIncludingRegion_Backwards(skipSuggestions, skipConstruct);
-        }        
-        return skipSuggestions;
-    } */   
-
-    public StructureSkipSuggestion getErroneousPrefix() throws IOException {
-        // TODO Auto-generated method stub
-        return new StructureSkipSuggestion();
+    public ArrayList<StructureSkipSuggestion> getSibblingSurroundingSuggestions(int failureIndex)
+    throws IOException {
+        ArrayList<StructureSkipSuggestion> surroundingSkips=new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> priorSiblings=getPriorRegions(failureIndex);
+        ArrayList<StructureSkipSuggestion> nextSiblings=getCurrentAndNextSkipSuggestions(failureIndex);
+        if(nextSiblings.size()>1 && priorSiblings.size()>0){
+            nextSiblings.remove(0);
+            StructureSkipSuggestion nextSuggestion=null;
+            StructureSkipSuggestion priorSuggestion=null;
+            int j=0;
+            int i = 0;            
+            while(i < nextSiblings.size() || j < priorSiblings.size()) {                
+                if (i<nextSiblings.size()) {
+                    nextSuggestion = nextSiblings.get(i); 
+                    i++;
+                }                         
+                if (j<priorSiblings.size()) {
+                    priorSuggestion = priorSiblings.get(j);  
+                    j++;
+                }
+                StructureSkipSuggestion mergedSkip=mergeRegions(nextSuggestion, priorSuggestion);
+                surroundingSkips.add(mergedSkip);
+                if (j<priorSiblings.size()) {
+                    priorSuggestion = priorSiblings.get(j); 
+                    if(priorSuggestion.getAdditionalTokens().length!=0){
+                        StructureSkipSuggestion mergedSkipPlus=mergeRegions(nextSuggestion, priorSuggestion);
+                        surroundingSkips.add(mergedSkipPlus);
+                        j++;
+                    }
+                }
+            }
+        }
+        return surroundingSkips;
     }
 
-    public ArrayList<StructureSkipSuggestion> getPickErroneousChild(
-            StructureSkipSuggestion prevRegion) throws IOException {
-        // TODO Auto-generated method stub
-        return new ArrayList<StructureSkipSuggestion>();
-    }
-    
-    public ArrayList<StructureSkipSuggestion> getParentSkipSuggestions() throws IOException{
+    public ArrayList<StructureSkipSuggestion> getParentSkipSuggestions(int failureIndex) throws IOException{
         ArrayList<StructureSkipSuggestion> parentSkips = new ArrayList<StructureSkipSuggestion>();
         int errorLineIndex=failureIndex;
-        for (int i = 0; i < 3; i++) {  //TODO: better control structure          
+        int maxBW=Math.max(failureIndex-MAX_NR_OF_LINES, 0);
+        int nrOfStructs=0;
+        while (errorLineIndex > maxBW && nrOfStructs<MAX_NR_OF_STRUCTURES) { 
+            nrOfStructs++;
             int startSkipIndex = findParentBegin(errorLineIndex);
             ArrayList<StructureSkipSuggestion> skips=selectRegion(startSkipIndex);
             if(skips.isEmpty()){
@@ -122,81 +133,92 @@
             if(skips.size()>0)
                 errorLineIndex=skips.get(0).getIndexHistoryStart();
             else
-                i=50;
+                errorLineIndex=-1;
         }
         return parentSkips;
-        /*
-        IndentInfo endSkip=findParentEnd(startLine);
-        IndentInfo startSkip = IndentInfo.cloneIndentInfo(getHistory().getLine(startSkipIndex));
-        ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
-        StructureSkipSuggestion skipConstruct=new StructureSkipSuggestion();            
-        skipConstruct.setSkipLocations(startSkip, endSkip, startSkipIndex, -1);
-        skipSuggestions.add(skipConstruct);                
-        return skipSuggestions;
-        */
-    }   
-    /*
-    private IndentInfo findParentEnd(IndentInfo startLine) throws IOException{
-        getHistory().setTokenIndex(startLine.getTokensSeen());
-        int indentStartLine=startLine.getIndentValue();
-        IndentInfo nextLine=skipLine(startLine);
-        while(myParser.currentToken!=SGLR.EOF){            
-            int indentSkipPosition=nextLine.getIndentValue();
-            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
-            if (shift==indentShift.DEDENT) {  
-                if(isScopeClosingLine(nextLine)){
-                    nextLine=skipLine(nextLine);
-                    if(nextLine==null)
-                        break;
-                }                              
-                return nextLine;                
-            
+    }
+
+    public StructureSkipSuggestion getErroneousPrefix() throws IOException {
+        StructureSkipSuggestion prefix=new StructureSkipSuggestion();
+        if(getHistory().getIndexLastLine()>=0)
+            prefix.setSkipLocations(getHistory().getLine(0), getHistory().getLastLine(), 0, getHistory().getIndexLastLine());
+        return prefix;
+    }
+
+    public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(StructureSkipSuggestion prevRegion) throws IOException{
+        ArrayList<StructureSkipSuggestion> result = new ArrayList<StructureSkipSuggestion>();
+        if(!prevRegion.canBeDecomposed()){
+            return result;
+        }
+        ArrayList<Integer> indentLevels=new ArrayList<Integer>(); 
+        int startIndexZoom=Math.max(prevRegion.getIndexHistoryStart(), prevRegion.getIndexHistoryEnd()-MAX_NR_OF_LINES);
+        for (int i = startIndexZoom; i < prevRegion.getIndexHistoryEnd(); i++) {
+            int indentOfLine=getHistory().getLine(i).getIndentValue();
+            if(!indentLevels.contains(indentOfLine))
+                indentLevels.add(indentOfLine);
+        }
+        Collections.sort(indentLevels);
+        indentLevels.remove(0);       
+        System.out.println(indentLevels);        
+        int indentOfLevel;
+        int lineIndex;
+        for (int level = 0; level < indentLevels.size(); level++) {
+            indentOfLevel=indentLevels.get(level);
+            lineIndex = startIndexZoom;            
+            while (lineIndex < prevRegion.getIndexHistoryEnd()) {
+                int indentOfLine=getHistory().getLine(lineIndex).getIndentValue();
+                if(indentOfLine==indentOfLevel){                    
+                    ArrayList<StructureSkipSuggestion> regions = selectRegion(lineIndex);                     
+                    if(regions.size()>0){
+                        lineIndex=regions.get(0).getIndexHistoryEnd();
+                        Collections.reverse(regions);
+                        result.addAll(regions);
+                    }
+                    else
+                        lineIndex++;
+                }
+                else
+                    lineIndex++;
             }
-            nextLine=skipLine(nextLine);
-        }         
-        return nextLine; //EOF
-    }*/
+        }    
+        Collections.reverse(result);
+        return result;
+    } 
 
-    private int findParentBegin(int startLineIndex) throws IOException{
-        IndentInfo startLine = IndentInfo.cloneIndentInfo(getHistory().getLine(startLineIndex));
-        int indentStartLine=separatorIndent(startLine); //startLine.getIndentValue();
-        int indexHistoryLines=startLineIndex;
-        while(indexHistoryLines > 0){
-            indexHistoryLines-=1;
-            IndentInfo currentLine=getHistory().getLine(indexHistoryLines);
-            int indentSkipPosition=separatorIndent(currentLine); //currentLine.getIndentValue();
-            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
-            if (shift==indentShift.DEDENT){
-                if(isScopeOpeningLine(indexHistoryLines))
-                {
-                        IndentInfo prevLine = getHistory().getLine(indexHistoryLines-1);
-                        if((!isScopeClosingLine(prevLine)) && calculateShift(currentLine.getIndentValue(), prevLine.getIndentValue())==indentShift.SAME_INDENT){                            
-                            return indexHistoryLines-1;
-                        }                        
-                }                
-                return indexHistoryLines;
-            }            
+    private ArrayList<StructureSkipSuggestion> selectRegion(int indexLine) throws IOException {           
+        if (isScopeClosingLine(indexLine))
+            return new ArrayList<StructureSkipSuggestion>();        
+        ArrayList<Integer> endLocations=findCurrentEnd(indexLine);
+        ArrayList<StructureSkipSuggestion> skipSuggestions=new ArrayList<StructureSkipSuggestion>();
+        IndentInfo startLine=IndentInfo.cloneIndentInfo(getHistory().getLine(indexLine));
+        for (Integer endSkipIndex : endLocations) {
+            if (endSkipIndex>indexLine) {
+                IndentInfo endSkip = IndentInfo.cloneIndentInfo(getHistory()
+                        .getLine(endSkipIndex));
+                StructureSkipSuggestion skipConstruct = new StructureSkipSuggestion();
+                skipConstruct.setSkipLocations(startLine, endSkip, indexLine,
+                        endSkipIndex);
+                skipSuggestions.add(skipConstruct);
+                addSeparatorIncludingRegion_Forwards(skipSuggestions,
+                        skipConstruct);
+                addSeperatorIncludingRegion_Backwards(skipSuggestions,
+                        skipConstruct);
+            }
         }        
-        return 0; //SOF
-    } 
-    
-    public ArrayList<StructureSkipSuggestion> getPreviousSkipSuggestions()
-            throws IOException {
-        int indexEnd=failureIndex;
-        return selectPrevRegion(indexEnd);
+        return skipSuggestions;
     }
 
     private ArrayList<StructureSkipSuggestion> selectPrevRegion(int indexEnd)
-            throws IOException {
+    throws IOException {
         ArrayList<StructureSkipSuggestion> prevRegions=new ArrayList<StructureSkipSuggestion>();       
         boolean onClosing=isScopeClosingLine(indexEnd);
-        int indexStart = backwardsSkip(indexEnd, onClosing);
+        int indexStart = findPreviousBegin(indexEnd, onClosing);
         if(onClosing){
             if(indexEnd>0){
-               if(isScopeClosingLine(indexEnd-1))
-                   prevRegions.addAll(selectPrevRegion(indexEnd-1));
-               else
-                   prevRegions.addAll(selectRegion(indexEnd-1));
+                if(isScopeClosingLine(indexEnd-1))
+                    prevRegions.addAll(selectPrevRegion(indexEnd-1));
+                else
+                    prevRegions.addAll(selectRegion(indexEnd-1));
             }
             indexEnd++;
         }         
@@ -207,7 +229,6 @@
         StructureSkipSuggestion previousRegion=new StructureSkipSuggestion();
         previousRegion.setSkipLocations(startSkip, endSkip, indexStart, indexEnd);
         prevRegions.add(previousRegion);
-        
         addSeperatorIncludingRegion_Backwards(prevRegions, previousRegion);
         addSeparatorIncludingRegion_Forwards(prevRegions, previousRegion);            
         return prevRegions;
@@ -231,22 +252,97 @@
     private void addSeparatorIncludingRegion_Forwards(
             ArrayList<StructureSkipSuggestion> regions,
             StructureSkipSuggestion aRegion) throws IOException {
-        if(isSeparatorStartingLine(aRegion.getEndSkip())){
-            IndentInfo startSkip3=IndentInfo.cloneIndentInfo(aRegion.getStartSkip());
-            IndentInfo endSkip3=IndentInfo.cloneIndentInfo(aRegion.getEndSkip());
-            int indentShift=separatorIndent(endSkip3)- endSkip3.getIndentValue();
-            endSkip3.setTokensSeen(endSkip3.getTokensSeen()+indentShift);
+        if(isSeparatorStartingLine(aRegion.getIndexHistoryEnd())){
+            IndentInfo startSkip=IndentInfo.cloneIndentInfo(aRegion.getStartSkip());
+            IndentInfo endSkip=IndentInfo.cloneIndentInfo(aRegion.getEndSkip());
+            int indentShift=separatorIndent(aRegion.getIndexHistoryEnd())- endSkip.getIndentValue();
+            endSkip.setTokensSeen(endSkip.getTokensSeen()+indentShift);
             StructureSkipSuggestion previousRegion3=new StructureSkipSuggestion();
-            previousRegion3.setSkipLocations(startSkip3, endSkip3, aRegion.getIndexHistoryStart(), aRegion.getIndexHistoryEnd());
+            previousRegion3.setSkipLocations(startSkip, endSkip, aRegion.getIndexHistoryStart(), aRegion.getIndexHistoryEnd());
             regions.add(previousRegion3);
         }
     }
+
+    private ArrayList<StructureSkipSuggestion> getPriorRegions(int pos)
+    throws IOException {
+        ArrayList<StructureSkipSuggestion> priorRegions= new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> prevRegions=selectPrevRegion(pos);
+        int bwMax=Math.max(pos-MAX_NR_OF_LINES, 0);
+        int nrOfStructures=0;
+        do{
+            nrOfStructures+=1;
+            if(!prevRegions.isEmpty())
+                pos=prevRegions.get(0).getIndexHistoryStart();
+            prevRegions=selectPrevRegion(pos);
+            priorRegions.addAll(prevRegions);
+        }while (pos>bwMax && nrOfStructures< MAX_NR_OF_STRUCTURES && !prevRegions.isEmpty());            
+        return priorRegions;
+    }
+
+    private ArrayList<StructureSkipSuggestion> getCurrentAndNextSkipSuggestions(int failureIndex)
+    throws IOException {
+        ArrayList<StructureSkipSuggestion> nextRegions= new ArrayList<StructureSkipSuggestion>();
+        ArrayList<StructureSkipSuggestion> currRegions=selectRegion(failureIndex);
+        int fwMax=failureIndex+MAX_NR_OF_LINES;
+        int lineIndex=failureIndex;
+        int nrOfStructs=0;
+        do{
+            nrOfStructs++;
+            for (StructureSkipSuggestion r : currRegions) {
+                if(r.getAdditionalTokens().length==0)
+                    nextRegions.add(r);
+            }            
+            if(!currRegions.isEmpty()){
+                lineIndex=currRegions.get(0).getIndexHistoryEnd();
+                System.out.println(currRegions.get(0).getIndexHistoryStart()+" => "+ currRegions.get(0).getIndexHistoryEnd());
+                currRegions=selectRegion(currRegions.get(0).getIndexHistoryEnd());
+            }
+        }while (nrOfStructs<MAX_NR_OF_STRUCTURES && lineIndex<fwMax && !currRegions.isEmpty());
+        return nextRegions;
+    }
     
-    private int backwardsSkip(int indexLine, boolean onClosing) throws IOException { 
+    private ArrayList<Integer> findCurrentEnd(int indexStartLine) throws IOException{
+        int indentStartLine=separatorIndent(indexStartLine);        
+        boolean hasIndentChilds=false;
+        boolean isSecondLine=true;
+        ArrayList<Integer> endLocations=new ArrayList<Integer>();
+        int indexNextLine=skipLine(indexStartLine);        
+        while(myParser.currentToken!=SGLR.EOF){            
+            IndentInfo nextLine = getHistory().getLine(indexNextLine);
+            int indentSkipPosition=nextLine.getIndentValue();
+            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
+            switch (shift) {
+            case DEDENT:               
+                endLocations.add(indexNextLine);                
+                return endLocations;                
+            case INDENT:
+                hasIndentChilds=true;
+                break;
+            case SAME_INDENT:
+                if(hasIndentChilds && isScopeClosingLine(indexNextLine)){
+                    indexNextLine = skipLine(indexNextLine);
+                    endLocations.add(indexNextLine);
+                    return endLocations;
+                }
+                if((!isSecondLine || !isScopeOpeningLine(indexNextLine)) && !isSeparatorStartingLine(indexNextLine)){
+                    endLocations.add(indexNextLine);
+                    return endLocations;
+                }
+                break;
+            default:
+                break;
+            }
+            isSecondLine=false;
+            indexNextLine=skipLine(indexNextLine);            
+        }
+        endLocations.add(getHistory().getIndexLastLine()); //EOF
+        return endLocations;
+    }
+    
+    private int findPreviousBegin(int indexLine, boolean onClosing) throws IOException { 
         int indentValue = getHistory().getLine(indexLine).getIndentValue();
         boolean sawChilds=false;
         boolean closingSeen=onClosing;
-        boolean openingSeen=false;
         boolean ignoreSeps=!isSeparatorStartingLine(indexLine);
         int indexHistoryLines=indexLine;
         while(indexHistoryLines>0){
@@ -261,7 +357,7 @@
             case INDENT:      
                 if(!ignoreSeps && !isSeparatorStartingLine(indexHistoryLines) && separatorIndent(indexLine)==indentSkipPosition)
                     return indexHistoryLines;
-                sawChilds=true; //TODO: lastChild instead of previous struct?
+                sawChilds=true;
                 break;
             case SAME_INDENT: 
                 if(!sawChilds && isScopeClosingLine(indexHistoryLines)){
@@ -270,86 +366,65 @@
                     closingSeen=true;
                 }
                 else
-                    if(sawChilds && isScopeOpeningLine(indexHistoryLines))
-                        openingSeen=true;
-                    else
+                    if(!sawChilds || !isScopeOpeningLine(indexHistoryLines)){                       
                         if(!(ignoreSeps && isSeparatorStartingLine(indexHistoryLines)))
-                            return indexHistoryLines;        
+                            return indexHistoryLines;
+                    }        
                 break;
             default:
                 break;
             }
         }  
-        if(indexLine != 0)
-            return 0;//SOF
-        return -1;
+        return 0;
     }  
     
+    private int findParentBegin(int startLineIndex) throws IOException{
+        int indentStartLine=separatorIndent(startLineIndex); 
+        int indexHistoryLines=startLineIndex;
+        while(indexHistoryLines > 0){
+            indexHistoryLines-=1;            
+            int indentSkipPosition=separatorIndent(indexHistoryLines); //currentLine.getIndentValue();
+            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
+            if (shift==indentShift.DEDENT){
+                if(isScopeOpeningLine(indexHistoryLines))
+                {
+                    IndentInfo prevLine = getHistory().getLine(indexHistoryLines-1);
+                    if((!isScopeClosingLine(indexHistoryLines-1)) && calculateShift(indentSkipPosition, prevLine.getIndentValue())==indentShift.SAME_INDENT){                            
+                        return indexHistoryLines-1;
+                    }                        
+                }                
+                return indexHistoryLines;
+            }            
+        }        
+        return 0; //SOF
+    }
+
     private int separatorIndent(int indexLine) throws IOException {
         int indentValue = getHistory().getLine(indexLine).getIndentValue();
         String lineContent = readLine(indexLine);
         return indentValue+structTokens.separatorIndent(lineContent);
     }
-    
-    private int separatorIndent(IndentInfo line) throws IOException {
-        int indentValue = line.getIndentValue();
-        String lineContent = readLine(line);
-        return indentValue+structTokens.separatorIndent(lineContent);
-    }
 
-    private boolean isScopeOpeningLine(IndentInfo line) throws IOException {
-        String lineContent = readLine(line);
-        return structTokens.isScopeOpeningLine(lineContent);
-    }
-    
     private boolean isScopeOpeningLine(int index) throws IOException {
         String lineContent = readLine(index);
         return structTokens.isScopeOpeningLine(lineContent);
     }
-    
+
+    private boolean isScopeClosingLine(int index) throws IOException {
+        String lineContent = readLine(index);
+        return structTokens.isScopeClosingLine(lineContent);
+    }
+
     private boolean isSeparatorStartingLine(int index) throws IOException {
         String lineContent = readLine(index);
         return structTokens.isSeparatorStartedLine(lineContent);
     }
-    
-    private boolean isSeparatorStartingLine(IndentInfo line) throws IOException {
-        String lineContent = readLine(line);
-        return structTokens.isSeparatorStartedLine(lineContent);
-    }
-    
+
     private boolean isSeparatorEndingLine(int index) throws IOException {
         String lineContent = readLine(index);
         return structTokens.isSeparatorEndingLine(lineContent);
     }
-    
-    private boolean isSeparatorEndingLine(IndentInfo line) throws IOException {
-        String lineContent = readLine(line);
-        return structTokens.isSeparatorEndingLine(lineContent);
-    }
-    
-    private boolean isSeparatorLine(IndentInfo line) throws IOException {
-        String lineContent = readLine(line);
-        return structTokens.isSeparatorStartedLine(lineContent);
-    }
 
-    private indentShift calculateShift(int indentStartLine, int indentSkipPosition) {
-        int difference=indentStartLine-indentSkipPosition;
-        if(difference>0)
-            return indentShift.DEDENT;
-        if(difference<0)
-            return indentShift.INDENT;
-        return indentShift.SAME_INDENT;
-    } 
-
-    private boolean isScopeClosingLine(int index) throws IOException {
-        String lineContent = readLine(index);
-        return structTokens.isScopeClosingLine(lineContent);
-    }
-    private boolean isScopeClosingLine(IndentInfo line) throws IOException {
-        String lineContent = readLine(line);
-        return structTokens.isScopeClosingLine(lineContent);
-    }
-
     private String readLine(int index) throws IOException {
         while(getHistory().getIndexLastLine()<=index && myParser.currentToken!=SGLR.EOF)
             getHistory().readRecoverToken(myParser);
@@ -366,264 +441,15 @@
         return lineContent;
     }
 
-    public ArrayList<StructureSkipSuggestion> getPriorSkipSuggestions()
-            throws IOException {
-        int pos=failureIndex;
-        return getPriorRegions(pos);
+    private indentShift calculateShift(int indentStartLine, int indentSkipPosition) {
+        int difference=indentStartLine-indentSkipPosition;
+        if(difference>0)
+            return indentShift.DEDENT;
+        if(difference<0)
+            return indentShift.INDENT;
+        return indentShift.SAME_INDENT;
     }
 
-    private ArrayList<StructureSkipSuggestion> getPriorRegions(int pos)
-            throws IOException {
-        ArrayList<StructureSkipSuggestion> priorRegions= new ArrayList<StructureSkipSuggestion>();
-        ArrayList<StructureSkipSuggestion> prevRegions=selectPrevRegion(pos);
-        do{
-            if(!prevRegions.isEmpty())
-                pos=prevRegions.get(0).getIndexHistoryStart();
-            prevRegions=selectPrevRegion(pos);
-            priorRegions.addAll(prevRegions);
-        }while (pos>0 && !prevRegions.isEmpty());            
-        return priorRegions;
-    }
-    
-    public ArrayList<StructureSkipSuggestion> getCurrentAndNextSkipSuggestions()
-    throws IOException {
-        ArrayList<StructureSkipSuggestion> nextRegions= new ArrayList<StructureSkipSuggestion>();
-        ArrayList<StructureSkipSuggestion> currRegions=selectRegion(failureIndex);
-        int i=0;
-        do{
-            i++;
-            for (StructureSkipSuggestion r : currRegions) {
-                if(r.getAdditionalTokens().length==0)
-                nextRegions.add(r);
-            }            
-            if(!currRegions.isEmpty()){
-                System.out.println(currRegions.get(0).getIndexHistoryStart()+" => "+ currRegions.get(0).getIndexHistoryEnd());
-                currRegions=selectRegion(currRegions.get(0).getIndexHistoryEnd(), currRegions.get(0).getEndSkip());
-            }
-        }while (i<10 && !currRegions.isEmpty());
-        return nextRegions;
-    }
-
-    public ArrayList<StructureSkipSuggestion> getSibblingBackwardSuggestions()
-            throws IOException {
-        ArrayList<StructureSkipSuggestion> bwSkips=new ArrayList<StructureSkipSuggestion>();
-        ArrayList<StructureSkipSuggestion> priorSiblings=getPriorRegions(failureIndex);
-        ArrayList<StructureSkipSuggestion> currentRegionSuggestions=selectRegion(failureIndex);
-        for (StructureSkipSuggestion currSugestion : currentRegionSuggestions) {
-            for (int i = 0; i < priorSiblings.size(); i++) {
-                StructureSkipSuggestion priorSuggestion=priorSiblings.get(i);
-                if(currSugestion.getAdditionalTokens().length==0){//ignore suggestions based on adding the separator
-                    StructureSkipSuggestion mergedSkip=mergeRegions(currSugestion, priorSuggestion);
-                    bwSkips.add(mergedSkip);
-                }
-            }
-        }
-        return bwSkips;
-    }
-
-    private StructureSkipSuggestion mergeRegions(StructureSkipSuggestion fwSuggestion,
-            StructureSkipSuggestion bwSuggestion) {
-        StructureSkipSuggestion mergedSkip=new StructureSkipSuggestion();
-        mergedSkip.setSkipLocations(IndentInfo.cloneIndentInfo(bwSuggestion.getStartSkip()), IndentInfo.cloneIndentInfo(fwSuggestion.getEndSkip()), bwSuggestion.getIndexHistoryStart(), fwSuggestion.getIndexHistoryEnd());
-        mergedSkip.setAdditionalTokens(bwSuggestion.getAdditionalTokens());
-        return mergedSkip;
-    }
-
-    public ArrayList<StructureSkipSuggestion> getSibblingForwardSuggestions()
-            throws IOException {
-        ArrayList<StructureSkipSuggestion> fwSkips=new ArrayList<StructureSkipSuggestion>();
-        ArrayList<StructureSkipSuggestion> nextSiblings=getCurrentAndNextSkipSuggestions();
-        ArrayList<StructureSkipSuggestion> prevRegionSuggestions=selectPrevRegion(failureIndex);
-        for (StructureSkipSuggestion priorSuggestion : prevRegionSuggestions) {
-            for (int i = 0; i < nextSiblings.size(); i++) {
-                StructureSkipSuggestion nextSuggestion=nextSiblings.get(i);
-                StructureSkipSuggestion mergedSkip=mergeRegions(nextSuggestion, priorSuggestion);
-                fwSkips.add(mergedSkip);            
-            }
-        }
-        return fwSkips;
-    }
-
-    public ArrayList<StructureSkipSuggestion> getSibblingSurroundingSuggestions()
-            throws IOException {
-        ArrayList<StructureSkipSuggestion> surroundingSkips=new ArrayList<StructureSkipSuggestion>();
-        ArrayList<StructureSkipSuggestion> priorSiblings=getPriorRegions(failureIndex);
-        ArrayList<StructureSkipSuggestion> nextSiblings=getCurrentAndNextSkipSuggestions();
-        if(nextSiblings.size()>1 && priorSiblings.size()>0){
-            nextSiblings.remove(0);
-            StructureSkipSuggestion nextSuggestion=null;
-            StructureSkipSuggestion priorSuggestion=null;
-            int j=0;
-            int i = 0;            
-            while(i < nextSiblings.size() || j < priorSiblings.size()) {                
-                if (i<nextSiblings.size()) {
-                    nextSuggestion = nextSiblings.get(i); 
-                    i++;
-                }                         
-                if (j<priorSiblings.size()) {
-                    priorSuggestion = priorSiblings.get(j);  
-                    j++;
-                }
-                StructureSkipSuggestion mergedSkip=mergeRegions(nextSuggestion, priorSuggestion);
-                surroundingSkips.add(mergedSkip);
-                if (j<priorSiblings.size()) {
-                    priorSuggestion = priorSiblings.get(j); 
-                    if(priorSuggestion.getAdditionalTokens().length!=0){
-                        StructureSkipSuggestion mergedSkipPlus=mergeRegions(nextSuggestion, priorSuggestion);
-                        surroundingSkips.add(mergedSkipPlus);
-                        j++;
-                    }
-                }
-            }
-        }
-        return surroundingSkips;
-    }
-
-    /* (non-Javadoc)
-     * @see org.spoofax.jsglr.IStructureSkipper#getZoomOnPreviousSuggestions(org.spoofax.jsglr.StructureSkipSuggestion)
-     */
-    public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(StructureSkipSuggestion prevRegion) throws IOException{
-        ArrayList<StructureSkipSuggestion> result = new ArrayList<StructureSkipSuggestion>();
-        if(!prevRegion.canBeDecomposed()){ 
-            //result.add(prevRegion);
-            return result;
-        }
-        ArrayList<Integer> indentLevels=new ArrayList<Integer>();       
-        for (int i = prevRegion.getIndexHistoryStart(); i < prevRegion.getIndexHistoryEnd(); i++) {
-            int indentOfLine=getHistory().getLine(i).getIndentValue();
-            if(!indentLevels.contains(indentOfLine))
-                indentLevels.add(indentOfLine);
-        }
-        Collections.sort(indentLevels);
-        indentLevels.remove(0);       
-        System.out.println(indentLevels);        
-        int indentOfLevel;
-        int lineIndex;
-        for (int level = 0; level < indentLevels.size(); level++) {
-            indentOfLevel=indentLevels.get(level);
-            lineIndex = prevRegion.getIndexHistoryStart();            
-            while (lineIndex < prevRegion.getIndexHistoryEnd()) {
-                int indentOfLine=getHistory().getLine(lineIndex).getIndentValue();
-                if(indentOfLine==indentOfLevel){                    
-                    ArrayList<StructureSkipSuggestion> regions = selectRegion(lineIndex);                     
-                    if(regions.size()>0){
-                        lineIndex=regions.get(0).getIndexHistoryEnd();
-                        Collections.reverse(regions);
-                        result.addAll(regions);
-                    }
-                    else
-                        lineIndex++;
-                }
-                else
-                    lineIndex++;
-            }
-       }    
-        Collections.reverse(result);
-        return result;
-    }
-
-    
-
-    public void setFailureIndex(int failureIndex) {
-       this.failureIndex=failureIndex;
-    }
-    
-    private ArrayList<IndentInfo> findCurrentEnd(IndentInfo startLine) throws IOException{
-        getHistory().setTokenIndex(startLine.getTokensSeen());
-        int indentStartLine=separatorIndent(startLine);        
-        boolean hasIndentChilds=false;
-        boolean isSecondLine=true;
-        ArrayList<IndentInfo> endLocations=new ArrayList<IndentInfo>();
-        IndentInfo nextLine = skipLine(startLine);
-        while(myParser.currentToken!=SGLR.EOF){            
-            int indentSkipPosition=nextLine.getIndentValue();
-            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
-            switch (shift) {
-            case DEDENT:               
-                endLocations.add(nextLine);                
-                return endLocations;                
-            case INDENT:
-                hasIndentChilds=true;
-                break;
-            case SAME_INDENT:
-                if(hasIndentChilds && isScopeClosingLine(nextLine)){
-                    nextLine = skipLine(nextLine);
-                    endLocations.add(nextLine);
-                    return endLocations;
-                }
-                if((!isSecondLine || !isScopeOpeningLine(nextLine)) && !isSeparatorLine(nextLine)){
-                     endLocations.add(nextLine);
-                     return endLocations;
-                }
-                break;
-            default:
-                break;
-            }
-            isSecondLine=false;
-            nextLine=skipLine(nextLine);
-        }
-        endLocations.add(nextLine); //EOF
-        return endLocations;
-    }
-    
-    private ArrayList<Integer> findCurrentEnd(int indexStartLine) throws IOException{
-        IndentInfo startLine=getHistory().getLine(indexStartLine);
-        int indentStartLine=separatorIndent(startLine);        
-        boolean hasIndentChilds=false;
-        boolean isSecondLine=true;
-        ArrayList<Integer> endLocations=new ArrayList<Integer>();
-        int indexNextLine=skipLine(indexStartLine);        
-        while(myParser.currentToken!=SGLR.EOF){            
-            IndentInfo nextLine = getHistory().getLine(indexNextLine);
-            int indentSkipPosition=nextLine.getIndentValue();
-            indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
-            switch (shift) {
-            case DEDENT:               
-                endLocations.add(indexNextLine);                
-                return endLocations;                
-            case INDENT:
-                hasIndentChilds=true;
-                break;
-            case SAME_INDENT:
-                if(hasIndentChilds && isScopeClosingLine(nextLine)){
-                    indexNextLine = skipLine(indexNextLine);
-                    endLocations.add(indexNextLine);
-                    return endLocations;
-                }
-                if((!isSecondLine || !isScopeOpeningLine(nextLine)) && !isSeparatorLine(nextLine)){
-                     endLocations.add(indexNextLine);
-                     return endLocations;
-                }
-                break;
-            default:
-                break;
-            }
-            isSecondLine=false;
-            indexNextLine=skipLine(indexNextLine);            
-        }
-        endLocations.add(getHistory().getIndexLastLine()); //EOF
-        return endLocations;
-    }
-    
-    private IndentInfo skipLine(IndentInfo line) throws IOException {
-        IndentationHandler skipIndentHandler=new IndentationHandler();
-        getHistory().setTokenIndex(Math.max(0, line.getTokensSeen()-1));
-        int newLineNumber=line.getLineNumber();
-        skipIndentHandler.setInLeftMargin(false);
-        getHistory().readRecoverToken(myParser);
-        while(myParser.currentToken!=SGLR.EOF){
-            getHistory().readRecoverToken(myParser);
-            if(myParser.currentToken=='\n')
-                newLineNumber++;
-            skipIndentHandler.updateIndentation(myParser.currentToken);
-            if(skipIndentHandler.lineMarginEnded()){
-                IndentInfo result = new IndentInfo(newLineNumber, getHistory().getTokenIndex()-1, skipIndentHandler.getIndentValue());
-                return result;
-            }            
-        }
-        return new IndentInfo(newLineNumber+1, getHistory().getTokenIndex()-1, 0);// EOF
-    }
-    
     private int skipLine(int indexLine) throws IOException {
         IndentInfo line =getHistory().getLine(indexLine);
         IndentationHandler skipIndentHandler=new IndentationHandler();
@@ -639,5 +465,13 @@
         }
         return getHistory().getIndexLastLine();// EOF
     }
+    
+    private StructureSkipSuggestion mergeRegions(StructureSkipSuggestion fwSuggestion,
+            StructureSkipSuggestion bwSuggestion) {
+        StructureSkipSuggestion mergedSkip=new StructureSkipSuggestion();
+        mergedSkip.setSkipLocations(IndentInfo.cloneIndentInfo(bwSuggestion.getStartSkip()), IndentInfo.cloneIndentInfo(fwSuggestion.getEndSkip()), bwSuggestion.getIndexHistoryStart(), fwSuggestion.getIndexHistoryEnd());
+        mergedSkip.setAdditionalTokens(bwSuggestion.getAdditionalTokens());
+        return mergedSkip;
+    }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-12-16 14:25:09 UTC (rev 20423)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-12-16 16:12:22 UTC (rev 20424)
@@ -14,14 +14,6 @@
     private StructureSkipSuggestion erroneousRegion;    
     private int errorDetectionLocation;
     private static int NR_OF_LINES_TILL_SUCCESS=3;
-    private boolean useDebugMode;
-    
-    /**
-     * Prints information about the selected regions to the console
-     */
-    public void setUseDebugMode(boolean useDebugMode) {
-        this.useDebugMode = useDebugMode;
-    }
 
     /**
      * Supports error recovery by selecting the region containing the error
@@ -78,71 +70,51 @@
      */
     public boolean selectErroneousFragment() throws IOException { 
         NewStructureSkipper newRegionSelector=new NewStructureSkipper(myParser);
-        //StructureSkipper regionSelector = new StructureSkipper(myParser);//TODO: use newregionSelector
-        //regionSelector.clear();
-        //regionSelector.setFailureIndex(getHistory().getIndexLastLine());
-        newRegionSelector.setFailureIndex(getHistory().getIndexLastLine());
+        int failureIndex=getHistory().getIndexLastLine();
         errorDetectionLocation=getHistory().getIndexLastToken();
-        ArrayList<StructureSkipSuggestion> prevRegions=newRegionSelector.getPreviousSkipSuggestions();
-        logRecoverInfo("PREVIOUS REGION");        
+        ArrayList<StructureSkipSuggestion> prevRegions=newRegionSelector.getPreviousSkipSuggestions(failureIndex);
+        //System.out.println("PREVIOUS REGION");        
         if(trySetErroneousRegion(prevRegions)){
             ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
             trySetErroneousRegion(decomposedRegions);
             return true;
         }        
-        ArrayList<StructureSkipSuggestion> currentRegions=newRegionSelector.getCurrentSkipSuggestions();
-        logRecoverInfo("CURRENT REGION");
+        ArrayList<StructureSkipSuggestion> currentRegions=newRegionSelector.getCurrentSkipSuggestions(failureIndex);
+        //System.out.println("CURRENT REGION");
         if(trySetErroneousRegion(currentRegions)){            
             return true;
         }
-        logRecoverInfo("PRIOR REGIONS");
-        ArrayList<StructureSkipSuggestion> priorRegions=newRegionSelector.getPriorSkipSuggestions();
+        //System.out.println("PRIOR REGIONS");
+        ArrayList<StructureSkipSuggestion> priorRegions=newRegionSelector.getPriorSkipSuggestions(failureIndex);
         if(trySetErroneousRegion(priorRegions)){
             ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
             trySetErroneousRegion(decomposedRegions);
             return true;
         }
-        logRecoverInfo("FW-SIB REGIONS");
-        ArrayList<StructureSkipSuggestion> siblingForWardRegions=newRegionSelector.getSibblingForwardSuggestions();
+        //System.out.println("FW-SIB REGIONS");
+        ArrayList<StructureSkipSuggestion> siblingForWardRegions=newRegionSelector.getSibblingForwardSuggestions(failureIndex);
         if(trySetErroneousRegion(siblingForWardRegions)){            
             return true;
         }
-        logRecoverInfo("BW-SIB REGIONS");
-        ArrayList<StructureSkipSuggestion> siblingBackWardRegions=newRegionSelector.getSibblingBackwardSuggestions();
+        //System.out.println("BW-SIB REGIONS");
+        ArrayList<StructureSkipSuggestion> siblingBackWardRegions=newRegionSelector.getSibblingBackwardSuggestions(failureIndex);
         if(trySetErroneousRegion(siblingBackWardRegions)){            
             return true;
         }
-        logRecoverInfo("SURROUNDING-SIB REGIONS");        
-        ArrayList<StructureSkipSuggestion> siblingSurroundingRegions=newRegionSelector.getSibblingSurroundingSuggestions();
+        //System.out.println("SURROUNDING-SIB REGIONS");        
+        ArrayList<StructureSkipSuggestion> siblingSurroundingRegions=newRegionSelector.getSibblingSurroundingSuggestions(failureIndex);
         if(trySetErroneousRegion(siblingSurroundingRegions)){            
             return true;
         }
-        logRecoverInfo("PARENT REGION");
-        ArrayList<StructureSkipSuggestion> parentRegion=newRegionSelector.getParentSkipSuggestions();
+        //System.out.println("PARENT REGION");
+        ArrayList<StructureSkipSuggestion> parentRegion=newRegionSelector.getParentSkipSuggestions(failureIndex);
         if(trySetErroneousRegion(parentRegion)){            
             return true;
         }
-        /*
-        else {
-            logRecoverInfo("PREFIX");
-            erroneousRegion=regionSelector.getErroneousPrefix();
-            logRecoverInfo(getHistory().getFragment(erroneousRegion));
-            ArrayList<StructureSkipSuggestion> decomposedRegions=regionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
-            boolean findSmallerPart=trySetErroneousRegion(decomposedRegions);
-            if(findSmallerPart){
-                ArrayList<StructureSkipSuggestion> childRegions=regionSelector.getPickErroneousChild(erroneousRegion);
-                trySetErroneousRegion(childRegions);
-            }
-            return findSmallerPart; //false;
-        }*/
-        erroneousRegion=new StructureSkipSuggestion();
-        if(getHistory().getIndexLastLine()>=0){
-            erroneousRegion.setSkipLocations(getHistory().getLine(0), getHistory().getLastLine(), 0, getHistory().getIndexLastLine());
-            ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
-            boolean findSmallerPart=trySetErroneousRegion(decomposedRegions);
-            return findSmallerPart; //false;
-        }
-        return false;
+        erroneousRegion=newRegionSelector.getErroneousPrefix();

(761 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Wed Dec 16 17:16:37 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 16:16:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20425 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912161616.nBGGGbZE003388@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 16:16:37 +0000 (Wed, 16 Dec 2009)
New Revision: 20425

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20425&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StartSymbolException.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java

Log:
Throw a StartSymbolException when a start symbol can't be found

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-12-16 16:12:22 UTC (rev 20424)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-12-16 16:16:37 UTC (rev 20425)
@@ -280,7 +280,7 @@
         if (sort != null && filterTopSort) {
             t = selectOnTopSort(t, sort);
             if (t == null)
-                throw new SGLRException(parser, "Desired start symbol not found");
+                throw new StartSymbolException(parser, "Desired start symbol not found");
         }
         
         return t;

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StartSymbolException.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StartSymbolException.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StartSymbolException.java	2009-12-16 16:16:37 UTC (rev 20425)
@@ -0,0 +1,16 @@
+package org.spoofax.jsglr;
+
+/**
+ * Exception thrown when the specified start symbol could not be found.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class StartSymbolException extends SGLRException {
+
+    private static final long serialVersionUID = 7793294984269018514L;
+
+    public StartSymbolException(SGLR parser, String message) {
+        super(parser, message);
+    }
+
+}



From L.C.L.Kats at tudelft.nl  Wed Dec 16 17:24:12 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 16:24:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20426 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.stratego/editor
	org.strategoxt.imp.feature org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.updatesite
Message-ID: <200912161624.nBGGOCZT003501@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 16:24:11 +0000 (Wed, 16 Dec 2009)
New Revision: 20426

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20426&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseTableProvider.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Better concrete syntax and language extension support:

Introduced the concept of unmanaged parse tables, which can be used by
editors to parse with an extended syntax. For example, the
Stratego-Sugar editor now specifies that it can be used for any
Stratego* parse table, which means that it can use a
StrategoWebDSL.tbl from somewhere in the workspace when that syntax
demanded by a .meta file but no "proper" editor exists for it.


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv	2009-12-16 16:24:11 UTC (rev 20426)
@@ -4,9 +4,11 @@
 
 colorer Extension
   
+  /*
               _.ToMetaExpr:   _ 255 255 255 bold
   environment _.ToMetaExpr:   _ 210 230 220
   environment _.FromMetaExpr: _ 255 255 255
+  */
   
   environment var:
     0 128 64

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar.main.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar.main.esv	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar.main.esv	2009-12-16 16:24:11 UTC (rev 20426)
@@ -14,3 +14,4 @@
   extensions    : str
   table         : include/Stratego-Sugar.tbl
   start symbols : Module
+  unmanaged table : Stratego*
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-16 16:24:11 UTC (rev 20426)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.2.0.3"
+      version="0.2.1"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-12-16 16:24:11 UTC (rev 20426)
@@ -45,6 +45,7 @@
    Extensions           -- R [ KW["extensions"] KW[":"] _1 ],
    Description          -- R [ KW["description"] KW[":"] _1 ],
    Table                -- R [ KW["table"] KW[":"] _1 ],
+   UnmanagedTablePrefix -- R [ H [ KW["unmanaged"] KW["table"] ] H hs=0 [ KW[":"] _1 KW["*"] ] ],
    StartSymbols         -- R [ H [ KW["start"] KW["symbols"] ] KW[":"] _1 ],
    NoStartSymbols       -- KW["_"],
    URL                  -- R [ KW["url"] KW[":"] _1 ],

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	2009-12-16 16:24:11 UTC (rev 20426)
@@ -43,6 +43,7 @@
     "url"             ":" URL            -> LanguageProperty {cons("URL")}
     "extends"         ":" PropertyValues -> LanguageProperty {cons("Extends")}
     "aliases"         ":" PropertyValues -> LanguageProperty {cons("Aliases")} %% deprecated
+    "unmanaged" "table" ":" Id "*"        -> LanguageProperty {cons("UnmanagedTablePrefix")}
    
      %% Syntax properties
      

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-12-16 16:24:11 UTC (rev 20426)
@@ -128,7 +128,8 @@
 	public void updateResource(IResource resource, IProgressMonitor monitor, boolean startup) {
 		Environment.assertLock();
 		
-		if (resource.getName().endsWith(".packed.esv")) {
+		String name = resource.getName();
+		if (name.endsWith(".packed.esv")) {
 			IResource source = getSourceDescriptor(resource);
 			
 			if (asyncIgnoreOnce.contains(resource)) {
@@ -143,9 +144,13 @@
 				// TODO: Prevent duplicate builds triggered this way...?
 				getBuilder().updateResource(source, monitor);
 			} else if (resource.exists()) {
-				monitor.subTask("Loading " + resource.getName());
+				monitor.subTask("Loading " + name);
 				loadPackedDescriptor(resource);
 			}
+		} else if (name.endsWith(".tbl")) {
+			name = name.substring(0, name.length() - 4);
+			if (resource instanceof IFile)
+				Environment.registerUnmanagedParseTable(name, (IFile) resource);
 		}
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-16 16:24:11 UTC (rev 20426)
@@ -6,6 +6,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.imp.language.Language;
@@ -24,6 +25,7 @@
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.ParseTableProvider;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.IMPJSGLRLibrary;
 import org.strategoxt.imp.runtime.stratego.IMPLibrary;
@@ -54,6 +56,8 @@
 	
 	private final static Map<String, ParseTable> parseTables;
 	
+	private final static Map<String, ParseTableProvider> unmanagedTables;
+	
 	private final static Map<String, Descriptor> descriptors;
 	
 	private final static WrappedAstNodeFactory wrappedAstNodeFactory;
@@ -66,6 +70,7 @@
 		parseTableManager = new ParseTableManager(factory);
 		parseTables = Collections.synchronizedMap(new HashMap<String, ParseTable>());
 		descriptors = Collections.synchronizedMap(new HashMap<String, Descriptor>());
+		unmanagedTables = Collections.synchronizedMap(new HashMap<String, ParseTableProvider>());
 		wrappedAstNodeFactory = new WrappedAstNodeFactory();
 		IMPJSGLRLibrary.init();
 	}
@@ -166,8 +171,10 @@
 		
 		Debug.startTimer();
 		ParseTable table = parseTableManager.loadFromStream(parseTable);	
-		parseTables.put(language.getName(), table);
-		Debug.stopTimer("Parse table loaded: " + language.getName());
+		if (language != null) {
+			parseTables.put(language.getName(), table);
+			Debug.stopTimer("Parse table loaded: " + language.getName());
+		}
 		return table;
 	}
 	
@@ -193,6 +200,31 @@
 		}
 	}
 	
+	public static void registerUnmanagedParseTable(String name, IFile file) {
+		unmanagedTables.put(name, new ParseTableProvider(file));
+		synchronized (descriptors) { // object is its own syncroot, per JavaDoc
+			for (Descriptor descriptor : descriptors.values()) {
+				if (descriptor.isUsedForUnmanagedParseTable(name)) {
+					try {
+						descriptor.reinitialize(descriptor);
+					} catch (BadDescriptorException e) {
+						Environment.logException("Could not reinitialize descriptor", e);
+					}
+				}
+			}
+		}
+	}
+	
+	public static ParseTable getUnmanagedParseTable(String name) {
+		ParseTableProvider result = unmanagedTables.get(name);
+		try {
+			return result == null ? null : result.get();
+		} catch (Exception e) {
+			Environment.logException("Could not read unmanaged parse table " + name, e);
+			return null;
+		}
+	}
+	
 	public static Descriptor getDescriptor(Language language) {
 		return descriptors.get(language.getName());
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-16 16:24:11 UTC (rev 20426)
@@ -89,6 +89,7 @@
 	 * @see AbstractService#reinitialize(Descriptor)
 	 */
 	public void reinitialize(Descriptor newDescriptor) throws BadDescriptorException {
+		// Note: may also be reinitialized with the same descriptor
 		for (AbstractService service : services.keySet())
 			service.reinitialize(newDescriptor);
 		attachedFiles = null;
@@ -168,6 +169,11 @@
 		return getProperty("StartSymbols", null);
 	}
 	
+	public boolean isUsedForUnmanagedParseTable(String languageName) {
+		String prefix = getProperty("UnmanagedTablePrefix", null);
+		return prefix != null && languageName.startsWith(prefix);
+	}
+	
 	public boolean isDynamicallyLoaded() {
 		return dynamicallyLoaded;
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseTableProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseTableProvider.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseTableProvider.java	2009-12-16 16:24:11 UTC (rev 20426)
@@ -0,0 +1,34 @@
+package org.strategoxt.imp.runtime.dynamicloading;
+
+import java.io.IOException;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.runtime.CoreException;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.ParseTable;
+import org.strategoxt.imp.runtime.Debug;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * Lazily loads a parse table from a resource.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParseTableProvider {
+	
+	private final IFile file;
+	
+	private ParseTable table;
+	
+	public ParseTableProvider(IFile file) {
+		this.file = file;
+	}
+	
+	public ParseTable get() throws InvalidParseTableException, IOException, CoreException {
+		if (table != null) return table;
+		Debug.startTimer();
+		ParseTable table = Environment.registerParseTable(null, file.getContents(true));
+		Debug.stopTimer("Parse table loaded:" + file.getName());
+		return this.table = table;
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-12-16 16:24:11 UTC (rev 20426)
@@ -28,7 +28,7 @@
  */ 
 public class JSGLRI extends AbstractSGLRI {
 	
-	private final ParseTable parseTable;
+	private ParseTable parseTable;
 	
 	private RecoverAlgorithm recoverHandler = new NoRecovery();
 	
@@ -70,6 +70,11 @@
 		return super.getController().getIPrsStream();
 	}
 	
+	public void setParseTable(ParseTable parseTable) {
+		this.parseTable = parseTable;
+		resetState();
+	}
+	
 	@Override
 	protected ATerm doParseNoImplode(char[] inputChars, String filename)
 			throws TokenExpectedException, BadTokenException, SGLRException, IOException {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-16 16:24:11 UTC (rev 20426)
@@ -31,6 +31,7 @@
 import org.spoofax.jsglr.ParseTable;
 import org.spoofax.jsglr.ParseTimeoutException;
 import org.spoofax.jsglr.SGLRException;
+import org.spoofax.jsglr.StartSymbolException;
 import org.spoofax.jsglr.StructureRecoveryAlgorithm;
 import org.spoofax.jsglr.TokenExpectedException;
 import org.spoofax.jsglr.Tools;
@@ -45,6 +46,7 @@
 import org.strategoxt.imp.runtime.parser.tokens.SGLRTokenIterator;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKindManager;
+import org.strategoxt.imp.runtime.services.MetaFileReader;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 
 import aterm.ATerm;
@@ -81,6 +83,8 @@
 	
 	private EditorState editor;
 	
+	private String metaSyntax;
+	
 	private volatile boolean isStartupParsed;
 	
 	private volatile boolean disallowColorer;
@@ -165,7 +169,6 @@
     }
 
     public void initialize(IPath filePath, ISourceProject project, IMessageHandler messages) {
-    	
 		this.path = filePath;
 		this.project = project;
     }
@@ -205,9 +208,10 @@
 			parseLock.lock();
 			//System.out.println("PARSE! " + System.currentTimeMillis()); // DEBUG
 			
+			processMetaFile();			
+			char[] inputChars = input.toCharArray();
+			
 			Debug.startTimer();
-			
-			char[] inputChars = input.toCharArray();
 				
 			if (monitor.isCanceled()) return null;
 			ATerm asfix = parser.parseNoImplode(inputChars, filename);
@@ -225,6 +229,13 @@
 			
 			// TODO: is coloring, then error marking best?
 		
+		} catch (StartSymbolException e) {
+			if (metaSyntax != null) {
+				// Unmanaged parse tables may have different start symbols;
+				// try again without the standard start symbol
+				parser.setStartSymbol(null);
+				return parse(input, monitor);
+			}
 		} catch (ParseTimeoutException e) {
 			// TODO: Don't show stack trace for this
 			if (monitor.isCanceled()) return null;
@@ -257,6 +268,20 @@
 		return monitor.isCanceled() ? null : currentAst;
 	}
 
+	private void processMetaFile() {
+		String metaFile = getPath().removeFileExtension().addFileExtension("meta").toOSString();
+		String metaSyntax = MetaFileReader.readSyntax(metaFile);
+		if (metaSyntax != this.metaSyntax) {
+			ParseTable table = Environment.getUnmanagedParseTable(metaSyntax);
+			if (table == null) {
+				Environment.logException("Could not find descriptor or unmanaged parse table for language " + metaSyntax);
+			} else {
+				parser.setParseTable(table);				
+			}
+			this.metaSyntax = metaSyntax;
+		}
+	}
+
 	private void onParseCompleted(final IProgressMonitor monitor) {
 		assert parseLock.isHeldByCurrentThread();
 		
@@ -402,6 +427,8 @@
 		} catch (IOException e) {
 			Environment.logException("Forced parse failed", e);
 		} catch (CoreException e) {
+			if (e.getMessage().contains("Resource is out of sync")) // don't log these
+				return;
 			Environment.logException("Forced parse failed", e);
 		}
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java	2009-12-16 16:24:11 UTC (rev 20426)
@@ -54,6 +54,12 @@
 			if (isExtensionOf(language, languageName))
 				return true;
 			
+			if (getDescriptor().isUsedForUnmanagedParseTable(languageName))
+				return true;
+			
+			if (isUnmanagedMatchAvailable(languageName))
+				return false; // better alternatives exist
+			
 			if (!isExtensionOfAvailable(languageName) && validateByExtension(file))
 				return true;
 
@@ -82,6 +88,15 @@
 		return false;
 	}
 	
+	private boolean isUnmanagedMatchAvailable(String languageName) throws BadDescriptorException {
+		for (Language language : LanguageRegistry.getLanguages()) {
+			Descriptor descriptor = Environment.getDescriptor(language);
+			if (descriptor != null && descriptor.isUsedForUnmanagedParseTable(languageName))
+				return true;
+		}
+		return false;
+	}
+	
 	private boolean isExtensionOfAvailable(String languageName) throws BadDescriptorException {
 		Language myLanguage = getDescriptor().getLanguage(); 
 		for (Language language : LanguageRegistry.getLanguages()) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-12-16 16:16:37 UTC (rev 20425)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-12-16 16:24:11 UTC (rev 20426)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.2.0.3.jar" id="org.strategoxt.imp" version="0.2.0.3">
+   <feature url="features/org.strategoxt.imp_0.2.1.jar" id="org.strategoxt.imp" version="0.2.1">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP"/>



From m.dejonge at tudelft.nl  Wed Dec 16 17:38:26 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 16 Dec 2009 16:38:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20427 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912161638.nBGGcQVB003665@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-16 16:38:26 +0000 (Wed, 16 Dec 2009)
New Revision: 20427

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20427&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java

Log:
removed old functionality not used by newRegionSkip

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2009-12-16 16:24:11 UTC (rev 20426)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2009-12-16 16:38:26 UTC (rev 20427)
@@ -8,23 +8,11 @@
     private final static int MAX_SIZE_NEW_LINE_POINTS = 150;
     private final static int MIN_SIZE_NEW_LINE_POINTS = 50;
     private IndentationHandler indentHandler;
-    private int previousBigReduceIndex;
-    private int bigReduceIndex;    
-    private int indexConstruct; 
-    
-    public int getIndexConstruct() {
-        return indexConstruct;
-    }
 
-    public void setIndexConstruct(int indexConstruct) {
-        this.indexConstruct = indexConstruct;
-    }
-
     private ArrayList<IndentInfo> newLinePoints;      
     public char[] recoverTokenStream;
     private int recoverTokenCount;
     private int tokenIndex;
-    private boolean reduceIndexesSet;
     
     public int getTokenIndex() {
         return tokenIndex;
@@ -43,15 +31,11 @@
         reset();
     }
      
-    public void reset(){
+    private void reset(){
         newLinePoints.clear();
         recoverTokenStream = new char[5000];
         recoverTokenCount = 0;
-        indexConstruct=0;
         tokenIndex=0;
-        previousBigReduceIndex=0;
-        bigReduceIndex=0;
-        reduceIndexesSet=false;
         indentHandler = new IndentationHandler();
     }
     
@@ -111,10 +95,6 @@
         }
     }
     
-    public boolean constructAfterEmptyLine(){
-        return getConstructPoint().getLineNumber() > newLinePoints.get(indexConstruct-1).getLineNumber()+1;
-    }
-    
     private void keepNewLinePoint(SGLR myParser, boolean inRecoverMode) {
         int indent = indentHandler.getIndentValue();
         IndentInfo newLinePoint= new IndentInfo(myParser.lineNumber, myParser.tokensSeen-1, indent);
@@ -126,57 +106,14 @@
         }
     }
     
-    private void removeOldPoints() {
-        setBigReducePoints();
-        int firstPointIndex = Math.min(previousBigReduceIndex-1, nrOfLines()-MIN_SIZE_NEW_LINE_POINTS);
+    private void removeOldPoints() {        
+        int firstPointIndex = nrOfLines()-MIN_SIZE_NEW_LINE_POINTS;
         ArrayList<IndentInfo> shrinkedList = new ArrayList<IndentInfo>();
         shrinkedList.ensureCapacity(newLinePoints.size());
         shrinkedList.addAll(newLinePoints.subList(firstPointIndex, newLinePoints.size()-1));
         newLinePoints = shrinkedList;
-        bigReduceIndex-=firstPointIndex;
-        previousBigReduceIndex-=firstPointIndex;
     }
 
-    public void setBigReducePoints(){
-        if(reduceIndexesSet==false){
-            setBigReducesFirstTime();
-            return;
-        }
-        int brLength=getBigReducePoint().maxReduceLength();
-        int oldBR=bigReduceIndex;
-        for (int i = newLinePoints.size()-1; i > bigReduceIndex; i--) {
-            IndentInfo point=newLinePoints.get(i);                      
-            if(point.maxReduceLength() >= brLength){                
-                bigReduceIndex = i;
-                previousBigReduceIndex=oldBR;
-                break;
-            }
-        }
-        for (int j = bigReduceIndex-1; j > oldBR; j--) {
-            IndentInfo point=newLinePoints.get(j);                      
-            if(point.maxReduceLength() >= brLength){                
-                previousBigReduceIndex = j;
-                break;
-            }
-        }
-    }
-    
-    private void setBigReducesFirstTime() {
-        bigReduceIndex=0;
-        previousBigReduceIndex=0;
-        int brLength=0;
-        for (int i = 0; i < newLinePoints.size(); i++) {
-            int reduceLength=newLinePoints.get(i).maxReduceLength();
-            if(reduceLength>brLength){
-                previousBigReduceIndex=bigReduceIndex;
-                bigReduceIndex=i;
-                brLength=reduceLength;
-            }            
-        }
-        if(newLinePoints.size()>MIN_SIZE_NEW_LINE_POINTS-1)
-            reduceIndexesSet=true;        
-    }
-
     public String getFragment(int startTok, int endTok) {
         String fragment="";
         for (int i = startTok; i <= endTok; i++) {
@@ -193,8 +130,9 @@
             if(i >= recoverTokenCount)
                 break;
             fragment+= recoverTokenStream[i];
-        }        
-        return fragment;
+        }  
+        String correctedFragment=fragment.substring(skip.getAdditionalTokens().length);
+        return correctedFragment;
     }
     
     public String readLine(int StartTok) {
@@ -209,42 +147,7 @@
         return fragment;
     }
     
-    /*
-     * current construct in navigation
-     */
-    public IndentInfo getConstructPoint() {
-        return newLinePoints.get(indexConstruct);
-    }
-    
-    public IndentInfo getBigReducePoint() {
-        return newLinePoints.get(bigReduceIndex);
-    }   
-    
-    public IndentInfo getPreviousBigReducePoint() {
-        return newLinePoints.get(previousBigReduceIndex);
-    } 
-    
-    public void moveToBigReducePoint() {
-        indexConstruct=bigReduceIndex;
-    }   
-    
-    public void moveToPreviousBigReducePoint() {
-        indexConstruct = previousBigReduceIndex;
-    } 
-    
-    public boolean moveToParentConstruct() {        
-        int loopIndex = indexConstruct-1;//newLinePoints.size()-2;
-        while ( loopIndex >= 0) {
-            if(newLinePoints.get(loopIndex).getIndentValue()< getConstructPoint().getIndentValue()){
-                indexConstruct = loopIndex;  
-                return true;
-            }
-            loopIndex--;
-        }
-        return false;
-    } 
-    
-    public int nrOfLines(){
+    private int nrOfLines(){
         return newLinePoints.size();
     }
     
@@ -254,12 +157,6 @@
         return newLinePoints.get(index);
     }
     
-    public IndentInfo getPreviousLine(){
-        if(indexConstruct==0)
-            return null;
-        return newLinePoints.get(indexConstruct-1);
-    }
-    
     public IndentInfo getLastLine(){
         return newLinePoints.get(newLinePoints.size()-1);
     }
@@ -268,58 +165,6 @@
         return newLinePoints.size()-1;
     }
     
-    public void moveToLastConstruct(){
-        indexConstruct=newLinePoints.size()-1;        
-    }
-
-    public boolean moveToPreviousConstruct() {
-
-        if(indexConstruct<=0)
-            return false;
-        int loopIndex = indexConstruct -1;
-        IndentInfo currentLine=newLinePoints.get(indexConstruct);
-        while ( loopIndex >= 0) {
-            IndentInfo priorLine=newLinePoints.get(loopIndex);            
-            if(priorLine.getIndentValue()==currentLine.getIndentValue()){
-                if(loopIndex!=indexConstruct - 1 || priorLine.structureStartPosition() <= currentLine.structureStartPosition()){ //skip closing tag
-                    indexConstruct = loopIndex;
-                    return true;
-                }          
-            }
-            if(priorLine.getIndentValue()< currentLine.getIndentValue()){
-                return false;//first child               
-            }
-            loopIndex--;
-        }        
-        return false; 
-    }
-    
-    public boolean moveToDirectPreviousConstruct() {
-
-        if(indexConstruct<=0)
-            return false;        
-        IndentInfo currentLine=newLinePoints.get(indexConstruct);
-        IndentInfo priorLine=newLinePoints.get(indexConstruct -1);      
-        if(priorLine.getIndentValue()==currentLine.getIndentValue()){            
-            indexConstruct -= 1;
-            return true;
-        }
-        return false; 
-    }
-    
-    public void addRecoverLines(ArrayList<IndentInfo> recoverNewLinePoints) {
-        if(recoverNewLinePoints.size()==0)
-            return;
-        newLinePoints.remove(newLinePoints.size()-1); //remove line of error detection
-        newLinePoints.addAll(recoverNewLinePoints);        
-    }    
-
-    public ArrayList<IndentInfo> getLinesFrom(int startIndex) {
-        ArrayList<IndentInfo> recentHistory=new ArrayList<IndentInfo>();
-        recentHistory.addAll(newLinePoints.subList(startIndex, newLinePoints.size()));
-        return recentHistory;
-    }
-    
     public ArrayList<IndentInfo> getLinesFromTo(int startIndex, int endLocation) {
         int indexLine = startIndex;
         ArrayList<IndentInfo> result=new ArrayList<IndentInfo>();
@@ -336,46 +181,5 @@
         }
         return result;
     }
-
-    public int getLastChar() {        
-        return recoverTokenStream[recoverTokenCount-1];
-    }    
-
-    public boolean moveInward() {
-        boolean result = false;
-        if(indexConstruct<=1)
-            return false;
-        int prevIndent = getConstructPoint().getIndentValue();
-        indexConstruct-=1;
-        int currIndent = getConstructPoint().getIndentValue();
-        while(indexConstruct>1 && currIndent > prevIndent){
-            result = true;
-            prevIndent=currIndent;
-            indexConstruct-=1;
-            currIndent = getConstructPoint().getIndentValue();
-        }
-        indexConstruct+=1;
-        return result; 
-    }
-
     
-    /*
-    ///////////////////////////////// LOG /////////////////////////////////////////////////////////////////
-    public void logBigReductionList() {        
-        for (int i = 0; i < newLinePoints.size(); i++) {
-            logBigReduction(newLinePoints.get(i));
-        }
-       // Tools.debug(info);
-        Tools.debug("**** BR-list ****");
-        Tools.debug("***************************");
-    }
-
-    private void logBigReduction(IndentInfo brPoint) {
-        Tools.debug("LINE: " +brPoint.getLineNumber());
-        Tools.debug("INDENT: " +brPoint.getIndentValue());
-        Tools.debug("REDUCE-LENGTH: " +brPoint.maxReduceLength());
-        Tools.debug("TOKEN-POSITION: " +brPoint.getTokensSeen());        
-        Tools.debug("........................");
-    }*/
-    
 }



From m.dejonge at tudelft.nl  Wed Dec 16 17:54:19 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 16 Dec 2009 16:54:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20428 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios/Problematic src/scenariotests
Message-ID: <200912161654.nBGGsJvX003855@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-16 16:54:19 +0000 (Wed, 16 Dec 2009)
New Revision: 20428

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20428&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/ParserTimeOut.str
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java

Log:
parser-time-out, test file 

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/ParserTimeOut.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/ParserTimeOut.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/ParserTimeOut.str	2009-12-16 16:54:19 UTC (rev 20428)
@@ -0,0 +1,34 @@
+module test
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/Test
+  include/entities
+
+rules // Main editor interface (defined by the Test-Builders/-References.esv files)
+ 
+  editor-analyze:
+    ( ast , path, project-path ) -> ( errors , warnings, notes)
+    with
+      // Ensure all dynamic rules are properly scoped
+      try ( dr-scope-all-end);
+      dr-scope-all-start ;
+      // Analysis: record all entity declarations
+      alltd ( record-entity )
+    with
+      // Collect all feedback markers
+      errors   := < collect-all ( constraint- error conc )> ast; //@START @END
+      warnings := < collect-all ( constraint-warning , conc)> ast;
+      notes    := < collect-all ( constraint-note , conc)> ast
+
+  /**
+   * Records the definition of an entity in a dynamic rule GetEntity.
+   */
+  record-entity :
+    Entity( x , body) -> Entity( x , body)
+    with
+      rules (
+        GetEntity :+ x -> x
+      )
\ No newline at end of file

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java	2009-12-16 16:38:26 UTC (rev 20427)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java	2009-12-16 16:54:19 UTC (rev 20428)
@@ -135,6 +135,15 @@
 		Assert.assertEquals(Evaluation.EXACT, file.getRegionEvaluations().get(0));
 	}
 	
+	@Test
+	public void testTimeOut() throws FileNotFoundException {
+		Testcase file = new Testcase(InfrastructureCriticalScenarios.DIR_PROBLEMS+ File.separator + "ParserTimeOut.str");
+		file.compareRegions(InfraStructure.STRATEGO_GRAMMAR);
+		System.out.println(file.getRegionEvaluations().get(0));
+		System.out.println("SKIPPED SKIPPED SKIPPED");
+		System.out.println(file.getRecoverLog().getSkippedFragments());
+		Assert.assertEquals(Evaluation.EXACT, file.getRegionEvaluations().get(0));
+	}
 	
 	
 	@Test



From L.C.L.Kats at tudelft.nl  Wed Dec 16 18:09:43 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 16 Dec 2009 17:09:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20429 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <200912161709.nBGH9h1c004221@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-16 17:09:42 +0000 (Wed, 16 Dec 2009)
New Revision: 20429

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20429&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Log:
Fixed a possible deadlock introduced by the previous revision.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-16 16:54:19 UTC (rev 20428)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-16 17:09:42 UTC (rev 20429)
@@ -212,9 +212,10 @@
 			char[] inputChars = input.toCharArray();
 			
 			Debug.startTimer();
-				
+			
 			if (monitor.isCanceled()) return null;
-			ATerm asfix = parser.parseNoImplode(inputChars, filename);
+			ATerm asfix;
+			asfix = parseNoImplode(inputChars, filename);
 			if (monitor.isCanceled()) return null;
 			RootAstNode ast = parser.internalImplode(asfix);
 
@@ -228,14 +229,7 @@
 			Debug.stopTimer("File parsed: " + filename);
 			
 			// TODO: is coloring, then error marking best?
-		
-		} catch (StartSymbolException e) {
-			if (metaSyntax != null) {
-				// Unmanaged parse tables may have different start symbols;
-				// try again without the standard start symbol
-				parser.setStartSymbol(null);
-				return parse(input, monitor);
-			}
+			
 		} catch (ParseTimeoutException e) {
 			// TODO: Don't show stack trace for this
 			if (monitor.isCanceled()) return null;
@@ -268,6 +262,21 @@
 		return monitor.isCanceled() ? null : currentAst;
 	}
 
+	private ATerm parseNoImplode(char[] inputChars, String filename)
+			throws TokenExpectedException, BadTokenException, SGLRException, IOException {
+		try {
+			return parser.parseNoImplode(inputChars, filename);
+		} catch (StartSymbolException e) {
+			if (metaSyntax != null) {
+				// Unmanaged parse tables may have different start symbols;
+				// try again without the standard start symbol
+				parser.setStartSymbol(null);
+				return parser.parseNoImplode(inputChars, filename);
+			}
+		}
+		return null;
+	}
+
 	private void processMetaFile() {
 		String metaFile = getPath().removeFileExtension().addFileExtension("meta").toOSString();
 		String metaSyntax = MetaFileReader.readSyntax(metaFile);



From L.C.L.Kats at tudelft.nl  Thu Dec 17 10:55:45 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 17 Dec 2009 09:55:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20430 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	strc-java/trunk/java
Message-ID: <200912170955.nBH9tjoM017855@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-17 09:55:45 +0000 (Thu, 17 Dec 2009)
New Revision: 20430

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20430&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
- Fixed some parse filtering problems related to injections
- Added a small optization to parse table loading

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-12-16 17:09:42 UTC (rev 20429)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-12-17 09:55:45 UTC (rev 20430)
@@ -1012,18 +1012,17 @@
                 && prodType != ProductionType.AVOID) {
 
             Label prod = getLabel(t);
-            ParseNode n = (ParseNode) t;
 
             while (prod.isInjection()) {
-                IParseNode x = n.getKids().get(0);
+                t = ((ParseNode) t).getKids().get(0);
 
-                int prodTypeX = getProductionType(x);
+                int prodTypeX = getProductionType(t);
 
-                if (x instanceof ParseNode && prodTypeX != ProductionType.PREFER
+                if (t instanceof ParseNode && prodTypeX != ProductionType.PREFER
                         && prodTypeX != ProductionType.AVOID) {
-                    prod = getLabel(x);
+                    prod = getLabel(t);
                 } else {
-                    return n;
+                    return t;
                 }
             }
         }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-12-16 17:09:42 UTC (rev 20429)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-12-17 09:55:45 UTC (rev 20430)
@@ -52,6 +52,12 @@
     transient public AFun applAFun;
 
     transient public AFun ambAFun;
+    
+    transient private ATerm injection1Appl;
+    
+    transient private ATerm injection2Appl;
+    
+    transient private ATerm litStringAppl;
 
     private Label[] injections;
     
@@ -68,14 +74,17 @@
     private transient HashMap<RangeList, RangeList> rangesCache = new HashMap<RangeList, RangeList>();
     
     public ParseTable(ATerm pt) throws InvalidParseTableException {
+        initAFuns(pt.getFactory());
         parse(pt);
-        initAFuns(pt.getFactory());
     }
 
     public void initAFuns(ATermFactory factory) {
         this.factory = factory;
         applAFun = factory.makeAFun("appl", 2, false);
         ambAFun = factory.makeAFun("amb", 1, false);
+        injection1Appl = factory.parse("prod([<term>],cf(sort(<term>)),<term>)");
+        injection2Appl = factory.parse("prod([<term>],lex(sort(<str>)),<term>)");
+        litStringAppl = factory.parse("lit(<str>)");
     }
 
     public ATermFactory getFactory() {
@@ -190,16 +199,16 @@
     @SuppressWarnings("unchecked")
 	private boolean isInjection(ATermAppl prod) {
 
-        List r = prod.match("prod([<term>],cf(sort(<term>)),<term>)");
-        if (r != null && r.size() == 1) {
+        List r = prod.match(injection1Appl);
+        if (r != null && r.size() >= 1) {
             ATerm x = (ATerm) r.get(0);
-            return !(x.match("lit(<str>)") == null);
+            return x.match(litStringAppl) == null;
         }
 
-        r = prod.match("prod([<term>],lex(sort(<str>)),<term>)");
-        if (r != null && r.size() == 1) {
+        r = prod.match(injection2Appl);
+        if (r != null && r.size() >= 1) {
             ATerm x = (ATerm) r.get(0);
-            return !(x.match("lit(<str)") == null);
+            return x.match("lit(<str>)") == null;
         }
 
         return false;

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Thu Dec 17 11:10:49 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 17 Dec 2009 10:10:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20431 - LennartKats -
	in spoofax-imp/trunk: .
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/util
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <200912171010.nBHAAn4h018211@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-17 10:10:49 +0000 (Thu, 17 Dec 2009)
New Revision: 20431

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20431&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str
Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java

Log:
- Better, more readable warnings for ambiguities
- Changed build.common.xml to always run sdf2rtg as the rtg is now used by sdf2imp

Changes:

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-12-17 09:55:45 UTC (rev 20430)
+++ spoofax-imp/trunk/Makefile	2009-12-17 10:10:49 UTC (rev 20431)
@@ -2,10 +2,10 @@
 
 all : org.eclipse.imp/org.eclipse.imp.runtime.patch
 	$(MAKE) -C org.strategoxt.imp.generator all
-	(cd org.strategoxt.imp.editors.editorservice && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar ant -f build.main.xml -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def $(DEFS))
-	(cd org.strategoxt.imp.editors.sdf && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar ant -f build.main.xml -Dexternaldef=syntax/SDF.def $(DEFS))
-	(cd org.strategoxt.imp.editors.stratego && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar ant -f build.main.xml -Dexternaldef=syntax/Stratego-Sugar.def $(DEFS))
-	(cd org.strategoxt.imp.editors.aterm && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar ant -f build.main.xml -Dexternaldef=syntax/ATerm.def $(DEFS))
+	(cd org.strategoxt.imp.editors.editorservice && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar ant -f build.main.xml -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def $(DEFS))
+	(cd org.strategoxt.imp.editors.sdf && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar ant -f build.main.xml -Dexternaldef=syntax/SDF.def $(DEFS))
+	(cd org.strategoxt.imp.editors.stratego && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar ant -f build.main.xml -Dexternaldef=syntax/Stratego-Sugar.def $(DEFS))
+	(cd org.strategoxt.imp.editors.aterm && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar ant -f build.main.xml -Dexternaldef=syntax/ATerm.def $(DEFS))
 
 check : all
 	$(MAKE) -C org.strategoxt.imp.generator check

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-17 09:55:45 UTC (rev 20430)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-17 10:10:49 UTC (rev 20431)
@@ -99,13 +99,13 @@
 
         <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         
-        <target name="sdf2imp.eclipse" if="eclipse.running">
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
             <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
                 <arg value="${include}/${esvmodule}.packed.esv"/>
             </java>
         </target>
         
-        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg,utils-files">
             <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
@@ -209,7 +209,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str	2009-12-17 09:55:45 UTC (rev 20430)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str	2009-12-17 10:10:49 UTC (rev 20431)
@@ -1,25 +0,0 @@
-module sdf2imp/util/common
-
-imports
-
-  libstratego-lib
-
-strategies
-
-  // (Used from StrategoObserver.java)
-  postprocess-feedback-results =
-    (is-list <+ ![<id>]);
-    flatten-list;
-    map(
-      (is-tuple <+ !(<id>, <id>));
-      (id, postprocess-feedback-message)
-    )
-  
-  internal postprocess-feedback-message =
-    if is-list then
-      flatten-list;
-      map(is-string <+ write-to-string);
-      concat-strings
-    else
-      is-string <+ write-to-string
-    end
\ No newline at end of file

Copied: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str (from rev 20427, spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str	2009-12-17 10:10:49 UTC (rev 20431)
@@ -0,0 +1,43 @@
+/**
+ * Strategies used directly by the Java code of the IDE.
+ */
+module sdf2imp/util/ide-support
+
+imports
+
+  libstratego-lib
+
+strategies
+
+  // (Used from StrategoObserver.java)
+  postprocess-feedback-results =
+    (is-list <+ ![<id>]);
+    flatten-list;
+    map(
+      (is-tuple <+ !(<id>, <id>));
+      (id, postprocess-feedback-message)
+    )
+  
+  internal postprocess-feedback-message =
+    if is-list then
+      flatten-list;
+      map(is-string <+ write-to-string);
+      concat-strings
+    else
+      is-string <+ write-to-string
+    end
+  
+  simplify-ambiguity-report:
+    amb(a*) -> $[either [a'*]]
+    where
+      !a*;
+      map(try(?ToMetaExpr(<id>)));
+      map(simplify-ambiguity-element);
+      where(<eq> (<id>, <make-set>)); // no duplicates
+      a'* := <separate-by(|" or ")>
+
+  simplify-ambiguity-element:
+    [x] -> $[list of [<simplify-ambiguity-element> x]]
+
+  simplify-ambiguity-element:
+    x#(_) -> x

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-17 09:55:45 UTC (rev 20430)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-17 10:10:49 UTC (rev 20431)
@@ -13,6 +13,7 @@
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.terms.TermConverter;
@@ -20,6 +21,8 @@
 import org.spoofax.jsglr.ParseTimeoutException;
 import org.spoofax.jsglr.RecoveryConnector;
 import org.spoofax.jsglr.TokenExpectedException;
+import org.strategoxt.imp.generator.sdf2imp;
+import org.strategoxt.imp.generator.simplify_ambiguity_report_0_0;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.ast.AsfixAnalyzer;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
@@ -311,8 +314,9 @@
 
 	private String ambToString(ATermAppl amb) {
 		if (asyncAmbReportingContext == null) {
-			stratego_sglr.init();
-			asyncAmbReportingContext = stratego_aterm.init();
+			asyncAmbReportingContext = stratego_sglr.init();
+			stratego_aterm.init(asyncAmbReportingContext);
+			sdf2imp.init(asyncAmbReportingContext);
 		}
 
 		assert !Thread.holdsLock(Environment.getSyncRoot()) : "Potential deadlock";
@@ -327,10 +331,17 @@
 			
 			result = factory.makeAppl(factory.makeConstructor("parsetree", 2), result, factory.makeInt(2));
 			result = implode_asfix_0_0.instance.invoke(asyncAmbReportingContext, result);
-			return result.toString();
+			return ambToSimplifiedString(result);
 		}
 	}
 	
+	private static String ambToSimplifiedString(IStrategoTerm amb) {
+		assert Thread.holdsLock(asyncAmbReportingContext);
+		
+		IStrategoTerm message = simplify_ambiguity_report_0_0.instance.invoke(asyncAmbReportingContext, amb);
+		return message == null ? amb.toString() : ((IStrategoString) message).stringValue();
+	}
+	
 	private void reportSkippedFragments(SGLRTokenizer tokenizer) {
 		char[] inputChars = tokenizer.getLexStream().getInputChars();
 



From L.C.L.Kats at tudelft.nl  Thu Dec 17 12:36:00 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 17 Dec 2009 11:36:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20432 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
Message-ID: <200912171136.nBHBa0U6019522@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-17 11:36:00 +0000 (Thu, 17 Dec 2009)
New Revision: 20432

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20432&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java

Log:
Fixed null pointer exception encountered by Sander

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2009-12-17 10:10:49 UTC (rev 20431)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2009-12-17 11:36:00 UTC (rev 20432)
@@ -8,6 +8,7 @@
 import org.eclipse.jface.text.TextAttribute;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.widgets.Display;
+import org.strategoxt.imp.runtime.EditorState;
 
 /**
  * Dynamic proxy class to a token colorer.
@@ -48,8 +49,10 @@
 	public void prepareForReinitialize() {
 		isReinitializing = true;
 		UniversalEditor lastEditor = null;
-		if (lastParseController instanceof DynamicParseController)
-			lastEditor = ((DynamicParseController) lastParseController).getLastEditor().getEditor();
+		if (lastParseController instanceof DynamicParseController) {
+			EditorState editorState = ((DynamicParseController) lastParseController).getLastEditor();
+			if (editorState != null) lastEditor = editorState.getEditor();
+		}
 
 		if (lastEditor != null && !lastEditor.getTitleImage().isDisposed())
 			lastEditor.updateColoring(new Region(0, lastEditor.getServiceControllerManager().getSourceViewer().getDocument().getLength()));



From m.dejonge at tudelft.nl  Thu Dec 17 14:08:35 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 17 Dec 2009 13:08:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20433 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios CriticalScenarios/DoubleRegions
	CriticalScenarios/Problematic Grammars Input/Common
	src/scenariotests src/testrun
Message-ID: <200912171308.nBHD8Z8X020802@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-17 13:08:35 +0000 (Thu, 17 Dec 2009)
New Revision: 20433

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20433&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_multipleErrors2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_sloppyCode.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_testBridgeFG.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Scope_testB6.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_SpoofaxExamples_erroneous.app
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/badToken.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/badToken2.del2
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2-Permissive.def
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2-Permissive.tbl
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2.def
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2.tbl
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/MoreRegions_Java.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/sloppyCode.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java

Log:
- bad token tests added
- delme2 grammar added

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_multipleErrors2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_multipleErrors2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_multipleErrors2.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int correctMethod2(){
+      int corrLine1;
+      if(true){
+    	  String s = "bla bla bla"//; @START @END
+    	  corrLine2();
+      }
+      else{ //@START
+         corrLine3(); //}     
+      corrLine4( //); //@END
+  }
+      
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+  
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_sloppyCode.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_sloppyCode.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_sloppyCode.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,77 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int ErrorTooMuchClosing()
+  { 
+    if(bla1())
+    { 
+      while(true) //@START
+      { 
+        bla2(); /* }*/ // @END
+      stm(); 
+    }
+    int i;
+    int j;
+    bla3();
+  }  
+
+  private int ErrorMissingClosing()
+  { 
+    if(bla1())
+    { 
+      bla();
+      while(true) //@START
+      { 
+        bla2();
+        stm(); /* }*/ // @END
+    }
+    int i;
+    int j;
+    bla3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod3()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_testBridgeFG.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_testBridgeFG.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Common_testBridgeFG.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,34 @@
+class X  
+{ 
+  private int method1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int method2()
+  { 
+    int Line1;
+    if(false){ //@START
+	    if(true)
+	    { 
+	       Line2();
+	       Line3();
+	    Line4();
+	    Line5(); //@END
+    Line6();
+    Line7() //@START @END
+  }
+    
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+  
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Scope_testB6.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Scope_testB6.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_Scope_testB6.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,15 @@
+/* Bumpy road - Double error, extra right brace and missing right brace */
+class C {
+	void m() { //@START
+		int a;
+	}} //@END
+	void n() {
+		int b;
+	}
+	void o() { //@START
+		int c; 	/*}*/ //@END
+		
+	void p() {
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_SpoofaxExamples_erroneous.app
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_SpoofaxExamples_erroneous.app	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/DoubleRegions/Input_SpoofaxExamples_erroneous.app	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,29 @@
+module notrecoverednicely
+
+ entity PublicationList {
+    publications -> Set<Publication>
+
+    buckets <> Set<PublicationBucket>
+
+    function add(pub : Publication) {
+      publications.add(pub);
+    }
+    function insert(val : String, pub : Publication) {
+      for(b : PublicationBucket in buckets) {
+        if(b.key == val) {
+          b.add(pub);
+          b.size := b.size + 1;
+         return;
+        }
+      }
+      buckets.add(PublicationBucket{ publications := x } /*@START @END*/
+    }
+
+    publicationKey -> PublicationKey /*@START @END*/
+
+    function foo() {
+      for(pub : Publication in this.publications) {
+        insert(pub.year, pub);
+      }
+    }
+  }
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/badToken.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/badToken.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/badToken.str	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,47 @@
+module stratego_sugar
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  libstrc
+
+strategies
+
+  ANALYSIS_ENABLED = //@START @END
+
+rules
+
+  editor-resolve:
+    (selected, position, ast, path, project-path) -> target
+    where
+      CallT(SVar(x), s*, t*) := <try(Desugar)> selected
+    <+
+      CallT(SVar(x), s*, t*) := <try(Desugar)> <position-to-parent> (position, ast)
+    with
+      s-length := <length> s*;
+      t-length := <length> t* 
+    where
+      <collect-one(
+        SDefT(?x, length => s-length, length => t-length, id)
+      + SDef(?x, length => s-length, id)
+      + SDefNoArgs(?x, id)
+      + RDefT(?x, length => s-length, length => t-length, id)
+      + RDef(?x, length => s-length, id)
+      + RDefNoArgs(?x, id)
+      + RDecT(?x, length => s-length, length => t-length)
+      + RDec(?x, length => s-length)
+      + RDecNoArgs(?x)
+      )> ast;
+      one(?target)
+
+  position-to-parent:
+    ([position, _], _#(t*)) -> parent
+    with
+      parent := <index(|<inc> position)> t*
+  
+  position-to-parent:
+    ([position, _, _ | _], _#(t*)) -> <position-to-parent> (position', ancestor)
+    where
+      [_ | position'] := <Fst>;
+      ancestor        := <index(|<inc> position)> t*

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/badToken2.del2
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/badToken2.del2	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/Problematic/badToken2.del2	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,18 @@
+module example
+
+// Example "Delme2" program (see syntax/Delme2.sdf for the grammar)
+
+entity User {
+  name     <> String
+  password <> String
+  homepage <> URL 
+}
+
+entity BlogPosting {
+  poster : User //@START @END
+  body   <> String
+}
+
+entity URL {
+  location : String //@START @END
+}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2-Permissive.def
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2-Permissive.def	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2-Permissive.def	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,83 @@
+definition
+
+module Common
+exports
+  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
+
+  lexical syntax
+    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
+    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
+    ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
+    WATERTOKEN                     -> WATER               
+    WATERTOKENSEPARATOR            -> WATER               
+
+  lexical restrictions
+    WATERTOKEN -/- [A-Za-z0-9\_]
+
+  context-free syntax
+    WATER -> LAYOUT {cons("WATER")}
+
+  (
+
+  sorts WATEREOF
+
+  lexical restrictions
+    WATEREOF -/- ~[]
+
+  lexical syntax
+    %% Lexical insertion recovery rules                                
+    "\""                                           -> INSERTOPENQUOTE1 {recover}
+    INSERTOPENQUOTE1 StringChar* "\n"              -> STRING           {cons("INSERTEND")}
+    INSERTOPENQUOTE1 StringChar* WATEREOF          -> STRING           {cons("INSERTEND")}
+    "/*"                                           -> INSERTSTART1     {recover}
+    INSERTSTART1 ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT           {cons("INSERTEND")}
+                                                   -> "module"         {recover, cons("INSERTION")}
+    %%Insertion rule for "}":                                          
+                                                   -> [\125]           {recover, cons("INSERTION")}
+
+  syntax
+    %% Kernel syntax insertion recovery rules   
+
+  )
+
+  (
+
+  sorts ID INT STRING StringChar CommentChar
+
+  lexical syntax
+    [a-zA-Z] [a-zA-Z0-9\_]*            -> ID          
+    "-"? [0-9]+                        -> INT         
+    "\"" StringChar* "\""              -> STRING      
+    ~[\"\n]                            -> StringChar  
+    "\\\""                             -> StringChar  
+    [\ \t\n\r]                         -> LAYOUT      
+    [\*]                               -> CommentChar 
+    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT      
+    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT      
+                                       -> EOF         
+
+  lexical restrictions
+    CommentChar -/- [\/]
+    INT -/- [0-9]
+    ID -/- [a-zA-Z0-9\_]
+    EOF -/- ~[]
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/] . [\/]
+    LAYOUT? -/- [\/] . [\*]
+
+  )
+
+module Delme2
+imports Common
+
+exports
+  context-free start-symbols
+    Start
+
+  context-free syntax
+    "module" ID Definition*       -> Start      {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID "<>" Type                  -> Property   {cons("Property")}
+    ID                            -> Type       {cons("Type")}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2-Permissive.tbl
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2-Permissive.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2.def
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2.def	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2.def	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,46 @@
+definition
+
+module Common
+exports
+  
+
+
+  sorts ID INT STRING StringChar CommentChar
+
+  lexical syntax
+    [a-zA-Z] [a-zA-Z0-9\_]*            -> ID          
+    "-"? [0-9]+                        -> INT         
+    "\"" StringChar* "\""              -> STRING      
+    ~[\"\n]                            -> StringChar  
+    "\\\""                             -> StringChar  
+    [\ \t\n\r]                         -> LAYOUT      
+    [\*]                               -> CommentChar 
+    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT      
+    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT      
+                                       -> EOF         
+
+  lexical restrictions
+    CommentChar -/- [\/]
+    INT -/- [0-9]
+    ID -/- [a-zA-Z0-9\_]
+    EOF -/- ~[]
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/] . [\/]
+    LAYOUT? -/- [\/] . [\*]
+
+
+
+module Delme2
+imports Common
+
+exports
+  context-free start-symbols
+    Start
+
+  context-free syntax
+    "module" ID Definition*       -> Start      {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID "<>" Type                  -> Property   {cons("Property")}
+    ID                            -> Type       {cons("Type")}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2.tbl
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Delme2.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/sloppyCode.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/sloppyCode.java	2009-12-17 11:36:00 UTC (rev 20432)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/sloppyCode.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -36,8 +36,8 @@
     { 
       while(true) //@START
       { 
-        bla2(); /* }*/
-      stm(); // @END
+        bla2(); /* }*/ // @END
+      stm(); 
     }
     int i;
     int j;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-17 11:36:00 UTC (rev 20432)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -56,6 +56,25 @@
 		return file.getRegionEvaluations().get(0);
 	}
 	
+	protected void assertAllEvaluations(String fileName, ArrayList<Evaluation> expectedEval)
+	throws FileNotFoundException {
+		Testcase file = new Testcase(directory + File.separator + fileName);
+		file.compareRegions(parseTable);
+		ArrayList<Evaluation> actualEval =file.getRegionEvaluations();
+		Assert.assertArrayEquals(expectedEval.toArray(), actualEval.toArray());
+	}
+	
+	protected void assertExactEvaluations(String fileName)
+	throws FileNotFoundException {
+		Testcase file = new Testcase(directory + File.separator + fileName);
+		file.compareRegions(parseTable);
+		System.out.println("---------------- SKIPPED SKIPPED -------------");
+		System.out.println(file.getRecoverLog().getSkippedFragments());
+		for (Evaluation actualEval : file.getRegionEvaluations()) {
+			Assert.assertEquals(Evaluation.EXACT, actualEval);
+		}		
+	}
+	
 	protected String getFragmentForComparing(FileLog fileLog){ 
 		return getActualRegions(fileLog).get(0).trim();
 	} 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java	2009-12-17 11:36:00 UTC (rev 20432)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/InfrastructureCriticalScenarios.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -16,4 +16,5 @@
 	public static final String DIR_CRITICAL_SCENARIOS_ZOOM = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Zoom";
 	public static final String DIR_PROBLEMS = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Problematic";
 	public static final String DIR_CRITICAL_SCENARIOS_EOF_FAILURE = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"Eof_Failure";
+	public static final String DIR_CRITICAL_SCENARIOS_MORE_REGIONS = DIR_ROOT_CRITICAL_SCENARIOS + File.separator+"DoubleRegions";
 }

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/MoreRegions_Java.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/MoreRegions_Java.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/MoreRegions_Java.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -0,0 +1,68 @@
+package scenariotests;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import logging.FileLog;
+
+import org.junit.Test;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.NoRecoveryRulesException;
+
+import evaluating.Evaluation;
+
+import testrun.InfraStructure;
+
+
+public class MoreRegions_Java extends CriticalScenarios_Base{
+	
+	public MoreRegions_Java() throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException{
+		super.setParseTable(InfraStructure.JAVA_GRAMMAR);
+		directory=InfrastructureCriticalScenarios.DIR_CRITICAL_SCENARIOS_MORE_REGIONS;
+		END_SIGN = "@END";
+		START_SIGN = "@START";
+	}
+	
+	protected String getFragmentForComparing(FileLog fileLog){ 
+		return fileLog.getSkippedFragments().get(0).trim();
+	}
+	
+	@Test
+	public void testMultiple2() throws Exception{
+		String fileName="Input_Common_multipleErrors2.java";
+		assertExactEvaluations(fileName);	
+		System.out.println();
+	}
+	
+	@Test
+	public void testBridgeFG() throws Exception{
+		String fileName="Input_Common_testBridgeFG.java";
+		assertExactEvaluations(fileName);		
+	}
+	
+	@Test
+	public void testB6() throws Exception{
+		String fileName="Input_Scope_testB6.java";
+		assertExactEvaluations(fileName);		
+	}
+	
+	@Test
+	public void testSloppyCode() throws Exception{
+		String fileName="Input_Common_sloppyCode.java";
+		assertExactEvaluations(fileName);		
+	}
+
+	private void mm(String fileName) throws FileNotFoundException {
+		ArrayList<Evaluation> expectedEvals=new ArrayList<Evaluation>();
+		expectedEvals.add(Evaluation.EXACT); expectedEvals.add(Evaluation.EXACT);
+		assertAllEvaluations(fileName, expectedEvals);
+	}
+	
+
+	@Override
+	protected ArrayList<String> getActualRegions(FileLog fileLog) {
+		return fileLog.getSkippedFragments();
+	}	
+
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java	2009-12-17 11:36:00 UTC (rev 20432)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/scenarioRun.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -145,8 +145,27 @@
 		Assert.assertEquals(Evaluation.EXACT, file.getRegionEvaluations().get(0));
 	}
 	
+	@Test
+	public void testBadToken() throws FileNotFoundException {
+		Testcase file = new Testcase(InfrastructureCriticalScenarios.DIR_PROBLEMS+ File.separator + "badToken.str");
+		file.compareRegions(InfraStructure.STRATEGO_GRAMMAR);
+		System.out.println(file.getRegionEvaluations().get(0));
+		System.out.println("SKIPPED SKIPPED SKIPPED");
+		System.out.println(file.getRecoverLog().getSkippedFragments());
+		Assert.assertEquals(Evaluation.EXACT, file.getRegionEvaluations().get(0));
+	}
 	
 	@Test
+	public void testBadToken2() throws FileNotFoundException {
+		Testcase file = new Testcase(InfrastructureCriticalScenarios.DIR_PROBLEMS+ File.separator + "badToken2.del2");
+		file.compareRegions(InfraStructure.DELME2_GRAMMAR);
+		System.out.println(file.getRegionEvaluations().get(0));
+		System.out.println("SKIPPED SKIPPED SKIPPED");
+		System.out.println(file.getRecoverLog().getSkippedFragments());
+		Assert.assertEquals(Evaluation.EXACT, file.getRegionEvaluations().get(0));
+	}
+	
+	@Test
 	public void testRunFile9() throws FileNotFoundException {
 		Testcase file = new Testcase(InfrastructureCriticalScenarios.DIR_PROBLEMS+ File.separator + "Input_SpoofaxExamples_bad-performance-stratego-sugar.str");
 		file.compareRegions(InfraStructure.STRATEGO_JAVA_GRAMMAR);

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java	2009-12-17 11:36:00 UTC (rev 20432)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java	2009-12-17 13:08:35 UTC (rev 20433)
@@ -11,6 +11,7 @@
 	public static final String STRATEGO_GRAMMAR = "Grammars" + File.separator +"Stratego-Sugar.tbl";
 	public static final String WEBDSL_GRAMMAR = "Grammars" + File.separator +"WebDSL.tbl";
 	public static final String STRATEGO_JAVA_GRAMMAR = "Grammars" + File.separator +"Stratego-Java-15.tbl";
+	public static final String DELME2_GRAMMAR = "Grammars" + File.separator +"Delme2.tbl";
 	
 	//Extensions
 	public static final String JAVA_EXT = "java";
@@ -25,7 +26,8 @@
 	public static final String DIR_MESSY_INDENT=DIR_ROOT_INPUT +File.separator+"MessyIndent";
 	public static final String DIR_PROBLEM_CASES=DIR_ROOT_INPUT +File.separator+"ProblemCases";
 	public static final String DIR_SPOOFAX_EXAMPLES=DIR_ROOT_INPUT +File.separator+"SpoofaxExamples";
-	public static final String DIR_ROOT_OUTPUT = "Output";	
+	public static final String DIR_ROOT_OUTPUT = "Output";
+		
 	
 	public static void addStandardLanguages(FilePaths fileLocations) {
 		fileLocations.addLanguage(InfraStructure.STRATEGO_EXT, InfraStructure.STRATEGO_GRAMMAR);



From m.dejonge at tudelft.nl  Thu Dec 17 14:13:53 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 17 Dec 2009 13:13:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20434 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912171313.nBHDDrcG020862@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-17 13:13:53 +0000 (Thu, 17 Dec 2009)
New Revision: 20434

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20434&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java

Log:
bugfix: bad token (zoom to detect region in unrecovered files)

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java	2009-12-17 13:08:35 UTC (rev 20433)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java	2009-12-17 13:13:53 UTC (rev 20434)
@@ -59,7 +59,7 @@
         IndentInfo recoverLine = newLinePoints.get(indexLineRecovery); 
         setParserForRecovery(recoverLine);            
         myParser.setFineGrainedMode(false);
-        getHistory().readRecoverToken(myParser);            
+        getHistory().readRecoverToken(myParser, false);            
         myParser.doParseStep();            
         myParser.setFineGrainedMode(true);
         if(indexLineRecovery<newLinePoints.size()-1){
@@ -107,7 +107,7 @@
         //Tools.debug("Enter recoverLineAndContinueParse");
         while (myParser.activeStacks.size() > 0 && !getHistory().hasFinishedRecoverTokens()){
             handleBPSuggestions();
-            getHistory().readRecoverToken(myParser);            
+            getHistory().readRecoverToken(myParser, false);            
             Tools.debug((char)myParser.currentToken + "  ("+getHistory().getTokenIndex()+")");  
             //myParser.logRecoverSituation();
             myParser.doParseStep();            

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-17 13:08:35 UTC (rev 20433)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-17 13:13:53 UTC (rev 20434)
@@ -138,10 +138,10 @@
         return parentSkips;
     }
 
-    public StructureSkipSuggestion getErroneousPrefix() throws IOException {
+    public StructureSkipSuggestion getErroneousPrefix(int failureIndex) throws IOException {
         StructureSkipSuggestion prefix=new StructureSkipSuggestion();
         if(getHistory().getIndexLastLine()>=0)
-            prefix.setSkipLocations(getHistory().getLine(0), getHistory().getLastLine(), 0, getHistory().getIndexLastLine());
+            prefix.setSkipLocations(getHistory().getLine(0), getHistory().getLine(failureIndex), 0, failureIndex);
         return prefix;
     }
 
@@ -427,7 +427,7 @@
 
     private String readLine(int index) throws IOException {
         while(getHistory().getIndexLastLine()<=index && myParser.currentToken!=SGLR.EOF)
-            getHistory().readRecoverToken(myParser);
+            getHistory().readRecoverToken(myParser, false);
         if(index<=getHistory().getIndexLastLine()){
             IndentInfo line=getHistory().getLine(index);
             return readLine(line);
@@ -455,9 +455,9 @@
         IndentationHandler skipIndentHandler=new IndentationHandler();
         getHistory().setTokenIndex(Math.max(0, line.getTokensSeen()-1));        
         skipIndentHandler.setInLeftMargin(false);
-        getHistory().readRecoverToken(myParser);
+        getHistory().readRecoverToken(myParser, false);
         while(myParser.currentToken!=SGLR.EOF){
-            getHistory().readRecoverToken(myParser);            
+            getHistory().readRecoverToken(myParser, false);            
             skipIndentHandler.updateIndentation(myParser.currentToken);
             if(skipIndentHandler.lineMarginEnded()){
                 return indexLine+=1;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2009-12-17 13:08:35 UTC (rev 20433)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2009-12-17 13:13:53 UTC (rev 20434)
@@ -8,7 +8,8 @@
     private final static int MAX_SIZE_NEW_LINE_POINTS = 150;
     private final static int MIN_SIZE_NEW_LINE_POINTS = 50;
     private IndentationHandler indentHandler;
-
+    private IndentationHandler recoveryIndentHandler;
+    
     private ArrayList<IndentInfo> newLinePoints;      
     public char[] recoverTokenStream;
     private int recoverTokenCount;
@@ -37,12 +38,18 @@
         recoverTokenCount = 0;
         tokenIndex=0;
         indentHandler = new IndentationHandler();
+        recoveryIndentHandler=new IndentationHandler();
     }
     
+    public void resetRecoveryIndentHandler(int indentValue){
+        recoveryIndentHandler=new IndentationHandler();
+        recoveryIndentHandler.setInLeftMargin(true);
+        recoveryIndentHandler.setIndentValue(indentValue);
+    }
     /*
      * Set current token of parser based on recover tokens or read from new tokens
      */
-    public void readRecoverToken(SGLR myParser) throws IOException{  
+    public void readRecoverToken(SGLR myParser, boolean keepRecoveredLines) throws IOException{  
         if (hasFinishedRecoverTokens()) {             
             if(myParser.currentToken!=SGLR.EOF){                
                 if(getIndexLastToken()>0 && recoverTokenStream[getIndexLastToken()]!=SGLR.EOF){
@@ -50,11 +57,16 @@
                     indentHandler.updateIndentation(myParser.currentToken);
                     keepToken((char)myParser.currentToken);   
                     if(indentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF)
-                        keepNewLinePoint(myParser, true);
+                        keepNewLinePoint(myParser, true, indentHandler);
                 }
             }
         }
         myParser.currentToken = recoverTokenStream[tokenIndex];
+        if(keepRecoveredLines){
+            recoveryIndentHandler.updateIndentation(myParser.currentToken);
+            if(recoveryIndentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF)
+                keepNewLinePoint(myParser, false, recoveryIndentHandler);
+        }
         tokenIndex++;
     }
     
@@ -75,7 +87,7 @@
         keepToken((char)myParser.currentToken);
         tokenIndex++;
         if(indentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF)
-            keepNewLinePoint(myParser, false);
+            keepNewLinePoint(myParser, false, indentHandler);
     }
     
     public void keepInitialState(SGLR myParser) {        
@@ -95,10 +107,11 @@
         }
     }
     
-    private void keepNewLinePoint(SGLR myParser, boolean inRecoverMode) {
-        int indent = indentHandler.getIndentValue();
+    private void keepNewLinePoint(SGLR myParser, boolean inRecoverMode, IndentationHandler anIndentHandler) {
+        int indent = anIndentHandler.getIndentValue();
         IndentInfo newLinePoint= new IndentInfo(myParser.lineNumber, myParser.tokensSeen-1, indent);
         newLinePoints.add(newLinePoint);
+        System.out.println(newLinePoints.size()-1+" NEWLINE ("+newLinePoint.getIndentValue()+")");
         if(!inRecoverMode){
             newLinePoint.fillStackNodes(myParser.activeStacks);           
             if(newLinePoints.size()> MAX_SIZE_NEW_LINE_POINTS)
@@ -181,5 +194,17 @@
         }
         return result;
     }
+
+    public void deleteLinesFrom(int startIndexErrorFragment) {
+        if(startIndexErrorFragment>0 && startIndexErrorFragment<newLinePoints.size()-1){
+            ArrayList<IndentInfo> shrinkedList=new ArrayList<IndentInfo>();
+            shrinkedList.addAll(newLinePoints.subList(0, startIndexErrorFragment));
+            newLinePoints=shrinkedList;
+        }
+        else{
+            System.err.println("Unexpected index of history new-line-points");
+            System.out.println("Unexpected index of history new-line-points");
+        }
+    }
     
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-17 13:08:35 UTC (rev 20433)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-17 13:13:53 UTC (rev 20434)
@@ -102,8 +102,12 @@
         }
         Tools.debug("FineGrained Repair Failed");
         //WHITESPACE REPAIR
-        if (skipSucceeded) {    
-            whiteSpaceParse(skipRecovery.getErrorFragment());
+        if (skipSucceeded) { 
+            getHistory().deleteLinesFrom(skipRecovery.getStartIndexErrorFragment());//TODO: integrate with FG and BP
+            getHistory().resetRecoveryIndentHandler(skipRecovery.getStartLineErrorFragment().getIndentValue());
+            parseErrorFragmentAsWhiteSpace();
+            parseRemainingTokens();
+            //whiteSpaceParse();
             //whiteSpaceParse(errorFragment); 
             if(recoverySucceeded()){
                 Tools.debug("WhiteSpace Repair Succeeded");
@@ -143,7 +147,8 @@
         return hasSucceeded;
     }
 
-    private void whiteSpaceParse(String errorFragment) throws IOException {
+    private void whiteSpaceParse() throws IOException {
+        String errorFragment=skipRecovery.getErrorFragment();
         mySGLR.activeStacks.addAll(skipRecovery.getStartLineErrorFragment().getStackNodes());            
         tryParsing(errorFragment, true);
         parseRemainingTokens();
@@ -197,12 +202,23 @@
         }       
     }
     
+    public void parseErrorFragmentAsWhiteSpace() throws IOException{
+        //System.out.println("---------- Start WhiteSpace Parsing ----------");
+        mySGLR.activeStacks.addAll(skipRecovery.getStartLineErrorFragment().getStackNodes());
+        getHistory().setTokenIndex(skipRecovery.getStartPositionErrorFragment());
+        while((getHistory().getTokenIndex()<skipRecovery.getEndPositionErrorFragment()) && mySGLR.activeStacks.size()>0 && mySGLR.acceptingStack==null){        
+            getHistory().readRecoverToken(mySGLR, true);
+            //System.out.print((char)mySGLR.currentToken);
+            parseAsLayout();           
+        }
+        //System.out.println("----------- End WhiteSpace Parsing ---------");
+    }
+    
     public void parseRemainingTokens() throws IOException{
-        //Tools.debug("REMAINING: ");
-        getHistory().setTokenIndex(skipRecovery.getEndPositionErrorFragment());
-        //System.out.println("@@@@@@@@@@@@@");
+        //System.out.println("------------- REMAINING CHARACTERS --------------- ");
+        getHistory().setTokenIndex(skipRecovery.getEndPositionErrorFragment());        
         while(!getHistory().hasFinishedRecoverTokens() && mySGLR.activeStacks.size()>0 && mySGLR.acceptingStack==null){        
-            getHistory().readRecoverToken(mySGLR);
+            getHistory().readRecoverToken(mySGLR, true);
             //System.out.print((char)mySGLR.currentToken);
             mySGLR.doParseStep();            
         }        

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-12-17 13:08:35 UTC (rev 20433)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-12-17 13:13:53 UTC (rev 20434)
@@ -40,6 +40,10 @@
         return erroneousRegion.getEndSkip().getTokensSeen();
     }
 
+    public int getStartPositionErrorFragment() {
+        return erroneousRegion.getStartSkip().getTokensSeen();
+    }
+
     /**
      *  Returns error fragment including the left margin (needed for bridge-parsing)
      */
@@ -49,10 +53,10 @@
     }
     
     public String getErrorFragment() {
-        int tokIndexLine=erroneousRegion.getStartSkip().getTokensSeen();//+erroneousRegion.getAdditionalTokens().length; 
+        int tokIndexLine=getStartPositionErrorFragment();//+erroneousRegion.getAdditionalTokens().length; 
         return getHistory().getFragment(tokIndexLine, getEndPositionErrorFragment()-1);
     }
-
+    
     /**
      * Returns location where erroneous region starts, including left margin
      */
@@ -111,7 +115,7 @@
         if(trySetErroneousRegion(parentRegion)){            
             return true;
         }
-        erroneousRegion=newRegionSelector.getErroneousPrefix();
+        erroneousRegion=newRegionSelector.getErroneousPrefix(failureIndex);
         ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
         boolean findSmallerPart=trySetErroneousRegion(decomposedRegions);
         return findSmallerPart; 
@@ -150,7 +154,7 @@
         IndentationHandler indentHandler = new IndentationHandler();
         indentHandler.setInLeftMargin(false);
         while((myParser.activeStacks.size() > 0 && nrOfParsedLines<NR_OF_LINES_TILL_SUCCESS)) {//|| !getHistory().hasFinishedRecoverTokens() 
-            getHistory().readRecoverToken(myParser); 
+            getHistory().readRecoverToken(myParser,false); 
             indentHandler.updateIndentation(myParser.currentToken);           
             //System.out.println((char)myParser.currentToken); 
             //System.out.print((char)myParser.currentToken);
@@ -183,4 +187,8 @@
         return myParser.activeStacks.size() > 0 || myParser.acceptingStack!=null;
     }
 
+    public int getStartIndexErrorFragment() { //TODO: erroneous region to recovery connector
+        return erroneousRegion.getIndexHistoryStart();
+    }
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-12-17 13:08:35 UTC (rev 20433)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-12-17 13:13:53 UTC (rev 20434)
@@ -319,7 +319,7 @@
                 history.keepTokenAndState(this);
                 doParseStep(); 
                 //recoverHandler.afterParseStep();
-                //  Tools.debug("SGLR: "+(char)currentToken);             
+                //System.out.print((char)currentToken);             
             } while (currentToken != SGLR.EOF && activeStacks.size() > 0);
             
             if(useIntegratedRecovery && acceptingStack==null){                

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java	2009-12-17 13:08:35 UTC (rev 20433)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java	2009-12-17 13:13:53 UTC (rev 20434)
@@ -4,7 +4,7 @@
     
     private final static String[] closingTokens={"}", ")", "]|", ">", "|", "]"};
     private final static String[] openingTokens={"{", "(", "|[", "<", "|", "["};
-    private final static String[] separatorTokens={",", ";", "<+"};
+    private final static String[] separatorTokens={",", ";", "<+", "+>", "+", ">", "<", "=>", "->", "&&", "&", "||", "|"};
     
     public boolean isScopeClosingLine(String s){
         return startsWith(s, closingTokens);



From m.dejonge at tudelft.nl  Thu Dec 17 15:09:24 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 17 Dec 2009 14:09:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20435 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912171409.nBHE9Owk021687@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-17 14:09:23 +0000 (Thu, 17 Dec 2009)
New Revision: 20435

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20435&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java

Log:
history is adapted to the new interpretation (only in case of whitespace recovery)

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-17 13:13:53 UTC (rev 20434)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2009-12-17 14:09:23 UTC (rev 20435)
@@ -159,7 +159,7 @@
         }
         Collections.sort(indentLevels);
         indentLevels.remove(0);       
-        System.out.println(indentLevels);        
+        //System.out.println(indentLevels);        
         int indentOfLevel;
         int lineIndex;
         for (int level = 0; level < indentLevels.size(); level++) {
@@ -168,9 +168,14 @@
             while (lineIndex < prevRegion.getIndexHistoryEnd()) {
                 int indentOfLine=getHistory().getLine(lineIndex).getIndentValue();
                 if(indentOfLine==indentOfLevel){                    
-                    ArrayList<StructureSkipSuggestion> regions = selectRegion(lineIndex);                     
+                    ArrayList<StructureSkipSuggestion> regions = selectRegion(lineIndex);              
                     if(regions.size()>0){
+                        //System.out.println("index: "+lineIndex +" indent: "+indentOfLevel);
                         lineIndex=regions.get(0).getIndexHistoryEnd();
+                        //System.out.println();
+                        //System.out.println(getHistory().getFragment(regions.get(0)));
+                        //System.out.println();
+                        //System.out.println("new index: "+lineIndex +" end indent: "+getHistory().getLine(lineIndex).getIndentValue());
                         Collections.reverse(regions);
                         result.addAll(regions);
                     }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2009-12-17 13:13:53 UTC (rev 20434)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2009-12-17 14:09:23 UTC (rev 20435)
@@ -57,7 +57,7 @@
                     indentHandler.updateIndentation(myParser.currentToken);
                     keepToken((char)myParser.currentToken);   
                     if(indentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF)
-                        keepNewLinePoint(myParser, true, indentHandler);
+                        keepNewLinePoint(myParser, myParser.tokensSeen-1, true, indentHandler);
                 }
             }
         }
@@ -65,7 +65,7 @@
         if(keepRecoveredLines){
             recoveryIndentHandler.updateIndentation(myParser.currentToken);
             if(recoveryIndentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF)
-                keepNewLinePoint(myParser, false, recoveryIndentHandler);
+                keepNewLinePoint(myParser, tokenIndex, false, recoveryIndentHandler);
         }
         tokenIndex++;
     }
@@ -87,7 +87,7 @@
         keepToken((char)myParser.currentToken);
         tokenIndex++;
         if(indentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF)
-            keepNewLinePoint(myParser, false, indentHandler);
+            keepNewLinePoint(myParser, myParser.tokensSeen-1, false, indentHandler);
     }
     
     public void keepInitialState(SGLR myParser) {        
@@ -107,11 +107,11 @@
         }
     }
     
-    private void keepNewLinePoint(SGLR myParser, boolean inRecoverMode, IndentationHandler anIndentHandler) {
+    private void keepNewLinePoint(SGLR myParser, int tokSeen ,boolean inRecoverMode, IndentationHandler anIndentHandler) {
         int indent = anIndentHandler.getIndentValue();
-        IndentInfo newLinePoint= new IndentInfo(myParser.lineNumber, myParser.tokensSeen-1, indent);
+        IndentInfo newLinePoint= new IndentInfo(myParser.lineNumber, tokSeen, indent);
         newLinePoints.add(newLinePoint);
-        System.out.println(newLinePoints.size()-1+" NEWLINE ("+newLinePoint.getIndentValue()+")");
+        //System.out.println(newLinePoints.size()-1+" NEWLINE ("+newLinePoint.getIndentValue()+")"+newLinePoint.getTokensSeen());
         if(!inRecoverMode){
             newLinePoint.fillStackNodes(myParser.activeStacks);           
             if(newLinePoints.size()> MAX_SIZE_NEW_LINE_POINTS)

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-17 13:13:53 UTC (rev 20434)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2009-12-17 14:09:23 UTC (rev 20435)
@@ -215,11 +215,11 @@
     }
     
     public void parseRemainingTokens() throws IOException{
-        //System.out.println("------------- REMAINING CHARACTERS --------------- ");
+        System.out.println("------------- REMAINING CHARACTERS --------------- ");
         getHistory().setTokenIndex(skipRecovery.getEndPositionErrorFragment());        
         while(!getHistory().hasFinishedRecoverTokens() && mySGLR.activeStacks.size()>0 && mySGLR.acceptingStack==null){        
             getHistory().readRecoverToken(mySGLR, true);
-            //System.out.print((char)mySGLR.currentToken);
+            System.out.print((char)mySGLR.currentToken);
             mySGLR.doParseStep();            
         }        
     }



From L.C.L.Kats at tudelft.nl  Thu Dec 17 17:00:42 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 17 Dec 2009 16:00:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20436 - LennartKats -
	in spoofax-imp/trunk: org.eclipse.imp
	org.strategoxt.imp.editors.stratego/trans
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <200912171600.nBHG0ggX023171@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-17 16:00:42 +0000 (Thu, 17 Dec 2009)
New Revision: 20436

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20436&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2009-12-17 14:09:23 UTC (rev 20435)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2009-12-17 16:00:42 UTC (rev 20436)
@@ -113,6 +113,15 @@
                  continue;
              }
              changeTokenPresentation(parseController, presentation, token, locator);
+@@ -201,7 +204,7 @@
+             	int lastLength = presentation.getLastStyleRange().length;
+             	int end = lastStart + lastLength;
+         		TextPresentation newPresentation = null;
+-            	if (end >= charCount) {
++            	if (end > charCount) { // LK: > not >=
+             		newPresentation = new TextPresentation();
+             		Iterator presIt = presentation.getAllStyleRangeIterator();
+             		while (presIt.hasNext()) {
 Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/UniversalEditor.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/UniversalEditor.java	(revision 22255)

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2009-12-17 16:00:42 UTC (rev 20436)
@@ -0,0 +1,12 @@
+module analysis
+
+imports
+  desugar
+
+rules
+
+  rename-all = id
+
+  constraint-error = id
+
+  constraint-warning = id
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	2009-12-17 16:00:42 UTC (rev 20436)
@@ -0,0 +1,16 @@
+module desugar
+
+rules
+
+  basic-desugar:
+    SDef(x, a*, s) -> SDefT(x, a*, [], s)
+
+  basic-desugar:
+    RDef(x, a*, s) -> SDefT(x, a*, [], s)
+
+  basic-desugar:
+    SDefNoArgs(x) -> SDefT(x, [], [], s)
+
+  basic-desugar:
+    RDefNoArgs(x, s) -> SDefT(x, [], [], s)
+

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2009-12-17 14:09:23 UTC (rev 20435)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2009-12-17 16:00:42 UTC (rev 20436)
@@ -6,8 +6,31 @@
   libstratego-aterm
   libstrc
 
+strategies
+
+  ANALYSIS_ENABLED = fail
+
 rules
 
+  editor-analyze:
+    (ast, path, project-path) -> ([], [], [])
+    where
+       not(ANALYIS_ENABLED)
+
+  editor-analyze:
+    (ast, path, project-path) -> (errors, warnings, notes)
+    where
+       not(ANALYIS_ENABLED)
+    with
+      // Ensure all dynamic rules are properly scoped
+      try(dr-scope-all-end);
+      dr-scope-all-start
+    with
+      rename-all;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := [(ast, "Experimental Stratego analysis enabled")] 
+
   editor-resolve:
     (selected, position, ast, path, project-path) -> target
     where

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-17 14:09:23 UTC (rev 20435)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-12-17 16:00:42 UTC (rev 20436)
@@ -81,7 +81,7 @@
 	
 	public static final String UNEXPECTED_REGION = "Could not parse this fragment: misplaced construct(s)";
 	
-	public static final int PARSE_ERROR_DELAY = min(StrategoObserver.OBSERVER_DELAY + 50, 1000);
+	public static final int PARSE_ERROR_DELAY = min(StrategoObserver.OBSERVER_DELAY + 50, 800);
 	
 	private static Context asyncAmbReportingContext;
 	
@@ -215,7 +215,7 @@
 			}
 		};
 		job.setSystem(true);
-		job.schedule(PARSE_ERROR_DELAY);
+		job.schedule((long) (PARSE_ERROR_DELAY * (isRecoveryAvailable ? 1 : 1.5)));
 	}
 	
 	public void abortScheduledCommit() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-17 14:09:23 UTC (rev 20435)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-17 16:00:42 UTC (rev 20436)
@@ -380,7 +380,7 @@
 	}
 	
 	
-	public Iterator<IToken> getTokenIterator(IRegion region, boolean notForColorer) {
+	public Iterator<IToken> getTokenIterator(IRegion region, boolean force) {
 		// Threading concerns:
 		// - the colorer runs in the main thread and should not be blocked by ANY lock
 		// - CANNOT acquire parse lock:
@@ -390,7 +390,7 @@
 		
 		IPrsStream stream = currentParseStream;
 		
-		if (!notForColorer && (stream == null || disallowColorer || (editor != null && stream.getILexStream().getStreamLength() != editor.getDocument().getLength()))) {
+		if (!force && (stream == null || disallowColorer || (editor != null && stream.getILexStream().getStreamLength() != editor.getDocument().getLength()))) {
 			return SGLRTokenIterator.EMPTY;
 		} else if (stream.getTokens().size() == 0 || getCurrentAst() == null) {
 			// Parse hasn't succeeded yet, consider the entire stream as one big token



From L.C.L.Kats at tudelft.nl  Thu Dec 17 17:04:28 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 17 Dec 2009 16:04:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20437 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200912171604.nBHG4Skw023438@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-17 16:04:28 +0000 (Thu, 17 Dec 2009)
New Revision: 20437

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20437&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:
null check

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-17 16:00:42 UTC (rev 20436)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-17 16:04:28 UTC (rev 20437)
@@ -228,10 +228,12 @@
 
 	public void update(IParseController parseController, IProgressMonitor monitor) {
 		isUpdateStarted = true;
-		// System.out.println("OBSERVING " + System.currentTimeMillis()); // DEBUG
 		
+		IStrategoAstNode ast = (IStrategoAstNode) parseController.getCurrentAst();
+		if (ast == null) return;
+		
 		if (feedbackFunction == null) {
-			messages.clearMarkers(((IStrategoAstNode) parseController.getCurrentAst()).getResource());
+			messages.clearMarkers(ast.getResource());
 			messages.commitDeletions();
 			return;
 		}
@@ -239,7 +241,6 @@
 		if (monitor.isCanceled())
 			return;
 		
-		IStrategoAstNode ast = (IStrategoAstNode) parseController.getCurrentAst();
 		IStrategoTerm feedback = null;
 		
 		try {



From L.C.L.Kats at tudelft.nl  Thu Dec 17 17:25:30 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 17 Dec 2009 16:25:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20438 - LennartKats -
	aster/trunk/trans
Message-ID: <200912171625.nBHGPUVd023630@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-17 16:25:30 +0000 (Thu, 17 Dec 2009)
New Revision: 20438

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20438&view=rev

Modified:
   aster/trunk/trans/Makefile.am

Log:
Added a java/aster.jar target to build a Java version

Changes:

Modified: aster/trunk/trans/Makefile.am
===================================================================
--- aster/trunk/trans/Makefile.am	2009-12-17 16:04:28 UTC (rev 20437)
+++ aster/trunk/trans/Makefile.am	2009-12-17 16:25:30 UTC (rev 20438)
@@ -35,7 +35,16 @@
 
 aster.c : $(RTREES) ../runtime/aster-runtime.packed-rtree front/check.rtree
 	$(SCOMPILE) -c -i $< -o $@ $(SCFLAGS) $(STRINCLUDES) -m main-aster
-	
+
+# TODO: $(STRC_JAVA)/bin/strj?
+
+java/org/strategoxt/aster/Main.java : $(RTREES) ../runtime/aster-runtime.packed-rtree front/check.rtree
+	[ -e java/org/strategoxt/aster ] || mkdir -p java/org/strategoxt/aster
+	strj -clean -i $< -o $@ $(SCFLAGS) $(STRINCLUDES) -m main-aster
+
+java/aster.jar : java/org/strategoxt/aster/Main.java
+	strj-jar -i $< -o $@
+
 aster.copy : aster
 	cp aster aster.copy
 



From L.C.L.Kats at tudelft.nl  Fri Dec 18 11:33:00 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 18 Dec 2009 10:33:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20439 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/tools/org/strategoxt/tools/lib
Message-ID: <200912181033.nBIAX0hC007375@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-18 10:33:00 +0000 (Fri, 18 Dec 2009)
New Revision: 20439

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20439&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/StartupDescriptorLoader.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str

Log:
Revised the build system:
  - no longer breaks when the user deletes the .packed.esv file
  - made it a bit more reliable when custom properties are used
    (if eclipse.running is set, it works, except for the jar file copying)
  - more output is now printed for the final editor building/loading step



Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-17 16:25:30 UTC (rev 20438)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-18 10:33:00 UTC (rev 20439)
@@ -7,6 +7,9 @@
 strategies
 
   // TODO: -XX:+TieredCompilation in Java 7?
+  
+  // TODO: first ensure .packed.esv is built, then load it
+  //       maybe first call the thing on ${basedir}/editor/${esvmodule}.main.esv then on ${include}/${esvmodule}.packed.esv
 
   create-build-xml =
     // Note that we cannot call this file build.xml,
@@ -87,7 +90,6 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
-        <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
@@ -106,6 +108,7 @@
         </target>
         
         <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg,utils-files">
+            <echo message="Property eclipse.running is not set; assuming Eclipse is not running"/>
             <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
@@ -181,7 +184,7 @@
         </target>
     
         <target name="copy-sdf" if="externaldef">
-            <copy file="${externaldef}" todir="${include}" preservelastmodified="true"/>
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
         </target>
     
         <target name="copy-jar" if="externaljar">

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java	2009-12-17 16:25:30 UTC (rev 20438)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java	2009-12-18 10:33:00 UTC (rev 20439)
@@ -1,14 +1,14 @@
 package org.strategoxt.imp.metatooling.building;
 
+import static org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader.*;
+
 import java.io.File;
 import java.net.URI;
-import java.util.Arrays;
 
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IWorkspace;
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.NullProgressMonitor;
-import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
 import org.strategoxt.imp.runtime.Environment;
 
 /**
@@ -18,17 +18,31 @@
  */
 public class AntDescriptorBuilder {
 	public static void main(String[] args) {
-		if (args == null || args.length == 0 || !new File(args[0]).exists())
-			throw new IllegalArgumentException("Existing descriptor file expected: " + Arrays.toString(args));
+		if (args == null || args.length == 0)
+			throw new IllegalArgumentException("Descriptor file expected");
 		
-		URI uri = new File(args[0]).toURI();
+		synchronized (Environment.getSyncRoot()) {
+			String descriptor = args[0];
+			
+			IResource source = getResource(getSourceDescriptor(descriptor));
+			DynamicDescriptorBuilder.getInstance().updateResource(source, new NullProgressMonitor());
+			
+			/* loading is already performed by builder
+			System.out.println("Loading " + descriptor);
+			IResource target = getResource(descriptor);
+			DynamicDescriptorLoader.getInstance().loadPackedDescriptor(target);
+			*/
+		}
+	}
+
+	private static IResource getResource(String file) {
+		URI uri = new File(file).toURI();
 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
 		IResource[] resources = workspace.getRoot().findFilesForLocationURI(uri);
 		if (resources.length == 0)
-			throw new IllegalArgumentException("File not in workspace: " + args[0]);
-		
-		synchronized (Environment.getSyncRoot()) {
-			DynamicDescriptorUpdater.getInstance().updateResource(resources[0], new NullProgressMonitor(), false);
-		}
+			throw new IllegalArgumentException("File not in workspace: " + file);
+
+		IResource resource = resources[0];
+		return resource;
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-12-17 16:25:30 UTC (rev 20438)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-12-18 10:33:00 UTC (rev 20439)
@@ -1,7 +1,7 @@
 package org.strategoxt.imp.metatooling.building;
 
 import static org.eclipse.core.resources.IMarker.*;
-import static org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater.*;
+import static org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader.*;
 
 import java.io.IOException;
 
@@ -17,7 +17,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.generator.sdf2imp_jvm_0_0;
-import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
+import org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
@@ -37,6 +37,8 @@
  */
 public class DynamicDescriptorBuilder {
 	
+	private static final DynamicDescriptorBuilder instance = new DynamicDescriptorBuilder();
+	
 	private final AstMessageHandler messageHandler =
 		new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
 	
@@ -44,12 +46,8 @@
 	
 	private final EditorIOAgent agent;
 	
-	private final DynamicDescriptorUpdater loader;
-	
-	public DynamicDescriptorBuilder(DynamicDescriptorUpdater loader) {
+	private DynamicDescriptorBuilder() {
 		try {
-			this.loader = loader;
-			
 			agent = new EditorIOAgent();
 			context = new Context(Environment.getTermFactory(), agent);
 			context.registerClassLoader(make_permissive.class.getClassLoader());
@@ -61,12 +59,16 @@
 		}
 	}
 	
+	public static DynamicDescriptorBuilder getInstance() {
+		return instance;
+	}
+	
 	public void updateResource(IResource resource, IProgressMonitor monitor) {
 		IPath location = resource.getRawLocation();
 		if (location == null) return;
 		
 		try {
-			System.err.println("Resource changed: " + resource.getName()); // DEBUG
+			// System.err.println("Resource changed: " + resource.getName()); // DEBUG
 			if (resource.exists() && isMainFile(resource)) {
 				monitor.beginTask("Building " + resource.getName(), IProgressMonitor.UNKNOWN);
 				buildDescriptor(resource, monitor);
@@ -104,7 +106,7 @@
 			}
 			
 			monitor.beginTask("Loading " + mainFile.getName(), IProgressMonitor.UNKNOWN);
-			loader.loadPackedDescriptor(getTargetDescriptor(mainFile));
+			DynamicDescriptorLoader.getInstance().loadPackedDescriptor(getTargetDescriptor(mainFile));
 			
 		} catch (IOException e) {
 			Environment.logException("Unable to build descriptor for " + mainFile, e);

Copied: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java (from rev 20427, spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2009-12-18 10:33:00 UTC (rev 20439)
@@ -0,0 +1,251 @@
+package org.strategoxt.imp.metatooling.loading;
+
+import static org.eclipse.core.resources.IMarker.*;
+import static org.eclipse.core.resources.IResourceDelta.*;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.IResourceChangeEvent;
+import org.eclipse.core.resources.IResourceChangeListener;
+import org.eclipse.core.resources.IResourceDelta;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.resources.WorkspaceJob;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.metatooling.building.DynamicDescriptorBuilder;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
+
+/**
+ * This class updates any editors in the environment,
+ * triggered by resource change events.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class DynamicDescriptorLoader implements IResourceChangeListener {
+	
+	private static final DynamicDescriptorLoader instance = new DynamicDescriptorLoader();
+	
+	private final Set<IResource> asyncIgnoreOnce =
+		Collections.synchronizedSet(new HashSet<IResource>());
+	
+	private final AstMessageHandler asyncMessageHandler =
+		new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
+	
+	private DynamicDescriptorLoader() {
+		// use getInstance() instead
+	}
+	
+	public static DynamicDescriptorLoader getInstance() {
+		return instance;
+	}
+	
+	/**
+	 * Loads the editor for the specified descriptor,
+	 * and ignore it at the next resource event arrives.
+	 */
+	public void forceUpdate(IResource resource) {
+		synchronized (Environment.getSyncRoot()) {
+			assert resource.toString().endsWith(".packed.esv");
+			forceNoUpdate(resource);
+			loadPackedDescriptor(resource);
+		}
+	}
+
+	/**
+	 * Ignores the specified descriptor at the next resource event arrives.
+	 */
+	public void forceNoUpdate(IResource resource) {
+		synchronized (Environment.getSyncRoot()) {
+			asyncIgnoreOnce.add(resource);
+		}
+	}
+
+	public void resourceChanged(final IResourceChangeEvent event) {
+		if (event.getType() == IResourceChangeEvent.POST_CHANGE && isSignificantChange(event.getDelta())) {
+			// TODO: aggregate multiple events into a single job?
+			//       this seems to spawn way to many threads
+			Job job = new WorkspaceJob("Updating editor descriptor runtime") {
+				@Override
+				public IStatus runInWorkspace(IProgressMonitor monitor) {
+					// TODO: Finer-grained locking?
+					synchronized (Environment.getSyncRoot()) {
+						monitor.beginTask("", IProgressMonitor.UNKNOWN);
+						postResourceChanged(event.getDelta(), monitor);
+						return Status.OK_STATUS;
+					}
+				}
+			};
+			job.setRule(event.getResource());
+			job.schedule();
+		}
+	}
+	
+	public void postResourceChanged(IResourceDelta delta, IProgressMonitor monitor) {
+		IResourceDelta[] children = delta.getAffectedChildren();
+		
+		if (children.length == 0) {		
+			IResource resource = delta.getResource();
+			if (isSignificantChange(delta))
+				updateResource(resource, monitor, false);
+		} else {
+			// Recurse
+			for (IResourceDelta child : children)
+				postResourceChanged(child, monitor);
+		}
+	}
+
+	private static boolean isSignificantChange(IResourceDelta delta) {
+		int flags = delta.getFlags();
+		return (flags & CONTENT) == CONTENT
+			|| (flags & MOVED_TO) == MOVED_TO
+			|| (flags & MOVED_FROM) == MOVED_FROM
+			|| (flags & REPLACED) == REPLACED
+			|| (flags == 0);
+	}
+	
+	public void updateResource(IResource resource, IProgressMonitor monitor, boolean startup) {
+		Environment.assertLock();
+		
+		String name = resource.getName();
+		if (name.endsWith(".packed.esv")) {
+			IResource source = getSourceDescriptor(resource);
+			
+			if (asyncIgnoreOnce.contains(resource)) {
+				asyncIgnoreOnce.remove(resource);
+				return;
+			}
+			
+			if (!source.equals(resource) && source.exists() && !startup) {
+				// Try to build using the .main.esv instead;
+				// the build.xml file may touch the .packed.esv file
+				// to signal a rebuild is necessary
+				// TODO: Prevent duplicate builds triggered this way...?
+				DynamicDescriptorBuilder.getInstance().updateResource(source, monitor);
+			} else if (resource.exists()) {
+				monitor.subTask("Loading " + name);
+				loadPackedDescriptor(resource);
+			}
+		} else if (name.endsWith(".tbl")) {
+			name = name.substring(0, name.length() - 4);
+			if (resource instanceof IFile)
+				Environment.registerUnmanagedParseTable(name, (IFile) resource);
+		}
+	}
+
+	public void loadPackedDescriptor(IResource descriptor) {
+		Environment.assertLock();
+		
+		// TODO2: Properly trace back descriptor errors to their original source
+		IResource source = getSourceDescriptor(descriptor);
+		try {
+			asyncMessageHandler.clearMarkers(source);
+			asyncMessageHandler.clearMarkers(descriptor);
+			
+			IFile file = descriptor.getProject().getFile(descriptor.getProjectRelativePath());
+			Descriptor result = DescriptorFactory.load(file, getSourceDescriptor(descriptor));
+			result.setDynamicallyLoaded(true);
+			
+		} catch (BadDescriptorException e) {
+			Environment.logException("Error in descriptor " + descriptor, e);
+			reportError(source, "Error in descriptor: " + e.getMessage(), null);
+			reportError(descriptor, e.getOffendingTerm(), "Error in descriptor " + descriptor + ": " + e.getMessage(), e);
+		} catch (IOException e) {
+			Environment.logException("Error reading descriptor " + descriptor, e);
+			reportError(source, "Internal error reading descriptor " + descriptor + ": " + e.getMessage(), e);
+		} catch (CoreException e) {
+			Environment.logException("Unable to load descriptor " + descriptor, e);
+			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
+		} catch (RuntimeException e) {
+			Environment.logException("Unable to load descriptor " + descriptor, e);
+			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
+		} catch (Error e) { // workspace thread swallows this >:(
+			Environment.logException("Unable to load descriptor " + descriptor, e);
+			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
+			throw e;
+		} finally {
+			asyncMessageHandler.commitChanges();
+		}
+	}
+	
+	public static IResource getSourceDescriptor(IResource packedDescriptor) {
+		String name = packedDescriptor.getName();
+		if (name.endsWith(".main.esv")) return packedDescriptor;
+		name = name.substring(0, name.length() - ".packed.esv".length());
+		IResource result = packedDescriptor.getParent().getParent().findMember("editor/" + name + ".main.esv");
+		return result != null ? result : packedDescriptor;
+	}
+	
+	public static String getSourceDescriptor(String packedDescriptor) {
+		File file = new File(packedDescriptor);
+		String name = file.getName();
+		if (name.endsWith(".main.esv")) return packedDescriptor;
+		name = name.substring(0, name.length() - ".packed.esv".length());
+		return file.getParentFile().getParent() + "/editor/" + name + ".main.esv";
+	}
+	
+	public static IResource getTargetDescriptor(IResource mainDescriptor) {
+		String name = mainDescriptor.getName();
+		if (name.endsWith(".packed.esv")) return mainDescriptor;
+		name = name.substring(0, name.length() - ".main.esv".length());
+		IResource result = mainDescriptor.getParent().getParent().findMember("include/" + name + ".packed.esv");
+		return result != null ? result : mainDescriptor;
+	}
+	
+	private void reportError(final IResource descriptor, final String message, Throwable exception) {
+		Environment.assertLock();
+		
+		if (exception != null)
+			Environment.asynOpenErrorDialog("Dynamic editor descriptor loading", message, exception);
+		
+		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
+			Job job = new WorkspaceJob("Add error marker") {
+				{ setSystem(true); } // don't show to user
+				@Override
+				public IStatus runInWorkspace(IProgressMonitor monitor) {
+					asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
+					return Status.OK_STATUS;
+				}
+			};
+			job.setRule(descriptor);
+			job.schedule();
+		} else {
+			asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
+		}
+	}
+	
+	private void reportError(final IResource descriptor, final IStrategoTerm offendingTerm, final String message, final Throwable exception) {
+		Environment.assertLock();
+		
+		if (exception != null)
+			Environment.asynOpenErrorDialog("Dynamic editor descriptor loading", message, exception);
+
+		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
+			Job job = new WorkspaceJob("Add error marker") {
+				{ setSystem(true); } // don't show to user
+				@Override
+				public IStatus runInWorkspace(IProgressMonitor monitor) {
+					asyncMessageHandler.addMarker(descriptor, offendingTerm, message, SEVERITY_ERROR);
+					return Status.OK_STATUS;
+				}
+			};
+			job.setRule(descriptor);
+			job.schedule();
+		} else {
+			asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
+		}
+	}
+}

Deleted: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-12-17 16:25:30 UTC (rev 20438)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-12-18 10:33:00 UTC (rev 20439)
@@ -1,249 +0,0 @@
-package org.strategoxt.imp.metatooling.loading;
-
-import static org.eclipse.core.resources.IMarker.*;
-import static org.eclipse.core.resources.IResourceDelta.*;
-
-import java.io.IOException;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-import org.eclipse.core.resources.IFile;
-import org.eclipse.core.resources.IResource;
-import org.eclipse.core.resources.IResourceChangeEvent;
-import org.eclipse.core.resources.IResourceChangeListener;
-import org.eclipse.core.resources.IResourceDelta;
-import org.eclipse.core.resources.ResourcesPlugin;
-import org.eclipse.core.resources.WorkspaceJob;
-import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.core.runtime.jobs.Job;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.metatooling.building.DynamicDescriptorBuilder;
-import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
-import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
-import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
-
-/**
- * This class updates any editors in the environment,
- * triggered by resource change events.
- * 
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class DynamicDescriptorUpdater implements IResourceChangeListener {
-	
-	private static final DynamicDescriptorUpdater instance = new DynamicDescriptorUpdater();
-	
-	private final Set<IResource> asyncIgnoreOnce =
-		Collections.synchronizedSet(new HashSet<IResource>());
-	
-	private final AstMessageHandler asyncMessageHandler =
-		new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
-	
-	private DynamicDescriptorBuilder asyncBuilder;
-	
-	private DynamicDescriptorBuilder getBuilder() {
-		Environment.assertLock();
-		if (asyncBuilder == null)
-			asyncBuilder = new DynamicDescriptorBuilder(this);
-		return asyncBuilder;
-	}
-	
-	private DynamicDescriptorUpdater() {
-		// use getInstance() instead
-	}
-	
-	public static DynamicDescriptorUpdater getInstance() {
-		return instance;
-	}
-	
-	/**
-	 * Loads the editor for the specified descriptor,
-	 * and ignore it at the next resource event arrives.
-	 */
-	public void forceUpdate(IResource resource) {
-		synchronized (Environment.getSyncRoot()) {
-			assert resource.toString().endsWith(".packed.esv");
-			forceNoUpdate(resource);
-			loadPackedDescriptor(resource);
-		}
-	}
-
-	/**
-	 * Ignores the specified descriptor at the next resource event arrives.
-	 */
-	public void forceNoUpdate(IResource resource) {
-		synchronized (Environment.getSyncRoot()) {
-			asyncIgnoreOnce.add(resource);
-		}
-	}
-
-	public void resourceChanged(final IResourceChangeEvent event) {
-		if (event.getType() == IResourceChangeEvent.POST_CHANGE && isSignificantChange(event.getDelta())) {
-			// TODO: aggregate multiple events into a single job?
-			//       this seems to spawn way to many threads
-			Job job = new WorkspaceJob("Updating editor descriptor runtime") {
-				@Override
-				public IStatus runInWorkspace(IProgressMonitor monitor) {
-					// TODO: Finer-grained locking?
-					synchronized (Environment.getSyncRoot()) {
-						monitor.beginTask("", IProgressMonitor.UNKNOWN);
-						postResourceChanged(event.getDelta(), monitor);
-						return Status.OK_STATUS;
-					}
-				}
-			};
-			job.setRule(event.getResource());
-			job.schedule();
-		}
-	}
-	
-	public void postResourceChanged(IResourceDelta delta, IProgressMonitor monitor) {
-		IResourceDelta[] children = delta.getAffectedChildren();
-		
-		if (children.length == 0) {		
-			IResource resource = delta.getResource();
-			if (isSignificantChange(delta))
-				updateResource(resource, monitor, false);
-		} else {
-			// Recurse
-			for (IResourceDelta child : children)
-				postResourceChanged(child, monitor);
-		}
-	}
-
-	private static boolean isSignificantChange(IResourceDelta delta) {
-		int flags = delta.getFlags();
-		return (flags & CONTENT) == CONTENT
-			|| (flags & MOVED_TO) == MOVED_TO
-			|| (flags & MOVED_FROM) == MOVED_FROM
-			|| (flags & REPLACED) == REPLACED
-			|| (flags == 0);
-	}
-	
-	public void updateResource(IResource resource, IProgressMonitor monitor, boolean startup) {
-		Environment.assertLock();
-		
-		String name = resource.getName();
-		if (name.endsWith(".packed.esv")) {
-			IResource source = getSourceDescriptor(resource);
-			
-			if (asyncIgnoreOnce.contains(resource)) {
-				asyncIgnoreOnce.remove(resource);
-				return;
-			}
-			
-			if (!source.equals(resource) && source.exists() && !startup) {
-				// Try to build using the .main.esv instead;
-				// the build.xml file may touch the .packed.esv file
-				// to signal a rebuild is necessary
-				// TODO: Prevent duplicate builds triggered this way...?
-				getBuilder().updateResource(source, monitor);
-			} else if (resource.exists()) {
-				monitor.subTask("Loading " + name);
-				loadPackedDescriptor(resource);
-			}
-		} else if (name.endsWith(".tbl")) {
-			name = name.substring(0, name.length() - 4);
-			if (resource instanceof IFile)
-				Environment.registerUnmanagedParseTable(name, (IFile) resource);
-		}
-	}
-
-	public void loadPackedDescriptor(IResource descriptor) {
-		Environment.assertLock();
-		
-		// TODO2: Properly trace back descriptor errors to their original source
-		IResource source = getSourceDescriptor(descriptor);
-		try {
-			asyncMessageHandler.clearMarkers(source);
-			asyncMessageHandler.clearMarkers(descriptor);
-			
-			IFile file = descriptor.getProject().getFile(descriptor.getProjectRelativePath());
-			Descriptor result = DescriptorFactory.load(file, getSourceDescriptor(descriptor));
-			result.setDynamicallyLoaded(true);
-			
-		} catch (BadDescriptorException e) {
-			Environment.logException("Error in descriptor " + descriptor, e);
-			reportError(source, "Error in descriptor: " + e.getMessage(), null);
-			reportError(descriptor, e.getOffendingTerm(), "Error in descriptor " + descriptor + ": " + e.getMessage(), e);
-		} catch (IOException e) {
-			Environment.logException("Error reading descriptor " + descriptor, e);
-			reportError(source, "Internal error reading descriptor " + descriptor + ": " + e.getMessage(), e);
-		} catch (CoreException e) {
-			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
-		} catch (RuntimeException e) {
-			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
-		} catch (Error e) { // workspace thread swallows this >:(
-			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
-			throw e;
-		} finally {
-			asyncMessageHandler.commitChanges();
-		}
-	}
-	
-	public static IResource getSourceDescriptor(IResource packedDescriptor) {
-		String name = packedDescriptor.getName();
-		name = name.substring(0, name.length() - ".packed.esv".length());
-		IResource result = packedDescriptor.getParent().getParent().findMember("editor/" + name + ".main.esv");
-		return result != null ? result : packedDescriptor;
-	}
-	
-	public static IResource getTargetDescriptor(IResource packedDescriptor) {
-		String name = packedDescriptor.getName();
-		name = name.substring(0, name.length() - ".main.esv".length());
-		IResource result = packedDescriptor.getParent().getParent().findMember("include/" + name + ".packed.esv");
-		return result != null ? result : packedDescriptor;
-	}
-	
-	private void reportError(final IResource descriptor, final String message, Throwable exception) {
-		Environment.assertLock();
-		
-		if (exception != null)
-			Environment.asynOpenErrorDialog("Dynamic editor descriptor loading", message, exception);
-		
-		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
-			Job job = new WorkspaceJob("Add error marker") {
-				{ setSystem(true); } // don't show to user
-				@Override
-				public IStatus runInWorkspace(IProgressMonitor monitor) {
-					asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
-					return Status.OK_STATUS;
-				}
-			};
-			job.setRule(descriptor);
-			job.schedule();
-		} else {
-			asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
-		}
-	}
-	
-	private void reportError(final IResource descriptor, final IStrategoTerm offendingTerm, final String message, final Throwable exception) {
-		Environment.assertLock();
-		
-		if (exception != null)
-			Environment.asynOpenErrorDialog("Dynamic editor descriptor loading", message, exception);
-
-		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
-			Job job = new WorkspaceJob("Add error marker") {
-				{ setSystem(true); } // don't show to user
-				@Override
-				public IStatus runInWorkspace(IProgressMonitor monitor) {
-					asyncMessageHandler.addMarker(descriptor, offendingTerm, message, SEVERITY_ERROR);
-					return Status.OK_STATUS;
-				}
-			};
-			job.setRule(descriptor);
-			job.schedule();
-		} else {
-			asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
-		}
-	}
-}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/StartupDescriptorLoader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/StartupDescriptorLoader.java	2009-12-17 16:25:30 UTC (rev 20438)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/StartupDescriptorLoader.java	2009-12-18 10:33:00 UTC (rev 20439)
@@ -10,14 +10,14 @@
 
 /**
  * This class loads all active descriptors  in the workspace at startup,
- * and activates the <ref>DynamicDescriptorUpdater</ref> class.
+ * and activates the <ref>DynamicDescriptorLoader</ref> class.
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class StartupDescriptorLoader {
 	private static boolean didInitialize;
 	
-	private static DynamicDescriptorUpdater loader;
+	private static DynamicDescriptorLoader loader;
 	
 	private StartupDescriptorLoader() {}
 	
@@ -30,7 +30,7 @@
 			if (didInitialize) return;
 			didInitialize = true;
 			
-			loader = DynamicDescriptorUpdater.getInstance();
+			loader = DynamicDescriptorLoader.getInstance();
 		
 			loadAllServices();
 			

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-12-17 16:25:30 UTC (rev 20438)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-12-18 10:33:00 UTC (rev 20439)
@@ -24,7 +24,7 @@
 import org.eclipse.ui.IWorkbench;
 import org.spoofax.interpreter.core.Interpreter;
 import org.strategoxt.imp.generator.sdf2imp;
-import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
+import org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
@@ -174,10 +174,10 @@
 				monitor.worked(6);
 
 				// TODO: Optimize - don't reload editor (already done from Ant file)
-				// DynamicDescriptorUpdater.getInstance().forceNoUpdate(descriptor);
+				// DynamicDescriptorLoader.getInstance().forceNoUpdate(descriptor);
 				monitor.setTaskName("Loading editor");
 				IResource descriptor = project.findMember("include/" + languageName + ".packed.esv");
-				DynamicDescriptorUpdater.getInstance().forceUpdate(descriptor);
+				DynamicDescriptorLoader.getInstance().forceUpdate(descriptor);
 				monitor.worked(2);
 
 				project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-17 16:25:30 UTC (rev 20438)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-12-18 10:33:00 UTC (rev 20439)
@@ -131,7 +131,7 @@
 			}
 		}
 		
-		loadJars(jars);
+		if (!jars.isEmpty()) loadJars(jars);
 		Debug.stopTimer("Loaded analysis components");
 		
 		monitor.subTask(null);
@@ -230,7 +230,8 @@
 		isUpdateStarted = true;
 		
 		IStrategoAstNode ast = (IStrategoAstNode) parseController.getCurrentAst();
-		if (ast == null) return;
+		if (ast == null || ast.getConstructor() == null)
+			return;
 		
 		if (feedbackFunction == null) {
 			messages.clearMarkers(ast.getResource());
@@ -247,9 +248,6 @@
 			synchronized (getSyncRoot()) {
 				if (runtime == null)
 					init(monitor);
-	
-				if (ast == null || ast.getConstructor() == null)
-					return;
 				
 				feedback = invokeSilent(feedbackFunction, ast.getResource(), makeInputTerm(ast, false));
 	

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	2009-12-17 16:25:30 UTC (rev 20438)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	2009-12-18 10:33:00 UTC (rev 20439)
@@ -46,9 +46,9 @@
 	
 	@Override
 	protected IStrategoTerm init() {
-		java.io.InputStream stream = container.getResourceAsStream("/" + name);
+		java.io.InputStream stream = container.getResourceAsStream(path + name);
 		if (stream == null)
-			stream = container.getResourceAsStream(path + name);
+			stream = container.getResourceAsStream("/" + name);
 		if (stream == null)
 			throw new StrategoException(container.getSimpleName()
 					+ ": Could not find imported term file " + name);
@@ -64,9 +64,9 @@
 	}
 	
 	private ATerm initATerm(ATermFactory factory) {
-		java.io.InputStream stream = container.getResourceAsStream("/" + name);
+		java.io.InputStream stream = container.getResourceAsStream(path + name);
 		if (stream == null)
-			stream = container.getResourceAsStream(path + name);
+			stream = container.getResourceAsStream("/" + name);
 		if (stream == null)
 			throw new StrategoException(container.getSimpleName()
 					+ ": Could not find imported term file " + name);

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-12-17 16:25:30 UTC (rev 20438)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-12-18 10:33:00 UTC (rev 20439)
@@ -30,7 +30,7 @@
     <+ <xtc-exit> 1
 
   native-transform(tool, args) =
-    if <get-config> "-Xnativepath" => nativepath; not("") then
+    if <get-config> "-Xnativepath" => nativepath; file-exists then
       xtc-ensure-file => FILE(input)
     ; xtc-new-file    => output
     ; tool'  := <conc-strings> (nativepath, <tool>)



From L.C.L.Kats at tudelft.nl  Fri Dec 18 11:53:36 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 18 Dec 2009 10:53:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20440 - LennartKats -
	in spoofax-imp/trunk: . org.strategoxt.imp.editors.stratego/trans
Message-ID: <200912181053.nBIAraGs007522@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-18 10:53:36 +0000 (Fri, 18 Dec 2009)
New Revision: 20440

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20440&view=rev

Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str

Log:


Changes:

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-12-18 10:33:00 UTC (rev 20439)
+++ spoofax-imp/trunk/Makefile	2009-12-18 10:53:36 UTC (rev 20440)
@@ -1,12 +1,19 @@
-DEFS=-Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib -Declipse.spoofaximp.strategojar=utils/strategoxt.jar
+all : org.eclipse.imp/org.eclipse.imp.runtime.patch \
+      org.strategoxt.imp.generator/lib/sdf2imp.jar \
+      org.strategoxt.imp.editors.editorservice.ant \
+      org.strategoxt.imp.editors.sdf.ant \
+      org.strategoxt.imp.editors.stratego.ant \
+      org.strategoxt.imp.editors.aterm.ant
 
-all : org.eclipse.imp/org.eclipse.imp.runtime.patch
+org.strategoxt.imp.generator/lib/sdf2imp.jar : .PHONY
 	$(MAKE) -C org.strategoxt.imp.generator all
-	(cd org.strategoxt.imp.editors.editorservice && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar ant -f build.main.xml -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def $(DEFS))
-	(cd org.strategoxt.imp.editors.sdf && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar ant -f build.main.xml -Dexternaldef=syntax/SDF.def $(DEFS))
-	(cd org.strategoxt.imp.editors.stratego && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar ant -f build.main.xml -Dexternaldef=syntax/Stratego-Sugar.def $(DEFS))
-	(cd org.strategoxt.imp.editors.aterm && CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar ant -f build.main.xml -Dexternaldef=syntax/ATerm.def $(DEFS))
 
+%.ant : .PHONY
+	cd $* && ANT_OPTS=-Xss4m CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar \
+	    ant -f build.main.xml -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def \
+	                             -Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib \
+	                             -Declipse.spoofaximp.strategojar=utils/strategoxt.jar
+
 check : all
 	$(MAKE) -C org.strategoxt.imp.generator check
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	2009-12-18 10:33:00 UTC (rev 20439)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	2009-12-18 10:53:36 UTC (rev 20440)
@@ -9,7 +9,7 @@
     RDef(x, a*, s) -> SDefT(x, a*, [], s)
 
   basic-desugar:
-    SDefNoArgs(x) -> SDefT(x, [], [], s)
+    SDefNoArgs(x, s) -> SDefT(x, [], [], s)
 
   basic-desugar:
     RDefNoArgs(x, s) -> SDefT(x, [], [], s)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2009-12-18 10:33:00 UTC (rev 20439)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2009-12-18 10:53:36 UTC (rev 20440)
@@ -5,6 +5,7 @@
   libstratego-gpp
   libstratego-aterm
   libstrc
+  analysis
 
 strategies
 
@@ -15,12 +16,12 @@
   editor-analyze:
     (ast, path, project-path) -> ([], [], [])
     where
-       not(ANALYIS_ENABLED)
+       not(ANALYSIS_ENABLED)
 
   editor-analyze:
     (ast, path, project-path) -> (errors, warnings, notes)
     where
-       not(ANALYIS_ENABLED)
+       not(ANALYSIS_ENABLED)
     with
       // Ensure all dynamic rules are properly scoped
       try(dr-scope-all-end);



From L.C.L.Kats at tudelft.nl  Fri Dec 18 17:26:55 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 18 Dec 2009 16:26:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20442 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/sdf2imp/util
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <200912181626.nBIGQtlx013332@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-18 16:26:55 +0000 (Fri, 18 Dec 2009)
New Revision: 20442

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20442&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Log:
Fixed editor not loading properly when /include/ dir didn't exist

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str	2009-12-18 15:31:13 UTC (rev 20441)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str	2009-12-18 16:26:55 UTC (rev 20442)
@@ -49,6 +49,7 @@
   
   current-main-descriptor-file =
      {| InputDirPrefix, OnImportFailure:
+       verbose-msg(!"Reading descriptor files");
        <add-input-dir-prefix> "editor/";
        rules(
          OnImportFailure:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str	2009-12-18 15:31:13 UTC (rev 20441)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str	2009-12-18 16:26:55 UTC (rev 20442)
@@ -84,6 +84,7 @@
     );
     
     pp-descriptor-to-string;
+    print-filename(|[path], filename);
     output-text-file'(|[path], filename)
   
   is-descriptor-imported(|name) =

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java	2009-12-18 15:31:13 UTC (rev 20441)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java	2009-12-18 16:26:55 UTC (rev 20442)
@@ -26,12 +26,6 @@
 			
 			IResource source = getResource(getSourceDescriptor(descriptor));
 			DynamicDescriptorBuilder.getInstance().updateResource(source, new NullProgressMonitor());
-			
-			/* loading is already performed by builder
-			System.out.println("Loading " + descriptor);
-			IResource target = getResource(descriptor);
-			DynamicDescriptorLoader.getInstance().loadPackedDescriptor(target);
-			*/
 		}
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2009-12-18 15:31:13 UTC (rev 20441)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2009-12-18 16:26:55 UTC (rev 20442)
@@ -4,12 +4,14 @@
 import static org.eclipse.core.resources.IResourceDelta.*;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IResourceChangeEvent;
 import org.eclipse.core.resources.IResourceChangeListener;
@@ -19,6 +21,7 @@
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -39,8 +42,8 @@
 	
 	private static final DynamicDescriptorLoader instance = new DynamicDescriptorLoader();
 	
-	private final Set<IResource> asyncIgnoreOnce =
-		Collections.synchronizedSet(new HashSet<IResource>());
+	private final Set<String> asyncIgnoreOnce =
+		Collections.synchronizedSet(new HashSet<String>());
 	
 	private final AstMessageHandler asyncMessageHandler =
 		new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
@@ -69,8 +72,15 @@
 	 * Ignores the specified descriptor at the next resource event arrives.
 	 */
 	public void forceNoUpdate(IResource resource) {
+		forceNoUpdate(resource.getFullPath().toString());
+	}
+
+	/**
+	 * Ignores the specified descriptor at the next resource event arrives.
+	 */
+	public void forceNoUpdate(String file) {
 		synchronized (Environment.getSyncRoot()) {
-			asyncIgnoreOnce.add(resource);
+			asyncIgnoreOnce.add(file);
 		}
 	}
 
@@ -124,10 +134,8 @@
 		if (name.endsWith(".packed.esv")) {
 			IResource source = getSourceDescriptor(resource);
 			
-			if (asyncIgnoreOnce.contains(resource)) {
-				asyncIgnoreOnce.remove(resource);
+			if (asyncIgnoreOnce.remove(resource.getFullPath().toString()))
 				return;
-			}
 			
 			if (!source.equals(resource) && source.exists() && !startup) {
 				// Try to build using the .main.esv instead;
@@ -186,7 +194,12 @@
 		if (name.endsWith(".main.esv")) return packedDescriptor;
 		name = name.substring(0, name.length() - ".packed.esv".length());
 		IResource result = packedDescriptor.getParent().getParent().findMember("editor/" + name + ".main.esv");
-		return result != null ? result : packedDescriptor;
+		if (result == null) {
+			Environment.logException("Source descriptor not found", new FileNotFoundException("include/" + name + ".packed.esv"));
+			return packedDescriptor;
+		} else {
+			return result;
+		}
 	}
 	
 	public static String getSourceDescriptor(String packedDescriptor) {
@@ -201,8 +214,27 @@
 		String name = mainDescriptor.getName();
 		if (name.endsWith(".packed.esv")) return mainDescriptor;
 		name = name.substring(0, name.length() - ".main.esv".length());
-		IResource result = mainDescriptor.getParent().getParent().findMember("include/" + name + ".packed.esv");
-		return result != null ? result : mainDescriptor;
+		IProject project = mainDescriptor.getProject();
+		IResource result = project.findMember("include/" + name + ".packed.esv");
+		
+		if (result == null) {
+			getInstance().forceNoUpdate(project.getFullPath() + "/include/" + name + ".packed.esv");
+			IResource includeDir = project.findMember("/include");
+			try {
+				if (includeDir == null) project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
+				else includeDir.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
+			} catch (CoreException e) {
+				Environment.logException("Exception when refreshing resources", e);
+			}
+			result = project.findMember("include/" + name + ".packed.esv");
+		}
+		
+		if (result == null) {
+			Environment.logException("Target descriptor not found", new FileNotFoundException("include/" + name + ".packed.esv"));
+			return mainDescriptor;
+		} else {
+			return result;
+		}
 	}
 	
 	private void reportError(final IResource descriptor, final String message, Throwable exception) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-18 15:31:13 UTC (rev 20441)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-12-18 16:26:55 UTC (rev 20442)
@@ -436,7 +436,7 @@
 		} catch (IOException e) {
 			Environment.logException("Forced parse failed", e);
 		} catch (CoreException e) {
-			if (e.getMessage().contains("Resource is out of sync")) // don't log these
+			if (e.getMessage().contains("Resource is out of sync") || e.getMessage().contains("does not exist")) // don't log these
 				return;
 			Environment.logException("Forced parse failed", e);
 		}



From L.C.L.Kats at tudelft.nl  Sun Dec 20 18:51:43 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 20 Dec 2009 17:51:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20443 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200912201751.nBKHphPT032084@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-20 17:51:43 +0000 (Sun, 20 Dec 2009)
New Revision: 20443

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20443&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java

Log:
Minor parse filter optimization.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-12-18 16:26:55 UTC (rev 20442)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-12-20 17:51:43 UTC (rev 20443)
@@ -608,7 +608,8 @@
     private boolean hasGreaterPriority(int l0, int l1, int arg) {
         List<Priority> prios = lookupGtrPriority(parseTable.getLabel(l0));
         	
-        for (Priority p : prios) {
+        for (int i = 0, size = prios.size(); i < size; i++) {
+            Priority p = prios.get(i);
         	if (l1 == p.right)
         		if (p.arg == -1 || p.arg == arg) {
         			return true;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-12-18 16:26:55 UTC (rev 20442)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-12-20 17:51:43 UTC (rev 20443)
@@ -11,6 +11,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import aterm.AFun;
 import aterm.ATerm;
@@ -73,6 +74,8 @@
 
     private transient HashMap<RangeList, RangeList> rangesCache = new HashMap<RangeList, RangeList>();
     
+    private transient Map<Label, List<Priority>> priorityCache;
+    
     public ParseTable(ATerm pt) throws InvalidParseTableException {
         initAFuns(pt.getFactory());
         parse(pt);
@@ -578,14 +581,20 @@
     }
 
     public List<Priority> getPriorities(Label prodLabel) {
-        // TODO: optimize - *maybe* cache getPriorities()?
-        List<Priority> ret = new ArrayList<Priority>();
+        if (priorityCache == null) priorityCache = new HashMap<Label, List<Priority>>();        
+        List<Priority> results = priorityCache.get(prodLabel);
+        if (results != null) return results;
+        
+        results = new ArrayList<Priority>();
         for (Priority p : priorities) {
             if (p.left == prodLabel.labelNumber && p.type == Priority.GTR) {
-                ret.add(p);
+                results.add(p);
             }
         }
-        return ret;
+        
+        priorityCache.put(prodLabel, results);
+        
+        return results;
     }
 
     public Label lookupInjection(int prod) {



From L.C.L.Kats at tudelft.nl  Sun Dec 20 18:54:28 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 20 Dec 2009 17:54:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20444 - LennartKats -
 spoofax/trunk/spoofax/org.spoofax.compiler/src/java/org/spoofax/compiler
 spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm
 spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library
 spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
 spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms
 spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr
 spoofax-imp/trunk/org.strategoxt.imp.feature
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/!
 ast
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
 strc-java/trunk/java
 strc-java/trunk/java/runtime/org/strategoxt/lang/compat
 strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr
Message-ID: <200912201754.nBKHsSLd032100@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-20 17:54:27 +0000 (Sun, 20 Dec 2009)
New Revision: 20444

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20444&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFile.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPOpenFile.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPReadTextFromStream.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceMappings.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/ATermConverter.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileReader.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/RuntimeActivator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPAnnoLocationPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPJSGLRLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.compiler/src/java/org/spoofax/compiler/Compiler.java
   spoofax/trunk/spoofax/org.spoofax.compiler/src/java/org/spoofax/compiler/Main.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/BAFBasicTermFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fopen.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/TermConverter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_stratego.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatLibrary.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_read_text_from_stream.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_open_parsetable_compat.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_parse_string_pt_compat.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/STRSGLR_get_parse_error.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
- Refactored the AST-origin mapping and added AST-resource mapping
- Concrete syntax: enabled heuristic filters for files with a .meta file (unless HeuristicFilters(False()) is specified)
- Optimization: introduced a new ATermConverter class to convert between IStrategoTerms and ATerms (spans many files; relates to SPI-9)


Changes (first 1000 lines of the diffs):

Modified: spoofax/trunk/spoofax/org.spoofax.compiler/src/java/org/spoofax/compiler/Compiler.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.compiler/src/java/org/spoofax/compiler/Compiler.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.compiler/src/java/org/spoofax/compiler/Compiler.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -11,6 +11,10 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.InvalidParseTableException;
 
+/**
+ * @deprecated use strc-java instead
+ */
+ at Deprecated
 public class Compiler {
 	private Interpreter compiler;
 	private String sharePath;

Modified: spoofax/trunk/spoofax/org.spoofax.compiler/src/java/org/spoofax/compiler/Main.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.compiler/src/java/org/spoofax/compiler/Main.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.compiler/src/java/org/spoofax/compiler/Main.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -11,6 +11,10 @@
 import org.spoofax.interpreter.terms.InlinePrinter;
 import org.spoofax.jsglr.InvalidParseTableException;
 
+/**
+ * @deprecated use strc-java instead
+ */
+ at Deprecated
 public class Main {
     public static void main(String[] args) throws IOException, InterpreterException, InvalidParseTableException {
     

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/ATermConverter.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/ATermConverter.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/ATermConverter.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -0,0 +1,252 @@
+package org.spoofax.interpreter.adapter.aterm;
+
+import java.util.WeakHashMap;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+import aterm.AFun;
+import aterm.ATerm;
+import aterm.ATermAppl;
+import aterm.ATermFactory;
+import aterm.ATermInt;
+import aterm.ATermList;
+import aterm.ATermReal;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ATermConverter {
+    
+    private static final int INT_CACHE_MAX = 255;
+
+    private final ATermFactory atermFactory;
+
+    private final ITermFactory factory;
+
+    private final boolean useSharing;
+
+    private final WeakHashMap<ATerm, IStrategoTerm> cache = new WeakHashMap<ATerm, IStrategoTerm>();
+    
+    private final ATermList emptyList;
+    
+    private final IStrategoInt[] intCache = new IStrategoInt[INT_CACHE_MAX + 1];
+
+    public ATermConverter(ATermFactory atermFactory, ITermFactory factory,
+            boolean useSharing) {
+        this.atermFactory = atermFactory;
+        this.factory = factory;
+        this.useSharing = useSharing;
+        emptyList = atermFactory == null ? null : atermFactory.makeList();
+    }
+
+    // ATerms to StrategoTerms
+
+    public IStrategoTerm[] convertAll(ATerm[] terms) {
+        IStrategoTerm[] results = new IStrategoTerm[terms.length];
+        for (int i = 0; i < terms.length; i++) {
+            results[i] = convert(terms[i]);
+        }
+        return results;
+    }
+
+    public IStrategoTerm convert(ATerm term) {
+        if (factory == null)
+            throw new IllegalStateException("Term factory is null");
+        
+        if (factory instanceof WrappedATermFactory)
+            return ((WrappedATermFactory) factory).wrapTerm(term);
+        
+        int type = term.getType();
+
+        if (type == ATerm.INT) return convert((ATermInt) term);
+        
+        IStrategoTerm result;
+        if (useSharing) {
+            result = cache.get(term);
+            if (result != null) return result;
+        }
+        
+        switch (type) {
+            // APPL and LIST are inlined to help stack usage
+            case ATerm.APPL:
+                ATermAppl appl = (ATermAppl) term;
+                if (appl.isQuoted() && appl.getArity() == 0) {
+                    return convertString(appl);
+                } else if (appl.getName().length() == 0) {
+                    return convertTuple(appl);
+                } else {
+                    ATerm[] aterms = appl.getArgumentArray();
+                    IStrategoTerm[] terms = new IStrategoTerm[aterms.length];
+                    for (int i = 0; i < aterms.length; i++) {
+                        terms[i] = convert(aterms[i]);
+                    }
+                    IStrategoConstructor ctor = convert(appl.getAFun());
+                    result = annotate(factory.makeAppl(ctor, terms), appl);
+                    break;
+                }
+            case ATerm.LIST:
+                ATermList list = (ATermList) term;
+                IStrategoTerm[] terms = new IStrategoTerm[list.getLength()];
+                for (int i = 0; i < terms.length; i++) {
+                    terms[i] = convert(list.getFirst());
+                    list = list.getNext();
+                }
+                result = annotate(factory.makeList(terms), list);
+                break;
+            case ATerm.AFUN:
+                result = convert((AFun) term);
+                break;
+            case ATerm.REAL:
+                result = convert((ATermReal) term);
+                break;
+            case ATerm.BLOB:
+                throw new UnsupportedOperationException("Converting an ATerm blob to a Stratego term");
+            default:
+                throw new IllegalStateException("Unknown term type: "
+                        + term.getClass().getSimpleName());
+        }
+
+        if (useSharing) cache.put(term, result);
+        return result;
+    }
+
+    private IStrategoConstructor convert(AFun constructor) {
+        return factory.makeConstructor(constructor.getName(), constructor.getArity());
+    }
+
+    private IStrategoInt convert(ATermInt term) {
+        IStrategoInt result;
+        int value = term.getInt();
+        
+        if (0 <= value && value <= INT_CACHE_MAX) {
+            result = intCache[value];
+            if (result == null) result = intCache[value] = factory.makeInt(value);
+            return annotate(result, term);
+        }
+        
+        result = (IStrategoInt) cache.get(term);
+        if (result != null) return result;
+        
+        result = annotate(factory.makeInt(value), term);
+        cache.put(term, result);
+        return result;
+    }
+
+    private IStrategoReal convert(ATermReal term) {
+        return annotate(factory.makeReal(term.getReal()), term);
+    }
+
+    private IStrategoString convertString(ATermAppl term) {
+        return annotate(factory.makeString(term.getName()), term);
+    }
+
+    private IStrategoTuple convertTuple(ATermAppl term) {
+        IStrategoTerm[] subterms = convertAll(term.getArgumentArray());
+        return annotate(factory.makeTuple(subterms), term);
+    }
+
+    @SuppressWarnings("unchecked")
+    protected <T extends IStrategoTerm> T annotate(T term, ATerm input) {
+        ATermList annotations = input.getAnnotations();
+        if (annotations == null || annotations == emptyList) {
+            return term;
+        } else {
+            return (T) factory.annotateTerm(term, (IStrategoList) convert(annotations));
+        }
+    }
+
+    // StrategoTerms to ATerms
+
+    public ATerm[] convertAll(IStrategoTerm[] terms) {
+        ATerm[] results = new ATerm[terms.length];
+        for (int i = 0; i < terms.length; i++) {
+            results[i] = convert(terms[i]);
+        }
+        return results;
+    }
+
+    public ATerm convert(IStrategoTerm term) {
+        if (atermFactory == null)
+            throw new IllegalStateException("ATerm factory is null");
+        
+        if (term instanceof WrappedATerm && ((WrappedATerm) term).parent == atermFactory)
+            return ((WrappedATerm) term).getATerm();
+
+        switch (term.getTermType()) {
+            // APPL and LIST are inlined to help stack usage
+            case IStrategoTerm.APPL:
+                IStrategoAppl appl = (IStrategoAppl) term;
+                IStrategoTerm[] terms = appl.getAllSubterms();
+                ATerm[] aterms = new ATerm[terms.length];
+                for (int i = 0; i < terms.length; i++) {
+                    aterms[i] = convert(terms[i]);
+                }
+                AFun ctor = convert(appl.getConstructor());
+                return annotate(atermFactory.makeAppl(ctor, aterms), appl);
+            case IStrategoTerm.LIST:
+                IStrategoList list = (IStrategoList) term;
+                IStrategoTerm[] terms2 = list.getAllSubterms();
+                ATermList result = atermFactory.makeList();
+                for (int i = terms2.length - 1; i >= 0; i--) {
+                    result = atermFactory.makeList(convert(terms2[i]), result);
+                }
+                return result;
+            case IStrategoTerm.CTOR:
+                return convert((IStrategoConstructor) term);
+            case IStrategoTerm.INT:
+                return convert((IStrategoInt) term);
+            case IStrategoTerm.REAL:
+                return convert((IStrategoReal) term);
+            case IStrategoTerm.STRING:
+                return convert((IStrategoString) term);
+            case IStrategoTerm.TUPLE:
+                return convert((IStrategoTuple) term);
+            case IStrategoTerm.BLOB:
+                throw new UnsupportedOperationException("Converting an blob to an ATerm");
+            default:
+                throw new IllegalStateException("Unknown term type: "
+                        + term.getClass().getSimpleName());
+        }
+    }
+
+    public AFun convert(IStrategoConstructor constructor) {
+        return atermFactory.makeAFun(constructor.getName(), constructor.getArity(), false);
+    }
+
+    private ATermInt convert(IStrategoInt term) {
+        return annotate(atermFactory.makeInt(term.intValue()), term);
+    }
+
+    private ATermReal convert(IStrategoReal term) {
+        return annotate(atermFactory.makeReal(term.realValue()), term);
+    }
+
+    private ATermAppl convert(IStrategoString term) {
+        AFun fun = atermFactory.makeAFun(term.stringValue(), 0, true);
+        return annotate(atermFactory.makeAppl(fun), term);
+    }
+
+    private ATermAppl convert(IStrategoTuple term) {
+        AFun fun = atermFactory.makeAFun("", term.getSubtermCount(), false);
+        ATerm[] subterms = convertAll(term.getAllSubterms());
+        return annotate(atermFactory.makeAppl(fun, subterms), term);
+    }
+
+    @SuppressWarnings("unchecked")
+    protected <T extends ATerm> T annotate(T term, IStrategoTerm input) {
+        IStrategoList annotations = input.getAnnotations();
+        if (annotations == null || annotations.isEmpty()) {
+            return term;
+        } else {
+            return (T) term.setAnnotations((ATermList) convert(annotations));
+        }
+    }
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/BAFBasicTermFactory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/BAFBasicTermFactory.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/BAFBasicTermFactory.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -14,6 +14,8 @@
 /**
  * A basic term factory that can read BAF aterms.
  * 
+ * (Has been replaced by org.strategotx.lang.terms.TermFactory.)
+ * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class BAFBasicTermFactory extends BasicTermFactory {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -11,10 +11,15 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LoggingIOAgent extends IOAgent {
-    private final PrintStream stderr =
-        new PrintStream(new LoggingOutputStream(System.err), true); 
-    private final PrintStream stdout =
-        new PrintStream(new LoggingOutputStream(System.out), true);
+    
+    private final LoggingOutputStream stdoutLog = new LoggingOutputStream(System.out);
+    
+    private final LoggingOutputStream stderrLog = new LoggingOutputStream(System.err);
+    
+    private final PrintStream stdout = new PrintStream(stdoutLog, true);
+    
+    private final PrintStream stderr = new PrintStream(stderrLog, true);
+    
     final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
     
     public String getLog() {
@@ -28,17 +33,19 @@
     @Override
     public PrintStream getOutputStream(int fd) {
         switch (fd) {
+            case CONST_STDOUT:
+                stderrLog.stream = System.out; // might have changed
+                return stdout;
             case CONST_STDERR:
+                stderrLog.stream = System.err; // might have changed
                 return stderr;
-            case CONST_STDOUT:
-                return stdout;
             default:
                 return super.getOutputStream(fd);
         }
     }
     
     private class LoggingOutputStream extends OutputStream {
-        private final OutputStream stream;
+        OutputStream stream;
         
         public LoggingOutputStream(OutputStream stream) {
             this.stream = stream;
@@ -69,8 +76,10 @@
         
         @Override
         public void close() throws IOException {
-            if (stream != System.out && stream != System.err)
-                stream.close();
+            // UNDONE: closing console streams is asking for trouble
+            // if (stream != System.out && stream != System.err)
+            //    stream.close();
+            stream.flush();
         }
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fopen.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fopen.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fopen.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -15,12 +15,15 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_fopen extends AbstractPrimitive {
 
-    SSL_fopen() {
-        super("SSL_fopen", 0, 2);
+    public static final String NAME = "SSL_fopen";
+    
+    protected SSL_fopen() {
+        super(NAME, 0, 2);
     }
     
     @Override
@@ -35,15 +38,22 @@
         String fn = Tools.javaString(tvars[0]);
         String mode = Tools.javaString(tvars[1]);
         
+        IStrategoInt result = call(env, fn, mode);
+        if (result == null) return false;
+        
+        env.setCurrent(result);
+        return true;
+    }
+
+    protected IStrategoInt call(IContext env, String fn, String mode) {
         SSLLibrary op = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         try {
             int ref = op.getIOAgent().openRandomAccessFile(fn, mode);
-            env.setCurrent(env.getFactory().makeInt(ref));
-            return true;
+            return env.getFactory().makeInt(ref);
         } catch (FileNotFoundException e) {
-            return false;
+            return null;
         } catch (IOException e) {
-            return false;
+            return null;
         }
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/TermConverter.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/TermConverter.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/TermConverter.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -12,8 +12,6 @@
  */
 public class TermConverter {
     
-    // TODO: support ATerms, maintaining sharing?
-    
     private final ITermFactory factory;
     
     private final HashMap<IStrategoConstructor, IStrategoConstructor> constructors =
@@ -37,10 +35,26 @@
     
     public IStrategoTerm convert(IStrategoTerm term) {
         switch (term.getTermType()) {
-            case APPL: return convert((IStrategoAppl) term);
+            // APPL and LIST are inlined to help stack usage
+            case APPL:
+                IStrategoAppl appl = (IStrategoAppl) term;
+                IStrategoTerm[] terms = appl.getAllSubterms();
+                IStrategoTerm[] subTerms = new IStrategoTerm[terms.length];
+                for (int i = 0; i < terms.length; i++) {
+                    subTerms[i] = convert(terms[i]);
+                }
+                IStrategoConstructor ctor = convert(appl.getConstructor());
+                return annotate(factory.makeAppl(ctor, subTerms), appl);
+            case LIST:
+                IStrategoList list = (IStrategoList) term;
+                IStrategoTerm[] terms2 = list.getAllSubterms();
+                IStrategoTerm[] subTerms2 = new IStrategoTerm[terms2.length];
+                for (int i = 0; i < terms2.length; i++) {
+                    subTerms2[i] = convert(terms2[i]);
+                }
+                return annotate(factory.makeList(subTerms2), list);
             case CTOR: return convert((IStrategoConstructor) term);
             case INT: return convert((IStrategoInt) term);
-            case LIST: return convert((IStrategoList) term);
             case REAL: return convert((IStrategoReal) term);
             case STRING: return convert((IStrategoString) term);
             case TUPLE: return convert((IStrategoTuple) term);
@@ -50,7 +64,7 @@
         }
     }
 
-    public IStrategoAppl convert(IStrategoAppl term) {
+    public final IStrategoAppl convert(IStrategoAppl term) {
         IStrategoTerm[] subTerms = convertAll(term.getAllSubterms());
         IStrategoConstructor ctor = convert(term.getConstructor());
         return annotate(factory.makeAppl(ctor, subTerms), term);
@@ -69,7 +83,7 @@
         return annotate(factory.makeInt(term.intValue()), term);
     }
 
-    public IStrategoList convert(IStrategoList term) {
+    public final IStrategoList convert(IStrategoList term) {
         IStrategoTerm[] subterms = convertAll(term.getAllSubterms());
         return annotate(factory.makeList(subterms), term);
     }
@@ -90,7 +104,7 @@
     @SuppressWarnings("unchecked")
     protected<T extends IStrategoTerm> T annotate(T term, T input) {
         IStrategoList annotations = input.getAnnotations();
-        if (annotations.isEmpty()) {
+        if (annotations == null || annotations.isEmpty()) {
             return term;
         } else {
             return (T) factory.annotateTerm(term, convert(annotations));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.spoofax.interpreter.adapter.aterm.ATermConverter;
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -14,18 +15,31 @@
 public class JSGLRLibrary extends AbstractStrategoOperatorRegistry {
     
 	public static final String REGISTRY_NAME = "JSGLR";
+	
 	private ParseTableManager parseTableManager;
-	private WrappedATermFactory factory;
+	
+	private ATermFactory atermFactory;
+	
 	private int parseTableCounter;
+	
 	private Map<Integer, ParseTable> parseTables;
+	
+	private ATermConverter atermConverter;
+	
+	private ITermFactory lastFactory;
 
+	@Deprecated
 	public JSGLRLibrary(WrappedATermFactory termFactory) {
-		this.factory = termFactory;
+		this(termFactory.getFactory());
+    }
+	
+	public JSGLRLibrary(ATermFactory atermFactory) {
+		this.atermFactory = atermFactory;
 		init();
-        add(new JSGLR_parse_stratego(factory));
-        add(new JSGLR_open_parsetable(factory));
-        add(new JSGLR_parse_string_pt(factory));
-    }
+        add(new JSGLR_parse_stratego(atermFactory));
+        add(new JSGLR_open_parsetable());
+        add(new JSGLR_parse_string_pt(atermFactory));
+	}
 
 	public String getOperatorRegistryName() {
 		return REGISTRY_NAME;
@@ -38,7 +52,7 @@
 
 	public ParseTableManager getParseTableManager() {
 		if(parseTableManager == null)
-			parseTableManager = new ParseTableManager(factory.getFactory());
+			parseTableManager = new ParseTableManager(atermFactory);
 		return parseTableManager;
 	}
 
@@ -52,12 +66,10 @@
 	public ParseTable getParseTable(int idx) {
 		return parseTables.get(idx);
 	}
-
-	protected ITermFactory getFactory() {
-		return factory;
-	}
 	
-	protected ATermFactory getATermFactory() {
-		return factory.getFactory();
+	public ATermConverter getATermConverter(ITermFactory factory) {
+		if (lastFactory != factory)
+			atermConverter = new ATermConverter(atermFactory, factory, true);
+		return atermConverter;
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRPrimitive.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRPrimitive.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRPrimitive.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -1,5 +1,6 @@
 package org.spoofax.interpreter.library.jsglr;
 
+import org.spoofax.interpreter.adapter.aterm.ATermConverter;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 
@@ -12,5 +13,9 @@
     protected static JSGLRLibrary getLibrary(IContext env) {
         return (JSGLRLibrary) env.getOperatorRegistry(JSGLRLibrary.REGISTRY_NAME);
     }
+    
+    protected static ATermConverter getATermConverter(IContext env) {
+    	return getLibrary(env).getATermConverter(env.getFactory());
+    }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -2,30 +2,25 @@
 
 import java.util.WeakHashMap;
 
-import org.spoofax.interpreter.adapter.aterm.WrappedATerm;
-import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.TermConverter;
 import org.spoofax.jsglr.InvalidParseTableException;
 import org.spoofax.jsglr.ParseTable;
 
+import aterm.ATerm;
+
 public class JSGLR_open_parsetable extends JSGLRPrimitive {
     
     // TODO: Do (non-static) caching at the IContext level
     
     private final WeakHashMap<IStrategoTerm, IStrategoInt> parseTableCache =
         new WeakHashMap<IStrategoTerm, IStrategoInt>();
-    
-    private final TermConverter wrappedFactoryConverter;
 
-	public JSGLR_open_parsetable(WrappedATermFactory factory) {
-		super("JSGLR_open_parsetable", 0, 1);
-		
-		wrappedFactoryConverter = new TermConverter(factory);
+	public JSGLR_open_parsetable() {
+		super("JSGLR_open_parsetable", 0, 1);		
 	}
 
 	@Override
@@ -40,13 +35,11 @@
 	        return true;
 	    }
 	    
-	    WrappedATerm tableTerm = tvars[0] instanceof WrappedATerm
-	            ? (WrappedATerm) tvars[0]
-	            : (WrappedATerm) wrappedFactoryConverter.convert(tvars[0]);
+	    ATerm tableTerm = getATermConverter(env).convert(tvars[0]);
 		
 		JSGLRLibrary lib = getLibrary(env);
 		try {
-			ParseTable pt = lib.getParseTableManager().loadFromTerm(tableTerm.getATerm());
+			ParseTable pt = lib.getParseTableManager().loadFromTerm(tableTerm);
 			IStrategoInt result = env.getFactory().makeInt(lib.addParseTable(pt));
             
 			env.setCurrent(result);			

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_stratego.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_stratego.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_stratego.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -7,8 +7,6 @@
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
-import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
-import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -19,14 +17,17 @@
 import org.spoofax.jsglr.SGLRException;
 
 import aterm.ATerm;
+import aterm.ATermFactory;
 
-public class JSGLR_parse_stratego extends AbstractPrimitive {
+public class JSGLR_parse_stratego extends JSGLRPrimitive {
+	
+	private final ATermFactory atermFactory;
+	
 	private SGLR StrategoSGLR;
-	private WrappedATermFactory factory;
 	
-	JSGLR_parse_stratego(WrappedATermFactory termFactory) {
+	JSGLR_parse_stratego(ATermFactory atermFactory) {
 		super("JSGLR_parse_stratego", 0, 1);
-		this.factory = termFactory;
+		this.atermFactory = atermFactory;
 	}
 	
 	@Override
@@ -55,18 +56,18 @@
 		}
 		if (parsed == null)
 			return false;
-		env.setCurrent(factory.wrapTerm(parsed));
+		env.setCurrent(getATermConverter(env).convert(parsed));
 		return true;
 	}
 
 	private void initialize() {
 		// FIXME this must be cleaned
-		ParseTableManager ptm = new ParseTableManager(factory.getFactory());
+		ParseTableManager ptm = new ParseTableManager(atermFactory);
 
 		ParseTable pt;
 		try {
 			pt = ptm.loadFromFile(System.getProperty("share.dir") + "/Stratego.tbl");
-			StrategoSGLR = new SGLR(factory.getFactory(), pt);
+			StrategoSGLR = new SGLR(atermFactory, pt);
 		} catch (FileNotFoundException e) {
 			e.printStackTrace();
 		} catch (IOException e) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -2,13 +2,9 @@
 
 import static org.spoofax.interpreter.core.Tools.*;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.io.PrintStream;
 
-import org.spoofax.interpreter.adapter.aterm.WrappedATerm;
-import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
@@ -16,28 +12,31 @@
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.TermConverter;
 import org.spoofax.jsglr.ParseTable;
 import org.spoofax.jsglr.SGLR;
 import org.spoofax.jsglr.SGLRException;
 
+import aterm.ATerm;
+import aterm.ATermFactory;
+
 public class JSGLR_parse_string_pt extends JSGLRPrimitive {
 
-	private final WrappedATermFactory factory;
+	private final ATermFactory atermFactory;
 	
 	private SGLRException lastException;
 	
 	private String lastPath;
 
-	protected JSGLR_parse_string_pt(WrappedATermFactory factory) {
+	protected JSGLR_parse_string_pt(ATermFactory factory) {
 		super("JSGLR_parse_string_pt", 1, 4);
-		this.factory = factory;
+		this.atermFactory = factory;
 	}
 	
-	protected JSGLR_parse_string_pt(WrappedATermFactory factory, String name, int svars, int tvars) {
+	protected JSGLR_parse_string_pt(ATermFactory factory, String name, int svars, int tvars) {
 		super(name, svars, tvars);
-		this.factory = factory;
+		this.atermFactory = factory;
 	}
 	
 	public String getLastPath() {
@@ -82,7 +81,7 @@
 			return false;
 
 		try {
-			IStrategoTerm result = call(env, asJavaString(tvars[0]), table, startSymbol, tvars[0] instanceof WrappedATerm);
+			IStrategoTerm result = call(env, (IStrategoString) tvars[0], table, startSymbol);
 			env.setCurrent(result);
 			return result != null;
 		} catch (IOException e) {
@@ -91,25 +90,22 @@
 			return false;
 		} catch (SGLRException e) {
 			lastException = e;
-			IStrategoTerm errorTerm = factory.wrapTerm(e.toTerm(lastPath));
-			env.setCurrent(TermConverter.convert(env.getFactory(), errorTerm));
+			IStrategoTerm errorTerm = getATermConverter(env).convert(e.toTerm(lastPath));
+			env.setCurrent(errorTerm);
 			
 			// FIXME: Stratego doesn't seem to print the erroneous line in Java
 			return svars[0].evaluate(env);
 		}
 	}
 	
-	public IStrategoTerm call(IContext env, String input,
-			ParseTable table, String startSymbol, boolean outputWrappedATerm)
+	protected IStrategoTerm call(IContext env, IStrategoString input,
+			ParseTable table, String startSymbol)
 			throws InterpreterException, IOException, SGLRException {
 		
-		SGLR parser = new SGLR(factory.getFactory(), table);
+		SGLR parser = new SGLR(atermFactory, table);
 		
-		// TODO: Use SGLR.parse(String, String) instead
-		InputStream is = new ByteArrayInputStream(input.getBytes("ISO-8859-1"));
-		IStrategoTerm result = factory.wrapTerm(parser.parse(is, startSymbol));
-		if (!outputWrappedATerm)
-			result = TermConverter.convert(env.getFactory(), result);
+		ATerm resultATerm = parser.parse(input.stringValue(), startSymbol);
+		IStrategoTerm result = getATermConverter(env).convert(resultATerm);
 		
 		return result;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-20 17:54:27 UTC (rev 20444)
@@ -87,7 +87,7 @@
          id="org.spoofax.jsglr"
          download-size="0"
          install-size="0"
-         version="0.2.2.qualifier"
+         version="0.2.1.qualifier"
          unpack="false"/>
 
    <plugin

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.management.ManagementFactory;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -10,9 +11,9 @@
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.imp.language.Language;
-import org.eclipse.imp.runtime.RuntimePlugin;
 import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.swt.widgets.Display;
+import org.spoofax.interpreter.adapter.aterm.ATermConverter;
 import org.spoofax.interpreter.adapter.aterm.UnsharedWrappedATermFactory;
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.core.InterpreterException;
@@ -29,6 +30,7 @@
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.IMPJSGLRLibrary;
 import org.strategoxt.imp.runtime.stratego.IMPLibrary;
+import org.strategoxt.imp.runtime.stratego.IMPOpenFile;
 import org.strategoxt.imp.runtime.stratego.IMPParseStringPTPrimitive;
 import org.strategoxt.imp.runtime.stratego.adapter.WrappedAstNodeFactory;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
@@ -52,6 +54,8 @@
 		
 	private final static ATermFactory factory;
 	
+	private final static ATermConverter atermConverter;
+	
 	private final static ParseTableManager parseTableManager;
 	
 	private final static Map<String, ParseTable> parseTables;
@@ -72,9 +76,17 @@
 		descriptors = Collections.synchronizedMap(new HashMap<String, Descriptor>());
 		unmanagedTables = Collections.synchronizedMap(new HashMap<String, ParseTableProvider>());
 		wrappedAstNodeFactory = new WrappedAstNodeFactory();
-		IMPJSGLRLibrary.init();
+		atermConverter = new ATermConverter(factory, wrappedAstNodeFactory, true);
+		if (!isServerMode()) logWarning("Ensure eclipse is started with -vmwargs -server for best performance");
 	}
 	
+	private static boolean isServerMode() {
+		for (String arg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {
+			if (arg.startsWith("-server")) return true;
+		}
+		return false;
+	}
+	
 	// TODO: Split up shared and non-shared environment entities?
 	
 	// LOCKING
@@ -120,6 +132,14 @@
 		return wrappedFactory;
 	}
 	
+	public static ATermConverter getATermConverter() {
+	    return atermConverter;
+	}
+	
+	public static ATermFactory getATermFactory() {
+	    return factory;
+	}
+	
 	public static SGLR createSGLR(ParseTable parseTable) {
 		// (no state; no assertion)
 		return new SGLR(factory, parseTable);
@@ -155,12 +175,16 @@
 				}
 			};
 		
+		result.getCompiledContext().registerComponent("stratego_lib"); // ensure op. registry available
 		result.getCompiledContext().registerComponent("stratego_sglr"); // ensure op. registry available
 		SGLRCompatLibrary sglrLibrary = (SGLRCompatLibrary) result.getContext().getOperatorRegistry(SGLRCompatLibrary.REGISTRY_NAME);
-		result.addOperatorRegistry(new IMPJSGLRLibrary(sglrLibrary));
+		IMPJSGLRLibrary impSglrLibrary = new IMPJSGLRLibrary(sglrLibrary);
+		result.addOperatorRegistry(impSglrLibrary);
 		result.addOperatorRegistry(new IMPLibrary());
+		impSglrLibrary.addOverrides(result.getCompiledContext());
 		assert result.getContext().lookupOperator(IMPParseStringPTPrimitive.NAME) instanceof IMPParseStringPTPrimitive;
 		assert result.getCompiledContext().lookupPrimitive(IMPParseStringPTPrimitive.NAME) instanceof IMPParseStringPTPrimitive;
+		assert result.getCompiledContext().lookupPrimitive(IMPOpenFile.NAME) instanceof IMPOpenFile;
 		result.setIOAgent(new EditorIOAgent());
 		
 		return result;
@@ -232,24 +256,32 @@
 	// ERROR HANDLING
 	
 	public static void logException(String message, Throwable t) {
-		System.err.println(message);
-		t.printStackTrace();
-		RuntimePlugin.getInstance().logException(message, t);
+		if (Debug.ENABLED) {
+			if (message != null) System.err.println(message);
+			t.printStackTrace();
+		}
+		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, 0, message, null);
+		RuntimeActivator.getInstance().getLog().log(status);
 	}
 	
 	public static void logException(String message) {
-		System.err.println(message);
-		RuntimePlugin.getInstance().logException(message, new RuntimeException(message));
+		logException(message, new RuntimeException(message));
 	}
 	
 	public static void logException(Throwable t) {
-		RuntimePlugin.getInstance().logException(null, t);
+		logException(null, t);
 	}
+	
+	public static void logWarning(String message) {
+		if (Debug.ENABLED) System.err.println("Warning: " + message);
+		Status status = new Status(IStatus.WARNING, RuntimeActivator.PLUGIN_ID, 0, message, null);
+		RuntimeActivator.getInstance().getLog().log(status);
+	}
 
 	public static void asynOpenErrorDialog(final String caption, final String message, final Throwable exception) {
 		Display.getDefault().asyncExec(new Runnable() {
 			public void run() {
-				Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message, exception);
+				Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, 0, message, exception);
 				ErrorDialog.openError(null, caption, null, status);
 			}
 		});

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/RuntimeActivator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/RuntimeActivator.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/RuntimeActivator.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -19,12 +19,12 @@
 		instance = this;
 	}
 
-	public static RuntimeActivator getDefault() { 
+	public static RuntimeActivator getInstance() { 
 		return instance;
 	}
 
 	public static InputStream getResourceAsStream(String string) throws IOException {
-        URL url = FileLocator.find(RuntimeActivator.getDefault().getBundle(), new Path(string), null);
+        URL url = FileLocator.find(RuntimeActivator.getInstance().getBundle(), new Path(string), null);
         
         if (url != null)
         	return url.openStream();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -43,7 +43,7 @@
 	
 	protected static final String DEFAULT_ICON = "icons/IMP-editor.gif";
 	
-	protected static final String DEFAULT_ICON_BUNDLE = RuntimeActivator.getDefault().getBundle().getSymbolicName();
+	protected static final String DEFAULT_ICON_BUNDLE = RuntimeActivator.getInstance().getBundle().getSymbolicName();
 	
 	private final Map<AbstractService, Object> services = new WeakHashMap<AbstractService, Object>();
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -67,7 +67,7 @@
 
 	@Override
 	protected ATerm doParseNoImplode(char[] inputChars, String filename) throws SGLRException, IOException {
-		ATermFactory factory = Environment.getWrappedATermFactory().getFactory();
+		ATermFactory factory = Environment.getATermFactory();
 		File outputFile = File.createTempFile("parserOutput", null);
 		File inputFile = filename == null || !new File(filename).exists()
 				? streamToTempFile(toByteStream(inputChars))

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-12-20 17:51:43 UTC (rev 20443)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-12-20 17:54:27 UTC (rev 20444)
@@ -15,7 +15,6 @@
 import org.spoofax.jsglr.SGLR;
 import org.spoofax.jsglr.SGLRException;
 import org.spoofax.jsglr.TokenExpectedException;

(1154 diff lines omitted)


From m.dejonge at tudelft.nl  Tue Dec 22 10:48:22 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 22 Dec 2009 09:48:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20445 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912220948.nBM9mMHH031101@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-22 09:48:22 +0000 (Tue, 22 Dec 2009)
New Revision: 20445

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20445&view=rev

Removed:
   sglr-recovery/trunk/RecoveryLogging/src/logging/ConsoleWriter.java
Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/TimeMeasuring.aj

Log:


Changes:

Deleted: sglr-recovery/trunk/RecoveryLogging/src/logging/ConsoleWriter.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/ConsoleWriter.java	2009-12-20 17:54:27 UTC (rev 20444)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/ConsoleWriter.java	2009-12-22 09:48:22 UTC (rev 20445)
@@ -1,17 +0,0 @@
-package logging;
-
-public class ConsoleWriter {
-    
-    public static void writeToConsole(FileLog inputFile){
-        System.out.println(inputFile.getFileName());
-        for (RegionLog region : inputFile.getRegionInfo()) {
-            System.out.println("\t execution times: ");
-            System.out.println(region.getExecutionTimetable());
-            System.out.println("\t skipped fragment: ");
-            System.out.println(region.getSkippedFragment());
-            System.out.println("\t inspected fragments: ");
-            System.out.println(region.getInspectedFragments());
-        }        
-    }
-
-}

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-20 17:54:27 UTC (rev 20444)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 09:48:22 UTC (rev 20445)
@@ -1,34 +1,56 @@
 package logging;
 
 import java.util.ArrayList;
-import org.spoofax.jsglr.FineGrainedRepair;
-//import org.spoofax.jsglr.IStructureSkipper;
-import org.spoofax.jsglr.IStructureSkipper;
-import org.spoofax.jsglr.IndentInfo;
-import org.spoofax.jsglr.Main;
-import org.spoofax.jsglr.RecoveryConnector;
-import org.spoofax.jsglr.RegionRecovery;
-import org.spoofax.jsglr.SGLR;
-import org.spoofax.jsglr.StructureSkipSuggestion;
 
+import org.spoofax.jsglr.*;
+
+
 public aspect RecoveryLogging extends TimeMeasuring{
 
     private FileLog currentFile;
-    private RegionLog currentRegion;
-    private ArrayList<FileLog> recoveryInfoOfFiles;
+    private RegionLog currentRegion;    
+    private boolean logRegionSkips;    
+    private boolean logRecoveryMethods;
+    private boolean logParsing;
+    
+    public void setLogRecoveryMethods(boolean logRecoveryMethods) {
+		this.logRecoveryMethods = logRecoveryMethods;
+	}
 
-    public FileLog getFileLog() {
-        return currentFile;
+	public void setLogParsing(boolean logParsing) {
+		this.logParsing = logParsing;
+	}
+	private boolean logExecutionTimes;
+    private boolean logRestricted;
+    
+    public void setLogRestricted(boolean logRestricted) {
+		this.logRestricted = logRestricted;
+	}
+
+	public boolean isLogging(){
+    	return logExecutionTimes || logParsing || logRecoveryMethods || logRegionSkips;
     }
     
-    public ArrayList<FileLog> getRecoveryInfoOfFiles() {
-        return recoveryInfoOfFiles;
+    public void setLogExecutionTimes(boolean logExecutionTimes) {
+		this.logExecutionTimes = logExecutionTimes;
+	}
+    
+    public void setLogRegionSkips(boolean logRegionSkips) {
+		this.logRegionSkips = logRegionSkips;
+	}
+
+	public FileLog getFileLog() {
+        return currentFile;
     }
 
     public RecoveryLogging(){
         currentFile=new FileLog();
         currentRegion=new RegionLog();
-        recoveryInfoOfFiles=new ArrayList<FileLog>();
+        //logRegionSkips=true;
+        //logExecutionTimes=true;
+        logParsing=true;
+        logRecoveryMethods=true;
+        logRestricted=true;
     }
     
     pointcut parsing(String x, String y, SGLR s): 
@@ -39,122 +61,175 @@
     
     pointcut timing():
         execution(boolean RegionRecovery.selectErroneousFragment()) ||
-        execution(void FineGrainedRepair.findRecoverBranch(ArrayList<IndentInfo>, int)) ||
+        execution(boolean FineGrainedOnRegion.recover()) ||
+        execution(boolean RecoveryConnector.tryBridgeRepair(String)) ||
         execution(void RecoveryConnector.doRecoverSteps());
     
+    pointcut fineGrained():        
+        execution(boolean FineGrainedOnRegion.recover());
+    
+    pointcut bridgeParsing():        
+        execution(boolean RecoveryConnector.tryBridgeRepair(String));
+    
+    pointcut whiteSpaceParsing():        
+        execution(boolean RecoveryConnector.parseErrorFragmentAsWhiteSpace());
+    
+    pointcut remainingTokensParsing():        
+        execution(boolean RecoveryConnector.parseRemainingTokens())||
+        execution(boolean FineGrainedOnRegion.parseRemainingTokens());
+    
     pointcut regionSelection(RegionRecovery rs):
         execution(boolean RegionRecovery.selectErroneousFragment()) && target(rs);
     
     pointcut regionTesting(RegionRecovery rs, StructureSkipSuggestion regionTested):
-        execution(void RegionRecovery.testRegion(StructureSkipSuggestion)) && target(rs) && args(regionTested);
+        execution(boolean RegionRecovery.testRegion(StructureSkipSuggestion)) && target(rs) && args(regionTested);
    
  // /*
-    pointcut prevRegion(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPreviousSkipSuggestions())&& target(rs);
+    pointcut prevRegion(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPreviousSkipSuggestions(int))&& target(rs);
     
-    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prevRegions): prevRegion(rs) {
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prevRegions): prevRegion(rs) {
 	  for (StructureSkipSuggestion prev : prevRegions) {
 		  String region = rs.getHistory().getFragment(prev);
-		  String correctedRegion=region.substring(prev.getAdditionalTokens().length);
-		  currentRegion.addPrevRegion(correctedRegion);
-		  System.out.println("************   PREVIOUS REGION  **********");
-		  System.out.println(correctedRegion);
-		  System.out.println("********************************************");
+		  //String correctedRegion=region.substring(prev.getAdditionalTokens().length);
+		  currentRegion.addPrevRegion(region);
+		  String header="PREVIOUS REGION";
+		  writeRegionToConsole(region, header, logRestricted);
 	  }		  
     }
+
+	private void writeRegionToConsole(String region, String header, boolean restricted) {
+		if(logRegionSkips && !restricted){
+		  System.out.println("************ "+header+" **********");
+		  System.out.println(region);
+		  System.out.println("********************************************");
+	  }
+	}
     
-    pointcut currRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getCurrentSkipSuggestions())&& target(rs);
+    pointcut currRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getCurrentSkipSuggestions(int))&& target(rs);
 
-    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> currentRegions): currRegions(rs) {
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> currentRegions): currRegions(rs) {
   	  for (StructureSkipSuggestion aRegion: currentRegions) {
-  		  String region = rs.getHistory().getFragment(aRegion);
-		  String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
-  		  currentRegion.addCurrRegion(correctedRegion);
-  		  System.out.println("************   CURRENT REGION  **********");
-		  System.out.println(correctedRegion);
-		  System.out.println("********************************************");
-  	  }
+  		  String region = rs.getHistory().getFragment(aRegion);		  
+  		  currentRegion.addCurrRegion(region);
+  		  writeRegionToConsole(region, "CURRENT REGION", logRestricted);
+  		}
    }
     
-    pointcut zoomRegionsPC(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getZoomOnPreviousSuggestions(StructureSkipSuggestion))&& target(rs);
+    pointcut zoomRegionsPC(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getZoomOnPreviousSuggestions(StructureSkipSuggestion))&& target(rs);
 
-    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): zoomRegionsPC(rs) {
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): zoomRegionsPC(rs) {
     	for (StructureSkipSuggestion aRegion: prRegions) {
-    		String region = rs.getHistory().getFragment(aRegion);
-  		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
-    		currentRegion.addZoomRegion(correctedRegion);
-  		    System.out.println("************   ZOOM REGION  **********");
-  		    System.out.println(correctedRegion);
-  		    System.out.println("********************************************");
-  	  }
+    		String region = rs.getHistory().getFragment(aRegion);  		    
+    		currentRegion.addZoomRegion(region);
+    		writeRegionToConsole(region, "ZOOM REGION", logRestricted);
+		}
    }
     
-    pointcut parentRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getParentSkipSuggestions())&& target(rs);
+    pointcut parentRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getParentSkipSuggestions(int))&& target(rs);
 
-    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> parRegions): parentRegions(rs) {
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> parRegions): parentRegions(rs) {
     	for (StructureSkipSuggestion aRegion: parRegions) {
-    		String region = rs.getHistory().getFragment(aRegion);
-  		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
-    		currentRegion.addParentRegion(correctedRegion);
-  		    System.out.println("************   PARENT REGION  **********");
-  		    System.out.println(correctedRegion);
-  		    System.out.println("********************************************");
-  	  }
+    		String region = rs.getHistory().getFragment(aRegion);  		    
+    		currentRegion.addParentRegion(region);
+    		writeRegionToConsole(region, "PARENT REGION", logRestricted);
+		}
    }
     
-    pointcut priorRegionsPC(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPriorSkipSuggestions())&& target(rs);
+    pointcut priorRegionsPC(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPriorSkipSuggestions(int))&& target(rs);
 
-    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): priorRegionsPC(rs) {
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): priorRegionsPC(rs) {
     	for (StructureSkipSuggestion aRegion: prRegions) {
-    		String region = rs.getHistory().getFragment(aRegion);
-  		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
-    		currentRegion.addPriorRegion(correctedRegion);
-  		    System.out.println("************   PRIOR REGION  **********");
-  		    System.out.println(correctedRegion);
-  		    System.out.println("********************************************");
-  	  }
+    		String region = rs.getHistory().getFragment(aRegion);  		    
+    		currentRegion.addPriorRegion(region);
+    		writeRegionToConsole(region, "PRIOR REGION", logRestricted);
+		}
    }
     
-    pointcut sibBWRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingBackwardSuggestions())&& target(rs);
-    pointcut sibFWRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingForwardSuggestions())&& target(rs);
-    pointcut sibSurrRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingSurroundingSuggestions())&& target(rs);
+    pointcut sibBWRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingBackwardSuggestions(int))&& target(rs);
+    pointcut sibFWRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingForwardSuggestions(int))&& target(rs);
+    pointcut sibSurrRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingSurroundingSuggestions(int))&& target(rs);
 
-    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): sibBWRegions(rs) || sibFWRegions(rs)||sibSurrRegions(rs){
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): sibBWRegions(rs) || sibFWRegions(rs)||sibSurrRegions(rs){
     	for (StructureSkipSuggestion aRegion: prRegions) {
-    		String region = rs.getHistory().getFragment(aRegion);
-  		    String correctedRegion=region.substring(aRegion.getAdditionalTokens().length);
-    		currentRegion.addSiblingRegion(correctedRegion);
-  		    System.out.println("************   SIBLING REGION  **********");
-  		    System.out.println(correctedRegion);
-  		    System.out.println("********************************************");
-  	  }
+    		String region = rs.getHistory().getFragment(aRegion);  		    
+    		currentRegion.addSiblingRegion(region);
+    		writeRegionToConsole(region, "SIBLING REGION", logRestricted);
+		}
    }
 
    // */
     before(String x, String y, SGLR s): parsing(x, y, s) {
         currentFile=new FileLog();
         currentFile.setFileName(x);
-        //System.out.println("KKL"+x);
-    }   
+        if(isLogging()){
+        	System.out.println("Start Parsing: "+x);
+        	if(!logRestricted)
+        		System.out.println("Recovery Settings: "+"...(todo)");
+        }        
+    }
     
+    after(String x, String y, SGLR s): parsing(x, y, s) {
+    	if(s.acceptingStack!=null){
+    		Link l = s.acceptingStack.findDirectLink(s.startFrame);
+    		if(logRecoveryMethods)
+    			System.out.println("Number of Recover Productions: "+l.recoverCount);
+    	}
+    	else{
+    		if(logParsing || logRecoveryMethods)
+    			System.out.println("Parsing failed");
+		}
+    	
+    }
+    
     after(RegionRecovery rs, StructureSkipSuggestion region): regionTesting(rs, region) {
-            currentRegion.addInspectedFragments(rs.getInputFragment(region));
+            //currentRegion.addInspectedFragments(rs.getInputFragment(region));
             //System.out.println(rs.getInputFragment(region));
     }
     
     after(RegionRecovery rs) returning (boolean succeeded): regionSelection(rs) {
-        if(succeeded)
-            currentRegion.setSkippedFragment(rs.getErrorFragment());
+        if(succeeded){
+            currentRegion.setSkippedFragment(rs.getErrorFragmentWithLeftMargin());
+            writeRegionToConsole(rs.getErrorFragmentWithLeftMargin(), "SKIPPED SUCCESSFULLY", false);            
+        }
+        if(logRecoveryMethods && !logRestricted)
+        	System.out.println("Region-Skip succeeded: "+ succeeded);
     }
     
+    after() returning (boolean succeeded): fineGrained() {        
+        if(logRecoveryMethods)
+        	System.out.println("Fine-Grained succeeded: "+ succeeded);
+    }
+    
+    after() returning (boolean succeeded): bridgeParsing() {        
+        if(logRecoveryMethods)
+        	System.out.println("Bridge-parsing succeeded: "+ succeeded);
+    }
+    
+    after() returning (boolean succeeded): whiteSpaceParsing() {        
+        if(logRecoveryMethods)
+        	System.out.println("Whitespace-parsing succeeded: "+ succeeded);
+        if(!succeeded){
+        	System.out.println("Whitespace parsing failed unexpectedly");
+        	System.err.println("Whitespace parsing failed unexpectedly");
+    	}
+    }
+    
+    after() returning (boolean succeeded): remainingTokensParsing() {        
+        if(logRecoveryMethods && !logRestricted)
+        	System.out.println("Parsing remaining characters succeeded: " + succeeded);        
+    }
+    
     after(): recovering(){
         currentFile.addRegionInfo(currentRegion);
         currentRegion=new RegionLog();
     }
     
-    after(String x, String y, SGLR s): parsing(x, y, s) {
-       recoveryInfoOfFiles.add(currentFile);
-       //ConsoleWriter.writeToConsole(currentFile);
-       
+    after(String x, String y, SGLR s): parsing(x, y, s) {              
+	   for (RegionLog region :currentFile.getRegionInfo()) {
+		   if(logExecutionTimes){
+    		   System.out.println(region.getExecutionTimetable());
+    	   }    	   
+	   }       
     } 
     
     @Override

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/TimeMeasuring.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/TimeMeasuring.aj	2009-12-20 17:54:27 UTC (rev 20444)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/TimeMeasuring.aj	2009-12-22 09:48:22 UTC (rev 20445)
@@ -4,7 +4,7 @@
 
 public abstract aspect TimeMeasuring {
     
-    private TreeMap<String, Long> execTimes;
+    private TreeMap<String, Long> execTimes;    
     
     public TimeMeasuring(){
         execTimes=new TreeMap<String, Long>();
@@ -17,7 +17,9 @@
         try {
             return proceed();
         } finally {
-            String methodName=thisJoinPoint.getSignature().getName();
+        	String className=thisJoinPoint.getSignature().getDeclaringTypeName();
+        	className=className.substring(className.lastIndexOf('.')+1);
+            String methodName=className+"."+thisJoinPoint.getSignature().getName();
             long duration=System.currentTimeMillis()-beforeTime;
             execTimes.put(methodName, duration);          
             afterMethodExecuted(methodName, duration);
@@ -25,4 +27,5 @@
     }
 
     protected abstract void afterMethodExecuted(String methodName, long duration);
+	
 }



From m.dejonge at tudelft.nl  Tue Dec 22 11:55:33 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 22 Dec 2009 10:55:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20446 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912221055.nBMAtXU4031998@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-22 10:55:33 +0000 (Tue, 22 Dec 2009)
New Revision: 20446

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20446&view=rev

Added:
   sglr-recovery/trunk/RecoveryLogging/src/logging/SkipLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/TimeLogging.aj
Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj

Log:
refactoring: time and skip measuring classes

Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 09:48:22 UTC (rev 20445)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 10:55:33 UTC (rev 20446)
@@ -5,14 +5,17 @@
 import org.spoofax.jsglr.*;
 
 
-public aspect RecoveryLogging extends TimeMeasuring{
+public aspect RecoveryLogging{
 
     private FileLog currentFile;
     private RegionLog currentRegion;    
-    private boolean logRegionSkips;    
+    private SkipLogging skipLogger;
+    private TimeLogging timeLogger;
     private boolean logRecoveryMethods;
     private boolean logParsing;
     
+    private boolean logRestricted;
+    
     public void setLogRecoveryMethods(boolean logRecoveryMethods) {
 		this.logRecoveryMethods = logRecoveryMethods;
 	}
@@ -20,23 +23,22 @@
 	public void setLogParsing(boolean logParsing) {
 		this.logParsing = logParsing;
 	}
-	private boolean logExecutionTimes;
-    private boolean logRestricted;
     
     public void setLogRestricted(boolean logRestricted) {
 		this.logRestricted = logRestricted;
+		skipLogger.setLogRestricted(logRestricted);
 	}
 
 	public boolean isLogging(){
-    	return logExecutionTimes || logParsing || logRecoveryMethods || logRegionSkips;
+    	return timeLogger.isLogExecutionTimes() || logParsing || logRecoveryMethods || skipLogger.isLogRegionSkips();
     }
     
     public void setLogExecutionTimes(boolean logExecutionTimes) {
-		this.logExecutionTimes = logExecutionTimes;
+    	timeLogger.setLogExecutionTimes(logExecutionTimes);		
 	}
     
     public void setLogRegionSkips(boolean logRegionSkips) {
-		this.logRegionSkips = logRegionSkips;
+    	skipLogger.setLogRegionSkips(logRegionSkips);
 	}
 
 	public FileLog getFileLog() {
@@ -44,27 +46,31 @@
     }
 
     public RecoveryLogging(){
+    	skipLogger=SkipLogging.aspectOf();
+    	timeLogger=TimeLogging.aspectOf();
         currentFile=new FileLog();
-        currentRegion=new RegionLog();
-        //logRegionSkips=true;
-        //logExecutionTimes=true;
+        setNewRegion();
+        setLogRegionSkips(true);
+        setLogExecutionTimes(true);
         logParsing=true;
         logRecoveryMethods=true;
         logRestricted=true;
+        
     }
+
+	private void setNewRegion() {
+		System.out.println("NEW REGION");
+		currentRegion=new RegionLog();
+		skipLogger.setCurrentRegion(currentRegion);
+		timeLogger.setCurrentRegion(currentRegion);
+	}
     
     pointcut parsing(String x, String y, SGLR s): 
         execution(long Main.parseFile(String, String, SGLR))&& args(x, y, s);
 
     pointcut recovering():
-        execution(void RecoveryConnector.doRecoverSteps());
+        call(void RecoveryConnector.doRecoverSteps());
     
-    pointcut timing():
-        execution(boolean RegionRecovery.selectErroneousFragment()) ||
-        execution(boolean FineGrainedOnRegion.recover()) ||
-        execution(boolean RecoveryConnector.tryBridgeRepair(String)) ||
-        execution(void RecoveryConnector.doRecoverSteps());
-    
     pointcut fineGrained():        
         execution(boolean FineGrainedOnRegion.recover());
     
@@ -81,82 +87,7 @@
     pointcut regionSelection(RegionRecovery rs):
         execution(boolean RegionRecovery.selectErroneousFragment()) && target(rs);
     
-    pointcut regionTesting(RegionRecovery rs, StructureSkipSuggestion regionTested):
-        execution(boolean RegionRecovery.testRegion(StructureSkipSuggestion)) && target(rs) && args(regionTested);
-   
- // /*
-    pointcut prevRegion(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPreviousSkipSuggestions(int))&& target(rs);
     
-    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prevRegions): prevRegion(rs) {
-	  for (StructureSkipSuggestion prev : prevRegions) {
-		  String region = rs.getHistory().getFragment(prev);
-		  //String correctedRegion=region.substring(prev.getAdditionalTokens().length);
-		  currentRegion.addPrevRegion(region);
-		  String header="PREVIOUS REGION";
-		  writeRegionToConsole(region, header, logRestricted);
-	  }		  
-    }
-
-	private void writeRegionToConsole(String region, String header, boolean restricted) {
-		if(logRegionSkips && !restricted){
-		  System.out.println("************ "+header+" **********");
-		  System.out.println(region);
-		  System.out.println("********************************************");
-	  }
-	}
-    
-    pointcut currRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getCurrentSkipSuggestions(int))&& target(rs);
-
-    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> currentRegions): currRegions(rs) {
-  	  for (StructureSkipSuggestion aRegion: currentRegions) {
-  		  String region = rs.getHistory().getFragment(aRegion);		  
-  		  currentRegion.addCurrRegion(region);
-  		  writeRegionToConsole(region, "CURRENT REGION", logRestricted);
-  		}
-   }
-    
-    pointcut zoomRegionsPC(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getZoomOnPreviousSuggestions(StructureSkipSuggestion))&& target(rs);
-
-    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): zoomRegionsPC(rs) {
-    	for (StructureSkipSuggestion aRegion: prRegions) {
-    		String region = rs.getHistory().getFragment(aRegion);  		    
-    		currentRegion.addZoomRegion(region);
-    		writeRegionToConsole(region, "ZOOM REGION", logRestricted);
-		}
-   }
-    
-    pointcut parentRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getParentSkipSuggestions(int))&& target(rs);
-
-    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> parRegions): parentRegions(rs) {
-    	for (StructureSkipSuggestion aRegion: parRegions) {
-    		String region = rs.getHistory().getFragment(aRegion);  		    
-    		currentRegion.addParentRegion(region);
-    		writeRegionToConsole(region, "PARENT REGION", logRestricted);
-		}
-   }
-    
-    pointcut priorRegionsPC(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPriorSkipSuggestions(int))&& target(rs);
-
-    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): priorRegionsPC(rs) {
-    	for (StructureSkipSuggestion aRegion: prRegions) {
-    		String region = rs.getHistory().getFragment(aRegion);  		    
-    		currentRegion.addPriorRegion(region);
-    		writeRegionToConsole(region, "PRIOR REGION", logRestricted);
-		}
-   }
-    
-    pointcut sibBWRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingBackwardSuggestions(int))&& target(rs);
-    pointcut sibFWRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingForwardSuggestions(int))&& target(rs);
-    pointcut sibSurrRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingSurroundingSuggestions(int))&& target(rs);
-
-    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): sibBWRegions(rs) || sibFWRegions(rs)||sibSurrRegions(rs){
-    	for (StructureSkipSuggestion aRegion: prRegions) {
-    		String region = rs.getHistory().getFragment(aRegion);  		    
-    		currentRegion.addSiblingRegion(region);
-    		writeRegionToConsole(region, "SIBLING REGION", logRestricted);
-		}
-   }
-
    // */
     before(String x, String y, SGLR s): parsing(x, y, s) {
         currentFile=new FileLog();
@@ -181,15 +112,10 @@
     	
     }
     
-    after(RegionRecovery rs, StructureSkipSuggestion region): regionTesting(rs, region) {
-            //currentRegion.addInspectedFragments(rs.getInputFragment(region));
-            //System.out.println(rs.getInputFragment(region));
-    }
-    
     after(RegionRecovery rs) returning (boolean succeeded): regionSelection(rs) {
         if(succeeded){
             currentRegion.setSkippedFragment(rs.getErrorFragmentWithLeftMargin());
-            writeRegionToConsole(rs.getErrorFragmentWithLeftMargin(), "SKIPPED SUCCESSFULLY", false);            
+            //writeRegionToConsole(rs.getErrorFragmentWithLeftMargin(), "SKIPPED SUCCESSFULLY", false);  //TODO: move?          
         }
         if(logRecoveryMethods && !logRestricted)
         	System.out.println("Region-Skip succeeded: "+ succeeded);
@@ -221,19 +147,16 @@
     
     after(): recovering(){
         currentFile.addRegionInfo(currentRegion);
-        currentRegion=new RegionLog();
+        setNewRegion();
     }
     
-    after(String x, String y, SGLR s): parsing(x, y, s) {              
+    after(String x, String y, SGLR s): parsing(x, y, s) { 
+    	System.out.println("BOOOOOOOOOOOOOOOOOOOOOOOOOO 1");
 	   for (RegionLog region :currentFile.getRegionInfo()) {
-		   if(logExecutionTimes){
+		   System.out.println("BOOOOOOOOOOOOOOOOOOOOOOOOOO 2");
+		   if(timeLogger.isLogExecutionTimes()){
     		   System.out.println(region.getExecutionTimetable());
     	   }    	   
 	   }       
     } 
-    
-    @Override
-    protected void afterMethodExecuted(String methodName, long duration) {
-        currentRegion.addExecutionTime(methodName, duration);
-    }
 }

Added: sglr-recovery/trunk/RecoveryLogging/src/logging/SkipLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/SkipLogging.aj	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/SkipLogging.aj	2009-12-22 10:55:33 UTC (rev 20446)
@@ -0,0 +1,112 @@
+package logging;
+
+import java.util.ArrayList;
+
+import org.spoofax.jsglr.NewStructureSkipper;
+import org.spoofax.jsglr.RegionRecovery;
+import org.spoofax.jsglr.StructureSkipSuggestion;
+
+public aspect SkipLogging{
+	
+	private RegionLog currentRegion;  
+	private boolean logRegionSkips; 
+    private boolean logRestricted;
+    
+    public void setCurrentRegion(RegionLog currentRegion) {
+		this.currentRegion = currentRegion;
+	}	
+
+    public void setLogRestricted(boolean logRestricted) {
+		this.logRestricted = logRestricted;
+	}
+    
+    public void setLogRegionSkips(boolean logRegionSkips) {
+		this.logRegionSkips = logRegionSkips;
+	}
+
+	public boolean isLogRegionSkips() {
+		return logRegionSkips;
+	}
+	
+	private void writeRegionToConsole(String region, String header, boolean restricted) {
+		if(logRegionSkips && !restricted){
+		  System.out.println("************ "+header+" **********");
+		  System.out.println(region);
+		  System.out.println("********************************************");
+	  }
+	}
+	
+	pointcut regionTesting(RegionRecovery rs, StructureSkipSuggestion regionTested):
+        execution(boolean RegionRecovery.testRegion(StructureSkipSuggestion)) && target(rs) && args(regionTested);
+   
+	after(RegionRecovery rs, StructureSkipSuggestion region): regionTesting(rs, region) {
+        //currentRegion.addInspectedFragments(rs.getInputFragment(region));
+        //System.out.println(rs.getInputFragment(region));
+	}
+	
+    pointcut prevRegion(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPreviousSkipSuggestions(int))&& target(rs);
+    
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prevRegions): prevRegion(rs) {
+	  for (StructureSkipSuggestion prev : prevRegions) {
+		  String region = rs.getHistory().getFragment(prev);
+		  //String correctedRegion=region.substring(prev.getAdditionalTokens().length);
+		  currentRegion.addPrevRegion(region);
+		  String header="PREVIOUS REGION";
+		  writeRegionToConsole(region, header, logRestricted);
+	  }		  
+    }
+    
+    pointcut currRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getCurrentSkipSuggestions(int))&& target(rs);
+
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> currentRegions): currRegions(rs) {
+  	  for (StructureSkipSuggestion aRegion: currentRegions) {
+  		  String region = rs.getHistory().getFragment(aRegion);		  
+  		  currentRegion.addCurrRegion(region);
+  		  writeRegionToConsole(region, "CURRENT REGION", logRestricted);
+  		}
+   }
+    
+    pointcut zoomRegionsPC(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getZoomOnPreviousSuggestions(StructureSkipSuggestion))&& target(rs);
+
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): zoomRegionsPC(rs) {
+    	for (StructureSkipSuggestion aRegion: prRegions) {
+    		String region = rs.getHistory().getFragment(aRegion);  		    
+    		currentRegion.addZoomRegion(region);
+    		writeRegionToConsole(region, "ZOOM REGION", logRestricted);
+		}
+   }
+    
+    pointcut parentRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getParentSkipSuggestions(int))&& target(rs);
+
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> parRegions): parentRegions(rs) {
+    	for (StructureSkipSuggestion aRegion: parRegions) {
+    		String region = rs.getHistory().getFragment(aRegion);  		    
+    		currentRegion.addParentRegion(region);
+    		writeRegionToConsole(region, "PARENT REGION", logRestricted);
+		}
+   }
+    
+    pointcut priorRegionsPC(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPriorSkipSuggestions(int))&& target(rs);
+
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): priorRegionsPC(rs) {
+    	for (StructureSkipSuggestion aRegion: prRegions) {
+    		String region = rs.getHistory().getFragment(aRegion);  		    
+    		currentRegion.addPriorRegion(region);
+    		writeRegionToConsole(region, "PRIOR REGION", logRestricted);
+		}
+   }
+    
+    pointcut sibBWRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingBackwardSuggestions(int))&& target(rs);
+    pointcut sibFWRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingForwardSuggestions(int))&& target(rs);
+    pointcut sibSurrRegions(NewStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getSibblingSurroundingSuggestions(int))&& target(rs);
+
+    after(NewStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prRegions): sibBWRegions(rs) || sibFWRegions(rs)||sibSurrRegions(rs){
+    	for (StructureSkipSuggestion aRegion: prRegions) {
+    		String region = rs.getHistory().getFragment(aRegion);  		    
+    		currentRegion.addSiblingRegion(region);
+    		writeRegionToConsole(region, "SIBLING REGION", logRestricted);
+		}
+   }
+
+
+}

Added: sglr-recovery/trunk/RecoveryLogging/src/logging/TimeLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/TimeLogging.aj	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/TimeLogging.aj	2009-12-22 10:55:33 UTC (rev 20446)
@@ -0,0 +1,34 @@
+package logging;
+import org.spoofax.jsglr.*;
+
+public aspect TimeLogging extends TimeMeasuring{
+
+	private boolean logExecutionTimes;
+	private RegionLog currentRegion; 
+	
+	public void setCurrentRegion(RegionLog currentRegion) {
+		this.currentRegion = currentRegion;
+	}
+	
+	public boolean isLogExecutionTimes() {
+		return logExecutionTimes;
+	}
+
+	public void setLogExecutionTimes(boolean logExecutionTimes) {
+		this.logExecutionTimes = logExecutionTimes;
+	}
+	
+	pointcut timing():
+        execution(boolean RegionRecovery.selectErroneousFragment()) ||
+        execution(boolean FineGrainedOnRegion.recover()) ||
+        execution(boolean RecoveryConnector.tryBridgeRepair(String)) ||
+        execution(void RecoveryConnector.doRecoverSteps());
+	
+	@Override
+    protected void afterMethodExecuted(String methodName, long duration) {
+		System.out.println("Time measure: "+methodName);
+		System.out.println(currentRegion.getExecutionTimetable());
+        currentRegion.addExecutionTime(methodName, duration);
+        System.out.println(currentRegion.getExecutionTimetable());
+    }
+}



From m.dejonge at tudelft.nl  Tue Dec 22 12:03:06 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 22 Dec 2009 11:03:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20447 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src:
	evaluating scenariotests
Message-ID: <200912221103.nBMB363t032467@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-22 11:03:06 +0000 (Tue, 22 Dec 2009)
New Revision: 20447

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20447&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java

Log:
FineGrained on/off

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-12-22 10:55:33 UTC (rev 20446)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-12-22 11:03:06 UTC (rev 20447)
@@ -58,16 +58,16 @@
 	 
 	@SuppressWarnings("deprecation")
 	public static ArrayList<ErroneousRegion> collectSkippedRegions(String testFile, String parseTable) throws Exception {
-		String recoveredFile = writeRecoveredFile(testFile, parseTable);		
+		String recoveredFile = writeRecoveredFile(testFile, parseTable, FilePaths.OUTPUT_REGION_SKIP);		
 		return findSkippedRegions(readFromFile(testFile), readFromFile(recoveredFile));
 	}
 
-	private static String writeRecoveredFile(String testFile, String parseTable)
+	public static String writeRecoveredFile(String testFile, String parseTable, String outputDir)
 			throws FileNotFoundException, IOException,
 			InvalidParseTableException, NoRecoveryRulesException, SGLRException, InterruptedException {
 		String fileName=testFile.replace(File.separatorChar, '_');
-		String recoveredFile=FilePaths.OUTPUT_REGION_SKIP+fileName;
-		String parseTreeFile = FilePaths.OUTPUT_REGION_SKIP+fileName+PARSETREE_EXTENSION;
+		String recoveredFile=outputDir+fileName;
+		String parseTreeFile = outputDir+fileName+PARSETREE_EXTENSION;
 		writeParseTree(testFile, parseTable, parseTreeFile);	
 		yieldAsfix(parseTreeFile, recoveredFile);
 		return recoveredFile;
@@ -140,6 +140,9 @@
 		SGLR sglr = new SGLR(ptm.getFactory(),pt); 
         sglr.setUseStructureRecovery(true);
         sglr.getDisambiguator().setFilterAny(false);   
+        sglr.getDisambiguator().setFilterAny(true); 
+        sglr.getDisambiguator().setFilterCycles(true);
+        sglr.setUseFineGrained(false);
         //FileInputStream fis=new FileInputStream(testFile);	
 		//ATerm tree = sglr.parse(fis);
         Main.parseFile(testFile, parseTreeFile, sglr);

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-22 10:55:33 UTC (rev 20446)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/scenariotests/CriticalScenarios_Base.java	2009-12-22 11:03:06 UTC (rev 20447)
@@ -159,6 +159,7 @@
 		sglr = new SGLR(ptm.getFactory(),pt); 
 		sglr.setUseStructureRecovery(true);
 		sglr.getDisambiguator().setFilterAny(false);
+		sglr.setUseFineGrained(false);
 	}
 	
 	private String directoryPath(String fileName) {



From m.dejonge at tudelft.nl  Tue Dec 22 12:04:02 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 22 Dec 2009 11:04:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20448 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912221104.nBMB42b7032477@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-22 11:04:02 +0000 (Tue, 22 Dec 2009)
New Revision: 20448

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20448&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/SkipLogging.aj

Log:


Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 11:03:06 UTC (rev 20447)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 11:04:02 UTC (rev 20448)
@@ -1,7 +1,5 @@
 package logging;
 
-import java.util.ArrayList;
-
 import org.spoofax.jsglr.*;
 
 
@@ -59,7 +57,6 @@
     }
 
 	private void setNewRegion() {
-		System.out.println("NEW REGION");
 		currentRegion=new RegionLog();
 		skipLogger.setCurrentRegion(currentRegion);
 		timeLogger.setCurrentRegion(currentRegion);
@@ -87,8 +84,6 @@
     pointcut regionSelection(RegionRecovery rs):
         execution(boolean RegionRecovery.selectErroneousFragment()) && target(rs);
     
-    
-   // */
     before(String x, String y, SGLR s): parsing(x, y, s) {
         currentFile=new FileLog();
         currentFile.setFileName(x);
@@ -113,10 +108,6 @@
     }
     
     after(RegionRecovery rs) returning (boolean succeeded): regionSelection(rs) {
-        if(succeeded){
-            currentRegion.setSkippedFragment(rs.getErrorFragmentWithLeftMargin());
-            //writeRegionToConsole(rs.getErrorFragmentWithLeftMargin(), "SKIPPED SUCCESSFULLY", false);  //TODO: move?          
-        }
         if(logRecoveryMethods && !logRestricted)
         	System.out.println("Region-Skip succeeded: "+ succeeded);
     }
@@ -150,10 +141,8 @@
         setNewRegion();
     }
     
-    after(String x, String y, SGLR s): parsing(x, y, s) { 
-    	System.out.println("BOOOOOOOOOOOOOOOOOOOOOOOOOO 1");
-	   for (RegionLog region :currentFile.getRegionInfo()) {
-		   System.out.println("BOOOOOOOOOOOOOOOOOOOOOOOOOO 2");
+    after(String x, String y, SGLR s): parsing(x, y, s) {     	
+	   for (RegionLog region :currentFile.getRegionInfo()) {		   
 		   if(timeLogger.isLogExecutionTimes()){
     		   System.out.println(region.getExecutionTimetable());
     	   }    	   

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/SkipLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/SkipLogging.aj	2009-12-22 11:03:06 UTC (rev 20447)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/SkipLogging.aj	2009-12-22 11:04:02 UTC (rev 20448)
@@ -107,6 +107,16 @@
     		writeRegionToConsole(region, "SIBLING REGION", logRestricted);
 		}
    }
+   
+    pointcut regionSelection(RegionRecovery rs):
+        execution(boolean RegionRecovery.selectErroneousFragment()) && target(rs);
+    
+    after(RegionRecovery rs) returning (boolean succeeded): regionSelection(rs) {
+        if(succeeded){
+            currentRegion.setSkippedFragment(rs.getErrorFragmentWithLeftMargin());
+            writeRegionToConsole(rs.getErrorFragmentWithLeftMargin(), "SKIPPED SUCCESSFULLY", false);  //TODO: move?          
+        }        
+    }
 
 
 }



From L.C.L.Kats at tudelft.nl  Tue Dec 22 12:38:31 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 22 Dec 2009 11:38:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20449 - LennartKats -
 spoofax-imp/trunk/org.strategoxt.imp.editors.stratego
 spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor
 spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
 spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
 spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services
 spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
 spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
 spoofax-imp/trun!
 k/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
 spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
 strategoxt/trunk/strc-core/lib/stratego/strc/parse
Message-ID: <200912221138.nBMBcVCk000585@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-22 11:38:31 +0000 (Tue, 22 Dec 2009)
New Revision: 20449

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20449&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.common.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaSPILibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ProductionAttributeReader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPOpenFile.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPReadTextFromStream.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
   strategoxt/trunk/strc-core/lib/stratego/strc/parse/parse-stratego.str

Log:
Added a new, per-file Stratego checker that checks pretty much
everything the normal compiler does, but is much faster
(org.strategoxt.imp.editors.stratego/trans/analysis.str).

Supports concrete syntax, external libraries, and checks of strategy
calls, dynamic rules, local variables, constructor usage, etc.
Caches signatures of external files, sort of.

Current limitations:
  - can only import from fixed import paths and the standard libs
  - it's not really "incremental" atm: imports external files but cannot
    report errors in those files


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.classpath	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.classpath	2009-12-22 11:38:31 UTC (rev 20449)
@@ -1,8 +1,8 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
+<?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="editor/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="lib" path="utils/strategoxt.jar"/>
 	<classpathentry kind="output" path="bin"/>
-</classpath>
\ No newline at end of file
+</classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.common.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.common.xml	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.common.xml	2009-12-22 11:38:31 UTC (rev 20449)
@@ -13,6 +13,9 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
         <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
@@ -218,10 +221,10 @@
             <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
                 <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
-                <param name="build.stratego.extraargs" value="-la java-front"/>
+                <param name="build.stratego.extraargs" value="-la java-front --library"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
-            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	2009-12-22 11:38:31 UTC (rev 20449)
@@ -20,7 +20,7 @@
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="--library
                         -I &quot;${trans}&quot; -I &quot;${basedir}&quot;
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm -la strc"/>
         
         <!-- External .def and .jar locations
         <property name="externaldef" location="syntax/${sdfmodule}.def"/>
@@ -37,5 +37,5 @@
         <import file="build.common.xml"/>
     
         <!-- Main target -->
-        <target name="all" depends="spoofaximp"/>
+        <target name="all" depends="stratego.jar,sdf2table,sdf2imp"/>
     </project>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	2009-12-22 11:38:31 UTC (rev 20449)
@@ -3,9 +3,18 @@
 
 imports Stratego-Sugar-Builders.generated
 
-analysis
+builders
                                                                                       
   // This file can be used for custom analysis rules.                                 
   // See the imported file for a brief introduction and examples.                     
                                                                                       
-  provider : include/stratego_sugar.ctree
\ No newline at end of file
+  provider : include/stratego_sugar.jar
+
+  observer : editor-analyze
+
+  builder : "Show desugared AST (selection)" =
+    generate-desugared-aterm (realtime) (meta) (openeditor)
+
+  builder : "Show AST (selection)" =
+    generate-aterm (realtime) (meta) (openeditor) 
+ 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv	2009-12-22 11:38:31 UTC (rev 20449)
@@ -14,14 +14,22 @@
     0 128 64
     255 255 255
     italic
+  
+  // White background for variables and escapes
+  environment _.StringEscape1 : _ 255 255 255
+  environment _.StringEscape2 : _ 255 255 255
+  environment _.StringEscape3 : _ 255 255 255
+  environment _.StringEscape4 : _ 255 255 255
+  _.ListVar : _ 255 255 255
+  _.Var     : _ 255 255 255
 
-  _.Str : blue
-  
   _.StringEscape1 : gray  
   _.StringEscape2 : gray  
   _.StringEscape3 : gray  
   _.StringEscape4 : gray
   
+  _.Str     : blue
+  _.QStr    : blue
   _.QDollar : blue
   _.QBr     : gray
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2009-12-22 11:38:31 UTC (rev 20449)
@@ -1,12 +1,537 @@
 module analysis
 
 imports
+  libstratego-lib
+  libstrc
   desugar
 
-rules
+strategies
 
-  rename-all = id
+  analyze-ast:
+    (ast, path, project-path) -> ast'
+    with
+      rules(
+        CurrentDir := <dirname> $[[project-path]/[path]]
+        ProjectDir := project-path
+      )
+    with
+      {| DeclareCookie:
+        basic-desugar-top;
+        with(<declare-globals> Import("libstratego-lib"));
+        declare-globals-top;
+        declare-bodies-top => ast'
+      |}
 
-  constraint-error = id
+rules // Projections and lookup
 
-  constraint-warning = id
\ No newline at end of file
+  signature-of:
+    SDefT(x, s*, t*, s) -> (x, <length> s*, <length> t*)
+
+  signature-of:
+    RDecT(x, s*, t*) -> (x, <length> s*, <length> t*)
+
+  signature-of:
+    ExtSDef(x, s*, t*) -> (x, <length> s*, <length> t*) 
+
+  signature-of:
+    CallT(SVar(x), s*, t*) -> (x, <length> s*, <length> t*)
+
+  signature-of-nullary-constructor:
+    Var(x) -> (x, 0)
+
+  signature-of-congruence:
+    CallT(SVar(x), s*, []) -> (x, <length> s*) 
+
+  signature-of-congruence:
+    SDefT(x, s*, t*, []) -> (x, <length> s*) 
+
+  signature-of:
+    Var(x) -> x
+
+  signature-of:
+    VarDec(x, t) -> x
+
+  signature-of:
+    Op(x, t*) -> (x, <length> t*)
+
+  signature-of:
+    OpDecl(x, t) -> (x, <dec> <occurrences(?ConstType(_))> t) 
+
+  signature-of:
+    ExtOpDecl(x, t) -> (x, <dec> <occurrences(?ConstType(_))> t)
+
+  signature-of:
+    Rec(x, s) -> (x, 0, 0)
+
+  declare-cookie-of =
+    signature-of-nullary-constructor; DeclareCookie
+  <+
+    signature-of; DeclareCookie
+  <+
+    signature-of-congruence; DeclareCookie
+
+  declaration-of =
+    signature-of-nullary-constructor => (_{<Declaration>}, _)
+  <+
+    signature-of; (?_{<Declaration>} <+ ?(_{<Declaration>}, _) <+ ?(_{<Declaration>}, _, _))
+  <+
+    signature-of-congruence => (_{<Declaration>}, _)
+
+rules // Helpers
+  
+  declare-definition:
+    def -> cookie
+    with
+      sig := <signature-of>
+    with
+      cookie := <DeclareCookie>
+    <+
+      cookie := <new-cookie>;
+      rules(
+        DeclareCookie: sig -> cookie
+        Declaration: cookie -> def // FIXME: we only record 1 definition
+      )
+
+  redeclare-definition:
+    def -> cookie
+    with
+      sig := <signature-of>
+    with
+      cookie := <new-cookie>;
+      rules(
+        DeclareCookie: sig -> cookie
+        Declaration: cookie -> def
+      )
+
+  /*internal*/ require(s) =
+    not(s)
+
+  is-declared =
+    //signature-of;
+    // (?_{_} + ?(_{_}, _) + ?(_{_}, _, _))
+    one(?_{cookie} + ?SVar(_{cookie}))
+
+  new-cookie =
+    if-java-platform(SRTS-EXT-newint);
+    if-c-platform(new)
+
+  external SRTS-EXT-newint(|)
+    
+rules // Declare globals
+
+  declare-globals-top =
+    alltd(declare-globals)
+
+  declare-globals:
+    SDefT(x, s*, t*, s) -> SDefT(x', s*, t*, s')
+    with
+      x' := x{<declare-definition>};
+      s' := <topdown(try(declare-dynrule))> s
+
+  declare-globals:
+    ExtSDef(x, s*, t*) -> <id>
+    with
+      // declare-definition
+      sig  := <signature-of>;
+      cookie := <new-cookie>;
+      rules(DeclareCookie: sig -> cookie)
+
+  declare-globals:
+    OpDecl(x, t) -> OpDecl(x', t)
+    with
+      x' := x{<declare-definition>}
+
+  declare-globals:
+    ExtOpDecl(x, t) -> <id>
+    with
+      // declare-definition
+      sig  := <signature-of>;
+      cookie := <new-cookie>;
+      rules(DeclareCookie: sig -> cookie)
+
+  declare-globals:
+    Import(x) -> Import(x)
+    where
+      <IsImported> x
+    <+
+      <import-library> x;
+      declare-globals-top;
+      rules(IsImported: x)
+    <+
+      <try(resolve-import-path)> $[[x].str];
+      (import-from-cache <+ import-rtree <+ import-str);
+      declare-globals-top;
+      rules(IsImported: x)
+    <+
+      rules(IsImportMissing := x); fail
+
+   import-library =
+     <pack-stratego-parse-stratego> (IncludeFromPath(<id>), [])
+
+   import-from-cache:
+     str -> signatures
+     where
+       cached := <import-cache-path>;
+       <is-newer> (cached, str);
+       signatures := <ReadFromFile> cached
+
+   import-rtree:
+     str -> signatures
+     where
+       rtree := <try(resolve-import-path)> <guarantee-extension(|"rtree")>;
+       (<is-newer> (rtree, str) + not(<file-exists> str));
+       signatures := <ReadFromFile; to-signatures> rtree
+     with
+       <WriteToBinaryFile> (<import-cache-path>, signatures)        
+
+   import-str:
+     str -> signatures
+     where
+       file-exists;
+       parse-stratego-file; // uses Spoofax/IMP override for .meta support
+       signatures := <to-signatures>
+     with
+       <WriteToBinaryFile> (<import-cache-path>, signatures)        
+
+   to-signatures =
+     basic-desugar-top // TODO
+
+   resolve-import-path:
+     x -> full-path
+     where
+       // FIXME: fetch true import paths from someplace
+       full-path := <file-exists> $[[<CurrentDir>]/[x]]
+     <+
+       full-path := <file-exists> $[[<ProjectDir>]/[x]]
+     <+
+       full-path := <file-exists> $[[<ProjectDir>]/src/[x]]
+     <+
+       full-path := <file-exists> $[[<ProjectDir>]/trans/[x]]
+
+   import-cache-path:
+     full-path -> cache-path
+     with
+       cache-dir  := <file-exists <+ mkdir> $[[<ProjectDir>]/.cache];
+       full-path' := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+       cache-path := $[[cache-dir]/[full-path']]
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+  declare-dynrule:
+    dec @ RDecT(x, s*, t*) -> RDecT(x', s*, t*)
+    with
+      x' := x{<declare-cookie-of>}
+    <+
+      cookie := <new-cookie>;
+      x'  := x{cookie};
+      s'* := <length> s*;
+      t'* := <length> t*;
+      sig := (x, s'*, t'*);
+      rules(
+        DeclareCookie: sig -> cookie
+        Declaration: cookie -> dec
+      );
+      ![ "new", "undefine", "aux", "once", "bagof", "reversebagof", "all-keys"
+       , "innermost-scope", "break", "continue", "continue-to-label", "throw"];
+      list-loop({prefix, sig:
+        ?prefix;
+        sig := ($[[prefix]-[x]], s'*, t'*);
+        rules(DeclareCookie: sig -> cookie)
+      })
+
+  dr-scope-declare-cookies(defs, s):
+    t -> t'
+    with
+      defs        := <defs>;
+      old-cookies := <map(!(<signature-of>, <declare-cookie-of <+ !()>))>;
+      t'          := <s> t;
+      <list-loop({
+        ?(sig, cookie);
+        if !cookie => () then
+          rules(DeclareCookie :- sig)
+        else
+          rules(DeclareCookie : sig -> cookie)
+        end
+       })> old-cookies
+
+rules // Declarations inside definition bodies
+
+  declare-bodies-top =
+    alltd(declare-bodies)
+
+  declare-bodies:
+    SDefT(x, s*, t*, s) -> SDefT(x, s'*, t'*, s')
+    with
+      {| DeclareCookie:
+        s'* := <map(declare-svar)> s*;
+        t'* := <map(declare-tvar)> t*;
+        s'  := <declare-bodies-top> s
+      |}
+
+  declare-bodies:
+    Let(d*, b) -> Rec(d'*, b')
+    with
+      dr-scope-declare-cookies(
+        !d*
+      ,
+        d'* := <map(declare-let-definition)> d*;
+        b'  := <declare-bodies-top> b
+      )
+
+  declare-let-definition:
+    SDefT(x, s*, t*, s) -> SDefT(x', s'*, t'*, s')
+    with
+      dr-scope-declare-cookies(
+        ![s*, t*]
+      ,
+        x'  := x{<redeclare-definition>};
+        s'* := <map(declare-svar)> s*;
+        t'* := <map(declare-tvar)> t*;
+        s'  := <declare-bodies-top> s
+      )
+
+  declare-bodies:
+    rec @ Rec(r, b) -> Rec(r', b')
+    with
+      dr-scope-declare-cookies(
+        ![rec]
+      ,
+        r' := r {<redeclare-definition> rec};
+        b' := <declare-bodies-top> b
+      )
+
+  declare-bodies:
+    Overlay(x, t*, d) -> Overlay(x, t'*, d')
+    with
+      {| DeclareCookie:
+        t'* := <map(declare-tvar)> t*;
+        d'  := <declare-bodies-top> d 
+      |}
+
+  declare-bodies:
+    ScopeDefault(s) -> ScopeDefault(s')
+    with
+      {| DeclareCookie:
+        with(
+          tvars;
+          list-loop({?x; rules(DeclareCookie :- x)})
+        );
+        s' := <declare-bodies-top> s
+      |}
+
+  declare-bodies:
+    Scope(v*, s) -> Scope(v*, s')
+    with
+      {| DeclareCookie:
+        <list-loop({?x; rules(DeclareCookie :- x)})> v*;
+        s' := <declare-bodies-top> s
+      |}
+
+  declare-bodies:
+    Match(t) -> Match(t')
+    with
+      t' := <declare-match> t
+
+  declare-bodies:
+    Rule(t1, t2, w) -> Rule(t1', t2', w')
+    with
+      t1' := <declare-match> t1;
+      w'  := <declare-bodies-top> w;
+      t2' := <declare-bodies-top> t2 
+
+  declare-bodies:
+    LRule(r) -> LRule(r')
+    with
+      {| DeclareCookie: // acts as a non-blanking scope
+        r' := <declare-bodies-top> r
+      |}
+
+  declare-bodies:
+    SetDynRule(x, r) -> SetDynRule(x, r')
+    with
+      {| DeclareCookie: // acts as a non-blanking scope
+        r' := <declare-bodies-top> r
+      |}
+
+  declare-bodies:
+    Assign(t1, t2) -> Assign(t1', t2')
+    with
+      t2' := <declare-bodies-top> t2;
+      t1' := <declare-match> t1
+
+  declare-bodies:
+    AM(s, t) -> AM(s', t')
+    with
+      s' := <declare-bodies-top> s;
+      t' := <declare-match> t
+
+  declare-match =
+    alltd(?Var(_); declare-var + ?App(_, _) + ?RootApp(_));
+    declare-bodies-top
+
+  declare-bodies:
+    GuardedLChoice(c, s1, s2) -> GuardedLChoice(c', s1', s2')
+    with
+      c' := <declare-bodies-top> c
+    with
+      s1' := <declare-bodies-top> s1
+    \DeclareCookie/
+      s2' := <declare-bodies-top> s2
+
+  declare-svar:
+    dec @ VarDec(x, t) -> VarDec(x', t)
+    with
+      cookie := <new-cookie>;
+      x'   := x{cookie};
+      rules(
+        DeclareCookie: (x, _, _) -> cookie
+        Declaration: cookie -> dec
+      )
+
+  declare-tvar:
+    x -> x'
+    where
+      <is-string> x
+    with
+      x' := x{<redeclare-definition> Var(x)}
+
+  declare-tvar:
+    VarDec(x, t) -> VarDec(x', t)
+    with
+      x' := x{<redeclare-definition>}
+
+  declare-var:
+    Var(x) -> Var(x')
+    with
+      x' := x{<redeclare-definition>}
+
+rules // Uses inside definition bodies
+
+  declare-bodies:
+    Var(x{}) -> Var(x')
+    where
+      x' := x{<declare-cookie-of>}
+
+  declare-bodies:
+    CallT(SVar(x), s*, t*) -> CallT(SVar(x'), s'*, t'*)
+    with
+      x' := x{<declare-cookie-of>}
+    <+
+      x' := x
+    with
+      t'* := <declare-bodies-top> t*;
+      s'* := <declare-bodies-top> s*
+
+  declare-bodies:
+    Op(x, t*) -> Op(x', t'*)
+    where
+      x' := x{<declare-cookie-of>}
+    with
+      t'* := <declare-bodies-top> t*
+
+rules // Constraints
+
+  constraint-error:
+    CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' is not declared])
+    where
+      require(is-declared)
+    where
+      not(IsImportMissing)
+
+  constraint-error:
+    Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
+    where
+      require(is-declared)
+    where
+      not(IsImportMissing)
+
+  constraint-warning:
+    CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' is not declared])
+    where
+      require(is-declared)
+    where
+      IsImportMissing
+
+  constraint-warning:
+    Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
+    where
+      require(is-declared)
+    where
+      IsImportMissing
+
+  constraint-error:
+    Var(x) -> (x, $[Variable '[x]' is not declared])
+    where
+      require(is-declared)
+
+  constraint-error:
+    Import(x) -> (x, $[Unable to import '[x]'])
+    where
+      require(<IsImported> x)
+
+  // TODO: support override/extends 
+  constraint-error:
+    SDefT(x{cookie}, s*, t*, s) -> (x, $[Conflicts with external definition])
+    where
+      require(<Declaration> cookie => SDefT(_, _, _, _))
+
+  // FIXME: name sdefs after constructors to fix constructor conflict errors 
+  constraint-error:
+    OpDecl(x{cookie}, s*) -> [(x, $[Conflicts with strategy '[y_name]']),
+                            (y, $[Conflicts with constructor [x]/[<length> s*]])]
+    where
+      require(not(<Declaration> cookie => y @ SDefT(y_name, _, _, _)))
+
+  constraint-error:
+    Build(t) -> <constraint-error-bad-build> t
+
+  constraint-error:
+    Assign(_, t) -> <constraint-error-bad-build> t
+
+  constraint-error:
+    Rule(_, t, _) -> <constraint-error-bad-build> t
+
+  constraint-error:
+    Match(t) -> <constraint-error-bad-match> t
+
+  constraint-error:
+    Assign(t, _) -> <constraint-error-bad-match> t
+
+  constraint-error:
+    AM(_, t) -> <constraint-error-bad-match> t
+
+  constraint-error:
+    Rule(t, _, _) -> <constraint-error-bad-match> t
+
+  constraint-error-bad-build:
+    t -> matches
+    where
+      collect(?RootApp(_) + ?App(_, _) + Wld + ?As(_, _) + ?BuildDefault(_) + ?BuildDefaultPT(_));
+      filter(not(?RootApp(_) + ?App(_, _)));
+      map(!(<id>, "Match symbol in build pattern")) => matches;
+      require([])
+
+  constraint-error-bad-match:
+    t -> builds
+    where
+      collect(?StringQuotation1(_, _) + ?StringQuotation2(_, _) + ?StringQuotation3(_, _) + ?StringQuotation4(_, _) + ?BuildDefault(_) + ?BuildDefaultPT(_));
+      filter(not(?RootApp(_) + ?App(_, _)));
+      map(!(<id>, "Build symbol in match pattern")) => builds;
+      require([])
+
+  constraint-warning:
+    Var(x) -> (x, $[Conflicts with nullary constructor: use '[x]()' instead])
+    where
+      declaration-of;
+      require(not(?OpDecl(_, _) + ?ExtOpDecl(_, _)))
+
+  constraint-warning:
+    CallT(SVar(<"debug" + "say">), [StrCong(s)], []) -> (s, $[Should be '![s]'])
+
+  constraint-warning:
+    Import("Java-15") -> (<id>, "Use 'import libjava-front' instead")
+
+  // TODO: overlapping signatures

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	2009-12-22 11:38:31 UTC (rev 20449)
@@ -1,7 +1,21 @@
 module desugar
 
+imports
+  libstratego-lib
+  libstrc
+
+signature constructors
+
+  ToMetaExpr   : Term -> Term
+  FromMetaExpr : Term -> Term
+  meta-var     : String -> Term
+  meta-listvar : String -> Term
+
 rules
 
+  basic-desugar-top =
+    topdown(try(basic-desugar))
+
   basic-desugar:
     SDef(x, a*, s) -> SDefT(x, a*, [], s)
 
@@ -9,8 +23,54 @@
     RDef(x, a*, s) -> SDefT(x, a*, [], s)
 
   basic-desugar:
+    RDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s)
+
+  basic-desugar:
+    RDec(x, a*) -> RDecT(x, a*, [])
+
+  basic-desugar:
     SDefNoArgs(x, s) -> SDefT(x, [], [], s)
 
   basic-desugar:
     RDefNoArgs(x, s) -> SDefT(x, [], [], s)
 
+  basic-desugar:
+    OverlayNoArgs(x, o) -> Overlay(x, [], o)
+
+  basic-desugar:
+    RDecNoArgs(x) -> RDecT(x, [], [])
+
+  basic-desugar:
+    Call(x, s*) -> CallT(x, s*, [])
+
+  basic-desugar:
+    CallNoArgs(x) -> CallT(x, [], [])
+
+  basic-desugar:
+    ListVar(x) -> x
+
+  basic-desugar:
+    DefaultVarDec(x) -> VarDec(x, ConstType(SortNoArgs("ATerm")))
+
+  basic-desugar:
+    RuleNoCond(t1, t2) -> Rule(t1, t2, [])
+
+  basic-desugar:
+    Choice(s1, s2) -> GuardedLChoice(s1, Id(), s2)
+
+  basic-desugar:
+    LChoice(s1, s2) -> GuardedLChoice(s1, Id(), s2)
+
+  basic-desugar:
+    RChoice(s1, s2) -> GuardedLChoice(s2, Id(), s1)
+
+  basic-desugar:
+    CondChoice(c, s1, s2) -> GuardedLChoice(Where(c), s1, s2)
+
+  basic-desugar:
+    ToMetaExpr(t) -> ToMetaExpr(t')
+    with
+      // HACK: eliminate embedded languages
+      t' := <collect-om(?FromMetaExpr(_)
+                      + \meta-var(x) -> Var(x)\
+                      + \meta-listvar(x) -> Var(x)\, conc)> t

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2009-12-22 11:38:31 UTC (rev 20449)
@@ -9,28 +9,25 @@
 
 strategies
 
-  ANALYSIS_ENABLED = fail
-
 rules
 
   editor-analyze:
     (ast, path, project-path) -> ([], [], [])
     where
-       not(ANALYSIS_ENABLED)
+       fail // not(<file-exists> $[[project-path]/.analyze])
 
   editor-analyze:
-    (ast, path, project-path) -> (errors, warnings, notes)
-    where
-       not(ANALYSIS_ENABLED)
+    (ast, path, project-path) -> (errors, warnings, [])
+    //where
+    //  <file-exists> $[[project-path]/.analyze]
     with
       // Ensure all dynamic rules are properly scoped
       try(dr-scope-all-end);
       dr-scope-all-start
     with
-      rename-all;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := <collect-all(constraint-warning, conc)> ast;
-      notes    := [(ast, "Experimental Stratego analysis enabled")] 
+      ast'     := <analyze-ast> (ast, path, project-path);
+      errors   := <collect-all(constraint-error, conc)> ast';
+      warnings := <collect-all(constraint-warning, conc)> ast'
 
   editor-resolve:
     (selected, position, ast, path, project-path) -> target
@@ -55,6 +52,18 @@
       )> ast;
       one(?target)
 
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result-string)
+    with
+      filename      := <guarantee-extension(|"aterm")> path;
+      result-string := <pp-aterm-box; box2text-string(|120)> selected
+
+  generate-desugared-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result-string)
+    with
+      filename      := <guarantee-extension(|"aterm")> path;
+      result-string := <basic-desugar-top; pp-aterm-box; box2text-string(|120)> selected
+
   position-to-parent:
     ([position, _], _#(t*)) -> parent
     with

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-12-22 11:38:31 UTC (rev 20449)
@@ -90,6 +90,9 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
@@ -277,7 +280,7 @@
             <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
                 <param name="build.stratego.outputpath" value="${include}"/>
-                <param name="build.stratego.extraargs" value="-F --library"/>
+                <param name="build.stratego.extraargs" value="-F"/>
                 <param name="build.stratego.extension" value="ctree"/>
                 <param name="build.stratego.compiler" value="strc"/>
             </antcall>
@@ -298,7 +301,7 @@
                 <param name="build.stratego.extraargs" value="-la java-front"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
-            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
@@ -310,7 +313,8 @@
                 <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
                 <arg value="-p"/>
                 <arg value="trans"/>
-                <arg value="-clean"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
                 <arg line="${build.stratego.args}"/>
                 <arg line="${build.stratego.extraargs}"/>
                 <arg line="${externaljarflags}"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2009-12-22 11:38:31 UTC (rev 20449)
@@ -18,10 +18,12 @@
         imports <descriptor-name> "-Builders.generated"
         
         builders
+        ~
+        ~// This file can be used for custom analysis and builder rules.
+        ~// See the imported file for a brief introduction and examples.
+        
+        builders // new heading: ensure proper pretty printer table layout
           ~
-          ~// This file can be used for custom analysis and builder rules.
-          ~// See the imported file for a brief introduction and examples.
-          ~
           provider: ~provider
           observer: editor-analyze
           builder: "Generate Java code" = generate-java  (openeditor) (realtime)

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2009-12-22 11:38:31 UTC (rev 20449)
@@ -91,7 +91,7 @@
 			Job job = new WorkspaceJob("Updating editor descriptor runtime") {
 				@Override
 				public IStatus runInWorkspace(IProgressMonitor monitor) {
-					// TODO: Finer-grained locking?
+					// TODO: Finer-grained locking? (Seems to lead to deadlocks)
 					synchronized (Environment.getSyncRoot()) {
 						monitor.beginTask("", IProgressMonitor.UNKNOWN);
 						postResourceChanged(event.getDelta(), monitor);

Added: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java	2009-12-22 11:38:31 UTC (rev 20449)
@@ -0,0 +1,86 @@
+package org.strategoxt.imp.metatooling.stratego;
+
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import org.eclipse.imp.language.Language;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.NoRecoveryRulesException;
+import org.spoofax.jsglr.ParseTable;
+import org.spoofax.jsglr.SGLRException;
+import org.spoofax.jsglr.StructureRecoveryAlgorithm;
+import org.strategoxt.imp.editors.stratego.StrategoSugarParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.parser.JSGLRI;
+import org.strategoxt.imp.runtime.parser.ast.RootAstNode;
+import org.strategoxt.imp.runtime.services.MetaFile;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.StrategoException;
+import org.strategoxt.strc.parse_stratego_file_0_0;
+
+/**
+ * Parse Stratego files with unmanaged parse table support for .meta files.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class IMPParseStrategoFileStrategy extends parse_stratego_file_0_0 {
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		if (current.getTermType() != STRING)
+			return null;
+		
+		String file = ((IStrategoString) current).stringValue();
+		JSGLRI parser = processMetaFile(file, getStrategoParser());
+		try {
+			InputStream stream = null;
+			try {
+				stream = context.getIOAgent().openInputStream(file);
+				RootAstNode ast = parser.parse(stream, file);
+				return ast.getTerm();
+			} finally {
+				if (stream != null) stream.close();
+			}
+		} catch (SGLRException e) {
+			context.getIOAgent().getOutputStream(IOAgent.CONST_STDERR).println("parse-stratego-file (" + file + "): " + e.getMessage());
+			Environment.logException("Parsing of " + file + " failed", e);
+			return null;
+		} catch (IOException e) {
+			return null;
+		}
+	}
+
+	private JSGLRI getStrategoParser() {
+		try {
+			Language strategoSugar = StrategoSugarParseController.getDescriptor().getLanguage();
+			JSGLRI parser = new JSGLRI(Environment.getParseTable(strategoSugar), "Module");
+			if (parser.getParseTable().hasRecovers()) parser.setRecoverHandler(new StructureRecoveryAlgorithm());
+			return parser;
+		} catch (BadDescriptorException e) {
+			throw new StrategoException("Could not load Stratego-Sugar syntax", e);
+		} catch (NoRecoveryRulesException e) {
+			throw new StrategoException("Could not load stratego parse table", e);
+		}
+	}
+
+	private JSGLRI processMetaFile(String file, JSGLRI parser) {
+		String metaFileName = file.substring(file.length() - 4) + ".meta";
+		MetaFile metaFile = MetaFile.read(metaFileName);
+		ParseTable table = null;
+		if (metaFile != null) {
+			table = Environment.getUnmanagedParseTable(metaFile.getLanguage() + "-Permissive");
+			if (table == null) table = Environment.getUnmanagedParseTable(metaFile.getLanguage());
+		}
+		if (table != null) {
+			parser.setParseTable(table);
+			parser.setStartSymbol(null);
+			parser.getDisambiguator().setHeuristicFilters(metaFile.isHeuristicFiltersEnabled());
+		}
+		return parser;
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaSPILibrary.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaSPILibrary.java	2009-12-22 11:04:02 UTC (rev 20448)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaSPILibrary.java	2009-12-22 11:38:31 UTC (rev 20449)
@@ -6,13 +6,15 @@
 import org.strategoxt.imp.nativebundle.SDFBundleCommand;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.stratego_xtc.xtc_command_1_0;
+import org.strategoxt.strc.parse_stratego_file_0_0;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class MetaSPILibrary {
 	public static void init() {

(355 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Tue Dec 22 13:39:25 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 22 Dec 2009 12:39:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20450 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
Message-ID: <200912221239.nBMCdP1x001339@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-22 12:39:25 +0000 (Tue, 22 Dec 2009)
New Revision: 20450

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20450&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java

Log:
Fixed a term equality problem encountered by Danny

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-12-22 11:38:31 UTC (rev 20449)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-12-22 12:39:25 UTC (rev 20450)
@@ -33,6 +33,7 @@
 		this.factory = factory;
 		this.wrapped = term;
 		this.origin = origin;
+		internalSetAnnotations(term.getAnnotations());
 		
 		assert !(wrapped instanceof IWrappedAstNode) : "Already wrapped";
 		assert wrapped.getTermType() != LIST || origin.getTermType() != LIST



From L.C.L.Kats at tudelft.nl  Tue Dec 22 15:17:19 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 22 Dec 2009 14:17:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20451 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.stratego/trans
	org.strategoxt.imp.feature org.strategoxt.imp.updatesite
Message-ID: <200912221417.nBMEHJNm002922@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-12-22 14:17:19 +0000 (Tue, 22 Dec 2009)
New Revision: 20451

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20451&view=rev

Removed:
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
New release 0.2.2

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2009-12-22 12:39:25 UTC (rev 20450)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2009-12-22 14:17:19 UTC (rev 20451)
@@ -385,7 +385,7 @@
     dec @ VarDec(x, t) -> VarDec(x', t)
     with
       cookie := <new-cookie>;
-      x'   := x{cookie};
+      x'     := x{cookie};
       rules(
         DeclareCookie: (x, _, _) -> cookie
         Declaration: cookie -> dec
@@ -481,7 +481,7 @@
   // FIXME: name sdefs after constructors to fix constructor conflict errors 
   constraint-error:
     OpDecl(x{cookie}, s*) -> [(x, $[Conflicts with strategy '[y_name]']),
-                            (y, $[Conflicts with constructor [x]/[<length> s*]])]
+                              (y, $[Conflicts with constructor [x]/[<length> s*]])]
     where
       require(not(<Declaration> cookie => y @ SDefT(y_name, _, _, _)))
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	2009-12-22 12:39:25 UTC (rev 20450)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	2009-12-22 14:17:19 UTC (rev 20451)
@@ -68,6 +68,9 @@
     CondChoice(c, s1, s2) -> GuardedLChoice(Where(c), s1, s2)
 
   basic-desugar:
+    IfThen(c, s1) -> GuardedLChoice(Where(c), s1, Id())
+
+  basic-desugar:
     ToMetaExpr(t) -> ToMetaExpr(t')
     with
       // HACK: eliminate embedded languages

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-22 12:39:25 UTC (rev 20450)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-12-22 14:17:19 UTC (rev 20451)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.2.1"
+      version="0.2.2"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -171,13 +171,15 @@
          id="org.strategoxt.strj"
          download-size="0"
          install-size="0"
-         version="0.2.3.qualifier"/>
+         version="0.2.3.qualifier"
+         unpack="true"/>
 
    <plugin
          id="org.strategoxt.imp.generator"
          download-size="0"
          install-size="0"
-         version="0.1.2.qualifier"/>
+         version="0.1.2.qualifier"
+         unpack="true"/>
 
    <plugin
          id="org.strategoxt.imp.editors.sdf"
@@ -191,7 +193,7 @@
          download-size="0"
          install-size="0"
          version="0.1.1.qualifier"
-         unpack="false"/>
+         unpack="true"/>
 
    <plugin
          id="org.strategoxt.imp.editors.aterm"
@@ -204,7 +206,8 @@
          id="org.strategoxt.imp.nativebundle"
          download-size="0"
          install-size="0"
-         version="0.1.1.qualifier"/>
+         version="0.1.1.qualifier"
+         unpack="true"/>
 
    <plugin
          id="org.eclipse.imp.java.hosted"

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt	2009-12-22 12:39:25 UTC (rev 20450)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt	2009-12-22 14:17:19 UTC (rev 20451)
@@ -9,5 +9,6 @@
 7.  DON'T choose "Build All"; if you pick "Build" it will act like its building but won't build all plugins
 8.  Especially DON'T invoke your favorite deity through prayer and/or song at this point
 9.  When you upload the update site, be sure you DON'T skip artifacts.xml and content.xml so Eclipse will magically fail when updating
-10. If you're using a testing directory for updates, be sure you DON'T adapt site.xml with the new url
-11. Finally, to test it, DON'T use a clean Eclipse installation and DON'T use a clean workspace (Eclipse 3.4+ may do workspace-based caching!)
+10. DON'T specify the "unpack" attribute in feature.xml; let Eclipse surprise you instead (the little checkbox won't tell you what happens)
+11. If you're using a testing directory for updates, be sure you DON'T adapt site.xml with the new url
+12. Finally, to test it, DON'T use a clean Eclipse installation and DON'T use a clean workspace (Eclipse 3.4+ may do workspace-based caching!)

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-12-22 12:39:25 UTC (rev 20450)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-12-22 14:17:19 UTC (rev 20451)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.2.1.jar" id="org.strategoxt.imp" version="0.2.1">
+   <feature url="features/org.strategoxt.imp_0.2.2.jar" id="org.strategoxt.imp" version="0.2.2">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP"/>



From m.dejonge at tudelft.nl  Tue Dec 22 16:03:29 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 22 Dec 2009 15:03:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20452 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912221503.nBMF3TMs003576@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-22 15:03:29 +0000 (Tue, 22 Dec 2009)
New Revision: 20452

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20452&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java
   sglr-recovery/trunk/RecoveryLogging/src/logging/TimeLogging.aj

Log:


Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 14:17:19 UTC (rev 20451)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 15:03:29 UTC (rev 20452)
@@ -48,9 +48,9 @@
     	timeLogger=TimeLogging.aspectOf();
         currentFile=new FileLog();
         setNewRegion();
-        setLogRegionSkips(true);
+        setLogRegionSkips(false);
         setLogExecutionTimes(true);
-        logParsing=true;
+        logParsing=false;
         logRecoveryMethods=true;
         logRestricted=true;
         
@@ -87,6 +87,7 @@
     before(String x, String y, SGLR s): parsing(x, y, s) {
         currentFile=new FileLog();
         currentFile.setFileName(x);
+        setNewRegion();
         if(isLogging()){
         	System.out.println("Start Parsing: "+x);
         	if(!logRestricted)
@@ -144,7 +145,7 @@
     after(String x, String y, SGLR s): parsing(x, y, s) {     	
 	   for (RegionLog region :currentFile.getRegionInfo()) {		   
 		   if(timeLogger.isLogExecutionTimes()){
-    		   System.out.println(region.getExecutionTimetable());
+    		   System.out.println("execution times: "+region.getExecutionTimetable());
     	   }    	   
 	   }       
     } 

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-22 14:17:19 UTC (rev 20451)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-12-22 15:03:29 UTC (rev 20452)
@@ -98,9 +98,9 @@
         inspectedFragments.add(inspectedFragment);
     }
     
-    public long getRegionSelectionTime(){
-        if(!executionTimetable.containsKey("selectErroneousFragment"))
+    public long getRegionSelectionTime(){    	
+        if(!executionTimetable.containsKey("RegionRecovery.selectErroneousFragment"))
             return -1;
-        return executionTimetable.get("selectErroneousFragment");
+        return executionTimetable.get("RegionRecovery.selectErroneousFragment");
     }
 }

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/TimeLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/TimeLogging.aj	2009-12-22 14:17:19 UTC (rev 20451)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/TimeLogging.aj	2009-12-22 15:03:29 UTC (rev 20452)
@@ -25,10 +25,7 @@
         execution(void RecoveryConnector.doRecoverSteps());
 	
 	@Override
-    protected void afterMethodExecuted(String methodName, long duration) {
-		System.out.println("Time measure: "+methodName);
-		System.out.println(currentRegion.getExecutionTimetable());
-        currentRegion.addExecutionTime(methodName, duration);
-        System.out.println(currentRegion.getExecutionTimetable());
+    protected void afterMethodExecuted(String methodName, long duration) {		
+        currentRegion.addExecutionTime(methodName, duration);        
     }
 }



From m.dejonge at tudelft.nl  Tue Dec 22 18:48:32 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 22 Dec 2009 17:48:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20453 - MaartjeDeJonge
	- in sglr-recovery/trunk/RecoveryLogging: . src/logging
Message-ID: <200912221748.nBMHmWMm005615@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-22 17:48:32 +0000 (Tue, 22 Dec 2009)
New Revision: 20453

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20453&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/.classpath
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj

Log:


Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/.classpath
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/.classpath	2009-12-22 15:03:29 UTC (rev 20452)
+++ sglr-recovery/trunk/RecoveryLogging/.classpath	2009-12-22 17:48:32 UTC (rev 20453)
@@ -8,5 +8,6 @@
 			<attribute name="org.eclipse.ajdt.inpath" value="org.eclipse.ajdt.inpath"/>
 		</attributes>
 	</classpathentry>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.aterm"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 15:03:29 UTC (rev 20452)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 17:48:32 UTC (rev 20453)
@@ -1,6 +1,9 @@
 package logging;
 
+import java.util.ArrayList;
+
 import org.spoofax.jsglr.*;
+import aterm.*;
 
 
 public aspect RecoveryLogging{
@@ -11,6 +14,7 @@
     private TimeLogging timeLogger;
     private boolean logRecoveryMethods;
     private boolean logParsing;
+    boolean logParsedCharacter;
     
     private boolean logRestricted;
     
@@ -62,6 +66,40 @@
 		timeLogger.setCurrentRegion(currentRegion);
 	}
     
+	pointcut parseCharacter(SGLR s):
+		execution(void SGLR.doParseStep()) && target(s);
+	
+	after(SGLR s): parseCharacter(s){
+		if(logParsedCharacter){
+			System.out.print((char)s.currentToken);
+			if(s.activeStacks.size()==0){				
+				System.out.println(" (No Active Stacks)");				
+			}
+		}
+    }
+    
+	pointcut parseCalls():
+		execution(ATerm SGLR.sglrParse(String))||
+		execution(ArrayList<RecoverNode> FineGrainedOnRegion.recoverParse(ArrayList<RecoverNode>))||
+		execution(boolean FineGrainedOnRegion.parseRemainingTokens())||
+		execution(void RecoveryConnector.parseAsLayout())||
+		execution(boolean RecoveryConnector.parseRemainingTokens());
+	
+	before(): execution(void RecoveryConnector.recover()){
+		logParsedCharacter=false;
+	}
+	
+	before(): parseCalls(){
+		logParsedCharacter=logParsing;
+		System.out.println();
+		System.out.println("PARSE METHOD: "+thisJoinPoint.getSignature().getName());
+		System.out.println();
+	}
+	
+	after(): parseCalls(){
+		logParsedCharacter=false;
+	}
+	
     pointcut parsing(String x, String y, SGLR s): 
         execution(long Main.parseFile(String, String, SGLR))&& args(x, y, s);
 



From m.dejonge at tudelft.nl  Tue Dec 22 23:02:08 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 22 Dec 2009 22:02:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20454 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200912222202.nBMM289N008766@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-22 22:02:08 +0000 (Tue, 22 Dec 2009)
New Revision: 20454

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20454&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj

Log:


Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 17:48:32 UTC (rev 20453)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-12-22 22:02:08 UTC (rev 20454)
@@ -53,7 +53,7 @@
         currentFile=new FileLog();
         setNewRegion();
         setLogRegionSkips(false);
-        setLogExecutionTimes(true);
+        setLogExecutionTimes(false);
         logParsing=false;
         logRecoveryMethods=true;
         logRestricted=true;
@@ -90,10 +90,12 @@
 	}
 	
 	before(): parseCalls(){
-		logParsedCharacter=logParsing;
-		System.out.println();
-		System.out.println("PARSE METHOD: "+thisJoinPoint.getSignature().getName());
-		System.out.println();
+		if(logParsing){
+			logParsedCharacter=true;
+			System.out.println();
+			System.out.println("PARSE METHOD: "+thisJoinPoint.getSignature().getName());
+			System.out.println();
+		}
 	}
 	
 	after(): parseCalls(){



From m.dejonge at tudelft.nl  Wed Dec 30 15:58:07 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 30 Dec 2009 14:58:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20455 - MaartjeDeJonge
	- sglr-recovery/trunk
Message-ID: <200912301458.nBUEw7I6029422@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-30 14:58:07 +0000 (Wed, 30 Dec 2009)
New Revision: 20455

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20455&view=rev

Added:
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/

Log:
Initial import.

Changes:



From m.dejonge at tudelft.nl  Wed Dec 30 16:03:34 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 30 Dec 2009 15:03:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20456 - MaartjeDeJonge
	- in sglr-recovery/trunk/EvaluationRecoverAlgorithms: . src
	src/fileprocessing src/testrun
Message-ID: <200912301503.nBUF3Yh1029687@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-30 15:03:33 +0000 (Wed, 30 Dec 2009)
New Revision: 20456

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20456&view=rev

Added:
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Diff.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/EvaluationOutput.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FilePaths.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FileProcessing.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluation.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/IOHelper.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/InfraStructure.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Integrator.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/PreProcessor.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/RegionEvaluation.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/RegionEvaluator.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/SVNFilter.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Statistics.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Testcase.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Testrun.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Testsuite.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/TimeStats.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestFineGrainedEvaluation.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestPreprocessor.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/fgTests.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/javaTests.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/testIntegration.java

Log:
evaluation of FG and RegionSkip with intention comments

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Diff.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Diff.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Diff.java	2009-12-30 15:03:33 UTC (rev 20456)
@@ -0,0 +1,55 @@
+package fileprocessing;
+
+import java.util.ArrayList;
+
+public class Diff{
+	private ArrayList<String> diffIntended;
+	private ArrayList<String> diffActual;
+	
+	public ArrayList<String> getDiffIntended() {
+		return diffIntended;
+	}
+	public int getMaxLines() {
+		int maxLines=Math.max(diffIntended.size(), diffActual.size());
+		return maxLines;
+	}
+	public void setDiffIntended(ArrayList<String> diffIntended) {
+		this.diffIntended = diffIntended;
+	}
+	public ArrayList<String> getDiffActual() {
+		return diffActual;
+	}
+	public void setDiffActual(ArrayList<String> diffActual) {
+		this.diffActual = diffActual;
+	}
+	
+	public Diff(){
+		diffIntended=new ArrayList<String>();
+		diffActual=new ArrayList<String>();
+	}
+	
+	public Diff(ArrayList<String> intendedLines, ArrayList<String> actualLines){
+		setDiffActual(actualLines);
+		setDiffIntended(intendedLines);
+	}
+	
+	public String getDiffString_Intended(){			
+		return concatLines(diffIntended);
+	}
+	
+	public String getDiffString_Actual(){			
+		return concatLines(diffActual);
+	}
+	
+	private String concatLines(ArrayList<String> lines) {
+		String result="";
+		for (int i = 0; i < lines.size(); i++) {
+			result+=lines.get(i)+'\n';				
+		}
+		return result;
+	}
+	
+	public String toString(){
+		return getDiffString_Actual() + " (actual) \n"+getDiffString_Intended() +" (intended)";
+	}
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/EvaluationOutput.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/EvaluationOutput.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/EvaluationOutput.java	2009-12-30 15:03:33 UTC (rev 20456)
@@ -0,0 +1,346 @@
+package fileprocessing;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.PrintStream;
+import java.util.ArrayList;
+
+import fileprocessing.FineGrainedEvaluation.FG_Evaluation;
+import logging.RegionLog;
+
+public class EvaluationOutput {
+
+	private Testrun testrun;
+	private FilePaths myFilePaths;
+
+	public EvaluationOutput(Testrun testrun, FilePaths paths) {
+		this.testrun=testrun;
+		myFilePaths=paths;
+	}
+
+	private void saveFilesInResultDir() throws IOException{
+		saveRegionFiles(RegionEvaluation.RECOVERY_FAILED);
+		saveRegionFiles(RegionEvaluation.EXACT_EXCEPT_ONE);
+		saveRegionFiles(RegionEvaluation.NEAR_EXACT);
+		saveRegionFiles(RegionEvaluation.MERGED_REGION);
+		saveRegionFiles(RegionEvaluation.INTRODUCED_REGION);
+		saveRegionFiles(RegionEvaluation.MIS_DIAGNOSED);
+		saveRegionFiles(RegionEvaluation.RECOVERY_FAILED);
+		saveRegionFiles(RegionEvaluation.TOO_BIG);
+		saveRegionFiles(RegionEvaluation.TOO_SMALL);
+		for (FG_Evaluation eval : FG_Evaluation.values()) {
+			if (!eval.equals(FG_Evaluation.DIFF_0)) {
+				saveFGFiles(eval);
+			}
+		}
+	}
+
+	private void saveRegionFiles(RegionEvaluation eval) {
+		ArrayList<Testcase> failures=testrun.getTotalStats().getResultList(eval);
+		String dirName=pathToTestrunDir();
+		dirName=dirName+File.separator+"RegionSelection";
+		File dir = new File(dirName);
+		dir.mkdir();
+		dirName=dirName+File.separator+eval.toString();
+		dir = new File(dirName);
+		dir.mkdir();
+		for (Testcase tc : failures) {			
+			IOHelper.copyfile(tc.getFilePath(), IOHelper.addRootDir(tc.getFlattenedFileName(), dirName));
+			IOHelper.copyfile(tc.getFilePath_Skip_Result(), IOHelper.addRootDir(IOHelper.flattenPath(IOHelper.removeRootDir(tc.getFilePath_Skip_Result())), dirName));
+		}
+	}
+	
+	private void saveFGFiles(FG_Evaluation eval) {
+		ArrayList<Testcase> failures=testrun.getTotalStats().getFGResultList(eval);
+		String dirName=pathToTestrunDir();
+		dirName=dirName+File.separator+"FineGrained";
+		File dir = new File(dirName);
+		dir.mkdir();
+		dirName=dirName+File.separator+eval.toString();
+		dir = new File(dirName);
+		dir.mkdir();
+		for (Testcase tc : failures) {
+			IOHelper.copyfile(tc.getFilePath(), IOHelper.addRootDir(tc.getFlattenedFileName(), dirName));
+			IOHelper.copyfile(tc.getFilePath_FG_Result(), IOHelper.addRootDir(IOHelper.flattenPath(IOHelper.removeRootDir(tc.getFilePath_FG_Result())), dirName));
+		}
+	}
+
+	public void writeResultsToFile() throws IOException{
+		String dirName=pathToTestrunDir();
+		File dir = new File(dirName);
+		if(dir.exists())
+			IOHelper.deleteDir(dir, false);
+		createOutputDir(dirName);
+		String dirDetails = createOutputDir(pathToTestrunDir()+File.separator+"Details");
+		String fileName=dirName+File.separator+"Statistic_Overview.txt";
+		PrintStream fileOut = getPrintStream(fileName);
+		writeTestrunOverview(fileOut);
+		for (Testsuite aSuite : testrun.getTestSuites()) {
+			String suiteFile=dirName+File.separator+aSuite.getTestSuiteName().replace(' ', '_')+".txt";
+			PrintStream suiteOut = getPrintStream(suiteFile);			
+			write_TestSuite(aSuite, suiteOut);
+			//write_Details(aSuite, dirDetails);
+		}
+		saveFilesInResultDir();
+	}
+
+	private PrintStream getPrintStream(String fileName) throws IOException,
+	FileNotFoundException {
+		File overview=new File(fileName);
+		overview.delete();
+		overview.createNewFile();
+		PrintStream fileOut=new PrintStream(overview);
+		return fileOut;
+	}
+
+	private String createOutputDir(String path) {
+		String dirName=path;
+		File dir=new File(dirName); 
+		dir.mkdir();
+		return dirName;
+	}
+
+	private String pathToTestrunDir() {
+		return myFilePaths.getEvaluationResultDir() + File.separator+testrun.getNameOfTestRun().replace(' ', '_');
+	}
+
+	private void writeTestrunOverview(PrintStream fileOut) throws FileNotFoundException {
+		writeOutputLine("Testrun: "+testrun.getNameOfTestRun(), fileOut);
+		writeOutputLine("Description: "+testrun.getDescription(), fileOut);
+		writeOutputLine(fileOut);
+		write_General(testrun.getTotalStats(), fileOut);
+		write_TestrunOverview(testrun, fileOut);
+		writeOutputLine(fileOut);
+		//write_Overview(testrun.getTotalStats(), fileOut);
+	}
+
+	private void writeOutputLine(String line, PrintStream fileOut) throws FileNotFoundException{
+		fileOut.println(line);
+	}
+	private void writeOutputLine(PrintStream fileOut) throws FileNotFoundException{writeOutputLine("", fileOut);}
+
+	private void write_TestrunOverview(Testrun testrun, PrintStream fileOut) throws FileNotFoundException {
+		writeOutputLine(fileOut);
+		ArrayList<String> regionTable = new ArrayList<String>();
+		ArrayList<String> fgTable = new ArrayList<String>();
+		ArrayList<String> performanceTable = new ArrayList<String>();
+		regionTable.add(qualityHeaderRow());
+		fgTable.add(fgHeaderRow());
+		performanceTable.add(performanceHeaderRow());
+		for (Testsuite suite : testrun.getTestSuites()) {
+			regionTable.add(toQualityEvalRow(suite.getStatistics(), suite.getTestSuiteName()));
+			performanceTable.add(toPerformanceEvalRow(suite.getStatistics(), suite.getTestSuiteName()));
+			fgTable.add(toFGEvalRow(suite.getStatistics(), suite.getTestSuiteName()));
+		}
+		regionTable.add(separationRow(6));
+		performanceTable.add(separationRow(9));
+		fgTable.add(separationRow(FG_Evaluation.values().length+1));
+		regionTable.add(toQualityEvalRow(testrun.getTotalStats(), ""));
+		performanceTable.add(toPerformanceEvalRow(testrun.getTotalStats(), ""));
+		fgTable.add(toFGEvalRow(testrun.getTotalStats(), ""));
+		for (String qualData : regionTable) {
+			writeOutputLine(qualData, fileOut);
+		}
+		writeOutputLine(fileOut);
+		for (String fgData : fgTable) {
+			writeOutputLine(fgData, fileOut);
+		}
+		writeOutputLine(fileOut);
+		for (String perfData : performanceTable) {
+			writeOutputLine(perfData, fileOut);
+		}
+	}
+
+	private static String separationRow(int nrOfColumns) {
+		String[] columnLines = new String[nrOfColumns];
+		columnLines[0]=" ";
+		for (int i = 1; i < columnLines.length; i++) {
+			columnLines[i]="---------------------------------------------";
+		}
+		String sepRow = toRowString(columnLines);
+		return sepRow;
+	}
+
+	private static String performanceHeaderRow() {
+		String[] columnHeaders = new String[]{"  ","RS_AV (ms)", "RS_MAX (ms)", "FG_AV (ms)", "FG_MAX (ms)" ,"REC_AV (ms)", "REC_MAX (ms)", "CRITICAL", "CRITICAL(%)"};
+		String headerRow = toRowString(columnHeaders);
+		return headerRow;
+	}
+
+	private static String qualityHeaderRow() {
+		String[] columnHeaders = new String[]{"", RegionEvaluation.EXACT.toString(), RegionEvaluation.EXACT_EXCEPT_ONE.toString(), RegionEvaluation.NEAR_EXACT.toString(), RegionEvaluation.TOO_BIG.toString(), "OTHER", "SCORE"};
+		String headerRow = toRowString(columnHeaders);
+		return headerRow;
+	}
+	
+	private static String fgHeaderRow() {
+		String[] columnHeaders = new String[FG_Evaluation.values().length+1];
+		columnHeaders[0]="";
+		int loop=1;
+		for (FG_Evaluation eval : FG_Evaluation.values()) {
+			columnHeaders[loop]=eval.toString();
+			loop++;
+		}		            
+		String headerRow = toRowString(columnHeaders);
+		return headerRow;
+	}
+
+	private static String toFGEvalRow(Statistics s, String name) {
+		String[] row1Values=new String[1+FG_Evaluation.values().length];
+		row1Values[0] = name;
+		int loop=1;
+		for (FG_Evaluation eval : FG_Evaluation.values()) {
+			row1Values[loop]=""+s.getFGResult(eval);
+			loop++;
+		}		
+		String evalRow=toRowString(row1Values);
+		return evalRow;
+	}
+	
+	private static String toQualityEvalRow(Statistics s, String name) {
+		String[] row1Values=new String[7];
+		row1Values[0] = name;
+		int exactR = s.getResult(RegionEvaluation.EXACT);
+		int exactOneR = s.getResult(RegionEvaluation.EXACT_EXCEPT_ONE);
+		int goodR = s.getResult(RegionEvaluation.NEAR_EXACT);
+		int poorR = s.getResult(RegionEvaluation.TOO_BIG);
+		int otherR =s.getNumberOfEvaluatedRegions()-exactR-goodR-poorR-exactOneR;
+		double scoreR=s.calculateScore();
+		row1Values[1]=""+exactR;
+		row1Values[2]=""+exactOneR;
+		row1Values[3]=""+goodR;
+		row1Values[4]=""+poorR;
+		row1Values[5]=""+otherR;
+		row1Values[6]=""+scoreR;
+		String evalRow=toRowString(row1Values);
+		return evalRow;
+	}
+
+	private static String toPerformanceEvalRow(Statistics s, String firstColumn) {
+		String[] row1Values=new String[9];
+		row1Values[0] = firstColumn;
+		row1Values[1]=""+s.getAverageRegionSelectionTime();
+		row1Values[2]=""+s.getMaxRegionSelectionTime();
+		row1Values[3]=""+s.getAverage_FG_Time();
+		row1Values[4]=""+s.getMax_FG_Time();
+		row1Values[5]=""+s.getAverage_Recovery_Time();
+		row1Values[6]=""+s.getMax_Recovery_Time();
+		row1Values[7]=""+s.getNumberOfPerformanceCritical();
+		row1Values[8]=""+s.getPercentageOfPerformanceCritical();
+		String evalRow=toRowString(row1Values);
+		return evalRow;
+	}
+
+	private static String toRowString(String[] columnValues) {
+		String result=toColumnString(columnValues[0], 20);
+		for (int i = 1; i < columnValues.length; i++) {
+			result+=toColumnString(columnValues[i], 15);
+		}
+		return result;
+	}
+
+
+	private static String toColumnString(String value, int columnLength) {
+		String cuttedString = value.substring(0, Math.min(columnLength-2, value.length()));
+		while(cuttedString.length()<columnLength){
+			cuttedString+=" ";
+		}
+		return cuttedString;
+	}
+
+
+	private void write_TestSuite(Testsuite testSuite, PrintStream suiteOut) throws FileNotFoundException {
+		Statistics stats = testSuite.getStatistics();
+		write_Header(testSuite, suiteOut);
+		write_General(stats, suiteOut);		
+		write_Overview(stats, suiteOut);
+		write_Files(stats, suiteOut);		
+	}
+
+	private void write_Details(Testsuite testSuite, String dir) throws IOException {
+		for (Testcase aFile : testSuite.getTestCases()) {
+			String diagnoses="";
+			for (RegionEvaluation eval : aFile.getRegionEvaluations()) {
+				diagnoses+=eval + "_";
+			}			
+			String detailFile=dir+File.separator+diagnoses+aFile.getFileName()+".txt";
+			PrintStream detailOut = getPrintStream(detailFile);
+			write_Testcase(aFile, detailOut);		
+		}		
+	}
+
+	private void write_Testcase(Testcase aFile, PrintStream output) throws FileNotFoundException {
+		writeOutputLine("Filename: "+aFile.getFilePath(), output);
+		writeOutputLine("Evaluations: "+aFile.getRegionEvaluations(), output);
+		writeOutputLine("Region selection times (ms): "+aFile.getRecoverLog().getRegionSelectionTimes(), output);
+		writeOutputLine(output);
+		writeOutputLine("Skipped fragments: ", output);
+		ArrayList<String> skippedFragments = aFile.getRecoverLog().getSkippedFragments();
+		for (String fragment : skippedFragments) {
+			writeOutputLine(output);
+			writeOutputLine(fragment, output);
+		}
+
+		writeOutputLine("Inspected fragments: ", output);
+		ArrayList<String> inspectedFragments = aFile.getRecoverLog().getSkippedFragments();
+		for (String fragmentI :inspectedFragments) {
+			writeOutputLine("*******************",output);
+			writeOutputLine(fragmentI, output);
+		}
+	}
+
+	private void write_Files(Statistics stats, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine(suiteOut);
+		writeOutputLine("Region Selection (Files)", suiteOut);
+		for (RegionEvaluation eval : RegionEvaluation.values()) {
+			writeOutputLine("\t" + eval +":" + stats.getResultList_Filenames(eval), suiteOut);	
+		}
+		writeOutputLine(suiteOut);
+		writeOutputLine("Fine Grained (Files)", suiteOut);
+		for (FG_Evaluation eval : FG_Evaluation.values()) {
+			writeOutputLine("\t" + eval +":" + stats.getFGResultList_Filenames(eval), suiteOut);	
+		}
+	}
+
+	private void write_Overview(Statistics stats, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine(suiteOut);
+		writeOutputLine("Overview", suiteOut);
+		for (RegionEvaluation eval : RegionEvaluation.values()) {
+			writeOutputLine("\t" + eval +":" + stats.getResultList(eval).size(), suiteOut);	
+		}
+	}
+
+	private void write_General(Statistics stats, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine("General", suiteOut);
+		writeOutputLine("\t" + "Number of files: " + stats.getNumberOfFiles(), suiteOut);
+		writeOutputLine("\t" + "Number of evaluated files: " + (stats.getNumberOfFiles() - stats.nrOfNonEvaluatedFiles()), suiteOut);
+		writeOutputLine("\t" + "Number of evaluated regions: " + stats.getNumberOfEvaluatedRegions(), suiteOut);
+		//writeOutputLine("\t" + "Number of skipped regions during parsing: "+ stats.getNumberOfSkippedRegionsDuringParsing(), suiteOut);
+		writeOutputLine("\t" + "Score: " + stats.calculateScore(), suiteOut);
+		write_Performance(stats, suiteOut);
+
+	}
+
+	private void write_Performance(Statistics stats, PrintStream suiteOut)
+	throws FileNotFoundException {
+		writeOutputLine(suiteOut);
+		writeOutputLine("Performance", suiteOut);
+		writeOutputLine("\t" + "Average region selection time: " + stats.getAverageRegionSelectionTime(), suiteOut);
+		writeOutputLine("\t" + "Maximum region selection time: " + stats.getMaxRegionSelectionTime(), suiteOut);
+		writeOutputLine("\t" + "Number of performance critical files: " +stats.getNumberOfPerformanceCritical(), suiteOut);
+		writeOutputLine("\t" + "Percentage of performance critical files: " +stats.getPercentageOfPerformanceCritical(), suiteOut);
+		writeOutputLine("\t" + "Performance Critical: " + stats.getPerformanceCriticalFiles(), suiteOut);
+	}
+
+
+	private void write_Header(Testsuite testSuite, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine("Testsuite: "+testSuite.getTestSuiteName(), suiteOut);
+		writeOutputLine(suiteOut);
+	}
+	
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FilePaths.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FilePaths.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FilePaths.java	2009-12-30 15:03:33 UTC (rev 20456)
@@ -0,0 +1,88 @@
+package fileprocessing;
+
+import java.io.File;
+import java.util.Collection;
+import java.util.HashMap;
+
+public class FilePaths {
+	
+	//Parse table locations
+	private HashMap<String, String> parsetableLookUp;
+	private HashMap<String, String> ppLookUp;
+	private HashMap<String, String> startSymbolLookUp;
+	private String inputRootDir;
+	private String outPutRootDir;
+	private String evaluationDir;
+	
+	public void setEvaluationResultDir(String evaluationDir) {
+		this.evaluationDir = evaluationDir;
+	}
+
+	public String getOutPutRootDir() {
+		return outPutRootDir;
+	}
+
+	public void setOutPutRootDir(String outPutRootDir) {
+		this.outPutRootDir = outPutRootDir;
+	}
+
+	public FilePaths(String rootDirectory){
+		inputRootDir=rootDirectory;	
+		outPutRootDir="";
+		initLookUpTables();
+	}
+
+	public FilePaths(String inputDir, String outputDir){
+		inputRootDir=inputDir;	
+		outPutRootDir=outputDir;
+		initLookUpTables();		
+	}
+	
+	private void initLookUpTables() {
+		parsetableLookUp=new HashMap<String, String>();
+		ppLookUp=new HashMap<String, String>();
+		startSymbolLookUp=new HashMap<String, String>();		
+	}
+		
+	public FilePaths addLanguage(String extension, String parseTablePath, String ppPath) {
+		parsetableLookUp.put(extension, parseTablePath);
+		ppLookUp.put(extension, ppPath);
+		return this;
+	}
+	public FilePaths addLanguage(String extension, String parseTablePath, String ppPath, String startSymbol) {
+		parsetableLookUp.put(extension, parseTablePath);
+		ppLookUp.put(extension, ppPath);
+		startSymbolLookUp.put(extension, startSymbol);
+		return this;
+	}
+
+	public String getParsetable(String extension) {
+		return parsetableLookUp.get(extension);
+	}
+	
+	public String getPrettyPrintTable(String extension) {
+		if(ppLookUp.containsKey(extension))
+			return ppLookUp.get(extension);
+		return "";
+	}
+	
+	public void setRoorDir(String inputRoot) {
+		inputRootDir = inputRoot;
+	}
+
+	public String getRoorDir() {
+		return inputRootDir;
+	}
+
+	public Collection<? extends String> getExtensions() {
+		return parsetableLookUp.keySet();
+	}
+
+	public String getEvaluationResultDir() {
+		return evaluationDir;
+	}
+
+	public String getStartSymbol(String extension) {	
+		return startSymbolLookUp.get(extension);
+	}
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FileProcessing.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FileProcessing.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FileProcessing.java	2009-12-30 15:03:33 UTC (rev 20456)
@@ -0,0 +1,177 @@
+package fileprocessing;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import logging.RecoveryLogging;
+
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.Main;
+import org.spoofax.jsglr.NoRecoveryRulesException;
+import org.spoofax.jsglr.ParseTable;
+import org.spoofax.jsglr.ParseTableManager;
+import org.spoofax.jsglr.SGLR;
+import org.spoofax.jsglr.SGLRException;
+import org.strategoxt.lang.compat.NativeCallHelper;
+
+public class FileProcessing {
+	
+	private ParseTable pt;
+	private ParseTableManager ptm;
+	private String prettyPrintTable;
+	private String startSymbol;
+
+	public void setStartSymbol(String startSymbol) {
+		this.startSymbol = startSymbol;
+	}
+
+	public void setPrettyPrintTable(String prettyPrintTable) {
+		this.prettyPrintTable=prettyPrintTable;		
+	}
+	
+	public void setParsetable(String parseTableLocation) throws FileNotFoundException, IOException, InvalidParseTableException {
+		ptm = new ParseTableManager();
+		pt = ptm.loadFromFile(parseTableLocation);
+	}
+	
+	public void generateFineGrained_OnlyResult(String pathToInput, String pathToResult, String pathToAST,	String pathToPT) 
+	throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException, SGLRException, InterruptedException {
+		generateParseOutput(pathToInput, pathToResult, pathToAST, pathToPT, true, false);//TODO: does not work yet
+	}
+	
+	public void generateSkipResult_Characters(String pathToInput,
+			String pathToResult, String pathToPT) throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException, SGLRException, InterruptedException {
+		try {
+			boolean parsingSucceeded=writeParseTree(pathToInput, pathToPT, false, true);
+			if (parsingSucceeded) {
+				yieldAsfix(pathToPT, pathToResult);
+				File ptSkipped = new File(pathToPT);
+				ptSkipped.delete();
+			}
+		} catch (Exception e) {
+			System.err.println(pathToInput +": " +e);
+			e.printStackTrace();
+		} catch (StackOverflowError so){
+			System.err.println(pathToInput +": " +so);
+			so.printStackTrace();
+		}
+	}
+	
+	public void generateSkipRecoveryResult(String pathToInput, String pathToResult, String pathToAST,	String pathToPT) 
+	throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException, SGLRException, InterruptedException {
+		generateParseOutput(pathToInput, pathToResult, pathToAST, pathToPT, false, true);
+	}
+	
+	public void generateNoRecoveryResult(String pathToInput, String pathToResult, String pathToAST,	String pathToPT) 
+	throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException, SGLRException, InterruptedException {
+		generateParseOutput(pathToInput, pathToResult, pathToAST, pathToPT, false, false);
+	}
+	
+	public void generateFineGrainedResult(String pathToInput, String pathToResult, String pathToAST, String pathToPT) throws FileNotFoundException, NoRecoveryRulesException, IOException, InvalidParseTableException, SGLRException, InterruptedException {
+		boolean doRegionSkip=true;
+		boolean doFineGrained=true;
+		generateParseOutput(pathToInput, pathToResult, pathToAST,
+				pathToPT, doRegionSkip, doFineGrained);	
+	}
+
+	private void generateParseOutput(String pathToInput, String pathToResult,
+			String pathToAST, String pathToPT, boolean doRegionSkip,
+			boolean doFineGrained) throws FileNotFoundException, IOException,
+			InvalidParseTableException, NoRecoveryRulesException,
+			SGLRException, InterruptedException {
+		try {
+			boolean parsingSucceeded=writeParseTree(pathToInput, pathToPT, doFineGrained, doRegionSkip);
+			if (parsingSucceeded) {
+				String unreadableAST=pathToAST+".temp";
+				implodeAsfix(pathToPT, unreadableAST);
+				pp_aterm(unreadableAST, pathToAST);
+				new File(unreadableAST).delete();
+				if (pathToInput.endsWith(InfraStructure.JAVA_EXT))
+					pp_java(pathToAST, pathToResult);
+				else if (prettyPrintTable != null && new File(prettyPrintTable).exists())
+					prettyPrint(pathToAST, pathToResult, prettyPrintTable);
+				//File ptSkipped = new File(pathToPT);
+				//ptSkipped.delete();
+				//File astSkipped = new File(pathToAST);
+				//astSkipped.delete();
+			}
+		} catch (Exception e) {
+			System.err.println(pathToInput +": " +e);
+			e.printStackTrace();
+		} catch (StackOverflowError so){
+			System.err.println(pathToInput +": " +so);
+			so.printStackTrace();
+		}
+	}
+
+	private void pp_aterm(String inputFile, String outputFile) throws InterruptedException, IOException {
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"pp-aterm", 
+				"-i", inputFile,
+				"-o", outputFile
+		};
+		caller.call(commandArgs, new String[0], null, System.out, System.err);			
+	}
+	
+	private void prettyPrint(String inputFile, String outputFile, String ppLocation) throws InterruptedException, IOException {
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"ast2text", "-p", ppLocation,
+				"-i", inputFile,
+				"-o", outputFile
+		};
+		caller.call(commandArgs, new String[0], null, System.out, System.err);			
+	}
+	
+	private void pp_java(String inputFile, String outputFile) throws InterruptedException, IOException {
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"pp-java", "-i", inputFile,
+				"-o", outputFile
+		};
+		caller.call(commandArgs, new String[0], null, System.out, System.err);			
+	}
+
+	private void implodeAsfix(String inputFile, String outputFile) throws InterruptedException, IOException {
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"implode-asfix", "-i", inputFile,
+				"-o", outputFile
+		};
+		caller.call(commandArgs, new String[0], null, System.out, System.err);		
+	}
+
+	private void yieldAsfix(String inputFile, String outputFile) throws InterruptedException, IOException {
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"asfix-yield", "-i", inputFile,
+				"-o", outputFile
+		};
+		caller.call(commandArgs, new String[0], null, System.out, System.err);
+	}
+	
+	@SuppressWarnings("deprecation")
+	private boolean writeParseTree(String testFile, String parseTreeFile, boolean useFG, boolean useRS) throws FileNotFoundException, IOException,
+			InvalidParseTableException, NoRecoveryRulesException, SGLRException {
+		SGLR sglr = new SGLR(ptm.getFactory(), pt);         
+        //sglr.getDisambiguator().setFilterAny(false); 
+		sglr.setUseStructureRecovery(useRS);
+        sglr.getDisambiguator().setFilterAny(true); 
+        sglr.getDisambiguator().setFilterCycles(true);
+        sglr.getDisambiguator().setFilterInjectionCount(true);
+        sglr.getDisambiguator().setFilterPreferenceCount(true);
+        sglr.getDisambiguator().setFilterStrict(true);
+        sglr.getDisambiguator().setFilterTopSort(true);
+        sglr.getDisambiguator().setHeuristicFilters(true);      
+        sglr.setUseFineGrained(useFG); 
+        if(!useFG && !useRS)//TODO: start symbol hack
+        	Main.parseFile(testFile, parseTreeFile, sglr, startSymbol);//TODO: find out problem (.intended gives ambiguities without startsymbol, fg gives start-symbol failures)
+        else
+        	Main.parseFile(testFile, parseTreeFile, sglr, null);
+        File ptFile=new File(parseTreeFile);
+        return ptFile.exists() && !IOHelper.readFromFile(parseTreeFile).isEmpty();
+	}
+
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluation.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluation.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluation.java	2009-12-30 15:03:33 UTC (rev 20456)
@@ -0,0 +1,67 @@
+package fileprocessing;
+
+import java.util.ArrayList;
+
+public class FineGrainedEvaluation {
+	public enum FG_Evaluation{
+		DIFF_0,
+		DIFF_1,
+		DIFF_2_5,
+		DIFF_5_PLUS,
+		FG_FAILED,
+		ERROR_IN_INTENDED
+	}
+	
+	private ArrayList<Diff> diffRegions;
+	private ArrayList<Diff> diffRegionsAST;
+	private ArrayList<FG_Evaluation> evaluations;
+	
+	public ArrayList<Diff> getDiffRegions() {
+		return diffRegions;
+	}
+	
+	public ArrayList<Diff> getDiffRegionsAST() {
+		return diffRegionsAST;
+	}
+	
+	public void addDiffRegionsAST(ArrayList<Diff> astDiffs) {
+		for (Diff diffRegion : astDiffs) {
+			diffRegionsAST.add(diffRegion);
+			int maxSize = diffRegion.getMaxLines();
+			evaluations.add(getEvaluation(maxSize));
+		}
+	}
+	
+	public void addDiffRegions(ArrayList<Diff> astDiffs) {
+		for (Diff diffRegion : astDiffs) {
+			diffRegions.add(diffRegion);			
+		}
+	}
+
+	public FineGrainedEvaluation(){
+		diffRegionsAST=new ArrayList<Diff>();
+		diffRegions=new ArrayList<Diff>();
+		evaluations=new ArrayList<FG_Evaluation>();
+	}
+
+	public ArrayList<FG_Evaluation> getEvaluations() {
+		if(getDiffRegionsAST().isEmpty() && evaluations.isEmpty())
+			evaluations.add(FG_Evaluation.DIFF_0);
+		return evaluations;
+	}
+	
+	public void addEvaluation(FG_Evaluation failedEval) {
+		evaluations.add(failedEval);
+	}
+
+	private FG_Evaluation getEvaluation(int nrOfDiffLines) {
+		if(nrOfDiffLines==0)
+			return FG_Evaluation.DIFF_0;
+		if(nrOfDiffLines==1)
+			return FG_Evaluation.DIFF_1;
+		if(nrOfDiffLines <= 5)
+			return FG_Evaluation.DIFF_2_5;
+		else
+			return FG_Evaluation.DIFF_5_PLUS;
+	}
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java	2009-12-30 15:03:33 UTC (rev 20456)
@@ -0,0 +1,152 @@
+package fileprocessing;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import fileprocessing.FineGrainedEvaluation.FG_Evaluation;
+
+public class FineGrainedEvaluator {
+	
+	public FineGrainedEvaluation compareResultFiles(String intended_AST, String intended, String fg_AST, String fg) throws IOException{
+		FineGrainedEvaluation result = new FineGrainedEvaluation();
+		if(!new File(fg_AST).exists()){
+			result.addEvaluation(FG_Evaluation.FG_FAILED);
+			return result;
+		} 
+		if(!new File(intended_AST).exists()){
+			result.addEvaluation(FG_Evaluation.ERROR_IN_INTENDED);
+			return result;
+		}		
+		
+		result.addDiffRegionsAST(compareResult(intended_AST, fg_AST));
+		if (new File(intended).exists() && new File(fg).exists()) {
+			result.addDiffRegions(compareResult(intended, fg));
+		}
+		return result;
+	}
+	
+	private ArrayList<Diff> compareResult(String filePath_Intended, String filePath_FG) throws IOException{
+		ArrayList<Diff> resultDiffs=new ArrayList<Diff>();
+		String intended=IOHelper.readFromFile(filePath_Intended);
+		String recoveryResult=IOHelper.readFromFile(filePath_FG);
+		String[] fgLines= recoveryResult.split("\n");
+		String[] intendedLines=intended.split("\n");
+		int indexForward=0;
+		int indexBW_Intended=intendedLines.length-1;
+		int indexBW_FG=fgLines.length-1;
+		int fwDiffLine=-1;
+		int bwDiffLine=-1;
+		while(indexForward<intendedLines.length && indexForward<fgLines.length){
+			boolean sameLinesFW= intendedLines[indexForward].equals(fgLines[indexForward]);
+			if(!sameLinesFW && fwDiffLine==-1){
+				fwDiffLine=indexForward;
+			}
+			indexBW_FG=fgLines.length-1-indexForward;
+			indexBW_Intended=intendedLines.length-1-indexForward;
+			boolean sameLinesBW= intendedLines[indexBW_Intended].equals(fgLines[indexBW_FG]);
+			if(!sameLinesBW && bwDiffLine==-1){
+				bwDiffLine=indexForward;
+			}
+			indexForward++;
+		}
+		if(intendedLines.length!=fgLines.length){
+			if(fwDiffLine==-1)
+				fwDiffLine=Math.min(intendedLines.length,fgLines.length);
+			if(bwDiffLine==-1){
+				bwDiffLine=indexForward;
+			}
+		}
+		if(bwDiffLine>=0 || fwDiffLine>=0){
+			ArrayList<String> actualFragmentLines=new ArrayList<String>();			
+			ArrayList<String> intendedFragmentLines=new ArrayList<String>();
+			for (int i = fwDiffLine; i < intendedLines.length-bwDiffLine; i++) {
+				intendedFragmentLines.add(intendedLines[i]);
+			}
+			for (int i = fwDiffLine; i < fgLines.length-bwDiffLine; i++) {
+				actualFragmentLines.add(fgLines[i]);
+			}
+			resultDiffs.add(new Diff(intendedFragmentLines, actualFragmentLines));
+			if(actualFragmentLines.size()>0 && intendedFragmentLines.size()>0 && (actualFragmentLines.size()>2 || intendedFragmentLines.size()>2)){
+				ArrayList<String> commonMid=findCommonMid(actualFragmentLines, intendedFragmentLines);
+				ArrayList<Diff> splitResult=findFirstAndLastErroneousPart(commonMid, actualFragmentLines, intendedFragmentLines);
+				if(splitResult.size()==2)
+					resultDiffs=splitResult;
+			}
+		}
+		//System.out.println("Result: "+result.getDiffRegions());	
+		return resultDiffs;
+	}
+	
+	private ArrayList<Diff> findFirstAndLastErroneousPart(
+			ArrayList<String> commonMid, ArrayList<String> actualFragmentLines,
+			ArrayList<String> intendedFragmentLines) {	
+		ArrayList<Diff> diffResult=new ArrayList<Diff>();		
+		ArrayList<String> intendedFirst = new ArrayList<String>();
+		ArrayList<String> intendedLast = new ArrayList<String>();
+		for (int i = 0; i <= intendedFragmentLines.size()-commonMid.size(); i++) {
+			int j = 0;
+			boolean sameLines=true;
+			while( j < commonMid.size() && sameLines) {
+				sameLines=commonMid.get(j).equals(intendedFragmentLines.get(i+j));
+				j++;				
+			}
+			if(sameLines){
+				for (int k = 0; k < i; k++) {
+					intendedFirst.add(intendedFragmentLines.get(k));
+				}
+				for (int l = i+commonMid.size(); l < intendedFragmentLines.size(); l++) {
+					intendedLast.add(intendedFragmentLines.get(l));
+				}
+				i=intendedFragmentLines.size()+1;
+			}
+		}
+		ArrayList<String> actualFirst = new ArrayList<String>();
+		ArrayList<String> actualLast = new ArrayList<String>();
+		for (int i = 0; i <= actualFragmentLines.size()-commonMid.size(); i++) {
+			int j = 0;
+			boolean sameLines=true;
+			while( j < commonMid.size() && sameLines) {
+				sameLines=commonMid.get(j).equals(actualFragmentLines.get(i+j));
+				j++;				
+			}
+			if(sameLines){
+				for (int k = 0; k < i; k++) {
+					actualFirst.add(actualFragmentLines.get(k));
+				}
+				for (int l = i+commonMid.size(); l < actualFragmentLines.size(); l++) {
+					actualLast.add(actualFragmentLines.get(l));
+				}
+				i=actualFragmentLines.size()+1;
+			}
+		}
+		if (intendedFirst.size()!=0 && intendedLast.size()!=0&& actualFirst.size()!=0 && actualLast.size()!=0) {
+			diffResult.add(new Diff(intendedFirst, actualFirst));
+			diffResult.add(new Diff(intendedLast, actualLast));
+		}
+		return diffResult;
+	}
+
+	public ArrayList<String> findCommonMid(ArrayList<String> set1, ArrayList<String> set2){		
+		ArrayList<String> smallestSet=set1;
+		ArrayList<String> biggestSet=set2;
+		if(set1.size()>set2.size()){
+			smallestSet=set2;
+			biggestSet=set1;
+		}
+		int bw=smallestSet.size()-1;
+		int fw=0;
+		boolean isOdd=false;
+		while(bw>fw && !biggestSet.containsAll(smallestSet.subList(fw, bw))){
+			if(isOdd)
+				fw++;
+			else
+				bw--;
+			isOdd=!isOdd;
+		}
+		ArrayList<String> inBoth=new ArrayList<String>();
+		inBoth.addAll(smallestSet.subList(fw, bw));
+		//System.out.println("InBoth: "+inBoth);
+		return inBoth;
+	} 
+
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/IOHelper.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/IOHelper.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/IOHelper.java	2009-12-30 15:03:33 UTC (rev 20456)
@@ -0,0 +1,101 @@
+package fileprocessing;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.PrintStream;
+
+public class IOHelper {
+
+	public static String readFromFile(String filePath) throws FileNotFoundException,
+	IOException {
+		byte[] buffer = new byte[(int) new File(filePath).length()];
+		FileInputStream f = new FileInputStream(filePath);
+		f.read(buffer);
+		String s= new String(buffer);
+		return s;
+	}	
+	
+	public static void writeToFile(String filePath, String content) throws FileNotFoundException {
+		PrintStream fOut=new PrintStream(filePath);
+		fOut.print(content);		
+	}
+	
+	public static String addRootDir(String filePath, String dir) {
+		String outputPath=dir+File.separator+filePath;
+		return outputPath;
+	}
+	
+	public static String removeRootDir(String path) {
+		String newPath= path.substring(path.indexOf(File.separator)+1);		
+		return newPath;
+	}
+
+	public static String renameFile(String fileName, String mark, boolean asExt) {
+		int indexExtension=fileName.lastIndexOf('.');
+		String ext=fileName.substring(indexExtension);
+		String name=fileName.substring(0, indexExtension);
+		String newPath= name+mark;		
+		if(!asExt)
+			newPath=newPath+ext;
+		return newPath;
+	}
+
+	public static String flattenPath(String filePath) {
+		String fileName=filePath.replace(File.separatorChar, '_');
+		return fileName;
+	}
+	
+	public static void copyfile(String srFile, String dtFile){
+		try{
+			File f1 = new File(srFile);
+			File f2 = new File(dtFile);
+			InputStream in = new FileInputStream(f1);
+			OutputStream out = new FileOutputStream(f2);
+
+			byte[] buf = new byte[1024];
+			int len;
+			while ((len = in.read(buf)) > 0){
+				out.write(buf, 0, len);
+			}
+			in.close();
+			out.close();
+			//System.out.println("File copied: "+srFile);
+		}
+		catch(FileNotFoundException ex){
+			System.err.println(ex.getMessage() + " in the specified directory.");
+			//System.exit(0);
+		}
+		catch(IOException e){
+			System.err.println(e.getMessage());      

(1696 diff lines omitted)


From m.dejonge at tudelft.nl  Wed Dec 30 16:04:48 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 30 Dec 2009 15:04:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20457 - MaartjeDeJonge
	- in sglr-recovery/trunk/EvaluationRecoverAlgorithms: . Input
	Input/Common Input/Dryad
Message-ID: <200912301504.nBUF4mcL029692@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-30 15:04:43 +0000 (Wed, 30 Dec 2009)
New Revision: 20457

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20457&view=rev

Added:
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/correct.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/currentLineError.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/doubleClosed_If.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedDeclaration.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedImport.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedMethodHeader.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawed_IfBlock.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/methodOutsideClass.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/morePartsStructureError.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/multipleErrors.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/multipleErrors2.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/previousLineError.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/priorSiblingError.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/sloppyCode.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/testBridgeFG.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/testFile.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/twoSeparatedErrors.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedBlockComment.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedClassBody.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedMethod.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedString.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosed_If.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break1.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break1.sj.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break10.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break11.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break12.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break13.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break14.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break15.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break16.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break17.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break18.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break19.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break2.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break20.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break21.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break22.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break23.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break24.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break25.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break26.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break27.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break28.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break29.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break3.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break30.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break31.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break32.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break33.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break34.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break35.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break4.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break5.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break6.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break7.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break8.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break9.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break1.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break10.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break11.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break12.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break13.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break14.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break15.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break16.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break17.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break18.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break19.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break2.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break20.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break21.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break22.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break23.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break24.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break25.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break26.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break27.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break28.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break29.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break3.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break30.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break31.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break32.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break33.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break34.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break35.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break4.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break5.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break6.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break7.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break8.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.3.break9.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break0.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break1.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break10.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break11.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break12.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break13.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break14.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break15.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break16.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break17.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break18.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break19.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break2.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break20.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break21.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break22.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break23.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break24.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break25.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break26.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break27.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break28.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break29.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break3.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break30.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break31.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break32.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break34.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break35.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break4.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break5.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break6.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break7.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break8.sj
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.break9.sj

Log:
Dryad and Common java errors, with Region and FG comments

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/correct.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/correct.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/correct.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X  
+{ 
+	private int correctMethod1()
+	{ 
+		corr2();
+		return corrInt;
+	}
+
+	private int ErrorFragment()
+	{ 
+		int corrLine1;		
+		corrLine2();
+		corrLine3();
+	}
+
+	private int correctMethod2()
+	{ 
+		corr2();
+		corr2();
+		int corrInt = 1;
+		return corrInt;
+	}
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/currentLineError.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/currentLineError.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/currentLineError.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X  
+{ 
+	private int correctMethod1()
+	{ 
+		corr2();
+		return corrInt;
+	}
+
+	private int ErrorFragment()
+	{ 
+		int corrLine1;
+		int i/*[*/)/*]*/; /*@START @END*/
+		corrLine2();
+		corrLine3();
+	}
+
+	private int correctMethod2()
+	{ 
+		corr2();
+		corr2();
+		int corrInt = 1;
+		return corrInt;
+	}
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/doubleClosed_If.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/doubleClosed_If.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/doubleClosed_If.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,31 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int wronglyClosedMethod()
+  { 
+    if(true) //@START
+      i = 5;
+    /*[*/}/*]*/ //@END
+    bla();
+  }
+
+  private int correctMethod2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedDeclaration.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedDeclaration.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedDeclaration.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,21 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int anInt;
+
+  private int errorDeclaration /*<;>*/ //@START @END
+
+  private String aString;
+
+  private int correctMethod()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedImport.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedImport.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedImport.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,16 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.ErrorImport/*<;>*/ //@START @END
+import java.io;
+
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedMethodHeader.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedMethodHeader.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawedMethodHeader.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,29 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int Fragment()/*[*/)/*]*/ //@START
+  { 
+    int i = 1;
+    int i;
+  } //@END
+
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int correctMethod2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawed_IfBlock.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawed_IfBlock.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/flawed_IfBlock.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,26 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int ErrorFragment()
+  { 
+    int corrLine1;
+    corrLine2();
+    int i;
+    if(bla())/*[*/)/*]*/{ //@START
+        i = 0; /*<}>*/ //@END
+    corrLine3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/methodOutsideClass.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/methodOutsideClass.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/methodOutsideClass.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,22 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int bla()
+  { 
+    bla();
+  }
+}
+
+private int bla() //@START //@l
+{ //@l
+  bla(); //@l
+} //@END //@l

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/morePartsStructureError.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/morePartsStructureError.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/morePartsStructureError.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,32 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int errorFragment()
+  { 
+    int corrLine1;
+    corrLine2();
+    if(bla()) //@START
+    { 
+      int i;
+      return 2; /*< } >*/
+    else
+      if(true)
+        return 4;
+      else
+        return 5; //@END
+    corrLine3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/multipleErrors.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/multipleErrors.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/multipleErrors.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,28 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int method2()
+  { 
+    corr2();
+    /*[*/ $ corr2()? %% -; /*]*/ //@START 
+    int corrInt = bla/*[*/(/*]*/(); //@END
+    return corrInt;
+  }
+  
+  private int correctMethod3()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/multipleErrors2.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/multipleErrors2.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/multipleErrors2.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int correctMethod2(){
+      int corrLine1;
+      if(true){
+    	  String s = "bla bla bla"/*<;>*/ // @START @END
+    	  corrLine2();
+      }
+      else{ //@START
+         corrLine3(); /*<}>*/     
+      corrLine4( /*<);>*/ //@END
+  }
+      
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+  
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+}
+

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/previousLineError.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/previousLineError.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/previousLineError.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,24 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int ErrorFragment()
+  { 
+    int corrLine1;
+    corrLine2();
+    int i = bla(/*<);>*/ //@START @END
+    corrLine3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/priorSiblingError.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/priorSiblingError.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/priorSiblingError.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,29 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int errorFragment()
+  { 
+    int i;
+    if(true) /*<{>*/ //@START 
+      bla();
+      doSomething();
+    } // @END
+    int j;
+    int k;
+    doSomething2();
+    return 5;
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/sloppyCode.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/sloppyCode.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/sloppyCode.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,77 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int ErrorTooMuchClosing()
+  { 
+    if(bla1())
+    { 
+      while(true) //@START
+      { 
+        bla2(); /*<}>*/ // @END
+      stm(); 
+    }
+    int i;
+    int j;
+    bla3();
+  }  
+
+  private int ErrorMissingClosing()
+  { 
+    if(bla1())
+    { 
+      bla();
+      while(true) //@START
+      { 
+        bla2();
+        stm(); /*< } >*/ // @END
+    }
+    int i;
+    int j;
+    bla3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod3()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/testBridgeFG.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/testBridgeFG.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/testBridgeFG.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,34 @@
+class X  
+{ 
+  private int method1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int method2()
+  { 
+    int Line1;
+    if(false){ //@START
+	    if(true)
+	    { 
+	       Line2();
+	       Line3(); /*<}>*/
+	    Line4();
+	    Line5(); /*<}>*/ //@END
+    Line6();
+    Line7() /*<;>*/ //@START @END
+  }
+    
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+  
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/testFile.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/testFile.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/testFile.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,31 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int wronglyClosedMethod()
+  { 
+    if(true) //@START
+      i = 5;
+    /*[*/}/*]*/ //@END
+    bla();
+  }
+
+  private int correctMethod2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/twoSeparatedErrors.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/twoSeparatedErrors.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/twoSeparatedErrors.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,57 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int ErrorTooMuchClosing()
+  { 
+    if(bla1())
+    { 
+      while(true) //@START
+      { 
+        bla2(); /*<}>*/ //@END
+      stm();
+    }
+    int i;
+    int j;
+    bla3();
+  }
+
+  private int ErrorMissingClosing()
+  { 
+    if(bla1())
+    { 
+      bla();
+      while(true) //@START
+      { 
+        bla2();
+        stm(); /*< } >*/ //@END
+    }
+    int i;
+    int j;
+    bla3();
+  }
+
+  private int correctMethod3()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod4()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedBlockComment.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedBlockComment.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedBlockComment.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,27 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  /* bla bla
+   * bla bla
+   * //@START //@END 
+  <@BC>
+  private int correctMethod2(){
+      int corrLine1;
+      if(true){
+    	  String s = "bla bla bla";
+    	  corrLine2();
+      }
+      corrLine3();     
+      corrLine4();
+  }
+}
+

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedClassBody.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedClassBody.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedClassBody.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,19 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int bla()
+  { 
+    bla();
+  }
+/*<}>*/
+  
+

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedMethod.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedMethod.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedMethod.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,24 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int UnclosedMethod()
+  { 
+      if(true){ //@START 
+         int corrLine1;
+         corrLine2(); /*<}>*/ //@END
+      return 5;
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedString.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedString.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosedString.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,25 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int correctMethod2(){
+      int corrLine1;
+      if(true){
+    	  String m = "io io io";
+    	  int i;
+    	  String s = "bla bla bla /*<";>*/ //@START @END
+    	  corrLine2();
+      }
+      corrLine3();     
+      corrLine4();
+  }
+}
+

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosed_If.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosed_If.java	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Common/unclosed_If.java	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,30 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int UnclosedIf()
+  { 
+    if(true) { //@START
+       i = 5; /*<}>*/ //@END
+    return 7;
+  }
+
+  private int correctMethod2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break1.sj
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break1.sj	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break1.sj	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,120 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")  /* < ) >*/   /* < ) >*/ //@END
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break1.sj.sj
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break1.sj.sj	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Input/Dryad/test-java-traits.2.break1.sj.sj	2009-12-30 15:04:43 UTC (rev 20457)
@@ -0,0 +1,120 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")      /* < ) >*/    /* < ) >*/ //@END
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(

(13367 diff lines omitted)


From m.dejonge at tudelft.nl  Wed Dec 30 16:06:39 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 30 Dec 2009 15:06:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20458 - MaartjeDeJonge
	- in sglr-recovery/trunk/EvaluationRecoverAlgorithms: . Grammars
Message-ID: <200912301506.nBUF6dP1029716@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-30 15:06:38 +0000 (Wed, 30 Dec 2009)
New Revision: 20458

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20458&view=rev

Added:
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm-Permissive.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.pp
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.tbl
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.pp
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.tbl
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Java_Permissive.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Java_Permissive.pp
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Java_Permissive.tbl
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/SDF-Permissive.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/SDF.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/SDF.pp
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/SDF.tbl
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Stratego-Java-15.tbl
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Stratego-Sugar-Permissive.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Stratego-Sugar-Permissive.tbl
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Stratego-Sugar.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Stratego-Sugar.pp
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/StrategoJava-Permissive.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/StrategoJava-Permissive.tbl
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/StrategoJava.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/StrategoJava.pp
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/WebDsl-Permissive.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/WebDsl-Permissive.tbl
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/WebDsl.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/WebDsl.pp
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/xxxStratego-Java-15.def
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/xxxStratego-Java-15.tbl

Log:
collection of Permissive Grammars

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm-Permissive.def
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm-Permissive.def	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm-Permissive.def	2009-12-30 15:06:38 UTC (rev 20458)
@@ -0,0 +1,162 @@
+definition
+
+module basic/IdentifierCon
+exports
+  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
+
+  lexical syntax
+    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
+    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
+    ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
+    WATERTOKEN                     -> WATER               
+    WATERTOKENSEPARATOR            -> WATER               
+
+  lexical restrictions
+    WATERTOKEN -/- [A-Za-z0-9\_]
+
+  context-free syntax
+    WATER -> LAYOUT {cons("WATER")}
+
+  (
+
+  sorts WATEREOF
+
+  lexical restrictions
+    WATEREOF -/- ~[]
+
+  lexical syntax
+    %% Lexical insertion recovery rules           
+    %%Insertion rule for "e":                     
+                                        -> [\101] {recover, cons("INSERTION")}
+    %%Insertion rule for ".":                     
+                                        -> [\46]  {recover, cons("INSERTION")}
+    %%Insertion rule for "+":                     
+                                        -> [\43]  {recover, cons("INSERTION")}
+    %%Insertion rule for "-":                     
+                                        -> [\45]  {recover, cons("INSERTION")}
+    %%Insertion rule for "<":                     
+                                        -> [\60]  {recover, cons("INSERTION")}
+    %%Insertion rule for ">":                     
+                                        -> [\62]  {recover, cons("INSERTION")}
+    %%Insertion rule for "[":                     
+                                        -> [\91]  {recover, cons("INSERTION")}
+    %%Insertion rule for "]":                     
+                                        -> [\93]  {recover, cons("INSERTION")}
+    %%Insertion rule for "{":                     
+                                        -> [\123] {recover, cons("INSERTION")}
+    %%Insertion rule for "}":                     
+                                        -> [\125] {recover, cons("INSERTION")}
+    %%Insertion rule for ",":                     
+                                        -> [\44]  {recover, cons("INSERTION")}
+
+  syntax
+    %% Kernel syntax insertion recovery rules   
+
+  )
+
+  (
+
+  sorts IdCon
+
+  lexical syntax
+    head:[A-Za-z] tail:[A-Za-z\-0-9]* -> IdCon {cons("default")}
+
+  lexical restrictions
+    IdCon -/- [A-Za-z\-0-9]
+
+  )
+
+module basic/StrCon
+exports
+  sorts StrCon StrChar
+
+  lexical syntax
+    "\\n"                        -> StrChar {cons("newline")}
+    "\\t"                        -> StrChar {cons("tab")}
+    "\\\""                       -> StrChar {cons("quote")}
+    "\\\\"                       -> StrChar {cons("backslash")}
+    "\\" a:[0-9] b:[0-9] c:[0-9] -> StrChar {cons("decimal")}
+    ~[\0-\31\n\t\"\\]            -> StrChar {cons("normal")}
+    [\"] chars:StrChar* [\"]     -> StrCon  {cons("default")}
+
+module languages/aterm/syntax/RealCon
+imports languages/aterm/syntax/IntCon
+
+hiddens
+  context-free start-symbols
+    RealCon
+
+exports
+  sorts OptExp RealCon
+
+  context-free syntax
+    "e" IntCon                                -> OptExp  {cons("present")}
+                                              -> OptExp  {cons("absent")}
+    base:IntCon "." decimal:NatCon exp:OptExp -> RealCon {cons("real-con")}
+
+module basic/NatCon
+exports
+  sorts NatCon
+
+  lexical syntax
+    [0-9]+ -> NatCon {cons("digits")}
+
+  lexical restrictions
+    NatCon -/- [0-9]
+
+module basic/Whitespace
+exports
+  lexical syntax
+    [\ \t\n\r] -> LAYOUT {cons("whitespace")}
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+
+module languages/aterm/syntax/IntCon
+imports basic/Whitespace basic/NatCon
+
+hiddens
+  context-free start-symbols
+    IntCon
+
+exports
+  sorts IntCon
+
+  context-free syntax
+    NatCon         -> IntCon {cons("natural")}
+    pos:"+" NatCon -> IntCon {cons("positive")}
+    neg:"-" NatCon -> IntCon {cons("negative")}
+
+module languages/aterm/syntax/ATerms
+imports languages/aterm/syntax/IntCon languages/aterm/syntax/RealCon
+        basic/StrCon basic/IdentifierCon
+
+exports
+  sorts AFun ATerm Annotation
+
+  context-free syntax
+    StrCon -> AFun {cons("quoted")}
+    IdCon  -> AFun {cons("unquoted")}
+
+  context-free syntax
+    IntCon                             -> ATerm {cons("int")}
+    RealCon                            -> ATerm {cons("real")}
+    fun:AFun                           -> ATerm {cons("fun")}
+    fun:AFun "(" args:{ATerm ","}* ")" -> ATerm {cons("appl")}
+    "<" type:ATerm ">"                 -> ATerm {cons("placeholder")}
+    "[" elems:{ATerm ","}* "]"         -> ATerm {cons("list")}
+    trm:ATerm Annotation               -> ATerm {cons("annotated")}
+
+  context-free syntax
+    "{" annos:{ATerm ","}+ "}" -> Annotation {cons("default")}
+
+hiddens
+  context-free start-symbols
+    ATerm
+
+module ATerm
+imports languages/aterm/syntax/ATerms
+
+hiddens
+  context-free start-symbols
+    ATerm
\ No newline at end of file

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.def
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.def	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.def	2009-12-30 15:06:38 UTC (rev 20458)
@@ -0,0 +1,124 @@
+definition
+module basic/IdentifierCon
+
+exports
+
+sorts IdCon
+
+lexical syntax
+
+head:[A-Za-z] tail:[A-Za-z\-0-9]* -> IdCon {cons("default")}
+
+lexical restrictions
+
+IdCon -/- [A-Za-z\-0-9]
+
+module basic/StrCon
+
+exports
+
+sorts StrCon StrChar
+
+lexical syntax
+    "\\n"                      -> StrChar {cons("newline")}
+    "\\t"                      -> StrChar {cons("tab")}
+    "\\\""                     -> StrChar {cons("quote")}
+    "\\\\"                     -> StrChar {cons("backslash")}
+    "\\" a:[0-9]b:[0-9]c:[0-9] -> StrChar {cons("decimal")}
+    ~[\0-\31\n\t\"\\]          -> StrChar {cons("normal")}
+
+    [\"] chars:StrChar* [\"]   -> StrCon  {cons("default")}
+
+module languages/aterm/syntax/RealCon
+
+imports languages/aterm/syntax/IntCon
+
+hiddens
+  context-free start-symbols 
+    RealCon
+
+exports
+  sorts OptExp RealCon
+
+  context-free syntax
+    "e" IntCon -> OptExp {cons("present")}
+               -> OptExp {cons("absent")}
+
+    base:IntCon "." decimal:NatCon exp:OptExp  -> RealCon {cons("real-con")}
+
+module basic/NatCon
+
+exports
+
+sorts NatCon
+
+lexical syntax
+  
+ [0-9]+ -> NatCon {cons("digits")}
+
+lexical restrictions
+
+ NatCon -/- [0-9]
+
+module basic/Whitespace
+
+exports
+  lexical syntax
+    [\ \t\n\r]	-> LAYOUT {cons("whitespace")}
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+
+module languages/aterm/syntax/IntCon
+
+imports basic/Whitespace
+	basic/NatCon
+
+hiddens
+  context-free start-symbols 
+    IntCon
+
+exports
+  sorts IntCon
+  context-free syntax
+    NatCon         -> IntCon {cons("natural")}
+    pos:"+" NatCon -> IntCon {cons("positive")}
+    neg:"-" NatCon -> IntCon {cons("negative")}
+
+module languages/aterm/syntax/ATerms
+
+imports languages/aterm/syntax/IntCon 
+        languages/aterm/syntax/RealCon
+	basic/StrCon
+	basic/IdentifierCon
+
+exports
+  sorts AFun ATerm Annotation
+
+  context-free syntax
+	StrCon 	-> AFun {cons("quoted")}
+	IdCon 	-> AFun {cons("unquoted")}
+
+  context-free syntax
+	IntCon 					-> ATerm {cons("int")}
+	RealCon					-> ATerm {cons("real")}
+	fun:AFun 				-> ATerm {cons("fun")}
+	fun:AFun "(" args:{ATerm ","}* ")" 	-> ATerm {cons("appl")} %% HACK: changed from + to * for Stratego/XT
+	"<" type:ATerm ">" 			-> ATerm {cons("placeholder")}
+	"[" elems:{ATerm ","}* "]" 		-> ATerm {cons("list")}
+	trm:ATerm Annotation 			-> ATerm {cons("annotated")}
+
+  context-free syntax
+	"{" annos:{ ATerm ","}+ "}" 		-> Annotation {cons("default")}
+
+hiddens
+  context-free start-symbols 
+    ATerm
+
+module ATerm
+imports
+  languages/aterm/syntax/ATerms
+
+hiddens
+  context-free start-symbols
+    ATerm

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.pp
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.pp	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.pp	2009-12-30 15:06:38 UTC (rev 20458)
@@ -0,0 +1,21 @@
+[
+   present              -- KW["e"] _1,
+   absent               -- ,
+   real-con             -- _1 KW["."] _2 _3,
+   natural              -- _1,
+   positive             -- KW["+"] _1,
+   negative             -- KW["-"] _1,
+   quoted               -- _1,
+   unquoted             -- _1,
+   int                  -- _1,
+   real                 -- _1,
+   fun                  -- _1,
+   appl                 -- _1 KW["("] _2 KW[")"],
+   appl.2:iter-star-sep -- _1 KW[","],
+   placeholder          -- KW["<"] _1 KW[">"],
+   list                 -- KW["["] _1 KW["]"],
+   list.1:iter-star-sep -- _1 KW[","],
+   annotated            -- _1 _2,
+   default              -- KW["{"] _1 KW["}"],
+   default.1:iter-sep   -- _1 KW[","]
+]

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.tbl
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/ATerm.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.def
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.def	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.def	2009-12-30 15:06:38 UTC (rev 20458)
@@ -0,0 +1,83 @@
+definition
+
+module Common
+exports
+  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
+
+  lexical syntax
+    [A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
+    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
+    ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
+    WATERTOKEN                     -> WATER               
+    WATERTOKENSEPARATOR            -> WATER               
+
+  lexical restrictions
+    WATERTOKEN -/- [A-Za-z0-9\_]
+
+  context-free syntax
+    WATER -> LAYOUT {cons("WATER")}
+
+  (
+
+  sorts WATEREOF
+
+  lexical restrictions
+    WATEREOF -/- ~[]
+
+  lexical syntax
+    %% Lexical insertion recovery rules                                
+    "\""                                           -> INSERTOPENQUOTE1 {recover}
+    INSERTOPENQUOTE1 StringChar* "\n"              -> STRING           {cons("INSERTEND")}
+    INSERTOPENQUOTE1 StringChar* WATEREOF          -> STRING           {cons("INSERTEND")}
+    "/*"                                           -> INSERTSTART1     {recover}
+    INSERTSTART1 ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT           {cons("INSERTEND")}
+                                                   -> "module"         {recover, cons("INSERTION")}
+    %%Insertion rule for "}":                                          
+                                                   -> [\125]           {recover, cons("INSERTION")}
+
+  syntax
+    %% Kernel syntax insertion recovery rules   
+
+  )
+
+  (
+
+  sorts ID INT STRING StringChar CommentChar
+
+  lexical syntax
+    [a-zA-Z] [a-zA-Z0-9\_]*            -> ID          
+    "-"? [0-9]+                        -> INT         
+    "\"" StringChar* "\""              -> STRING      
+    ~[\"\n]                            -> StringChar  
+    "\\\""                             -> StringChar  
+    [\ \t\n\r]                         -> LAYOUT      
+    [\*]                               -> CommentChar 
+    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT      
+    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT      
+                                       -> EOF         
+
+  lexical restrictions
+    CommentChar -/- [\/]
+    INT -/- [0-9]
+    ID -/- [a-zA-Z0-9\_]
+    EOF -/- ~[]
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/] . [\/]
+    LAYOUT? -/- [\/] . [\*]
+
+  )
+
+module Delme2-Permissive
+imports Common
+
+exports
+  context-free start-symbols
+    Start
+
+  context-free syntax
+    "module" ID Definition*       -> Start      {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID "<>" Type                  -> Property   {cons("Property")}
+    ID                            -> Type       {cons("Type")}
\ No newline at end of file

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.pp
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.pp	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.pp	2009-12-30 15:06:38 UTC (rev 20458)
@@ -0,0 +1,9 @@
+[
+   WATER              -- _1,
+   Module             -- KW["module"] _1 _2,
+   Module.2:iter-star -- _1,
+   Entity             -- KW["entity"] _1 KW["{"] _2 KW["}"],
+   Entity.2:iter-star -- _1,
+   Property           -- _1 KW["<>"] _2,
+   Type               -- _1
+]

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.tbl
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Delme2-Permissive.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Added: sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Java_Permissive.def
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Java_Permissive.def	                        (rev 0)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/Grammars/Java_Permissive.def	2009-12-30 15:06:38 UTC (rev 20458)
@@ -0,0 +1,1300 @@
+definition
+
+module languages/Java_Permissive/expressions/Priorities
+imports languages/Java_Permissive/lexical/Identifiers languages/Java_Permissive/expressions/Main
+
+exports
+  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
+
+  lexical syntax
+    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
+    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
+    ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
+    WATERTOKEN                     -> WATER               
+    WATERTOKENSEPARATOR            -> WATER               
+
+  lexical restrictions
+    WATERTOKEN -/- [A-Za-z0-9\_]
+
+  context-free syntax
+    WATER -> LAYOUT {cons("WATER")}
+
+  (
+
+  sorts WATEREOF
+
+  lexical restrictions
+    WATEREOF -/- ~[]
+
+  lexical syntax
+    %% Lexical insertion recovery rules                 
+                                        -> "class"      {recover, cons("INSERTION")}
+    %%Insertion rule for ":":                           
+                                        -> [\58]        {recover, cons("INSERTION")}
+    %%Insertion rule for ")":                           
+                                        -> [\41]        {recover, cons("INSERTION")}
+    %%Insertion rule for "]":                           
+                                        -> [\93]        {recover, cons("INSERTION")}
+    %%Insertion rule for "}":                           
+                                        -> [\125]       {recover, cons("INSERTION")}
+    %%Insertion rule for ";":                           
+                                        -> [\59]        {recover, cons("INSERTION")}
+    %%Insertion rule for ".":                           
+                                        -> [\46]        {recover, cons("INSERTION")}
+    %%Insertion rule for "&":                           
+                                        -> [\38]        {recover, cons("INSERTION")}
+    %%Insertion rule for ">":                           
+                                        -> [\62]        {recover, cons("INSERTION")}
+    %%Insertion rule for ",":                           
+                                        -> [\44]        {recover, cons("INSERTION")}
+    "/*"                                -> INSERTSTART1 {recover}
+    INSERTSTART1 CommentPart* WATEREOF  -> Comment      {cons("INSERTEND")}
+    "/**"                               -> INSERTSTART0 {recover}
+    INSERTSTART0 CommentPart* WATEREOF  -> Comment      {cons("INSERTEND")}
+
+  syntax
+    %% Kernel syntax insertion recovery rules                     
+    "\""                                      -> INSERTOPENQUOTE1 {recover}
+    INSERTOPENQUOTE1 StringPart* "\n"         -> StringLiteral    {cons("INSERTEND")}
+    INSERTOPENQUOTE1 StringPart* WATEREOF     -> StringLiteral    {cons("INSERTEND")}
+    "'"                                       -> INSERTOPENQUOTE0 {recover}
+    INSERTOPENQUOTE0 CharContent "\n"         -> CharLiteral      {cons("INSERTEND")}
+    INSERTOPENQUOTE0 CharContent WATEREOF     -> CharLiteral      {cons("INSERTEND")}
+
+  )
+
+  (
+
+  context-free priorities
+    Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr
+     >
+    {right:
+      Expr "++" -> Expr 
+      Expr "--" -> Expr 
+    }
+
+  context-free priorities
+    {right:
+      Expr "++" -> Expr 
+      Expr "--" -> Expr 
+    } >
+    { "(" PrimType ")" Expr -> Expr 
+      "(" RefType ")" Expr -> Expr  }
+
+  context-free priorities
+    "(" PrimType ")" Expr -> Expr  >
+    {left:
+      Expr "*" Expr -> Expr 
+      Expr "/" Expr -> Expr 
+      Expr "%" Expr -> Expr 
+    }
+
+  context-free priorities
+    "(" RefType ")" Expr -> Expr  >
+    { "++" Expr -> Expr 
+      "--" Expr -> Expr 
+      "+" Expr -> Expr 
+      "-" Expr -> Expr  }
+
+  context-free priorities
+    { Expr ArraySubscript -> ArrayAccess 
+      Expr "." Id -> FieldAccess 
+      Expr "." TypeArgs? Id -> MethodSpec  } >
+    {right:
+      Expr "++" -> Expr 
+      Expr "--" -> Expr 
+    } >
+    { "++" Expr -> Expr 
+      "--" Expr -> Expr 
+      "+" Expr -> Expr 
+      "-" Expr -> Expr 
+      "~" Expr -> Expr 
+      "!" Expr -> Expr  } >
+    {left:
+      Expr "*" Expr -> Expr 
+      Expr "/" Expr -> Expr 
+      Expr "%" Expr -> Expr 
+    } >
+    {left:
+      Expr "+" Expr -> Expr 
+      Expr "-" Expr -> Expr 
+    } >
+    {left:
+      Expr "<<" Expr -> Expr 
+      Expr ">>" Expr -> Expr 
+      Expr ">>>" Expr -> Expr 
+    } >
+    {left:
+      Expr "instanceof" RefType -> Expr 
+      Expr "<" Expr -> Expr 
+      Expr ">" Expr -> Expr 
+      Expr "<=" Expr -> Expr 
+      Expr ">=" Expr -> Expr 
+    } >
+    {left:
+      Expr "==" Expr -> Expr 
+      Expr "!=" Expr -> Expr 
+    } >
+    Expr "&" Expr -> Expr  >
+    Expr "^" Expr -> Expr  >
+    Expr "|" Expr -> Expr  >
+    Expr "&&" Expr -> Expr  >
+    Expr "||" Expr -> Expr  >
+    Expr CondMid Expr -> Expr  >
+    {right:
+      LHS "=" Expr -> Expr 
+      LHS "*=" Expr -> Expr 
+      LHS "/=" Expr -> Expr 
+      LHS "%=" Expr -> Expr 
+      LHS "+=" Expr -> Expr 
+      LHS "-=" Expr -> Expr 
+      LHS "<<=" Expr -> Expr 
+      LHS ">>=" Expr -> Expr 
+      LHS ">>>=" Expr -> Expr 
+      LHS "&=" Expr -> Expr 
+      LHS "^=" Expr -> Expr 
+      LHS "|=" Expr -> Expr 
+    }
+
+  )
+
+module languages/Java_Permissive/expressions/Restrictions
+exports
+  lexical restrictions
+    "+" -/- [\+]
+    "-" -/- [\-]
+    "/" -/- [\/]
+
+module languages/Java_Permissive/expressions/AssignmentOperators
+imports languages/Java_Permissive/expressions/Main
+
+exports
+  sorts LHS
+
+  context-free syntax
+    LHS "=" Expr    -> Expr {cons("Assign")}
+    LHS "*=" Expr   -> Expr {cons("AssignMul")}
+    LHS "/=" Expr   -> Expr {cons("AssignDiv")}
+    LHS "%=" Expr   -> Expr {cons("AssignRemain")}
+    LHS "+=" Expr   -> Expr {cons("AssignPlus")}
+    LHS "-=" Expr   -> Expr {cons("AssignMinus")}
+    LHS "<<=" Expr  -> Expr {cons("AssignLeftShift")}
+    LHS ">>=" Expr  -> Expr {cons("AssignRightShift")}
+    LHS ">>>=" Expr -> Expr {cons("AssignURightShift")}
+    LHS "&=" Expr   -> Expr {cons("AssignAnd")}
+    LHS "^=" Expr   -> Expr {cons("AssignExcOr")}
+    LHS "|=" Expr   -> Expr {cons("AssignOr")}
+    ExprName        -> LHS  
+    FieldAccess     -> LHS  
+    ArrayAccess     -> LHS  
+
+module languages/Java_Permissive/expressions/BinaryOperators
+imports languages/Java_Permissive/expressions/Main languages/Java_Permissive/types/Main
+
+exports
+  sorts CondMid
+
+  context-free syntax
+    Expr "instanceof" RefType -> Expr    {cons("InstanceOf")}
+    Expr "*" Expr             -> Expr    {left, cons("Mul")}
+    Expr "/" Expr             -> Expr    {left, cons("Div")}
+    Expr "%" Expr             -> Expr    {left, cons("Remain")}
+    Expr "+" Expr             -> Expr    {left, cons("Plus")}
+    Expr "-" Expr             -> Expr    {left, cons("Minus")}
+    Expr "<<" Expr            -> Expr    {left, cons("LeftShift")}
+    Expr ">>" Expr            -> Expr    {left, cons("RightShift")}
+    Expr ">>>" Expr           -> Expr    {left, cons("URightShift")}
+    Expr "<" Expr             -> Expr    {left, cons("Lt")}
+    Expr ">" Expr             -> Expr    {left, cons("Gt")}
+    Expr "<=" Expr            -> Expr    {left, cons("LtEq")}
+    Expr ">=" Expr            -> Expr    {left, cons("GtEq")}
+    Expr "==" Expr            -> Expr    {left, cons("Eq")}
+    Expr "!=" Expr            -> Expr    {left, cons("NotEq")}
+    Expr "&&" Expr            -> Expr    {left, cons("LazyAnd")}
+    Expr "||" Expr            -> Expr    {left, cons("LazyOr")}
+    Expr "&" Expr             -> Expr    {left, cons("And")}
+    Expr "^" Expr             -> Expr    {left, cons("ExcOr")}
+    Expr "|" Expr             -> Expr    {left, cons("Or")}
+    Expr CondMid Expr         -> Expr    {right, cons("Cond")}
+    "?" Expr ":"              -> CondMid {bracket}
+
+module languages/Java_Permissive/expressions/UnaryOperators
+imports languages/Java_Permissive/expressions/Main
+
+exports
+  context-free syntax
+    "+" Expr              -> Expr {cons("Plus")}
+    "-" Expr              -> Expr {cons("Minus")}
+    "++" Expr             -> Expr {cons("PreIncr")}
+    "--" Expr             -> Expr {cons("PreDecr")}
+    "~" Expr              -> Expr {cons("Complement")}
+    "!" Expr              -> Expr {cons("Not")}
+    "(" PrimType ")" Expr -> Expr {cons("CastPrim")}
+    "(" RefType ")" Expr  -> Expr {cons("CastRef")}
+
+module languages/Java_Permissive/expressions/Postfix
+imports languages/Java_Permissive/expressions/Main
+
+exports
+  context-free syntax
+    ExprName  -> Expr 
+    Expr "++" -> Expr {cons("PostIncr")}
+    Expr "--" -> Expr {cons("PostDecr")}
+
+module languages/Java_Permissive/expressions/MethodInvocation
+imports languages/Java_Permissive/expressions/Main
+
+exports
+  sorts MethodSpec
+
+  context-free syntax
+    MethodSpec "(" {Expr ","}* ")"        -> Expr       {cons("Invoke")}
+    MethodName                            -> MethodSpec {cons("Method")}
+    Expr "." TypeArgs? Id                 -> MethodSpec {cons("Method")}
+    "super" "." TypeArgs? Id              -> MethodSpec {cons("SuperMethod")}
+    TypeName "." "super" "." TypeArgs? Id -> MethodSpec {cons("QSuperMethod")}
+    AmbName "." TypeArgs Id               -> MethodSpec {cons("GenericMethod")}
+
+  context-free priorities
+    Expr "." TypeArgs? Id -> MethodSpec  >
+    ExprName -> Expr 
+
+module languages/Java_Permissive/expressions/ArrayAccess
+imports languages/Java_Permissive/expressions/Main
+
+exports
+  sorts ArrayAccess ArraySubscript
+
+  context-free syntax
+    ArrayAccess                      -> Expr           
+    Expr ArraySubscript              -> ArrayAccess    {cons("ArrayAccess")}
+    "[" Expr "]"                     -> ArraySubscript {bracket}
+    ArrayCreationExpr ArraySubscript -> ArrayAccess    {reject}
+
+module languages/Java_Permissive/expressions/FieldAccess
+imports languages/Java_Permissive/expressions/Main
+
+exports
+  sorts FieldAccess
+
+  context-free syntax
+    FieldAccess -> Expr 
+
+  context-free syntax
+    Expr "." Id                 -> FieldAccess {cons("Field")}
+    ExprName "." Id             -> FieldAccess {reject}
+    "super" "." Id              -> FieldAccess {cons("SuperField")}
+    TypeName "." "super" "." Id -> FieldAccess {cons("QSuperField")}
+
+module languages/Java_Permissive/expressions/ArrayCreation
+imports languages/Java_Permissive/expressions/Main
+
+exports
+  sorts ArrayCreationExpr ArrayBaseType Dim DimExpr
+
+  context-free syntax
+    ArrayCreationExpr                  -> Expr              
+    "new" ArrayBaseType DimExpr+ Dim*  -> ArrayCreationExpr {cons("NewArray")}
+    "new" ArrayBaseType Dim+ ArrayInit -> ArrayCreationExpr {cons("NewArray")}
+    PrimType                           -> ArrayBaseType     
+    TypeName                           -> ArrayBaseType     
+    TypeName "<" "?" ">"               -> ArrayBaseType     {cons("UnboundWld")}
+    "[" Expr "]"                       -> DimExpr           {cons("Dim")}
+    "[" "]"                            -> Dim               {cons("Dim")}
+
+module languages/Java_Permissive/expressions/ClassInstanceCreation
+imports languages/Java_Permissive/expressions/Main
+        languages/Java_Permissive/classes/ClassDeclarations
+
+exports
+  context-free syntax
+    "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody?  -> Expr {cons("NewInstance")}
+    Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("QNewInstance")}
+
+module languages/Java_Permissive/expressions/Primary
+imports languages/Java_Permissive/lexical/literals/Main languages/Java_Permissive/names/Main
+        languages/Java_Permissive/expressions/Main
+
+exports
+  sorts Literal
+
+  context-free syntax
+    Literal       -> Expr    {cons("Lit")}
+    IntLiteral    -> Literal 
+    FloatLiteral  -> Literal 
+    BoolLiteral   -> Literal 
+    CharLiteral   -> Literal 
+    StringLiteral -> Literal 
+    NullLiteral   -> Literal 
+
+  sorts ClassLiteral
+
+  context-free syntax
+    ClassLiteral       -> Literal      
+    Type "." "class"   -> ClassLiteral {cons("Class")}
+    "void" "." "class" -> ClassLiteral {cons("VoidClass")}
+
+  context-free syntax
+    "this"              -> Expr {cons("This")}
+    TypeName "." "this" -> Expr {cons("QThis")}
+
+  context-free syntax
+    "(" Expr ")" -> Expr {bracket}
+
+module languages/Java_Permissive/expressions/Main
+imports languages/Java_Permissive/expressions/Primary
+        languages/Java_Permissive/expressions/ClassInstanceCreation
+        languages/Java_Permissive/expressions/ArrayCreation
+        languages/Java_Permissive/expressions/FieldAccess
+        languages/Java_Permissive/expressions/ArrayAccess
+        languages/Java_Permissive/expressions/MethodInvocation
+        languages/Java_Permissive/expressions/Postfix
+        languages/Java_Permissive/expressions/UnaryOperators
+        languages/Java_Permissive/expressions/BinaryOperators
+        languages/Java_Permissive/expressions/AssignmentOperators
+        languages/Java_Permissive/expressions/Restrictions
+        languages/Java_Permissive/expressions/Priorities
+
+exports
+  sorts Expr
+
+module languages/Java_Permissive/statements/Main
+imports languages/Java_Permissive/statements/Blocks
+        languages/Java_Permissive/statements/LocalVariableDeclarations
+        languages/Java_Permissive/statements/Statements
+
+module languages/Java_Permissive/arrays/Main
+imports languages/Java_Permissive/arrays/ArrayInitializers
+
+module languages/Java_Permissive/interfaces/Main
+imports languages/Java_Permissive/interfaces/InterfaceDeclarations
+        languages/Java_Permissive/interfaces/AbstractMethodDeclarations
+        languages/Java_Permissive/interfaces/AnnotationTypes
+        languages/Java_Permissive/interfaces/Annotations
+
+module languages/Java_Permissive/classes/Main
+imports languages/Java_Permissive/classes/ClassDeclarations
+        languages/Java_Permissive/classes/EnumDeclarations
+
+module languages/Java_Permissive/packages/PackageDeclarations
+imports languages/Java_Permissive/names/Main languages/Java_Permissive/interfaces/Annotations
+
+exports
+  sorts PackageDec
+
+  context-free syntax
+    Anno* "package" PackageName ";" -> PackageDec {cons("PackageDec")}
+
+module languages/Java_Permissive/packages/ImportDeclarations
+imports languages/Java_Permissive/lexical/Identifiers languages/Java_Permissive/names/Main
+
+exports
+  sorts ImportDec
+
+  context-free syntax
+    "import" TypeName ";"                  -> ImportDec {cons("TypeImportDec")}
+    "import" PackageName "." "*" ";"       -> ImportDec {cons("TypeImportOnDemandDec")}
+    "import" "static" TypeName "." Id ";"  -> ImportDec {cons("StaticImportDec")}
+    "import" "static" TypeName "." "*" ";" -> ImportDec {cons("StaticImportOnDemandDec")}
+
+module languages/Java_Permissive/interfaces/AnnotationTypes
+imports languages/Java_Permissive/lexical/Identifiers
+        languages/Java_Permissive/classes/ClassDeclarations
+        languages/Java_Permissive/classes/EnumDeclarations
+        languages/Java_Permissive/interfaces/InterfaceDeclarations
+        languages/Java_Permissive/interfaces/AbstractMethodDeclarations
+        languages/Java_Permissive/interfaces/ConstantDeclarations
+        languages/Java_Permissive/interfaces/Annotations
+
+exports
+  sorts AnnoDec AnnoDecHead
+
+  context-free syntax
+    AnnoDecHead "{" AnnoElemDec* "}"            -> AnnoDec     {cons("AnnoDec")}
+    ( Anno | InterfaceMod )* "@" "interface" Id -> AnnoDecHead {cons("AnnoDecHead")}
+
+  sorts AnnoElemDec DefaultVal
+
+  context-free syntax
+    AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" -> AnnoElemDec {cons("AnnoMethodDec")}
+    ConstantDec                                        -> AnnoElemDec 
+    ClassDec                                           -> AnnoElemDec 
+    InterfaceDec                                       -> AnnoElemDec 
+    EnumDec                                            -> AnnoElemDec 
+    AnnoDec                                            -> AnnoElemDec 
+    ";"                                                -> AnnoElemDec {cons("Semicolon")}
+    "default" ElemVal                                  -> DefaultVal  {cons("DefaultVal")}
+
+module languages/Java_Permissive/interfaces/AbstractMethodDeclarations
+imports languages/Java_Permissive/lexical/Modifiers languages/Java_Permissive/names/Main
+        languages/Java_Permissive/types/Main languages/Java_Permissive/classes/MethodDeclarations
+
+exports
+  sorts AbstractMethodDec AbstractMethodMod
+
+  context-free syntax
+    ( Anno | AbstractMethodMod )* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? ";"      -> AbstractMethodDec {cons("AbstractMethodDec")}
+    ( Anno | AbstractMethodMod )* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" -> AbstractMethodDec {cons("DeprAbstractMethodDec")}
+    Public                                                                                              -> AbstractMethodMod 
+    Abstract                                                                                            -> AbstractMethodMod 
+
+module languages/Java_Permissive/interfaces/ConstantDeclarations
+imports languages/Java_Permissive/lexical/Modifiers languages/Java_Permissive/types/Main
+        languages/Java_Permissive/classes/MethodDeclarations
+        languages/Java_Permissive/interfaces/Annotations
+
+exports
+  sorts ConstantDec ConstantMod
+
+  context-free syntax
+    ( Anno | ConstantMod )* Type {VarDec ","}+ ";" -> ConstantDec {cons("ConstantDec")}
+    Public                                         -> ConstantMod 
+    Static                                         -> ConstantMod 
+    Final                                          -> ConstantMod 
+
+module languages/Java_Permissive/interfaces/InterfaceDeclarations
+imports languages/Java_Permissive/lexical/Identifiers languages/Java_Permissive/lexical/Modifiers
+        languages/Java_Permissive/names/Main languages/Java_Permissive/types/Main
+        languages/Java_Permissive/classes/ClassDeclarations
+        languages/Java_Permissive/classes/MethodDeclarations
+        languages/Java_Permissive/interfaces/ConstantDeclarations
+        languages/Java_Permissive/interfaces/AbstractMethodDeclarations
+        languages/Java_Permissive/interfaces/AnnotationTypes
+        languages/Java_Permissive/interfaces/Annotations
+
+exports
+  sorts InterfaceDec InterfaceDecHead ExtendsInterfaces InterfaceMemberDec
+        InterfaceMod
+
+  context-free syntax
+    AnnoDec                                                                -> InterfaceDec      
+    InterfaceDecHead "{" InterfaceMemberDec* "}"                           -> InterfaceDec      {cons("InterfaceDec")}
+    ( Anno | InterfaceMod )* "interface" Id TypeParams? ExtendsInterfaces? -> InterfaceDecHead  {cons("InterfaceDecHead")}
+    "extends" {InterfaceType ","}+                                         -> ExtendsInterfaces {cons("ExtendsInterfaces")}
+
+  context-free syntax
+    ConstantDec       -> InterfaceMemberDec 
+    AbstractMethodDec -> InterfaceMemberDec 
+    ClassDec          -> InterfaceMemberDec 
+    InterfaceDec      -> InterfaceMemberDec 
+    ";"               -> InterfaceMemberDec {cons("Semicolon")}
+
+  context-free syntax
+    Public    -> InterfaceMod 
+    Protected -> InterfaceMod 
+    Private   -> InterfaceMod 
+    Abstract  -> InterfaceMod 
+    Static    -> InterfaceMod 
+    StrictFP  -> InterfaceMod 
+
+module languages/Java_Permissive/classes/EnumDeclarations
+imports languages/Java_Permissive/lexical/Identifiers
+        languages/Java_Permissive/classes/ClassDeclarations
+
+exports
+  sorts EnumDec EnumDecHead EnumBody EnumConst EnumConstArgs EnumBodyDecs
+
+  context-free syntax
+    EnumDecHead EnumBody                       -> EnumDec       {cons("EnumDec")}
+    ( Anno | ClassMod )* "enum" Id Interfaces? -> EnumDecHead   {cons("EnumDecHead")}
+    "{" {EnumConst ","}* EnumBodyDecs? "}"     -> EnumBody      {cons("EnumBody")}
+    "{" {EnumConst ","}* "," EnumBodyDecs? "}" -> EnumBody      {cons("EnumBody")}
+    Id EnumConstArgs? ClassBody?               -> EnumConst     {cons("EnumConst")}
+    "(" {Expr ","}* ")"                        -> EnumConstArgs {bracket}
+    ";" ClassBodyDec*                          -> EnumBodyDecs  {cons("EnumBodyDecs")}
+
+module languages/Java_Permissive/classes/ConstructorDeclarations
+imports languages/Java_Permissive/lexical/Identifiers languages/Java_Permissive/lexical/Modifiers
+        languages/Java_Permissive/interfaces/Annotations languages/Java_Permissive/statements/Main
+        languages/Java_Permissive/expressions/Main
+
+exports
+  sorts ConstrDec ConstrBody ConstrHead ConstrInv
+
+  context-free syntax
+    ConstrHead ConstrBody                                                   -> ConstrDec  {cons("ConstrDec")}
+    ( Anno | ConstrMod )* TypeParams? Id "(" {FormalParam ","}* ")" Throws? -> ConstrHead {cons("ConstrDecHead")}
+    "{" ConstrInv? BlockStm* "}"                                            -> ConstrBody {cons("ConstrBody")}
+    TypeArgs? "this" "(" {Expr ","}* ")" ";"                                -> ConstrInv  {cons("AltConstrInv")}
+    TypeArgs? "super" "(" {Expr ","}* ")" ";"                               -> ConstrInv  {cons("SuperConstrInv")}
+    Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";"                      -> ConstrInv  {cons("QSuperConstrInv")}
+
+  sorts ConstrMod
+
+  context-free syntax
+    Public    -> ConstrMod 
+    Protected -> ConstrMod 
+    Private   -> ConstrMod 
+
+module languages/Java_Permissive/classes/StaticInitializers
+imports languages/Java_Permissive/statements/Blocks
+
+exports
+  sorts StaticInit
+
+  context-free syntax
+    "static" Block -> StaticInit {cons("StaticInit")}
+
+module languages/Java_Permissive/classes/InstanceInitializers
+imports languages/Java_Permissive/statements/Blocks
+
+exports
+  sorts InstanceInit
+
+  context-free syntax

(13784 diff lines omitted)


From m.dejonge at tudelft.nl  Wed Dec 30 16:07:18 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 30 Dec 2009 15:07:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20459 - MaartjeDeJonge
	- in sglr-recovery/trunk/EvaluationRecoverAlgorithms/src:
	fileprocessing testrun
Message-ID: <200912301507.nBUF7IKU029721@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-30 15:07:18 +0000 (Wed, 30 Dec 2009)
New Revision: 20459

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20459&view=rev

Removed:
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Integrator.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/testIntegration.java

Log:
remove unused class

Changes:

Deleted: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Integrator.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Integrator.java	2009-12-30 15:06:38 UTC (rev 20458)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/Integrator.java	2009-12-30 15:07:18 UTC (rev 20459)
@@ -1,69 +0,0 @@
-package fileprocessing;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-
-import org.spoofax.jsglr.InvalidParseTableException;
-
-public class Integrator {
-	
-	private FileProcessing myFileProcessor;
-	private FilePaths myPaths;
-	
-	public Integrator(FilePaths paths){
-		myPaths =paths;
-		myFileProcessor=new FileProcessing();
-	}
-	
-	public void setGrammar(String extension) throws FileNotFoundException, IOException, InvalidParseTableException{
-		myFileProcessor.setParsetable(myPaths.getParsetable(extension));
-		myFileProcessor.setPrettyPrintTable(myPaths.getPrettyPrintTable(extension));
-	}
-	
-	public void ProcessDecoratedFile(String path) throws Exception{
-		//Paths	
-		String fileName=IOHelper.flattenPath(IOHelper.removeRootDir(path));		
-		String outputPath = addRootDir(fileName, "OutputPreprocessor");
-		String pathToErroneous=renameFile(outputPath, ".err", false);
-		String pathToIntendedFG=renameFile(outputPath, ".fg.intended", false);
-		
-		
-		String pathToOriginal = addRootDir(renameFile(fileName, ".original", false), "Output");
-		IOHelper.copyfile(path, pathToOriginal);
-		
-		//PreprocessFile	
-		PreProcessor myPreprocessor=new PreProcessor();
-		myPreprocessor.createCleanedErroneousFile(path, pathToErroneous);
-		myPreprocessor.createIntendedRecovery(path, pathToIntendedFG);
-		//myPreprocessor.createIntendedRegionSkip(path, pathToIntendedSkip);
-		
-		//Results Fine Grained
-		String pathToRecovery_FG=addRootDir(renameFile(fileName, ".fg", false), "Output");
-		String pathToPT_FG=addRootDir(addRootDir(renameFile(fileName, ".fg.pt", true), "ParseResults"), "Output");
-		String pathToAST_FG=addRootDir(addRootDir(renameFile(fileName, ".fg.ast", true), "ParseResults"), "Output");
-		myFileProcessor.generateFineGrainedResult(pathToErroneous, pathToRecovery_FG, pathToAST_FG, pathToPT_FG);
-		
-		//Results Skip
-		String pathToRecovery_Skip=addRootDir(renameFile(fileName, ".skip", false), "Output");
-		String pathToPT_Skip=addRootDir(addRootDir(renameFile(fileName, ".skip.pt", true), "ParseResults"), "Output");
-		//String pathToAST_Skip=addRootDir(addRootDir(renameFile(fileName, ".skip.ast", true), "ParseResults"), "Output");
-		myFileProcessor.generateSkipResult_Characters(path, pathToRecovery_Skip, pathToPT_Skip);
-
-		//Results intended
-		String pathToResult_Intended=addRootDir(IOHelper.removeRootDir(pathToIntendedFG),"Output");
-		String pathToAST_Intended=addRootDir(addRootDir(renameFile(fileName, ".intended.fg.pt", true), "ParseResults"), "Output");
-		String pathToPT_Intended=addRootDir(addRootDir(renameFile(fileName, ".intended.fg.ast", true), "ParseResults"), "Output");
-		myFileProcessor.generateNoRecoveryResult(pathToIntendedFG, pathToResult_Intended, pathToAST_Intended, pathToPT_Intended);
-		
-		RegionEvaluator regionEvaluator=new RegionEvaluator();
-		//System.out.println(regionEvaluator.compareRegions(pathToOriginal, pathToRecovery_Skip));
-	}
-
-	public static String addRootDir(String filePath, String dir) {
-		return IOHelper.addRootDir(filePath, dir);
-	}
-	
-	public static String renameFile(String fileName, String mark, boolean asExt) {
-		return IOHelper.renameFile(fileName, mark, asExt);
-	}
-}

Deleted: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/testIntegration.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/testIntegration.java	2009-12-30 15:06:38 UTC (rev 20458)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/testIntegration.java	2009-12-30 15:07:18 UTC (rev 20459)
@@ -1,42 +0,0 @@
-package testrun;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-
-import org.junit.Test;
-import org.spoofax.jsglr.InvalidParseTableException;
-
-import fileprocessing.InfraStructure;
-import fileprocessing.Integrator;
-
-
-public class testIntegration {
-	
-	Integrator myIntegrator;
-	
-	public testIntegration() throws FileNotFoundException, IOException, InvalidParseTableException{
-		myIntegrator=new Integrator(InfraStructure.getFilePaths());
-		myIntegrator.setGrammar("java");
-	}
-	
-	@Test
-	public void testPreprocessing_Java() throws Exception{
-		String fileName="doubleClosed_If.java";
-		myIntegrator.ProcessDecoratedFile("Input"+File.separator+"Common"+File.separator+fileName);
-	}
-	
-	@Test
-	public void testPreprocessing_Java2() throws Exception{
-		String fileName="twoSeparatedErrors.java";
-		myIntegrator.ProcessDecoratedFile("Input"+File.separator+"Common"+File.separator+fileName);
-	}
-	
-	@Test
-	public void testPreprocessing_SJ() throws Exception{
-		myIntegrator.setGrammar("sj");
-		String fileName="test-java-traits.break3.sj";
-		myIntegrator.ProcessDecoratedFile("Input"+File.separator+"Dryad"+File.separator+fileName);
-	}
-
-}



From m.dejonge at tudelft.nl  Thu Dec 31 10:44:37 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 31 Dec 2009 09:44:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20460 - MaartjeDeJonge
	- in sglr-recovery/trunk/EvaluationRecoverAlgorithms/src:
	fileprocessing testrun
Message-ID: <200912310944.nBV9ibJS011369@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-31 09:44:36 +0000 (Thu, 31 Dec 2009)
New Revision: 20460

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20460&view=rev

Modified:
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/EvaluationOutput.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluation.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestFineGrainedEvaluation.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/javaTests.java

Log:
evauate fine grained:
1. parsing failed
2. pretty printed files
3. ast files (if pp fails)

Changes:

Modified: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/EvaluationOutput.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/EvaluationOutput.java	2009-12-30 15:07:18 UTC (rev 20459)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/EvaluationOutput.java	2009-12-31 09:44:36 UTC (rev 20460)
@@ -55,7 +55,7 @@
 		}
 	}
 	
-	private void saveFGFiles(FG_Evaluation eval) {
+	private void saveFGFiles(FG_Evaluation eval) throws IOException {		
 		ArrayList<Testcase> failures=testrun.getTotalStats().getFGResultList(eval);
 		String dirName=pathToTestrunDir();
 		dirName=dirName+File.separator+"FineGrained";
@@ -64,10 +64,32 @@
 		dirName=dirName+File.separator+eval.toString();
 		dir = new File(dirName);
 		dir.mkdir();
+		File details=new File(dirName + File.separator+"details.txt");
+		details.createNewFile();
+		PrintStream fileOut = getPrintStream(details.getPath());		
 		for (Testcase tc : failures) {
 			IOHelper.copyfile(tc.getFilePath(), IOHelper.addRootDir(tc.getFlattenedFileName(), dirName));
 			IOHelper.copyfile(tc.getFilePath_FG_Result(), IOHelper.addRootDir(IOHelper.flattenPath(IOHelper.removeRootDir(tc.getFilePath_FG_Result())), dirName));
+			int i=1;
+			for (Diff diff : tc.getFineGrainedEval().getDiffRegions()) {
+				writeOutputLine(tc.getFilePath()+" (Actual)"+"["+i+"]", fileOut);
+				writeOutputLine(diff.getDiffString_Actual(), fileOut);
+				writeOutputLine(fileOut);
+				writeOutputLine(tc.getFilePath()+" (Intended)"+"["+i+"]", fileOut);
+				writeOutputLine(diff.getDiffString_Intended(), fileOut);
+				i++;
+			}
+			for (Diff diff : tc.getFineGrainedEval().getDiffRegionsAST()) {
+				writeOutputLine(tc.getFilePath()+" (Actual)"+"["+i+"]", fileOut);
+				writeOutputLine(diff.getDiffString_Actual(), fileOut);
+				writeOutputLine(fileOut);
+				writeOutputLine(tc.getFilePath()+" (Intended)"+"["+i+"]", fileOut);
+				writeOutputLine(diff.getDiffString_Intended(), fileOut);
+				i++;
+			}
+			writeOutputLine("*********************************", fileOut);
 		}
+		fileOut.close();
 	}
 
 	public void writeResultsToFile() throws IOException{

Modified: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluation.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluation.java	2009-12-30 15:07:18 UTC (rev 20459)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluation.java	2009-12-31 09:44:36 UTC (rev 20460)
@@ -9,7 +9,8 @@
 		DIFF_2_5,
 		DIFF_5_PLUS,
 		FG_FAILED,
-		ERROR_IN_INTENDED
+		ERROR_IN_INTENDED,
+		AST_DIFF
 	}
 	
 	private ArrayList<Diff> diffRegions;
@@ -28,13 +29,19 @@
 		for (Diff diffRegion : astDiffs) {
 			diffRegionsAST.add(diffRegion);
 			int maxSize = diffRegion.getMaxLines();
-			evaluations.add(getEvaluation(maxSize));
+			FG_Evaluation eval=getEvaluation(maxSize);
+			if(eval==FG_Evaluation.DIFF_0)
+				evaluations.add(eval);
+			else
+				evaluations.add(FG_Evaluation.AST_DIFF);
 		}
 	}
 	
 	public void addDiffRegions(ArrayList<Diff> astDiffs) {
 		for (Diff diffRegion : astDiffs) {
-			diffRegions.add(diffRegion);			
+			diffRegions.add(diffRegion);
+			int maxSize = diffRegion.getMaxLines();
+			evaluations.add(getEvaluation(maxSize));
 		}
 	}
 

Modified: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java	2009-12-30 15:07:18 UTC (rev 20459)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java	2009-12-31 09:44:36 UTC (rev 20460)
@@ -9,6 +9,10 @@
 	
 	public FineGrainedEvaluation compareResultFiles(String intended_AST, String intended, String fg_AST, String fg) throws IOException{
 		FineGrainedEvaluation result = new FineGrainedEvaluation();
+		if (new File(intended).exists() && new File(fg).exists()) {
+			result.addDiffRegions(compareResult(intended, fg));
+			return result;
+		}
 		if(!new File(fg_AST).exists()){
 			result.addEvaluation(FG_Evaluation.FG_FAILED);
 			return result;
@@ -16,16 +20,12 @@
 		if(!new File(intended_AST).exists()){
 			result.addEvaluation(FG_Evaluation.ERROR_IN_INTENDED);
 			return result;
-		}		
-		
+		}
 		result.addDiffRegionsAST(compareResult(intended_AST, fg_AST));
-		if (new File(intended).exists() && new File(fg).exists()) {
-			result.addDiffRegions(compareResult(intended, fg));
-		}
 		return result;
 	}
 	
-	private ArrayList<Diff> compareResult(String filePath_Intended, String filePath_FG) throws IOException{
+	public ArrayList<Diff> compareResult(String filePath_Intended, String filePath_FG) throws IOException{
 		ArrayList<Diff> resultDiffs=new ArrayList<Diff>();
 		String intended=IOHelper.readFromFile(filePath_Intended);
 		String recoveryResult=IOHelper.readFromFile(filePath_FG);
@@ -66,7 +66,7 @@
 				actualFragmentLines.add(fgLines[i]);
 			}
 			resultDiffs.add(new Diff(intendedFragmentLines, actualFragmentLines));
-			if(actualFragmentLines.size()>0 && intendedFragmentLines.size()>0 && (actualFragmentLines.size()>2 || intendedFragmentLines.size()>2)){
+			if(actualFragmentLines.size()>0 && intendedFragmentLines.size()>0 && (actualFragmentLines.size()>5 || intendedFragmentLines.size()>5)){
 				ArrayList<String> commonMid=findCommonMid(actualFragmentLines, intendedFragmentLines);
 				ArrayList<Diff> splitResult=findFirstAndLastErroneousPart(commonMid, actualFragmentLines, intendedFragmentLines);
 				if(splitResult.size()==2)

Modified: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestFineGrainedEvaluation.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestFineGrainedEvaluation.java	2009-12-30 15:07:18 UTC (rev 20459)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestFineGrainedEvaluation.java	2009-12-31 09:44:36 UTC (rev 20460)
@@ -26,6 +26,16 @@
 		FineGrainedEvaluation eval= fgEvaluator.compareResultFiles(intended_AST, intended, fg_AST, fg)(filePath_Intended, filePath_FG);
 		Assert.assertEquals(0, eval.getDiffRegionsAST().size());
 		System.out.println(eval.getEvaluations());
+	}*/
+	
+	/*
+	@Test
+	public void testEvaluate1() throws IOException{
+		String filePath_Intended = "Test_FG"+ File.separator+"correct.java";
+		String filePath_FG=filePath_Intended;
+		FineGrainedEvaluation eval= fgEvaluator.compareResultFiles(intended_AST, intended, fg_AST, fg)(filePath_Intended, filePath_FG);
+		Assert.assertEquals(0, eval.getDiffRegionsAST().size());
+		System.out.println(eval.getEvaluations());
 	}
 	
 	@Test

Modified: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/javaTests.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/javaTests.java	2009-12-30 15:07:18 UTC (rev 20459)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/javaTests.java	2009-12-31 09:44:36 UTC (rev 20460)
@@ -71,7 +71,7 @@
 		addLanguage(languageEvaluation, new Testsuite("Java", fileLocations), InfraStructure.JAVA_EXT);
 		//addLanguage(languageEvaluation, new Testsuite("WebDSL", fileLocations), InfraStructure.WEBDSL_EXT);
 		//addLanguage(languageEvaluation, new Testsuite("Stratego", fileLocations), InfraStructure.STRATEGO_EXT);
-		addLanguage(languageEvaluation, new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
+		//addLanguage(languageEvaluation, new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
 		addLanguage(languageEvaluation, new Testsuite("Delme-2", fileLocations), InfraStructure.DEL2_EXT);
 		languageEvaluation.run();
 		//WriteStatistics.writeConsole_Testrun(languageEvaluation);



From m.dejonge at tudelft.nl  Thu Dec 31 18:07:03 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 31 Dec 2009 17:07:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20461 - MaartjeDeJonge
	- in sglr-recovery/trunk/EvaluationRecoverAlgorithms/src:
	fileprocessing testrun
Message-ID: <200912311707.nBVH73qX016542@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-12-31 17:07:02 +0000 (Thu, 31 Dec 2009)
New Revision: 20461

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20461&view=rev

Modified:
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/PreProcessor.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestFineGrainedEvaluation.java
   sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/javaTests.java

Log:
preprocessor: non-greedy
common mid: 1.shift 2.mid 

Changes:

Modified: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java	2009-12-31 09:44:36 UTC (rev 20460)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/FineGrainedEvaluator.java	2009-12-31 17:07:02 UTC (rev 20461)
@@ -119,14 +119,18 @@
 				i=actualFragmentLines.size()+1;
 			}
 		}
-		if (intendedFirst.size()!=0 && intendedLast.size()!=0&& actualFirst.size()!=0 && actualLast.size()!=0) {
-			diffResult.add(new Diff(intendedFirst, actualFirst));
+		if (intendedFirst.size()!=0 || actualFirst.size()!=0 ) {
+			diffResult.add(new Diff(intendedFirst, actualFirst));			
+		}
+		if (intendedLast.size()!=0 || actualLast.size()!=0) {			
 			diffResult.add(new Diff(intendedLast, actualLast));
 		}
 		return diffResult;
 	}
 
+	/*
 	public ArrayList<String> findCommonMid(ArrayList<String> set1, ArrayList<String> set2){		
+		findshift(set1, set2);
 		ArrayList<String> smallestSet=set1;
 		ArrayList<String> biggestSet=set2;
 		if(set1.size()>set2.size()){
@@ -148,5 +152,63 @@
 		//System.out.println("InBoth: "+inBoth);
 		return inBoth;
 	} 
-
+	*/
+	public ArrayList<String> findCommonMid(ArrayList<String> set1, ArrayList<String> set2){		
+		ArrayList<String> smallestSet=set1;
+		ArrayList<String> biggestSet=set2;
+		if(set1.size()>set2.size()){
+			smallestSet=set2;
+			biggestSet=set1;
+		}
+		//System.out.println(set1.size() +"=> "+set2.size());
+		int shiftStart=-smallestSet.size()/2;
+		int shiftEnd=biggestSet.size()-smallestSet.size()/2;
+		int optimalResult=0;
+		int optimalShift=0;
+		//System.out.println("SHIFT: "+shiftStart +" - "+shiftEnd);
+		for (int shift = shiftStart; shift < shiftEnd; shift++) {
+			int matchResult = 0;
+			int matchLinesCount = 0;
+			int startCompare = Math.max(shift, 0);
+			int endCompare = Math.min(biggestSet.size(), shift + smallestSet.size());
+			for (int i = startCompare; i < endCompare; i++) {
+				if (biggestSet.get(i).equals(smallestSet.get(i - shift))) {
+					matchLinesCount++;
+				} else {
+					if (matchLinesCount > matchResult)
+						matchResult = matchLinesCount;
+					matchLinesCount = 0;
+				}
+				if (matchLinesCount > matchResult)
+					matchResult = matchLinesCount;
+			}
+			if(matchResult>optimalResult){
+				optimalResult=matchResult;
+				optimalShift=shift;
+			}
+		}		
+		int startMatch=-1;
+		int startCompare = Math.max(optimalShift, 0);
+		int endCompare = Math.min(biggestSet.size(), optimalShift + smallestSet.size());
+		for (int i = startCompare; i < endCompare; i++) {
+			if (biggestSet.get(i).equals(smallestSet.get(i - optimalShift))) {
+				if(startMatch==-1)
+					startMatch=i;
+			} else {
+				if (i-startMatch == optimalResult){
+					ArrayList<String> commonMid=new ArrayList<String>();
+					commonMid.addAll(biggestSet.subList(startMatch, i));
+					return commonMid;
+				}
+				else
+					startMatch=-1;
+			}
+		}
+		if (startMatch!=-1 && biggestSet.size()-startMatch == optimalResult){
+			ArrayList<String> commonMid=new ArrayList<String>();
+			commonMid.addAll(biggestSet.subList(startMatch, biggestSet.size()));
+			return commonMid;
+		}
+		return new ArrayList<String>();
+	} 
 }

Modified: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/PreProcessor.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/PreProcessor.java	2009-12-31 09:44:36 UTC (rev 20460)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/fileprocessing/PreProcessor.java	2009-12-31 17:07:02 UTC (rev 20461)
@@ -10,8 +10,8 @@
 	private static final String LINE_OPEN = "//"+"( )*";
 	private static final String BLOCK_CLOSE = "( )*\\*\\/";
 	private static final String BLOCK_OPEN = "\\/\\*( )*";
-	private static final String INSERTION = "<(.)*>";
-	private static final String INSERTION2 = "ERROR remove (.)* @ERROR";
+	private static final String INSERTION = "<(.)*?>";
+	private static final String INSERTION2 = "ERROR remove (.)*? @ERROR";
 	private static final String DELETION_END = "\\]";
 	private static final String DELETION_START = "\\[";
 	private static final String DELETION_END2 = "ERROR";
@@ -76,7 +76,7 @@
 		Matcher m = p.matcher(source);
 		StringBuffer sb = new StringBuffer();
 		boolean result = m.find();
-		while(result) {
+		while(result) {			
 			m.appendReplacement(sb, newPattern);
 			result = m.find();
 		}

Modified: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestFineGrainedEvaluation.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestFineGrainedEvaluation.java	2009-12-31 09:44:36 UTC (rev 20460)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/TestFineGrainedEvaluation.java	2009-12-31 17:07:02 UTC (rev 20461)
@@ -2,11 +2,13 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
 
 import junit.framework.Assert;
 
 import org.junit.Test;
 
+import fileprocessing.Diff;
 import fileprocessing.FilePaths;
 import fileprocessing.FineGrainedEvaluation;
 import fileprocessing.FineGrainedEvaluator;
@@ -18,15 +20,16 @@
 	public TestFineGrainedEvaluation(){
 		fgEvaluator=new FineGrainedEvaluator();
 	}
-	/*
+	
 	@Test
 	public void testEvaluate1() throws IOException{
-		String filePath_Intended = "Test_FG"+ File.separator+"correct.java";
-		String filePath_FG=filePath_Intended;
-		FineGrainedEvaluation eval= fgEvaluator.compareResultFiles(intended_AST, intended, fg_AST, fg)(filePath_Intended, filePath_FG);
-		Assert.assertEquals(0, eval.getDiffRegionsAST().size());
-		System.out.println(eval.getEvaluations());
-	}*/
+		String nameString="Dryad_test-java-traits.2.break22";
+		String filePath_Intended = "Output/"+nameString+".fg.intended.sj";
+		String filePath_FG="Output/"+nameString+".fg.sj";
+		ArrayList<Diff> eval= fgEvaluator.compareResult(filePath_Intended, filePath_FG);
+		Assert.assertEquals(2, eval.size());
+		System.out.println(eval);
+	}
 	
 	/*
 	@Test

Modified: sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/javaTests.java
===================================================================
--- sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/javaTests.java	2009-12-31 09:44:36 UTC (rev 20460)
+++ sglr-recovery/trunk/EvaluationRecoverAlgorithms/src/testrun/javaTests.java	2009-12-31 17:07:02 UTC (rev 20461)
@@ -62,7 +62,7 @@
 		t.runTestcases();		
 		System.out.println(t.getStatistics().getOverviewResults());		
 	}*/
-	
+	 
 	@Test
 	public void testTestRun() throws Exception{
 		Testrun languageEvaluation=new Testrun("Languages-Test");
@@ -71,7 +71,7 @@
 		addLanguage(languageEvaluation, new Testsuite("Java", fileLocations), InfraStructure.JAVA_EXT);
 		//addLanguage(languageEvaluation, new Testsuite("WebDSL", fileLocations), InfraStructure.WEBDSL_EXT);
 		//addLanguage(languageEvaluation, new Testsuite("Stratego", fileLocations), InfraStructure.STRATEGO_EXT);
-		//addLanguage(languageEvaluation, new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
+		addLanguage(languageEvaluation, new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
 		addLanguage(languageEvaluation, new Testsuite("Delme-2", fileLocations), InfraStructure.DEL2_EXT);
 		languageEvaluation.run();
 		//WriteStatistics.writeConsole_Testrun(languageEvaluation);



