From g.h.wachsmuth at tudelft.nl  Sat Oct  2 02:08:03 2010
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Sat, 02 Oct 2010 00:08:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21267 -
	tiger-spoofax/syntax/lexical
Message-ID: <201010020008.o920838k018288@proliant.st.ewi.tudelft.nl>

Author: GuidoWachsmuth
Date: Sat Oct  2 00:08:01 2010
New Revision: 21267
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21267&sc=1

Log:
new submissions
graded test cases

Added:
   tiger-spoofax/syntax/lexical/MiniJava-Comments.sdf   (contents, props changed)
   tiger-spoofax/syntax/lexical/MiniJava-Constants.sdf   (contents, props changed)
   tiger-spoofax/syntax/lexical/MiniJava-Identifiers.sdf   (contents, props changed)
   tiger-spoofax/syntax/lexical/MiniJava-Whitespace.sdf   (contents, props changed)

Added: tiger-spoofax/syntax/lexical/MiniJava-Comments.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ tiger-spoofax/syntax/lexical/MiniJava-Comments.sdf	Sat Oct  2 00:08:01 2010	(r21267)
@@ -0,0 +1,31 @@
+module lexical/MiniJava-Comments
+
+exports
+	lexical syntax
+    	
+		Comment        						-> LAYOUT
+		
+		"/*" CommChar* "*/"					-> Comment
+		"//" (~[\n\r])*	([\n\r] | EndFile)	-> Comment
+		
+		~[\/\*]								-> CommChar 
+    	Asterisk							-> CommChar
+    	Slash								-> CommChar
+    	[\*]								-> Asterisk
+		[\/]								-> Slash
+											-> EndFile
+		
+	lexical syntax
+		
+		Comment								-> CommChar
+		
+	lexical restrictions
+		
+		Asterisk 	-/- [\/]
+		Slash 		-/- [\*]
+
+	context-free restrictions
+  
+		LAYOUT? 	-/- [\/].[\*]
+		LAYOUT? 	-/- [\/].[\/]
+

Added: tiger-spoofax/syntax/lexical/MiniJava-Constants.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ tiger-spoofax/syntax/lexical/MiniJava-Constants.sdf	Sat Oct  2 00:08:01 2010	(r21267)
@@ -0,0 +1,23 @@
+module lexical/MiniJava-Constants
+
+exports
+	sorts IntConst StrConst
+	
+	lexical syntax
+		
+		[0-9]+					-> IntConst
+		
+		"\"" StrChar* "\""		-> StrConst
+
+		~[\\\"\n]				-> StrChar
+		[\\] [n]				-> StrChar
+		[\\] [t]				-> StrChar
+		[\\] [\^] [A-Z]			-> StrChar
+		[\\] [0-9][0-9][0-9]	-> StrChar
+		[\\] [\"]				-> StrChar
+		[\\] [\\]				-> StrChar
+		[\\] [\ \t\n]+ [\\]		-> StrChar
+
+	lexical restrictions
+
+		IntConst -/- [0-9]    

Added: tiger-spoofax/syntax/lexical/MiniJava-Identifiers.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ tiger-spoofax/syntax/lexical/MiniJava-Identifiers.sdf	Sat Oct  2 00:08:01 2010	(r21267)
@@ -0,0 +1,78 @@
+module lexical/MiniJava-Identifiers
+
+exports
+	sorts Main Id
+	
+	lexical syntax
+		"main"					-> MAIN
+		"if" 					-> IF
+		"else"					-> ELSE
+		"while" 				-> WHILE
+		"length"				-> LENGTH
+		"System.out.println" 	-> PRINTLN
+		"true"					-> TRUE
+		"false"					-> FALSE
+		[a-zA-Z][a-zA-Z0-9\_]*	-> Id
+		
+		%%For coloring
+ 		Id						-> ClassDef 
+ 		Id						-> MethodDef
+ 		Id						-> VarDef
+  
+	lexical restrictions
+
+		Id -/- [a-zA-Z0-9\_]
+
+  	lexical syntax
+		"abstract" 		-> Id {reject}
+		"assert" 		-> Id {reject}
+		"boolean" 		-> Id {reject}
+		"break" 		-> Id {reject}
+		"byte" 			-> Id {reject}
+		"case" 			-> Id {reject}
+		"catch" 		-> Id {reject}
+		"char" 			-> Id {reject}
+		"class" 		-> Id {reject}
+		"const" 		-> Id {reject}
+		"continue" 		-> Id {reject}
+		"default" 		-> Id {reject}
+		"do" 			-> Id {reject}
+		"double" 		-> Id {reject}
+		"else" 			-> Id {reject}
+		"enum" 			-> Id {reject}
+		"extends" 		-> Id {reject}
+		"false" 		-> Id {reject}
+		"final" 		-> Id {reject}
+		"finally" 		-> Id {reject}
+		"float" 		-> Id {reject}
+		"for" 			-> Id {reject}
+		"goto" 			-> Id {reject}
+		"if" 			-> Id {reject}
+		"implements" 	-> Id {reject}
+		"import" 		-> Id {reject}
+		"instanceof" 	-> Id {reject}
+		"int" 			-> Id {reject}
+		"interface" 	-> Id {reject}
+		"long" 			-> Id {reject}
+		"native" 		-> Id {reject}
+		"new" 			-> Id {reject}
+		"package" 		-> Id {reject}
+		"private" 		-> Id {reject}
+		"protected" 	-> Id {reject}
+		"public" 		-> Id {reject}
+		"return" 		-> Id {reject}
+		"short" 		-> Id {reject}
+		"static" 		-> Id {reject}
+		"strictfp" 		-> Id {reject}
+		"super" 		-> Id {reject}
+		"switch" 		-> Id {reject}
+		"synchronized" 	-> Id {reject}
+		"this" 			-> Id {reject}
+		"throw"			-> Id {reject}
+		"throws" 		-> Id {reject}
+		"transient" 	-> Id {reject}
+		"true" 			-> Id {reject}
+		"try" 			-> Id {reject}
+		"void" 			-> Id {reject}
+		"volatile" 		-> Id {reject}
+		"while"			-> Id {reject}
\ No newline at end of file

Added: tiger-spoofax/syntax/lexical/MiniJava-Whitespace.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ tiger-spoofax/syntax/lexical/MiniJava-Whitespace.sdf	Sat Oct  2 00:08:01 2010	(r21267)
@@ -0,0 +1,11 @@
+module lexical/MiniJava-Whitespace
+exports
+
+	lexical syntax
+		
+		[\ \t\n\r] -> LAYOUT
+  
+	context-free restrictions
+    
+		LAYOUT? -/- [\ \t\n\r]
+

From L.C.L.Kats at tudelft.nl  Sun Oct  3 19:09:30 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 03 Oct 2010 17:09:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21268 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201010031709.o93H9Ueh018566@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Sun Oct  3 17:09:28 2010
New Revision: 21268
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21268&sc=1

Log:
Spoofax/263: deadlock in StrategoObserver. Also some minor code tweaks related to locking and threads.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundJob.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Sat Oct  2 00:08:01 2010	(r21267)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Sun Oct  3 17:09:28 2010	(r21268)
@@ -211,7 +211,7 @@
 		JSGLRI parser = controller.getParser();
 		RootAstNode result;
 		
-		controller.scheduleParserUpdate(REINIT_PARSE_DELAY, true);
+		controller.scheduleParserUpdate(REINIT_PARSE_DELAY, true); // cancel current parse
 		Debug.startTimer();
 		controller.getParseLock().lock();
 		Debug.stopTimer("Completion acquired parse lock");

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Sat Oct  2 00:08:01 2010	(r21267)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Sun Oct  3 17:09:28 2010	(r21268)
@@ -114,7 +114,7 @@
 	 * Returns a value indicating whether or not an analysis has
 	 * been scheduled or completed at this point.
 	 * 
-	 * @return true if update() or asyncUpdate() have been called.
+	 * @return true if update() or scheduleUpdate() have been called.
 	 */
 	public boolean isUpdateScheduled() {
 		return isUpdateStarted;
@@ -286,7 +286,8 @@
 		IStrategoTerm feedback = null;
 		
 		try {
-			synchronized (getLock()) {
+			getLock().lock();
+			try {
 				resultingAsts.remove(ast.getResource());
 				feedback = invokeSilent(feedbackFunction, makeInputTerm(ast, false), ast.getResource());
 	
@@ -299,6 +300,8 @@
 					messages.addMarkerFirstLine(ast.getResource(), "Analysis failed (see error log)", IMarker.SEVERITY_ERROR);
 					messages.commitAllChanges();
 				}
+			} finally {
+				getLock().unlock();
 			}
 		 	if (feedback != null && !monitor.isCanceled()) {
 				// TODO: figure out how this was supposed to be synchronized??

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundJob.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundJob.java	Sat Oct  2 00:08:01 2010	(r21267)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundJob.java	Sun Oct  3 17:09:28 2010	(r21268)
@@ -49,7 +49,7 @@
 		} catch (Exception e) {
 			Environment.logException("Background job failed", e);
 		} finally {
-			observer.getLock().unlock();
+			if (observer != null) observer.getLock().unlock();
 		}
 		
 		return Status.OK_STATUS;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java	Sat Oct  2 00:08:01 2010	(r21267)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java	Sun Oct  3 17:09:28 2010	(r21268)
@@ -49,32 +49,33 @@
 			parseController = descriptor.createService(SGLRParseController.class, null);
 			observer = descriptor.createService(StrategoObserver.class, parseController);
 			
-			this.observer.getLock().lock();
+			observer.getLock().lock();
+			try {
+				((EditorIOAgent)observer.getRuntime().getIOAgent()).setJob(this);
+				// Don't perform initial (foreground) update
+				parseController.setPerformInitialUpdate(false);
+				
+				// Read file
+				File file = absolutePath.toFile();
+				byte[] buffer = new byte[(int) file.length()];
+			    BufferedInputStream f = new BufferedInputStream(new FileInputStream(file));
+			    f.read(buffer);
+			    String input = new String(buffer);
 			
-			((EditorIOAgent)observer.getRuntime().getIOAgent()).setJob(this);
-			// Don't perform initial (foreground) update
-			parseController.setPerformInitialUpdate(false);
-			
-			// Read file
-			File file = absolutePath.toFile();
-			byte[] buffer = new byte[(int) file.length()];
-		    BufferedInputStream f = new BufferedInputStream(new FileInputStream(file));
-		    f.read(buffer);
-		    String input = new String(buffer);
-		
-		    // Parse file
-		    ISourceProject sproject = ModelFactory.open(project);
-		    
-		    parseController.initialize(path, sproject, null);
-		    parseController.parse(input, new NullProgressMonitor());
-			
-		    observer.update(parseController, monitor);
+			    // Parse file
+			    ISourceProject sproject = ModelFactory.open(project);
+			    
+			    parseController.initialize(path, sproject, null);
+			    parseController.parse(input, new NullProgressMonitor());
+				
+			    observer.update(parseController, monitor);
+			} finally {
+				observer.getLock().unlock();
+			}
 		    
 		} catch (Exception e) {
 			// hmm.
 			e.printStackTrace();
-		} finally {
-			observer.getLock().unlock();
 		}
 		
 		return Status.OK_STATUS;

From E.Visser at tudelft.nl  Mon Oct  4 15:51:03 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 13:51:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21269 -
	spoofax-contrib/lwc11
Message-ID: <201010041351.o94Dp3AC002770@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 13:51:02 2010
New Revision: 21269
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21269&sc=1

Log:
example for Language Workbench Comparison 11

Added:
   spoofax-contrib/lwc11/

From E.Visser at tudelft.nl  Mon Oct  4 15:51:16 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 13:51:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21270 -
	spoofax-contrib/lwc11/trunk
Message-ID: <201010041351.o94DpG7S002773@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 13:51:15 2010
New Revision: 21270
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21270&sc=1

Log:
example for Language Workbench Comparison 11

Added:
   spoofax-contrib/lwc11/trunk/

From E.Visser at tudelft.nl  Mon Oct  4 16:12:23 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 14:12:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21271 -
	spoofax-contrib/lwc11/trunk/doc
Message-ID: <201010041412.o94ECNgj003330@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 14:12:19 2010
New Revision: 21271
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21271&sc=1

Log:
set up documentation of the process

Added:
   spoofax-contrib/lwc11/trunk/doc/
   spoofax-contrib/lwc11/trunk/doc/Makefile
   spoofax-contrib/lwc11/trunk/doc/body.ltx
   spoofax-contrib/lwc11/trunk/doc/doc.ltx
   spoofax-contrib/lwc11/trunk/doc/phase0.ltx

Added: spoofax-contrib/lwc11/trunk/doc/Makefile
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/doc/Makefile	Mon Oct  4 14:12:19 2010	(r21271)
@@ -0,0 +1,8 @@
+all : doc.dvi doc.pdf
+
+doc.pdf : doc.ltx $(wildcard *.ltx) Makefile
+	pdflatex doc.ltx
+
+doc.dvi : doc.ltx $(wildcard *.ltx) Makefile
+	latex doc.ltx
+

Added: spoofax-contrib/lwc11/trunk/doc/body.ltx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/doc/body.ltx	Mon Oct  4 14:12:19 2010	(r21271)
@@ -0,0 +1,15 @@
+\section{Introduction}
+        \label{intro}
+
+        This paper is a log of the construction of the example case for the Language
+        Workbench Comparison Workshop 2011.
+
+\section{Preparation}
+       \label{}
+
+       Using already installed Eclipse 3.5.1 on Mac OS X.
+
+       Updated to latest (unstable) version of Spoofax available from the update site
+       http://www.lclnet.nl/update/unstable.
+
+\input{phase0.ltx}

Added: spoofax-contrib/lwc11/trunk/doc/doc.ltx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/doc/doc.ltx	Mon Oct  4 14:12:19 2010	(r21271)
@@ -0,0 +1,16 @@
+\documentclass{article}
+
+\title{Spoofax Example for LWC}
+\author{Eelco Visser\\Delft University of Technology\\http://eelcovisser.org}
+\date{\today}
+
+\begin{document}
+
+  \maketitle
+
+  \parindent0pt
+  \parskip1em
+
+  \input{body.ltx}
+
+\end{document}

Added: spoofax-contrib/lwc11/trunk/doc/phase0.ltx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/doc/phase0.ltx	Mon Oct  4 14:12:19 2010	(r21271)
@@ -0,0 +1,6 @@
+\section{Phase 0}
+
+\subsection{Phase 0.1: Simple Structural DSL}
+        \label{}
+
+        

From E.Visser at tudelft.nl  Mon Oct  4 16:21:05 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 14:21:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21272 - in
	spoofax-contrib/lwc11/trunk: . META-INF bin bin/dist bin/lwc
	bin/lwc/strategies bin/trans doc editor editor/java
	editor/java/lwc editor/java/lwc/strategies incl...
Message-ID: <201010041421.o94EL5Pl003537@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 14:21:02 2010
New Revision: 21272
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21272&sc=1

Log:
example project generated by Spoofax

Added:
   spoofax-contrib/lwc11/trunk/.classpath
   spoofax-contrib/lwc11/trunk/.project
   spoofax-contrib/lwc11/trunk/META-INF/
   spoofax-contrib/lwc11/trunk/META-INF/MANIFEST.MF
   spoofax-contrib/lwc11/trunk/bin/
   spoofax-contrib/lwc11/trunk/bin/dist/
   spoofax-contrib/lwc11/trunk/bin/lwc/
   spoofax-contrib/lwc11/trunk/bin/lwc/Activator.class   (contents, props changed)
   spoofax-contrib/lwc11/trunk/bin/lwc/LWCParseController.class   (contents, props changed)
   spoofax-contrib/lwc11/trunk/bin/lwc/LWCValidator.class   (contents, props changed)
   spoofax-contrib/lwc11/trunk/bin/lwc/strategies/
   spoofax-contrib/lwc11/trunk/bin/lwc/strategies/InteropRegisterer.class   (contents, props changed)
   spoofax-contrib/lwc11/trunk/bin/lwc/strategies/Main.class   (contents, props changed)
   spoofax-contrib/lwc11/trunk/bin/lwc/strategies/java_strategy_0_0.class   (contents, props changed)
   spoofax-contrib/lwc11/trunk/bin/trans/
   spoofax-contrib/lwc11/trunk/build.generated.xml
   spoofax-contrib/lwc11/trunk/build.main.xml
   spoofax-contrib/lwc11/trunk/build.properties
   spoofax-contrib/lwc11/trunk/editor/
   spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Builders.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Completions.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-References.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-References.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC.main.esv
   spoofax-contrib/lwc11/trunk/editor/java/
   spoofax-contrib/lwc11/trunk/editor/java/lwc/
   spoofax-contrib/lwc11/trunk/editor/java/lwc/Activator.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCParseController.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCValidator.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/
   spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/InteropRegisterer.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/Main.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/java_strategy_0_0.java
   spoofax-contrib/lwc11/trunk/include/
   spoofax-contrib/lwc11/trunk/include/LWC-Permissive.def
   spoofax-contrib/lwc11/trunk/include/LWC.def
   spoofax-contrib/lwc11/trunk/include/LWC.generated.pp.af
   spoofax-contrib/lwc11/trunk/include/LWC.packed.esv
   spoofax-contrib/lwc11/trunk/include/LWC.pp.af
   spoofax-contrib/lwc11/trunk/include/LWC.rtg
   spoofax-contrib/lwc11/trunk/include/LWC.str
   spoofax-contrib/lwc11/trunk/include/LWC.tbl   (contents, props changed)
   spoofax-contrib/lwc11/trunk/include/lwc-java.jar   (contents, props changed)
   spoofax-contrib/lwc11/trunk/include/lwc.ctree
   spoofax-contrib/lwc11/trunk/include/lwc.ctree.dep
   spoofax-contrib/lwc11/trunk/lib/
   spoofax-contrib/lwc11/trunk/lib/editor-common.generated.str
   spoofax-contrib/lwc11/trunk/plugin.xml
   spoofax-contrib/lwc11/trunk/syntax/
   spoofax-contrib/lwc11/trunk/syntax/Common.sdf
   spoofax-contrib/lwc11/trunk/syntax/LWC.generated.pp
   spoofax-contrib/lwc11/trunk/syntax/LWC.pp
   spoofax-contrib/lwc11/trunk/syntax/LWC.sdf
   spoofax-contrib/lwc11/trunk/test/
   spoofax-contrib/lwc11/trunk/test/example.java
   spoofax-contrib/lwc11/trunk/test/example.lwc
   spoofax-contrib/lwc11/trunk/trans/
   spoofax-contrib/lwc11/trunk/trans/check.str
   spoofax-contrib/lwc11/trunk/trans/generate.str
   spoofax-contrib/lwc11/trunk/trans/lwc.str
Modified:
   spoofax-contrib/lwc11/trunk/doc/phase0.ltx

Added: spoofax-contrib/lwc11/trunk/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/.classpath	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/.project	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>lwc</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/LWC build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/META-INF/MANIFEST.MF	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,22 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: LWC Plug-in
+Bundle-SymbolicName: lwc; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: lwc.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: lwc

Added: spoofax-contrib/lwc11/trunk/bin/lwc/Activator.class
==============================================================================
Binary file. No diff available.

Added: spoofax-contrib/lwc11/trunk/bin/lwc/LWCParseController.class
==============================================================================
Binary file. No diff available.

Added: spoofax-contrib/lwc11/trunk/bin/lwc/LWCValidator.class
==============================================================================
Binary file. No diff available.

Added: spoofax-contrib/lwc11/trunk/bin/lwc/strategies/InteropRegisterer.class
==============================================================================
Binary file. No diff available.

Added: spoofax-contrib/lwc11/trunk/bin/lwc/strategies/Main.class
==============================================================================
Binary file. No diff available.

Added: spoofax-contrib/lwc11/trunk/bin/lwc/strategies/java_strategy_0_0.class
==============================================================================
Binary file. No diff available.

Added: spoofax-contrib/lwc11/trunk/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/build.generated.xml	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,435 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/lwc/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la lwc.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+                <path><fileset dir="${basedir}" includes="*.astr"/></path>
+            </pathconvert>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <fileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </fileset>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/build.main.xml	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="LWC" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="LWC"/>
+        <property name="metasdfmodule" value="Stratego-LWC"/>
+        <property name="esvmodule" value="LWC"/>
+        <property name="strmodule" value="lwc"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/build.properties	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Modified: spoofax-contrib/lwc11/trunk/doc/phase0.ltx
==============================================================================
--- spoofax-contrib/lwc11/trunk/doc/phase0.ltx	Mon Oct  4 14:12:19 2010	(r21271)
+++ spoofax-contrib/lwc11/trunk/doc/phase0.ltx	Mon Oct  4 14:21:02 2010	(r21272)
@@ -3,4 +3,12 @@
 \subsection{Phase 0.1: Simple Structural DSL}
         \label{}
 
+        Create new Spoofax/IMP editor project using the corresponding wizard
+
+\begin{verbatim}
+  File > Project > New > Spoofax/IMP editor project
+\end{verbatim}
         
+        Oh, that was easy! Phase 0.1 to 0.3 done! The example project generated by
+        Spoofax is exactly an entity language with simple code generation, constraint
+        checks, reference resolving, outline view, syntax highlighting.

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,22 @@
+
+module LWC-Builders
+
+imports LWC-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                                               
+  provider                  : include/lwc.ctree                                                                                
+  provider                  : include/lwc-java.jar                                                                             
+                                                                                                                               
+  observer                  : editor-analyze                                                                                   
+                                                                                                                               
+  builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
+  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                                                                                                                               
+  // on save: generate-java                                                                                                    
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Builders.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Builders.generated.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,40 @@
+
+module LWC-Builders.generated
+
+builders
+                                                                                                      
+  // Building and analysis is defined in Stratego program or programs:                                
+  //                                                                                                  
+  //   provider : stratego-program.ctree                                                              
+  //   provider : stratego-library.jar                                                                
+  //                                                                                                  
+  // Analysis is carried out by a Stratego rule that can be selected as follows:                      
+  //                                                                                                  
+  //   observer : analysis-rule                                                                       
+  //                                                                                                  
+  // Any dynamic rules set in the analysis may be used by other semantic services,                    
+  // such as reference resolving or the builders.                                                     
+  //                                                                                                  
+  // Builders may carry out custom transformations on a file or selection.                            
+  // (At run-time, they can be accessed using the toolbar button with the star icon.)                 
+  // Builders can be specified as follows:                                                            
+  //                                                                                                  
+  //   builder : "Generate Java code" = generate-java (openeditor) (persistent) (realtime)            
+  //                                                                                                  
+  // In this example, the caption "Generate Java code" is used in the build button dropdown menu,     
+  // and the generate-java rule is used to carry out the tranformation.                               
+  // Builder definitions can also specify any combination of the following annotations:               
+  //                                                                                                  
+  //   (cursor)      The builder should always transform the tree node at the cursor.                 
+  //   (meta)        Indicates the builder should only be available to meta-programmers               
+  //                 (i.e., not when the plugin is deployed to end-users).                            
+  //   (openeditor)  Indicates an editor should be opened with the result.                            
+  //   (persistent)  Indicates that the resulting file should be saved to disk.                       
+  //   (realtime)    Indicates that the resulting editor should be updated in real-time               
+  //                 as the source file is edited.                                                    
+  //   (source)      Always apply this builder to the source AST, not to the AST                      
+  //                 after it has been analyzed/desugared by the observer.                            
+  //                                                                                                  
+  // The 'on save' handler can be used  to generate code as files are saved:                          
+  //                                                                                                  
+  //   on save : generate-java                                                                        
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,9 @@
+module LWC-Colorer
+
+imports LWC-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.generated.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,46 @@
+module LWC-Colorer.generated
+
+colorer
+                                                                                             
+  // Sort-based highlighting with background color                                           
+  //   Id: yellow green                                                                      
+  //                                                                                         
+  // Sort- and constructor-based highlighting                                                
+  //   ClassBodyDec.MethodDec: yellow                                                        
+  //                                                                                         
+  // Constructor-based highlighting                                                          
+  //   _.MethodDec: 255 0 0                                                                  
+  //                                                                                         
+  // Example: background colors for ToMetaExpr/FromMetaExpr, if supported by the grammar     
+  //   environment _.ToMetaExpr:   _ 220 230 200                                             
+  //   environment _.FromMetaExpr: _ white                                                   
+
+colorer Default, token-based highlighting
+                                  
+  keyword    : 127 0 85 bold      
+  identifier : default            
+  string     : blue               
+  number     : darkgreen          
+  var        : 255 0 100 italic   
+  operator   : 0 0 128            
+  layout     : 100 100 0 italic   
+
+colorer System colors
+                            
+  darkred   = 128 0 0       
+  red       = 255 0 0       
+  darkgreen = 0 128 0       
+  green     = 0 255 0       
+  darkblue  = 0 0 128       
+  blue      = 0 0 255       
+  cyan      = 0 255 255     
+  magenta   = 255 0 255     
+  yellow    = 255 255 0     
+  white     = 255 255 255   
+  black     = 0 0 0         
+  gray      = 128 128 128   
+  grey      = gray          
+  orange    = 255 165 0     
+  pink      = 255 105 180   
+  brown     = 139 69 19     
+  default   = _             
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,28 @@
+module LWC-Completions
+
+imports LWC-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                                                 
+  // Syntax completion:                                          
+                                                                 
+  completion template : Start =      "module " <m> (blank)       
+                                                                 
+  completion template : Definition = "entity " <e> " {}" (blank) 
+                                                                 
+  completion template : Property =   <x> " : " <T> (blank)       
+                                                                 
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  completion proposer                  : editor-complete
+                                         
+  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Completions.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Completions.generated.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,46 @@
+module LWC-Completions.generated
+
+completions
+                                                                                          
+  // Syntactic content completion can be defined as follows:                              
+  //                                                                                      
+  //   completion keyword  : "keyword"                                                    
+  //   completion template : "if " <e> " then\n\t" <s> "\nend"                            
+  //                                                                                      
+  // This defines keyword completion for "keyword" and                                    
+  // a template completion for the "if" keyword (note the use of \n, \t, and spaces).     
+  // In this template, the text selection expands to the "e" placeholder identifier       
+  // enclosed in <> brackets.                                                             
+  //                                                                                      
+  // Use the (blank) annotation if you want a template completion only to                 
+  // appear on blank lines:                                                               
+  //                                                                                      
+  //   completion template: "section " <title> "\n\t" (blank)                             
+  //                                                                                      
+  // Finally, you can specify a specific SDF sort for which a completion                  
+  // rule should trigger as follows:                                                      
+  //                                                                                      
+  //   completion template : Section =                                                    
+  //     "section " <title> "\n\t" (blank)                                                
+  //                                                                                      
+  // Semantic content completion can be defined as follows:                               
+  //                                                                                      
+  //   completion proposer : completion-function-call                                     
+  //   completion trigger  : "\."                                                         
+  //                                                                                      
+  // This sets completion-function-call as the completion strategy,                       
+  // and declares that [A-Za-z0-9_]+ may be used as a lexical pattern                     
+  // to parse identifiers (used to set the text selection with suggestions).              
+  // The completion trigger uses a regular expression to specify that                     
+  // completions should be proposed as the user types ".".                                
+  //                                                                                      
+  // Completions make use of the identifier lexical defined in YourLanguage-Syntax.esv    
+  // to select identifiers in completion suggestions.                                     
+  //                                                                                      
+  // Semantic completion uses the semantic provider defined in YourLanguage-Builders.esv  
+  // All semantic services may make use of the dynamic rules created by the observer.     
+
+completions
+                                     
+  // Derived completions may follow  
+                                     
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,9 @@
+module LWC-Folding
+
+imports LWC-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,24 @@
+module LWC-Folding.generated
+
+folding Default folding definitions
+  
+  // Folding rules indicate which syntactic constructs can be folded,
+  // and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  //
+  // To indicate that an element should always be folded, add
+  // a (folded) annotation:
+  //
+  //   _.Imports (folded)
+  //
+  // To disable a folding rule defined elsewhere, add a (disabled) annotation:
+  //
+  //   Definition._ (disabled)
+  
+  Start.Module
+  Definition.Entity
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,9 @@
+module LWC-Outliner
+
+imports LWC-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,16 @@
+module LWC-Outliner.generated
+
+outliner Default outliner        
+  
+  
+  // Outliner rules indicate which syntactic constructs should be shown in the outline
+  // and quick outline views, and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  
+  Start.Module
+  Definition.Entity
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-References.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,15 @@
+module LWC-References
+
+imports LWC-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-References.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-References.generated.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,19 @@
+
+module LWC-References.generated
+
+references
+                                                                                          
+  // Reference resolving rules can specify the syntax constructors for which              
+  // a reference resolving function is available:                                         
+  //                                                                                      
+  //   reference FunctionCall : resolve-function-call                                     
+  //                                                                                      
+  // This defines that for each FunctionCall, resolve-function-call                       
+  // will retrieve the AST node that declares it.                                         
+  //                                                                                      
+  // Likewise, hover help can be specified as follows:                                    
+  //                                                                                      
+  //   hover FunctionCall : hover-help-function-call                                      
+  //                                                                                      
+  // Reference resolving uses the semantic provider defined in YourLanguage-Builders.esv  
+  // All semantic services may make use of the dynamic rules created by the observer.     
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,9 @@
+module LWC-Syntax
+
+imports LWC-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.generated.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,21 @@
+module LWC-Syntax.generated
+
+language Syntax properties (static defaults)
+                                           
+  // Comment constructs:                   
+  line comment                           : "//"
+  block comment                          : "/*" * "*/"
+                                           
+  // Fences (used for matching,            
+  // inserting, indenting brackets):       
+  fences                                 : [ ]
+                                           ( )
+                                           { }
+                                           
+  // Automatic indent hints                
+  // (indent after these tokens):          
+  indent after                           : "="
+                                           ":"
+                                           
+  // Regular expression for identifiers:   
+  identifier lexical                     : "[A-Za-z0-9_]+"
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC.main.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,16 @@
+module LWC.main
+
+imports LWC-Builders LWC-Colorer LWC-Completions LWC-Folding LWC-Outliner LWC-References LWC-Syntax
+
+language General properties
+                  
+  name          : LWC
+  id            : lwc
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the LWC language"
+  url           : http://strategoxt.org
+                  
+  extensions    : lwc
+  table         : include/LWC.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/Activator.java	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,44 @@
+package lwc;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "LWC";
+
+  public static final String kLanguageName = "LWC";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCParseController.java	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,89 @@
+package lwc;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class LWCParseController extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("LWC");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = LWCParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = LWCParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(LWCParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return LWCParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCValidator.java	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,12 @@
+package lwc;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class LWCValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return LWCParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/InteropRegisterer.java	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,14 @@
+package lwc.strategies;
+
+       import org.strategoxt.lang.JavaInteropRegisterer;
+       import org.strategoxt.lang.Strategy;
+
+       /**
+        * Helper class for {@link java_strategy_0_0}.
+        */
+       public class InteropRegisterer extends JavaInteropRegisterer {
+
+         public InteropRegisterer() {
+           super(new Strategy[] { java_strategy_0_0.instance });
+         }
+       }

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/Main.java	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,11 @@
+package lwc.strategies;
+
+       import org.strategoxt.lang.Context;
+       
+       public class Main {
+         
+         public static void init(Context context) {
+           // Called when the editor is being initialized
+         }
+       
+       }

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/java_strategy_0_0.java	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,32 @@
+package lwc.strategies;
+
+       import org.spoofax.interpreter.terms.IStrategoTerm;
+       import org.spoofax.interpreter.terms.ITermFactory;
+       import org.strategoxt.lang.Context;
+       import org.strategoxt.lang.Strategy;
+       
+       /**
+        * Example Java strategy implementation.
+        *
+        * This strategy can be used by editor services and can be called
+        * in Stratego modules by declaring it as an external strategy
+        * as follows:
+        *
+        * <code>
+        *  external java-strategy(|)
+        * </code>
+        *
+        * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+        */
+       public class java_strategy_0_0 extends Strategy {
+         
+         public static java_strategy_0_0 instance = new java_strategy_0_0();
+       
+         @Override
+         public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+           context.getIOAgent().printError("Input for java-strategy: " + current);
+           ITermFactory factory = context.getFactory();
+           return factory.makeString("Regards from java-strategy");
+         }
+       
+       }

Added: spoofax-contrib/lwc11/trunk/include/LWC-Permissive.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/include/LWC-Permissive.def	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,87 @@
+definition
+
+module Common
+exports
+  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR
+
+  lexical syntax
+    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover, avoid}
+    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
+    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover, avoid}
+    "*"                            -> WATERTOKENSTAR      {recover, avoid}
+    WATERTOKEN                     -> WATER               
+    WATERTOKENSEPARATOR            -> WATER               
+    WATERTOKENSTAR                 -> WATER               
+
+  lexical restrictions
+    WATERTOKEN -/- [A-Za-z0-9\_]
+    WATERTOKENSTAR -/- [\/]
+
+  context-free syntax
+    WATER -> LAYOUT {cons("WATER")}
+
+  (
+
+  sorts WATEREOF
+
+  lexical restrictions
+    WATEREOF -/- ~[]
+
+  lexical syntax
+    %% Lexical insertion recovery rules                                
+    "\""                                           -> INSERTOPENQUOTE0 {recover}
+    INSERTOPENQUOTE0 StringChar* "\n"              -> STRING           {cons("INSERTEND")}
+    INSERTOPENQUOTE0 StringChar* WATEREOF          -> STRING           {cons("INSERTEND")}
+    "/*"                                           -> INSERTSTART0     {recover}
+    INSERTSTART0 ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT           {cons("INSERTEND")}
+                                                   -> "module"         {recover, cons("INSERTION")}
+                                                   -> "}"              {recover, cons("INSERTION")}
+                                                   -> "entity"         {recover, cons("INSERTION")}
+
+  syntax
+    %% Kernel syntax insertion recovery rules   
+
+  )
+
+  (
+
+  lexical syntax
+    [a-zA-Z] [a-zA-Z0-9\_]*            -> ID            
+    "-"? [0-9]+                        -> INT           
+    "\"" StringChar* "\""              -> STRING        
+    ~[\"\n]                            -> StringChar    
+    "\\\""                             -> StringChar    
+    BackSlashChar                      -> StringChar    
+    "\\"                               -> BackSlashChar 
+    [\ \t\n\r]                         -> LAYOUT        
+    [\*]                               -> CommentChar   
+    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT        
+    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT        
+                                       -> EOF           
+
+  lexical restrictions
+    CommentChar -/- [\/]
+    INT -/- [0-9]
+    ID -/- [a-zA-Z0-9\_]
+    EOF -/- ~[]
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/] . [\/]
+    LAYOUT? -/- [\/] . [\*]
+
+  )
+
+module LWC
+imports Common
+
+exports
+  context-free start-symbols
+    Start
+
+  context-free syntax
+    "module" ID Definition*       -> Start      {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID ":" Type                   -> Property   {cons("Property")}
+    ID                            -> Type       {cons("Type")}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/include/LWC.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/include/LWC.def	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,63 @@
+definition
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]
+
+module LWC
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+  
+    "module" ID Definition*       -> Start {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID ":" Type                   -> Property {cons("Property")}
+    ID                            -> Type {cons("Type")}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/include/LWC.generated.pp.af
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/include/LWC.generated.pp.af	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1 @@
+PP-Table([PP-Entry(Path1("Module"),[FBOX(KW,S("\"module\"")),Arg("1"),Arg("2")]),PP-Entry(Path("Module",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("Entity"),[FBOX(KW,S("\"entity\"")),Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("Entity",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("Property"),[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path1("Type"),[Arg("1")])])
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/include/LWC.packed.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/include/LWC.packed.esv	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1 @@
+Module("LWC.main.packed",Imports([Import("LWC.main"),Import("LWC-Builders"),Import("LWC-Colorer"),Import("LWC-Completions"),Import("LWC-Folding"),Import("LWC-Outliner"),Import("LWC-References"),Import("LWC-Syntax"),Import("LWC-Builders.generated"),Import("LWC-Colorer.generated"),Import("LWC-Completions.generated"),Import("LWC-Folding.generated"),Import("LWC-Outliner.generated"),Import("LWC-References.generated"),Import("LWC-Syntax.generated")]),[Language(" General properties",[LanguageName("LWC"),LanguageId("lwc"),Extends(Values(["Root"])),Description(String("\"Spoofax/IMP-generated editor for the LWC language\"")),URL("http://strategoxt.org"),Extensions(Values(["lwc"])),Table("include/LWC.tbl"),StartSymbols(Values(["Start"]))]),Builders("",[SemanticProvider("include/lwc.ctree"),SemanticProvider("include/lwc-java.jar"),SemanticObserver(Strategy("editor-analyze")),Builder(String("\"Generate Java code (for selection)\""),Strategy("generate-java"),[OpenEditor,RealTime]),Builde!
 r(String("\"Show abstract syntax (for selection)\""),Strategy("generate-aterm"),[OpenEditor,RealTime,Meta,Source])]),Colorer(" Default, token-based highlighting",[ColorRule(Token(TK_KEYWORD),Attribute(ColorRGB("127","0","85"),NoColor,BOLD)),ColorRule(Token(TK_IDENTIFIER),AttributeRef("default")),ColorRule(Token(TK_STRING),AttributeRef("blue")),ColorRule(Token(TK_NUMBER),AttributeRef("darkgreen")),ColorRule(Token(TK_VAR),Attribute(ColorRGB("255","0","100"),NoColor,ITALIC)),ColorRule(Token(TK_OPERATOR),Attribute(ColorRGB("0","0","128"),NoColor,NORMAL)),ColorRule(Token(TK_LAYOUT),Attribute(ColorRGB("100","100","0"),NoColor,ITALIC))]),Colorer(" System colors",[ColorDef("darkred",Attribute(ColorRGB("128","0","0"),NoColor,NORMAL)),ColorDef("red",Attribute(ColorRGB("255","0","0"),NoColor,NORMAL)),ColorDef("darkgreen",Attribute(ColorRGB("0","128","0"),NoColor,NORMAL)),ColorDef("green",Attribute(ColorRGB("0","255","0"),NoColor,NORMAL)),ColorDef("darkblue",Attribute(ColorRGB("0","0",!
 "128"),NoColor,NORMAL)),ColorDef("blue",Attribute(ColorRGB("0","0","
"),NoColor,NORMAL)),ColorDef("cyan",Attribute(ColorRGB("0","255","255"),NoColor,NORMAL)),ColorDef("magenta",Attribute(ColorRGB("255","0","255"),NoColor,NORMAL)),ColorDef("yellow",Attribute(ColorRGB("255","255","0"),NoColor,NORMAL)),ColorDef("white",Attribute(ColorRGB("255","255","255"),NoColor,NORMAL)),ColorDef("black",Attribute(ColorRGB("0","0","0"),NoColor,NORMAL)),ColorDef("gray",Attribute(ColorRGB("128","128","128"),NoColor,NORMAL)),ColorDef("grey",AttributeRef("gray")),ColorDef("orange",Attribute(ColorRGB("255","165","0"),NoColor,NORMAL)),ColorDef("pink",Attribute(ColorRGB("255","105","180"),NoColor,NORMAL)),ColorDef("brown",Attribute(ColorRGB("139","69","19"),NoColor,NORMAL)),ColorDef("default",Attribute(ColorDefault,NoColor,NORMAL))]),Completions("",[CompletionTemplateWithSort(Sort("Start"),String("\"module \""),[Placeholder("<m>")],Blank),CompletionTemplateWithSort(Sort("Definition"),String("\"entity \""),[Placeholder("<e>"),String("\" {}\"")],Blank),CompletionTempla!
 teWithSort(Sort("Property"),Placeholder("<x>"),[String("\" : \""),Placeholder("<T>")],Blank)]),Completions("",[CompletionProposer(Strategy("editor-complete")),CompletionTrigger(String("\":\""),None)]),Folding(" Default folding definitions",[FoldRule(SortAndConstructor(Sort("Start"),Constructor("Module")),None),FoldRule(SortAndConstructor(Sort("Definition"),Constructor("Entity")),None)]),Outliner(" Default outliner        ",[OutlineRule(SortAndConstructor(Sort("Start"),Constructor("Module"))),OutlineRule(SortAndConstructor(Sort("Definition"),Constructor("Entity")))]),References("",[ReferenceRule("_",Strategy("editor-resolve")),HoverRule("_",Strategy("editor-hover"))]),Language(" Syntax properties (static defaults)",[LineCommentPrefix(String("\"//\"")),BlockCommentDefs(BlockCommentDef(String("\"/*\""),"*",String("\"*/\""))),FenceDefs([FenceDef("[","]"),FenceDef("(",")"),FenceDef("{","}")]),IndentDefs([IndentDef(String("\"=\"")),IndentDef(String("\":\""))]),IdentifierLexical(S!
 tring("\"[A-Za-z0-9_]+\""))])])
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/include/LWC.pp.af
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/include/LWC.pp.af	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1 @@
+PP-Table([])
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/include/LWC.rtg
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/include/LWC.rtg	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,31 @@
+regular tree grammar
+  start Start
+  productions
+    ListStarOfProperty1   -> ListPlusOfProperty1
+    ListStarOfProperty1   -> <nil>()
+    ListStarOfProperty1   -> <conc>(ListStarOfProperty1,ListStarOfProperty1)
+    ListPlusOfProperty1   -> <conc>(ListStarOfProperty1,ListPlusOfProperty1)
+    ListPlusOfProperty1   -> <conc>(ListPlusOfProperty1,ListStarOfProperty1)
+    ListPlusOfProperty1   -> <conc>(ListPlusOfProperty1,ListPlusOfProperty1)
+    ListPlusOfProperty1   -> <cons>(Property,ListStarOfProperty1)
+    ListStarOfDefinition1 -> ListPlusOfDefinition1
+    ListStarOfDefinition1 -> <nil>()
+    ListStarOfDefinition1 -> <conc>(ListStarOfDefinition1,ListStarOfDefinition1)
+    ListPlusOfDefinition1 -> <conc>(ListStarOfDefinition1,ListPlusOfDefinition1)
+    ListPlusOfDefinition1 -> <conc>(ListPlusOfDefinition1,ListStarOfDefinition1)
+    ListPlusOfDefinition1 -> <conc>(ListPlusOfDefinition1,ListPlusOfDefinition1)
+    ListPlusOfDefinition1 -> <cons>(Definition,ListStarOfDefinition1)
+    ListStarOfStringChar1 -> <string>
+    ListPlusOfStringChar1 -> <string>
+    OptLit1               -> <string>
+    Type                  -> Type(ID)
+    Property              -> Property(ID,Type)
+    Definition            -> Entity(ID,ListStarOfProperty1)
+    Start                 -> Module(ID,ListStarOfDefinition1)
+    EOF                   -> <string>
+    CommentChar           -> <string>
+    BackSlashChar         -> <string>
+    StringChar            -> <string>
+    STRING                -> <string>
+    INT                   -> <string>
+    ID                    -> <string>

Added: spoofax-contrib/lwc11/trunk/include/LWC.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/include/LWC.str	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,22 @@
+module LWC
+
+signature
+  constructors
+    Type     : ID -> Type
+    Property : ID * Type -> Property
+    Entity   : ID * List(Property) -> Definition
+    Module   : ID * List(Definition) -> Start
+             : String -> ID
+
+
+signature
+  constructors
+    Some : a -> Option(a)
+    None : Option(a)
+
+
+signature
+  constructors
+    Cons : a * List(a) -> List(a)
+    Nil  : List(a)
+    Conc : List(a) * List(a) -> List(a)

Added: spoofax-contrib/lwc11/trunk/include/LWC.tbl
==============================================================================
Binary file. No diff available.

Added: spoofax-contrib/lwc11/trunk/include/lwc-java.jar
==============================================================================
Binary file. No diff available.

Added: spoofax-contrib/lwc11/trunk/include/lwc.ctree
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/include/lwc.ctree	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1 @@
+Specification([Signature([Constructors([ExtOpDecl("AsFix2",ConstType(Sort("ParseTreeFormat",[]))),ExtOpDecl("AsFix2ME",ConstType(Sort("ParseTreeFormat",[]))),ExtOpDecl("AssociativityFilter",ConstType(Sort("Filter",[]))),ExtOpDecl("DirectEagernessFilter",ConstType(Sort("Filter",[]))),ExtOpDecl("EagernessFilter",ConstType(Sort("Filter",[]))),ExtOpDecl("InjectionCountFilter",ConstType(Sort("Filter",[]))),ExtOpDecl("PriorityFilter",ConstType(Sort("Filter",[]))),ExtOpDecl("RejectFilter",ConstType(Sort("Filter",[]))),ExtOpDecl("ParseTable",FunType([ConstType(Sort("Internal",[]))],ConstType(Sort("ParseTable",[])))),ExtOpDecl("definition",FunType([ConstType(Sort("Definition",[]))],ConstType(Sort("SDF",[])))),ExtOpDeclInj(FunType([ConstType(Sort("String",[]))],ConstType(Sort("UQLiteral",[])))),ExtOpDecl("alias",FunType([ConstType(Sort("Symbol",[])),ConstType(Sort("Symbol",[]))],ConstType(Sort("Alias",[])))),ExtOpDecl("follow",FunType([ConstType(Sort("Symbols",[])),ConstType(Sort("Lo!
 okaheads",[]))],ConstType(Sort("Restriction",[])))),ExtOpDecl("list",FunType([ConstType(Sort("Symbol",[]))],ConstType(Sort("Production",[])))),ExtOpDecl("alt",FunType([ConstType(Sort("Symbol",[])),ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("single",FunType([ConstType(Sort("Lookahead",[]))],ConstType(Sort("Lookaheads",[])))),ExtOpDecl("seq",FunType([ConstType(Sort("Symbol",[])),ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("char-class",FunType([ConstType(Sort("List",[Sort("CharRange",[])]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("unquoted",FunType([ConstType(Sort("IdCon",[]))],ConstType(Sort("AFun",[])))),ExtOpDecl("quoted",FunType([ConstType(Sort("StrCon",[]))],ConstType(Sort("AFun",[])))),ExtOpDecl("quoted-fun",FunType([ConstType(Sort("StrCon",[]))],ConstType(Sort("FunctionName",[])))),ExtOpDecl("unquoted-fun",FunType([ConstType(Sort("IdCon",[]))],ConstType(Sort("FunctionName",[])))),ExtOpDecl("union",FunType([ConstTy!
 pe(Sort("CharClass",[])),ConstType(Sort("CharClass",[]))],ConstType(
t("CharClass",[])))),ExtOpDecl("isect",FunType([ConstType(Sort("CharClass",[])),ConstType(Sort("CharClass",[]))],ConstType(Sort("CharClass",[])))),ExtOpDecl("diff",FunType([ConstType(Sort("CharClass",[])),ConstType(Sort("CharClass",[]))],ConstType(Sort("CharClass",[])))),ExtOpDecl("comp",FunType([ConstType(Sort("CharClass",[]))],ConstType(Sort("CharClass",[])))),ExtOpDecl("simple-charclass",FunType([ConstType(Sort("OptCharRanges",[]))],ConstType(Sort("CharClass",[])))),ExtOpDecl("present",FunType([ConstType(Sort("IntCon",[]))],ConstType(Sort("OptExp",[])))),ExtOpDecl("absent",ConstType(Sort("OptExp",[]))),ExtOpDecl("conc",FunType([ConstType(Sort("CharRanges",[])),ConstType(Sort("CharRanges",[]))],ConstType(Sort("CharRanges",[])))),ExtOpDecl("range",FunType([ConstType(Sort("NatCon",[])),ConstType(Sort("NatCon",[]))],ConstType(Sort("CharRange",[])))),ExtOpDecl("label_start",ConstType(Sort("Character",[]))),ExtOpDecl("bot",ConstType(Sort("Character",[]))),ExtOpDecl("eof",ConstT!
 ype(Sort("Character",[]))),ExtOpDecl("top",ConstType(Sort("Character",[]))),ExtOpDecl("short",FunType([ConstType(Sort("ShortChar",[]))],ConstType(Sort("Character",[])))),ExtOpDecl("numeric",FunType([ConstType(Sort("NumChar",[]))],ConstType(Sort("Character",[])))),ExtOpDecl("assoc",FunType([ConstType(Sort("Group",[])),ConstType(Sort("Associativity",[])),ConstType(Sort("Group",[]))],ConstType(Sort("Priority",[])))),ExtOpDecl("chain",FunType([ConstType(Sort("List",[Sort("Group",[])]))],ConstType(Sort("Priority",[])))),ExtOpDecl("assoc-group",FunType([ConstType(Sort("Associativity",[])),ConstType(Sort("Productions",[]))],ConstType(Sort("Group",[])))),ExtOpDecl("prods-group",FunType([ConstType(Sort("Productions",[]))],ConstType(Sort("Group",[])))),ExtOpDecl("simple-group",FunType([ConstType(Sort("Production",[]))],ConstType(Sort("Group",[])))),ExtOpDecl("non-transitive",FunType([ConstType(Sort("Group",[]))],ConstType(Sort("Group",[])))),ExtOpDecl("with-arguments",FunType([ConstT!
 ype(Sort("Group",[])),ConstType(Sort("ArgumentIndicator",[]))],Const
e(Sort("Group",[])))),ExtOpDecl("default",FunType([ConstType(Sort("List",[Sort("ATerm",[])]))],ConstType(Sort("Annotation",[])))),ExtOpDecl("assoc",ConstType(Sort("Associativity",[]))),ExtOpDecl("non-assoc",ConstType(Sort("Associativity",[]))),ExtOpDecl("right",ConstType(Sort("Associativity",[]))),ExtOpDecl("left",ConstType(Sort("Associativity",[]))),ExtOpDecl("renamed-module",FunType([ConstType(Sort("ModuleName",[])),ConstType(Sort("Renamings",[]))],ConstType(Sort("Import",[])))),ExtOpDecl("imports",FunType([ConstType(Sort("Imports",[]))],ConstType(Sort("ImpSection",[])))),ExtOpDecl("parameterized",FunType([ConstType(Sort("ModuleId",[])),ConstType(Sort("Symbols",[]))],ConstType(Sort("ModuleName",[])))),ExtOpDecl("unparameterized",FunType([ConstType(Sort("ModuleId",[]))],ConstType(Sort("ModuleName",[])))),ExtOpDecl("hiddens",FunType([ConstType(Sort("Grammar",[]))],ConstType(Sort("Section",[])))),ExtOpDecl("exports",FunType([ConstType(Sort("Grammar",[]))],ConstType(Sort("Sect!
 ion",[])))),ExtOpDecl("production",FunType([ConstType(Sort("Production",[])),ConstType(Sort("Production",[]))],ConstType(Sort("Renaming",[])))),ExtOpDecl("symbol",FunType([ConstType(Sort("Symbol",[])),ConstType(Sort("Symbol",[]))],ConstType(Sort("Renaming",[])))),ExtOpDecl("renamings",FunType([ConstType(Sort("List",[Sort("Renaming",[])]))],ConstType(Sort("Renamings",[])))),ExtOpDecl("file-start",ConstType(Sort("Symbol",[]))),ExtOpDecl("start",ConstType(Sort("Symbol",[]))),ExtOpDecl("label",FunType([ConstType(Sort("Label",[])),ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("ci-lit",FunType([ConstType(Sort("SingleQuotedStrCon",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("lit",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("parameterized-sort",FunType([ConstType(Sort("Sort",[])),ConstType(Sort("List",[Sort("Symbol",[])]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("sort",FunType([ConstType(Sort("String",[]))],ConstType!
 (Sort("Symbol",[])))),ExtOpDecl("lifting",FunType([ConstType(Sort("S
ol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("strategy",FunType([ConstType(Sort("Symbol",[])),ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("func",FunType([ConstType(Sort("Symbols",[])),ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("tuple",FunType([ConstType(Sort("Symbol",[])),ConstType(Sort("Symbols",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("iter-star-sep",FunType([ConstType(Sort("Symbol",[])),ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("iter-sep",FunType([ConstType(Sort("Symbol",[])),ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("iter-star",FunType([ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("iter",FunType([ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("opt",FunType([ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("empty",ConstType(Sort("Symbol",[]))),ExtOpDecl("layout",ConstType(Sort("!
 Symbol",[]))),ExtOpDecl("varsym",FunType([ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("lex",FunType([ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("cf",FunType([ConstType(Sort("Symbol",[]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("prefix-fun",FunType([ConstType(Sort("FunctionName",[])),ConstType(Sort("List",[Sort("Symbol",[])])),ConstType(Sort("Symbol",[])),ConstType(Sort("Attributes",[]))],ConstType(Sort("Production",[])))),ExtOpDecl("prod",FunType([ConstType(Sort("List",[Sort("Symbol",[])])),ConstType(Sort("Symbol",[])),ConstType(Sort("Attributes",[]))],ConstType(Sort("Production",[])))),ExtOpDecl("no-attrs",ConstType(Sort("Attributes",[]))),ExtOpDecl("attrs",FunType([ConstType(Sort("List",[Sort("Attr",[])]))],ConstType(Sort("Attributes",[])))),ExtOpDecl("avoid",ConstType(Sort("Attr",[]))),ExtOpDecl("prefer",ConstType(Sort("Attr",[]))),ExtOpDecl("reject",ConstType(Sort("Attr",[]))),ExtOpDecl("assoc",FunType([ConstType(!
 Sort("Associativity",[]))],ConstType(Sort("Attr",[])))),ExtOpDecl("b
ket",ConstType(Sort("Attr",[]))),ExtOpDecl("term",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("Attr",[])))),ExtOpDecl("context-free-restrictions",FunType([ConstType(Sort("Restrictions",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("lexical-restrictions",FunType([ConstType(Sort("Restrictions",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("context-free-priorities",FunType([ConstType(Sort("Priorities",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("lexical-priorities",FunType([ConstType(Sort("Priorities",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("aliases",FunType([ConstType(Sort("Aliases",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("restrictions",FunType([ConstType(Sort("Restrictions",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("context-free-start-symbols",FunType([ConstType(Sort("Symbols",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("lexical-start-symbols",FunType([ConstType(Sort("Symbols",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("kernel-s!
 tart-symbols",FunType([ConstType(Sort("Symbols",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("priorities",FunType([ConstType(Sort("Priorities",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("imp-section",FunType([ConstType(Sort("ImpSection",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("lexical-variables",FunType([ConstType(Sort("Productions",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("variables",FunType([ConstType(Sort("Productions",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("context-free-syntax",FunType([ConstType(Sort("Productions",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("lexical-syntax",FunType([ConstType(Sort("Productions",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("syntax",FunType([ConstType(Sort("Productions",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("conc-grammars",FunType([ConstType(Sort("Grammar",[])),ConstType(Sort("Grammar",[]))],ConstType(Sort("Grammar",[])))),ExtOpDecl("empty-grammar",ConstType(Sort("Grammar",[]))),ExtOpDecl(!
 "annotated",FunType([ConstType(Sort("ATerm",[])),ConstType(Sort("Ann
tion",[]))],ConstType(Sort("ATerm",[])))),ExtOpDecl("placeholder",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),ExtOpDecl("appl",FunType([ConstType(Sort("Production",[])),ConstType(Sort("Args",[]))],ConstType(Sort("Tree",[])))),ExtOpDecl("fun",FunType([ConstType(Sort("AFun",[]))],ConstType(Sort("ATerm",[])))),ExtOpDecl("real",FunType([ConstType(Sort("RealCon",[]))],ConstType(Sort("ATerm",[])))),ExtOpDecl("int",FunType([ConstType(Sort("IntCon",[]))],ConstType(Sort("ATerm",[])))),ExtOpDecl("real-con",FunType([ConstType(Sort("IntCon",[])),ConstType(Sort("NatCon",[])),ConstType(Sort("OptExp",[]))],ConstType(Sort("RealCon",[])))),ExtOpDecl("negative",FunType([ConstType(Sort("NatCon",[]))],ConstType(Sort("IntCon",[])))),ExtOpDecl("positive",FunType([ConstType(Sort("NatCon",[]))],ConstType(Sort("IntCon",[])))),ExtOpDecl("natural",FunType([ConstType(Sort("NatCon",[]))],ConstType(Sort("IntCon",[])))),ExtOpDecl("summary",FunType([ConstType(Sort("String",[])),Cons!
 tType(Sort("String",[])),ConstType(Sort("List",[Sort("Error",[])]))],ConstType(Sort("Summary",[])))),ExtOpDecl("info",FunType([ConstType(Sort("String",[])),ConstType(Sort("List",[Sort("Subject",[])]))],ConstType(Sort("Error",[])))),ExtOpDecl("warning",FunType([ConstType(Sort("String",[])),ConstType(Sort("List",[Sort("Subject",[])]))],ConstType(Sort("Error",[])))),ExtOpDecl("error",FunType([ConstType(Sort("String",[])),ConstType(Sort("List",[Sort("Subject",[])]))],ConstType(Sort("Error",[])))),ExtOpDecl("fatal",FunType([ConstType(Sort("String",[])),ConstType(Sort("List",[Sort("Subject",[])]))],ConstType(Sort("Error",[])))),ExtOpDecl("subject",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Subject",[])))),ExtOpDecl("localized",FunType([ConstType(Sort("String",[])),ConstType(Sort("Location",[]))],ConstType(Sort("Subject",[])))),ExtOpDecl("file",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Location",[])))),ExtOpDecl("area-in-file",FunType([ConstType(Sort("Stri!
 ng",[])),ConstType(Sort("Area",[]))],ConstType(Sort("Location",[])))
xtOpDecl("area",FunType([ConstType(Sort("Int",[])),ConstType(Sort("Int",[])),ConstType(Sort("Int",[])),ConstType(Sort("Int",[])),ConstType(Sort("Int",[])),ConstType(Sort("Int",[]))],ConstType(Sort("Area",[])))),OpDecl("DR_UNDEFINE",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),OpDecl("DR_DUMMY",ConstType(Sort("ATerm",[]))),ExtOpDecl("ToTerm",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("ToMetaExpr",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("ToMetaListExpr",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("ToBuild",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("ToStrategy",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("FromTerm",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("FromMetaExpr",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("FromMetaLis!
 tExpr",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("FromStrategy",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("FromApp",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("meta-listvar",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("meta-var",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("Location",FunType([ConstType(Sort("FirstLine",[])),ConstType(Sort("FirstColumn",[])),ConstType(Sort("LastLine",[])),ConstType(Sort("LastColumn",[]))],ConstType(Sort("Location",[])))),ExtOpDecl("Comment",FunType([ConstType(Sort("String",[]))],ConstType(Sort("AnnoKey",[])))),ExtOpDecl("AddPadding",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("AddPadding",[])))),ExtOpDecl("PaddingContext",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("PaddingContext",[])))),ExtOpDecl("PaddingId",FunType([ConstType(Sort("Term",[]))],ConstType(Sort!
 ("PaddingId",[])))),ExtOpDecl("PaddingStart",ConstType(Sort("Padding
rt",[]))),ExtOpDecl("indentpadding",ConstType(Sort("Attr",[]))),ExtOpDecl("parse-tree",FunType([ConstType(Sort("Term",[])),ConstType(Sort("Term",[]))],ConstType(SortVar("parse-tree")))),ExtOpDecl("Stop",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("seq",FunType([ConstType(Sort("List",[Sort("Symbol",[])]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("layout",FunType([ConstType(Sort("List",[Sort("Foo",[])]))],ConstType(Sort("Layout",[])))),ExtOpDecl("Ins",FunType([ConstType(SortVar("a"))],ConstType(Sort("List",[SortVar("a")])))),ExtOpDecl("Conc",FunType([ConstType(Sort("List",[SortVar("a")])),ConstType(Sort("List",[SortVar("a")])),ConstType(Sort("List",[SortVar("a")]))],ConstType(Sort("List",[SortVar("a")])))),ExtOpDecl("Snoc",FunType([ConstType(Sort("List",[SortVar("a")])),ConstType(SortVar("a"))],ConstType(Sort("List",[SortVar("a")])))),ExtOpDecl("ast",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("parsetree",FunType!
 ([ConstType(Sort("Tree",[])),ConstType(Sort("NatCon",[]))],ConstType(Sort("ParseTree",[])))),ExtOpDecl("amb",FunType([ConstType(Sort("List",[Sort("Tree",[])]))],ConstType(Sort("Tree",[])))),ExtOpDecl("cilit",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Tree",[])))),ExtOpDecl("char",FunType([ConstType(Sort("NatCon",[]))],ConstType(Sort("Tree",[])))),ExtOpDecl("cons",FunType([ConstType(Sort("String",[]))],ConstType(Sort("ATerm",[])))),ExtOpDecl("character",FunType([ConstType(Sort("NatCon",[]))],ConstType(Sort("CharRange",[])))),ExtOpDecl("parametrized-sort",FunType([ConstType(Sort("String",[])),ConstType(Sort("List",[Sort("Symbol",[])]))],ConstType(Sort("Symbol",[])))),ExtOpDecl("module",FunType([ConstType(Sort("ModuleName",[]))],ConstType(Sort("Import",[])))),ExtOpDecl("module",FunType([ConstType(Sort("ModuleName",[])),ConstType(Sort("List",[Sort("ImpSection",[])])),ConstType(Sort("Sections",[]))],ConstType(Sort("Module",[])))),ExtOpDecl("id",FunType([ConstType(Sor!
 t("String",[]))],ConstType(Sort("Attr",[])))),ExtOpDecl("sorts",FunT
([ConstType(Sort("Symbols",[]))],ConstType(Sort("Grammar",[])))),OpDecl("COMPLETION",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Term",[])))),OpDecl("NOCONTEXT",FunType([ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),OpDecl("MARKER",ConstType(Sort("Term",[]))),OpDecl("Module",FunType([ConstType(Sort("ID",[])),ConstType(Sort("List",[Sort("Definition",[])]))],ConstType(Sort("Start",[])))),OpDecl("Entity",FunType([ConstType(Sort("ID",[])),ConstType(Sort("List",[Sort("Property",[])]))],ConstType(Sort("Definition",[])))),OpDecl("Property",FunType([ConstType(Sort("ID",[])),ConstType(Sort("Type",[]))],ConstType(Sort("Property",[])))),OpDecl("Type",FunType([ConstType(Sort("ID",[]))],ConstType(Sort("Type",[])))),ExtOpDecl("Some",FunType([ConstType(SortVar("a"))],ConstType(Sort("Option",[SortVar("a")])))),ExtOpDecl("None",ConstType(Sort("Option",[SortVar("a")]))),ExtOpDecl("Cons",FunType([ConstType(SortVar("a")),ConstType(Sort("List",[SortVar("a")]))],ConstType(So!
 rt("List",[SortVar("a")])))),ExtOpDecl("Nil",ConstType(Sort("List",[SortVar("a")]))),ExtOpDecl("Conc",FunType([ConstType(Sort("List",[SortVar("a")])),ConstType(Sort("List",[SortVar("a")]))],ConstType(Sort("List",[SortVar("a")])))),ExtOpDecl("CL",ConstType(Sort("FONT-PARAM",[]))),ExtOpDecl("SZ",ConstType(Sort("FONT-PARAM",[]))),ExtOpDecl("SH",ConstType(Sort("FONT-PARAM",[]))),ExtOpDecl("SE",ConstType(Sort("FONT-PARAM",[]))),ExtOpDecl("FM",ConstType(Sort("FONT-PARAM",[]))),ExtOpDecl("FN",ConstType(Sort("FONT-PARAM",[]))),ExtOpDecl("MATH",ConstType(Sort("FONT-OPERATOR",[]))),ExtOpDecl("NUM",ConstType(Sort("FONT-OPERATOR",[]))),ExtOpDecl("VAR",ConstType(Sort("FONT-OPERATOR",[]))),ExtOpDecl("KW",ConstType(Sort("FONT-OPERATOR",[]))),ExtOpDecl("F",FunType([ConstType(Sort("List",[Sort("F-OPTION",[])]))],ConstType(Sort("FONT-OPERATOR",[])))),ExtOpDecl("FFID",FunType([ConstType(Sort("FONT-PARAM",[])),ConstType(Sort("FID",[]))],ConstType(Sort("F-OPTION",[])))),ExtOpDecl("FNAT",FunType!
 ([ConstType(Sort("FONT-PARAM",[])),ConstType(Sort("NatCon",[]))],Con
ype(Sort("F-OPTION",[])))),ExtOpDecl("AOPTIONS",FunType([ConstType(Sort("List",[Sort("A-OPTION",[])]))],ConstType(Sort("A-OPTIONS",[])))),ExtOpDecl("AR",FunType([ConstType(Sort("List",[Sort("S-OPTION",[])]))],ConstType(Sort("A-OPTION",[])))),ExtOpDecl("AC",FunType([ConstType(Sort("List",[Sort("S-OPTION",[])]))],ConstType(Sort("A-OPTION",[])))),ExtOpDecl("AL",FunType([ConstType(Sort("List",[Sort("S-OPTION",[])]))],ConstType(Sort("A-OPTION",[])))),ExtOpDecl("IS",ConstType(Sort("SPACE-SYMBOL",[]))),ExtOpDecl("HS",ConstType(Sort("SPACE-SYMBOL",[]))),ExtOpDecl("VS",ConstType(Sort("SPACE-SYMBOL",[]))),ExtOpDecl("SOptB",FunType([ConstType(Sort("SPACE-SYMBOL",[])),ConstType(Sort("BOX",[]))],ConstType(Sort("S-OPTION",[])))),ExtOpDecl("SOpt",FunType([ConstType(Sort("SPACE-SYMBOL",[])),ConstType(Sort("NatCon",[]))],ConstType(Sort("S-OPTION",[])))),ExtOpDecl("LNAT",FunType([ConstType(Sort("NatCon",[])),ConstType(Sort("BOX",[]))],ConstType(Sort("BOX",[])))),ExtOpDecl("L",FunType([ConstTy!
 pe(Sort("BOX",[])),ConstType(Sort("BOX",[]))],ConstType(Sort("BOX",[])))),ExtOpDecl("C",FunType([ConstType(Sort("List",[Sort("S-OPTION",[])])),ConstType(Sort("List",[Sort("BOX",[])]))],ConstType(Sort("BOX",[])))),ExtOpDecl("REF",FunType([ConstType(Sort("BoxLiteral",[])),ConstType(Sort("BOX",[]))],ConstType(Sort("BOX",[])))),ExtOpDecl("LBL",FunType([ConstType(Sort("BoxLiteral",[])),ConstType(Sort("BOX",[]))],ConstType(Sort("BOX",[])))),ExtOpDecl("FBOX",FunType([ConstType(Sort("FONT-OPERATOR",[])),ConstType(Sort("BOX",[]))],ConstType(Sort("BOX",[])))),ExtOpDecl("R",FunType([ConstType(Sort("List",[Sort("S-OPTION",[])])),ConstType(Sort("List",[Sort("BOX",[])]))],ConstType(Sort("BOX",[])))),ExtOpDecl("A",FunType([ConstType(Sort("A-OPTIONS",[])),ConstType(Sort("List",[Sort("S-OPTION",[])])),ConstType(Sort("List",[Sort("BOX",[])]))],ConstType(Sort("BOX",[])))),ExtOpDecl("ALT",FunType([ConstType(Sort("BOX",[])),ConstType(Sort("BOX",[]))],ConstType(Sort("BOX",[])))),ExtOpDecl("HV",F!
 unType([ConstType(Sort("List",[Sort("S-OPTION",[])])),ConstType(Sort
ist",[Sort("BOX",[])]))],ConstType(Sort("BOX",[])))),ExtOpDecl("V",FunType([ConstType(Sort("List",[Sort("S-OPTION",[])])),ConstType(Sort("List",[Sort("BOX",[])]))],ConstType(Sort("BOX",[])))),ExtOpDecl("H",FunType([ConstType(Sort("List",[Sort("S-OPTION",[])])),ConstType(Sort("List",[Sort("BOX",[])]))],ConstType(Sort("BOX",[])))),ExtOpDecl("S",FunType([ConstType(Sort("BoxLiteral",[]))],ConstType(Sort("BOX",[])))),ExtOpDecl("selector",FunType([ConstType(Sort("NatCon",[])),ConstType(Sort("UQLiteral",[]))],ConstType(Sort("Selector",[])))),ExtOpDecl("Path",FunType([ConstType(Sort("ConsName",[])),ConstType(Sort("List",[Sort("Selector",[])]))],ConstType(Sort("Path",[])))),ExtOpDecl("Path1",FunType([ConstType(Sort("ConsName",[]))],ConstType(Sort("Path",[])))),ExtOpDecl("PP-Entry",FunType([ConstType(Sort("Path",[])),ConstType(Sort("List",[Sort("BOX",[])]))],ConstType(Sort("PP-Entry",[])))),ExtOpDecl("PP-Table",FunType([ConstType(Sort("List",[Sort("PP-Entry",[])]))],ConstType(Sort("PP!
 -Table",[])))),ExtOpDecl("Arg2",FunType([ConstType(Sort("NatCon",[])),ConstType(Sort("NatCon",[]))],ConstType(Sort("BOX",[])))),ExtOpDecl("Arg",FunType([ConstType(Sort("NatCon",[]))],ConstType(Sort("BOX",[])))),ExtOpDecl("Signal",FunType([ConstType(Sort("String",[])),ConstType(Sort("Int",[])),ConstType(Sort("String",[]))],ConstType(Sort("Signal",[])))),ExtOpDecl("UnknownSignal",FunType([ConstType(Sort("Int",[]))],ConstType(Sort("Signal",[])))),ExtOpDecl("WaitStatus",FunType([ConstType(Sort("Int",[])),ConstType(Sort("Int",[])),ConstType(Sort("Int",[]))],ConstType(Sort("WaitStatus",[])))),ExtOpDecl("F_OK",ConstType(Sort("AccessPermission",[]))),ExtOpDecl("R_OK",ConstType(Sort("AccessPermission",[]))),ExtOpDecl("W_OK",ConstType(Sort("AccessPermission",[]))),ExtOpDecl("X_OK",ConstType(Sort("AccessPermission",[]))),ExtOpDecl("Pipe",FunType([ConstType(Sort("Int",[])),ConstType(Sort("Int",[]))],ConstType(Sort("Pipe",[])))),ExtOpDecl("EpochTime",FunType([ConstType(Sort("Int",[]))],!
 ConstType(Sort("EpochTime",[])))),ExtOpDecl("ComponentTime",FunType(
nstType(Sort("Date",[])),ConstType(Sort("DayTime",[])),ConstType(Sort("ComponentTimeDupl",[]))],ConstType(Sort("ComponentTime",[])))),ExtOpDecl("DayTime",FunType([ConstType(Sort("Int",[])),ConstType(Sort("Int",[])),ConstType(Sort("Int",[]))],ConstType(Sort("DayTime",[])))),ExtOpDecl("Date",FunType([ConstType(Sort("Int",[])),ConstType(Sort("Month",[])),ConstType(Sort("Int",[]))],ConstType(Sort("Date",[])))),ExtOpDecl("Dupl",FunType([ConstType(Sort("Int",[])),ConstType(Sort("Int",[]))],ConstType(Sort("ComponentTimeDupl",[])))),ExtOpDecl("January",ConstType(Sort("Month",[]))),ExtOpDecl("February",ConstType(Sort("Month",[]))),ExtOpDecl("March",ConstType(Sort("Month",[]))),ExtOpDecl("April",ConstType(Sort("Month",[]))),ExtOpDecl("May",ConstType(Sort("Month",[]))),ExtOpDecl("June",ConstType(Sort("Month",[]))),ExtOpDecl("July",ConstType(Sort("Month",[]))),ExtOpDecl("August",ConstType(Sort("Month",[]))),ExtOpDecl("September",ConstType(Sort("Month",[]))),ExtOpDecl("October",ConstType!
 (Sort("Month",[]))),ExtOpDecl("November",ConstType(Sort("Month",[]))),ExtOpDecl("December",ConstType(Sort("Month",[]))),ExtOpDecl("Sunday",ConstType(Sort("DayOfWeek",[]))),ExtOpDecl("Monday",ConstType(Sort("DayOfWeek",[]))),ExtOpDecl("Tuesday",ConstType(Sort("DayOfWeek",[]))),ExtOpDecl("Wednesday",ConstType(Sort("DayOfWeek",[]))),ExtOpDecl("Thursday",ConstType(Sort("DayOfWeek",[]))),ExtOpDecl("Friday",ConstType(Sort("DayOfWeek",[]))),ExtOpDecl("Saturday",ConstType(Sort("DayOfWeek",[]))),ExtOpDecl("Emergency",ConstType(Sort("Severity",[]))),ExtOpDecl("Alert",ConstType(Sort("Severity",[]))),ExtOpDecl("Critical",ConstType(Sort("Severity",[]))),ExtOpDecl("Error",ConstType(Sort("Severity",[]))),ExtOpDecl("Warning",ConstType(Sort("Severity",[]))),ExtOpDecl("Notice",ConstType(Sort("Severity",[]))),ExtOpDecl("Info",ConstType(Sort("Severity",[]))),ExtOpDecl("Debug",ConstType(Sort("Severity",[]))),ExtOpDecl("Vomit",ConstType(Sort("Severity",[]))),ExtOpDecl("Program",FunType([ConstTyp!
 e(Sort("String",[]))],ConstType(Sort("Option",[])))),ExtOpDecl("Unde
ed",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Option",[])))),ExtOpDecl("GraphLet",FunType([ConstType(Sort("List",[Sort("Product",[Sort("Cons",[Sort("Int",[]),Sort("Cons",[Sort("Term",[]),Sort("Nil",[])])])])])),ConstType(Sort("Term",[]))],ConstType(Sort("Term",[])))),ExtOpDecl("Infinite",ConstType(Sort("IntI",[]))),ExtOpDecl("Anno",FunType([ConstType(SortVar("a")),ConstType(SortVar("b"))],ConstType(SortVar("a")))),ExtOpDecl("Stream",FunType([ConstType(Sort("ImplDep",[]))],ConstType(Sort("Stream",[])))),ExtOpDecl("Path",FunType([ConstType(Sort("String",[]))],ConstType(Sort("FileLoc",[])))),ExtOpDecl("stdin",ConstType(Sort("FileLoc",[]))),ExtOpDecl("stdout",ConstType(Sort("FileLoc",[]))),ExtOpDecl("stderr",ConstType(Sort("FileLoc",[]))),ExtOpDecl("ErrorNumber",FunType([ConstType(Sort("Int",[]))],ConstType(Sort("Error",[])))),ExtOpDecl("RuleScope",FunType([ConstType(Sort("IndexedSet",[])),ConstType(Sort("Hashtable",[]))],ConstType(Sort("RuleScope",[])))),ExtOpDecl(!
 "ChangeSet",FunType([ConstType(Sort("IndexedSet",[])),ConstType(Sort("IndexedSet",[])),ConstType(Sort("Hashtable",[]))],ConstType(Sort("RuleScope",[])))),ExtOpDecl("Label",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Label",[])))),ExtOpDecl("SplitPos",FunType([ConstType(Sort("String",[])),ConstType(Sort("String",[]))],ConstType(Sort("SplitPos",[])))),ExtOpDecl("BreakCS",FunType([ConstType(Sort("String",[])),ConstType(Sort("String",[]))],ConstType(Sort("BreakCS",[])))),ExtOpDecl("ContinueCS",FunType([ConstType(Sort("String",[])),ConstType(Sort("String",[]))],ConstType(Sort("ContinueCS",[])))),ExtOpDecl("IgnoreB",FunType([ConstType(Sort("String",[]))],ConstType(Sort("IgnoreB",[])))),ExtOpDecl("IgnoreC",FunType([ConstType(Sort("String",[]))],ConstType(Sort("IgnoreC",[])))),ExtOpDecl("Catch",FunType([ConstType(Sort("String",[])),ConstType(Sort("String",[]))],ConstType(Sort("Catch",[])))),ExtOpDecl("Finally",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Finall!
 y",[])))),ExtOpDecl("TryBlock",FunType([ConstType(Sort("Int",[])),Co
Type(Sort("String",[])),ConstType(Sort("Cons",[Sort("Catch",[]),Sort("Nil",[])])),ConstType(Sort("Finally",[]))],ConstType(Sort("TryBlock",[])))),ExtOpDecl("Structure",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Structure",[])))),ExtOpDecl("IgnoreT",FunType([ConstType(Sort("String",[]))],ConstType(Sort("IgnoreT",[])))),ExtOpDecl("ThrowCS",FunType([ConstType(Sort("String",[])),ConstType(Sort("String",[]))],ConstType(Sort("ThrowCS",[])))),ExtOpDecl("ExceptionCS",FunType([ConstType(Sort("String",[])),ConstType(Sort("String",[]))],ConstType(Sort("ExceptionCS",[])))),ExtOpDecl("IndexedSet",FunType([ConstType(Sort("ImplDep",[]))],ConstType(Sort("IndexedSet",[])))),ExtOpDecl("Scopes",ConstType(Sort("Key",[]))),ExtOpDecl("NestedTable",FunType([ConstType(Sort("Hashtable",[]))],ConstType(Sort("TableValue",[])))),ExtOpDecl("Tables",ConstType(Sort("TableKey",[]))),ExtOpDecl("NewTable",ConstType(Sort("TableKey",[]))),ExtOpDecl("Hashtable",FunType([ConstType(Sort("ImplDep",[]))!
 ],ConstType(Sort("Hashtable",[])))),ExtOpDecl("",FunType([ConstType(SortVar("a"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Nil",[])])])))),ExtOpDecl("",ConstType(Sort("Tuple",[Sort("Nil",[])]))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Nil",[])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Nil",[])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Nil",[])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(Sort!
 Var("d")),ConstType(SortVar("e"))],ConstType(Sort("Tuple",[Sort("Con
[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Nil",[])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Nil",[])])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Nil",[])])])])])])])])])))),ExtOpDecl("",FunType([ConstType!
 (SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Nil",[])])])])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h")),ConstType(SortVar("i"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),Sort("Nil",[])])])])])])])])])])])))),E!
 xtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b"))
nstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h")),ConstType(SortVar("i")),ConstType(SortVar("j"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),Sort("Cons",[SortVar("j"),Sort("Nil",[])])])])])])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h")),ConstType(SortVar("i")),ConstType(SortVar("j")),ConstType(SortVar("k"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("C!
 ons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),Sort("Cons",[SortVar("j"),Sort("Cons",[SortVar("k"),Sort("Nil",[])])])])])])])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h")),ConstType(SortVar("i")),ConstType(SortVar("j")),ConstType(SortVar("k")),ConstType(SortVar("l"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),Sort("Cons",[SortVar("j"),Sort("Cons",[SortVar("k"),Sort("Cons",[SortVar("l"),Sort("Nil",[])])])])])])])])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(Sort!
 Var("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(
tVar("h")),ConstType(SortVar("i")),ConstType(SortVar("j")),ConstType(SortVar("k")),ConstType(SortVar("l")),ConstType(SortVar("m"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),Sort("Cons",[SortVar("j"),Sort("Cons",[SortVar("k"),Sort("Cons",[SortVar("l"),Sort("Cons",[SortVar("m"),Sort("Nil",[])])])])])])])])])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h")),ConstType(SortVar("i")),ConstType(SortVar("j")),ConstType(SortVar("k")),ConstType(SortVar("l")),ConstType(SortVar("m")),ConstType(SortVar("n"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[S!
 ortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),Sort("Cons",[SortVar("j"),Sort("Cons",[SortVar("k"),Sort("Cons",[SortVar("l"),Sort("Cons",[SortVar("m"),Sort("Cons",[SortVar("n"),Sort("Nil",[])])])])])])])])])])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h")),ConstType(SortVar("i")),ConstType(SortVar("j")),ConstType(SortVar("k")),ConstType(SortVar("l")),ConstType(SortVar("m")),ConstType(SortVar("n")),ConstType(SortVar("o"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),S!
 ort("Cons",[SortVar("j"),Sort("Cons",[SortVar("k"),Sort("Cons",[Sort
("l"),Sort("Cons",[SortVar("m"),Sort("Cons",[SortVar("n"),Sort("Cons",[SortVar("o"),Sort("Nil",[])])])])])])])])])])])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h")),ConstType(SortVar("i")),ConstType(SortVar("j")),ConstType(SortVar("k")),ConstType(SortVar("l")),ConstType(SortVar("m")),ConstType(SortVar("n")),ConstType(SortVar("o")),ConstType(SortVar("p"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),Sort("Cons",[SortVar("j"),Sort("Cons",[SortVar("k"),Sort("Cons",[SortVar("l"),Sort("Cons",[SortVar("m"),Sort("Cons",[SortVar("n"),Sort("Cons",[SortVar("o"),Sort("Cons",[SortVar("p"),Sort("Ni!
 l",[])])])])])])])])])])])])])])])])])])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h")),ConstType(SortVar("i")),ConstType(SortVar("j")),ConstType(SortVar("k")),ConstType(SortVar("l")),ConstType(SortVar("m")),ConstType(SortVar("n")),ConstType(SortVar("o")),ConstType(SortVar("p")),ConstType(SortVar("q"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),Sort("Cons",[SortVar("j"),Sort("Cons",[SortVar("k"),Sort("Cons",[SortVar("l"),Sort("Cons",[SortVar("m"),Sort("Cons",[SortVar("n"),Sort("Cons",[SortVar("o"),Sort("Cons",[SortVar("p"),Sort("Cons",[SortVar("q"),Sort("Nil",[])])])])])])])])])])])])])])])])])]!
 )])))),ExtOpDecl("",FunType([ConstType(SortVar("a")),ConstType(SortV
"b")),ConstType(SortVar("c")),ConstType(SortVar("d")),ConstType(SortVar("e")),ConstType(SortVar("f")),ConstType(SortVar("g")),ConstType(SortVar("h")),ConstType(SortVar("i")),ConstType(SortVar("j")),ConstType(SortVar("k")),ConstType(SortVar("l")),ConstType(SortVar("m")),ConstType(SortVar("n")),ConstType(SortVar("o")),ConstType(SortVar("p")),ConstType(SortVar("q")),ConstType(SortVar("r"))],ConstType(Sort("Tuple",[Sort("Cons",[SortVar("a"),Sort("Cons",[SortVar("b"),Sort("Cons",[SortVar("c"),Sort("Cons",[SortVar("d"),Sort("Cons",[SortVar("e"),Sort("Cons",[SortVar("f"),Sort("Cons",[SortVar("g"),Sort("Cons",[SortVar("h"),Sort("Cons",[SortVar("i"),Sort("Cons",[SortVar("j"),Sort("Cons",[SortVar("k"),Sort("Cons",[SortVar("l"),Sort("Cons",[SortVar("m"),Sort("Cons",[SortVar("n"),Sort("Cons",[SortVar("o"),Sort("Cons",[SortVar("p"),Sort("Cons",[SortVar("q"),Sort("Cons",[SortVar("r"),Sort("Nil",[])])])])])])])])])])])])])])])])])])])]))))])]),Strategies([SDefT("to_java_0_0",[],[],GuardedL!
 Choice(Scope(["z_18","a_19","b_19","b_20","e_20","h_20","i_20","k_20","o_19","p_19","q_19","r_19","j_20","l_20","x_19","y_19","z_19","a_20"],Seq(Match(Anno(Op("Module",[Var("z_18"),Var("a_19")]),Wld)),Seq(Match(Var("b_20")),Seq(GuardedLChoice(Seq(Build(Var("a_19")),Seq(CallT(SVar("to_java_0_0"),[],[]),Match(Var("b_19")))),Id,Scope(["c_19","e_19","c_20","d_20"],Seq(Match(Var("c_19")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Var("e_19")),Seq(Build(Var("c_19")),Seq(Match(Var("d_20")),Seq(Build(Anno(Str("Internal error: with clause failed unexpectedly in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("c_20")),Seq(Build(Var("d_20")),CallT(SVar("report_with_failure_0_2"),[],[Var("c_20"),Var("e_19")]))))))))))),Seq(Build(Var("b_20")),Seq(Match(Var("h_20")),Seq(Match(Var("k_20")),Seq(Build(Var("z_18")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"!
 ),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),I
cope(["g_19","j_19","k_19","l_19"],Seq(Match(Var("g_19")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("j_19")]),Wld)),Seq(Build(Var("j_19")),Seq(Match(Var("l_19")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("k_19")),Seq(Build(Var("l_19")),CallT(SVar("report_failure_0_2"),[],[Var("k_19"),Var("g_19")])))))))))))))),Seq(Match(Var("q_19")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("o_19")),Seq(Build(Var("q_19")),Seq(Match(Var("r_19")),Seq(Build(Anno(Str("\n        "),Op("Nil",[]))),Seq(Match(Var("p_19")),Seq(Build(Var("r_19")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("o_19"),Var("p_19")]),Seq(Match(Var("i_20")),Seq(Build(Var("k_20")),Seq(Match(Var("l_20")),Seq(Build(Var("b_19")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_strin!
 g_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["s_19","t_19","u_19","w_19"],Seq(Match(Var("s_19")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("t_19")]),Wld)),Seq(Build(Var("t_19")),Seq(Match(Var("w_19")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("u_19")),Seq(Build(Var("w_19")),CallT(SVar("report_failure_0_2"),[],[Var("u_19"),Var("s_19")])))))))))))))),Seq(Match(Var("z_19")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("x_19")),Seq(Build(Var("z_19")),Seq(Match(Var("a_20")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("y_19")),Seq(Build(Var("a_20")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("x_19"),Var("y_19")]),Seq(Match(Var("j_20")),Seq(Build(Var("l_20")),Seq(Build(Anno(Op("Cons",[Anno(Str("package "),Op("Nil",[])),Anno(Op("Cons",[Var("i_20"),Anno(Op("Cons",[Anno(Str(";\n\n"),Op("Nil!
 ",[])),Anno(Op("Cons",[Var("j_20"),Anno(Op("Cons",[Anno(Str("\n"),Op
il",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat_strings_0_0"),[],[]),Seq(Match(Var("e_20")),Seq(Build(Var("h_20")),Build(Anno(Var("e_20"),Op("Nil",[]))))))))))))))))))))))))))))))))))))))))),Id,GuardedLChoice(Scope(["h_17","i_17","j_17","i_18","n_18","p_18","q_18","s_18","r_17","t_17","u_17","v_17","r_18","v_18","d_18","e_18","g_18","h_18"],Seq(Match(Anno(Op("Entity",[Var("h_17"),Var("i_17")]),Wld)),Seq(Match(Var("i_18")),Seq(GuardedLChoice(Seq(Build(Var("i_17")),Seq(CallT(SVar("to_java_0_0"),[],[]),Match(Var("j_17")))),Id,Scope(["k_17","l_17","k_18","l_18"],Seq(Match(Var("k_17")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Var("l_17")),Seq(Build(Var("k_17")),Seq(Match(Var("l_18")),Seq(Build(Anno(Str("Internal error: with clause failed unexpectedly in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("k_18")),Seq(Build(Var("l_18")),CallT(SVar("report_with_failure_!
 0_2"),[],[Var("k_18"),Var("l_17")]))))))))))),Seq(Build(Var("i_18")),Seq(Match(Var("p_18")),Seq(Match(Var("s_18")),Seq(Build(Var("h_17")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["n_17","o_17","p_17","q_17"],Seq(Match(Var("n_17")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("o_17")]),Wld)),Seq(Build(Var("o_17")),Seq(Match(Var("q_17")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("p_17")),Seq(Build(Var("q_17")),CallT(SVar("report_failure_0_2"),[],[Var("p_17"),Var("n_17")])))))))))))))),Seq(Match(Var("u_17")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("r_17")),Seq(Build(Var("u_17")),Seq(Match(Var("v_17")),Seq(Build(Anno(Str("\n      "),Op("Ni!
 l",[]))),Seq(Match(Var("t_17")),Seq(Build(Var("v_17")),Seq(CallT(SVa
string_replace_0_2"),[],[Var("r_17"),Var("t_17")]),Seq(Match(Var("q_18")),Seq(Build(Var("s_18")),Seq(Match(Var("v_18")),Seq(Build(Var("j_17")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["w_17","y_17","a_18","b_18"],Seq(Match(Var("w_17")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("y_17")]),Wld)),Seq(Build(Var("y_17")),Seq(Match(Var("b_18")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("a_18")),Seq(Build(Var("b_18")),CallT(SVar("report_failure_0_2"),[],[Var("a_18"),Var("w_17")])))))))))))))),Seq(Match(Var("g_18")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("d_18")),Seq(Build(Var("g_18")),Seq(Match(Var("h_18")),Seq(Build(Anno(Str("\n    "),Op("!
 Nil",[]))),Seq(Match(Var("e_18")),Seq(Build(Var("h_18")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("d_18"),Var("e_18")]),Seq(Match(Var("r_18")),Seq(Build(Var("v_18")),Seq(Build(Anno(Op("Cons",[Anno(Str("class "),Op("Nil",[])),Anno(Op("Cons",[Var("q_18"),Anno(Op("Cons",[Anno(Str(" {\n    "),Op("Nil",[])),Anno(Op("Cons",[Var("r_18"),Anno(Op("Cons",[Anno(Str("\n}\n"),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat_strings_0_0"),[],[]),Seq(Match(Var("n_18")),Seq(Build(Var("p_18")),Build(Anno(Var("n_18"),Op("Nil",[]))))))))))))))))))))))))))))))))))))))))),Id,GuardedLChoice(Scope(["l_12","m_12","y_15","z_15","a_16","k_16","t_12","u_12","w_12","x_12","b_16","l_16","f_13","g_13","h_13","i_13","c_16","m_16","n_13","o_13","p_13","q_13","d_16","n_16","v_13","w_13","x_13","y_13","e_16","q_16","d_14","e_14","f_14","g_14","f_16","s_16","l_14","m_14","n_14","o_14","g_16","t_16","t_14"!
 ,"u_14","v_14","w_14","h_16","u_16","c_15","d_15","e_15","f_15","i_1
"v_16","k_15","l_15","m_15","n_15","j_16","y_16","u_15","v_15","w_15","x_15"],Seq(Match(Anno(Op("Property",[Var("m_12"),Anno(Op("Type",[Var("l_12")]),Wld)]),Wld)),Seq(Match(Var("z_15")),Seq(Match(Var("k_16")),Seq(Build(Var("l_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["p_12","q_12","r_12","s_12"],Seq(Match(Var("p_12")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("q_12")]),Wld)),Seq(Build(Var("q_12")),Seq(Match(Var("s_12")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("r_12")),Seq(Build(Var("s_12")),CallT(SVar("report_failure_0_2"),[],[Var("r_12"),Var("p_12")])))))))))))))),Seq(Match(Var("w_12")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var!
 ("t_12")),Seq(Build(Var("w_12")),Seq(Match(Var("x_12")),Seq(Build(Anno(Str("\n        "),Op("Nil",[]))),Seq(Match(Var("u_12")),Seq(Build(Var("x_12")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("t_12"),Var("u_12")]),Seq(Match(Var("a_16")),Seq(Build(Var("k_16")),Seq(Seq(Match(Var("l_16")),Seq(Build(Var("m_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["a_13","b_13","d_13","e_13"],Seq(Match(Var("a_13")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("b_13")]),Wld)),Seq(Build(Var("b_13")),Seq(Match(Var("e_13")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("d_13")),Seq(Build(Var("e_13")),CallT(SVar("report_failure_0_2"),[],[Var("d_13"),Var("a_13")])))))))))!
 ))))),Seq(Match(Var("h_13")),Seq(Build(Anno(Str("\n"),Op("Nil",[])))
q(Match(Var("f_13")),Seq(Build(Var("h_13")),Seq(Match(Var("i_13")),Seq(Build(Anno(Str("\n            "),Op("Nil",[]))),Seq(Match(Var("g_13")),Seq(Build(Var("i_13")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("f_13"),Var("g_13")]),Seq(Match(Var("b_16")),Seq(Build(Var("l_16")),Seq(Match(Var("m_16")),Seq(Build(Var("l_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["j_13","k_13","l_13","m_13"],Seq(Match(Var("j_13")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("k_13")]),Wld)),Seq(Build(Var("k_13")),Seq(Match(Var("m_13")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("l_13")),Seq(Build(Var("m_13")),CallT(SVar("report_failure_0_2"),[],[Var("l_13"),Var("j_13")!
 ])))))))))))))),Seq(Match(Var("p_13")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("n_13")),Seq(Build(Var("p_13")),Seq(Match(Var("q_13")),Seq(Build(Anno(Str("\n       "),Op("Nil",[]))),Seq(Match(Var("o_13")),Seq(Build(Var("q_13")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("n_13"),Var("o_13")]),Seq(Match(Var("c_16")),Seq(Build(Var("m_16")),Seq(Match(Var("n_16")),Seq(Build(Var("m_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["r_13","s_13","t_13","u_13"],Seq(Match(Var("r_13")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("s_13")]),Wld)),Seq(Build(Var("s_13")),Seq(Match(Var("u_13")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("t_13")),Seq(Bu!
 ild(Var("u_13")),CallT(SVar("report_failure_0_2"),[],[Var("t_13"),Va
r_13")])))))))))))))),Seq(Match(Var("x_13")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("v_13")),Seq(Build(Var("x_13")),Seq(Match(Var("y_13")),Seq(Build(Anno(Str("\n               "),Op("Nil",[]))),Seq(Match(Var("w_13")),Seq(Build(Var("y_13")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("v_13"),Var("w_13")]),Seq(Match(Var("d_16")),Seq(Build(Var("n_16")),Seq(Match(Var("q_16")),Seq(Build(Var("m_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["z_13","a_14","b_14","c_14"],Seq(Match(Var("z_13")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("a_14")]),Wld)),Seq(Build(Var("a_14")),Seq(Match(Var("c_14")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("b!
 _14")),Seq(Build(Var("c_14")),CallT(SVar("report_failure_0_2"),[],[Var("b_14"),Var("z_13")])))))))))))))),Seq(Match(Var("f_14")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("d_14")),Seq(Build(Var("f_14")),Seq(Match(Var("g_14")),Seq(Build(Anno(Str("\n           "),Op("Nil",[]))),Seq(Match(Var("e_14")),Seq(Build(Var("g_14")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("d_14"),Var("e_14")]),Seq(Match(Var("e_16")),Seq(Build(Var("q_16")),Seq(Match(Var("s_16")),Seq(Build(Var("m_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["h_14","i_14","j_14","k_14"],Seq(Match(Var("h_14")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("i_14")]),Wld)),Seq(Build(Var("i_14")),Seq(Match(Var("k_14")),Seq(Build(Anno(Str("Internal error: escaped term in str!
 ing quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq
tch(Var("j_14")),Seq(Build(Var("k_14")),CallT(SVar("report_failure_0_2"),[],[Var("j_14"),Var("h_14")])))))))))))))),Seq(Match(Var("n_14")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("l_14")),Seq(Build(Var("n_14")),Seq(Match(Var("o_14")),Seq(Build(Anno(Str("\n                "),Op("Nil",[]))),Seq(Match(Var("m_14")),Seq(Build(Var("o_14")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("l_14"),Var("m_14")]),Seq(Match(Var("f_16")),Seq(Build(Var("s_16")),Seq(Match(Var("t_16")),Seq(Build(Var("l_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["p_14","q_14","r_14","s_14"],Seq(Match(Var("p_14")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("q_14")]),Wld)),Seq(Build(Var("q_14")),Seq(Match(Var("s_14")),Seq(Build(Anno(Str("Internal error: escap!
 ed term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("r_14")),Seq(Build(Var("s_14")),CallT(SVar("report_failure_0_2"),[],[Var("r_14"),Var("p_14")])))))))))))))),Seq(Match(Var("v_14")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("t_14")),Seq(Build(Var("v_14")),Seq(Match(Var("w_14")),Seq(Build(Anno(Str("\n                     "),Op("Nil",[]))),Seq(Match(Var("u_14")),Seq(Build(Var("w_14")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("t_14"),Var("u_14")]),Seq(Match(Var("g_16")),Seq(Build(Var("t_16")),Seq(Match(Var("u_16")),Seq(Build(Var("m_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["x_14","y_14","z_14","a_15"],Seq(Match(Var("x_14")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("y_14")]),Wl!
 d)),Seq(Build(Var("y_14")),Seq(Match(Var("a_15")),Seq(Build(Anno(Str
nternal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("z_14")),Seq(Build(Var("a_15")),CallT(SVar("report_failure_0_2"),[],[Var("z_14"),Var("x_14")])))))))))))))),Seq(Match(Var("e_15")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("c_15")),Seq(Build(Var("e_15")),Seq(Match(Var("f_15")),Seq(Build(Anno(Str("\n                         "),Op("Nil",[]))),Seq(Match(Var("d_15")),Seq(Build(Var("f_15")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("c_15"),Var("d_15")]),Seq(Match(Var("h_16")),Seq(Build(Var("u_16")),Seq(Match(Var("v_16")),Seq(Build(Var("m_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["g_15","h_15","i_15","j_15"],Seq(Match(Var("g_15")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons!
 ",[Wld,Var("h_15")]),Wld)),Seq(Build(Var("h_15")),Seq(Match(Var("j_15")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("i_15")),Seq(Build(Var("j_15")),CallT(SVar("report_failure_0_2"),[],[Var("i_15"),Var("g_15")])))))))))))))),Seq(Match(Var("m_15")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("k_15")),Seq(Build(Var("m_15")),Seq(Match(Var("n_15")),Seq(Build(Anno(Str("\n         "),Op("Nil",[]))),Seq(Match(Var("l_15")),Seq(Build(Var("n_15")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("k_15"),Var("l_15")]),Seq(Match(Var("i_16")),Seq(Build(Var("v_16")),Seq(Match(Var("y_16")),Seq(Build(Var("m_12")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["o_15","p_15","q_15","t_15"],Seq(Match(Var("o_15")!
 ),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(An
Op("Cons",[Wld,Var("p_15")]),Wld)),Seq(Build(Var("p_15")),Seq(Match(Var("t_15")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'to-java'"),Op("Nil",[]))),Seq(Match(Var("q_15")),Seq(Build(Var("t_15")),CallT(SVar("report_failure_0_2"),[],[Var("q_15"),Var("o_15")])))))))))))))),Seq(Match(Var("w_15")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("u_15")),Seq(Build(Var("w_15")),Seq(Match(Var("x_15")),Seq(Build(Anno(Str("\n               "),Op("Nil",[]))),Seq(Match(Var("v_15")),Seq(Build(Var("x_15")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("u_15"),Var("v_15")]),Seq(Match(Var("j_16")),Seq(Build(Var("y_16")),Build(Anno(Op("Cons",[Anno(Str("\nprivate "),Op("Nil",[])),Anno(Op("Cons",[Var("a_16"),Anno(Op("Cons",[Anno(Str(" "),Op("Nil",[])),Anno(Op("Cons",[Var("b_16"),Anno(Op("Cons",[Anno(Str(";\n\npublic "),Op("Nil",[])),Anno(Op("Cons",[Var("c_16"),Anno(Op("Cons",[Anno(Str(" get_"),Op("Nil",[])),Anno(Op("Cons",[Var("d_16"),An!
 no(Op("Cons",[Anno(Str(" {\n    return "),Op("Nil",[])),Anno(Op("Cons",[Var("e_16"),Anno(Op("Cons",[Anno(Str(";\n}\n\npublic void set_"),Op("Nil",[])),Anno(Op("Cons",[Var("f_16"),Anno(Op("Cons",[Anno(Str(" ("),Op("Nil",[])),Anno(Op("Cons",[Var("g_16"),Anno(Op("Cons",[Anno(Str(" "),Op("Nil",[])),Anno(Op("Cons",[Var("h_16"),Anno(Op("Cons",[Anno(Str(") {\n    this."),Op("Nil",[])),Anno(Op("Cons",[Var("i_16"),Anno(Op("Cons",[Anno(Str(" = "),Op("Nil",[])),Anno(Op("Cons",[Var("j_16"),Anno(Op("Cons",[Anno(Str(";    \n}\n"),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))!
 )))))))))))))))))))))))))))))))))))))))))),Seq(CallT(SVar("concat_st
gs_0_0"),[],[]),Seq(Match(Var("y_15")),Seq(Build(Var("z_15")),Build(Anno(Var("y_15"),Op("Nil",[])))))))))))))))))))))))),Id,GuardedLChoice(Scope(["k_12"],Seq(Match(Anno(Op("Type",[Var("k_12")]),Wld)),Build(Var("k_12")))),Id,Scope(["j_12"],Seq(Match(Var("j_12")),Seq(Build(Var("j_12")),CallT(SVar("map_1_0"),[CallT(SVar("to_java_0_0"),[],[])],[]))))))))),SDefT("analyze_0_0",[],[],Scope(["p_20","u_20"],Seq(Match(Var("p_20")),Seq(Match(Var("u_20")),Seq(GuardedLChoice(Seq(Build(Var("p_20")),CallT(SVar("topdown_1_0"),[CallT(SVar("try_1_0"),[CallT(SVar("record_entity_0_0"),[],[])],[])],[])),Id,Scope(["r_20","s_20","v_20","w_20"],Seq(Match(Var("r_20")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Var("s_20")),Seq(Build(Var("r_20")),Seq(Match(Var("w_20")),Seq(Build(Anno(Str("Internal error: with clause failed unexpectedly in rule 'analyze'"),Op("Nil",[]))),Seq(Match(Var("v_20")),Seq(Build(Var("w_20")),CallT(SVar("report_with_failure_0_2"),[],[Var("v_20"),Var("s_20")!
 ]))))))))))),Seq(Build(Var("u_20")),Build(Var("p_20")))))))),SDefT("record_entity_0_0",[],[],Scope(["b_21","k_21","r_21"],Seq(Match(Anno(Op("Entity",[Var("k_21"),Var("b_21")]),Wld)),Seq(Match(Var("r_21")),Seq(GuardedLChoice(Scope(["l_21","s_21","f_22","g_22","h_22"],Seq(Match(Var("l_21")),Seq(Match(Var("g_22")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("s_21")),Seq(Build(Var("g_22")),Seq(Match(Var("h_22")),Seq(Build(Anno(Op("",[Anno(Str("-391271"),Op("Nil",[])),Var("k_21")]),Op("Nil",[]))),Seq(Match(Var("f_22")),Seq(Build(Var("h_22")),Seq(CallT(SVar("dr_add_rule_0_3"),[],[Var("s_21"),Var("k_21"),Var("f_22")]),Build(Var("l_21"))))))))))))),Id,Scope(["m_21","n_21","i_22","m_22"],Seq(Match(Var("m_21")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Var("n_21")),Seq(Build(Var("m_21")),Seq(Match(Var("m_22")),Seq(Build(Anno(Str("Internal error: with clause failed unexpectedly in rule 'record-entity'"),Op("Nil",[]))),Seq(Match(Var("i_22")),Seq(B!
 uild(Var("m_22")),CallT(SVar("report_with_failure_0_2"),[],[Var("i_2
,Var("n_21")]))))))))))),Seq(Build(Var("r_21")),Build(Anno(Op("Entity",[Var("k_21"),Var("b_21")]),Op("Nil",[]))))))))),SDefT("constraint_error_0_0",[],[],GuardedLChoice(Scope(["d_23","e_23","g_24","k_24","l_24","m_24","v_24","z_23","a_24","b_24","f_24"],Seq(Match(Anno(Op("Property",[Var("d_23"),Anno(Op("Type",[Var("e_23")]),Wld)]),Wld)),Seq(Match(Var("g_24")),Seq(GuardedLChoice(Seq(Build(Var("e_23")),Match(Anno(Str("String"),Wld))),Fail,Id),Seq(GuardedLChoice(Seq(Build(Var("e_23")),Match(Anno(Str("Int"),Wld))),Fail,Id),Seq(GuardedLChoice(Seq(Build(Var("e_23")),CallT(SVar("GetEntity_0_0"),[],[])),Fail,Id),Seq(Build(Var("g_24")),Seq(Match(Var("l_24")),Seq(Match(Var("v_24")),Seq(Build(Var("e_23")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["f_23","g_23","l_23","y_23"],Seq(Match(Var("f_23!
 ")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("g_23")]),Wld)),Seq(Build(Var("g_23")),Seq(Match(Var("y_23")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'constraint-error'"),Op("Nil",[]))),Seq(Match(Var("l_23")),Seq(Build(Var("y_23")),CallT(SVar("report_failure_0_2"),[],[Var("l_23"),Var("f_23")])))))))))))))),Seq(Match(Var("b_24")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("z_23")),Seq(Build(Var("b_24")),Seq(Match(Var("f_24")),Seq(Build(Anno(Str("\n     "),Op("Nil",[]))),Seq(Match(Var("a_24")),Seq(Build(Var("f_24")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("z_23"),Var("a_24")]),Seq(Match(Var("m_24")),Seq(Build(Var("v_24")),Seq(Build(Anno(Op("Cons",[Anno(Str("Type "),Op("Nil",[])),Anno(Op("Cons",[Var("m_24"),Anno(Op("Cons",[Anno(Str(" is not defined"),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat!
 _strings_0_0"),[],[]),Seq(Match(Var("k_24")),Seq(Build(Var("l_24")),
ld(Anno(Op("",[Var("e_23"),Anno(Var("k_24"),Op("Nil",[]))]),Op("Nil",[]))))))))))))))))))))))))))))),Id,Scope(["n_22","r_22","s_22","t_22"],Seq(Match(Anno(Op("Entity",[Var("n_22"),Wld]),Wld)),Seq(Match(Var("r_22")),Seq(GuardedLChoice(Seq(Build(Var("n_22")),Seq(CallT(SVar("bagof_GetEntity_0_0"),[],[]),Match(Anno(Op("Cons",[Wld,Anno(Op("Nil",[]),Wld)]),Wld)))),Fail,Id),Seq(Build(Var("r_22")),Seq(Match(Var("t_22")),Seq(Build(Anno(Op("Cons",[Anno(Str("Duplicate entity name"),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat_strings_0_0"),[],[]),Seq(Match(Var("s_22")),Seq(Build(Var("t_22")),Build(Anno(Op("",[Var("n_22"),Anno(Var("s_22"),Op("Nil",[]))]),Op("Nil",[]))))))))))))))),SDefT("constraint_warning_0_0",[],[],Scope(["y_24","c_25","r_25","u_25"],Seq(Match(Anno(Op("Entity",[Var("y_24"),Wld]),Wld)),Seq(Match(Var("c_25")),Seq(GuardedLChoice(Seq(Build(Var("y_24")),CallT(SVar("string_starts_with_capital_0_0"),[],[])),Fail,Id),Seq(Build(Var("c_2!
 5")),Seq(Match(Var("u_25")),Seq(Build(Anno(Op("Cons",[Anno(Str("Entity names must start with a capital"),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat_strings_0_0"),[],[]),Seq(Match(Var("r_25")),Seq(Build(Var("u_25")),Build(Anno(Op("",[Var("y_24"),Anno(Var("r_25"),Op("Nil",[]))]),Op("Nil",[])))))))))))))),SDefT("constraint_note_0_0",[],[],Scope(["v_25","y_25","e_26"],Seq(Match(Anno(Op("Module",[As(Var("v_25"),Anno(Str("example"),Wld)),Wld]),Wld)),Seq(Match(Var("e_26")),Seq(Build(Anno(Op("Cons",[Anno(Str("This is just an example program in the \"entities\" language\n(this note is defined in trans/check.str)"),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat_strings_0_0"),[],[]),Seq(Match(Var("y_25")),Seq(Build(Var("e_26")),Build(Anno(Op("",[Var("v_25"),Anno(Var("y_25"),Op("Nil",[]))]),Op("Nil",[]))))))))))),SDefT("parse_file_0_0",[],[],CallT(SVar("parse_lwc_file_0_0"),[],[])),SDefT("parse_lwc_file_0!
 _0",[],[],Scope(["f_26","g_26","j_26","k_26"],Seq(Match(Var("g_26"))
q(Match(Var("k_26")),Seq(ImportTerm("include/LWC.tbl"),Seq(Match(Var("j_26")),Seq(Build(Var("k_26")),Seq(Build(Var("j_26")),Seq(Match(Var("f_26")),Seq(Build(Var("g_26")),CallT(SVar("parse_file_2_1"),[CallT(SVar("strsglr_perror_0_0"),[],[]),CallT(SVar("strsglr_report_parse_error_0_0"),[],[])],[Var("f_26")]))))))))))),SDefT("parse_string_0_0",[],[],CallT(SVar("parse_lwc_string_0_0"),[],[])),SDefT("parse_lwc_string_0_0",[],[],Scope(["s_26","v_26","w_26","x_26"],Seq(Match(Var("v_26")),Seq(Match(Var("x_26")),Seq(ImportTerm("include/LWC.tbl"),Seq(Match(Var("w_26")),Seq(Build(Var("x_26")),Seq(Build(Var("w_26")),Seq(Match(Var("s_26")),Seq(Build(Var("v_26")),CallT(SVar("parse_string_1_1"),[CallT(SVar("strsglr_report_parse_error_0_0"),[],[])],[Var("s_26")]))))))))))),SDefT("parse_stream_0_0",[],[],CallT(SVar("parse_lwc_stream_0_0"),[],[])),SDefT("parse_lwc_stream_0_0",[],[],Scope(["y_26","b_27","e_27","f_27"],Seq(Match(Var("b_27")),Seq(Match(Var("f_27")),Seq(ImportTerm("include/LWC.tb!
 l"),Seq(Match(Var("e_27")),Seq(Build(Var("f_27")),Seq(Build(Var("e_27")),Seq(Match(Var("y_26")),Seq(Build(Var("b_27")),CallT(SVar("parse_stream_1_1"),[CallT(SVar("strsglr_report_parse_error_0_0"),[],[])],[Var("y_26")]))))))))))),SDefT("pp_lwc_string_0_0",[],[],Scope(["m_27","n_27","o_27","q_27","p_27","t_27","u_27","v_27"],Seq(Match(Var("n_27")),Seq(Match(Var("q_27")),Seq(ImportTerm("include/LWC.generated.pp.af"),Seq(Match(Var("o_27")),Seq(Build(Var("q_27")),Seq(Match(Var("t_27")),Seq(ImportTerm("include/LWC.pp.af"),Seq(Match(Var("p_27")),Seq(Build(Var("t_27")),Seq(Build(Anno(Op("Cons",[Var("o_27"),Anno(Op("Cons",[Var("p_27"),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("m_27")),Seq(Build(Var("n_27")),Seq(CallT(SVar("ast2abox_0_1"),[],[Var("m_27")]),Seq(Match(Var("v_27")),Seq(Build(Anno(Int("100"),Op("Nil",[]))),Seq(Match(Var("u_27")),Seq(Build(Var("v_27")),CallT(SVar("box2text_string_0_1"),[],[Var("u_27")])))))))))))))))))))),SDefT("open_i!
 mport_3_0",[VarDec("a_29",FunType([ConstType(Sort("ATerm",[]))],Cons
pe(Sort("ATerm",[])))),VarDec("b_29",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),VarDec("c_29",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["e_28","f_28","g_28","j_28","d_29"],Seq(Match(Var("e_28")),Seq(Match(Var("d_29")),Seq(GuardedLChoice(Scope(["m_28"],Seq(Match(Var("m_28")),Seq(GuardedLChoice(Seq(Build(Var("e_28")),Match(Anno(Op("COMPLETION",[Wld]),Wld))),Fail,Id),Build(Var("m_28"))))),Seq(Build(Var("e_28")),Seq(CallT(SVar("a_29"),[],[]),Seq(Match(Var("g_28")),Seq(Build(Var("g_28")),Seq(CallT(SVar("import_cache_path_0_0"),[],[]),Seq(Match(Var("f_28")),GuardedLChoice(Scope(["r_28"],Seq(Match(Var("r_28")),Seq(GuardedLChoice(Seq(Build(Var("g_28")),CallT(SVar("IsImported_0_0"),[],[])),Fail,Id),Build(Var("r_28"))))),Scope(["s_28","e_29","f_29","g_29","h_29","i_29","j_29"],Seq(Match(Var("s_28")),Seq(Match(Var("g_29")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("e_29")),Seq(Build(Var("g_29")),Seq(Match!
 (Var("h_29")),Seq(Build(Anno(Op("",[Anno(Str("-597601"),Op("Nil",[])),Var("g_28")]),Op("Nil",[]))),Seq(Match(Var("f_29")),Seq(Build(Var("h_29")),Seq(CallT(SVar("dr_set_rule_0_3"),[],[Var("e_29"),Var("g_28"),Var("f_29")]),Seq(Build(Var("s_28")),Seq(GuardedLChoice(Seq(Build(Anno(Op("",[Var("f_28"),Var("g_28")]),Op("Nil",[]))),Seq(CallT(SVar("is_newer_0_0"),[],[]),Seq(Build(Var("f_28")),Seq(CallT(SVar("ReadFromFile_0_0"),[],[]),Match(Var("j_28")))))),Id,Seq(Build(Var("g_28")),Seq(CallT(SVar("b_29"),[],[]),Seq(Match(Var("j_28")),GuardedLChoice(Scope(["t_28"],Seq(Match(Var("t_28")),Seq(Build(Var("g_28")),Seq(CallT(SVar("file_exists_0_0"),[],[]),Build(Var("t_28")))))),Seq(Build(Anno(Op("",[Var("f_28"),Var("j_28")]),Op("Nil",[]))),CallT(SVar("WriteToBinaryFile_0_0"),[],[])),Id))))),Seq(Match(Var("j_29")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("i_29")),Seq(Build(Var("j_29")),CallT(SVar("dr_scope_1_1"),[Scope(["x_28","y_28","z_28","k_29","l_29","m_29","n_29",!
 "o_29","p_29"],Seq(Match(Var("x_28")),Seq(Build(Var("g_28")),Seq(Mat
Var("y_28")),Seq(Match(Var("z_28")),Seq(Match(Var("n_29")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("k_29")),Seq(Build(Var("n_29")),Seq(Match(Var("o_29")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("l_29")),Seq(Build(Var("o_29")),Seq(Match(Var("p_29")),Seq(Build(Anno(Op("",[Anno(Str("99705"),Op("Nil",[])),Var("y_28")]),Op("Nil",[]))),Seq(Match(Var("m_29")),Seq(Build(Var("p_29")),Seq(CallT(SVar("dr_set_rule_0_3"),[],[Var("k_29"),Var("l_29"),Var("m_29")]),Seq(Build(Var("z_28")),Seq(Build(Var("x_28")),Seq(Build(Var("j_28")),CallT(SVar("c_29"),[],[]))))))))))))))))))))))],[Var("i_29")])))))))))))))))))),Id))))))),Id),Seq(Build(Var("d_29")),Build(Var("e_28")))))))),SDefT("open_wildcard_import_4_0",[VarDec("i_31",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),VarDec("z_31",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),VarDec("a_32",Fun!
 Type([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),VarDec("y_32",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["r_29","s_29","t_29","z_32"],Seq(Match(Var("r_29")),Seq(Match(Var("z_32")),Seq(GuardedLChoice(Scope(["u_29"],Seq(Match(Var("u_29")),Seq(GuardedLChoice(Seq(Build(Var("r_29")),Match(Anno(Op("COMPLETION",[Wld]),Wld))),Fail,Id),Build(Var("u_29"))))),Seq(Build(Var("r_29")),Seq(CallT(SVar("i_31"),[],[]),Seq(Match(Var("s_29")),Seq(CallT(SVar("readdir_0_0"),[],[]),Seq(CallT(SVar("list_loop_1_0"),[GuardedLChoice(Scope(["v_29"],Seq(Match(Var("v_29")),Seq(CallT(SVar("y_32"),[],[]),Build(Var("v_29"))))),GuardedLChoice(Scope(["a_33","f_33","g_33","i_33","a_30","b_30","c_30","d_30","h_33","r_33","e_30","f_30","l_30","z_30","g_31","h_31"],Seq(Match(Var("f_33")),Seq(Match(Var("i_33")),Seq(Build(Var("s_29")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice!
 (CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar
eal_to_string_0_0"),[],[]),Id,Scope(["w_29","x_29","y_29","z_29"],Seq(Match(Var("w_29")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("x_29")]),Wld)),Seq(Build(Var("x_29")),Seq(Match(Var("z_29")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'open-wildcard-import'"),Op("Nil",[]))),Seq(Match(Var("y_29")),Seq(Build(Var("z_29")),CallT(SVar("report_failure_0_2"),[],[Var("y_29"),Var("w_29")])))))))))))))),Seq(Match(Var("c_30")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("a_30")),Seq(Build(Var("c_30")),Seq(Match(Var("d_30")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("b_30")),Seq(Build(Var("d_30")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("a_30"),Var("b_30")]),Seq(Match(Var("g_33")),Seq(Build(Var("i_33")),Seq(Match(Var("r_33")),Seq(Match(Var("f_30")),Seq(Match(Var("e_30")),Seq(Build(Var("f_30")),Seq(Build(Var("e_30")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0!
 "),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["h_30","i_30","j_30","k_30"],Seq(Match(Var("h_30")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("i_30")]),Wld)),Seq(Build(Var("i_30")),Seq(Match(Var("k_30")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'open-wildcard-import'"),Op("Nil",[]))),Seq(Match(Var("j_30")),Seq(Build(Var("k_30")),CallT(SVar("report_failure_0_2"),[],[Var("j_30"),Var("h_30")])))))))))))))),Seq(Match(Var("g_31")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("l_30")),Seq(Build(Var("g_31")),Seq(Match(Var("h_31")),Seq(Build(Anno(Str("\n       "),Op("Nil",[]))),Seq(Match(Var("z_30")),Seq(Build(Var("h_31")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("l_30"),Var("z_30")]),Seq(Match(Var("h_33")),Seq(Build(Var("r_33")),Seq(B!
 uild(Anno(Op("Cons",[Var("g_33"),Anno(Op("Cons",[Anno(Str("/"),Op("N
,[])),Anno(Op("Cons",[Var("h_33"),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat_strings_0_0"),[],[]),Seq(Match(Var("a_33")),Seq(Build(Var("f_33")),Seq(Build(Anno(Var("a_33"),Op("Nil",[]))),CallT(SVar("open_import_3_0"),[Id,CallT(SVar("z_31"),[],[]),CallT(SVar("a_32"),[],[])],[]))))))))))))))))))))))))))))))))))))))),Id,CallT(SVar("try_1_0"),[Match(Var("t_29"))],[])),Id)],[]),GuardedLChoice(Build(Var("t_29")),Fail,Id)))))),Id),Seq(Build(Var("z_32")),Build(Var("r_29")))))))),SDefT("import_cache_path_0_0",[],[],Scope(["u_33","v_33","w_33","x_33","y_33","z_34"],Seq(Match(Var("v_33")),Seq(Match(Var("z_34")),Seq(GuardedLChoice(Scope(["a_35","b_35","c_35","d_35","e_35","f_35","d_34","e_34","f_34","g_34","g_35","l_35","m_35","n_35","o_35","p_35","r_35","s_35","t_35","u_35","v_35","w_35","x_35","y_35","z_35","b_36","l_34","m_34","n_34","o_34","a_36","c_36","t_34","u_34","v_34","w_34"],Seq(Match(Var("b_35")),Seq(CallT(SVar("pro!
 ject_path_0_0"),[],[]),Seq(Match(Var("a_35")),Seq(Build(Var("b_35")),Seq(Build(Var("a_35")),Seq(Match(Var("u_33")),Seq(Match(Var("d_35")),Seq(Match(Var("f_35")),Seq(Build(Var("u_33")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["z_33","a_34","b_34","c_34"],Seq(Match(Var("z_33")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("a_34")]),Wld)),Seq(Build(Var("a_34")),Seq(Match(Var("c_34")),Seq(Build(Anno(Str("Internal error: escaped term in string quotation is not a string in rule 'import-cache-path'"),Op("Nil",[]))),Seq(Match(Var("b_34")),Seq(Build(Var("c_34")),CallT(SVar("report_failure_0_2"),[],[Var("b_34"),Var("z_33")])))))))))))))),Seq(Match(Var("f_34")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("d_34")),Seq(Build(Var("f_34")),Seq(!
 Match(Var("g_34")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match
r("e_34")),Seq(Build(Var("g_34")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("d_34"),Var("e_34")]),Seq(Match(Var("e_35")),Seq(Build(Var("f_35")),Seq(Build(Anno(Op("Cons",[Var("e_35"),Anno(Op("Cons",[Anno(Str("/.cache"),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat_strings_0_0"),[],[]),Seq(Match(Var("c_35")),Seq(Build(Var("d_35")),Seq(Build(Anno(Var("c_35"),Op("Nil",[]))),Seq(GuardedLChoice(CallT(SVar("file_exists_0_0"),[],[]),Id,CallT(SVar("mkdir_0_0"),[],[])),Seq(Match(Var("w_33")),Seq(Build(Var("v_33")),Seq(Match(Var("m_35")),Seq(Build(Anno(Str("/"),Op("Nil",[]))),Seq(Match(Var("g_35")),Seq(Build(Var("m_35")),Seq(Match(Var("n_35")),Seq(Build(Anno(Str("+"),Op("Nil",[]))),Seq(Match(Var("l_35")),Seq(Build(Var("n_35")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("g_35"),Var("l_35")]),Seq(Match(Var("r_35")),Seq(Build(Anno(Str("\\"),Op("Nil",[]))),Seq(Match(Var("o_35")),Seq(Build(Var("r_35")),Seq(Match(Var("s_35")),Seq(B!
 uild(Anno(Str("+"),Op("Nil",[]))),Seq(Match(Var("p_35")),Seq(Build(Var("s_35")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("o_35"),Var("p_35")]),Seq(Match(Var("v_35")),Seq(Build(Anno(Str(":"),Op("Nil",[]))),Seq(Match(Var("t_35")),Seq(Build(Var("v_35")),Seq(Match(Var("w_35")),Seq(Build(Anno(Str("+"),Op("Nil",[]))),Seq(Match(Var("u_35")),Seq(Build(Var("w_35")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("t_35"),Var("u_35")]),Seq(Match(Var("x_33")),Seq(Match(Var("y_35")),Seq(Match(Var("b_36")),Seq(Build(Var("w_33")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["h_34","i_34","j_34","k_34"],Seq(Match(Var("h_34")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("i_34")]),Wld)),Seq(Build(Var("i_34")),Seq(Match(Var("k_34")),Seq(Build(Anno(Str("Interna!
 l error: escaped term in string quotation is not a string in rule 'i
rt-cache-path'"),Op("Nil",[]))),Seq(Match(Var("j_34")),Seq(Build(Var("k_34")),CallT(SVar("report_failure_0_2"),[],[Var("j_34"),Var("h_34")])))))))))))))),Seq(Match(Var("n_34")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("l_34")),Seq(Build(Var("n_34")),Seq(Match(Var("o_34")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("m_34")),Seq(Build(Var("o_34")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("l_34"),Var("m_34")]),Seq(Match(Var("z_35")),Seq(Build(Var("b_36")),Seq(Match(Var("c_36")),Seq(Build(Var("x_33")),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["p_34","q_34","r_34","s_34"],Seq(Match(Var("p_34")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("q_34")]),Wld)),Seq(Build(Var("q_34")),Seq(Match(Var("s_34")),Seq(Build(Anno(Str(!
 "Internal error: escaped term in string quotation is not a string in rule 'import-cache-path'"),Op("Nil",[]))),Seq(Match(Var("r_34")),Seq(Build(Var("s_34")),CallT(SVar("report_failure_0_2"),[],[Var("r_34"),Var("p_34")])))))))))))))),Seq(Match(Var("v_34")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("t_34")),Seq(Build(Var("v_34")),Seq(Match(Var("w_34")),Seq(Build(Anno(Str("\n            "),Op("Nil",[]))),Seq(Match(Var("u_34")),Seq(Build(Var("w_34")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("t_34"),Var("u_34")]),Seq(Match(Var("a_36")),Seq(Build(Var("c_36")),Seq(Build(Anno(Op("Cons",[Var("z_35"),Anno(Op("Cons",[Anno(Str("/"),Op("Nil",[])),Anno(Op("Cons",[Var("a_36"),Anno(Op("Cons",[Anno(Str(".sig"),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat_strings_0_0"),[],[]),Seq(Match(Var("x_35")),Seq(Build(Var("y_35")),Seq(Build(Anno(Var("x_35"),Op("Nil",[]))),Match(Var("y_33"))))))))))!
 ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))))))))))))),Id,Scope(["x_34","y_34","d_36","e_36"],Seq(Match(Var("x_34")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Var("y_34")),Seq(Build(Var("x_34")),Seq(Match(Var("e_36")),Seq(Build(Anno(Str("Internal error: with clause failed unexpectedly in rule 'import-cache-path'"),Op("Nil",[]))),Seq(Match(Var("d_36")),Seq(Build(Var("e_36")),CallT(SVar("report_with_failure_0_2"),[],[Var("d_36"),Var("y_34")]))))))))))),Seq(Build(Var("z_34")),Build(Var("y_33")))))))),SDefT("project_path_0_0",[],[],PrimT("SSL_EXT_projectpath",[],[])),SDefT("plugin_path_0_0",[],[],PrimT("SSL_EXT_pluginpath",[],[])),SDefT("candidate_sorts_0_0",[],[],PrimT("SSL_EXT_candidatesorts",[],[])),SDefT("is_newer_0_0",[],[],Scope(["f_36","g_36","h_36","i_36","k_36","j_36","l_36","m_36","n_36"],Seq(Match(Anno(Op("",[Var("f_36"),Var("g_36")]),Wld)),Seq(Match(Var("h_36")),Seq(Match(Var("k_36")),Seq(Build(Var("f_36")),Seq(CallT(SVar("file_exists_0_0"),[],[]),Seq(CallT(SVar("modification_time_0_0"!
 ),[],[]),Seq(Match(Var("i_36")),Seq(Build(Var("k_36")),Seq(Match(Var("l_36")),Seq(Build(Var("g_36")),Seq(CallT(SVar("file_exists_0_0"),[],[]),Seq(CallT(SVar("modification_time_0_0"),[],[]),Seq(Match(Var("j_36")),Seq(Build(Var("l_36")),Seq(Build(Anno(Op("",[Var("i_36"),Var("j_36")]),Op("Nil",[]))),Seq(CallT(SVar("gt_0_0"),[],[]),Seq(Build(Var("h_36")),Seq(Match(Var("n_36")),Seq(Match(Var("m_36")),Seq(Build(Var("n_36")),Build(Var("m_36")))))))))))))))))))))))),SDefT("editor_init_0_0",[],[],Seq(CallT(SVar("try_1_0"),[CallT(SVar("dr_scope_all_end_0_0"),[],[])],[]),CallT(SVar("dr_scope_all_start_0_0"),[],[]))),SDefT("refresh_workspace_file_0_0",[],[],Scope(["o_36","p_36","q_36"],Seq(Match(Var("o_36")),Seq(Match(Var("q_36")),Seq(PrimT("SSL_EXT_refreshresource",[],[Var("o_36")]),Seq(Match(Var("p_36")),Seq(Build(Var("q_36")),Build(Var("p_36"))))))))),SDefT("string_starts_with_capital_0_0",[],[],Seq(CallT(SVar("explode_string_0_0"),[],[]),Seq(CallT(SVar("Hd_0_0"),[],[]),CallT(SVar("!
 is_upper_0_0"),[],[])))),SDefT("origin_term_0_0",[],[],Scope(["r_36"
_36","t_36","v_36"],Seq(Match(Var("s_36")),Seq(Match(Var("v_36")),Seq(Match(Var("t_36")),Seq(Build(Var("v_36")),Seq(Build(Var("t_36")),Seq(Match(Var("r_36")),Seq(Build(Var("s_36")),PrimT("SSL_EXT_origin_term",[],[Var("r_36")])))))))))),SDefT("origin_text_0_0",[],[],Scope(["w_36","x_36","y_36","z_36"],Seq(Match(Var("x_36")),Seq(Match(Var("z_36")),Seq(Match(Var("y_36")),Seq(Build(Var("z_36")),Seq(Build(Var("y_36")),Seq(Match(Var("w_36")),Seq(Build(Var("x_36")),PrimT("SSL_EXT_origin_text",[],[Var("w_36")])))))))))),SDefT("origin_location_0_0",[],[],Scope(["a_37","b_37","c_37","d_37"],Seq(Match(Var("b_37")),Seq(Match(Var("d_37")),Seq(Match(Var("c_37")),Seq(Build(Var("d_37")),Seq(Build(Var("c_37")),Seq(Match(Var("a_37")),Seq(Build(Var("b_37")),PrimT("SSL_EXT_origin_location",[],[Var("a_37")])))))))))),SDefT("origin_line_0_0",[],[],Scope(["e_37","q_180","r_180","u_180","v_180"],Seq(Seq(Match(Var("r_180")),Seq(Match(Var("v_180")),Seq(Match(Var("u_180")),Seq(Build(Var("v_180")),Seq(!
 Build(Var("u_180")),Seq(Match(Var("q_180")),Seq(Build(Var("r_180")),PrimT("SSL_EXT_origin_location",[],[Var("q_180")])))))))),Seq(Match(Anno(Op("",[Var("e_37"),Wld,Wld,Wld]),Wld)),Build(Var("e_37")))))),SDefT("origin_column_0_0",[],[],Scope(["f_37","d_181","e_181","f_181","g_181"],Seq(Seq(Match(Var("e_181")),Seq(Match(Var("g_181")),Seq(Match(Var("f_181")),Seq(Build(Var("g_181")),Seq(Build(Var("f_181")),Seq(Match(Var("d_181")),Seq(Build(Var("e_181")),PrimT("SSL_EXT_origin_location",[],[Var("d_181")])))))))),Seq(Match(Anno(Op("",[Wld,Var("f_37"),Wld,Wld]),Wld)),Build(Var("f_37")))))),SDefT("origin_strip_0_0",[],[],Scope(["g_37","i_37","j_37","k_37"],Seq(Match(Var("i_37")),Seq(Match(Var("k_37")),Seq(Match(Var("j_37")),Seq(Build(Var("k_37")),Seq(Build(Var("j_37")),Seq(Match(Var("g_37")),Seq(Build(Var("i_37")),PrimT("SSL_EXT_origin_strip",[],[Var("g_37")])))))))))),SDefT("origin_equal_0_1",[],[VarDec("l_37",ConstType(Sort("ATerm",[])))],Scope(["m_37","n_37","o_37","p_37"],Seq(Ma!
 tch(Var("n_37")),Seq(Match(Var("p_37")),Seq(Match(Var("o_37")),Seq(B
d(Var("p_37")),Seq(Build(Var("o_37")),Seq(Match(Var("m_37")),Seq(Build(Var("n_37")),PrimT("SSL_EXT_origin_equal",[],[Var("m_37"),Var("l_37")])))))))))),SDefT("origin_surrounding_comments_0_0",[],[],Scope(["q_37","r_37","s_37","t_37","u_37","v_37"],Seq(Match(Var("s_37")),Seq(Build(Anno(Str("LWC"),Op("Nil",[]))),Seq(Match(Var("q_37")),Seq(Build(Var("s_37")),Seq(Match(Var("t_37")),Seq(Match(Var("v_37")),Seq(Match(Var("u_37")),Seq(Build(Var("v_37")),Seq(Build(Var("u_37")),Seq(Match(Var("r_37")),Seq(Build(Var("t_37")),PrimT("SSL_EXT_origin_surrounding_comments",[],[Var("q_37"),Var("r_37")])))))))))))))),SDefT("origin_documentation_comment_0_0",[],[],Seq(CallT(SVar("origin_surrounding_comments_0_0"),[],[]),Seq(CallT(SVar("filter_1_0"),[CallT(SVar("string_as_chars_1_0"),[CallT(SVar("documentation_comment_chars_0_0"),[],[])],[])],[]),CallT(SVar("concat_strings_0_0"),[],[])))),SDefT("documentation_comment_chars_0_0",[],[],Scope(["w_37"],Seq(Match(Anno(Op("Cons",[Anno(Int("42"),Wld),V!
 ar("w_37")]),Wld)),Seq(Build(Var("w_37")),CallT(SVar("ltrim_1_0"),[GuardedLChoice(Match(Anno(Int("32"),Wld)),Id,GuardedLChoice(Match(Anno(Int("9"),Wld)),Id,GuardedLChoice(Match(Anno(Int("10"),Wld)),Id,Match(Anno(Int("13"),Wld)))))],[]))))),SDefT("origin_track_forced_1_0",[VarDec("x_37",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["y_37","z_37","a_38"],Seq(Match(Var("z_37")),Seq(Match(Var("y_37")),Seq(Build(Var("z_37")),Seq(Build(Anno(Op("Some",[Var("y_37")]),Op("Nil",[]))),Seq(All(CallT(SVar("x_37"),[],[])),Seq(Match(Anno(Op("Some",[Var("a_38")]),Wld)),Build(Var("a_38")))))))))),SDefT("desugar_position_1_1",[VarDec("j_38",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("b_38",ConstType(Sort("ATerm",[])))],Scope(["c_38","d_38","f_38","g_38","k_38"],Seq(Match(Var("c_38")),Seq(Match(Var("k_38")),Seq(Build(Var("b_38")),Seq(CallT(SVar("at_position_1_1"),[Scope(["l_38","m_38"],Seq(Match(Var("m_38")),Seq(Match(Var("l_3!
 8")),Seq(Build(Var("m_38")),Build(Anno(Var("l_38"),Op("Cons",[Anno(O
MARKER",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))])))))))],[Var("c_38")]),Seq(Match(Var("d_38")),Seq(Build(Var("d_38")),Seq(CallT(SVar("topdown_1_0"),[CallT(SVar("repeat_1_0"),[CallT(SVar("preserve_annos_1_0"),[Scope(["h_38"],Seq(Match(Var("h_38")),Seq(CallT(SVar("j_38"),[],[]),GuardedLChoice(Match(Var("h_38")),Fail,Id))))],[])],[])],[]),Seq(Match(Var("f_38")),Seq(Build(Var("f_38")),Seq(CallT(SVar("position_of_term_1_0"),[Scope(["i_38"],Seq(Match(Anno(Wld,Var("i_38"))),Seq(Build(Var("i_38")),One(Match(Anno(Op("MARKER",[]),Wld))))))],[]),Seq(Match(Var("g_38")),Seq(Build(Var("k_38")),Build(Var("g_38")))))))))))))))),SDefT("at_position_1_1",[VarDec("k_58",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("l_58",ConstType(Sort("ATerm",[])))],GuardedLChoice(Scope(["t_38","u_38","v_38","w_38","x_38","z_38","a_39","b_39","d_39"],Seq(Match(Anno(Explode(Var("t_38"),Var("w_38")),Wld)),Seq(Match(Var("z_38")),Seq(Build(Var("l_58")),Seq(Match(Anno(Op("C!
 ons",[Var("v_38"),Var("u_38")]),Wld)),Seq(Build(Var("z_38")),Seq(Match(Var("a_39")),Seq(Match(Var("d_39")),Seq(Build(Anno(Op("",[Var("v_38"),Var("w_38")]),Op("Nil",[]))),Seq(CallT(SVar("at_index_1_0"),[CallT(SVar("at_position_1_1"),[CallT(SVar("k_58"),[],[])],[Var("u_38")])],[]),Seq(Match(Var("b_39")),Seq(Build(Var("d_39")),Seq(Build(Anno(Explode(Var("t_38"),Var("b_39")),Op("Nil",[]))),Seq(Match(Var("x_38")),Seq(Build(Var("a_39")),Build(Var("x_38"))))))))))))))))),Id,Scope(["o_38","p_38","r_38"],Seq(Match(Var("o_38")),Seq(Match(Var("r_38")),Seq(Build(Var("l_58")),Seq(Match(Anno(Op("Nil",[]),Wld)),Seq(Build(Var("o_38")),Seq(CallT(SVar("k_58"),[],[]),Seq(Match(Var("p_38")),Seq(Build(Var("r_38")),Build(Var("p_38"))))))))))))),SDefT("position_of_term_1_0",[VarDec("p_58",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],GuardedLChoice(Scope(["j_39","l_39"],Seq(Match(Var("j_39")),Seq(Match(Var("l_39")),Seq(CallT(SVar("p_58"),[],[]),Seq(Build(Var("l_39")),Bui!
 ld(Anno(Op("Nil",[]),Op("Nil",[])))))))),Id,Scope(["e_39","h_39","i_
],Seq(Match(Anno(Explode(Wld,Var("e_39")),Wld)),Seq(Build(Var("e_39")),Seq(Match(Var("i_39")),Seq(Build(Anno(Int("0"),Op("Nil",[]))),Seq(Match(Var("h_39")),Seq(Build(Var("i_39")),CallT(SVar("position_of_term_1_1"),[CallT(SVar("p_58"),[],[])],[Var("h_39")])))))))))),SDefT("position_of_term_1_1",[VarDec("s_39",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("m_39",ConstType(Sort("ATerm",[])))],Scope(["n_39","o_39","p_39","q_39","t_39"],Seq(Match(Anno(Op("Cons",[Var("n_39"),Var("p_39")]),Wld)),Seq(Match(Var("t_39")),Seq(GuardedLChoice(Scope(["r_39"],Seq(Match(Var("r_39")),Seq(Build(Var("n_39")),Seq(CallT(SVar("position_of_term_1_0"),[CallT(SVar("s_39"),[],[])],[]),Seq(Match(Var("o_39")),Build(Var("r_39"))))))),Seq(Build(Anno(Op("Cons",[Var("m_39"),Var("o_39")]),Op("Nil",[]))),Match(Var("q_39"))),Scope(["u_39","v_39"],Seq(Build(Var("p_39")),Seq(Match(Var("v_39")),Seq(Build(Var("m_39")),Seq(CallT(SVar("inc_0_0"),[],[]),Seq(Match(Var("u_39")),Seq(Build!
 (Var("v_39")),Seq(CallT(SVar("position_of_term_1_1"),[CallT(SVar("s_39"),[],[])],[Var("u_39")]),Match(Var("q_39"))))))))))),Seq(Build(Var("t_39")),Build(Var("q_39")))))))),SDefT("term_at_position_0_1",[],[VarDec("w_39",ConstType(Sort("ATerm",[])))],Scope(["x_39","y_39","z_39"],Seq(Match(Var("x_39")),Seq(Match(Var("z_39")),Seq(CallT(SVar("at_position_1_1"),[Match(Var("y_39"))],[Var("w_39")]),Seq(Build(Var("z_39")),Build(Var("y_39")))))))),SDefT("parent_at_position_0_1",[],[VarDec("q_58",ConstType(Sort("ATerm",[])))],GuardedLChoice(Scope(["i_40","j_40","k_40","l_40"],Seq(Match(Var("j_40")),Seq(Match(Var("l_40")),Seq(Build(Var("q_58")),Seq(Match(Anno(Op("Cons",[Var("i_40"),Anno(Op("Cons",[Wld,Anno(Op("Nil",[]),Wld)]),Wld)]),Wld)),Seq(Build(Var("j_40")),Seq(CallT(SVar("subterm_at_0_1"),[],[Var("i_40")]),Seq(Match(Var("k_40")),Seq(Build(Var("l_40")),Build(Var("k_40"))))))))))),Id,Scope(["c_40","d_40","e_40","f_40","g_40"],Seq(Match(Var("e_40")),Seq(Match(Var("g_40")),Seq(Build(V!
 ar("q_58")),Seq(Match(Anno(Op("Cons",[Var("d_40"),As(Var("c_40"),Ann
p("Cons",[Wld,Anno(Op("Cons",[Wld,Wld]),Wld)]),Wld))]),Wld)),Seq(Build(Var("e_40")),Seq(CallT(SVar("subterm_at_0_1"),[],[Var("d_40")]),Seq(Match(Var("f_40")),Seq(Build(Var("g_40")),Seq(Build(Var("f_40")),CallT(SVar("parent_at_position_0_1"),[],[Var("c_40")]))))))))))))),SDefT("subterm_at_0_1",[],[VarDec("m_40",ConstType(Sort("ATerm",[])))],Scope(["n_40","o_40","p_40"],Seq(Match(Anno(Explode(Wld,Var("n_40")),Wld)),Seq(Build(Var("n_40")),Seq(Match(Var("p_40")),Seq(Build(Var("m_40")),Seq(CallT(SVar("inc_0_0"),[],[]),Seq(Match(Var("o_40")),Seq(Build(Var("p_40")),CallT(SVar("index_0_1"),[],[Var("o_40")])))))))))),SDefT("set_markers_0_1",[],[VarDec("q_40",ConstType(Sort("ATerm",[])))],PrimT("SSL_EXT_set_markers",[],[Var("q_40")])),SDefT("queue_analysis_0_0",[],[],GuardedLChoice(Seq(CallT(SVar("is_list_0_0"),[],[]),CallT(SVar("list_loop_1_0"),[CallT(SVar("queue_analysis_0_0"),[],[])],[])),Id,PrimT("SSL_EXT_queue_analysis",[],[]))),SDefT("set_total_work_units_0_0",[],[],PrimT("SSL_E!
 XT_set_total_work_units",[],[])),SDefT("complete_work_unit_0_0",[],[],PrimT("SSL_EXT_complete_work_unit",[],[])),SDefT("queue_strategy_0_2",[],[VarDec("r_40",ConstType(Sort("ATerm",[]))),VarDec("s_40",ConstType(Sort("ATerm",[])))],PrimT("SSL_EXT_queue_strategy",[],[Var("r_40"),Var("s_40")])),SDefT("set_analysis_backgrounded_0_0",[],[],Build(Anno(Str("BACKGROUNDED"),Op("Nil",[])))),SDefT("editor_analyze_0_0",[],[],Scope(["v_40","w_40","x_40","y_40","z_40","a_41","d_41"],Seq(Match(Anno(Op("",[Var("z_40"),Var("v_40"),Var("w_40")]),Wld)),Seq(Match(Var("d_41")),Seq(GuardedLChoice(Seq(CallT(SVar("editor_init_0_0"),[],[]),Seq(CallT(SVar("analyze_0_0"),[],[]),Seq(Build(Var("z_40")),Seq(CallT(SVar("collect_all_2_0"),[CallT(SVar("constraint_error_0_0"),[],[]),CallT(SVar("conc_0_0"),[],[])],[]),Seq(Match(Var("x_40")),Seq(Build(Var("z_40")),Seq(CallT(SVar("collect_all_2_0"),[CallT(SVar("constraint_warning_0_0"),[],[]),CallT(SVar("conc_0_0"),[],[])],[]),Seq(Match(Var("y_40")),Seq(Build(!
 Var("z_40")),Seq(CallT(SVar("collect_all_2_0"),[CallT(SVar("constrai
note_0_0"),[],[]),CallT(SVar("conc_0_0"),[],[])],[]),Match(Var("a_41")))))))))))),Id,Scope(["b_41","c_41","e_41","f_41"],Seq(Match(Var("b_41")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Var("c_41")),Seq(Build(Var("b_41")),Seq(Match(Var("f_41")),Seq(Build(Anno(Str("Internal error: with clause failed unexpectedly in rule 'editor-analyze'"),Op("Nil",[]))),Seq(Match(Var("e_41")),Seq(Build(Var("f_41")),CallT(SVar("report_with_failure_0_2"),[],[Var("e_41"),Var("c_41")]))))))))))),Seq(Build(Var("d_41")),Build(Anno(Op("",[Var("z_40"),Var("x_40"),Var("y_40"),Var("a_41")]),Op("Nil",[]))))))))),SDefT("generate_java_0_0",[],[],Scope(["i_41","j_41","k_41","l_41","m_41","n_41","o_41","r_41"],Seq(Match(Anno(Op("",[Var("n_41"),Var("i_41"),Var("j_41"),Var("l_41"),Var("k_41")]),Wld)),Seq(Match(Var("r_41")),Seq(GuardedLChoice(Scope(["s_41","t_41"],Seq(Build(Var("l_41")),Seq(Match(Var("t_41")),Seq(Build(Anno(Str("java"),Op("Nil",[]))),Seq(Match(Var("s_41")),Seq(Build(Var("!
 t_41")),Seq(CallT(SVar("guarantee_extension_0_1"),[],[Var("s_41")]),Seq(Match(Var("m_41")),Seq(Build(Var("n_41")),Seq(CallT(SVar("to_java_0_0"),[],[]),Match(Var("o_41")))))))))))),Id,Scope(["p_41","q_41","u_41","v_41"],Seq(Match(Var("p_41")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Var("q_41")),Seq(Build(Var("p_41")),Seq(Match(Var("v_41")),Seq(Build(Anno(Str("Internal error: with clause failed unexpectedly in rule 'generate-java'"),Op("Nil",[]))),Seq(Match(Var("u_41")),Seq(Build(Var("v_41")),CallT(SVar("report_with_failure_0_2"),[],[Var("u_41"),Var("q_41")]))))))))))),Seq(Build(Var("r_41")),Build(Anno(Op("",[Var("m_41"),Var("o_41")]),Op("Nil",[]))))))))),SDefT("generate_aterm_0_0",[],[],Scope(["y_41","z_41","a_42","b_42","c_42","d_42","e_42","h_42"],Seq(Match(Anno(Op("",[Var("d_42"),Var("y_41"),Var("z_41"),Var("b_42"),Var("a_42")]),Wld)),Seq(Match(Var("h_42")),Seq(GuardedLChoice(Scope(["i_42","j_42"],Seq(Build(Var("b_42")),Seq(Match(Var("j_42")),Seq(B!
 uild(Anno(Str("aterm"),Op("Nil",[]))),Seq(Match(Var("i_42")),Seq(Bui
Var("j_42")),Seq(CallT(SVar("guarantee_extension_0_1"),[],[Var("i_42")]),Seq(Match(Var("c_42")),Seq(Build(Var("d_42")),Match(Var("e_42"))))))))))),Id,Scope(["f_42","g_42","k_42","l_42"],Seq(Match(Var("f_42")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Var("g_42")),Seq(Build(Var("f_42")),Seq(Match(Var("l_42")),Seq(Build(Anno(Str("Internal error: with clause failed unexpectedly in rule 'generate-aterm'"),Op("Nil",[]))),Seq(Match(Var("k_42")),Seq(Build(Var("l_42")),CallT(SVar("report_with_failure_0_2"),[],[Var("k_42"),Var("g_42")]))))))))))),Seq(Build(Var("h_42")),Build(Anno(Op("",[Var("c_42"),Var("e_42")]),Op("Nil",[]))))))))),SDefT("editor_resolve_0_0",[],[],Scope(["m_42","n_42","o_42","p_42","q_42","r_42","s_42","t_42"],Seq(Match(Anno(Op("",[Var("q_42"),Var("m_42"),Var("n_42"),Var("o_42"),Var("p_42")]),Wld)),Seq(Match(Var("t_42")),Seq(Build(Var("q_42")),Seq(CallT(SVar("debug_1_0"),[Build(Anno(Str("Resolve: "),Op("Nil",[])))],[]),Seq(Build(Var("q_42")),Se!
 q(Match(Anno(Op("Type",[Var("r_42")]),Wld)),Seq(Build(Var("r_42")),Seq(CallT(SVar("GetEntity_0_0"),[],[]),Seq(Match(Var("s_42")),Seq(Build(Var("t_42")),Build(Var("s_42")))))))))))))),SDefT("editor_hover_0_0",[],[],Scope(["u_42","v_42","w_42","x_42","y_42","h_43","i_43","j_43","k_43","d_43","e_43","f_43","g_43"],Seq(Match(Anno(Op("",[Var("y_42"),Var("u_42"),Var("v_42"),Var("w_42"),Var("x_42")]),Wld)),Seq(Match(Var("i_43")),Seq(Match(Var("k_43")),Seq(Build(Var("y_42")),Seq(CallT(SVar("write_to_string_0_0"),[],[]),Seq(GuardedLChoice(CallT(SVar("concat_strings_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("is_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("int_to_string_0_0"),[],[]),Id,GuardedLChoice(CallT(SVar("real_to_string_0_0"),[],[]),Id,Scope(["z_42","a_43","b_43","c_43"],Seq(Match(Var("z_42")),Seq(PrimT("SSL_stacktrace_get_all_frame_names",[],[]),Seq(Match(Anno(Op("Cons",[Wld,Var("a_43")]),Wld)),Seq(Build(Var("a_43")),Seq(Match(Var("c_43")),Seq(Build(Anno(Str("Internal err!
 or: escaped term in string quotation is not a string in rule 'editor
ver'"),Op("Nil",[]))),Seq(Match(Var("b_43")),Seq(Build(Var("c_43")),CallT(SVar("report_failure_0_2"),[],[Var("b_43"),Var("z_42")])))))))))))))),Seq(Match(Var("f_43")),Seq(Build(Anno(Str("\n"),Op("Nil",[]))),Seq(Match(Var("d_43")),Seq(Build(Var("f_43")),Seq(Match(Var("g_43")),Seq(Build(Anno(Str("\n            "),Op("Nil",[]))),Seq(Match(Var("e_43")),Seq(Build(Var("g_43")),Seq(CallT(SVar("string_replace_0_2"),[],[Var("d_43"),Var("e_43")]),Seq(Match(Var("j_43")),Seq(Build(Var("k_43")),Seq(Build(Anno(Op("Cons",[Anno(Str("Hover help: "),Op("Nil",[])),Anno(Op("Cons",[Var("j_43"),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))]),Op("Nil",[]))),Seq(CallT(SVar("concat_strings_0_0"),[],[]),Seq(Match(Var("h_43")),Seq(Build(Var("i_43")),Build(Anno(Var("h_43"),Op("Nil",[])))))))))))))))))))))))))),SDefT("editor_complete_0_0",[],[],Scope(["l_43","m_43","n_43","o_43","p_43","q_43","r_43","t_43"],Seq(Match(Anno(Op("",[Var("p_43"),Var("l_43"),Var("m_43"),Var("n_43"),Var("o_43")]),Wld)),Seq(M!
 atch(Var("t_43")),Seq(GuardedLChoice(Scope(["s_43"],Seq(Match(Var("s_43")),Seq(Build(Var("p_43")),Seq(Match(Anno(Op("Type",[Anno(Op("COMPLETION",[Var("q_43")]),Wld)]),Wld)),Build(Var("s_43")))))),Scope(["u_43","v_43"],Seq(Match(Var("v_43")),Seq(CallT(SVar("all_keys_GetEntity_0_0"),[],[]),Seq(Match(Var("u_43")),Seq(Build(Var("v_43")),Seq(Build(Var("u_43")),Match(Var("r_43")))))))),Id),Seq(Build(Var("t_43")),Build(Anno(Op("Cons",[Anno(Str("String"),Op("Nil",[])),Anno(Op("Cons",[Anno(Str("Int"),Op("Nil",[])),Var("r_43")]),Op("Nil",[]))]),Op("Nil",[]))))))))),SDefT("COMPLETION_1_0",[VarDec("w_43",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["t_179","s_179","u_179"],Seq(Match(Anno(Op("COMPLETION",[Var("s_179")]),Var("t_179"))),Seq(Build(Var("s_179")),Seq(CallT(SVar("w_43"),[],[]),Seq(Match(Var("u_179")),Build(Anno(Op("COMPLETION",[Var("u_179")]),Var("t_179"))))))))),SDefT("NOCONTEXT_1_0",[VarDec("x_43",FunType([ConstType(Sort("ATerm",[]))],Const!
 Type(Sort("ATerm",[]))))],[],Scope(["w_179","v_179","x_179"],Seq(Mat
Anno(Op("NOCONTEXT",[Var("v_179")]),Var("w_179"))),Seq(Build(Var("v_179")),Seq(CallT(SVar("x_43"),[],[]),Seq(Match(Var("x_179")),Build(Anno(Op("NOCONTEXT",[Var("x_179")]),Var("w_179"))))))))),SDefT("MARKER_0_0",[],[],Match(Anno(Op("MARKER",[]),Wld))),SDefT("Module_2_0",[VarDec("y_43",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),VarDec("z_43",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["a_180","y_179","z_179","b_180","c_180"],Seq(Match(Anno(Op("Module",[Var("y_179"),Var("z_179")]),Var("a_180"))),Seq(Build(Var("y_179")),Seq(CallT(SVar("y_43"),[],[]),Seq(Match(Var("b_180")),Seq(Build(Var("z_179")),Seq(CallT(SVar("z_43"),[],[]),Seq(Match(Var("c_180")),Build(Anno(Op("Module",[Var("b_180"),Var("c_180")]),Var("a_180")))))))))))),SDefT("Entity_2_0",[VarDec("a_44",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),VarDec("b_44",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["f_1!
 80","d_180","e_180","g_180","h_180"],Seq(Match(Anno(Op("Entity",[Var("d_180"),Var("e_180")]),Var("f_180"))),Seq(Build(Var("d_180")),Seq(CallT(SVar("a_44"),[],[]),Seq(Match(Var("g_180")),Seq(Build(Var("e_180")),Seq(CallT(SVar("b_44"),[],[]),Seq(Match(Var("h_180")),Build(Anno(Op("Entity",[Var("g_180"),Var("h_180")]),Var("f_180")))))))))))),SDefT("Property_2_0",[VarDec("c_44",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),VarDec("d_44",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["k_180","i_180","j_180","l_180","m_180"],Seq(Match(Anno(Op("Property",[Var("i_180"),Var("j_180")]),Var("k_180"))),Seq(Build(Var("i_180")),Seq(CallT(SVar("c_44"),[],[]),Seq(Match(Var("l_180")),Seq(Build(Var("j_180")),Seq(CallT(SVar("d_44"),[],[]),Seq(Match(Var("m_180")),Build(Anno(Op("Property",[Var("l_180"),Var("m_180")]),Var("k_180")))))))))))),SDefT("Type_1_0",[VarDec("e_44",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]!
 ,Scope(["o_180","n_180","p_180"],Seq(Match(Anno(Op("Type",[Var("n_18
]),Var("o_180"))),Seq(Build(Var("n_180")),Seq(CallT(SVar("e_44"),[],[]),Seq(Match(Var("p_180")),Build(Anno(Op("Type",[Var("p_180")]),Var("o_180"))))))))),SDefT("innermost_scope_GetEntity_1_0",[VarDec("f_44",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["g_44","h_44"],Seq(Match(Var("h_44")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("g_44")),Seq(Build(Var("h_44")),CallT(SVar("dr_get_first_scope_label_1_1"),[CallT(SVar("f_44"),[],[])],[Var("g_44")]))))))),SDefT("DYNAMIC__CALLS_0_0",[],[],GuardedLChoice(Scope(["m_44","n_44"],Seq(Match(Var("n_44")),Seq(Build(Anno(Str(""),Op("Nil",[]))),Seq(Match(Var("m_44")),Seq(Build(Var("n_44")),CallT(SVar("undefine_GetEntity_0_1"),[],[Var("m_44")])))))),Id,GuardedLChoice(Scope(["k_44","l_44"],Seq(Match(Var("l_44")),Seq(Build(Anno(Str(""),Op("Nil",[]))),Seq(Match(Var("k_44")),Seq(Build(Var("l_44")),CallT(SVar("undefine_CurrentFile_0_1"),[],[Var("k_44")])))))),Id,Scope(["i_44","j_44"],Seq(Match!
 (Var("j_44")),Seq(Build(Anno(Str(""),Op("Nil",[]))),Seq(Match(Var("i_44")),Seq(Build(Var("j_44")),CallT(SVar("undefine_IsImported_0_1"),[],[Var("i_44")]))))))))),SDefT("undefine_GetEntity_0_1",[],[VarDec("o_44",ConstType(Sort("ATerm",[])))],Fail),SDefT("throw_GetEntity_1_1",[VarDec("q_44",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("p_44",ConstType(Sort("ATerm",[])))],Scope(["r_44","s_44"],Seq(Match(Var("s_44")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("r_44")),Seq(Build(Var("s_44")),CallT(SVar("dr_throw_1_2"),[CallT(SVar("q_44"),[],[])],[Var("p_44"),Var("r_44")]))))))),SDefT("continue_to_label_GetEntity_0_1",[],[VarDec("t_44",ConstType(Sort("ATerm",[])))],Scope(["u_44","v_44"],Seq(Match(Var("v_44")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("u_44")),Seq(Build(Var("v_44")),CallT(SVar("dr_continue_0_2"),[],[Var("u_44"),Var("t_44")]))))))),SDefT("continue_GetEntity_0_0",[],[],Scope(["w_44","x_44"],Seq(Mat!
 ch(Var("x_44")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(M
h(Var("w_44")),Seq(Build(Var("x_44")),CallT(SVar("dr_continue_0_1"),[],[Var("w_44")]))))))),SDefT("break_bp_GetEntity_0_0",[],[],Scope(["y_44","z_44"],Seq(Match(Var("z_44")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("y_44")),Seq(Build(Var("z_44")),CallT(SVar("dr_break_bp_0_1"),[],[Var("y_44")]))))))),SDefT("break_to_label_GetEntity_0_1",[],[VarDec("a_45",ConstType(Sort("ATerm",[])))],Scope(["b_45","c_45"],Seq(Match(Var("c_45")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("b_45")),Seq(Build(Var("c_45")),CallT(SVar("dr_break_0_2"),[],[Var("b_45"),Var("a_45")]))))))),SDefT("break_GetEntity_0_0",[],[],Scope(["d_45","e_45"],Seq(Match(Var("e_45")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("d_45")),Seq(Build(Var("e_45")),CallT(SVar("dr_break_0_1"),[],[Var("d_45")]))))))),SDefT("all_keys_GetEntity_0_0",[],[],Scope(["f_45","g_45"],Seq(Match(Var("g_45")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("f_45")),Seq(Bui!
 ld(Var("g_45")),CallT(SVar("dr_all_keys_0_1"),[],[Var("f_45")]))))))),SDefT("bigfold_GetEntity_1_0",[VarDec("l_45",FunType([FunType([ConstType(Sort("T",[]))],ConstType(Sort("T",[]))),ConstType(Sort("T",[]))],ConstType(Sort("T",[]))))],[],Scope(["h_45","i_45","m_45","o_45","n_45","r_45"],Seq(Match(As(Var("i_45"),Var("h_45"))),Seq(Match(Var("o_45")),Seq(GuardedLChoice(Scope(["p_45","q_45"],Seq(Match(Var("q_45")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("p_45")),Seq(Build(Var("q_45")),CallT(SVar("dr_lookup_all_rules_0_2"),[],[Var("p_45"),Var("i_45")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("m_45")),Seq(Build(Var("o_45")),Seq(Match(Var("r_45")),Seq(Match(Var("n_45")),Seq(Build(Var("r_45")),Seq(Build(Anno(Op("",[Var("m_45"),Var("n_45")]),Op("Nil",[]))),CallT(SVar("l_45"),[Scope(["j_45","k_45","s_45"],Seq(Match(Anno(Op("",[Var("s_45"),As(Var("j_45"),Var("k_45"))]),Wld)),Seq(Build(Var("s_45")),CallT(SVar("aux_GetEntity_0_2"),[],[Var("k_45!
 "),Var("j_45")]))))],[])))))))))))),SDefT("fold_GetEntity_1_0",[VarD
"x_45",FunType([FunType([ConstType(Sort("T",[]))],ConstType(Sort("T",[]))),ConstType(Sort("T",[]))],ConstType(Sort("T",[]))))],[],Scope(["t_45","u_45","y_45","a_46","z_45","d_46"],Seq(Match(As(Var("u_45"),Var("t_45"))),Seq(Match(Var("a_46")),Seq(GuardedLChoice(Scope(["b_46","c_46"],Seq(Match(Var("c_46")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("b_46")),Seq(Build(Var("c_46")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("b_46"),Var("u_45")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("y_45")),Seq(Build(Var("a_46")),Seq(Match(Var("d_46")),Seq(Match(Var("z_45")),Seq(Build(Var("d_46")),Seq(Build(Anno(Op("",[Var("y_45"),Var("z_45")]),Op("Nil",[]))),CallT(SVar("x_45"),[Scope(["v_45","w_45","e_46"],Seq(Match(Anno(Op("",[Var("e_46"),As(Var("v_45"),Var("w_45"))]),Wld)),Seq(Build(Var("e_46")),CallT(SVar("aux_GetEntity_0_2"),[],[Var("w_45"),Var("v_45")]))))],[])))))))))))),SDefT("bigchain_GetEntity_0_0",[],[],Scope(["f_46","g_46","j_46","l_46","k_46"!
 ,"o_46"],Seq(Match(As(Var("g_46"),Var("f_46"))),Seq(Match(Var("l_46")),Seq(GuardedLChoice(Scope(["m_46","n_46"],Seq(Match(Var("n_46")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("m_46")),Seq(Build(Var("n_46")),CallT(SVar("dr_lookup_all_rules_0_2"),[],[Var("m_46"),Var("g_46")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("j_46")),Seq(Build(Var("l_46")),Seq(Match(Var("o_46")),Seq(Match(Var("k_46")),Seq(Build(Var("o_46")),Seq(Build(Anno(Op("",[Var("j_46"),Var("k_46")]),Op("Nil",[]))),CallT(SVar("foldl_1_0"),[Scope(["h_46","i_46","p_46"],Seq(Match(Anno(Op("",[Var("p_46"),As(Var("h_46"),Var("i_46"))]),Wld)),Seq(Build(Var("p_46")),CallT(SVar("aux_GetEntity_0_2"),[],[Var("i_46"),Var("h_46")]))))],[])))))))))))),SDefT("chain_GetEntity_0_0",[],[],Scope(["q_46","r_46","u_46","w_46","v_46","z_46"],Seq(Match(As(Var("r_46"),Var("q_46"))),Seq(Match(Var("w_46")),Seq(GuardedLChoice(Scope(["x_46","y_46"],Seq(Match(Var("y_46")),Seq(Build(Anno(Str("GetEntit!
 y"),Op("Nil",[]))),Seq(Match(Var("x_46")),Seq(Build(Var("y_46")),Cal
SVar("dr_lookup_rule_0_2"),[],[Var("x_46"),Var("r_46")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("u_46")),Seq(Build(Var("w_46")),Seq(Match(Var("z_46")),Seq(Match(Var("v_46")),Seq(Build(Var("z_46")),Seq(Build(Anno(Op("",[Var("u_46"),Var("v_46")]),Op("Nil",[]))),CallT(SVar("foldl_1_0"),[Scope(["s_46","t_46","a_47"],Seq(Match(Anno(Op("",[Var("a_47"),As(Var("s_46"),Var("t_46"))]),Wld)),Seq(Build(Var("a_47")),CallT(SVar("aux_GetEntity_0_2"),[],[Var("t_46"),Var("s_46")]))))],[])))))))))))),SDefT("bigbagof_GetEntity_0_0",[],[],Scope(["b_47","c_47","d_47","e_47"],Seq(Match(As(Var("c_47"),Var("b_47"))),Seq(Match(Var("e_47")),Seq(GuardedLChoice(Scope(["f_47","g_47"],Seq(Match(Var("g_47")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("f_47")),Seq(Build(Var("g_47")),CallT(SVar("dr_lookup_all_rules_0_2"),[],[Var("f_47"),Var("c_47")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("d_47")),Seq(Build(Var("e_47")),Seq(Build(Var("d_47")),C!
 allT(SVar("filter_1_0"),[CallT(SVar("aux_GetEntity_0_2"),[],[Var("b_47"),Var("c_47")])],[]))))))))),SDefT("once_GetEntity_0_0",[],[],Scope(["h_47","i_47","j_47","k_47","l_47","m_47","n_47","o_47","p_47","q_47"],Seq(Match(As(Var("j_47"),Var("i_47"))),Seq(Match(Var("o_47")),Seq(Match(Var("q_47")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("p_47")),Seq(Build(Var("q_47")),Seq(CallT(SVar("dr_lookup_rule_pointer_0_2"),[],[Var("p_47"),Var("j_47")]),Seq(Match(Anno(Op("",[Var("h_47"),Var("m_47"),Var("l_47")]),Wld)),Seq(Build(Var("h_47")),Seq(CallT(SVar("split_fetch_1_0"),[Seq(CallT(SVar("aux_GetEntity_0_2"),[],[Var("i_47"),Var("j_47")]),Match(Var("k_47")))],[]),Seq(CallT(SVar("conc_0_0"),[],[]),Seq(Match(Var("n_47")),Seq(Build(Var("l_47")),Seq(CallT(SVar("hashtable_put_0_2"),[],[Var("m_47"),Var("n_47")]),Seq(Build(Var("o_47")),Build(Var("k_47"))))))))))))))))))),SDefT("reverse_bagof_GetEntity_1_0",[VarDec("u_47",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort(!
 "ATerm",[]))))],[],Scope(["r_47","s_47","t_47","v_47"],Seq(Match(As(
("s_47"),Var("r_47"))),Seq(Match(Var("v_47")),Seq(GuardedLChoice(Scope(["x_47","y_47"],Seq(Match(Var("y_47")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("x_47")),Seq(Build(Var("y_47")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("x_47"),Var("s_47")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("t_47")),Seq(Build(Var("v_47")),Seq(Build(Var("t_47")),CallT(SVar("reverse_filter_2_0"),[CallT(SVar("aux_GetEntity_0_2"),[],[Var("r_47"),Var("s_47")]),CallT(SVar("u_47"),[],[])],[]))))))))),SDefT("bagof_GetEntity_0_0",[],[],Scope(["z_47","a_48","b_48","e_48"],Seq(Match(As(Var("a_48"),Var("z_47"))),Seq(Match(Var("e_48")),Seq(GuardedLChoice(Scope(["f_48","g_48"],Seq(Match(Var("g_48")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("f_48")),Seq(Build(Var("g_48")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("f_48"),Var("a_48")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("b_48")),Seq(Build(Var("e_48")),Seq(Build(Var("b_48")),Ca!
 llT(SVar("filter_1_0"),[CallT(SVar("aux_GetEntity_0_2"),[],[Var("z_47"),Var("a_48")])],[]))))))))),SDefT("GetEntity_0_0",[],[],Scope(["h_48","i_48","j_48","k_48","l_48","m_48"],Seq(Match(As(Var("i_48"),Var("h_48"))),Seq(Match(Var("k_48")),Seq(Match(Var("m_48")),Seq(Build(Anno(Str("GetEntity"),Op("Nil",[]))),Seq(Match(Var("l_48")),Seq(Build(Var("m_48")),Seq(CallT(SVar("dr_lookup_rule_0_2"),[],[Var("l_48"),Var("i_48")]),Seq(Match(Var("j_48")),Seq(Build(Var("k_48")),Seq(Build(Var("j_48")),CallT(SVar("fetch_elem_1_0"),[CallT(SVar("aux_GetEntity_0_2"),[],[Var("h_48"),Var("i_48")])],[]))))))))))))),SDefT("aux_GetEntity_0_2",[],[VarDec("n_48",ConstType(Sort("ATerm",[]))),VarDec("o_48",ConstType(Sort("ATerm",[])))],Scope(["p_48","q_48"],Seq(Match(Anno(Op("",[Anno(Str("-391271"),Wld),Var("p_48")]),Wld)),Seq(Match(Var("q_48")),Seq(Build(Var("o_48")),Seq(Build(Var("q_48")),Build(Var("p_48")))))))),SDefT("innermost_scope_CurrentFile_1_0",[VarDec("r_48",FunType([ConstType(Sort("ATerm",[!
 ]))],ConstType(Sort("ATerm",[]))))],[],Scope(["s_48","t_48"],Seq(Mat
Var("t_48")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("s_48")),Seq(Build(Var("t_48")),CallT(SVar("dr_get_first_scope_label_1_1"),[CallT(SVar("r_48"),[],[])],[Var("s_48")]))))))),SDefT("undefine_CurrentFile_0_1",[],[VarDec("u_48",ConstType(Sort("ATerm",[])))],Fail),SDefT("throw_CurrentFile_1_1",[VarDec("w_48",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("v_48",ConstType(Sort("ATerm",[])))],Scope(["x_48","y_48"],Seq(Match(Var("y_48")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("x_48")),Seq(Build(Var("y_48")),CallT(SVar("dr_throw_1_2"),[CallT(SVar("w_48"),[],[])],[Var("v_48"),Var("x_48")]))))))),SDefT("continue_to_label_CurrentFile_0_1",[],[VarDec("z_48",ConstType(Sort("ATerm",[])))],Scope(["a_49","b_49"],Seq(Match(Var("b_49")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("a_49")),Seq(Build(Var("b_49")),CallT(SVar("dr_continue_0_2"),[],[Var("a_49"),Var("z_48")]))))))),SDefT("continue_Cur!
 rentFile_0_0",[],[],Scope(["c_49","d_49"],Seq(Match(Var("d_49")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("c_49")),Seq(Build(Var("d_49")),CallT(SVar("dr_continue_0_1"),[],[Var("c_49")]))))))),SDefT("break_bp_CurrentFile_0_0",[],[],Scope(["e_49","f_49"],Seq(Match(Var("f_49")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("e_49")),Seq(Build(Var("f_49")),CallT(SVar("dr_break_bp_0_1"),[],[Var("e_49")]))))))),SDefT("break_to_label_CurrentFile_0_1",[],[VarDec("g_49",ConstType(Sort("ATerm",[])))],Scope(["h_49","i_49"],Seq(Match(Var("i_49")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("h_49")),Seq(Build(Var("i_49")),CallT(SVar("dr_break_0_2"),[],[Var("h_49"),Var("g_49")]))))))),SDefT("break_CurrentFile_0_0",[],[],Scope(["j_49","k_49"],Seq(Match(Var("k_49")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("j_49")),Seq(Build(Var("k_49")),CallT(SVar("dr_break_0_1"),[],[Var("j_49")]))))))),SDefT("all_keys_CurrentF!
 ile_0_0",[],[],Scope(["l_49","m_49"],Seq(Match(Var("m_49")),Seq(Buil
nno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("l_49")),Seq(Build(Var("m_49")),CallT(SVar("dr_all_keys_0_1"),[],[Var("l_49")]))))))),SDefT("bigfold_CurrentFile_1_0",[VarDec("p_49",FunType([FunType([ConstType(Sort("T",[]))],ConstType(Sort("T",[]))),ConstType(Sort("T",[]))],ConstType(Sort("T",[]))))],[],Scope(["n_49","q_49","s_49","r_49","x_49"],Seq(Match(As(Var("n_49"),Wld)),Seq(Match(Var("s_49")),Seq(GuardedLChoice(Scope(["t_49","u_49","v_49","w_49"],Seq(Match(Var("v_49")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("t_49")),Seq(Build(Var("v_49")),Seq(Match(Var("w_49")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("u_49")),Seq(Build(Var("w_49")),CallT(SVar("dr_lookup_all_rules_0_2"),[],[Var("t_49"),Var("u_49")])))))))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("q_49")),Seq(Build(Var("s_49")),Seq(Match(Var("x_49")),Seq(Match(Var("r_49")),Seq(Build(Var("x_4!
 9")),Seq(Build(Anno(Op("",[Var("q_49"),Var("r_49")]),Op("Nil",[]))),CallT(SVar("p_49"),[Scope(["o_49","y_49"],Seq(Match(Anno(Op("",[Var("y_49"),As(Var("o_49"),Wld)]),Wld)),Seq(Build(Var("y_49")),CallT(SVar("aux_CurrentFile_0_1"),[],[Var("o_49")]))))],[])))))))))))),SDefT("fold_CurrentFile_1_0",[VarDec("b_50",FunType([FunType([ConstType(Sort("T",[]))],ConstType(Sort("T",[]))),ConstType(Sort("T",[]))],ConstType(Sort("T",[]))))],[],Scope(["z_49","c_50","e_50","d_50","k_50"],Seq(Match(As(Var("z_49"),Wld)),Seq(Match(Var("e_50")),Seq(GuardedLChoice(Scope(["f_50","h_50","i_50","j_50"],Seq(Match(Var("i_50")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("f_50")),Seq(Build(Var("i_50")),Seq(Match(Var("j_50")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("h_50")),Seq(Build(Var("j_50")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("f_50"),Var("h_50")])))))))))),Id,Build(Anno(Op("Nil",[]),Op("N!
 il",[])))),Seq(Match(Var("c_50")),Seq(Build(Var("e_50")),Seq(Match(V
"k_50")),Seq(Match(Var("d_50")),Seq(Build(Var("k_50")),Seq(Build(Anno(Op("",[Var("c_50"),Var("d_50")]),Op("Nil",[]))),CallT(SVar("b_50"),[Scope(["a_50","m_50"],Seq(Match(Anno(Op("",[Var("m_50"),As(Var("a_50"),Wld)]),Wld)),Seq(Build(Var("m_50")),CallT(SVar("aux_CurrentFile_0_1"),[],[Var("a_50")]))))],[])))))))))))),SDefT("bigchain_CurrentFile_0_0",[],[],Scope(["n_50","p_50","r_50","q_50","w_50"],Seq(Match(As(Var("n_50"),Wld)),Seq(Match(Var("r_50")),Seq(GuardedLChoice(Scope(["s_50","t_50","u_50","v_50"],Seq(Match(Var("u_50")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("s_50")),Seq(Build(Var("u_50")),Seq(Match(Var("v_50")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("t_50")),Seq(Build(Var("v_50")),CallT(SVar("dr_lookup_all_rules_0_2"),[],[Var("s_50"),Var("t_50")])))))))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("p_50")),Seq(Build(Var("r_50")),Seq(Match(Var("w_!
 50")),Seq(Match(Var("q_50")),Seq(Build(Var("w_50")),Seq(Build(Anno(Op("",[Var("p_50"),Var("q_50")]),Op("Nil",[]))),CallT(SVar("foldl_1_0"),[Scope(["o_50","x_50"],Seq(Match(Anno(Op("",[Var("x_50"),As(Var("o_50"),Wld)]),Wld)),Seq(Build(Var("x_50")),CallT(SVar("aux_CurrentFile_0_1"),[],[Var("o_50")]))))],[])))))))))))),SDefT("chain_CurrentFile_0_0",[],[],Scope(["y_50","a_51","c_51","b_51","k_51"],Seq(Match(As(Var("y_50"),Wld)),Seq(Match(Var("c_51")),Seq(GuardedLChoice(Scope(["d_51","e_51","g_51","h_51"],Seq(Match(Var("g_51")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("d_51")),Seq(Build(Var("g_51")),Seq(Match(Var("h_51")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("e_51")),Seq(Build(Var("h_51")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("d_51"),Var("e_51")])))))))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("a_51")),Seq(Build(Var("c_51")),Seq(Match(Var("k_51"))!
 ,Seq(Match(Var("b_51")),Seq(Build(Var("k_51")),Seq(Build(Anno(Op("",
r("a_51"),Var("b_51")]),Op("Nil",[]))),CallT(SVar("foldl_1_0"),[Scope(["z_50","m_51"],Seq(Match(Anno(Op("",[Var("m_51"),As(Var("z_50"),Wld)]),Wld)),Seq(Build(Var("m_51")),CallT(SVar("aux_CurrentFile_0_1"),[],[Var("z_50")]))))],[])))))))))))),SDefT("bigbagof_CurrentFile_0_0",[],[],Scope(["n_51","o_51","q_51"],Seq(Match(As(Var("n_51"),Wld)),Seq(Match(Var("q_51")),Seq(GuardedLChoice(Scope(["r_51","s_51","t_51","u_51"],Seq(Match(Var("t_51")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("r_51")),Seq(Build(Var("t_51")),Seq(Match(Var("u_51")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("s_51")),Seq(Build(Var("u_51")),CallT(SVar("dr_lookup_all_rules_0_2"),[],[Var("r_51"),Var("s_51")])))))))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("o_51")),Seq(Build(Var("q_51")),Seq(Build(Var("o_51")),CallT(SVar("filter_1_0"),[CallT(SVar("aux_CurrentFile_0_1"),[],[Var("n_51")])],[])!
 )))))))),SDefT("once_CurrentFile_0_0",[],[],Scope(["v_51","w_51","x_51","y_51","z_51","a_52","b_52","c_52","d_52","e_52","f_52"],Seq(Match(As(Var("w_51"),Wld)),Seq(Match(Var("b_52")),Seq(Match(Var("e_52")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("c_52")),Seq(Build(Var("e_52")),Seq(Match(Var("f_52")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("d_52")),Seq(Build(Var("f_52")),Seq(CallT(SVar("dr_lookup_rule_pointer_0_2"),[],[Var("c_52"),Var("d_52")]),Seq(Match(Anno(Op("",[Var("v_51"),Var("z_51"),Var("y_51")]),Wld)),Seq(Build(Var("v_51")),Seq(CallT(SVar("split_fetch_1_0"),[Seq(CallT(SVar("aux_CurrentFile_0_1"),[],[Var("w_51")]),Match(Var("x_51")))],[]),Seq(CallT(SVar("conc_0_0"),[],[]),Seq(Match(Var("a_52")),Seq(Build(Var("y_51")),Seq(CallT(SVar("hashtable_put_0_2"),[],[Var("z_51"),Var("a_52")]),Seq(Build(Var("b_52")),Build(Var("x_51"))))))))))))))))))))))),SDefT("reverse_ba!
 gof_CurrentFile_1_0",[VarDec("l_52",FunType([ConstType(Sort("ATerm",
)],ConstType(Sort("ATerm",[]))))],[],Scope(["j_52","k_52","m_52"],Seq(Match(As(Var("j_52"),Wld)),Seq(Match(Var("m_52")),Seq(GuardedLChoice(Scope(["n_52","o_52","p_52","q_52"],Seq(Match(Var("p_52")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("n_52")),Seq(Build(Var("p_52")),Seq(Match(Var("q_52")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("o_52")),Seq(Build(Var("q_52")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("n_52"),Var("o_52")])))))))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("k_52")),Seq(Build(Var("m_52")),Seq(Build(Var("k_52")),CallT(SVar("reverse_filter_2_0"),[CallT(SVar("aux_CurrentFile_0_1"),[],[Var("j_52")]),CallT(SVar("l_52"),[],[])],[]))))))))),SDefT("bagof_CurrentFile_0_0",[],[],Scope(["r_52","s_52","t_52"],Seq(Match(As(Var("r_52"),Wld)),Seq(Match(Var("t_52")),Seq(GuardedLChoice(Scope(["u_52","v_52","w_52","x_52"],Seq(Match(Var("w_52")),Seq(Build!
 (Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("u_52")),Seq(Build(Var("w_52")),Seq(Match(Var("x_52")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("v_52")),Seq(Build(Var("x_52")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("u_52"),Var("v_52")])))))))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("s_52")),Seq(Build(Var("t_52")),Seq(Build(Var("s_52")),CallT(SVar("filter_1_0"),[CallT(SVar("aux_CurrentFile_0_1"),[],[Var("r_52")])],[]))))))))),SDefT("CurrentFile_0_0",[],[],Scope(["y_52","z_52","a_53","b_53","c_53","d_53","e_53"],Seq(Match(As(Var("y_52"),Wld)),Seq(Match(Var("a_53")),Seq(Match(Var("d_53")),Seq(Build(Anno(Str("CurrentFile"),Op("Nil",[]))),Seq(Match(Var("b_53")),Seq(Build(Var("d_53")),Seq(Match(Var("e_53")),Seq(Build(Anno(Op("Cons",[Anno(Op("DR_DUMMY",[]),Op("Nil",[])),Anno(Op("Nil",[]),Op("Nil",[]))]),Op("Nil",[]))),Seq(Match(Var("c_53")),Seq(Build(Var("e_53")),Seq(Ca!
 llT(SVar("dr_lookup_rule_0_2"),[],[Var("b_53"),Var("c_53")]),Seq(Mat
Var("z_52")),Seq(Build(Var("a_53")),Seq(Build(Var("z_52")),CallT(SVar("fetch_elem_1_0"),[CallT(SVar("aux_CurrentFile_0_1"),[],[Var("y_52")])],[]))))))))))))))))),SDefT("aux_CurrentFile_0_1",[],[VarDec("g_53",ConstType(Sort("ATerm",[])))],Scope(["h_53","i_53"],Seq(Match(Anno(Op("",[Anno(Str("99705"),Wld),Var("h_53")]),Wld)),Seq(Match(Var("i_53")),Seq(Build(Var("g_53")),Seq(Build(Var("i_53")),Build(Var("h_53")))))))),SDefT("innermost_scope_IsImported_1_0",[VarDec("j_53",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["k_53","l_53"],Seq(Match(Var("l_53")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("k_53")),Seq(Build(Var("l_53")),CallT(SVar("dr_get_first_scope_label_1_1"),[CallT(SVar("j_53"),[],[])],[Var("k_53")]))))))),SDefT("undefine_IsImported_0_1",[],[VarDec("m_53",ConstType(Sort("ATerm",[])))],Fail),SDefT("throw_IsImported_1_1",[VarDec("o_53",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("n_53"!
 ,ConstType(Sort("ATerm",[])))],Scope(["p_53","q_53"],Seq(Match(Var("q_53")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("p_53")),Seq(Build(Var("q_53")),CallT(SVar("dr_throw_1_2"),[CallT(SVar("o_53"),[],[])],[Var("n_53"),Var("p_53")]))))))),SDefT("continue_to_label_IsImported_0_1",[],[VarDec("r_53",ConstType(Sort("ATerm",[])))],Scope(["s_53","t_53"],Seq(Match(Var("t_53")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("s_53")),Seq(Build(Var("t_53")),CallT(SVar("dr_continue_0_2"),[],[Var("s_53"),Var("r_53")]))))))),SDefT("continue_IsImported_0_0",[],[],Scope(["u_53","v_53"],Seq(Match(Var("v_53")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("u_53")),Seq(Build(Var("v_53")),CallT(SVar("dr_continue_0_1"),[],[Var("u_53")]))))))),SDefT("break_bp_IsImported_0_0",[],[],Scope(["w_53","x_53"],Seq(Match(Var("x_53")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("w_53")),Seq(Build(Var("x_53")),CallT(SVar("dr_break_bp_0_1"!
 ),[],[Var("w_53")]))))))),SDefT("break_to_label_IsImported_0_1",[],[
Dec("y_53",ConstType(Sort("ATerm",[])))],Scope(["z_53","a_54"],Seq(Match(Var("a_54")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("z_53")),Seq(Build(Var("a_54")),CallT(SVar("dr_break_0_2"),[],[Var("z_53"),Var("y_53")]))))))),SDefT("break_IsImported_0_0",[],[],Scope(["b_54","c_54"],Seq(Match(Var("c_54")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("b_54")),Seq(Build(Var("c_54")),CallT(SVar("dr_break_0_1"),[],[Var("b_54")]))))))),SDefT("all_keys_IsImported_0_0",[],[],Scope(["d_54","e_54"],Seq(Match(Var("e_54")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("d_54")),Seq(Build(Var("e_54")),CallT(SVar("dr_all_keys_0_1"),[],[Var("d_54")]))))))),SDefT("bigfold_IsImported_1_0",[VarDec("n_54",FunType([FunType([ConstType(Sort("T",[]))],ConstType(Sort("T",[]))),ConstType(Sort("T",[]))],ConstType(Sort("T",[]))))],[],Scope(["h_54","i_54","o_54","s_54","r_54","v_54"],Seq(Match(As(Var("i_54"),Var("h_54"))),Seq(Match(Var("s_54")),Seq(Guard!
 edLChoice(Scope(["t_54","u_54"],Seq(Match(Var("u_54")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("t_54")),Seq(Build(Var("u_54")),CallT(SVar("dr_lookup_all_rules_0_2"),[],[Var("t_54"),Var("i_54")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("o_54")),Seq(Build(Var("s_54")),Seq(Match(Var("v_54")),Seq(Match(Var("r_54")),Seq(Build(Var("v_54")),Seq(Build(Anno(Op("",[Var("o_54"),Var("r_54")]),Op("Nil",[]))),CallT(SVar("n_54"),[Scope(["k_54","l_54","w_54"],Seq(Match(Anno(Op("",[Var("w_54"),As(Var("k_54"),Var("l_54"))]),Wld)),Seq(Build(Var("w_54")),CallT(SVar("aux_IsImported_0_2"),[],[Var("l_54"),Var("k_54")]))))],[])))))))))))),SDefT("fold_IsImported_1_0",[VarDec("d_55",FunType([FunType([ConstType(Sort("T",[]))],ConstType(Sort("T",[]))),ConstType(Sort("T",[]))],ConstType(Sort("T",[]))))],[],Scope(["x_54","y_54","e_55","g_55","f_55","m_55"],Seq(Match(As(Var("y_54"),Var("x_54"))),Seq(Match(Var("g_55")),Seq(GuardedLChoice(Scope(["h_55","j_55"],Se!
 q(Match(Var("j_55")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[])))
q(Match(Var("h_55")),Seq(Build(Var("j_55")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("h_55"),Var("y_54")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("e_55")),Seq(Build(Var("g_55")),Seq(Match(Var("m_55")),Seq(Match(Var("f_55")),Seq(Build(Var("m_55")),Seq(Build(Anno(Op("",[Var("e_55"),Var("f_55")]),Op("Nil",[]))),CallT(SVar("d_55"),[Scope(["z_54","c_55","n_55"],Seq(Match(Anno(Op("",[Var("n_55"),As(Var("z_54"),Var("c_55"))]),Wld)),Seq(Build(Var("n_55")),CallT(SVar("aux_IsImported_0_2"),[],[Var("c_55"),Var("z_54")]))))],[])))))))))))),SDefT("bigchain_IsImported_0_0",[],[],Scope(["o_55","p_55","s_55","w_55","t_55","z_55"],Seq(Match(As(Var("p_55"),Var("o_55"))),Seq(Match(Var("w_55")),Seq(GuardedLChoice(Scope(["x_55","y_55"],Seq(Match(Var("y_55")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("x_55")),Seq(Build(Var("y_55")),CallT(SVar("dr_lookup_all_rules_0_2"),[],[Var("x_55"),Var("p_55")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Matc!
 h(Var("s_55")),Seq(Build(Var("w_55")),Seq(Match(Var("z_55")),Seq(Match(Var("t_55")),Seq(Build(Var("z_55")),Seq(Build(Anno(Op("",[Var("s_55"),Var("t_55")]),Op("Nil",[]))),CallT(SVar("foldl_1_0"),[Scope(["q_55","r_55","a_56"],Seq(Match(Anno(Op("",[Var("a_56"),As(Var("q_55"),Var("r_55"))]),Wld)),Seq(Build(Var("a_56")),CallT(SVar("aux_IsImported_0_2"),[],[Var("r_55"),Var("q_55")]))))],[])))))))))))),SDefT("chain_IsImported_0_0",[],[],Scope(["b_56","c_56","h_56","k_56","i_56","n_56"],Seq(Match(As(Var("c_56"),Var("b_56"))),Seq(Match(Var("k_56")),Seq(GuardedLChoice(Scope(["l_56","m_56"],Seq(Match(Var("m_56")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("l_56")),Seq(Build(Var("m_56")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("l_56"),Var("c_56")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("h_56")),Seq(Build(Var("k_56")),Seq(Match(Var("n_56")),Seq(Match(Var("i_56")),Seq(Build(Var("n_56")),Seq(Build(Anno(Op("",[Var("h_56"),Var("i_56")]),Op("Nil",[!
 ]))),CallT(SVar("foldl_1_0"),[Scope(["d_56","e_56","o_56"],Seq(Match
no(Op("",[Var("o_56"),As(Var("d_56"),Var("e_56"))]),Wld)),Seq(Build(Var("o_56")),CallT(SVar("aux_IsImported_0_2"),[],[Var("e_56"),Var("d_56")]))))],[])))))))))))),SDefT("bigbagof_IsImported_0_0",[],[],Scope(["p_56","r_56","s_56","t_56"],Seq(Match(As(Var("r_56"),Var("p_56"))),Seq(Match(Var("t_56")),Seq(GuardedLChoice(Scope(["u_56","w_56"],Seq(Match(Var("w_56")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("u_56")),Seq(Build(Var("w_56")),CallT(SVar("dr_lookup_all_rules_0_2"),[],[Var("u_56"),Var("r_56")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("s_56")),Seq(Build(Var("t_56")),Seq(Build(Var("s_56")),CallT(SVar("filter_1_0"),[CallT(SVar("aux_IsImported_0_2"),[],[Var("p_56"),Var("r_56")])],[]))))))))),SDefT("once_IsImported_0_0",[],[],Scope(["x_56","y_56","z_56","a_57","b_57","e_57","f_57","g_57","h_57","i_57"],Seq(Match(As(Var("z_56"),Var("y_56"))),Seq(Match(Var("g_57")),Seq(Match(Var("i_57")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),!
 Seq(Match(Var("h_57")),Seq(Build(Var("i_57")),Seq(CallT(SVar("dr_lookup_rule_pointer_0_2"),[],[Var("h_57"),Var("z_56")]),Seq(Match(Anno(Op("",[Var("x_56"),Var("e_57"),Var("b_57")]),Wld)),Seq(Build(Var("x_56")),Seq(CallT(SVar("split_fetch_1_0"),[Seq(CallT(SVar("aux_IsImported_0_2"),[],[Var("y_56"),Var("z_56")]),Match(Var("a_57")))],[]),Seq(CallT(SVar("conc_0_0"),[],[]),Seq(Match(Var("f_57")),Seq(Build(Var("b_57")),Seq(CallT(SVar("hashtable_put_0_2"),[],[Var("e_57"),Var("f_57")]),Seq(Build(Var("g_57")),Build(Var("a_57"))))))))))))))))))),SDefT("reverse_bagof_IsImported_1_0",[VarDec("m_57",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[],Scope(["j_57","k_57","l_57","n_57"],Seq(Match(As(Var("k_57"),Var("j_57"))),Seq(Match(Var("n_57")),Seq(GuardedLChoice(Scope(["o_57","p_57"],Seq(Match(Var("p_57")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("o_57")),Seq(Build(Var("p_57")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("o_57"),Var("k_57")])))))!
 ),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("l_57")),
(Build(Var("n_57")),Seq(Build(Var("l_57")),CallT(SVar("reverse_filter_2_0"),[CallT(SVar("aux_IsImported_0_2"),[],[Var("j_57"),Var("k_57")]),CallT(SVar("m_57"),[],[])],[]))))))))),SDefT("bagof_IsImported_0_0",[],[],Scope(["q_57","r_57","s_57","t_57"],Seq(Match(As(Var("r_57"),Var("q_57"))),Seq(Match(Var("t_57")),Seq(GuardedLChoice(Scope(["u_57","v_57"],Seq(Match(Var("v_57")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("u_57")),Seq(Build(Var("v_57")),CallT(SVar("dr_lookup_rule_0_2"),[],[Var("u_57"),Var("r_57")])))))),Id,Build(Anno(Op("Nil",[]),Op("Nil",[])))),Seq(Match(Var("s_57")),Seq(Build(Var("t_57")),Seq(Build(Var("s_57")),CallT(SVar("filter_1_0"),[CallT(SVar("aux_IsImported_0_2"),[],[Var("q_57"),Var("r_57")])],[]))))))))),SDefT("IsImported_0_0",[],[],Scope(["w_57","x_57","z_57","a_58","c_58","d_58"],Seq(Match(As(Var("x_57"),Var("w_57"))),Seq(Match(Var("a_58")),Seq(Match(Var("d_58")),Seq(Build(Anno(Str("IsImported"),Op("Nil",[]))),Seq(Match(Var("c_58")),Se!
 q(Build(Var("d_58")),Seq(CallT(SVar("dr_lookup_rule_0_2"),[],[Var("c_58"),Var("x_57")]),Seq(Match(Var("z_57")),Seq(Build(Var("a_58")),Seq(Build(Var("z_57")),CallT(SVar("fetch_elem_1_0"),[CallT(SVar("aux_IsImported_0_2"),[],[Var("w_57"),Var("x_57")])],[]))))))))))))),SDefT("aux_IsImported_0_2",[],[VarDec("f_58",ConstType(Sort("ATerm",[]))),VarDec("g_58",ConstType(Sort("ATerm",[])))],Scope(["i_58","j_58"],Seq(Match(Anno(Op("",[Anno(Str("-597601"),Wld),Var("i_58")]),Wld)),Seq(Match(Var("j_58")),Seq(Build(Var("g_58")),Seq(Build(Var("j_58")),Build(Var("i_58")))))))),ExtSDef("strsglr_report_parse_error_0_0",[],[]),ExtSDef("strsglr_perror_0_0",[],[]),ExtSDef("parse_string_1_1",[VarDec("r_59",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("q_59",ConstType(Sort("ATerm",[])))]),ExtSDef("parse_stream_1_1",[VarDec("v_60",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("u_60",ConstType(Sort("ATerm",[])))]),ExtSDef("parse_file_2_!
 1",[VarDec("i_72",FunType([ConstType(Sort("ATerm",[]))],ConstType(So
"ATerm",[])))),VarDec("j_72",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("h_72",ConstType(Sort("ATerm",[])))]),ExtSDef("ast2abox_0_1",[],[VarDec("j_93",ConstType(Sort("ATerm",[])))]),ExtSDef("box2text_string_0_1",[],[VarDec("k_97",ConstType(Sort("ATerm",[])))]),ExtSDef("file_exists_0_0",[],[]),ExtSDef("modification_time_0_0",[],[]),ExtSDef("readdir_0_0",[],[]),ExtSDef("mkdir_0_0",[],[]),ExtSDef("report_failure_0_2",[],[VarDec("w_109",ConstType(Sort("ATerm",[]))),VarDec("x_109",ConstType(Sort("ATerm",[])))]),ExtSDef("real_to_string_0_0",[],[]),ExtSDef("is_string_0_0",[],[]),ExtSDef("explode_string_0_0",[],[]),ExtSDef("string_as_chars_1_0",[VarDec("k_111",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("concat_strings_0_0",[],[]),ExtSDef("is_upper_0_0",[],[]),ExtSDef("string_replace_0_2",[],[VarDec("y_112",ConstType(Sort("ATerm",[]))),VarDec("z_112",ConstType(Sort("ATerm",[])))]),ExtSDef("gt_0_0",[],[]),ExtSDef(!
 "inc_0_0",[],[]),ExtSDef("int_to_string_0_0",[],[]),ExtSDef("preserve_annos_1_0",[VarDec("l_114",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("ReadFromFile_0_0",[],[]),ExtSDef("WriteToBinaryFile_0_0",[],[]),ExtSDef("write_to_string_0_0",[],[]),ExtSDef("debug_1_0",[VarDec("r_114",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("guarantee_extension_0_1",[],[VarDec("f_115",ConstType(Sort("ATerm",[])))]),ExtSDef("topdown_1_0",[VarDec("l_117",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("repeat_1_0",[VarDec("c_121",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("try_1_0",[VarDec("g_125",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("collect_all_2_0",[VarDec("c_126",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),VarDec("d_126",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[!
 ]))))],[]),ExtSDef("report_with_failure_0_2",[],[VarDec("o_127",Cons
pe(Sort("ATerm",[]))),VarDec("p_127",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_scope_1_1",[VarDec("u_127",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("t_127",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_scope_all_start_0_0",[],[]),ExtSDef("dr_scope_all_end_0_0",[],[]),ExtSDef("dr_get_first_scope_label_1_1",[VarDec("j_128",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("i_128",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_lookup_rule_0_2",[],[VarDec("q_128",ConstType(Sort("ATerm",[]))),VarDec("r_128",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_lookup_all_rules_0_2",[],[VarDec("s_128",ConstType(Sort("ATerm",[]))),VarDec("t_128",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_lookup_rule_pointer_0_2",[],[VarDec("u_128",ConstType(Sort("ATerm",[]))),VarDec("v_128",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_all_keys_0_1",[],[VarDec("w_128",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_set_rule_0_3",[],[VarDec("x_128",ConstType(Sort!
 ("ATerm",[]))),VarDec("y_128",ConstType(Sort("ATerm",[]))),VarDec("z_128",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_add_rule_0_3",[],[VarDec("e_130",ConstType(Sort("ATerm",[]))),VarDec("f_130",ConstType(Sort("ATerm",[]))),VarDec("g_130",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_break_0_1",[],[VarDec("w_139",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_break_0_2",[],[VarDec("x_139",ConstType(Sort("ATerm",[]))),VarDec("b_140",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_break_bp_0_1",[],[VarDec("c_140",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_continue_0_1",[],[VarDec("j_140",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_continue_0_2",[],[VarDec("n_140",ConstType(Sort("ATerm",[]))),VarDec("r_140",ConstType(Sort("ATerm",[])))]),ExtSDef("dr_throw_1_2",[VarDec("a_141",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[VarDec("v_140",ConstType(Sort("ATerm",[]))),VarDec("w_140",ConstType(Sort("ATerm",[])))]),ExtSDef("index_0_1",[],[VarDec("h_150",ConstType(Sort("ATe!
 rm",[])))]),ExtSDef("at_index_1_0",[VarDec("j_150",FunType([ConstTyp
ort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("filter_1_0",[VarDec("s_150",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("reverse_filter_2_0",[VarDec("y_150",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[])))),VarDec("z_150",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("list_loop_1_0",[VarDec("m_151",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("Hd_0_0",[],[]),ExtSDef("is_list_0_0",[],[]),ExtSDef("map_1_0",[VarDec("r_151",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("fetch_elem_1_0",[VarDec("h_152",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("split_fetch_1_0",[VarDec("i_152",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("conc_0_0",[],[]),ExtSDef("foldl_1_0",[VarDec("l_155",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",!
 []))))],[]),ExtSDef("ltrim_1_0",[VarDec("r_156",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("ATerm",[]))))],[]),ExtSDef("hashtable_put_0_2",[],[VarDec("u_158",ConstType(Sort("ATerm",[]))),VarDec("w_158",ConstType(Sort("ATerm",[])))])])])
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/include/lwc.ctree.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/include/lwc.ctree.dep	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,7 @@
+/Users/eelcovisser/workspace/workspace-splash/lwc/include/lwc.ctree: \
+	/Users/eelcovisser/workspace/workspace-splash/lwc/trans/generate.str \
+	/Users/eelcovisser/workspace/workspace-splash/lwc/trans/check.str \
+	 \
+	/Users/eelcovisser/workspace/workspace-splash/lwc/lib/editor-common.generated.str \
+	/Users/eelcovisser/workspace/workspace-splash/lwc/include/LWC.str \
+	/Users/eelcovisser/workspace/workspace-splash/lwc/trans/lwc.str
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lib/editor-common.generated.str	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-lwc-file
+  parse-lwc-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/LWC.tbl)>
+    )
+
+  parse-string = parse-lwc-string
+  parse-lwc-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/LWC.tbl)>
+    )
+  
+  parse-stream = parse-lwc-stream
+  parse-lwc-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/LWC.tbl)>
+    )
+
+  pp-lwc-string =
+    ast2abox(|[<import-term(include/LWC.generated.pp.af)>,
+               <import-term(include/LWC.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "LWC", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/lwc.str file. These definitions should also be automatically 
+  // generated in the imported include/LWC.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-contrib/lwc11/trunk/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/plugin.xml	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="lwc" description="LWC" language="LWC" derivedFrom="DynamicRoot" validator="lwc.LWCValidator" validatorClass="lwc.LWCValidator"></language>
+       </extension>
+       <extension id="lwc.parser" name="LWC Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="lwc.LWCParseController" language="LWC">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/syntax/Common.sdf	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-contrib/lwc11/trunk/syntax/LWC.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/syntax/LWC.generated.pp	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,8 @@
+[
+   Module             -- KW["module"] _1 _2,
+   Module.2:iter-star -- _1,
+   Entity             -- KW["entity"] _1 KW["{"] _2 KW["}"],
+   Entity.2:iter-star -- _1,
+   Property           -- _1 KW[":"] _2,
+   Type               -- _1
+]
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/syntax/LWC.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/syntax/LWC.pp	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also LWC.generated.pp)
+[]

Added: spoofax-contrib/lwc11/trunk/syntax/LWC.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/syntax/LWC.sdf	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,17 @@
+%% Grammar for the LWC language
+%% By default, based on an example "entities" syntax
+module LWC
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+  
+    "module" ID Definition*       -> Start {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID ":" Type                   -> Property {cons("Property")}
+    ID                            -> Type {cons("Type")}

Added: spoofax-contrib/lwc11/trunk/test/example.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/example.java	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,72 @@
+package example;
+
+class User {
+    
+    private String name;
+    
+    public String get_name {
+        return name;
+    }
+    
+    public void set_name (String name) {
+        this.name = name;    
+    }
+    
+    private String password;
+    
+    public String get_password {
+        return password;
+    }
+    
+    public void set_password (String password) {
+        this.password = password;    
+    }
+    
+    private URL homepage;
+    
+    public URL get_homepage {
+        return homepage;
+    }
+    
+    public void set_homepage (URL homepage) {
+        this.homepage = homepage;    
+    }
+    
+}
+class BlogPosting {
+    
+    private User poster;
+    
+    public User get_poster {
+        return poster;
+    }
+    
+    public void set_poster (User poster) {
+        this.poster = poster;    
+    }
+    
+    private String body;
+    
+    public String get_body {
+        return body;
+    }
+    
+    public void set_body (String body) {
+        this.body = body;    
+    }
+    
+}
+class URL {
+    
+    private String location;
+    
+    public String get_location {
+        return location;
+    }
+    
+    public void set_location (String location) {
+        this.location = location;    
+    }
+    
+}
+

Added: spoofax-contrib/lwc11/trunk/test/example.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/example.lwc	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,18 @@
+module example
+
+// Example "LWC" program (see syntax/LWC.sdf for the grammar)
+
+entity User {
+  name     : String
+  password : String
+  homepage : URL
+}
+
+entity BlogPosting {
+  poster : User
+  body   : String
+}
+
+entity URL {
+  location : String
+}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/trans/check.str	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,51 @@
+module check
+
+imports
+  libstratego-lib
+  include/LWC
+  lib/editor-common.generated
+
+rules
+
+  // Analysis: does a topdown traversal of the tree,
+  // and tries to apply the record-entity rule.
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-entity))> t
+
+  // Records the definition of an entity in a dynamic rule GetEntity.
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      // For a name 'x', GetEntity will return the original 'x' tree node
+      rules(
+        GetEntity :+ x -> x
+      )
+rules
+    
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<GetEntity> type) // no entity for this type
+  
+  // Reports an error if an entity is defined more than once.
+  // This constraint is implemented by testing if the "bag" of
+  // all entities x is not a singleton list.
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])

Added: spoofax-contrib/lwc11/trunk/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/trans/generate.str	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,47 @@
+module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/LWC
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: spoofax-contrib/lwc11/trunk/trans/lwc.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/trans/lwc.str	Mon Oct  4 14:21:02 2010	(r21272)
@@ -0,0 +1,61 @@
+module lwc
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/LWC
+  lib/editor-common.generated
+  check
+  generate
+
+rules // Main editor interface (defined by editor/LWC-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      <debug(!"Resolve: ")> node; 
+      Type(type) := node; 
+      target     := <GetEntity> type
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) ->
+    ["String", "Int" | proposals]
+    where
+      if !node => Type(COMPLETION(prefix)) then
+        proposals := <all-keys-GetEntity>
+      end

From E.Visser at tudelft.nl  Mon Oct  4 16:24:49 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 14:24:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21273 - in
	spoofax-contrib/lwc11/trunk: .externalToolBuilders bin doc include
Message-ID: <201010041424.o94EOnV9003592@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 14:24:48 2010
New Revision: 21273
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21273&sc=1

Log:


Added:
   spoofax-contrib/lwc11/trunk/.externalToolBuilders/
   spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch
Deleted:
   spoofax-contrib/lwc11/trunk/bin/
   spoofax-contrib/lwc11/trunk/include/
Modified:
   spoofax-contrib/lwc11/trunk/doc/body.ltx
   spoofax-contrib/lwc11/trunk/doc/phase0.ltx

Added: spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch	Mon Oct  4 14:24:48 2010	(r21273)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${project_loc}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${project_loc}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Modified: spoofax-contrib/lwc11/trunk/doc/body.ltx
==============================================================================
--- spoofax-contrib/lwc11/trunk/doc/body.ltx	Mon Oct  4 14:21:02 2010	(r21272)
+++ spoofax-contrib/lwc11/trunk/doc/body.ltx	Mon Oct  4 14:24:48 2010	(r21273)
@@ -9,7 +9,15 @@
 
        Using already installed Eclipse 3.5.1 on Mac OS X.
 
-       Updated to latest (unstable) version of Spoofax available from the update site
-       http://www.lclnet.nl/update/unstable.
+       Updated to latest (unstable) version of Spoofax 0.5.3.7 available from the
+       update site http://www.lclnet.nl/update/unstable. (see Eclipse -> About ->
+       Installation details)
 
+       Set up a subversion directory in the Stratego/XT repository. All the code for
+       this example will be available there.
+
+\begin{verbatim}
+ https://svn.strategoxt.org/repos/StrategoXT/spoofax-contrib/lwc11/
+\end{verbatim}
+       
 \input{phase0.ltx}

Modified: spoofax-contrib/lwc11/trunk/doc/phase0.ltx
==============================================================================
--- spoofax-contrib/lwc11/trunk/doc/phase0.ltx	Mon Oct  4 14:21:02 2010	(r21272)
+++ spoofax-contrib/lwc11/trunk/doc/phase0.ltx	Mon Oct  4 14:24:48 2010	(r21273)
@@ -12,3 +12,5 @@
         Oh, that was easy! Phase 0.1 to 0.3 done! The example project generated by
         Spoofax is exactly an entity language with simple code generation, constraint
         checks, reference resolving, outline view, syntax highlighting.
+
+        Revision 21272
\ No newline at end of file

From E.Visser at tudelft.nl  Mon Oct  4 16:39:20 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 14:39:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21274 -
	spoofax-contrib/lwc11/trunk
Message-ID: <201010041439.o94EdK9A003945@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 14:39:19 2010
New Revision: 21274
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21274&sc=1

Log:
start over

Deleted:
   spoofax-contrib/lwc11/trunk/

From E.Visser at tudelft.nl  Mon Oct  4 16:39:36 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 14:39:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21275 -
	spoofax-contrib/lwc11/trunk
Message-ID: <201010041439.o94EdawS003948@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 14:39:36 2010
New Revision: 21275
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21275&sc=1

Log:


Added:
   spoofax-contrib/lwc11/trunk/

From E.Visser at tudelft.nl  Mon Oct  4 16:42:59 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 14:42:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21276 - in
	spoofax-contrib/lwc11/trunk: . .externalToolBuilders META-INF
	doc editor editor/java editor/java/lwc
	editor/java/lwc/strategies lib syntax test trans
Message-ID: <201010041442.o94EgxYD004037@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 14:42:57 2010
New Revision: 21276
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21276&sc=1

Log:
Example Spoofax project generated by the wizard

Added:
   spoofax-contrib/lwc11/trunk/.classpath
   spoofax-contrib/lwc11/trunk/.externalToolBuilders/
   spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch
   spoofax-contrib/lwc11/trunk/.project
   spoofax-contrib/lwc11/trunk/META-INF/
   spoofax-contrib/lwc11/trunk/META-INF/MANIFEST.MF
   spoofax-contrib/lwc11/trunk/build.generated.xml
   spoofax-contrib/lwc11/trunk/build.main.xml
   spoofax-contrib/lwc11/trunk/build.properties
   spoofax-contrib/lwc11/trunk/doc/
   spoofax-contrib/lwc11/trunk/doc/Makefile
   spoofax-contrib/lwc11/trunk/doc/body.ltx
   spoofax-contrib/lwc11/trunk/doc/doc.ltx
   spoofax-contrib/lwc11/trunk/doc/phase0.ltx
   spoofax-contrib/lwc11/trunk/editor/
   spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Builders.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Completions.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-References.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-References.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC.main.esv
   spoofax-contrib/lwc11/trunk/editor/java/
   spoofax-contrib/lwc11/trunk/editor/java/lwc/
   spoofax-contrib/lwc11/trunk/editor/java/lwc/Activator.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCParseController.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCValidator.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/
   spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/InteropRegisterer.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/Main.java
   spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/java_strategy_0_0.java
   spoofax-contrib/lwc11/trunk/lib/
   spoofax-contrib/lwc11/trunk/lib/editor-common.generated.str
   spoofax-contrib/lwc11/trunk/plugin.xml
   spoofax-contrib/lwc11/trunk/syntax/
   spoofax-contrib/lwc11/trunk/syntax/Common.sdf
   spoofax-contrib/lwc11/trunk/syntax/LWC.pp
   spoofax-contrib/lwc11/trunk/syntax/LWC.sdf
   spoofax-contrib/lwc11/trunk/test/
   spoofax-contrib/lwc11/trunk/test/example.lwc
   spoofax-contrib/lwc11/trunk/trans/
   spoofax-contrib/lwc11/trunk/trans/check.str
   spoofax-contrib/lwc11/trunk/trans/generate.str
   spoofax-contrib/lwc11/trunk/trans/lwc.str

Added: spoofax-contrib/lwc11/trunk/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/.classpath	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${project_loc}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${project_loc}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-contrib/lwc11/trunk/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/.project	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>lwc</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/LWC build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/META-INF/MANIFEST.MF	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,22 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: LWC Plug-in
+Bundle-SymbolicName: lwc; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: lwc.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: lwc

Added: spoofax-contrib/lwc11/trunk/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/build.generated.xml	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,435 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/lwc/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la lwc.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+                <path><fileset dir="${basedir}" includes="*.astr"/></path>
+            </pathconvert>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <fileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </fileset>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/build.main.xml	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="LWC" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="LWC"/>
+        <property name="metasdfmodule" value="Stratego-LWC"/>
+        <property name="esvmodule" value="LWC"/>
+        <property name="strmodule" value="lwc"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/build.properties	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-contrib/lwc11/trunk/doc/Makefile
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/doc/Makefile	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,8 @@
+all : doc.dvi doc.pdf
+
+doc.pdf : doc.ltx $(wildcard *.ltx) Makefile
+	pdflatex doc.ltx
+
+doc.dvi : doc.ltx $(wildcard *.ltx) Makefile
+	latex doc.ltx
+

Added: spoofax-contrib/lwc11/trunk/doc/body.ltx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/doc/body.ltx	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,15 @@
+\section{Introduction}
+        \label{intro}
+
+        This paper is a log of the construction of the example case for the Language
+        Workbench Comparison Workshop 2011.
+
+\section{Preparation}
+       \label{}
+
+       Using already installed Eclipse 3.5.1 on Mac OS X.
+
+       Updated to latest (unstable) version of Spoofax available from the update site
+       http://www.lclnet.nl/update/unstable.
+
+\input{phase0.ltx}

Added: spoofax-contrib/lwc11/trunk/doc/doc.ltx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/doc/doc.ltx	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,16 @@
+\documentclass{article}
+
+\title{Spoofax Example for LWC}
+\author{Eelco Visser\\Delft University of Technology\\http://eelcovisser.org}
+\date{\today}
+
+\begin{document}
+
+  \maketitle
+
+  \parindent0pt
+  \parskip1em
+
+  \input{body.ltx}
+
+\end{document}

Added: spoofax-contrib/lwc11/trunk/doc/phase0.ltx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/doc/phase0.ltx	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,14 @@
+\section{Phase 0}
+
+\subsection{Phase 0.1: Simple Structural DSL}
+        \label{}
+
+        Create new Spoofax/IMP editor project using the corresponding wizard
+
+\begin{verbatim}
+  File > Project > New > Spoofax/IMP editor project
+\end{verbatim}
+        
+        Oh, that was easy! Phase 0.1 to 0.3 done! The example project generated by
+        Spoofax is exactly an entity language with simple code generation, constraint
+        checks, reference resolving, outline view, syntax highlighting.

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,22 @@
+
+module LWC-Builders
+
+imports LWC-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                                               
+  provider                  : include/lwc.ctree                                                                                
+  provider                  : include/lwc-java.jar                                                                             
+                                                                                                                               
+  observer                  : editor-analyze                                                                                   
+                                                                                                                               
+  builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
+  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                                                                                                                               
+  // on save: generate-java                                                                                                    
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Builders.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Builders.generated.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,40 @@
+
+module LWC-Builders.generated
+
+builders
+                                                                                                      
+  // Building and analysis is defined in Stratego program or programs:                                
+  //                                                                                                  
+  //   provider : stratego-program.ctree                                                              
+  //   provider : stratego-library.jar                                                                
+  //                                                                                                  
+  // Analysis is carried out by a Stratego rule that can be selected as follows:                      
+  //                                                                                                  
+  //   observer : analysis-rule                                                                       
+  //                                                                                                  
+  // Any dynamic rules set in the analysis may be used by other semantic services,                    
+  // such as reference resolving or the builders.                                                     
+  //                                                                                                  
+  // Builders may carry out custom transformations on a file or selection.                            
+  // (At run-time, they can be accessed using the toolbar button with the star icon.)                 
+  // Builders can be specified as follows:                                                            
+  //                                                                                                  
+  //   builder : "Generate Java code" = generate-java (openeditor) (persistent) (realtime)            
+  //                                                                                                  
+  // In this example, the caption "Generate Java code" is used in the build button dropdown menu,     
+  // and the generate-java rule is used to carry out the tranformation.                               
+  // Builder definitions can also specify any combination of the following annotations:               
+  //                                                                                                  
+  //   (cursor)      The builder should always transform the tree node at the cursor.                 
+  //   (meta)        Indicates the builder should only be available to meta-programmers               
+  //                 (i.e., not when the plugin is deployed to end-users).                            
+  //   (openeditor)  Indicates an editor should be opened with the result.                            
+  //   (persistent)  Indicates that the resulting file should be saved to disk.                       
+  //   (realtime)    Indicates that the resulting editor should be updated in real-time               
+  //                 as the source file is edited.                                                    
+  //   (source)      Always apply this builder to the source AST, not to the AST                      
+  //                 after it has been analyzed/desugared by the observer.                            
+  //                                                                                                  
+  // The 'on save' handler can be used  to generate code as files are saved:                          
+  //                                                                                                  
+  //   on save : generate-java                                                                        
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,9 @@
+module LWC-Colorer
+
+imports LWC-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Colorer.generated.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,46 @@
+module LWC-Colorer.generated
+
+colorer
+                                                                                             
+  // Sort-based highlighting with background color                                           
+  //   Id: yellow green                                                                      
+  //                                                                                         
+  // Sort- and constructor-based highlighting                                                
+  //   ClassBodyDec.MethodDec: yellow                                                        
+  //                                                                                         
+  // Constructor-based highlighting                                                          
+  //   _.MethodDec: 255 0 0                                                                  
+  //                                                                                         
+  // Example: background colors for ToMetaExpr/FromMetaExpr, if supported by the grammar     
+  //   environment _.ToMetaExpr:   _ 220 230 200                                             
+  //   environment _.FromMetaExpr: _ white                                                   
+
+colorer Default, token-based highlighting
+                                  
+  keyword    : 127 0 85 bold      
+  identifier : default            
+  string     : blue               
+  number     : darkgreen          
+  var        : 255 0 100 italic   
+  operator   : 0 0 128            
+  layout     : 100 100 0 italic   
+
+colorer System colors
+                            
+  darkred   = 128 0 0       
+  red       = 255 0 0       
+  darkgreen = 0 128 0       
+  green     = 0 255 0       
+  darkblue  = 0 0 128       
+  blue      = 0 0 255       
+  cyan      = 0 255 255     
+  magenta   = 255 0 255     
+  yellow    = 255 255 0     
+  white     = 255 255 255   
+  black     = 0 0 0         
+  gray      = 128 128 128   
+  grey      = gray          
+  orange    = 255 165 0     
+  pink      = 255 105 180   
+  brown     = 139 69 19     
+  default   = _             
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,28 @@
+module LWC-Completions
+
+imports LWC-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                                                 
+  // Syntax completion:                                          
+                                                                 
+  completion template : Start =      "module " <m> (blank)       
+                                                                 
+  completion template : Definition = "entity " <e> " {}" (blank) 
+                                                                 
+  completion template : Property =   <x> " : " <T> (blank)       
+                                                                 
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  completion proposer                  : editor-complete
+                                         
+  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Completions.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Completions.generated.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,46 @@
+module LWC-Completions.generated
+
+completions
+                                                                                          
+  // Syntactic content completion can be defined as follows:                              
+  //                                                                                      
+  //   completion keyword  : "keyword"                                                    
+  //   completion template : "if " <e> " then\n\t" <s> "\nend"                            
+  //                                                                                      
+  // This defines keyword completion for "keyword" and                                    
+  // a template completion for the "if" keyword (note the use of \n, \t, and spaces).     
+  // In this template, the text selection expands to the "e" placeholder identifier       
+  // enclosed in <> brackets.                                                             
+  //                                                                                      
+  // Use the (blank) annotation if you want a template completion only to                 
+  // appear on blank lines:                                                               
+  //                                                                                      
+  //   completion template: "section " <title> "\n\t" (blank)                             
+  //                                                                                      
+  // Finally, you can specify a specific SDF sort for which a completion                  
+  // rule should trigger as follows:                                                      
+  //                                                                                      
+  //   completion template : Section =                                                    
+  //     "section " <title> "\n\t" (blank)                                                
+  //                                                                                      
+  // Semantic content completion can be defined as follows:                               
+  //                                                                                      
+  //   completion proposer : completion-function-call                                     
+  //   completion trigger  : "\."                                                         
+  //                                                                                      
+  // This sets completion-function-call as the completion strategy,                       
+  // and declares that [A-Za-z0-9_]+ may be used as a lexical pattern                     
+  // to parse identifiers (used to set the text selection with suggestions).              
+  // The completion trigger uses a regular expression to specify that                     
+  // completions should be proposed as the user types ".".                                
+  //                                                                                      
+  // Completions make use of the identifier lexical defined in YourLanguage-Syntax.esv    
+  // to select identifiers in completion suggestions.                                     
+  //                                                                                      
+  // Semantic completion uses the semantic provider defined in YourLanguage-Builders.esv  
+  // All semantic services may make use of the dynamic rules created by the observer.     
+
+completions
+                                     
+  // Derived completions may follow  
+                                     
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,9 @@
+module LWC-Folding
+
+imports LWC-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,24 @@
+module LWC-Folding.generated
+
+folding Default folding definitions
+  
+  // Folding rules indicate which syntactic constructs can be folded,
+  // and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  //
+  // To indicate that an element should always be folded, add
+  // a (folded) annotation:
+  //
+  //   _.Imports (folded)
+  //
+  // To disable a folding rule defined elsewhere, add a (disabled) annotation:
+  //
+  //   Definition._ (disabled)
+  
+  Start.Module
+  Definition.Entity
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,9 @@
+module LWC-Outliner
+
+imports LWC-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,16 @@
+module LWC-Outliner.generated
+
+outliner Default outliner        
+  
+  
+  // Outliner rules indicate which syntactic constructs should be shown in the outline
+  // and quick outline views, and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  
+  Start.Module
+  Definition.Entity
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-References.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,15 @@
+module LWC-References
+
+imports LWC-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-References.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-References.generated.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,19 @@
+
+module LWC-References.generated
+
+references
+                                                                                          
+  // Reference resolving rules can specify the syntax constructors for which              
+  // a reference resolving function is available:                                         
+  //                                                                                      
+  //   reference FunctionCall : resolve-function-call                                     
+  //                                                                                      
+  // This defines that for each FunctionCall, resolve-function-call                       
+  // will retrieve the AST node that declares it.                                         
+  //                                                                                      
+  // Likewise, hover help can be specified as follows:                                    
+  //                                                                                      
+  //   hover FunctionCall : hover-help-function-call                                      
+  //                                                                                      
+  // Reference resolving uses the semantic provider defined in YourLanguage-Builders.esv  
+  // All semantic services may make use of the dynamic rules created by the observer.     
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,9 @@
+module LWC-Syntax
+
+imports LWC-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Syntax.generated.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,21 @@
+module LWC-Syntax.generated
+
+language Syntax properties (static defaults)
+                                           
+  // Comment constructs:                   
+  line comment                           : "//"
+  block comment                          : "/*" * "*/"
+                                           
+  // Fences (used for matching,            
+  // inserting, indenting brackets):       
+  fences                                 : [ ]
+                                           ( )
+                                           { }
+                                           
+  // Automatic indent hints                
+  // (indent after these tokens):          
+  indent after                           : "="
+                                           ":"
+                                           
+  // Regular expression for identifiers:   
+  identifier lexical                     : "[A-Za-z0-9_]+"
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/LWC.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/LWC.main.esv	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,16 @@
+module LWC.main
+
+imports LWC-Builders LWC-Colorer LWC-Completions LWC-Folding LWC-Outliner LWC-References LWC-Syntax
+
+language General properties
+                  
+  name          : LWC
+  id            : lwc
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the LWC language"
+  url           : http://strategoxt.org
+                  
+  extensions    : lwc
+  table         : include/LWC.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/Activator.java	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,44 @@
+package lwc;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "LWC";
+
+  public static final String kLanguageName = "LWC";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCParseController.java	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,89 @@
+package lwc;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class LWCParseController extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("LWC");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = LWCParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = LWCParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(LWCParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return LWCParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/LWCValidator.java	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,12 @@
+package lwc;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class LWCValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return LWCParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/InteropRegisterer.java	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,14 @@
+package lwc.strategies;
+
+       import org.strategoxt.lang.JavaInteropRegisterer;
+       import org.strategoxt.lang.Strategy;
+
+       /**
+        * Helper class for {@link java_strategy_0_0}.
+        */
+       public class InteropRegisterer extends JavaInteropRegisterer {
+
+         public InteropRegisterer() {
+           super(new Strategy[] { java_strategy_0_0.instance });
+         }
+       }

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/Main.java	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,11 @@
+package lwc.strategies;
+
+       import org.strategoxt.lang.Context;
+       
+       public class Main {
+         
+         public static void init(Context context) {
+           // Called when the editor is being initialized
+         }
+       
+       }

Added: spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/editor/java/lwc/strategies/java_strategy_0_0.java	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,32 @@
+package lwc.strategies;
+
+       import org.spoofax.interpreter.terms.IStrategoTerm;
+       import org.spoofax.interpreter.terms.ITermFactory;
+       import org.strategoxt.lang.Context;
+       import org.strategoxt.lang.Strategy;
+       
+       /**
+        * Example Java strategy implementation.
+        *
+        * This strategy can be used by editor services and can be called
+        * in Stratego modules by declaring it as an external strategy
+        * as follows:
+        *
+        * <code>
+        *  external java-strategy(|)
+        * </code>
+        *
+        * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+        */
+       public class java_strategy_0_0 extends Strategy {
+         
+         public static java_strategy_0_0 instance = new java_strategy_0_0();
+       
+         @Override
+         public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+           context.getIOAgent().printError("Input for java-strategy: " + current);
+           ITermFactory factory = context.getFactory();
+           return factory.makeString("Regards from java-strategy");
+         }
+       
+       }

Added: spoofax-contrib/lwc11/trunk/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lib/editor-common.generated.str	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-lwc-file
+  parse-lwc-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/LWC.tbl)>
+    )
+
+  parse-string = parse-lwc-string
+  parse-lwc-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/LWC.tbl)>
+    )
+  
+  parse-stream = parse-lwc-stream
+  parse-lwc-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/LWC.tbl)>
+    )
+
+  pp-lwc-string =
+    ast2abox(|[<import-term(include/LWC.generated.pp.af)>,
+               <import-term(include/LWC.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "LWC", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/lwc.str file. These definitions should also be automatically 
+  // generated in the imported include/LWC.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-contrib/lwc11/trunk/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/plugin.xml	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="lwc" description="LWC" language="LWC" derivedFrom="DynamicRoot" validator="lwc.LWCValidator" validatorClass="lwc.LWCValidator"></language>
+       </extension>
+       <extension id="lwc.parser" name="LWC Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="lwc.LWCParseController" language="LWC">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/syntax/Common.sdf	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-contrib/lwc11/trunk/syntax/LWC.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/syntax/LWC.pp	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also LWC.generated.pp)
+[]

Added: spoofax-contrib/lwc11/trunk/syntax/LWC.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/syntax/LWC.sdf	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,17 @@
+%% Grammar for the LWC language
+%% By default, based on an example "entities" syntax
+module LWC
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+  
+    "module" ID Definition*       -> Start {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID ":" Type                   -> Property {cons("Property")}
+    ID                            -> Type {cons("Type")}

Added: spoofax-contrib/lwc11/trunk/test/example.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/example.lwc	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,18 @@
+module example
+
+// Example "LWC" program (see syntax/LWC.sdf for the grammar)
+
+entity User {
+  name     : String
+  password : String
+  homepage : URL
+}
+
+entity BlogPosting {
+  poster : User
+  body   : String
+}
+
+entity URL {
+  location : String
+}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/trans/check.str	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,51 @@
+module check
+
+imports
+  libstratego-lib
+  include/LWC
+  lib/editor-common.generated
+
+rules
+
+  // Analysis: does a topdown traversal of the tree,
+  // and tries to apply the record-entity rule.
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-entity))> t
+
+  // Records the definition of an entity in a dynamic rule GetEntity.
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      // For a name 'x', GetEntity will return the original 'x' tree node
+      rules(
+        GetEntity :+ x -> x
+      )
+rules
+    
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<GetEntity> type) // no entity for this type
+  
+  // Reports an error if an entity is defined more than once.
+  // This constraint is implemented by testing if the "bag" of
+  // all entities x is not a singleton list.
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])

Added: spoofax-contrib/lwc11/trunk/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/trans/generate.str	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,47 @@
+module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/LWC
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: spoofax-contrib/lwc11/trunk/trans/lwc.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/trans/lwc.str	Mon Oct  4 14:42:57 2010	(r21276)
@@ -0,0 +1,61 @@
+module lwc
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/LWC
+  lib/editor-common.generated
+  check
+  generate
+
+rules // Main editor interface (defined by editor/LWC-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      <debug(!"Resolve: ")> node; 
+      Type(type) := node; 
+      target     := <GetEntity> type
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) ->
+    ["String", "Int" | proposals]
+    where
+      if !node => Type(COMPLETION(prefix)) then
+        proposals := <all-keys-GetEntity>
+      end

From L.C.L.Kats at tudelft.nl  Mon Oct  4 17:17:30 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Oct 2010 15:17:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21277 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201010041517.o94FHUCU005115@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Oct  4 15:17:30 2010
New Revision: 21277
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21277&sc=1

Log:
Release 0.5.3.7

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Oct  4 14:42:57 2010	(r21276)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Oct  4 15:17:30 2010	(r21277)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.3.6"
+      version="0.5.3.7"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Mon Oct  4 14:42:57 2010	(r21276)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Mon Oct  4 15:17:30 2010	(r21277)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.3.6.jar" id="org.strategoxt.imp" version="0.5.3.6">
+   <feature url="features/org.strategoxt.imp_0.5.3.7.jar" id="org.strategoxt.imp" version="0.5.3.7">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From L.C.L.Kats at tudelft.nl  Mon Oct  4 17:17:57 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Oct 2010 15:17:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21278 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans
Message-ID: <201010041517.o94FHvK3005121@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Oct  4 15:17:57 2010
New Revision: 21278
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21278&sc=1

Log:
Support SDF imports relative to the project path in the editor

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Mon Oct  4 15:17:30 2010	(r21277)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Mon Oct  4 15:17:57 2010	(r21278)
@@ -45,11 +45,13 @@
   
   resolve-import =
     // TODO: better import handling
-    \x -> $[[<CurrentDir>]/[x].sdf]\; file-exists
+    \x -> $[[<ProjectDir>]/[x].sdf]\; file-exists
   <+
     \x -> $[[<ProjectDir>]/syntax/[x].sdf]\; file-exists
   <+
     \x -> $[[<ProjectDir>]/lib/[x].def]\; file-exists
+  <+
+    \x -> $[[<CurrentDir>]/[x].sdf]\; file-exists
   
   declare-globals:
     prod @ prod(lhs, sort, _) -> <id>

From E.Visser at tudelft.nl  Mon Oct  4 17:58:14 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 15:58:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21279 - in
	spoofax-contrib/lwc11/trunk: . common common/syntax editor
	entities entities/syntax entities/trans lwc lwc/syntax
	lwc/test lwc/trans syntax test trans
Message-ID: <201010041558.o94FwE8l005744@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 15:58:14 2010
New Revision: 21279
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21279&sc=1

Log:
refactoring to support definition of sub-languages

Added:
   spoofax-contrib/lwc11/trunk/common/
   spoofax-contrib/lwc11/trunk/common/syntax/
   spoofax-contrib/lwc11/trunk/common/syntax/Common.sdf
   spoofax-contrib/lwc11/trunk/entities/
   spoofax-contrib/lwc11/trunk/entities/syntax/
   spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
   spoofax-contrib/lwc11/trunk/entities/trans/
   spoofax-contrib/lwc11/trunk/lwc/
   spoofax-contrib/lwc11/trunk/lwc/syntax/
   spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.generated.pp
   spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.pp
   spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf
   spoofax-contrib/lwc11/trunk/lwc/test/
   spoofax-contrib/lwc11/trunk/lwc/test/example.lwc
   spoofax-contrib/lwc11/trunk/lwc/trans/
   spoofax-contrib/lwc11/trunk/lwc/trans/check.str
   spoofax-contrib/lwc11/trunk/lwc/trans/generate.str
   spoofax-contrib/lwc11/trunk/lwc/trans/lwc.str
Deleted:
   spoofax-contrib/lwc11/trunk/syntax/
   spoofax-contrib/lwc11/trunk/test/
   spoofax-contrib/lwc11/trunk/trans/
Modified:
   spoofax-contrib/lwc11/trunk/build.main.xml
   spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv

Modified: spoofax-contrib/lwc11/trunk/build.main.xml
==============================================================================
--- spoofax-contrib/lwc11/trunk/build.main.xml	Mon Oct  4 15:17:57 2010	(r21278)
+++ spoofax-contrib/lwc11/trunk/build.main.xml	Mon Oct  4 15:58:14 2010	(r21279)
@@ -9,18 +9,20 @@
         <property name="strmodule" value="lwc"/>
     
         <!-- Project directories -->
-        <property name="trans" location="trans"/>
+        <property name="trans" location="lwc/trans"/>
         <property name="src-gen" location="editor/java"/>
-        <property name="syntax" location="syntax"/>
+        <property name="syntax" location="lwc/syntax"/>
         <property name="include" location="include"/>
         <property name="lib" location="lib"/>
         <property name="build" location="bin"/>
-        <property name="dist" location="bin/dist"/>
-        
+        <property name="dist" location="bin/dist"/> 
+	
         <!-- Imports -->
-        <property name="build.sdf.imports" value=""/>
+        <property name="build.sdf.imports" value="
+        	            -I &quot;${basedir}&quot;"/>
         <property name="build.stratego.args" value="
                         --library
+        	            -I &quot;${basedir}&quot;
                         -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
                         -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>

Added: spoofax-contrib/lwc11/trunk/common/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/common/syntax/Common.sdf	Mon Oct  4 15:58:14 2010	(r21279)
@@ -0,0 +1,46 @@
+module common/syntax/Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv	Mon Oct  4 15:17:57 2010	(r21278)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv	Mon Oct  4 15:58:14 2010	(r21279)
@@ -6,4 +6,4 @@
   
   // This file can be used for custom folding rules.
   //
-  // See the imported file for a brief introduction and examples.
\ No newline at end of file
+  // See the imported file for a brief introduction and examples. 
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv	Mon Oct  4 15:17:57 2010	(r21278)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv	Mon Oct  4 15:58:14 2010	(r21279)
@@ -20,5 +20,5 @@
   //
   //   Definition._ (disabled)
   
-  Start.Module
+  Module.Module
   Definition.Entity
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv	Mon Oct  4 15:17:57 2010	(r21278)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv	Mon Oct  4 15:58:14 2010	(r21279)
@@ -12,5 +12,5 @@
   //
   //   _.<constructor>
   
-  Start.Module
+  Module.Module
   Definition.Entity
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf	Mon Oct  4 15:58:14 2010	(r21279)
@@ -0,0 +1,14 @@
+module entities/syntax/Entities
+
+imports common/syntax/Common
+
+exports
+  sorts Module  
+  context-free syntax
+  
+    "module" ID Definition*       -> Module {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID ":" Type                   -> Property {cons("Property")}
+    ID                            -> Type {cons("Type")}
+    
+     
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.generated.pp	Mon Oct  4 15:58:14 2010	(r21279)
@@ -0,0 +1,8 @@
+[
+   Module             -- KW["module"] _1 _2,
+   Module.2:iter-star -- _1,
+   Entity             -- KW["entity"] _1 KW["{"] _2 KW["}"],
+   Entity.2:iter-star -- _1,
+   Property           -- _1 KW[":"] _2,
+   Type               -- _1
+]
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.pp	Mon Oct  4 15:58:14 2010	(r21279)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also LWC.generated.pp)
+[]

Added: spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf	Mon Oct  4 15:58:14 2010	(r21279)
@@ -0,0 +1,12 @@
+module LWC
+
+imports entities/syntax/Entities
+
+exports
+
+  context-free start-symbols Start
+
+  context-free syntax
+    Module  -> Start
+    
+    
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/lwc/test/example.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/test/example.lwc	Mon Oct  4 15:58:14 2010	(r21279)
@@ -0,0 +1,18 @@
+module example
+
+// Example "LWC" program (see syntax/LWC.sdf for the grammar)
+
+entity User {
+  name     : String
+  password : String
+  homepage : URL
+}
+
+entity BlogPosting {
+  poster : User
+  body   : String
+}
+
+entity URL {
+  location : String
+}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/lwc/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/trans/check.str	Mon Oct  4 15:58:14 2010	(r21279)
@@ -0,0 +1,51 @@
+module check
+
+imports
+  libstratego-lib
+  include/LWC
+  lib/editor-common.generated
+
+rules
+
+  // Analysis: does a topdown traversal of the tree,
+  // and tries to apply the record-entity rule.
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-entity))> t
+
+  // Records the definition of an entity in a dynamic rule GetEntity.
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      // For a name 'x', GetEntity will return the original 'x' tree node
+      rules(
+        GetEntity :+ x -> x
+      )
+rules
+    
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<GetEntity> type) // no entity for this type
+  
+  // Reports an error if an entity is defined more than once.
+  // This constraint is implemented by testing if the "bag" of
+  // all entities x is not a singleton list.
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])

Added: spoofax-contrib/lwc11/trunk/lwc/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/trans/generate.str	Mon Oct  4 15:58:14 2010	(r21279)
@@ -0,0 +1,47 @@
+module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/LWC
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: spoofax-contrib/lwc11/trunk/lwc/trans/lwc.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/trans/lwc.str	Mon Oct  4 15:58:14 2010	(r21279)
@@ -0,0 +1,61 @@
+module lwc
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/LWC
+  lib/editor-common.generated
+  check
+  generate
+
+rules // Main editor interface (defined by editor/LWC-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      <debug(!"Resolve: ")> node; 
+      Type(type) := node; 
+      target     := <GetEntity> type
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) ->
+    ["String", "Int" | proposals]
+    where
+      if !node => Type(COMPLETION(prefix)) then
+        proposals := <all-keys-GetEntity>
+      end

From E.Visser at tudelft.nl  Mon Oct  4 18:08:32 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 16:08:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21280 - in
	spoofax-contrib/lwc11/trunk: . editor entities/syntax
	lwc/editor lwc/syntax modules modules/syntax modules/test
	modules/trans
Message-ID: <201010041608.o94G8WVi006054@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 16:08:32 2010
New Revision: 21280
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21280&sc=1

Log:
factoring out module definition

Added:
   spoofax-contrib/lwc11/trunk/lwc/editor/
      - copied from r21276, spoofax-contrib/lwc11/trunk/editor/
   spoofax-contrib/lwc11/trunk/modules/
   spoofax-contrib/lwc11/trunk/modules/syntax/
   spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf
   spoofax-contrib/lwc11/trunk/modules/test/
   spoofax-contrib/lwc11/trunk/modules/trans/
Replaced:
   spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Folding.esv
      - copied unchanged from r21279, spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv
   spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Folding.generated.esv
      - copied unchanged from r21279, spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
   spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Outliner.generated.esv
      - copied unchanged from r21279, spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
Deleted:
   spoofax-contrib/lwc11/trunk/editor/
Modified:
   spoofax-contrib/lwc11/trunk/build.main.xml
   spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
   spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf

Modified: spoofax-contrib/lwc11/trunk/build.main.xml
==============================================================================
--- spoofax-contrib/lwc11/trunk/build.main.xml	Mon Oct  4 15:58:14 2010	(r21279)
+++ spoofax-contrib/lwc11/trunk/build.main.xml	Mon Oct  4 16:08:32 2010	(r21280)
@@ -10,7 +10,7 @@
     
         <!-- Project directories -->
         <property name="trans" location="lwc/trans"/>
-        <property name="src-gen" location="editor/java"/>
+        <property name="src-gen" location="lwc/editor/java"/>
         <property name="syntax" location="lwc/syntax"/>
         <property name="include" location="include"/>
         <property name="lib" location="lib"/>

Modified: spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf	Mon Oct  4 15:58:14 2010	(r21279)
+++ spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf	Mon Oct  4 16:08:32 2010	(r21280)
@@ -1,13 +1,13 @@
 module entities/syntax/Entities
 
 imports common/syntax/Common
+imports modules/syntax/Module
 
 exports
-  sorts Module  
+  sorts Entity Property Type  
   context-free syntax
-  
-    "module" ID Definition*       -> Module {cons("Module")}
-    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+  	Entity                        -> Definition
+    "entity" ID "{" Property* "}" -> Entity {cons("Entity")}
     ID ":" Type                   -> Property {cons("Property")}
     ID                            -> Type {cons("Type")}
     

Copied: spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Folding.esv (from r21279, spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Folding.esv	Mon Oct  4 16:08:32 2010	(r21280, copy of r21279, spoofax-contrib/lwc11/trunk/editor/LWC-Folding.esv)
@@ -0,0 +1,9 @@
+module LWC-Folding
+
+imports LWC-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples. 
\ No newline at end of file

Copied: spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Folding.generated.esv (from r21279, spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Folding.generated.esv	Mon Oct  4 16:08:32 2010	(r21280, copy of r21279, spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv)
@@ -0,0 +1,24 @@
+module LWC-Folding.generated
+
+folding Default folding definitions
+  
+  // Folding rules indicate which syntactic constructs can be folded,
+  // and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  //
+  // To indicate that an element should always be folded, add
+  // a (folded) annotation:
+  //
+  //   _.Imports (folded)
+  //
+  // To disable a folding rule defined elsewhere, add a (disabled) annotation:
+  //
+  //   Definition._ (disabled)
+  
+  Module.Module
+  Definition.Entity
\ No newline at end of file

Copied: spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Outliner.generated.esv (from r21279, spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Outliner.generated.esv	Mon Oct  4 16:08:32 2010	(r21280, copy of r21279, spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv)
@@ -0,0 +1,16 @@
+module LWC-Outliner.generated
+
+outliner Default outliner        
+  
+  
+  // Outliner rules indicate which syntactic constructs should be shown in the outline
+  // and quick outline views, and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  
+  Module.Module
+  Definition.Entity
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf	Mon Oct  4 15:58:14 2010	(r21279)
+++ spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf	Mon Oct  4 16:08:32 2010	(r21280)
@@ -1,5 +1,6 @@
 module LWC
 
+imports entities/syntax/Module
 imports entities/syntax/Entities
 
 exports

Added: spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf	Mon Oct  4 16:08:32 2010	(r21280)
@@ -0,0 +1,8 @@
+module modules/syntax/Module
+
+imports common/syntax/Common
+
+exports
+  sorts Module Definition
+  context-free syntax
+    "module" ID Definition*       -> Module {cons("Module")}

From E.Visser at tudelft.nl  Mon Oct  4 18:13:01 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 04 Oct 2010 16:13:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21281 - in
	spoofax-contrib/lwc11/trunk: . editor entities/syntax
	lwc/editor lwc/syntax modules/syntax
Message-ID: <201010041613.o94GD1ke006102@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct  4 16:13:00 2010
New Revision: 21281
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21281&sc=1

Log:
move editor dir back to project root; editor definitions cannot be modularized yet; no dir prefix in import

Added:
   spoofax-contrib/lwc11/trunk/editor/
      - copied from r21280, spoofax-contrib/lwc11/trunk/lwc/editor/
Deleted:
   spoofax-contrib/lwc11/trunk/lwc/editor/
Modified:
   spoofax-contrib/lwc11/trunk/build.main.xml
   spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
   spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
   spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf
   spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf

Modified: spoofax-contrib/lwc11/trunk/build.main.xml
==============================================================================
--- spoofax-contrib/lwc11/trunk/build.main.xml	Mon Oct  4 16:08:32 2010	(r21280)
+++ spoofax-contrib/lwc11/trunk/build.main.xml	Mon Oct  4 16:13:00 2010	(r21281)
@@ -10,7 +10,7 @@
     
         <!-- Project directories -->
         <property name="trans" location="lwc/trans"/>
-        <property name="src-gen" location="lwc/editor/java"/>
+        <property name="src-gen" location="editor/java"/>
         <property name="syntax" location="lwc/syntax"/>
         <property name="include" location="include"/>
         <property name="lib" location="lib"/>

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Folding.generated.esv	Mon Oct  4 16:08:32 2010	(r21280)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv	Mon Oct  4 16:13:00 2010	(r21281)
@@ -21,4 +21,4 @@
   //   Definition._ (disabled)
   
   Module.Module
-  Definition.Entity
\ No newline at end of file
+  Entity.Entity
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/editor/LWC-Outliner.generated.esv	Mon Oct  4 16:08:32 2010	(r21280)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv	Mon Oct  4 16:13:00 2010	(r21281)
@@ -13,4 +13,4 @@
   //   _.<constructor>
   
   Module.Module
-  Definition.Entity
\ No newline at end of file
+  Entity.Entity
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf	Mon Oct  4 16:08:32 2010	(r21280)
+++ spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf	Mon Oct  4 16:13:00 2010	(r21281)
@@ -10,5 +10,3 @@
     "entity" ID "{" Property* "}" -> Entity {cons("Entity")}
     ID ":" Type                   -> Property {cons("Property")}
     ID                            -> Type {cons("Type")}
-    
-     
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf	Mon Oct  4 16:08:32 2010	(r21280)
+++ spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.sdf	Mon Oct  4 16:13:00 2010	(r21281)
@@ -1,7 +1,7 @@
 module LWC
 
-imports entities/syntax/Module
 imports entities/syntax/Entities
+imports modules/syntax/Module
 
 exports
 
@@ -9,5 +9,4 @@
 
   context-free syntax
     Module  -> Start
-    
     
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf	Mon Oct  4 16:08:32 2010	(r21280)
+++ spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf	Mon Oct  4 16:13:00 2010	(r21281)
@@ -1,8 +1,10 @@
 module modules/syntax/Module
 
 imports common/syntax/Common
+imports entities/syntax/Entities
 
 exports
   sorts Module Definition
   context-free syntax
-    "module" ID Definition*       -> Module {cons("Module")}
+    "module" ID Definition* -> Module {cons("Module")}
+  
\ No newline at end of file

From g.h.wachsmuth at tudelft.nl  Mon Oct  4 19:51:14 2010
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Mon, 04 Oct 2010 17:51:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21282 -
	tiger-spoofax/lib
Message-ID: <201010041751.o94HpE74007460@proliant.st.ewi.tudelft.nl>

Author: GuidoWachsmuth
Date: Mon Oct  4 17:51:14 2010
New Revision: 21282
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21282&sc=1

Log:
added some documentation
might help during lab 1 for assignment 2

Modified:
   tiger-spoofax/lib/namespace.str

Modified: tiger-spoofax/lib/namespace.str
==============================================================================
--- tiger-spoofax/lib/namespace.str	Mon Oct  4 16:13:00 2010	(r21281)
+++ tiger-spoofax/lib/namespace.str	Mon Oct  4 17:51:14 2010	(r21282)
@@ -2,6 +2,15 @@
 
 rules // scoped renaming
 	
+	/**
+	* executes the renaming strategy s in a new scope
+	* 
+	* declarations inside the new scope will hide existing declarations outside the new scope
+	* multiple declarations with the same name inside the new scope will be renamed to the same name
+	*
+	* @param renaming strategy s: a -> b
+	* @type a -> b
+	*/
 	new-scope(s) :
 		x -> y
 		where
@@ -11,6 +20,17 @@
 				<s> x => y
 			|} 
 			
+	/**
+	* annotates the current term with a fresh name
+	* can distinguish different namespaces
+	* remembers the renaming by storing two dynamic rules
+	* 
+	* multiple calls on the same term inside the same scope will give identical results
+	* calls inside a new scope will hide the results of calls to the same term from outer scopes
+	*
+	* @param namespace 
+	* @type a -> a
+	*/
 	rename-declaration(|namespace) : 
 		x -> x'
 		where 
@@ -24,6 +44,14 @@
 			Renamed: (namespace, x) -> x'
 		)
 	
+	/**
+	* annotates the current term with a new name
+	* succeeds only if rename-declaration was called before on the same term
+	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
+	*
+	* @param namespace 
+	* @type a -> b
+	*/
 	rename-reference(|namespace) :
 		x -> x'
 		where
@@ -33,12 +61,28 @@
 	
 	new-analysis(s) = {| Declared, Referred: s |}
 		
+	/**
+	* stores a mapping from a name to a declaration
+	* can distinguish different namespaces
+	* remembers the mapping by storing a dynamic rule
+	*
+	* @param namespace
+	* @type (a, b) -> b
+	*/
 	store-declaration(|namespace) :
 		(x, d) -> d
 		where rules(
 			Declared:+ (namespace, x) -> d
 		)
 		
+	/**
+	* stores the usage of a reference
+	* can distinguish different namespaces
+	* remembers the reference by storing a dynamic rule
+	*
+	* @param namespace
+	* @type a -> a
+	*/
 	store-reference(|namespace) :
 		x -> x
 		where rules (

From E.Visser at tudelft.nl  Tue Oct  5 10:52:56 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Tue, 05 Oct 2010 08:52:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21283 - in
	spoofax-contrib/lwc11/trunk: common/syntax entities/syntax
	entities/trans lwc/syntax lwc/test lwc/trans modules/syntax
	modules/trans test
Message-ID: <201010050852.o958quvR021116@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Tue Oct  5 08:52:54 2010
New Revision: 21283
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21283&sc=1

Log:
- refactored language definition in directories for different aspects

- added imports to modules; analysis imports declarations of imported modules

Added:
   spoofax-contrib/lwc11/trunk/entities/trans/check.str
   spoofax-contrib/lwc11/trunk/entities/trans/completion.str
   spoofax-contrib/lwc11/trunk/entities/trans/generate.str
   spoofax-contrib/lwc11/trunk/lwc/test/blog.lwc
   spoofax-contrib/lwc11/trunk/lwc/test/users.lwc
   spoofax-contrib/lwc11/trunk/modules/trans/check.str
   spoofax-contrib/lwc11/trunk/test/
   spoofax-contrib/lwc11/trunk/test/example.lwc
      - copied unchanged from r21279, spoofax-contrib/lwc11/trunk/lwc/test/example.lwc
Deleted:
   spoofax-contrib/lwc11/trunk/lwc/test/example.lwc
Modified:
   spoofax-contrib/lwc11/trunk/common/syntax/Common.sdf
   spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
   spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.generated.pp
   spoofax-contrib/lwc11/trunk/lwc/trans/check.str
   spoofax-contrib/lwc11/trunk/lwc/trans/generate.str
   spoofax-contrib/lwc11/trunk/lwc/trans/lwc.str
   spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf

Modified: spoofax-contrib/lwc11/trunk/common/syntax/Common.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/common/syntax/Common.sdf	Mon Oct  4 17:51:14 2010	(r21282)
+++ spoofax-contrib/lwc11/trunk/common/syntax/Common.sdf	Tue Oct  5 08:52:54 2010	(r21283)
@@ -2,45 +2,47 @@
 
 exports
 
+  sorts ID
   lexical syntax
-  
     [a-zA-Z][a-zA-Z0-9\_]* -> ID
-    "-"? [0-9]+            -> INT
+  lexical restrictions
+    ID            -/- [a-zA-Z0-9\_]
+    
+  lexical syntax
+  	{ID "/"}+ -> FILENAME
+        
+  sorts INT
+  lexical syntax
+    "-"? [0-9]+ -> INT
+  lexical restrictions
+    INT           -/- [0-9]
     
+  sorts STRING
+  lexical syntax
     "\"" StringChar* "\"" -> STRING
     ~[\"\n]               -> StringChar
     "\\\""                -> StringChar
     BackSlashChar         -> StringChar
     "\\"                  -> BackSlashChar
     
-    [\ \t\n\r] -> LAYOUT
-    
+  sorts CommentChar
+  lexical syntax
+    [\ \t\n\r]                       -> LAYOUT   
     [\*]                             -> CommentChar
     "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
     "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
-    
-    -> EOF
-  
-  lexical restrictions
-  
-    %% Ensure greedy matching for lexicals
-  
+                                     -> EOF
+  lexical restrictions  
     CommentChar   -/- [\/]
-    INT           -/- [0-9]
-    ID            -/- [a-zA-Z0-9\_]
-    
-    %% EOF may not be followed by any char
-    
+
+    %% EOF may not be followed by any char   
     EOF           -/- ~[]
 
-    %% Backslash chars in strings may not be followed by " 
-    
+    %% Backslash chars in strings may not be followed by "  
     BackSlashChar -/- [\"]
 
-  context-free restrictions
-  
+  context-free restrictions  
     %% Ensure greedy matching for comments
-
     LAYOUT? -/- [\ \t\n\r]
     LAYOUT? -/- [\/].[\/]
     LAYOUT? -/- [\/].[\*]

Modified: spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf	Mon Oct  4 17:51:14 2010	(r21282)
+++ spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf	Tue Oct  5 08:52:54 2010	(r21283)
@@ -10,3 +10,4 @@
     "entity" ID "{" Property* "}" -> Entity {cons("Entity")}
     ID ":" Type                   -> Property {cons("Property")}
     ID                            -> Type {cons("Type")}
+    ID "<" Type ">"               -> Type {cons("TypeOp")}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/entities/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/trans/check.str	Tue Oct  5 08:52:54 2010	(r21283)
@@ -0,0 +1,38 @@
+module entities/trans/check
+
+imports
+  libstratego-lib
+  include/LWC
+  lib/editor-common.generated
+
+rules
+	
+  record-declaration:
+    Entity(x, body) -> Entity(x, body)
+    with
+      debug(!"record-declaration: ");
+      rules( GetEntity :+ x -> x )
+      
+  declaration-of :
+  	Type(t) -> <GetEntity> t
+      
+rules
+    
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<GetEntity> type) // no entity for this type
+  
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+

Added: spoofax-contrib/lwc11/trunk/entities/trans/completion.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/trans/completion.str	Tue Oct  5 08:52:54 2010	(r21283)
@@ -0,0 +1,14 @@
+module entities/trans/completion
+
+imports
+  libstratego-lib
+  include/LWC
+  lib/editor-common.generated
+  entities/trans/check
+  
+rules
+	
+  editor-complete:
+    (node at Type(_), position, ast, path, project-path) ->
+    ["String", "Int" | proposals]
+    where proposals := <all-keys-GetEntity>

Added: spoofax-contrib/lwc11/trunk/entities/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/trans/generate.str	Tue Oct  5 08:52:54 2010	(r21283)
@@ -0,0 +1,47 @@
+module entities/trans/generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/LWC
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Modified: spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.generated.pp
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.generated.pp	Mon Oct  4 17:51:14 2010	(r21282)
+++ spoofax-contrib/lwc11/trunk/lwc/syntax/LWC.generated.pp	Tue Oct  5 08:52:54 2010	(r21283)
@@ -1,8 +1,10 @@
 [
    Module             -- KW["module"] _1 _2,
    Module.2:iter-star -- _1,
+   Imports            -- KW["imports"] _1,
    Entity             -- KW["entity"] _1 KW["{"] _2 KW["}"],
    Entity.2:iter-star -- _1,
    Property           -- _1 KW[":"] _2,
-   Type               -- _1
+   Type               -- _1,
+   TypeOp             -- _1 KW["<"] _2 KW[">"]
 ]
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/lwc/test/blog.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/test/blog.lwc	Tue Oct  5 08:52:54 2010	(r21283)
@@ -0,0 +1,20 @@
+module blog 
+
+imports users 
+ 
+entity Blog {
+  posts  : Set<BlogPost> 
+  author : User
+}
+
+entity BlogPost {
+  blog    : Blog
+  author  : User
+  body    : String
+  created : DateTime
+}
+
+entity URL {
+  location : String
+}
+

Added: spoofax-contrib/lwc11/trunk/lwc/test/users.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/test/users.lwc	Tue Oct  5 08:52:54 2010	(r21283)
@@ -0,0 +1,8 @@
+module users
+
+entity User {
+  name     : String
+  password : String 
+  homepage : URL
+}
+ 
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lwc/trans/check.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/trans/check.str	Mon Oct  4 17:51:14 2010	(r21282)
+++ spoofax-contrib/lwc11/trunk/lwc/trans/check.str	Tue Oct  5 08:52:54 2010	(r21283)
@@ -1,51 +1,34 @@
-module check
+module lwc/trans/check
 
 imports
   libstratego-lib
   include/LWC
   lib/editor-common.generated
+  modules/trans/check
+  entities/trans/check
 
 rules
 
-  // Analysis: does a topdown traversal of the tree,
-  // and tries to apply the record-entity rule.
-  analyze:
-    t -> t
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
     with
-      <topdown(try(record-entity))> t
-
-  // Records the definition of an entity in a dynamic rule GetEntity.
-  record-entity:
-    Entity(x, body) -> Entity(x, body)
-    with
-      // For a name 'x', GetEntity will return the original 'x' tree node
-      rules(
-        GetEntity :+ x -> x
-      )
-rules
-    
-  // Reports an error if a property type is undefined.
-  // This error is reported on the type name 'type'.
-  constraint-error:
-    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
-    where
-      not(!type => "String"); // String and Int are built-in types
-      not(!type => "Int");
-      not(<GetEntity> type) // no entity for this type
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+      
+  constraint-error = fail
+  constraint-warning = fail
+  constraint-note = fail
   
-  // Reports an error if an entity is defined more than once.
-  // This constraint is implemented by testing if the "bag" of
-  // all entities x is not a singleton list.
-  constraint-error:
-    Entity(x, _) -> (x, $[Duplicate entity name])
-    where
-      not(<bagof-GetEntity> x => [_])
-  
-  constraint-warning:
-    Entity(x, _) -> (x, $[Entity names must start with a capital])
+rules // reference resolution
+
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
     where
-      not(<string-starts-with-capital> x)
-  
-  constraint-note:
-    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
-                                      (this note is defined in trans/check.str) ])
+      debug(!"editor-resolve: ");
+      target := <declaration-of; debug(!"declaration-of: ")> node;
+      origin-location; debug(!"origin-location: ")
+      
+  declaration-of = fail
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lwc/trans/generate.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/trans/generate.str	Mon Oct  4 17:51:14 2010	(r21282)
+++ spoofax-contrib/lwc11/trunk/lwc/trans/generate.str	Tue Oct  5 08:52:54 2010	(r21283)
@@ -1,47 +1,28 @@
-module generate
+module lwc/trans/generate
 
 imports
   libstratego-lib
   libstratego-gpp
   libstratego-aterm
+  
+imports
   include/LWC
   lib/editor-common.generated
+  entities/trans/generate
 
 rules
-
-  to-java:
-    Module(x, d*) ->
-    $[ package [x];
-       
-       [d'*]
-     ]
-    with
-      d'* := <to-java> d*
-  
-  to-java:
-    Entity(x, p*) ->
-    $[ class [x] {
-           [p'*]
-       }
-     ]
+	
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
     with
-      p'* := <to-java> p*
-
-  to-java:
-    Property(x, Type(t)) -> $[
-      private [t] [x];
-      
-      public [t] get_[x] {
-          return [x];
-      }
-      
-      public void set_[x] ([t] [x]) {
-          this.[x] = [x];    
-      }
-  ]
-  
-  to-java:
-    Type(t) -> t
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
 
-  to-java:
-    t* -> <map(to-java)> t*
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lwc/trans/lwc.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/trans/lwc.str	Mon Oct  4 17:51:14 2010	(r21282)
+++ spoofax-contrib/lwc11/trunk/lwc/trans/lwc.str	Tue Oct  5 08:52:54 2010	(r21283)
@@ -1,61 +1,22 @@
-module lwc
+module lwc/trans/lwc
 
 imports
   libstratego-lib
   libstratego-gpp
   libstratego-aterm
+
+imports
   include/LWC
   lib/editor-common.generated
-  check
-  generate
-
-rules // Main editor interface (defined by editor/LWC-Builders and -References.esv)
-  
-  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
-  // each a list of (term, message) tuples or simply (message) terms.
-  editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
-    with
-      editor-init;
-      analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := <collect-all(constraint-warning, conc)> ast;
-      notes    := <collect-all(constraint-note, conc)> ast
-  
-  // Transforms a selection to Java
-  generate-java:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"java")> path;
-      result   := <to-java> selected
-  
-  // Prints the abstract syntax ATerm of a selection.
-  generate-aterm:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"aterm")> path;
-      result   := selected // we just return the input term
-  
-  // Resolves a reference when the user control-clicks or presses F3 in the editor.
-  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
-  editor-resolve:
-    (node, position, ast, path, project-path) -> target
-    where
-      <debug(!"Resolve: ")> node; 
-      Type(type) := node; 
-      target     := <GetEntity> type
+  lwc/trans/check
+  lwc/trans/generate
 
+rules 
+	
   // Returns "hover help" information for a particular node in the editor.
   // For references, this rule is invoked using the resolved term.
   editor-hover:
     (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
 
-  // Completes an identifier when the user presses control-space
-  // (the completion identifier in the AST provides additional context information)
-  editor-complete:
-    (node, position, ast, path, project-path) ->
-    ["String", "Int" | proposals]
-    where
-      if !node => Type(COMPLETION(prefix)) then
-        proposals := <all-keys-GetEntity>
-      end
+
+  
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf	Mon Oct  4 17:51:14 2010	(r21282)
+++ spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf	Tue Oct  5 08:52:54 2010	(r21283)
@@ -1,10 +1,9 @@
 module modules/syntax/Module
 
 imports common/syntax/Common
-imports entities/syntax/Entities
 
 exports
   sorts Module Definition
   context-free syntax
     "module" ID Definition* -> Module {cons("Module")}
-  
\ No newline at end of file
+    "imports" FILENAME      -> Definition {cons("Imports")}

Added: spoofax-contrib/lwc11/trunk/modules/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/modules/trans/check.str	Tue Oct  5 08:52:54 2010	(r21283)
@@ -0,0 +1,48 @@
+module modules/trans/check
+
+imports
+  libstratego-lib
+  include/LWC
+  lib/editor-common.generated
+  lwc/trans/check
+  
+rules
+	
+  analyze =
+  	analyze-module
+	
+  analyze-module :
+  	(ast at Module(x, def*), path, project-path) -> ast'
+  	where 
+  	  !ast;
+  	  debug(!"analyze-module: ");
+  	  import-all(|path);
+      record-declarations;
+      ?ast'
+      
+  record-declarations =
+  	debug(!"record-declarations: ");
+  	alltd(record-declaration)
+  	
+  record-declaration = fail
+  		                             
+  import-all(|path) =
+    alltd(import-module(|path))
+    
+  import-module(|path) : 
+  	i at Imports(x) -> i
+  	where 
+  	  <open-import(resolve-import(|path),parse-lwc-file,record-declarations)> $[[x].lwc];
+  	  debug(!"imported: ")
+  	  
+  resolve-import(|modpath) :
+  	x -> $[[<project-path>]/[<dirname> modpath]/[x]]
+  	// lookup module in same module as importing module
+  	// todo: this can be more sophisticated involving search paths
+  
+rules 
+		
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])  	
+  	
\ No newline at end of file

Copied: spoofax-contrib/lwc11/trunk/test/example.lwc (from r21279, spoofax-contrib/lwc11/trunk/lwc/test/example.lwc)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/example.lwc	Tue Oct  5 08:52:54 2010	(r21283, copy of r21279, spoofax-contrib/lwc11/trunk/lwc/test/example.lwc)
@@ -0,0 +1,18 @@
+module example
+
+// Example "LWC" program (see syntax/LWC.sdf for the grammar)
+
+entity User {
+  name     : String
+  password : String
+  homepage : URL
+}
+
+entity BlogPosting {
+  poster : User
+  body   : String
+}
+
+entity URL {
+  location : String
+}
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Wed Oct  6 11:46:08 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 06 Oct 2010 09:46:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21284 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201010060946.o969k8GD006117@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Oct  6 09:46:08 2010
New Revision: 21284
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21284&sc=1

Log:
Additional sanity check

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Tue Oct  5 08:52:54 2010	(r21283)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Wed Oct  6 09:46:08 2010	(r21284)
@@ -369,6 +369,7 @@
 			feedback = extractResultingAST(resource, feedback);
 			
 			if (feedback.getTermType() == TUPLE
+					&& feedback.getSubtermCount() == 3
 					&& termAt(feedback, 0).getTermType() == LIST
 					&& termAt(feedback, 1).getTermType() == LIST
 					&& termAt(feedback, 2).getTermType() == LIST) {

From L.C.L.Kats at tudelft.nl  Wed Oct  6 11:54:40 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 06 Oct 2010 09:54:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21285 - in
	spoofax-imp/trunk: org.eclipse.imp org.strategoxt.imp.editors.aster
	org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.editorservice org.strategoxt.imp...
Message-ID: <201010060954.o969seXs006184@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Oct  6 09:54:40 2010
New Revision: 21285
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21285&sc=1

Log:
- Bracket insertion for <> in Stratego
- Refresh correct dirs for custom ${syntax} and ${lib} directories

Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
==============================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	Wed Oct  6 09:46:08 2010	(r21284)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	Wed Oct  6 09:54:40 2010	(r21285)
@@ -101,7 +101,15 @@
  import org.eclipse.imp.services.IAutoEditStrategy;
  import org.eclipse.imp.services.ILanguageSyntaxProperties;
  import org.eclipse.imp.services.base.DefaultAutoIndentStrategy;
-@@ -63,7 +63,6 @@
+@@ -35,6 +35,7 @@
+ import org.eclipse.swt.graphics.Color;
+ import org.eclipse.swt.graphics.Point;
+ import org.eclipse.swt.widgets.Composite;
++// LK: backported from revision 22255
+ 
+ public class StructuredSourceViewer extends ProjectionViewer {
+     /**
+@@ -63,7 +64,6 @@
       */
      public static final int MARK_OCCURRENCES= 55;
  
@@ -109,7 +117,7 @@
      /**
       * Text operation code for indenting the currently selected text.
       */
-@@ -77,16 +76,8 @@
+@@ -77,16 +77,8 @@
  
      private IAutoEditStrategy fAutoEditStrategy;
  
@@ -126,7 +134,7 @@
      public StructuredSourceViewer(Composite parent, IVerticalRuler verticalRuler, IOverviewRuler overviewRuler, boolean showAnnotationsOverview, int styles) {
          super(parent, verticalRuler, overviewRuler, showAnnotationsOverview, styles);
      }
-@@ -139,8 +130,7 @@
+@@ -139,8 +131,7 @@
          }
          super.doOperation(operation);
      }
@@ -136,7 +144,7 @@
      public void setParseController(IParseController parseController) {
      	fParseController = parseController;
      }
-@@ -152,13 +142,14 @@
+@@ -152,13 +143,14 @@
      private void doToggleComment() {
          ILanguageSyntaxProperties syntaxProps= fParseController.getSyntaxProperties();
  
@@ -153,7 +161,7 @@
  
      	if (doc instanceof IDocumentExtension4) {
      	    IDocumentExtension4 extension= (IDocumentExtension4) doc;
-@@ -172,22 +163,35 @@
+@@ -172,22 +164,35 @@
              final int startLine= doc.getLineOfOffset(selStart);
              int endLine= doc.getLineOfOffset(selEnd);
  
@@ -202,7 +210,7 @@
              }
          } catch (BadLocationException e) {
              e.printStackTrace();
-@@ -200,8 +204,54 @@
+@@ -200,8 +205,54 @@
          }
      }
  
@@ -259,7 +267,7 @@
          IDocument doc= this.getDocument();
          DocumentRewriteSession rewriteSession= null;
          Point p= this.getSelectedRange();
-@@ -218,18 +268,16 @@
+@@ -218,18 +269,16 @@
              final int startLine= doc.getLineOfOffset(selStart);
              int endLine= doc.getLineOfOffset(selEnd);
  
@@ -282,7 +290,7 @@
                  cmd.text= Character.toString('\t');
                  cmd.doit= true;
                  cmd.shiftsCaret= false;
-@@ -237,7 +285,7 @@
+@@ -237,7 +286,7 @@
                  doc.replace(cmd.offset, cmd.length, cmd.text);
              }
          } catch (BadLocationException e) {
@@ -291,7 +299,7 @@
          } finally {
              if (doc instanceof IDocumentExtension4) {
                  IDocumentExtension4 extension= (IDocumentExtension4) doc;
-@@ -247,6 +295,21 @@
+@@ -247,6 +296,21 @@
          }
      }
  
@@ -313,7 +321,7 @@
      /*
       * @see ISourceViewer#configure(SourceViewerConfiguration)
       */
-@@ -296,12 +359,15 @@
+@@ -296,12 +360,15 @@
                  		fAutoEditStrategy = new DefaultAutoIndentStrategy();
                  }
              }
@@ -330,7 +338,7 @@
      }
  
      /*
-@@ -332,6 +398,5 @@
+@@ -332,6 +399,5 @@
          //	if (fPreferenceStore != null)
          //	    fPreferenceStore.removePropertyChangeListener(this);
          super.unconfigure();

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml	Wed Oct  6 09:46:08 2010	(r21284)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml	Wed Oct  6 09:54:40 2010	(r21285)
@@ -50,9 +50,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	Wed Oct  6 09:46:08 2010	(r21284)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	Wed Oct  6 09:54:40 2010	(r21285)
@@ -50,9 +50,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml	Wed Oct  6 09:46:08 2010	(r21284)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml	Wed Oct  6 09:54:40 2010	(r21285)
@@ -50,9 +50,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml	Wed Oct  6 09:46:08 2010	(r21284)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml	Wed Oct  6 09:54:40 2010	(r21285)
@@ -50,9 +50,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Wed Oct  6 09:46:08 2010	(r21284)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Wed Oct  6 09:54:40 2010	(r21285)
@@ -50,9 +50,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Wed Oct  6 09:46:08 2010	(r21284)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Wed Oct  6 09:54:40 2010	(r21285)
@@ -50,9 +50,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv	Wed Oct  6 09:46:08 2010	(r21284)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv	Wed Oct  6 09:54:40 2010	(r21285)
@@ -15,6 +15,10 @@
                   ${ }
                   $< >
                   $( )
+                  " <" > // hack: interacts with ->
+                  "=<" > // hack: interacts with ->
+                  "(<" > // hack: interacts with ->
+                  "|<" > // hack: interacts with ->
   
   indent after:
     then

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Wed Oct  6 09:46:08 2010	(r21284)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Wed Oct  6 09:54:40 2010	(r21285)
@@ -123,9 +123,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir" />
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite" />
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite" />
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite" />
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir" />
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir" />
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite" />
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite" />
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite" />
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite" />
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite" />
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite" />

From rob.economopoulos at gmail.com  Fri Oct  1 15:50:56 2010
From: rob.economopoulos at gmail.com (Rob Economopoulos)
Date: Fri, 01 Oct 2010 13:50:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21266 -
	strategoxt/branches/strategoxt-embedded-cs
Message-ID: <201010011350.o91DouBi009777@proliant.st.ewi.tudelft.nl>

Author: robe
Date: Fri Oct  1 13:50:52 2010
New Revision: 21266
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21266&sc=1

Log:
New branch to implement concrete syntax embedded in concrete syntax.

Added:
   strategoxt/branches/strategoxt-embedded-cs/
      - copied from r21265, strategoxt/trunk/

From E.Visser at tudelft.nl  Fri Oct  8 10:13:23 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Fri, 08 Oct 2010 08:13:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21286 - in
	spoofax-contrib/lwc11/trunk: entities/syntax entities/trans
	lib lwc/test lwc/trans modules/syntax modules/trans
Message-ID: <201010080813.o988DNrE023315@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Fri Oct  8 08:13:23 2010
New Revision: 21286
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21286&sc=1

Log:


Added:
   spoofax-contrib/lwc11/trunk/lib/namespace.str
Modified:
   spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
   spoofax-contrib/lwc11/trunk/entities/trans/check.str
   spoofax-contrib/lwc11/trunk/lwc/test/blog.lwc
   spoofax-contrib/lwc11/trunk/lwc/test/users.lwc
   spoofax-contrib/lwc11/trunk/lwc/trans/check.str
   spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf
   spoofax-contrib/lwc11/trunk/modules/trans/check.str

Modified: spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf	Wed Oct  6 09:54:40 2010	(r21285)
+++ spoofax-contrib/lwc11/trunk/entities/syntax/Entities.sdf	Fri Oct  8 08:13:23 2010	(r21286)
@@ -9,5 +9,8 @@
   	Entity                        -> Definition
     "entity" ID "{" Property* "}" -> Entity {cons("Entity")}
     ID ":" Type                   -> Property {cons("Property")}
-    ID                            -> Type {cons("Type")}
-    ID "<" Type ">"               -> Type {cons("TypeOp")}
\ No newline at end of file
+    QID                           -> Type {cons("Type")}
+
+%%    ID "<" Type ">"               -> Type {cons("TypeOp")}
+    
+     
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/entities/trans/check.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/trans/check.str	Wed Oct  6 09:54:40 2010	(r21285)
+++ spoofax-contrib/lwc11/trunk/entities/trans/check.str	Fri Oct  8 08:13:23 2010	(r21286)
@@ -8,22 +8,34 @@
 rules
 	
   record-declaration:
-    Entity(x, body) -> Entity(x, body)
+    ent at Entity(name, body) -> ent
     with
       debug(!"record-declaration: ");
-      rules( GetEntity :+ x -> x )
+      rules( 
+      	GetEntity :+ name -> ent
+      )
       
   declaration-of :
-  	Type(t) -> <GetEntity> t
-      
-rules
-    
+  	Type(name) -> <GetEntity> name
+  	
+  declaration-of :
+  	Type("String") -> Entity("String",[])
+  declaration-of :
+  	Type("Int") -> Entity("Int",[])
+  declaration-of :
+  	Type("URL") -> Entity("URL",[])
+  declaration-of :
+  	Type("DateTime") -> Entity("DateTime",[])
+
+  editor-resolve:
+    (t at Type(_), position, ast, path, project-path) -> target
+    where
+      target := <declaration-of> t // <ensure-origin(declaration-of)> t
+          
   constraint-error:
-    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    Property(x, t at Type(type)) -> (type, $[Type [type] is not defined])
     where
-      not(!type => "String"); // String and Int are built-in types
-      not(!type => "Int");
-      not(<GetEntity> type) // no entity for this type
+      not(<declaration-of> t)
   
   constraint-error:
     Entity(x, _) -> (x, $[Duplicate entity name])
@@ -34,5 +46,4 @@
     Entity(x, _) -> (x, $[Entity names must start with a capital])
     where
       not(<string-starts-with-capital> x)
-  
-
+  
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/lib/namespace.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lib/namespace.str	Fri Oct  8 08:13:23 2010	(r21286)
@@ -0,0 +1,139 @@
+module lib/namespace
+
+rules // scoped renaming
+	
+	/**
+	* executes the renaming strategy s in a new scope
+	* 
+	* declarations inside the new scope will hide existing declarations outside the new scope
+	* multiple declarations with the same name inside the new scope will be renamed to the same name
+	*
+	* @param renaming strategy s: a -> b
+	* @type a -> b
+	*/
+	new-scope(s) :
+		x -> y
+		where
+			<newname> x => scope ;
+			{| Renamed, RenamedInScope, CurrentScope:
+				rules (CurrentScope: _ -> scope) ;
+				<s> x => y
+			|}
+			
+	/**
+	* annotates the current term with a fresh name
+	* can distinguish different namespaces
+	* remembers the renaming by storing two dynamic rules
+	* 
+	* multiple calls on the same term inside the same scope will give identical results
+	* calls inside a new scope will hide the results of calls to the same term from outer scopes
+	*
+	* @param namespace 
+	* @type a -> a
+	*/
+	rename-declaration(|namespace) : 
+		x -> x'
+		where 
+			CurrentScope => scope ;
+			(
+				<RenamedInScope> (namespace, scope, x) => x' <+
+				x' := x{<newname> x}
+			)
+		where rules(
+			RenamedInScope: (namespace, scope, x) -> x' 
+			Renamed: (namespace, x) -> x'
+		)
+	
+	/**
+	* annotates the current term with a new name
+	* succeeds only if rename-declaration was called before on the same term
+	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
+	*
+	* @param namespace 
+	* @type a -> b
+	*/
+	rename-reference(|namespace) :
+		x -> x'
+		where
+			<Renamed> (namespace, x) => x'
+
+rules // store declarations and references
+	
+	new-analysis(s) = {| Declared, Referred: s |}
+		
+	/**
+	* stores a mapping from a name to a declaration
+	* can distinguish different namespaces
+	* remembers the mapping by storing a dynamic rule
+	*
+	* @param namespace
+	* @type (a, b) -> b
+	*/
+	store-declaration(|namespace) :
+		(x, d) -> d
+		where rules(
+			Declared:+ (namespace, x) -> d
+		)
+		
+	/**
+	* stores the usage of a reference
+	* can distinguish different namespaces
+	* remembers the reference by storing a dynamic rule
+	*
+	* @param namespace
+	* @type a -> a
+	*/
+	store-reference(|namespace) :
+		x -> x
+		where rules (
+			Referred:+ (namespace, x) -> x
+		)	
+		
+strategies // access declarations
+	
+	get-declarations(|namespace) = !(namespace, <id>) ; bagof-Declared
+	
+	is-declared(|namespace) = get-declarations(|namespace) ; ?[_|_]
+	
+	get-unique-declaration(|namespace) = get-declarations(|namespace) ; ?[<id>]
+	
+strategies // project declarations
+	
+	get-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(where(s)) 
+	
+	get-declarations(s|namespace) = get-declarations(|namespace) ; filter(where(s)) 
+	
+	project-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(s) 
+
+	project-declarations(s|namespace) = get-declarations(|namespace) ; filter(s) 
+		
+strategies // access all declarations
+	
+	get-all-declarations(|namespace) = all-keys-Declared ; filter(?(namespace, _) ; Declared)
+	
+	get-all-declarations(s|namespace) = get-all-declarations(|namespace) ; filter(where(s)) 
+
+	project-all-declarations(s|namespace) = get-all-declarations(|namespace) ; filter(s) 
+	 
+strategies // access references
+
+	get-references(|namespace) = !(namespace, <id>) ; bagof-Referred
+	
+	is-referred(|namespace) = get-references(|namespace) ; ?[_|_]
+
+strategies	
+	
+	get-proposal-candidates(|namespace) = all-keys-Renamed ; filter(?(namespace, _) ; Renamed)
+	
+	store-proposal-candidates(|namespace) = get-proposal-candidates(|namespace) ; store-proposals
+	
+	store-proposals = ?x ; where (rules ( Propose : () -> x ))
+	
+	get-proposals = ( <Propose> () ; map(rm-annotations) ) <+ ![]
+	
+	get-proposals(s|namespace) = 
+		( 
+			<Propose> () ; 
+			filter(where( get-declaration(s|namespace) )) ; 
+			map(rm-annotations) 
+		) <+ ![]

Modified: spoofax-contrib/lwc11/trunk/lwc/test/blog.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/test/blog.lwc	Wed Oct  6 09:54:40 2010	(r21285)
+++ spoofax-contrib/lwc11/trunk/lwc/test/blog.lwc	Fri Oct  8 08:13:23 2010	(r21286)
@@ -1,12 +1,13 @@
 module blog 
 
 imports users 
- 
+  
 entity Blog {
-  posts  : Set<BlogPost> 
-  author : User
+  posts    : Set<BlogPost> 
+  author   : User 
+  audience : User    
 }
-
+ 
 entity BlogPost {
   blog    : Blog
   author  : User

Modified: spoofax-contrib/lwc11/trunk/lwc/test/users.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/test/users.lwc	Wed Oct  6 09:54:40 2010	(r21285)
+++ spoofax-contrib/lwc11/trunk/lwc/test/users.lwc	Fri Oct  8 08:13:23 2010	(r21286)
@@ -5,4 +5,4 @@
   password : String 
   homepage : URL
 }
- 
\ No newline at end of file
+  
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lwc/trans/check.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/trans/check.str	Wed Oct  6 09:54:40 2010	(r21285)
+++ spoofax-contrib/lwc11/trunk/lwc/trans/check.str	Fri Oct  8 08:13:23 2010	(r21286)
@@ -23,12 +23,24 @@
   constraint-note = fail
   
 rules // reference resolution
+	
+  // generic definition of reference resolution: find declaration-of node
 
-  editor-resolve:
-    (node, position, ast, path, project-path) -> target
-    where
-      debug(!"editor-resolve: ");
-      target := <declaration-of; debug(!"declaration-of: ")> node;
-      origin-location; debug(!"origin-location: ")
+  //editor-resolve:
+    //(node, position, ast, path, project-path) -> target
+    //where
+      //target := <ensure-origin(declaration-of)> node
       
-  declaration-of = fail
\ No newline at end of file
+  //declaration-of = fail
+  
+  // ensure-origin(lookup) :
+  //   node -> target
+  //   where
+  //     lookup-target := <lookup> node
+  //     ; if not(<origin-term> lookup-target) then
+  //         <parse-file; externalize-module> <resolve-file> <concat-strings> [<qid-to-path> qid2, ".mobl"]
+  //         ; <declare-all> Module(qid2, <id>)
+  //         ; target := <lookup> node
+  //       else
+  //         target := lookup-target
+  //       end

Modified: spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf	Wed Oct  6 09:54:40 2010	(r21285)
+++ spoofax-contrib/lwc11/trunk/modules/syntax/Module.sdf	Fri Oct  8 08:13:23 2010	(r21286)
@@ -3,7 +3,10 @@
 imports common/syntax/Common
 
 exports
-  sorts Module Definition
+  sorts Module Definition QID
   context-free syntax
     "module" ID Definition* -> Module {cons("Module")}
     "imports" FILENAME      -> Definition {cons("Imports")}
+
+    ID                      -> QID
+    QID "." ID              -> QID {cons("QId")}
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/modules/trans/check.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/modules/trans/check.str	Wed Oct  6 09:54:40 2010	(r21285)
+++ spoofax-contrib/lwc11/trunk/modules/trans/check.str	Fri Oct  8 08:13:23 2010	(r21286)
@@ -4,45 +4,93 @@
   libstratego-lib
   include/LWC
   lib/editor-common.generated
+  lib/namespace
   lwc/trans/check
   
+signature
+  constructors
+  	Module : Namespace
+  
+strategies
+	
+  record-declarations =
+  	alltd(record-declaration)
+  	
 rules
 	
   analyze =
   	analyze-module
 	
   analyze-module :
-  	(ast at Module(x, def*), path, project-path) -> ast'
+  	(mod at Module(x, def*), path, project-path) -> mod'
   	where 
-  	  !ast;
-  	  debug(!"analyze-module: ");
-  	  import-all(|path);
-      record-declarations;
-      ?ast'
-      
-  record-declarations =
-  	debug(!"record-declarations: ");
-  	alltd(record-declaration)
+  	  rules( CurrentFile := path );
+  	  mod' := <record-declarations> mod
+  	  
+   record-declaration :
+   	 Module(x, def1*) -> mod
+   	 where 
+   	   def2* := <record-imported-declarations; record-declarations> def1*;
+   	   mod := Module(x, def2*);
+   	   <store-declaration(|Module())> (x, (<CurrentFile>, mod))
+
+  declaration-of :
+  	i at Imports(name) -> mod
+  	where <import-module(?mod)> i
   	
-  record-declaration = fail
-  		                             
-  import-all(|path) =
-    alltd(import-module(|path))
+  record-imported-declarations =
+    alltd(import-module(record-declarations))
     
-  import-module(|path) : 
+  editor-resolve :
+    (i at Imports(name), position, ast, path, project-path) -> target
+    where
+      debug(!"editor-resolve: ");
+      target := <get-module> i;
+      debug(!"  module: ")
+      
+rules // reading module from file
+	
+  get-module :
+  	Imports(name) -> mod
+  	where import-module(?mod)
+
+  import-module(transform-declarations) : 
   	i at Imports(x) -> i
   	where 
-  	  <open-import(resolve-import(|path),parse-lwc-file,record-declarations)> $[[x].lwc];
-  	  debug(!"imported: ")
+  	  CurrentFile; debug(!" filename: ");
+  	  <open-import-lwc(debug(!"resolve this: "); resolve-import(|<CurrentFile>); debug(!"resolved: "), debug(!" parse this"); parse-lwc-file; debug(!"  parsed: "), debug(!"  transform declarations: "); transform-declarations)> $[[x].lwc]
   	  
   resolve-import(|modpath) :
   	x -> $[[<project-path>]/[<dirname> modpath]/[x]]
   	// lookup module in same module as importing module
   	// todo: this can be more sophisticated involving search paths
   
-rules 
-		
-  constraint-note:
-    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
-                                      (this note is defined in trans/check.str) ])  	
-  	
\ No newline at end of file
+  open-import-lwc(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        debug(!"cache-path: ");
+        if not(<IsImported> path) then
+          debug(!"not imported: ");
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        else
+          debug(!"already imported: ")
+        end
+      end
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Fri Oct  8 11:12:16 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Oct 2010 09:12:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21287 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201010080912.o989CGf9024277@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Oct  8 09:12:16 2010
New Revision: 21287
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21287&sc=1

Log:
Release 0.5.3.8 (incorporating relative SDF imports for Eelco)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Oct  8 08:13:23 2010	(r21286)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Oct  8 09:12:16 2010	(r21287)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.3.7"
+      version="0.5.3.8"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Fri Oct  8 08:13:23 2010	(r21286)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Fri Oct  8 09:12:16 2010	(r21287)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.3.7.jar" id="org.strategoxt.imp" version="0.5.3.7">
+   <feature url="features/org.strategoxt.imp_0.5.3.8.jar" id="org.strategoxt.imp" version="0.5.3.8">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From E.Visser at tudelft.nl  Sun Oct 10 23:25:54 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Sun, 10 Oct 2010 21:25:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21288 - in
	spoofax-contrib/lwc11/trunk: . .externalToolBuilders common
	common/syntax doc editor entities entities/syntax
	entities/trans expressions functions lib lwc lwc/s...
Message-ID: <201010102125.o9ALPsBm019561@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Sun Oct 10 21:25:54 2010
New Revision: 21288
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21288&sc=1

Log:
exploring the namespace library

Added:
   spoofax-contrib/lwc11/trunk/common/Common.sdf
   spoofax-contrib/lwc11/trunk/entities/Entities.sdf
   spoofax-contrib/lwc11/trunk/entities/entities-trans.str
   spoofax-contrib/lwc11/trunk/entities/generate.str
   spoofax-contrib/lwc11/trunk/expressions/
   spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf
   spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str
   spoofax-contrib/lwc11/trunk/functions/
   spoofax-contrib/lwc11/trunk/functions/Functions.sdf
   spoofax-contrib/lwc11/trunk/functions/functions-trans.str
   spoofax-contrib/lwc11/trunk/lib/editor-common.str
   spoofax-contrib/lwc11/trunk/lwc/LWC.sdf
   spoofax-contrib/lwc11/trunk/lwc/lwc.str
   spoofax-contrib/lwc11/trunk/lwc/trans.str
   spoofax-contrib/lwc11/trunk/modules/Modules.sdf
   spoofax-contrib/lwc11/trunk/modules/modules-trans.str
   spoofax-contrib/lwc11/trunk/statements/
   spoofax-contrib/lwc11/trunk/statements/Statements.sdf
   spoofax-contrib/lwc11/trunk/statements/statements-trans.str
   spoofax-contrib/lwc11/trunk/test/blog.lwc
   spoofax-contrib/lwc11/trunk/test/users.lwc
Deleted:
   spoofax-contrib/lwc11/trunk/common/syntax/
   spoofax-contrib/lwc11/trunk/entities/syntax/
   spoofax-contrib/lwc11/trunk/entities/trans/
   spoofax-contrib/lwc11/trunk/lwc/syntax/
   spoofax-contrib/lwc11/trunk/lwc/test/
   spoofax-contrib/lwc11/trunk/lwc/trans/
   spoofax-contrib/lwc11/trunk/modules/syntax/
   spoofax-contrib/lwc11/trunk/modules/test/
   spoofax-contrib/lwc11/trunk/modules/trans/
Modified:
   spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch
   spoofax-contrib/lwc11/trunk/build.main.xml
   spoofax-contrib/lwc11/trunk/doc/phase0.ltx
   spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
   spoofax-contrib/lwc11/trunk/lib/namespace.str

Modified: spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch
==============================================================================
--- spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch	Fri Oct  8 09:12:16 2010	(r21287)
+++ spoofax-contrib/lwc11/trunk/.externalToolBuilders/LWC build.main.xml.launch	Sun Oct 10 21:25:54 2010	(r21288)
@@ -2,8 +2,12 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/lwc/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
 <booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
 <listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
 <listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
@@ -14,7 +18,6 @@
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${project_loc}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>

Modified: spoofax-contrib/lwc11/trunk/build.main.xml
==============================================================================
--- spoofax-contrib/lwc11/trunk/build.main.xml	Fri Oct  8 09:12:16 2010	(r21287)
+++ spoofax-contrib/lwc11/trunk/build.main.xml	Sun Oct 10 21:25:54 2010	(r21288)
@@ -9,9 +9,9 @@
         <property name="strmodule" value="lwc"/>
     
         <!-- Project directories -->
-        <property name="trans" location="lwc/trans"/>
+        <property name="trans" location="lwc"/>
         <property name="src-gen" location="editor/java"/>
-        <property name="syntax" location="lwc/syntax"/>
+        <property name="syntax" location="lwc"/>
         <property name="include" location="include"/>
         <property name="lib" location="lib"/>
         <property name="build" location="bin"/>

Added: spoofax-contrib/lwc11/trunk/common/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/common/Common.sdf	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,53 @@
+module common/Common
+
+exports
+ 
+  sorts ID
+  lexical syntax
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+  lexical restrictions
+    ID            -/- [a-zA-Z0-9\_]
+    
+  lexical syntax
+  	{ID "/"}+ -> FILENAME
+    
+  sorts QID    
+  context-free syntax
+  	ID         -> QID
+    QID "." ID -> QID {cons("QId")}
+    
+  sorts INT
+  lexical syntax
+    "-"? [0-9]+ -> INT
+  lexical restrictions
+    INT           -/- [0-9]
+    
+  sorts STRING
+  lexical syntax
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+  sorts CommentChar
+  lexical syntax
+    [\ \t\n\r]                       -> LAYOUT   
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+                                     -> EOF
+  lexical restrictions  
+    CommentChar   -/- [\/]
+
+    %% EOF may not be followed by any char   
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by "  
+    BackSlashChar -/- [\"]
+
+  context-free restrictions  
+    %% Ensure greedy matching for comments
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Modified: spoofax-contrib/lwc11/trunk/doc/phase0.ltx
==============================================================================
--- spoofax-contrib/lwc11/trunk/doc/phase0.ltx	Fri Oct  8 09:12:16 2010	(r21287)
+++ spoofax-contrib/lwc11/trunk/doc/phase0.ltx	Sun Oct 10 21:25:54 2010	(r21288)
@@ -12,3 +12,6 @@
         Oh, that was easy! Phase 0.1 to 0.3 done! The example project generated by
         Spoofax is exactly an entity language with simple code generation, constraint
         checks, reference resolving, outline view, syntax highlighting.
+
+        Revision 21276
+

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv	Fri Oct  8 09:12:16 2010	(r21287)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv	Sun Oct 10 21:25:54 2010	(r21288)
@@ -16,7 +16,7 @@
                                                                                                                                
   observer                  : editor-analyze                                                                                   
                                                                                                                                
-  builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
+  //builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
   builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
                                                                                                                                
   // on save: generate-java                                                                                                    
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv	Fri Oct  8 09:12:16 2010	(r21287)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv	Sun Oct 10 21:25:54 2010	(r21288)
@@ -21,4 +21,6 @@
   //   Definition._ (disabled)
   
   Module.Module
-  Entity.Entity
\ No newline at end of file
+  Entity.Entity
+  MethodDef.MethodDef
+  FunctionDef.FunctionDef
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv	Fri Oct  8 09:12:16 2010	(r21287)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv	Sun Oct 10 21:25:54 2010	(r21288)
@@ -13,4 +13,8 @@
   //   _.<constructor>
   
   Module.Module
-  Entity.Entity
\ No newline at end of file
+  Entity.Entity
+  MethodDef.MethodDef
+  FunctionCall.FunctionCall
+  MethodCall.MethodCall
+  FunctionDef.FunctionDef
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/entities/Entities.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/Entities.sdf	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,15 @@
+module entities/Entities
+
+imports common/Common
+
+exports
+  sorts Entity Property Type  
+  context-free syntax 
+  	Entity                          -> Definition
+    "entity" ID "{" EntityElem* "}" -> Entity {cons("Entity")}
+    Property                        -> EntityElem
+    ID ":" Type                     -> Property {cons("Property")}
+    
+  sorts Type
+  context-free syntax
+    QID -> Type {cons("Type")}     
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/entities/entities-trans.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/entities-trans.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,65 @@
+module entities/entities-trans
+
+imports include/LWC lwc/trans lib/namespace
+  
+        // todo: imports entities/Entities 
+ 
+signature 
+  constructors
+  	Entities   : Namespace
+  	Properties : String -> Namespace
+  	
+// todo: how to deal with primitive types? => provide ffi mechanism!
+
+rules // entities
+	
+  is-entity = ?Entity(_,_)
+  
+  name-of : 
+  	Entity(name, prop*) -> name
+
+  rename :
+  	d at Entity(name, prop1*) -> d'
+  	where new-scope(<all(rename-all)> d => d')
+  	
+  store :
+  	d at Entity(name, prop*) -> d
+  	where 
+  	  <store-declaration(|Entities())> (name, d)
+  	
+  editor-error:
+    Entity(name, _) -> (name, $[Multiple declarations for entity [name]])
+    where not ( <get-unique-declaration(|Entities())> name )
+    
+  editor-warning:
+  	Entity(name, _) -> (name, $[Entity [name] is never used])
+  	where not( <is-referred(|Entities())> name )
+    
+rules // types
+	
+  store :
+  	t at Type(name) -> t
+  	where <store-reference(|Entities())> name
+  	
+  editor-error :
+  	t at Type(name) -> (name, $[Type [name] is not declared.])
+  	where not(<is-declared(|Entities())> name)
+  	
+  resolve :
+  	Type(name) -> <project-declaration(name-of | Entities())> name
+  	
+rules // properties
+	
+  name-of: 
+  	Property(name, type) -> name
+
+  rename: 
+  	d at Property(name, type) -> <annotate-scope(name-of)> d 
+  
+  store:
+  	d at Property(name, type) -> d
+  	where <store-declaration(|Properties(<debug(!"get-scope: "); get-scope; debug(!" = ")> d))> (name, d)
+  
+  editor-error:
+    d at Property(name, _) -> (name, $[Multiple declarations for property [name]])
+    where not ( <get-unique-declaration(|Properties(<get-scope> d))> name )

Added: spoofax-contrib/lwc11/trunk/entities/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/generate.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,47 @@
+module entities/trans/generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/LWC
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,14 @@
+module expressions/Expressions
+
+imports common/Common
+imports entities/Entities
+
+exports
+  sorts VarDecl VarRef
+  context-free syntax
+  	"var" ID ":" Type ";" -> VarDecl {cons("VarDecl")}
+  	
+  sorts Exp
+  context-free syntax
+  	ID -> Exp {cons("VarRef")}
+  	
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,9 @@
+module expressions/expressions-trans
+
+rules
+	
+  // Call
+  
+  // MethodCall
+  
+  // FunctionCall
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/functions/Functions.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/functions/Functions.sdf	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,27 @@
+module functions/Functions
+
+imports common/Common
+imports entities/Entities
+imports statements/Statements
+
+exports
+  sorts FunctionDef 
+  context-free syntax
+  	ID "(" {Param ","}* ")" ReturnType? Block -> FunctionDef {cons("FunctionDef")}
+    FunctionDef                               -> Definition 
+  	QID "(" {Exp ","}* ")"                    -> FunctionCall {cons("FunctionCall")}
+  	FunctionCall                              -> Exp
+    
+  sorts MethodDef 
+  context-free syntax
+  	ID "(" {Param ","}* ")" ReturnType? Block -> MethodDef {cons("MethodDef")}
+    MethodDef                                 -> EntityElem
+  	Exp "." QID "(" {Exp ","}* ")"            -> MethodCall {cons("MethodCall")}
+  	MethodCall                                -> Exp
+
+  sorts Param ReturnType
+  context-free syntax 	
+  	ID ":" Type -> Param {cons("Param")}
+  	":" Type    -> ReturnType {cons("ReturnType")}
+  	  	
+  
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/functions/functions-trans.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/functions/functions-trans.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,92 @@
+module functions/functions-trans
+
+imports include/LWC lwc/trans lib/namespace entities/entities-trans
+
+signature
+  constructors
+  	Functions : ID -> Namespace
+  	Methods   : ID -> Namespace
+
+rules // function definitions
+	
+  type-of:
+  	FunctionDef(name, params, Some(type), bl) -> type
+  	
+  is-function-def = ?FunctionDef(_,_,_,_)
+  
+  name-of:
+  	FunctionDef(name, params, rt, bl) -> name
+  	
+  arg-types :
+  	FunctionDef(name, params, rt, bl) -> <map(?Param(_,<id>))> params
+  	
+  signature-of :
+  	FunctionDef(name, params, rt, bl) -> (name, <arg-types>)
+  	
+  rename:
+  	d at FunctionDef(name, params, rt, bl) -> <annotate-scope(name-of)> d'
+  	where new-scope(<all(rename-all)> d => d')
+  	
+  store:
+  	d at FunctionDef(name, params, rt, bl) -> d
+  	where <store-declaration(|Functions(<get-scope>d))> (<signature-of>d, d)
+  	
+  editor-error:
+    d at FunctionDef(name, params, rt, bl) -> (name, $[Multiple declarations for function [name]])
+    where not(<get-unique-declaration(|Functions(<get-scope> d))> <signature-of> d)
+
+rules // method definitions
+	
+  type-of: 
+  	MethodDef(name, params, Some(type), bl) -> type
+  	
+  is-function-def = 
+  	?MethodDef(_,_,_,_) 
+  
+  name-of: 
+  	MethodDef(name, params, rt, bl) -> name
+  	
+  arg-types :
+  	MethodDef(name, params, rt, bl) -> <map(?Param(_,<id>))> params
+  	
+  signature-of :
+  	MethodDef(name, params, rt, bl) -> (name, <arg-types>)
+  	 
+  rename:
+  	d at MethodDef(name, params, rt, bl) -> <annotate-scope(is-entity; name-of)> d'
+  	where new-scope(<all(rename-all)> d => d')
+  	
+  store: 
+  	d at MethodDef(name, params, rt, bl) -> d
+  	where <store-declaration(|Methods(<get-scope>d))> (<signature-of>d, d)
+  	
+  editor-error:
+    d at MethodDef(name, params, rt, bl) -> (name, $[Multiple declarations for function [name]])
+    where not(<signature-of; get-unique-declaration(|Methods(<get-scope> d))> d)
+  	  	 
+rules // method calls
+	   
+  namespace-of:
+  	MethodCall(e, name, args) -> Methods(<type-of; name-of> e)
+  	
+  signature-of:
+  	MethodCall(e, name, args) -> (name, <map(type-of)>args)
+	 
+  type-of:
+  	call at MethodCall(e, name, args) -> type
+  	where 
+  	  signature-of; get-declaration(|<namespace-of>call) => type
+
+rules // function calls
+	
+  signature-of:
+  	MethodCall(e, name, args) -> (<type-of> e, name, <map(type-of)>args) 
+	
+//  type-of:
+//  	MethodCall(e, name, args) -> type
+//  	where <get-declaration(|Functions(<get-scope>e))> <signature-of> e => type
+  	
+rules // parameters
+	
+  //rename : 
+  	//Param(name, type) -> Param(<rename-declaration(|Vars())> name, type)
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/lib/editor-common.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lib/editor-common.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,42 @@
+module lib/editor-common
+
+imports lib/editor-common.generated
+
+rules
+	
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+
+  open-import-lwc(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        debug(!"cache-path: ");
+        if not(<IsImported> path) then
+          debug(!"not imported: ");
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        else
+          debug(!"already imported: ")
+        end
+      end
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lib/namespace.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lib/namespace.str	Fri Oct  8 09:12:16 2010	(r21287)
+++ spoofax-contrib/lwc11/trunk/lib/namespace.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -1,97 +1,111 @@
 module lib/namespace
 
+signature constructors
+	name:  String -> Annotation
+	scope: String -> Annotation
+	
+	IncludedBy: Namespace -> Namespace
+	Including:  Namespace -> Namespace
+	
 rules // scoped renaming
 	
-	/**
-	* executes the renaming strategy s in a new scope
-	* 
-	* declarations inside the new scope will hide existing declarations outside the new scope
-	* multiple declarations with the same name inside the new scope will be renamed to the same name
-	*
-	* @param renaming strategy s: a -> b
-	* @type a -> b
-	*/
 	new-scope(s) :
 		x -> y
 		where
 			<newname> x => scope ;
-			{| Renamed, RenamedInScope, CurrentScope:
-				rules (CurrentScope: _ -> scope) ;
+			debug(!"new-scope: ");
+			{| Renamed, RenamedInScope, CurrentScope, Scope:
+				rules (
+					CurrentScope: () -> scope
+					Scope:+ x -> scope
+				) ;
 				<s> x => y
 			|}
 			
-	/**
-	* annotates the current term with a fresh name
-	* can distinguish different namespaces
-	* remembers the renaming by storing two dynamic rules
-	* 
-	* multiple calls on the same term inside the same scope will give identical results
-	* calls inside a new scope will hide the results of calls to the same term from outer scopes
-	*
-	* @param namespace 
-	* @type a -> a
-	*/
 	rename-declaration(|namespace) : 
 		x -> x'
 		where 
-			CurrentScope => scope ;
+			<CurrentScope> () => scope ;
 			(
 				<RenamedInScope> (namespace, scope, x) => x' <+
-				x' := x{<newname> x}
+				x' := x{name(<newname> x)}
 			)
 		where rules(
 			RenamedInScope: (namespace, scope, x) -> x' 
 			Renamed: (namespace, x) -> x'
 		)
 	
-	/**
-	* annotates the current term with a new name
-	* succeeds only if rename-declaration was called before on the same term
-	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
-	*
-	* @param namespace 
-	* @type a -> b
-	*/
 	rename-reference(|namespace) :
 		x -> x'
 		where
 			<Renamed> (namespace, x) => x'
 
-rules // store declarations and references
+	annotate-scope(s) : 
+	  x -> x{scope(scope)} 
+	  where project-scope(s) => scope
 	
-	new-analysis(s) = {| Declared, Referred: s |}
+	new-analysis(s) = {| Declared, Referred, Including, IncludedBy: s |}
 		
-	/**
-	* stores a mapping from a name to a declaration
-	* can distinguish different namespaces
-	* remembers the mapping by storing a dynamic rule
-	*
-	* @param namespace
-	* @type (a, b) -> b
-	*/
 	store-declaration(|namespace) :
 		(x, d) -> d
 		where rules(
 			Declared:+ (namespace, x) -> d
 		)
 		
-	/**
-	* stores the usage of a reference
-	* can distinguish different namespaces
-	* remembers the reference by storing a dynamic rule
-	*
-	* @param namespace
-	* @type a -> a
-	*/
 	store-reference(|namespace) :
 		x -> x
 		where rules (
 			Referred:+ (namespace, x) -> x
-		)	
+		)
+		
+	namespace-inclusion(|namespace) : 
+		included -> included
+		where rules (
+			IncludedBy:+ included -> namespace
+			Including:+ namespace -> included
+		)
+				
+	get-scopes = all-keys-Scope; debug(!"get-scopes: ")
+	
+	get-scopes(s) = get-scopes ; filter(where(s))
+	
+	get-scope(s) = get-scopes ; fetch-elem(where(s))
+	
+	project-scopes(s) = get-scopes ; filter(s) 
+	
+	project-scope(s) = get-scopes ; fetch-elem(s)
+	
+	in-scope(s) = where(get-scope(s))
+	
+	get-scope = get-annos ; fetch-elem(?scope(<id>))
+	
+strategies // access inclusions
+	
+	get-included-namespaces  = get-inclusions(bagof-Including)
+	get-including-namespaces = get-inclusions(bagof-IncludedBy)
+	
+	get-inclusions(s) = ![<id>] ; get-inclusions(s|[]) ; reverse 
+	
+	get-inclusions(s|temps): [] -> temps
+	 
+	get-inclusions(s|temps): 
+		[space|spaces] -> <get-inclusions(s|temps)> spaces
+		where <elem> (space, temps)
+		
+	get-inclusions(s|temps):  
+		[space|spaces] -> <get-inclusions(s|temps')> spaces
+		where
+			<s> space ;
+			get-inclusions(s|[space|temps]) => temps'
+
+	resolve-included = 
+	  ?IncludedBy(<get-included-namespaces>) 
+	  <+ ?Including(<get-including-namespaces>) 
+	  <+ ![<id>]
 		
 strategies // access declarations
 	
-	get-declarations(|namespace) = !(namespace, <id>) ; bagof-Declared
+	get-declarations(|namespace) = ?x ; <resolve-included> namespace ; mapconcat(!(<id>, x) ; bagof-Declared)
 	
 	is-declared(|namespace) = get-declarations(|namespace) ; ?[_|_]
 	
@@ -99,7 +113,9 @@
 	
 strategies // project declarations
 	
-	get-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(where(s)) 
+	get-declaration(|namespace) = get-declaration(id|namespace)
+	
+	get-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(where(s))
 	
 	get-declarations(s|namespace) = get-declarations(|namespace) ; filter(where(s)) 
 	
@@ -109,7 +125,10 @@
 		
 strategies // access all declarations
 	
-	get-all-declarations(|namespace) = all-keys-Declared ; filter(?(namespace, _) ; Declared)
+	get-all-declarations(|namespace) = 
+		<resolve-included> namespace => spaces ; 
+		all-keys-Declared ; 
+		filter(where( (id, !spaces) ; elem ) ; Declared)
 	
 	get-all-declarations(s|namespace) = get-all-declarations(|namespace) ; filter(where(s)) 
 
@@ -117,8 +136,8 @@
 	 
 strategies // access references
 
-	get-references(|namespace) = !(namespace, <id>) ; bagof-Referred
-	
+	get-references(|namespace) = ?x ; <resolve-included> namespace ; mapconcat(!(<id>, x) ; bagof-Referred)
+	 
 	is-referred(|namespace) = get-references(|namespace) ; ?[_|_]
 
 strategies	

Added: spoofax-contrib/lwc11/trunk/lwc/LWC.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/LWC.sdf	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,15 @@
+module LWC
+
+imports entities/Entities
+imports modules/Modules
+imports functions/Functions
+imports expressions/Expressions
+imports statements/Statements
+
+exports
+
+  context-free start-symbols Start
+
+  context-free syntax
+    Module  -> Start
+    
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/lwc/lwc.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/lwc.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,10 @@
+module lwc
+
+// language composition
+
+imports lwc/trans
+imports entities/entities-trans
+imports expressions/expressions-trans
+imports functions/functions-trans
+imports modules/modules-trans
+imports statements/statements-trans

Added: spoofax-contrib/lwc11/trunk/lwc/trans.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/lwc/trans.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,56 @@
+module lwc/trans/trans
+
+// This module defines a generic setup for analysis and editor services with parameters
+// in the form of hook strategies that can be extended for specific language elements.
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+
+imports
+  include/LWC
+  lib/editor-common
+  lib/editor-common.generated
+
+strategies // analysis
+
+  analyze     = desugar-all; rename-all; store-all 
+  desugar-all = innermost(desugar)
+  rename-all  = alltd(propose <+ rename)
+  store-all   = topdown(try(store)) ; topdown(try(store-ref))
+   
+  desugar   = fail
+  rename    = fail
+  propose   = fail
+  store     = fail
+  store-ref = fail
+
+rules // editor
+	
+  editor-analyze:
+    (ast, path, project-path) -> (ast', errors, warnings, notes)
+    with
+      editor-init;
+	  <analyze> ast => ast';
+      <collect-all(editor-error,   conc)> ast' => errors;
+      <collect-all(editor-warning, conc)> ast' => warnings;
+      <collect-all(editor-note,    conc)> ast' => notes
+		
+  editor-error   = fail
+  editor-warning = fail
+  editor-note    = fail
+  
+  editor-resolve: 
+    (node, position, ast, path, project-path) -> target
+    where <resolve> node => target 
+    
+  resolve = fail
+  
+  editor-hover: 
+  	(node, position, ast, path, project-path) -> str
+    where <hover> node => str
+
+  hover = fail
+
+  
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/modules/Modules.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/modules/Modules.sdf	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,10 @@
+module modules/Modules
+
+imports common/Common
+
+exports
+  sorts Module Definition
+  context-free syntax
+    "module" ID Definition* -> Module {cons("Module")}
+    "imports" FILENAME      -> Definition {cons("Imports")}
+

Added: spoofax-contrib/lwc11/trunk/modules/modules-trans.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/modules/modules-trans.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,67 @@
+module modules/modules-trans
+
+imports 
+  libstratego-lib
+  include/LWC
+  lib/editor-common.generated
+  lib/editor-common
+  lib/namespace
+  
+signature
+  constructors
+  	Module : Namespace
+  
+strategies
+	
+  record-declarations =
+  	alltd(record-declaration)
+  	
+rules
+	
+  analyze =
+  	analyze-module
+	
+  analyze-module :
+  	(mod at Module(x, def*), path, project-path) -> mod'
+  	where 
+  	  rules( CurrentFile := path );
+  	  mod' := <record-declarations> mod
+  	  
+   record-declaration :
+   	 Module(x, def1*) -> mod
+   	 where 
+   	   def2* := <record-imported-declarations; record-declarations> def1*;
+   	   mod := Module(x, def2*);
+   	   <store-declaration(|Module())> (x, (<CurrentFile>, mod))
+
+  declaration-of :
+  	i at Imports(name) -> mod
+  	where <import-module(?mod)> i
+  	
+  record-imported-declarations =
+    alltd(import-module(record-declarations))
+    
+  editor-resolve :
+    (i at Imports(name), position, ast, path, project-path) -> target
+    where
+      debug(!"editor-resolve: ");
+      target := <get-module> i;
+      debug(!"  module: ")
+      
+rules // reading module from file
+	
+  get-module :
+  	Imports(name) -> mod
+  	where import-module(?mod)
+
+  import-module(transform-declarations) : 
+  	i at Imports(x) -> i
+  	where 
+  	  CurrentFile; debug(!" filename: ");
+  	  <open-import-lwc(debug(!"resolve this: "); resolve-import(|<CurrentFile>); debug(!"resolved: "), debug(!" parse this"); parse-lwc-file; debug(!"  parsed: "), debug(!"  transform declarations: "); transform-declarations)> $[[x].lwc]
+  	  
+  resolve-import(|modpath) :
+  	x -> $[[<project-path>]/[<dirname> modpath]/[x]]
+  	// lookup module in same module as importing module
+  	// todo: this can be more sophisticated involving search paths
+  

Added: spoofax-contrib/lwc11/trunk/statements/Statements.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/statements/Statements.sdf	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,12 @@
+module statements/Statements
+
+imports expressions/Expressions
+
+exports
+  sorts Statement Block
+  context-free syntax
+  	Exp ":=" Exp ";"   -> Statement {cons("Assign")}
+  	"{" Statement* "}" -> Block {cons("Block")}
+  	Block              -> Statement
+  	VarDecl            -> Statement
+  	Exp ";"            -> Statement {cons("Statement")}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/statements/statements-trans.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/statements/statements-trans.str	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,5 @@
+module statements/statements-trans 
+
+rules
+	
+   
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/blog.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/blog.lwc	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,34 @@
+module blog 
+
+//imports users 
+
+entity User {} 
+  
+entity Blog {  
+  post     : BlogPost
+  author   : User  
+  audience : User    
+  author   : User 
+  
+  comment(c : String) { post.comment(c); }
+}
+
+comment(blog : Blog, c : String) { }
+ 
+entity BlogPost {
+  blog    : Blog
+  author  : Usr  
+  body    : String 
+  created : DateTime
+  
+  comment(c : String) {}
+}
+
+entity URL {
+  
+}
+
+entity URL {
+  location : String
+}
+

Added: spoofax-contrib/lwc11/trunk/test/users.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/users.lwc	Sun Oct 10 21:25:54 2010	(r21288)
@@ -0,0 +1,8 @@
+module users
+
+entity User {
+  name     : String
+  password : String 
+  homepage : URL
+}
+  
\ No newline at end of file

From E.Visser at tudelft.nl  Sun Oct 10 23:45:36 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Sun, 10 Oct 2010 21:45:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21289 -
	spoofax-contrib/lwc11/trunk/lib
Message-ID: <201010102145.o9ALja3a019706@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Sun Oct 10 21:45:36 2010
New Revision: 21289
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21289&sc=1

Log:
new version of namespace library

Modified:
   spoofax-contrib/lwc11/trunk/lib/namespace.str

Modified: spoofax-contrib/lwc11/trunk/lib/namespace.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lib/namespace.str	Sun Oct 10 21:25:54 2010	(r21288)
+++ spoofax-contrib/lwc11/trunk/lib/namespace.str	Sun Oct 10 21:45:36 2010	(r21289)
@@ -9,19 +9,38 @@
 	
 rules // scoped renaming
 	
+	/**
+	* executes the renaming strategy s in a new scope
+	* 
+	* declarations inside the new scope will hide existing declarations outside the new scope
+	* multiple declarations with the same name inside the new scope will be renamed to the same name
+	*
+	* @param renaming strategy s: a -> b
+	* @type a -> b
+	*/
 	new-scope(s) :
 		x -> y
 		where
 			<newname> x => scope ;
-			debug(!"new-scope: ");
 			{| Renamed, RenamedInScope, CurrentScope, Scope:
 				rules (
 					CurrentScope: () -> scope
 					Scope:+ x -> scope
 				) ;
 				<s> x => y
-			|}
+			|} 
 			
+	/**
+	* annotates the current term with a fresh name
+	* can distinguish different namespaces
+	* remembers the renaming by storing two dynamic rules
+	* 
+	* multiple calls on the same term inside the same scope will give identical results
+	* calls inside a new scope will hide the results of calls to the same term from outer scopes
+	*
+	* @param namespace 
+	* @type a -> a
+	*/
 	rename-declaration(|namespace) : 
 		x -> x'
 		where 
@@ -35,29 +54,70 @@
 			Renamed: (namespace, x) -> x'
 		)
 	
+	/**
+	* annotates the current term with a new name
+	* succeeds only if rename-declaration was called before on the same term
+	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
+	*
+	* @param namespace 
+	* @type a -> b
+	*/
 	rename-reference(|namespace) :
 		x -> x'
 		where
 			<Renamed> (namespace, x) => x'
 
-	annotate-scope(s) : 
-	  x -> x{scope(scope)} 
-	  where project-scope(s) => scope
+rules // annotate scope
+	
+	annotate-scope(s) : x -> x{scope(scope)} where project-scope(s) => scope
+	
+rules // store declarations and references
 	
 	new-analysis(s) = {| Declared, Referred, Including, IncludedBy: s |}
 		
+	/**
+	* stores a mapping from a name to a declaration
+	* can distinguish different namespaces
+	* remembers the mapping by storing a dynamic rule
+	*
+	* @param namespace
+	* @type (a, b) -> b
+	*/
 	store-declaration(|namespace) :
 		(x, d) -> d
 		where rules(
 			Declared:+ (namespace, x) -> d
 		)
 		
+	store-declaration = store-declaration(|<get-annotated-scope>)
+	
+	/**
+	* stores the usage of a reference
+	* can distinguish different namespaces
+	* remembers the reference by storing a dynamic rule
+	*
+	* @param namespace
+	* @type a -> a
+	*/
 	store-reference(|namespace) :
 		x -> x
 		where rules (
 			Referred:+ (namespace, x) -> x
 		)
-		
+
+	store-reference = store-reference(|<get-annotated-scope>)
+	
+rules // include namespaces
+	
+	/**
+	*
+	* example: 
+	*     store: Class(c, Parent(p), _, _) -> <id> 
+	*         where 
+	*             <store-declaration(|Classes())> c ; 
+	*             <namespace-inclusion(|Fields(c))> Fields(p) ;
+	*             <namespace-inclusion(|Methods(c))> Methods(p) 
+	*/
 	namespace-inclusion(|namespace) : 
 		included -> included
 		where rules (
@@ -65,19 +125,21 @@
 			Including:+ namespace -> included
 		)
 				
-	get-scopes = all-keys-Scope; debug(!"get-scopes: ")
+strategies // access scopes
+	
+	get-scopes = all-keys-Scope
 	
 	get-scopes(s) = get-scopes ; filter(where(s))
 	
 	get-scope(s) = get-scopes ; fetch-elem(where(s))
 	
-	project-scopes(s) = get-scopes ; filter(s) 
+	project-scopes(s) = get-scopes ; filter(s)
 	
 	project-scope(s) = get-scopes ; fetch-elem(s)
 	
 	in-scope(s) = where(get-scope(s))
 	
-	get-scope = get-annos ; fetch-elem(?scope(<id>))
+	get-annotated-scope = get-annos ; fetch-elem(?scope(<id>))
 	
 strategies // access inclusions
 	
@@ -98,31 +160,93 @@
 			<s> space ;
 			get-inclusions(s|[space|temps]) => temps'
 
-	resolve-included = 
-	  ?IncludedBy(<get-included-namespaces>) 
-	  <+ ?Including(<get-including-namespaces>) 
-	  <+ ![<id>]
+	resolve-included = ?IncludedBy(<get-included-namespaces>) <+ ?Including(<get-including-namespaces>) <+ ![<id>]
 		
 strategies // access declarations
 	
+	/**
+	* maps a name to its declarations
+	* can distinguish different namespaces
+	* remembers the mapping by calling a dynamic rule
+	*
+	* @param namespace
+	* 
+	* @type a -> List(b)
+	*/
 	get-declarations(|namespace) = ?x ; <resolve-included> namespace ; mapconcat(!(<id>, x) ; bagof-Declared)
 	
-	is-declared(|namespace) = get-declarations(|namespace) ; ?[_|_]
-	
+	/**
+	* succeeds if the current term can be mapped to a declaration
+	* can distinguish different namespaces
+	* 
+	* @param namespace
+	* 
+	* @type a -> a
+	*/
+	is-declared(|namespace) = where(get-declarations(|namespace) ; ?[_|_])
+	
+	/**
+	* maps a name to its only declaration
+	* can distinguish different namespaces
+	* 
+	* @param namespace
+	*/
 	get-unique-declaration(|namespace) = get-declarations(|namespace) ; ?[<id>]
 	
+	/**
+	* maps a name to its first declaration
+	* can distinguish different namespaces
+	* 
+	* @param namespace
+	*/
+	get-declaration(|namespace) = project-declaration(id|namespace) 
+	
+	/**
+	* maps a name to its first declaration for which strategy s holds
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> b
+	*/
+	get-declaration(s|namespace) = project-declaration(where(s)|namespace)
+	
+	/**
+	* maps a name to its declarations for which strategy s holds
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> List(b)
+	*/
+	get-declarations(s|namespace) = project-declarations(where(s)|namespace)
+
 strategies // project declarations
 	
-	get-declaration(|namespace) = get-declaration(id|namespace)
-	
-	get-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(where(s))
-	
-	get-declarations(s|namespace) = get-declarations(|namespace) ; filter(where(s)) 
-	
+	/**
+	* maps a name to the first projection of its declarations
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> c
+	*/
 	project-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(s) 
 
+	/**
+	* maps a name to the projections of its declarations
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> List(c)
+	*/
 	project-declarations(s|namespace) = get-declarations(|namespace) ; filter(s) 
-		
+	
 strategies // access all declarations
 	
 	get-all-declarations(|namespace) = 
@@ -130,14 +254,14 @@
 		all-keys-Declared ; 
 		filter(where( (id, !spaces) ; elem ) ; Declared)
 	
-	get-all-declarations(s|namespace) = get-all-declarations(|namespace) ; filter(where(s)) 
+	get-all-declarations(s|namespace) = project-all-declarations(where(s)|namespace) 
 
 	project-all-declarations(s|namespace) = get-all-declarations(|namespace) ; filter(s) 
 	 
 strategies // access references
 
 	get-references(|namespace) = ?x ; <resolve-included> namespace ; mapconcat(!(<id>, x) ; bagof-Referred)
-	 
+	
 	is-referred(|namespace) = get-references(|namespace) ; ?[_|_]
 
 strategies	

From g.h.wachsmuth at tudelft.nl  Mon Oct 11 15:39:54 2010
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Mon, 11 Oct 2010 13:39:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21290 -
	tiger-spoofax/lib
Message-ID: <201010111339.o9BDdsem003998@proliant.st.ewi.tudelft.nl>

Author: GuidoWachsmuth
Date: Mon Oct 11 13:39:54 2010
New Revision: 21290
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21290&sc=1

Log:
bug fix suggested by Vlad Vergu
additional documentation

Modified:
   tiger-spoofax/lib/namespace.str

Modified: tiger-spoofax/lib/namespace.str
==============================================================================
--- tiger-spoofax/lib/namespace.str	Sun Oct 10 21:45:36 2010	(r21289)
+++ tiger-spoofax/lib/namespace.str	Mon Oct 11 13:39:54 2010	(r21290)
@@ -91,25 +91,92 @@
 		
 strategies // access declarations
 	
+	/**
+	* maps a name to its declarations
+	* can distinguish different namespaces
+	* remembers the mapping by calling a dynamic rule
+	*
+	* @param namespace
+	* 
+	* @type a -> List(b)
+	*/
 	get-declarations(|namespace) = !(namespace, <id>) ; bagof-Declared
 	
+	/**
+	* succeeds if the current term can be mapped to a declaration
+	* can distinguish different namespaces
+	* 
+	* @param namespace
+	* 
+	* @type a -> a
+	*/
 	is-declared(|namespace) = get-declarations(|namespace) ; ?[_|_]
 	
+	/**
+	* maps a name to its only declaration
+	* can distinguish different namespaces
+	* 
+	* @param namespace
+	*/
 	get-unique-declaration(|namespace) = get-declarations(|namespace) ; ?[<id>]
+
+	/**
+	* maps a name to its first declaration
+	* can distinguish different namespaces
+	* 
+	* @param namespace
+	*/
+	get-declaration(|namespace) = project-declaration(id|namespace) 
+	
+	/**
+	* maps a name to its first declaration for which strategy s holds
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> b
+	*/
+	get-declaration(s|namespace) = project-declaration(where(s)|namespace)
+	
+	/**
+	* maps a name to its declarations for which strategy s holds
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> List(b)
+	*/
+	get-declarations(s|namespace) = project-declarations(where(s)|namespace)
 	
 strategies // project declarations
 	
-	get-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(where(s)) 
-	
-	get-declarations(s|namespace) = get-declarations(|namespace) ; filter(where(s)) 
-	
+	/**
+	* maps a name to the first projection of its declarations
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> c
+	*/
 	project-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(s) 
 
+	/**
+	* maps a name to the projections of its declarations
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> List(c)
+	*/
 	project-declarations(s|namespace) = get-declarations(|namespace) ; filter(s) 
 		
 strategies // access all declarations
 	
-	get-all-declarations(|namespace) = all-keys-Declared ; filter(?(namespace, _) ; Declared)
+	get-all-declarations(|namespace) = all-keys-Declared ; filter(?(namespace, _)); mapconcat(bagof-Declared)
 	
 	get-all-declarations(s|namespace) = get-all-declarations(|namespace) ; filter(where(s)) 
 

From R.B.Vermaas at tudelft.nl  Thu Oct 14 10:39:11 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 14 Oct 2010 08:39:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21291 - hydra/jobs
Message-ID: <201010140839.o9E8dBg0006231@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Thu Oct 14 08:39:11 2010
New Revision: 21291
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21291&sc=1

Log:
add aster and xdoc to strategoxt-packages jobset

Modified:
   hydra/jobs/strategoxt-packages.nix

Modified: hydra/jobs/strategoxt-packages.nix
==============================================================================
--- hydra/jobs/strategoxt-packages.nix	Mon Oct 11 13:39:54 2010	(r21290)
+++ hydra/jobs/strategoxt-packages.nix	Thu Oct 14 08:39:11 2010	(r21291)
@@ -6,6 +6,8 @@
 , dryadTarball ? { outPath = ./dryad-0.2pre18756.tar.gz; }
 , strcJavaTarball
 , aspectjFrontTarball
+, asterTarball
+, xdocTarball
 } :
 
 let
@@ -31,6 +33,8 @@
     dryad           = {system ? "i686-linux"}: let sysPkgs = systemPkgs system ; in builder.easyNixBuildFromTarball dryadTarball sysPkgs (specs.dryad sysPkgs) ;
     strcJava        = {system ? "i686-linux"}: let sysPkgs = systemPkgs system ; in builder.easyNixBuildFromTarball strcJavaTarball sysPkgs (specs.strcJava sysPkgs) ;
     aspectjFront    = {system ? "i686-linux"}: let sysPkgs = systemPkgs system ; in builder.easyNixBuildFromTarball aspectjFrontTarball sysPkgs (specs.aspectjFront sysPkgs) ;
+    aster           = {system ? "i686-linux"}: let sysPkgs = systemPkgs system ; in builder.easyNixBuildFromTarball asterTarball sysPkgs (specs.aster sysPkgs) ;
+    xdoc            = {system ? "i686-linux"}: let sysPkgs = systemPkgs system ; in builder.easyNixBuildFromTarball xdocTarball sysPkgs (specs.xdoc sysPkgs) ;
 
   };
 in jobs

From g.h.wachsmuth at tudelft.nl  Thu Oct 14 13:10:25 2010
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Thu, 14 Oct 2010 11:10:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21292 - in
	tiger-spoofax: bin/trans lib
Message-ID: <201010141110.o9EBAPgP026195@proliant.st.ewi.tudelft.nl>

Author: GuidoWachsmuth
Date: Thu Oct 14 11:10:25 2010
New Revision: 21292
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21292&sc=1

Log:
new namespace library supports debugging

Deleted:
   tiger-spoofax/bin/trans/
   tiger-spoofax/lib/namespace.str

From g.h.wachsmuth at tudelft.nl  Thu Oct 14 13:10:43 2010
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Thu, 14 Oct 2010 11:10:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21293 -
	tiger-spoofax/lib
Message-ID: <201010141110.o9EBAhKB026200@proliant.st.ewi.tudelft.nl>

Author: GuidoWachsmuth
Date: Thu Oct 14 11:10:42 2010
New Revision: 21293
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21293&sc=1

Log:
new namespace library supports debugging

Added:
   tiger-spoofax/lib/namespace.str

Added: tiger-spoofax/lib/namespace.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ tiger-spoofax/lib/namespace.str	Thu Oct 14 11:10:42 2010	(r21293)
@@ -0,0 +1,233 @@
+module lib/namespace
+
+imports
+	libstratego-gpp
+	libstratego-aterm
+	
+rules
+	
+	pp-aterm = pp-aterm-box ; box2text-string(|100)
+	
+rules // scoped renaming
+	
+	/**
+	* executes the renaming strategy s in a new scope
+	* 
+	* declarations inside the new scope will hide existing declarations outside the new scope
+	* multiple declarations with the same name inside the new scope will be renamed to the same name
+	*
+	* @param renaming strategy s: a -> b
+	* @type a -> b
+	*/
+	new-scope(s) :
+		x -> y
+		where 
+			<debug-namespace> $[Entering scope [<pp-aterm> x].]
+		where
+			<newname> x => scope ;
+			{| Renamed, RenamedInScope, CurrentScope:
+				rules (CurrentScope: _ -> scope) ;
+				<s> x => y
+			|} 
+		where 
+			<debug-namespace> $[Leaving scope [<pp-aterm> x].]
+			
+	/**
+	* annotates the current term with a fresh name
+	* can distinguish different namespaces
+	* remembers the renaming by storing two dynamic rules
+	* 
+	* multiple calls on the same term inside the same scope will give identical results
+	* calls inside a new scope will hide the results of calls to the same term from outer scopes
+	*
+	* @param namespace 
+	* @type a -> a
+	*/
+	rename-declaration(|namespace) : 
+		x -> x'
+		where 
+			CurrentScope => scope ;
+			(
+				<RenamedInScope> (namespace, scope, x) => x' <+
+				x' := x{<newname> x}
+			)
+		where rules(
+			RenamedInScope: (namespace, scope, x) -> x' 
+			Renamed: (namespace, x) -> x'
+		)
+		where 
+			<debug-namespace> $[Renamed declaration [<pp-aterm> x] to [<pp-aterm> x'] in namespace [<pp-aterm> namespace].]
+	
+	/**
+	* annotates the current term with a new name
+	* succeeds only if rename-declaration was called before on the same term
+	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
+	*
+	* @param namespace 
+	* @type a -> b
+	*/
+	rename-reference(|namespace) :
+		x -> x'
+		where
+			<Renamed> (namespace, x) => x'
+		where 
+			<debug-namespace> $[Renamed reference [<pp-aterm> x] to [<pp-aterm> x'] in namespace [<pp-aterm> namespace].]
+
+rules // store declarations and references
+	
+	new-analysis(s) = {| Declared, Referred: s |}
+		
+	/**
+	* stores a mapping from a name to a declaration
+	* can distinguish different namespaces
+	* remembers the mapping by storing a dynamic rule
+	*
+	* @param namespace
+	* @type (a, b) -> b
+	*/
+	store-declaration(|namespace) :
+		(x, d) -> d
+		where rules(
+			Declared:+ (namespace, x) -> d
+		)
+		where 
+			<debug-namespace> $[Stored declaration [<pp-aterm> x] -> [<pp-aterm> d] in namespace [<pp-aterm> namespace].]
+
+	/**
+	* stores the usage of a reference
+	* can distinguish different namespaces
+	* remembers the reference by storing a dynamic rule
+	*
+	* @param namespace
+	* @type a -> a
+	*/
+	store-reference(|namespace) :
+		x -> x
+		where rules (
+			Referred:+ (namespace, x) -> x
+		)	
+		where 
+			<debug-namespace> $[Stored reference [<pp-aterm> x] in namespace [<pp-aterm> namespace].]
+		
+strategies // access declarations
+	
+	/**
+	* maps a name to its declarations
+	* can distinguish different namespaces
+	* remembers the mapping by calling a dynamic rule
+	*
+	* @param namespace
+	* 
+	* @type a -> List(b)
+	*/
+	get-declarations(|namespace) = !(namespace, <id>) ; bagof-Declared
+	
+	/**
+	* succeeds if the current term can be mapped to a declaration
+	* can distinguish different namespaces
+	* 
+	* @param namespace
+	* 
+	* @type a -> a
+	*/
+	is-declared(|namespace) = get-declarations(|namespace) ; ?[_|_]
+	
+	/**
+	* maps a name to its only declaration
+	* can distinguish different namespaces
+	* 
+	* @param namespace
+	*/
+	get-unique-declaration(|namespace) = get-declarations(|namespace) ; ?[<id>]
+
+	/**
+	* maps a name to its first declaration
+	* can distinguish different namespaces
+	* 
+	* @param namespace
+	*/
+	get-declaration(|namespace) = project-declaration(id|namespace) 
+	
+	/**
+	* maps a name to its first declaration for which strategy s holds
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> b
+	*/
+	get-declaration(s|namespace) = project-declaration(where(s)|namespace)
+	
+	/**
+	* maps a name to its declarations for which strategy s holds
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> List(b)
+	*/
+	get-declarations(s|namespace) = project-declarations(where(s)|namespace)
+	
+strategies // project declarations
+	
+	/**
+	* maps a name to the first projection of its declarations
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> c
+	*/
+	project-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(s) 
+
+	/**
+	* maps a name to the projections of its declarations
+	* can distinguish different namespaces
+	* 
+	* @param s: b -> c
+	* @param namespace
+	* 
+	* @type a -> List(c)
+	*/
+	project-declarations(s|namespace) = get-declarations(|namespace) ; filter(s) 
+		
+strategies // access all declarations
+	
+	get-all-declarations(|namespace) = all-keys-Declared ; filter(?(namespace, _)); mapconcat(bagof-Declared)
+	
+	get-all-declarations(s|namespace) = get-all-declarations(|namespace) ; filter(where(s)) 
+
+	project-all-declarations(s|namespace) = get-all-declarations(|namespace) ; filter(s) 
+	 
+strategies // access references
+
+	get-references(|namespace) = !(namespace, <id>) ; bagof-Referred
+	
+	is-referred(|namespace) = get-references(|namespace) ; ?[_|_]
+
+strategies	
+	
+	get-proposal-candidates(|namespace) = all-keys-Renamed ; filter(?(namespace, _) ; Renamed)
+	
+	store-proposal-candidates(|namespace) = get-proposal-candidates(|namespace) ; store-proposals
+	
+	store-proposals = ?x ; where (rules ( Propose : () -> x ))
+	
+	get-proposals = ( <Propose> () ; map(rm-annotations) ) <+ ![]
+	
+	get-proposals(s|namespace) = 
+		( 
+			<Propose> () ; 
+			filter(where( get-declaration(s|namespace) )) ; 
+			map(rm-annotations) 
+		) <+ ![]
+
+strategies
+	
+	enable-namespace-debugging  = rules(DebugNS: x -> x)
+	disable-namespace-debugging = rules(DebugNS:- _ )
+	
+	debug-namespace = not(DebugNS) <+ debug

From E.Visser at tudelft.nl  Thu Oct 14 23:57:05 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Thu, 14 Oct 2010 21:57:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21294 - in
	spoofax-contrib/lwc11/trunk: entities test
Message-ID: <201010142157.o9ELv5Lv014205@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Thu Oct 14 21:57:04 2010
New Revision: 21294
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21294&sc=1

Log:


Modified:
   spoofax-contrib/lwc11/trunk/entities/Entities.sdf
   spoofax-contrib/lwc11/trunk/test/blog.lwc

Modified: spoofax-contrib/lwc11/trunk/entities/Entities.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/Entities.sdf	Thu Oct 14 11:10:42 2010	(r21293)
+++ spoofax-contrib/lwc11/trunk/entities/Entities.sdf	Thu Oct 14 21:57:04 2010	(r21294)
@@ -7,7 +7,7 @@
   context-free syntax 
   	Entity                          -> Definition
     "entity" ID "{" EntityElem* "}" -> Entity {cons("Entity")}
-    Property                        -> EntityElem
+    Property                        -> EntityElem 
     ID ":" Type                     -> Property {cons("Property")}
     
   sorts Type

Modified: spoofax-contrib/lwc11/trunk/test/blog.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/test/blog.lwc	Thu Oct 14 11:10:42 2010	(r21293)
+++ spoofax-contrib/lwc11/trunk/test/blog.lwc	Thu Oct 14 21:57:04 2010	(r21294)
@@ -3,11 +3,17 @@
 //imports users 
 
 entity User {} 
+
+entity Foo 
+	  bla : String
+      bar : Int
+
   
 entity Blog {  
-  post     : BlogPost
+  post     : BlogPost   
   author   : User  
-  audience : User    
+  audience : User  adlasdf 
+  ljlasdf   
   author   : User 
   
   comment(c : String) { post.comment(c); }

From E.Visser at tudelft.nl  Thu Oct 14 23:58:34 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Thu, 14 Oct 2010 21:58:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21295 -
	spoofax-contrib/lwc11/trunk/lib
Message-ID: <201010142158.o9ELwYn2014234@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Thu Oct 14 21:58:34 2010
New Revision: 21295
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21295&sc=1

Log:


Modified:
   spoofax-contrib/lwc11/trunk/lib/namespace.str

Modified: spoofax-contrib/lwc11/trunk/lib/namespace.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lib/namespace.str	Thu Oct 14 21:57:04 2010	(r21294)
+++ spoofax-contrib/lwc11/trunk/lib/namespace.str	Thu Oct 14 21:58:34 2010	(r21295)
@@ -83,13 +83,13 @@
 	* @param namespace
 	* @type (a, b) -> b
 	*/
-	store-declaration(|namespace) :
+	map-declaration(|namespace) :
 		(x, d) -> d
 		where rules(
 			Declared:+ (namespace, x) -> d
 		)
 		
-	store-declaration = store-declaration(|<get-annotated-scope>)
+	map-declaration = map-declaration(|<get-annotated-scope>)
 	
 	/**
 	* stores the usage of a reference
@@ -252,7 +252,8 @@
 	get-all-declarations(|namespace) = 
 		<resolve-included> namespace => spaces ; 
 		all-keys-Declared ; 
-		filter(where( (id, !spaces) ; elem ) ; Declared)
+		filter(where( (id, !spaces) ; elem )) ;
+		mapconcat(bagof-Declared)
 	
 	get-all-declarations(s|namespace) = project-all-declarations(where(s)|namespace) 
 

From E.Visser at tudelft.nl  Sat Oct 16 17:38:06 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Sat, 16 Oct 2010 15:38:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21296 - in
	spoofax-contrib/lwc11/trunk: editor entities expressions
	expressions/arithmetic functions lib lwc modules statements test
Message-ID: <201010161538.o9GFc62b020857@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Sat Oct 16 15:38:04 2010
New Revision: 21296
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21296&sc=1

Log:
plane productivity

Added:
   spoofax-contrib/lwc11/trunk/expressions/arithmetic/
   spoofax-contrib/lwc11/trunk/expressions/arithmetic/Arithmetic.sdf
   spoofax-contrib/lwc11/trunk/expressions/arithmetic/arithmetic-trans.str
Modified:
   spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-References.esv
   spoofax-contrib/lwc11/trunk/entities/entities-trans.str
   spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf
   spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str
   spoofax-contrib/lwc11/trunk/functions/Functions.sdf
   spoofax-contrib/lwc11/trunk/functions/functions-trans.str
   spoofax-contrib/lwc11/trunk/lib/namespace.str
   spoofax-contrib/lwc11/trunk/lwc/LWC.sdf
   spoofax-contrib/lwc11/trunk/lwc/lwc.str
   spoofax-contrib/lwc11/trunk/lwc/trans.str
   spoofax-contrib/lwc11/trunk/modules/Modules.sdf
   spoofax-contrib/lwc11/trunk/modules/modules-trans.str
   spoofax-contrib/lwc11/trunk/statements/Statements.sdf
   spoofax-contrib/lwc11/trunk/statements/statements-trans.str
   spoofax-contrib/lwc11/trunk/test/blog.lwc

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv	Sat Oct 16 15:38:04 2010	(r21296)
@@ -16,7 +16,13 @@
                                                                                                                                
   observer                  : editor-analyze                                                                                   
                                                                                                                                
-  //builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
-  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
-                                                                                                                               
+  //builder : "Generate Java code (for selection)"   
+  // = generate-java (openeditor) (realtime)   
+                  
+  builder : "Show abstract syntax (for selection)" 
+    = generate-aterm (openeditor) (realtime) (meta) (source)  
+ 
+  builder  : "Analysis" 
+    = analyze-builder (openeditor) (realtime) (meta) (source)  
+                                                                                                                              
   // on save: generate-java                                                                                                    
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-References.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-References.esv	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-References.esv	Sat Oct 16 15:38:04 2010	(r21296)
@@ -12,4 +12,5 @@
 references
                 
   reference _ : editor-resolve
-  hover _     : editor-hover
\ No newline at end of file
+  hover _     : editor-hover
+  

Modified: spoofax-contrib/lwc11/trunk/entities/entities-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/entities-trans.str	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/entities/entities-trans.str	Sat Oct 16 15:38:04 2010	(r21296)
@@ -11,12 +11,15 @@
   	
 // todo: how to deal with primitive types? => provide ffi mechanism!
 
-rules // entities
+rules // entity declarations
 	
   is-entity = ?Entity(_,_)
   
   name-of : 
-  	Entity(name, prop*) -> name
+  	Entity(name, elems) -> name
+  	
+  type-of :
+  	Entity(name, elems) -> Type(name)
 
   rename :
   	d at Entity(name, prop1*) -> d'
@@ -25,7 +28,7 @@
   store :
   	d at Entity(name, prop*) -> d
   	where 
-  	  <store-declaration(|Entities())> (name, d)
+  	  <map-declaration(|Entities())> (name, d)
   	
   editor-error:
     Entity(name, _) -> (name, $[Multiple declarations for entity [name]])
@@ -46,20 +49,23 @@
   	where not(<is-declared(|Entities())> name)
   	
   resolve :
-  	Type(name) -> <project-declaration(name-of | Entities())> name
+  	Type(name) -> <project-declaration(is-entity | Entities()); name-of> name
+  	
+  type-compatible :
+  	p@(type, type) -> p
   	
-rules // properties
+rules // property declarations
 	
   name-of: 
   	Property(name, type) -> name
 
   rename: 
-  	d at Property(name, type) -> <annotate-scope(name-of)> d 
+  	d at Property(name, type) -> <annotate-scope(is-entity; name-of)> d 
   
   store:
   	d at Property(name, type) -> d
-  	where <store-declaration(|Properties(<debug(!"get-scope: "); get-scope; debug(!" = ")> d))> (name, d)
+  	where <map-declaration(|Properties(<get-annotated-scope> d))> (name, d)
   
   editor-error:
     d at Property(name, _) -> (name, $[Multiple declarations for property [name]])
-    where not ( <get-unique-declaration(|Properties(<get-scope> d))> name )
+    where not ( <get-unique-declaration(|Properties(<get-annotated-scope> d))> name )

Modified: spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf	Sat Oct 16 15:38:04 2010	(r21296)
@@ -2,6 +2,7 @@
 
 imports common/Common
 imports entities/Entities
+imports expressions/arithmetic/Arithmetic
 
 exports
   sorts VarDecl VarRef
@@ -10,5 +11,5 @@
   	
   sorts Exp
   context-free syntax
-  	ID -> Exp {cons("VarRef")}
-  	
\ No newline at end of file
+  	ID          -> Exp {cons("VarRef")}
+  	"(" Exp ")" -> Exp {bracket}

Added: spoofax-contrib/lwc11/trunk/expressions/arithmetic/Arithmetic.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/expressions/arithmetic/Arithmetic.sdf	Sat Oct 16 15:38:04 2010	(r21296)
@@ -0,0 +1,15 @@
+module expressions/arithmetic/Arithmetic
+
+imports common/Common
+
+exports
+  context-free syntax
+  	INT         -> Exp {cons("Int")}
+  	STRING      -> Exp {cons("String")}
+  	Exp "+" Exp -> Exp {cons("Plus"),assoc}
+  	Exp "*" Exp -> Exp {cons("Times"),assoc}
+  context-free priorities
+  	Exp "*" Exp -> Exp
+  	>
+  	Exp "+" Exp -> Exp
+  	
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/expressions/arithmetic/arithmetic-trans.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/expressions/arithmetic/arithmetic-trans.str	Sat Oct 16 15:38:04 2010	(r21296)
@@ -0,0 +1,31 @@
+module expressions/arithmetic/arithmetic-trans
+
+imports include/LWC
+imports lib/namespace
+
+rules // integers and strings
+	
+  type-of :
+  	String(x) -> Type("String")
+  	
+  type-of :
+  	Int(x) -> Type("Int")
+   
+  type-of : 
+  	Plus(e1, e2) -> Type("Int")
+  	where <type-of> e1 => Type("Int");
+  	      <type-of> e2 => Type("Int")
+  	      
+  type-of : 
+  	Times(e1, e2) -> Type("Int")
+  	where <type-of> e1 => Type("Int");
+  	      <type-of> e2 => Type("Int")
+
+  editor-error :
+  	e at Plus(e1, e2) -> (e, $[Arguments should be of type Int])
+  	where <type-of> e1; <type-of> e2; not(<type-of>e)
+  	 	      
+  editor-error :
+  	e at Times(e1, e2) -> (e, $[Arguments should be of type Int])
+  	where <type-of> e1; <type-of> e2; not(<type-of>e)
+

Modified: spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str	Sat Oct 16 15:38:04 2010	(r21296)
@@ -1,9 +1,44 @@
 module expressions/expressions-trans
 
-rules
+imports include/LWC lwc/trans lib/namespace
+imports expressions/arithmetic/arithmetic-trans 
+
+signature
+  constructors
+  	Variables : Namespace
+
+rules // variable declaration
+	
+  type-of:
+  	VarDecl(name, type) -> type
+	
+  rename:
+  	d at VarDecl(name, type) -> VarDecl(name', type)
+  	where <rename-declaration(|Variables())> name => name'
+	
+  store:
+  	d at VarDecl(name, type) -> d
+  	where <map-declaration(|Variables())> (name, d)
+  	
+rules // variable reference
+	
+  hover:
+  	e -> $[Type: [<type-of; pp>e]] 
 	
-  // Call
-  
-  // MethodCall
-  
-  // FunctionCall
\ No newline at end of file
+  rename:
+  	VarRef(name) -> VarRef(<rename-reference(|Variables())>name)
+  	
+  resolve:
+  	VarRef(name) -> <get-declaration(|Variables())> name
+  	
+  store:
+  	e at VarRef(name) -> e
+  	where <store-reference(|Variables())> name
+  	
+  type-of:
+  	VarRef(name) -> type
+  	where <get-declaration(|Variables()); type-of> name => type
+  	
+  editor-error :
+  	VarRef(name) -> (name, $[Variable [name] not declared])
+  	where not( <is-declared(|Variables())> name )

Modified: spoofax-contrib/lwc11/trunk/functions/Functions.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/functions/Functions.sdf	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/functions/Functions.sdf	Sat Oct 16 15:38:04 2010	(r21296)
@@ -8,20 +8,21 @@
   sorts FunctionDef 
   context-free syntax
   	ID "(" {Param ","}* ")" ReturnType? Block -> FunctionDef {cons("FunctionDef")}
+  	ID "(" {Exp ","}* ")"                     -> FunctionCall {cons("FunctionCall")}
     FunctionDef                               -> Definition 
-  	QID "(" {Exp ","}* ")"                    -> FunctionCall {cons("FunctionCall")}
   	FunctionCall                              -> Exp
     
   sorts MethodDef 
   context-free syntax
   	ID "(" {Param ","}* ")" ReturnType? Block -> MethodDef {cons("MethodDef")}
+  	Exp "." ID "(" {Exp ","}* ")"             -> MethodCall {cons("MethodCall")}
     MethodDef                                 -> EntityElem
-  	Exp "." QID "(" {Exp ","}* ")"            -> MethodCall {cons("MethodCall")}
   	MethodCall                                -> Exp
 
   sorts Param ReturnType
   context-free syntax 	
-  	ID ":" Type -> Param {cons("Param")}
-  	":" Type    -> ReturnType {cons("ReturnType")}
-  	  	
+  	ID ":" Type      -> Param {cons("Param")}
+  	
+  	":" Type         -> ReturnType {cons("ReturnType")}
+  	"return" Exp ";" -> Statement {cons("Return")}
   
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/functions/functions-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/functions/functions-trans.str	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/functions/functions-trans.str	Sat Oct 16 15:38:04 2010	(r21296)
@@ -1,20 +1,36 @@
 module functions/functions-trans
 
 imports include/LWC lwc/trans lib/namespace entities/entities-trans
+imports expressions/expressions-trans
 
 signature
   constructors
-  	Functions : ID -> Namespace
-  	Methods   : ID -> Namespace
+  	Functions  : Namespace
+  	Methods    : Scope -> Namespace
+  	Returns    : Scope -> Namespace
+  	
+rules
+	
+  pp : Type(name) -> name
+	
+  pp-sig : (name, types) -> $[[name]([<pp-types>types])]
+  	
+  pp-types : [] -> ""
+  pp-types : [type] -> <pp> type
+  pp-types : [type1,type2|types] -> $[[<pp>type1],[<pp-types>[type2|types]]]
 
 rules // function definitions
 	
-  type-of:
+  type-of :
   	FunctionDef(name, params, Some(type), bl) -> type
   	
-  is-function-def = ?FunctionDef(_,_,_,_)
+  type-of :
+    FunctionDef(name, params, None(), bl) -> Type("Void")
+  	
+  is-function-def = 
+  	?FunctionDef(_,_,_,_)
   
-  name-of:
+  name-of :
   	FunctionDef(name, params, rt, bl) -> name
   	
   arg-types :
@@ -23,18 +39,41 @@
   signature-of :
   	FunctionDef(name, params, rt, bl) -> (name, <arg-types>)
   	
-  rename:
-  	d at FunctionDef(name, params, rt, bl) -> <annotate-scope(name-of)> d'
+  rename :
+  	d at FunctionDef(name, params, rt, bl) -> d'
   	where new-scope(<all(rename-all)> d => d')
   	
-  store:
+  store :
   	d at FunctionDef(name, params, rt, bl) -> d
-  	where <store-declaration(|Functions(<get-scope>d))> (<signature-of>d, d)
+  	where <debug(!"store: "); map-declaration(|Functions())> (<signature-of>d, d)
   	
-  editor-error:
+  editor-error :
     d at FunctionDef(name, params, rt, bl) -> (name, $[Multiple declarations for function [name]])
-    where not(<get-unique-declaration(|Functions(<get-scope> d))> <signature-of> d)
+    where not(<get-unique-declaration(|Functions())> <signature-of> d)
+    
+rules // function call
+	
+  signature-of :
+  	FunctionCall(name, args) -> (name, <map(type-of)>args)
+		
+  type-of :
+    call at FunctionCall(name, args) -> type
+    where debug(!"type-of funcall: ");<signature-of> call => sig; debug(!" signature: ");
+      <get-declaration(|Functions()); debug(!" declaration: ")> sig => decl;
+      <type-of> decl => type
+	
+  editor-error :
+  	call at FunctionCall(name, args) -> (name, $[No definition for function [<pp-sig>sig]])
+  	where 
+  	  debug(!"check call: ");
+  	  <signature-of> call => sig; debug(!" signature: ");
+  	  not( <get-declaration(|Functions()); debug(!" declaration: ")> sig )
 
+  resolve :
+  	call at FunctionCall(name, args) -> def
+  	where debug(!"resolve: "); 
+  	  <signature-of; debug(!" sig: "); get-declaration(|Functions()); debug(!" decl:")> call => def
+  		
 rules // method definitions
 	
   type-of: 
@@ -54,16 +93,19 @@
   	 
   rename:
   	d at MethodDef(name, params, rt, bl) -> <annotate-scope(is-entity; name-of)> d'
-  	where new-scope(<all(rename-all)> d => d')
+  	where 
+  	  new-scope(<all(rename-all)> d => d')
   	
   store: 
   	d at MethodDef(name, params, rt, bl) -> d
-  	where <store-declaration(|Methods(<get-scope>d))> (<signature-of>d, d)
+  	where 
+  	  <map-declaration(|Methods(<get-annotated-scope>d))> (<signature-of>d, d)
   	
   editor-error:
     d at MethodDef(name, params, rt, bl) -> (name, $[Multiple declarations for function [name]])
-    where not(<signature-of; get-unique-declaration(|Methods(<get-scope> d))> d)
-  	  	 
+    where 
+      not(<signature-of; get-unique-declaration(|Methods(<get-annotated-scope> d))> d)
+  	  	   		
 rules // method calls
 	   
   namespace-of:
@@ -75,18 +117,79 @@
   type-of:
   	call at MethodCall(e, name, args) -> type
   	where 
-  	  signature-of; get-declaration(|<namespace-of>call) => type
-
-rules // function calls
+  	  signature-of; get-declaration(|<namespace-of>call); debug(!"method call type: ") => type
+  	  
+  type-of:
+  	e at MethodCall(e1, name, args) -> type
+  	where <get-declaration(|Methods(<get-annotated-scope>e))> <signature-of> e => type
+  	
+  editor-error:
+  	e at MethodCall(e1,name,args) -> (name, $[No method [<pp-sig>sig] declared for [<pp>type]])
+  	where 
+  	  <type-of> e1 => type;
+  	  <signature-of> e => sig;
+  	  not(<type-of>e)
 	
-  signature-of:
-  	MethodCall(e, name, args) -> (<type-of> e, name, <map(type-of)>args) 
+  //signature-of:
+  	//MethodCall(e, name, args) -> (<type-of> e, name, <map(type-of)>args)
 	
-//  type-of:
-//  	MethodCall(e, name, args) -> type
-//  	where <get-declaration(|Functions(<get-scope>e))> <signature-of> e => type
-  	
 rules // parameters
 	
-  //rename : 
-  	//Param(name, type) -> Param(<rename-declaration(|Vars())> name, type)
\ No newline at end of file
+  // todo: unique parameters
+	
+  type-of:
+  	Param(name, type) -> type
+	
+  rename: 
+  	Param(name, type) -> <annotate-scope(id)> Param(<rename-declaration(|Variables())> name, type)
+  	
+  store:
+  	d at Param(name, type) -> d
+  	where <map-declaration(|Variables())> (name, d)
+  	
+rules // return type
+	
+  type-of :
+  	ReturnType(type) -> type
+	
+  rename :
+  	d at ReturnType(type) -> <annotate-scope(is-function-def)> d
+  
+  store :
+  	d at ReturnType(type) -> d
+  	where <map-declaration(|Returns(<get-annotated-scope>d))> ((), d)
+  	
+  return-type :
+  	scope -> <get-declaration(|Returns(scope))> ()
+
+  editor-error:
+  	d at ReturnType(type) -> (type, $[Return statement missing])
+  	where not( <is-referred(|Returns(<get-annotated-scope>d))> () )
+  	
+  // todo: check that all paths have a return statement
+  	 	  
+rules // return statement 
+	
+  rename :
+  	stat at Return(e) -> <annotate-scope(is-function-def)> Return(e')
+  	where <rename-all> e => e'
+  	  
+  store :
+  	stat at Return(e) -> stat
+  	where <store-reference(|Returns(<get-annotated-scope>stat))> ()
+  	
+  type-of :
+  	Return(e) -> <resolve; type-of>
+  	
+  resolve :
+  	Return(e) -> <get-annotated-scope; return-type>
+
+  editor-error :
+  	stat at Return(e) -> (e, $[Return should have type [<pp>type'], not [<pp>type]])
+  	where <type-of> e => type;
+  	      <type-of> stat => type';
+  		  not( <type-compatible> (type, type') )
+  		  
+  editor-error :
+  	stat at Return(e) -> (stat, $[No return statement expected])
+  	where not( <resolve> stat )

Modified: spoofax-contrib/lwc11/trunk/lib/namespace.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lib/namespace.str	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/lib/namespace.str	Sat Oct 16 15:38:04 2010	(r21296)
@@ -18,7 +18,7 @@
 	* @param renaming strategy s: a -> b
 	* @type a -> b
 	*/
-	new-scope(s) :
+	new-scope(s/*|namespace*/) :
 		x -> y
 		where
 			<newname> x => scope ;
@@ -26,6 +26,7 @@
 				rules (
 					CurrentScope: () -> scope
 					Scope:+ x -> scope
+					ScopeNS :+ namespace -> x
 				) ;
 				<s> x => y
 			|} 
@@ -127,7 +128,7 @@
 				
 strategies // access scopes
 	
-	get-scopes = all-keys-Scope
+	get-scopes = all-keys-Scope  // efficiency?
 	
 	get-scopes(s) = get-scopes ; filter(where(s))
 	
@@ -144,6 +145,7 @@
 strategies // access inclusions
 	
 	get-included-namespaces  = get-inclusions(bagof-Including)
+	
 	get-including-namespaces = get-inclusions(bagof-IncludedBy)
 	
 	get-inclusions(s) = ![<id>] ; get-inclusions(s|[]) ; reverse 

Modified: spoofax-contrib/lwc11/trunk/lwc/LWC.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/LWC.sdf	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/lwc/LWC.sdf	Sat Oct 16 15:38:04 2010	(r21296)
@@ -12,4 +12,4 @@
 
   context-free syntax
     Module  -> Start
-    
\ No newline at end of file
+  
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lwc/lwc.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/lwc.str	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/lwc/lwc.str	Sat Oct 16 15:38:04 2010	(r21296)
@@ -8,3 +8,4 @@
 imports functions/functions-trans
 imports modules/modules-trans
 imports statements/statements-trans
+

Modified: spoofax-contrib/lwc11/trunk/lwc/trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/trans.str	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/lwc/trans.str	Sat Oct 16 15:38:04 2010	(r21296)
@@ -12,6 +12,10 @@
   include/LWC
   lib/editor-common
   lib/editor-common.generated
+  
+strategies 
+	
+  pp = fail
 
 strategies // analysis
 
@@ -25,9 +29,20 @@
   propose   = fail
   store     = fail
   store-ref = fail
+  
+  type-of = fail
+  type-compatible = fail
 
 rules // editor
 	
+  analyze-builder :
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      <analyze> ast => ast';
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := ast' // we just return the input term
+	
   editor-analyze:
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
@@ -37,7 +52,7 @@
       <collect-all(editor-warning, conc)> ast' => warnings;
       <collect-all(editor-note,    conc)> ast' => notes
 		
-  editor-error   = fail
+  editor-error   = fail  
   editor-warning = fail
   editor-note    = fail
   
@@ -49,8 +64,17 @@
   
   editor-hover: 
   	(node, position, ast, path, project-path) -> str
-    where <hover> node => str
+    where <debug(!"hovering: "); hover; debug(!"  = ")> node => str
 
   hover = fail
+  
+  editor-complete:
+	(node, position, ast, path, project-path) -> proposals
+    where
+      editor-init ; 
+      <analyze> ast => ast' ;
+	  <oncetd(where(propose => proposals))> ast' <+
+	  <debug> ast ; ![] => proposals  	
 
+  propose = fail
   
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/modules/Modules.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/modules/Modules.sdf	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/modules/Modules.sdf	Sat Oct 16 15:38:04 2010	(r21296)
@@ -7,4 +7,3 @@
   context-free syntax
     "module" ID Definition* -> Module {cons("Module")}
     "imports" FILENAME      -> Definition {cons("Imports")}
-

Modified: spoofax-contrib/lwc11/trunk/modules/modules-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/modules/modules-trans.str	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/modules/modules-trans.str	Sat Oct 16 15:38:04 2010	(r21296)
@@ -1,5 +1,7 @@
 module modules/modules-trans
 
+imports include/LWC lwc/trans lib/namespace 
+
 imports 
   libstratego-lib
   include/LWC
@@ -10,29 +12,21 @@
 signature
   constructors
   	Module : Namespace
-  
-strategies
-	
-  record-declarations =
-  	alltd(record-declaration)
   	
 rules
 	
-  analyze =
-  	analyze-module
-	
-  analyze-module :
+  analyze :
   	(mod at Module(x, def*), path, project-path) -> mod'
   	where 
   	  rules( CurrentFile := path );
-  	  mod' := <record-declarations> mod
+  	  mod' := <rename-all> mod
   	  
-   record-declaration :
+  store :
    	 Module(x, def1*) -> mod
    	 where 
    	   def2* := <record-imported-declarations; record-declarations> def1*;
    	   mod := Module(x, def2*);
-   	   <store-declaration(|Module())> (x, (<CurrentFile>, mod))
+   	   <map-declaration(|Module())> (x, (<CurrentFile>, mod))
 
   declaration-of :
   	i at Imports(name) -> mod
@@ -41,11 +35,11 @@
   record-imported-declarations =
     alltd(import-module(record-declarations))
     
-  editor-resolve :
-    (i at Imports(name), position, ast, path, project-path) -> target
+  resolve :
+    Imports(name) -> target
     where
       debug(!"editor-resolve: ");
-      target := <get-module> i;
+      target := <get-module> name;
       debug(!"  module: ")
       
 rules // reading module from file

Modified: spoofax-contrib/lwc11/trunk/statements/Statements.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/statements/Statements.sdf	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/statements/Statements.sdf	Sat Oct 16 15:38:04 2010	(r21296)
@@ -9,4 +9,4 @@
   	"{" Statement* "}" -> Block {cons("Block")}
   	Block              -> Statement
   	VarDecl            -> Statement
-  	Exp ";"            -> Statement {cons("Statement")}
\ No newline at end of file
+  	Exp ";"            -> Statement {cons("Statement")} 
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/statements/statements-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/statements/statements-trans.str	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/statements/statements-trans.str	Sat Oct 16 15:38:04 2010	(r21296)
@@ -1,5 +1,16 @@
 module statements/statements-trans 
 
+imports include/LWC lib/namespace lwc/trans
+
 rules
 	
-   
\ No newline at end of file
+  rename:
+  	Block(stats) -> Block(stats')
+  	where new-scope(<rename-all>stats => stats')
+  	
+  editor-error:
+  	s at Assign(e1, e2) -> (s, $[Cannot assign [<pp>type2] to [<pp>type1]])
+  	where 
+  	  type1 := <type-of> e1;
+  	  type2 := <type-of> e2;
+  	  not( <type-compatible>(type1, type2))  
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/test/blog.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/test/blog.lwc	Thu Oct 14 21:58:34 2010	(r21295)
+++ spoofax-contrib/lwc11/trunk/test/blog.lwc	Sat Oct 16 15:38:04 2010	(r21296)
@@ -2,37 +2,58 @@
 
 //imports users 
 
-entity User {} 
-
-entity Foo 
-	  bla : String
-      bar : Int
-
+entity User {
+  name : String
+}
   
 entity Blog {  
   post     : BlogPost   
   author   : User  
-  audience : User  adlasdf 
-  ljlasdf   
-  author   : User 
-  
-  comment(c : String) { post.comment(c); }
+  audience : User    
+  author   : User   
+   
+  comment(c : String) { 
+  	post.title;
+  	post.comment(c); // method call on property
+  }
+}
+ 
+comment(blog : Blog, c : String, d : String) { 
+  var x : Int; 
+  //var y : Int;
+  var z : String; // z is not used -> warning
+  { 
+  	var y : String; 
+    blog.comment(c); 
+    y + 1; // type error: local y is a String
+  }  
+  x := ""; // cannot assign String to Int
+  comment(blog, c, x + 0);  // resolve to function def
+  comment(blog, c, x + 0 + y);  // y not declared
 }
 
-comment(blog : Blog, c : String) { }
+comment2(blog : Blog, c : String, i : Int) {  
+  comment(blog,c,i);
+  comment(blog, c, "", 4) + 4; 
+}
+
+comment(blog : Blog, c : String, i : Int) { 
+  comment2(blog,c,i);
+}
  
 entity BlogPost {
   blog    : Blog
-  author  : Usr  
+  title   : String
+  author  : User   
   body    : String 
   created : DateTime
   
-  comment(c : String) {}
+  comment3(c : String) {}
 }
 
-entity URL {
-  
-}
+entity String { }
+entity DateTime { }
+entity Int { }
 
 entity URL {
   location : String

From E.Visser at tudelft.nl  Sun Oct 17 17:44:03 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Sun, 17 Oct 2010 15:44:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21297 - in
	spoofax-contrib/lwc11/trunk: editor entities
	entities/properties functions functions/methods lib lwc modules test
Message-ID: <201010171544.o9HFi38i009268@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Sun Oct 17 15:43:52 2010
New Revision: 21297
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21297&sc=1

Log:


Added:
   spoofax-contrib/lwc11/trunk/entities/properties/
   spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf
   spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str
   spoofax-contrib/lwc11/trunk/functions/methods/
   spoofax-contrib/lwc11/trunk/functions/methods/Methods.sdf
   spoofax-contrib/lwc11/trunk/functions/methods/methods-trans.str
   spoofax-contrib/lwc11/trunk/test/entities.lwc
   spoofax-contrib/lwc11/trunk/test/entitiesA.lwc
   spoofax-contrib/lwc11/trunk/test/entitiesB.lwc
   spoofax-contrib/lwc11/trunk/test/functions.lwc
   spoofax-contrib/lwc11/trunk/test/imports.lwc
   spoofax-contrib/lwc11/trunk/test/module.lwc
   spoofax-contrib/lwc11/trunk/test/moduleA.lwc
   spoofax-contrib/lwc11/trunk/test/moduleB.lwc
   spoofax-contrib/lwc11/trunk/test/moduleC.lwc
   spoofax-contrib/lwc11/trunk/test/return.lwc
   spoofax-contrib/lwc11/trunk/test/thistest.lwc
Modified:
   spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
   spoofax-contrib/lwc11/trunk/entities/Entities.sdf
   spoofax-contrib/lwc11/trunk/entities/entities-trans.str
   spoofax-contrib/lwc11/trunk/entities/generate.str
   spoofax-contrib/lwc11/trunk/functions/Functions.sdf
   spoofax-contrib/lwc11/trunk/functions/functions-trans.str
   spoofax-contrib/lwc11/trunk/lib/editor-common.str
   spoofax-contrib/lwc11/trunk/lib/namespace.str
   spoofax-contrib/lwc11/trunk/lwc/LWC.sdf
   spoofax-contrib/lwc11/trunk/lwc/trans.str
   spoofax-contrib/lwc11/trunk/modules/modules-trans.str
   spoofax-contrib/lwc11/trunk/test/blog.lwc

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Builders.esv	Sun Oct 17 15:43:52 2010	(r21297)
@@ -16,8 +16,8 @@
                                                                                                                                
   observer                  : editor-analyze                                                                                   
                                                                                                                                
-  //builder : "Generate Java code (for selection)"   
-  // = generate-java (openeditor) (realtime)   
+  builder : "Generate Java code (for selection)"   
+   = generate-java (openeditor) (realtime)   
                   
   builder : "Show abstract syntax (for selection)" 
     = generate-aterm (openeditor) (realtime) (meta) (source)  

Modified: spoofax-contrib/lwc11/trunk/entities/Entities.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/Entities.sdf	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/entities/Entities.sdf	Sun Oct 17 15:43:52 2010	(r21297)
@@ -1,15 +1,13 @@
 module entities/Entities
 
 imports common/Common
+imports entities/properties/Properties
 
 exports
-  sorts Entity Property Type  
+  sorts Entity EntityElem Type  
   context-free syntax 
   	Entity                          -> Definition
     "entity" ID "{" EntityElem* "}" -> Entity {cons("Entity")}
-    Property                        -> EntityElem 
-    ID ":" Type                     -> Property {cons("Property")}
-    
-  sorts Type
-  context-free syntax
-    QID -> Type {cons("Type")}     
\ No newline at end of file
+    QID                             -> Type {cons("Type")}
+    "this"                          -> Exp {cons("This")}
+  	"this"                          -> ID {reject}

Modified: spoofax-contrib/lwc11/trunk/entities/entities-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/entities-trans.str	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/entities/entities-trans.str	Sun Oct 17 15:43:52 2010	(r21297)
@@ -1,16 +1,13 @@
 module entities/entities-trans
 
-imports include/LWC lwc/trans lib/namespace
+imports include/LWC lwc/trans lib/namespace lib/editor-common.generated
+imports entities/generate
+imports entities/properties/properties-trans
   
-        // todo: imports entities/Entities 
- 
 signature 
   constructors
   	Entities   : Namespace
-  	Properties : String -> Namespace
   	
-// todo: how to deal with primitive types? => provide ffi mechanism!
-
 rules // entity declarations
 	
   is-entity = ?Entity(_,_)
@@ -23,12 +20,11 @@
 
   rename :
   	d at Entity(name, prop1*) -> d'
-  	where new-scope(<all(rename-all)> d => d')
+  	where new-scope( <all(rename-all)> d => d' )
   	
   store :
   	d at Entity(name, prop*) -> d
-  	where 
-  	  <map-declaration(|Entities())> (name, d)
+  	where <map-declaration(|Entities())> (name, d)
   	
   editor-error:
     Entity(name, _) -> (name, $[Multiple declarations for entity [name]])
@@ -37,7 +33,7 @@
   editor-warning:
   	Entity(name, _) -> (name, $[Entity [name] is never used])
   	where not( <is-referred(|Entities())> name )
-    
+  	    
 rules // types
 	
   store :
@@ -49,23 +45,24 @@
   	where not(<is-declared(|Entities())> name)
   	
   resolve :
-  	Type(name) -> <project-declaration(is-entity | Entities()); name-of> name
+  	Type(name) -> d
+  	where <project-declaration(is-entity | Entities()); name-of> name => d
   	
   type-compatible :
   	p@(type, type) -> p
   	
-rules // property declarations
+  propose :
+  	type at Type(COMPLETION(_)) -> proposals
+  	where <project-all-declarations(?Entity(<id>,_)|Entities())> type => proposals
+  		
+rules // this
+	
+  rename :
+  	e at This() -> <annotate-scope(is-entity; name-of)> e
 	
-  name-of: 
-  	Property(name, type) -> name
+  type-of :
+  	This() -> Type(<get-annotated-scope>)
+  		
 
-  rename: 
-  	d at Property(name, type) -> <annotate-scope(is-entity; name-of)> d 
-  
-  store:
-  	d at Property(name, type) -> d
-  	where <map-declaration(|Properties(<get-annotated-scope> d))> (name, d)
-  
-  editor-error:
-    d at Property(name, _) -> (name, $[Multiple declarations for property [name]])
-    where not ( <get-unique-declaration(|Properties(<get-annotated-scope> d))> name )
+   	       
+   	       
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/entities/generate.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/generate.str	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/entities/generate.str	Sun Oct 17 15:43:52 2010	(r21297)
@@ -8,6 +8,13 @@
   lib/editor-common.generated
 
 rules
+	
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected 
+
 
   to-java:
     Module(x, d*) ->
@@ -16,7 +23,7 @@
        [d'*]
      ]
     with
-      d'* := <to-java> d*
+      d'* := <collect(to-java)> d*
   
   to-java:
     Entity(x, p*) ->

Added: spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,10 @@
+module entities/Entities
+
+imports common/Common
+
+exports
+  sorts Property 
+  context-free syntax
+    Property    -> EntityElem 
+    ID ":" Type -> Property {cons("Property")}
+  	Exp "." ID  -> Exp {cons("PropertyAccess")}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,41 @@
+module entities/properties/properties-trans
+
+imports include/LWC lwc/trans lib/namespace lib/editor-common.generated
+  
+imports entities/entities-trans
+
+signature 
+  constructors
+  	Entities   : Namespace
+  	Properties : String -> Namespace
+  	
+rules // property declarations
+	
+  name-of: 
+  	Property(name, type) -> name
+  	
+  type-of :
+  	Property(name, type) -> type
+
+  rename: 
+  	d at Property(name, type) -> <annotate-scope(is-entity; name-of)> d 
+  
+  store:
+  	d at Property(name, type) -> d
+  	where <map-declaration(|Properties(<get-annotated-scope> d))> (name, d)
+  
+  editor-error:
+    d at Property(name, _) -> (name, $[Multiple declarations for property [name]])
+    where not ( <get-unique-declaration(|Properties(<get-annotated-scope> d))> name )
+
+rules // property access
+	
+   type-of :
+   	 PropertyAccess(e, name) -> <type-of> d
+   	 where <type-of> e => type;  
+   	       <get-declaration(|Properties(<resolve> type))> name => d
+   	 
+   editor-error :
+   	 e at PropertyAccess(e', name) -> (name, $[[type] does not have a property [name]])
+   	 where <type-of> e' => type; not( <type-of> e )
+ 
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/functions/Functions.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/functions/Functions.sdf	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/functions/Functions.sdf	Sun Oct 17 15:43:52 2010	(r21297)
@@ -12,13 +12,6 @@
     FunctionDef                               -> Definition 
   	FunctionCall                              -> Exp
     
-  sorts MethodDef 
-  context-free syntax
-  	ID "(" {Param ","}* ")" ReturnType? Block -> MethodDef {cons("MethodDef")}
-  	Exp "." ID "(" {Exp ","}* ")"             -> MethodCall {cons("MethodCall")}
-    MethodDef                                 -> EntityElem
-  	MethodCall                                -> Exp
-
   sorts Param ReturnType
   context-free syntax 	
   	ID ":" Type      -> Param {cons("Param")}

Modified: spoofax-contrib/lwc11/trunk/functions/functions-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/functions/functions-trans.str	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/functions/functions-trans.str	Sun Oct 17 15:43:52 2010	(r21297)
@@ -6,7 +6,6 @@
 signature
   constructors
   	Functions  : Namespace
-  	Methods    : Scope -> Namespace
   	Returns    : Scope -> Namespace
   	
 rules
@@ -66,73 +65,13 @@
   	call at FunctionCall(name, args) -> (name, $[No definition for function [<pp-sig>sig]])
   	where 
   	  debug(!"check call: ");
-  	  <signature-of> call => sig; debug(!" signature: ");
-  	  not( <get-declaration(|Functions()); debug(!" declaration: ")> sig )
+  	  <signature-of> call => sig; 
+  	  not( <get-declaration(|Functions())> sig )
 
   resolve :
   	call at FunctionCall(name, args) -> def
-  	where debug(!"resolve: "); 
-  	  <signature-of; debug(!" sig: "); get-declaration(|Functions()); debug(!" decl:")> call => def
+  	where <signature-of; get-declaration(|Functions())> call => def
   		
-rules // method definitions
-	
-  type-of: 
-  	MethodDef(name, params, Some(type), bl) -> type
-  	
-  is-function-def = 
-  	?MethodDef(_,_,_,_) 
-  
-  name-of: 
-  	MethodDef(name, params, rt, bl) -> name
-  	
-  arg-types :
-  	MethodDef(name, params, rt, bl) -> <map(?Param(_,<id>))> params
-  	
-  signature-of :
-  	MethodDef(name, params, rt, bl) -> (name, <arg-types>)
-  	 
-  rename:
-  	d at MethodDef(name, params, rt, bl) -> <annotate-scope(is-entity; name-of)> d'
-  	where 
-  	  new-scope(<all(rename-all)> d => d')
-  	
-  store: 
-  	d at MethodDef(name, params, rt, bl) -> d
-  	where 
-  	  <map-declaration(|Methods(<get-annotated-scope>d))> (<signature-of>d, d)
-  	
-  editor-error:
-    d at MethodDef(name, params, rt, bl) -> (name, $[Multiple declarations for function [name]])
-    where 
-      not(<signature-of; get-unique-declaration(|Methods(<get-annotated-scope> d))> d)
-  	  	   		
-rules // method calls
-	   
-  namespace-of:
-  	MethodCall(e, name, args) -> Methods(<type-of; name-of> e)
-  	
-  signature-of:
-  	MethodCall(e, name, args) -> (name, <map(type-of)>args)
-	 
-  type-of:
-  	call at MethodCall(e, name, args) -> type
-  	where 
-  	  signature-of; get-declaration(|<namespace-of>call); debug(!"method call type: ") => type
-  	  
-  type-of:
-  	e at MethodCall(e1, name, args) -> type
-  	where <get-declaration(|Methods(<get-annotated-scope>e))> <signature-of> e => type
-  	
-  editor-error:
-  	e at MethodCall(e1,name,args) -> (name, $[No method [<pp-sig>sig] declared for [<pp>type]])
-  	where 
-  	  <type-of> e1 => type;
-  	  <signature-of> e => sig;
-  	  not(<type-of>e)
-	
-  //signature-of:
-  	//MethodCall(e, name, args) -> (<type-of> e, name, <map(type-of)>args)
-	
 rules // parameters
 	
   // todo: unique parameters

Added: spoofax-contrib/lwc11/trunk/functions/methods/Methods.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/functions/methods/Methods.sdf	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,11 @@
+module functions/methods/Methods
+
+imports functions/Functions
+
+exports
+  sorts MethodDef 
+  context-free syntax
+  	ID "(" {Param ","}* ")" ReturnType? Block -> MethodDef {cons("MethodDef")}
+  	Exp "." ID "(" {Exp ","}* ")"             -> MethodCall {cons("MethodCall")}
+    MethodDef                                 -> EntityElem
+  	MethodCall                                -> Exp

Added: spoofax-contrib/lwc11/trunk/functions/methods/methods-trans.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/functions/methods/methods-trans.str	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,70 @@
+module functions/methods/methods-trans
+
+imports include/LWC lwc/trans lib/namespace entities/entities-trans
+imports expressions/expressions-trans
+imports functions/functions-trans
+
+signature
+  constructors
+  	Methods    : Scope -> Namespace
+  
+
+rules // method definitions
+	
+  type-of: 
+  	MethodDef(name, params, Some(type), bl) -> type
+  	
+  is-function-def = 
+  	?MethodDef(_,_,_,_) 
+  
+  name-of: 
+  	MethodDef(name, params, rt, bl) -> name
+  	
+  arg-types :
+  	MethodDef(name, params, rt, bl) -> <map(?Param(_,<id>))> params
+  	
+  signature-of :
+  	MethodDef(name, params, rt, bl) -> (name, <arg-types>)
+  	 
+  rename:
+  	d at MethodDef(name, params, rt, bl) -> <annotate-scope(is-entity; name-of)> d'
+  	where 
+  	  new-scope(<all(rename-all)> d => d')
+  	
+  store: 
+  	d at MethodDef(name, params, rt, bl) -> d
+  	where 
+  	  <map-declaration(|Methods(<get-annotated-scope>d))> (<signature-of>d, d)
+  	
+  editor-error:
+    d at MethodDef(name, params, rt, bl) -> (name, $[Multiple declarations for function [name]])
+    where 
+      not(<signature-of; get-unique-declaration(|Methods(<get-annotated-scope> d))> d)
+  	  	   		
+rules // method calls
+	   
+  namespace-of:
+  	MethodCall(e, name, args) -> Methods(<type-of; name-of> e)
+  	
+  signature-of:
+  	MethodCall(e, name, args) -> (name, <map(type-of)>args)
+	 
+  type-of:
+  	call at MethodCall(e, name, args) -> type
+  	where 
+  	  signature-of; get-declaration(|<namespace-of>call); debug(!"method call type: ") => type
+  	  
+  type-of:
+  	e at MethodCall(e1, name, args) -> type
+  	where <get-declaration(|Methods(<get-annotated-scope>e))> <signature-of> e => type
+  	
+  editor-error:
+  	e at MethodCall(e1,name,args) -> (name, $[No method [<pp-sig>sig] declared for [<pp>type]])
+  	where 
+  	  <type-of> e1 => type;
+  	  <signature-of> e => sig;
+  	  not(<type-of>e)
+	
+  //signature-of:
+  	//MethodCall(e, name, args) -> (<type-of> e, name, <map(type-of)>args)
+	
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lib/editor-common.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lib/editor-common.str	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/lib/editor-common.str	Sun Oct 17 15:43:52 2010	(r21297)
@@ -4,22 +4,79 @@
 
 rules
 	
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+	
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := selected // we just return the input term
+      
+  // todo: reusable resolve strategy for imports
+      
+  // todo: factor out parse caching strategy
+  
+
+  parse-lwc-file(|path) =
+  	resolve-import(|path); parse-lwc-file
+
+  parse-lwc-file-cached =
+    parse-lwc-file-cached(|<CurrentFile>)
+  	  	
+  parse-lwc-file-cached(|path) =
+  	parse-file-cached(resolve-import(|path), parse-lwc-file)
+
+  resolve-import(|modpath) :
+  	x -> $[[<project-path>]/[<dirname> modpath]/[x].lwc]
+  	// lookup module in same module as importing module
+  	// todo: this can be more sophisticated involving search paths
+  	  
+  parse-file-cached(resolve-path, parse-file) :
+  	name -> ast
+  	where
+  	  path       := <resolve-path> name;
+      cache-path := <import-cache-path> path;
+      debug(!"  cache-path: ");
+      if <is-newer> (cache-path, path) then
+        ast := <ReadFromFile> cache-path
+      else
+        ast := <parse-file> path;
+        if <file-exists> path then
+          // Only cache if on filesystem (e.g., ignore libstratego-lib)
+          <WriteToBinaryFile> (cache-path, ast)
+        end
+      end
+
+  open-import-lwc(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+      	path := <resolve-path> import;
+        if not(<IsImported> path) then
+          debug(!"  not imported: ");
+          rules( IsImported: path );
+          ast := <parse-file-cached(resolve-path, parse-file)> import;
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> ast
+          |}
+        else
+          debug(!"  already imported: ")
+        end
+      end
 
+/*
   open-import-lwc(resolve-path, parse-file, record-declarations):
     import -> import
     where
       if not(!import => COMPLETION(_)) then
         path       := <resolve-path> import;
         cache-path := <import-cache-path> path;
-        debug(!"cache-path: ");
+        debug(!"  cache-path: ");
         if not(<IsImported> path) then
-          debug(!"not imported: ");
+          debug(!"  not imported: ");
           rules(
             IsImported: path
           );
@@ -37,6 +94,7 @@
             <record-declarations> file
           |}
         else
-          debug(!"already imported: ")
+          debug(!"  already imported: ")
         end
-      end
\ No newline at end of file
+      end
+*/
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lib/namespace.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lib/namespace.str	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/lib/namespace.str	Sun Oct 17 15:43:52 2010	(r21297)
@@ -9,6 +9,8 @@
 	
 rules // scoped renaming
 	
+	// todo: new-scope should have namespace as parameter
+	
 	/**
 	* executes the renaming strategy s in a new scope
 	* 
@@ -18,7 +20,7 @@
 	* @param renaming strategy s: a -> b
 	* @type a -> b
 	*/
-	new-scope(s/*|namespace*/) :
+	new-scope(s) :
 		x -> y
 		where
 			<newname> x => scope ;
@@ -26,10 +28,9 @@
 				rules (
 					CurrentScope: () -> scope
 					Scope:+ x -> scope
-					ScopeNS :+ namespace -> x
 				) ;
 				<s> x => y
-			|} 
+			|}
 			
 	/**
 	* annotates the current term with a fresh name
@@ -75,6 +76,8 @@
 rules // store declarations and references
 	
 	new-analysis(s) = {| Declared, Referred, Including, IncludedBy: s |}
+	
+	//CurrentFile = fail
 		
 	/**
 	* stores a mapping from a name to a declaration
@@ -86,9 +89,12 @@
 	*/
 	map-declaration(|namespace) :
 		(x, d) -> d
-		where rules(
-			Declared:+ (namespace, x) -> d
-		)
+		where 
+		  //file := <CurrentFile>;
+		  rules(
+			//Declared :+ (namespace, x) -> (file, d)
+			Declared :+ (namespace, x) -> d
+		  )
 		
 	map-declaration = map-declaration(|<get-annotated-scope>)
 	
@@ -236,7 +242,9 @@
 	* 
 	* @type a -> c
 	*/
-	project-declaration(s|namespace) = get-declarations(|namespace) ; fetch-elem(s) 
+	project-declaration(s|namespace) = debug(!"project-declarations: ");
+	  get-declarations(|namespace) ; debug(!" declarations: ") ;
+	  fetch-elem(s) 
 
 	/**
 	* maps a name to the projections of its declarations

Modified: spoofax-contrib/lwc11/trunk/lwc/LWC.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/LWC.sdf	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/lwc/LWC.sdf	Sun Oct 17 15:43:52 2010	(r21297)
@@ -12,4 +12,4 @@
 
   context-free syntax
     Module  -> Start
-  
\ No newline at end of file
+     
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/lwc/trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/trans.str	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/lwc/trans.str	Sun Oct 17 15:43:52 2010	(r21297)
@@ -34,11 +34,20 @@
   type-compatible = fail
 
 rules // editor
+	  
+  importing(|imp) = /*{| Imported : */ rules(Imported : imp) /* ; s |} */
+	
+  when-not-imported(s) :
+  	imp -> imp
+  	where {| Imported : if not( <Imported> imp ) then rules(Imported : imp) else debug(!"already imported: ") end |} 
+
 	
   analyze-builder :
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       editor-init;
+      rules( CurrentFile := path);
+      importing(|Imports(<base-filename; remove-extension> path));
       <analyze> ast => ast';
       filename := <guarantee-extension(|"aterm")> path;
       result   := ast' // we just return the input term
@@ -47,6 +56,7 @@
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
+      rules( CurrentFile := path );
 	  <analyze> ast => ast';
       <collect-all(editor-error,   conc)> ast' => errors;
       <collect-all(editor-warning, conc)> ast' => warnings;
@@ -58,8 +68,12 @@
   
   editor-resolve: 
     (node, position, ast, path, project-path) -> target
-    where <resolve> node => target 
-    
+    where 
+      editor-init; 
+      rules( CurrentFile := path );
+	  <analyze> ast => ast';
+      <resolve> node => target 
+  
   resolve = fail
   
   editor-hover: 
@@ -72,6 +86,7 @@
 	(node, position, ast, path, project-path) -> proposals
     where
       editor-init ; 
+      rules( CurrentFile := path );
       <analyze> ast => ast' ;
 	  <oncetd(where(propose => proposals))> ast' <+
 	  <debug> ast ; ![] => proposals  	

Modified: spoofax-contrib/lwc11/trunk/modules/modules-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/modules/modules-trans.str	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/modules/modules-trans.str	Sun Oct 17 15:43:52 2010	(r21297)
@@ -1,61 +1,47 @@
 module modules/modules-trans
 
-imports include/LWC lwc/trans lib/namespace 
+imports libstratego-lib include/LWC lwc/trans lib/namespace lib/editor-common
 
-imports 
-  libstratego-lib
-  include/LWC
-  lib/editor-common.generated
-  lib/editor-common
-  lib/namespace
-  
 signature
   constructors
-  	Module : Namespace
+  	Module : Namespace 
   	
-rules
+rules // modules
 	
-  analyze :
-  	(mod at Module(x, def*), path, project-path) -> mod'
-  	where 
-  	  rules( CurrentFile := path );
-  	  mod' := <rename-all> mod
-  	  
+  rename :
+  	Module(name, defs) -> Module(name, defs')
+  	where <rename-all> defs => defs' 
+	  
   store :
-   	 Module(x, def1*) -> mod
-   	 where 
-   	   def2* := <record-imported-declarations; record-declarations> def1*;
-   	   mod := Module(x, def2*);
-   	   <map-declaration(|Module())> (x, (<CurrentFile>, mod))
-
-  declaration-of :
-  	i at Imports(name) -> mod
-  	where <import-module(?mod)> i
-  	
-  record-imported-declarations =
-    alltd(import-module(record-declarations))
-    
-  resolve :
-    Imports(name) -> target
-    where
-      debug(!"editor-resolve: ");
-      target := <get-module> name;
-      debug(!"  module: ")
-      
-rules // reading module from file
-	
+   	mod at Module(name, defs) -> mod
+   	where <map-declaration(|Module())> (name, (<CurrentFile>, mod))
+   	   
+   editor-error :
+   	Module(name, defs) -> (name, $[Filename does not correspond to module name])
+   	where <get-declaration(|Module())> name => (file, mod)
+    where not( <base-filename; remove-extension> file => name ; <has-extension(|"lwc")> file )
+   	   
+rules // imports
+		
   get-module :
-  	Imports(name) -> mod
-  	where import-module(?mod)
+  	Imports(name) -> ast
+  	where <parse-lwc-file(|<CurrentFile>)> name => ast
+  	
+  rename :
+  	imp at Imports(name) -> imp 
+  	where  <get-module; rename-all> imp 
+  	
+  store :
+  	imp at Imports(name) -> imp
+  	where  <get-module; store-all> imp 
 
-  import-module(transform-declarations) : 
-  	i at Imports(x) -> i
-  	where 
-  	  CurrentFile; debug(!" filename: ");
-  	  <open-import-lwc(debug(!"resolve this: "); resolve-import(|<CurrentFile>); debug(!"resolved: "), debug(!" parse this"); parse-lwc-file; debug(!"  parsed: "), debug(!"  transform declarations: "); transform-declarations)> $[[x].lwc]
-  	  
-  resolve-import(|modpath) :
-  	x -> $[[<project-path>]/[<dirname> modpath]/[x]]
-  	// lookup module in same module as importing module
-  	// todo: this can be more sophisticated involving search paths
-  
+  desugar :
+  	imp at Imports(name) -> imp
+  	where <get-module; desugar-all> imp
+  	    
+  resolve :
+    Imports(name) -> <get-module>
+      	  
+  editor-error :
+  	imp at Imports(name) -> (name, $[Module does not exist])
+  	where not( <get-module> imp )

Modified: spoofax-contrib/lwc11/trunk/test/blog.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/test/blog.lwc	Sat Oct 16 15:38:04 2010	(r21296)
+++ spoofax-contrib/lwc11/trunk/test/blog.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -7,17 +7,17 @@
 }
   
 entity Blog {  
-  post     : BlogPost   
+  post     : BlogPost    
   author   : User  
   audience : User    
   author   : User   
    
   comment(c : String) { 
-  	post.title;
-  	post.comment(c); // method call on property
+  	this.post.title; 
+  	this.post.comment(c); // method call on property
   }
 }
- 
+  
 comment(blog : Blog, c : String, d : String) { 
   var x : Int; 
   //var y : Int;

Added: spoofax-contrib/lwc11/trunk/test/entities.lwc
==============================================================================

Added: spoofax-contrib/lwc11/trunk/test/entitiesA.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/entitiesA.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,11 @@
+module entitiesA
+
+imports entitiesB
+
+entity A { }
+
+entity A { }
+
+entity B { }
+
+entity C { }
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/entitiesB.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/entitiesB.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,4 @@
+module entitiesB
+
+entity C {
+}

Added: spoofax-contrib/lwc11/trunk/test/functions.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/functions.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,17 @@
+module functions
+
+foo(x : Int) {
+  return 3 + x; // function has no return type
+}
+
+bar(x : Int) : Int { // this is fine
+  return 3 + x;  
+}
+ 
+baz(x : Int) : Int {
+  foo(x); 
+  x := bar(x + 1) + "";  
+  // function should have return statement
+}
+
+entity Int{}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/imports.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/imports.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,14 @@
+module imports
+
+imports module  
+
+entity A{
+  b : B 
+  c : C 
+}      
+
+entity C {
+  a : A
+  b : C 
+} 
+             
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/module.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/module.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,14 @@
+module module
+
+entity B{
+  name : String
+  //a : A 
+} 
+
+entity A{ 
+  b : B    
+}   
+  
+       
+entity String{}     
+  
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/moduleA.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/moduleA.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,3 @@
+module moduleA
+
+imports moduleB  
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/moduleB.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/moduleB.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,4 @@
+module moduleB
+
+imports moduleC 
+imports moduleD 
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/moduleC.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/moduleC.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1 @@
+module moduleD
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/return.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/return.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,20 @@
+module functions
+
+bar(x : Int) : Int { // this is fine
+  return 3 + x;  
+}
+
+foo(x : Int) {
+  return 3 + x; // should not have return statement
+}
+
+boo(x : Int) : String { 
+  return 3 + x; // return statement should be consistent with return type
+}
+
+baz(x : Int, y : Int) : Int {   
+  // return statement missing
+}  
+
+entity Int {}
+entity String {}

Added: spoofax-contrib/lwc11/trunk/test/thistest.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/thistest.lwc	Sun Oct 17 15:43:52 2010	(r21297)
@@ -0,0 +1,19 @@
+module thistest
+
+entity A {
+  a : String
+  b : B
+  
+  test() {
+  	this.a := ""; 
+  }
+}
+
+entity B { 
+  a : A
+  test() {
+  	this.a.test();
+  }
+}
+
+entity String { }  
\ No newline at end of file

From E.Visser at tudelft.nl  Sun Oct 17 18:47:52 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Sun, 17 Oct 2010 16:47:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21298 - in
	spoofax-contrib/lwc11/trunk: entities/properties expressions
	functions lwc statements test
Message-ID: <201010171647.o9HGlqY3009928@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Sun Oct 17 16:47:48 2010
New Revision: 21298
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21298&sc=1

Log:


Modified:
   spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf
   spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str
   spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str
   spoofax-contrib/lwc11/trunk/functions/functions-trans.str
   spoofax-contrib/lwc11/trunk/lwc/trans.str
   spoofax-contrib/lwc11/trunk/statements/Statements.sdf
   spoofax-contrib/lwc11/trunk/test/functions.lwc

Modified: spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf	Sun Oct 17 15:43:52 2010	(r21297)
+++ spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf	Sun Oct 17 16:47:48 2010	(r21298)
@@ -7,4 +7,5 @@
   context-free syntax
     Property    -> EntityElem 
     ID ":" Type -> Property {cons("Property")}
-  	Exp "." ID  -> Exp {cons("PropertyAccess")}
\ No newline at end of file
+  	Exp "." ID  -> Exp {cons("PropertyAccess")}
+  	
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str	Sun Oct 17 15:43:52 2010	(r21297)
+++ spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str	Sun Oct 17 16:47:48 2010	(r21298)
@@ -32,10 +32,10 @@
 	
    type-of :
    	 PropertyAccess(e, name) -> <type-of> d
-   	 where <type-of> e => type;  
+   	 where debug(!"type-of property access: "); <type-of> e => type;  debug(!"  type of e:");
    	       <get-declaration(|Properties(<resolve> type))> name => d
+   	       ; debug(!"  declaration: ")
    	 
    editor-error :
-   	 e at PropertyAccess(e', name) -> (name, $[[type] does not have a property [name]])
+   	 e at PropertyAccess(e', name) -> (name, $[[<pp>type] does not have a property [name]])
    	 where <type-of> e' => type; not( <type-of> e )
- 
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str	Sun Oct 17 15:43:52 2010	(r21297)
+++ spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str	Sun Oct 17 16:47:48 2010	(r21298)
@@ -29,7 +29,7 @@
   	VarRef(name) -> VarRef(<rename-reference(|Variables())>name)
   	
   resolve:
-  	VarRef(name) -> <get-declaration(|Variables())> name
+  	VarRef(name) -> <debug(!"resolve: "); get-declaration(|Variables()); debug(!" declaration: ")> name
   	
   store:
   	e at VarRef(name) -> e
@@ -37,7 +37,8 @@
   	
   type-of:
   	VarRef(name) -> type
-  	where <get-declaration(|Variables()); type-of> name => type
+  	where debug(!"type-of: "); <resolve; debug(!"decls: "); type-of> name => type
+  	;debug(!"  type:")
   	
   editor-error :
   	VarRef(name) -> (name, $[Variable [name] not declared])

Modified: spoofax-contrib/lwc11/trunk/functions/functions-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/functions/functions-trans.str	Sun Oct 17 15:43:52 2010	(r21297)
+++ spoofax-contrib/lwc11/trunk/functions/functions-trans.str	Sun Oct 17 16:47:48 2010	(r21298)
@@ -57,16 +57,13 @@
 		
   type-of :
     call at FunctionCall(name, args) -> type
-    where debug(!"type-of funcall: ");<signature-of> call => sig; debug(!" signature: ");
-      <get-declaration(|Functions()); debug(!" declaration: ")> sig => decl;
+    where <signature-of> call => sig;
+      <get-declaration(|Functions())> sig => decl;
       <type-of> decl => type
 	
   editor-error :
   	call at FunctionCall(name, args) -> (name, $[No definition for function [<pp-sig>sig]])
-  	where 
-  	  debug(!"check call: ");
-  	  <signature-of> call => sig; 
-  	  not( <get-declaration(|Functions())> sig )
+  	where <signature-of> call => sig; not( <get-declaration(|Functions())> sig )
 
   resolve :
   	call at FunctionCall(name, args) -> def
@@ -74,8 +71,6 @@
   		
 rules // parameters
 	
-  // todo: unique parameters
-	
   type-of:
   	Param(name, type) -> type
 	
@@ -104,9 +99,7 @@
   editor-error:
   	d at ReturnType(type) -> (type, $[Return statement missing])
   	where not( <is-referred(|Returns(<get-annotated-scope>d))> () )
-  	
-  // todo: check that all paths have a return statement
-  	 	  
+  	  	 	  
 rules // return statement 
 	
   rename :

Modified: spoofax-contrib/lwc11/trunk/lwc/trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/trans.str	Sun Oct 17 15:43:52 2010	(r21297)
+++ spoofax-contrib/lwc11/trunk/lwc/trans.str	Sun Oct 17 16:47:48 2010	(r21298)
@@ -69,16 +69,13 @@
   editor-resolve: 
     (node, position, ast, path, project-path) -> target
     where 
-      editor-init; 
-      rules( CurrentFile := path );
-	  <analyze> ast => ast';
       <resolve> node => target 
   
   resolve = fail
   
   editor-hover: 
   	(node, position, ast, path, project-path) -> str
-    where <debug(!"hovering: "); hover; debug(!"  = ")> node => str
+    where <hover> node => str
 
   hover = fail
   

Modified: spoofax-contrib/lwc11/trunk/statements/Statements.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/statements/Statements.sdf	Sun Oct 17 15:43:52 2010	(r21297)
+++ spoofax-contrib/lwc11/trunk/statements/Statements.sdf	Sun Oct 17 16:47:48 2010	(r21298)
@@ -9,4 +9,8 @@
   	"{" Statement* "}" -> Block {cons("Block")}
   	Block              -> Statement
   	VarDecl            -> Statement
-  	Exp ";"            -> Statement {cons("Statement")} 
\ No newline at end of file
+  	Exp ";"            -> Statement {cons("Statement")} 
+  	
+  context-free syntax
+  	"if" "(" Exp ")" Block "else" Block -> Statement {cons("If")}
+  	"while" "(" Exp ")" Block           -> Statement {cons("While")}
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/test/functions.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/test/functions.lwc	Sun Oct 17 15:43:52 2010	(r21297)
+++ spoofax-contrib/lwc11/trunk/test/functions.lwc	Sun Oct 17 16:47:48 2010	(r21298)
@@ -1,5 +1,7 @@
 module functions
 
+imports primitives
+
 foo(x : Int) {
   return 3 + x; // function has no return type
 }

From L.C.L.Kats at tudelft.nl  Mon Oct 25 12:51:15 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 25 Oct 2010 10:51:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21299 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	services stratego
Message-ID: <201010251051.o9PApFwN028145@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Oct 25 10:51:14 2010
New Revision: 21299
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21299&sc=1

Log:
Spoofax/270: NullPointerException in StrategoAnalysisQueue

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	Sun Oct 17 16:47:48 2010	(r21298)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	Mon Oct 25 10:51:14 2010	(r21299)
@@ -213,6 +213,10 @@
 	 * @return the update job
 	 */
 	public UpdateJob queueAnalysis(IPath path, IProject project) {
+		if (path == null)
+			throw new IllegalArgumentException("path cannot be null");
+		if (project == null)
+			throw new IllegalArgumentException("project cannot be null");
 
 		StrategoObserverBackgroundUpdateJob job = new StrategoObserverBackgroundUpdateJob(path, project);
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Sun Oct 17 16:47:48 2010	(r21298)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Oct 25 10:51:14 2010	(r21299)
@@ -680,6 +680,7 @@
 			EditorIOAgent io = (EditorIOAgent) runtime.getIOAgent();
 			io.setWorkingDir(tryGetProjectPath(resource));
 			io.setProjectPath(tryGetProjectPath(resource));
+			io.setProject(resource.getProject());
 			io.setDescriptor(descriptor);
 		} catch (IOException e) {
 			Environment.logException("Could not set Stratego working directory", e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java	Sun Oct 17 16:47:48 2010	(r21298)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java	Mon Oct 25 10:51:14 2010	(r21299)
@@ -8,9 +8,7 @@
 import java.io.OutputStream;
 import java.io.Writer;
 import java.net.URI;
-import java.net.URISyntaxException;
 
-import org.eclipse.core.resources.IContainer;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
@@ -38,6 +36,8 @@
 
 	private String projectPath;
 	
+	private IProject project;
+	
 	private StrategoAnalysisJob job;
 	
 	public void setDescriptor(Descriptor descriptor) {
@@ -110,6 +110,10 @@
 		this.alwaysActivateConsole = alwaysShowConsole;
 	}
 
+	/**
+	 * Sets the path of the current project, if available.
+	 * Should be an OS path for compatibility.
+	 */
 	public void setProjectPath(String projectPath) {
 		this.projectPath = projectPath;
 	}
@@ -127,28 +131,14 @@
 	}
 	
 	/**
-	 * Find the IProject for this agent.
-	 * If no project is found for this agent, the given IPath is used.
-	 * @param file
+	 * Gets the IProject for this agent.
 	 */
 	public IProject getProject() {
-
-		IProject project = null;
-		try {
-			IContainer[] containers = 
-				ResourcesPlugin.getWorkspace().getRoot().findContainersForLocationURI(new URI("file://" + getProjectPath()));
-			for(IContainer container : containers) {
-				if (container instanceof IProject) {
-					project = (IProject)container;
-				}
-			}
-
-		} catch (URISyntaxException e) {
-			e.printStackTrace();
-		}
-		
 		return project;
-		
+	}
+	
+	public void setProject(IProject project) {
+		this.project = project;
 	}
 
 	public static IFile getFile(IContext env, String file) throws FileNotFoundException {

From L.C.L.Kats at tudelft.nl  Mon Oct 25 12:52:59 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 25 Oct 2010 10:52:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21300 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.aster
	org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.editors.pp org....
Message-ID: <201010251052.o9PAqx2S028498@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Oct 25 10:52:59 2010
New Revision: 21300
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21300&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml	Mon Oct 25 10:51:14 2010	(r21299)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml	Mon Oct 25 10:52:59 2010	(r21300)
@@ -153,9 +153,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	Mon Oct 25 10:51:14 2010	(r21299)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	Mon Oct 25 10:52:59 2010	(r21300)
@@ -153,9 +153,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml	Mon Oct 25 10:51:14 2010	(r21299)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml	Mon Oct 25 10:52:59 2010	(r21300)
@@ -153,9 +153,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml	Mon Oct 25 10:51:14 2010	(r21299)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml	Mon Oct 25 10:52:59 2010	(r21300)
@@ -153,9 +153,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Mon Oct 25 10:51:14 2010	(r21299)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Mon Oct 25 10:52:59 2010	(r21300)
@@ -153,9 +153,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Mon Oct 25 10:51:14 2010	(r21299)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Mon Oct 25 10:52:59 2010	(r21300)
@@ -68,7 +68,7 @@
     where
       not(<occurrences(?sort(_))> p => 1; <occurrences(?lit(_))> p => 0);
       if !a* => attrs(a'*) then
-        not(<one(term(default(appl(unquoted("cons" + "ast"), [id]))))> a'*);
+        not(<one(term(default(appl(unquoted("cons" + "ast"), [fun(quoted(id))]))))> a'*);
         not(<one(bracket() + reject())> a'*);
         not(!s; (sort("Keyword") + sort("\"Keyword\""))); 
         target := a*

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Mon Oct 25 10:51:14 2010	(r21299)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Mon Oct 25 10:52:59 2010	(r21300)
@@ -153,9 +153,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Mon Oct 25 10:51:14 2010	(r21299)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Mon Oct 25 10:52:59 2010	(r21300)
@@ -226,9 +226,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

From E.Visser at tudelft.nl  Mon Oct 25 14:26:31 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 25 Oct 2010 12:26:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21301 - in
	spoofax-contrib/lwc11/trunk: common editor entities
	entities/properties expressions expressions/arithmetic
	functions lwc test
Message-ID: <201010251226.o9PCQVpZ008226@proliant.st.ewi.tudelft.nl>

Author: visser
Date: Mon Oct 25 12:26:31 2010
New Revision: 21301
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21301&sc=1

Log:


Added:
   spoofax-contrib/lwc11/trunk/entities/generate-cs.str
   spoofax-contrib/lwc11/trunk/test/functionsProperties.lwc
   spoofax-contrib/lwc11/trunk/test/primitives.lwc
   spoofax-contrib/lwc11/trunk/test/propertiesA.lwc
Modified:
   spoofax-contrib/lwc11/trunk/common/Common.sdf
   spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
   spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
   spoofax-contrib/lwc11/trunk/entities/Entities.sdf
   spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf
   spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str
   spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf
   spoofax-contrib/lwc11/trunk/expressions/arithmetic/arithmetic-trans.str
   spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str
   spoofax-contrib/lwc11/trunk/functions/Functions.sdf
   spoofax-contrib/lwc11/trunk/functions/functions-trans.str
   spoofax-contrib/lwc11/trunk/lwc/LWC.sdf
   spoofax-contrib/lwc11/trunk/test/functions.lwc
   spoofax-contrib/lwc11/trunk/test/module.lwc
   spoofax-contrib/lwc11/trunk/test/moduleA.lwc
   spoofax-contrib/lwc11/trunk/test/moduleB.lwc

Modified: spoofax-contrib/lwc11/trunk/common/Common.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/common/Common.sdf	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/common/Common.sdf	Mon Oct 25 12:26:31 2010	(r21301)
@@ -6,7 +6,7 @@
   lexical syntax
     [a-zA-Z][a-zA-Z0-9\_]* -> ID
   lexical restrictions
-    ID            -/- [a-zA-Z0-9\_]
+    ID -/- [a-zA-Z0-9\_]
     
   lexical syntax
   	{ID "/"}+ -> FILENAME

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Folding.generated.esv	Mon Oct 25 12:26:31 2010	(r21301)
@@ -22,5 +22,4 @@
   
   Module.Module
   Entity.Entity
-  MethodDef.MethodDef
   FunctionDef.FunctionDef
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Outliner.generated.esv	Mon Oct 25 12:26:31 2010	(r21301)
@@ -14,7 +14,8 @@
   
   Module.Module
   Entity.Entity
-  MethodDef.MethodDef
+  FunctionDef.FunctionDef
   FunctionCall.FunctionCall
-  MethodCall.MethodCall
-  FunctionDef.FunctionDef
\ No newline at end of file
+  XmlElem.XML
+  Statement.If
+  Statement.While
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/entities/Entities.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/Entities.sdf	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/entities/Entities.sdf	Mon Oct 25 12:26:31 2010	(r21301)
@@ -8,6 +8,7 @@
   context-free syntax 
   	Entity                          -> Definition
     "entity" ID "{" EntityElem* "}" -> Entity {cons("Entity")}
-    QID                             -> Type {cons("Type")}
+    ID                              -> Type {cons("Type")}
+    
     "this"                          -> Exp {cons("This")}
   	"this"                          -> ID {reject}

Added: spoofax-contrib/lwc11/trunk/entities/generate-cs.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/entities/generate-cs.str	Mon Oct 25 12:26:31 2010	(r21301)
@@ -0,0 +1,8 @@
+module generate-cs
+
+rules
+	
+  to-java :
+  	Entity(name, elems) -> |[
+  	  class ~id:name { }
+  	]|
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/entities/properties/Properties.sdf	Mon Oct 25 12:26:31 2010	(r21301)
@@ -1,6 +1,7 @@
-module entities/Entities
+module entities/properties/Properties
 
 imports common/Common
+imports entities/Entities
 
 exports
   sorts Property 

Modified: spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/entities/properties/properties-trans.str	Mon Oct 25 12:26:31 2010	(r21301)
@@ -33,7 +33,7 @@
    type-of :
    	 PropertyAccess(e, name) -> <type-of> d
    	 where debug(!"type-of property access: "); <type-of> e => type;  debug(!"  type of e:");
-   	       <get-declaration(|Properties(<resolve> type))> name => d
+   	       <get-declaration(|Properties(<resolve; debug(!"resolved: ")> type))> name => d
    	       ; debug(!"  declaration: ")
    	 
    editor-error :

Modified: spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/expressions/Expressions.sdf	Mon Oct 25 12:26:31 2010	(r21301)
@@ -13,3 +13,5 @@
   context-free syntax
   	ID          -> Exp {cons("VarRef")}
   	"(" Exp ")" -> Exp {bracket}
+
+    Exp "<" Exp -> Exp {cons("LT"),non-assoc}
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/expressions/arithmetic/arithmetic-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/expressions/arithmetic/arithmetic-trans.str	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/expressions/arithmetic/arithmetic-trans.str	Mon Oct 25 12:26:31 2010	(r21301)
@@ -7,12 +7,13 @@
 	
   type-of :
   	String(x) -> Type("String")
+  	where debug(!"type-of string: ") 
   	
   type-of :
   	Int(x) -> Type("Int")
    
   type-of : 
-  	Plus(e1, e2) -> Type("Int")
+  	Plus(e1, e2) -> Type("Int") 
   	where <type-of> e1 => Type("Int");
   	      <type-of> e2 => Type("Int")
   	      
@@ -29,3 +30,4 @@
   	e at Times(e1, e2) -> (e, $[Arguments should be of type Int])
   	where <type-of> e1; <type-of> e2; not(<type-of>e)
 
+   
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/expressions/expressions-trans.str	Mon Oct 25 12:26:31 2010	(r21301)
@@ -19,7 +19,7 @@
   store:
   	d at VarDecl(name, type) -> d
   	where <map-declaration(|Variables())> (name, d)
-  	
+  	  
 rules // variable reference
 	
   hover:
@@ -37,7 +37,7 @@
   	
   type-of:
   	VarRef(name) -> type
-  	where debug(!"type-of: "); <resolve; debug(!"decls: "); type-of> name => type
+  	where debug(!"type-of: "); <get-declaration(|Variables()); debug(!" decls: "); type-of> name => type
   	;debug(!"  type:")
   	
   editor-error :

Modified: spoofax-contrib/lwc11/trunk/functions/Functions.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/functions/Functions.sdf	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/functions/Functions.sdf	Mon Oct 25 12:26:31 2010	(r21301)
@@ -18,4 +18,10 @@
   	
   	":" Type         -> ReturnType {cons("ReturnType")}
   	"return" Exp ";" -> Statement {cons("Return")}
-  
\ No newline at end of file
+  
+  
+  sorts XmlElem
+  context-free syntax
+  	"<" ID ">" XmlElem* "</" ID ">" -> XmlElem {cons("XML")}
+  	
+  	XmlElem -> Exp 
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/functions/functions-trans.str
==============================================================================
--- spoofax-contrib/lwc11/trunk/functions/functions-trans.str	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/functions/functions-trans.str	Mon Oct 25 12:26:31 2010	(r21301)
@@ -53,7 +53,7 @@
 rules // function call
 	
   signature-of :
-  	FunctionCall(name, args) -> (name, <map(type-of)>args)
+  	FunctionCall(name, args) -> (name, <debug(!" args: "); map(debug(!" arg: "); type-of; debug(!" type-of: "))>args)
 		
   type-of :
     call at FunctionCall(name, args) -> type
@@ -67,7 +67,7 @@
 
   resolve :
   	call at FunctionCall(name, args) -> def
-  	where <signature-of; get-declaration(|Functions())> call => def
+  	where debug(!"resolve: "); <signature-of; debug(!" sig: "); get-declaration(|Functions())> call => def; debug(!" decl: ")
   		
 rules // parameters
 	

Modified: spoofax-contrib/lwc11/trunk/lwc/LWC.sdf
==============================================================================
--- spoofax-contrib/lwc11/trunk/lwc/LWC.sdf	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/lwc/LWC.sdf	Mon Oct 25 12:26:31 2010	(r21301)
@@ -1,5 +1,5 @@
 module LWC
-
+ 
 imports entities/Entities
 imports modules/Modules
 imports functions/Functions
@@ -7,9 +7,9 @@
 imports statements/Statements
 
 exports
-
+  
   context-free start-symbols Start
 
   context-free syntax
     Module  -> Start
-     
\ No newline at end of file
+         
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/test/functions.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/test/functions.lwc	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/test/functions.lwc	Mon Oct 25 12:26:31 2010	(r21301)
@@ -7,13 +7,12 @@
 }
 
 bar(x : Int) : Int { // this is fine
-  return 3 + x;  
-}
+  return 3 + x;        
+} 
  
 baz(x : Int) : Int {
   foo(x); 
-  x := bar(x + 1) + "";  
+  x := bar(x + "") + "";  
   // function should have return statement
 }
-
-entity Int{}
\ No newline at end of file
+ 
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/functionsProperties.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/functionsProperties.lwc	Mon Oct 25 12:26:31 2010	(r21301)
@@ -0,0 +1,11 @@
+module functionsProperties
+
+imports propertiesA
+
+comment(b : Blog, x : String) {
+  b.comment := x;
+}
+
+comment(b : Blog) {
+  comment(b, "3"); 
+}  
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/test/module.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/test/module.lwc	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/test/module.lwc	Mon Oct 25 12:26:31 2010	(r21301)
@@ -1,14 +1,27 @@
 module module
 
+imports primitives
+
 entity B{
   name : String
+  foo : Bla
   //a : A 
 } 
 
 entity A{ 
-  b : B    
+  b : B  
+  
 }   
+
+entity A {
+	
+}
   
        
-entity String{}     
+entity String{}  
+
+foo(x : String) : String {
+  x := 1;
+  return "aa";
+}   
   
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/test/moduleA.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/test/moduleA.lwc	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/test/moduleA.lwc	Mon Oct 25 12:26:31 2010	(r21301)
@@ -1,3 +1,10 @@
 module moduleA
 
-imports moduleB  
\ No newline at end of file
+imports moduleB
+
+imports moduleC
+
+imprts Bla 
+
+
+   
\ No newline at end of file

Modified: spoofax-contrib/lwc11/trunk/test/moduleB.lwc
==============================================================================
--- spoofax-contrib/lwc11/trunk/test/moduleB.lwc	Mon Oct 25 10:52:59 2010	(r21300)
+++ spoofax-contrib/lwc11/trunk/test/moduleB.lwc	Mon Oct 25 12:26:31 2010	(r21301)
@@ -1,4 +1,4 @@
 module moduleB
 
 imports moduleC 
-imports moduleD 
\ No newline at end of file
+imports moduleD  
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/primitives.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/primitives.lwc	Mon Oct 25 12:26:31 2010	(r21301)
@@ -0,0 +1,7 @@
+module primitives
+
+entity String{}
+
+entity Int{}
+
+entity Bool{}
\ No newline at end of file

Added: spoofax-contrib/lwc11/trunk/test/propertiesA.lwc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/lwc11/trunk/test/propertiesA.lwc	Mon Oct 25 12:26:31 2010	(r21301)
@@ -0,0 +1,16 @@
+module propertiesA
+
+imports primitives
+
+entity Blog {
+  name    : String
+  author  : User 
+  posts   : BlogPosts
+  comment : String
+  foo : User
+}
+
+entity User {
+  name : String
+}
+

From L.C.L.Kats at tudelft.nl  Tue Oct 26 11:41:05 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 26 Oct 2010 09:41:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21302 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	sp...
Message-ID: <201010260941.o9Q9f5Ff023404@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Tue Oct 26 09:41:05 2010
New Revision: 21302
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21302&sc=1

Log:
Exception reporting tweaks.

Deleted:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/java.hprof.txt
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Mon Oct 25 12:26:31 2010	(r21301)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Tue Oct 26 09:41:05 2010	(r21302)
@@ -23,6 +23,7 @@
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.StackTracer;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.InvalidParseTableException;
@@ -317,6 +318,18 @@
 		if (activator != null) activator.getLog().log(status);
 	}
 	
+	public static void logException(String message, StackTracer tracer, Throwable t) {
+		if (Debug.ENABLED) {
+			if (message != null) STDERR.println(message);
+			t.printStackTrace();
+		}
+		if (message == null) message = t.getLocalizedMessage() == null ? t.getMessage() : t.getLocalizedMessage();
+		message = message + "\n" + tracer.getTraceString();
+		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, 0, message, t);
+		RuntimeActivator activator = RuntimeActivator.getInstance();
+		if (activator != null) activator.getLog().log(status);
+	}
+	
 	public static void logException(String message) {
 		logException(message, new RuntimeException(message));
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Oct 25 12:26:31 2010	(r21301)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Tue Oct 26 09:41:05 2010	(r21302)
@@ -611,26 +611,26 @@
 			if (!(e instanceof InterpreterErrorExit))
 				messages.addMarkerFirstLine(resource, "Analysis failed (" + name(e) + "; see error log)", IMarker.SEVERITY_ERROR);
 			messages.commitAllChanges();
-			Environment.logException("Runtime exited when evaluating strategy " + function, e);
+			Environment.logException("Runtime exited when evaluating strategy " + function, runtime.getCompiledContext(), e);
 		} catch (UndefinedStrategyException e) {
 			// Note that this condition may also be reached when the semantic service hasn't been loaded yet
 			if (descriptor.isDynamicallyLoaded())
 				runtime.getIOAgent().printError("Internal error: strategy does not exist or is defined in a module that is not imported: " + e.getMessage());
-			Environment.logException("Strategy does not exist: " + e.getMessage(), e);
+			Environment.logException("Strategy does not exist: " + e.getMessage(), runtime.getCompiledContext(), e);
 		} catch (InterpreterException e) {
 			if (descriptor.isDynamicallyLoaded())
 				runtime.getIOAgent().printError("Internal error evaluating " + function + " (" + name(e) + "; see error log)");
-			Environment.logException("Internal error evaluating strategy " + function, e);
+			Environment.logException("Internal error evaluating strategy " + function, runtime.getCompiledContext(), e);
 			if (descriptor.isDynamicallyLoaded()) StrategoConsole.activateConsole();
 		} catch (RuntimeException e) {
 			if (runtime != null && descriptor.isDynamicallyLoaded())
 				runtime.getIOAgent().printError("Internal error evaluating " + function + " (" + name(e) + "; see error log)");
-			Environment.logException("Internal error evaluating strategy " + function, e);
+			Environment.logException("Internal error evaluating strategy " + function, runtime.getCompiledContext(), e);
 			if (descriptor.isDynamicallyLoaded()) StrategoConsole.activateConsole();
 		} catch (Error e) { // e.g. NoClassDefFoundError due to bad/missing stratego jar
 			if (runtime != null && descriptor.isDynamicallyLoaded())
 				runtime.getIOAgent().printError("Internal error evaluating " + function + " (" + name(e) + "; see error log)");
-			Environment.logException("Internal error evaluating strategy " + function, e);
+			Environment.logException("Internal error evaluating strategy " + function, runtime.getCompiledContext(), e);
 			if (descriptor.isDynamicallyLoaded()) StrategoConsole.activateConsole();
 		}
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	Mon Oct 25 12:26:31 2010	(r21301)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	Tue Oct 26 09:41:05 2010	(r21302)
@@ -5,6 +5,7 @@
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.PrintStream;
+import java.io.StringWriter;
 import java.io.Writer;
 
 import org.spoofax.interpreter.library.IOAgent;
@@ -104,6 +105,12 @@
         return results;
     }
     
+    public String getTraceString() {
+        StringWriter writer = new StringWriter();
+        printStackTrace(writer, false);
+        return writer.toString();
+    }
+    
     public void setTrace(String[] trace) {
         currentDepth = min(trace.length, currentDepth);
         failureDepth = trace.length;

From L.C.L.Kats at tudelft.nl  Tue Oct 26 16:09:42 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 26 Oct 2010 14:09:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21303 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201010261409.o9QE9gFA028565@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Tue Oct 26 14:09:42 2010
New Revision: 21303
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21303&sc=1

Log:
Release 0.5.3.9

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Oct 26 09:41:05 2010	(r21302)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Oct 26 14:09:42 2010	(r21303)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.3.8"
+      version="0.5.3.9"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Tue Oct 26 09:41:05 2010	(r21302)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Tue Oct 26 14:09:42 2010	(r21303)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.3.8.jar" id="org.strategoxt.imp" version="0.5.3.8">
+   <feature url="features/org.strategoxt.imp_0.5.3.9.jar" id="org.strategoxt.imp" version="0.5.3.9">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From L.C.L.Kats at tudelft.nl  Fri Oct 29 12:06:06 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Oct 2010 10:06:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21304 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans
Message-ID: <201010291006.o9TA664a004693@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Oct 29 10:06:06 2010
New Revision: 21304
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21304&sc=1

Log:
Some extra checks

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Tue Oct 26 14:09:42 2010	(r21303)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Fri Oct 29 10:06:06 2010	(r21304)
@@ -64,11 +64,15 @@
 rules // Local checks
   
   context-free-syntax-warning:
-    prod(p, s, a*) -> (target, $[Missing {cons("Label")} attribute to label the abstract syntax])
+    prod(p*, s, a*) -> (target, $[Missing {cons("Label")} attribute to label the abstract syntax])
     where
-      not(<occurrences(?sort(_))> p => 1; <occurrences(?lit(_))> p => 0);
+      (
+        not(<occurrences(?sort(_))> p* => 1; <occurrences(?lit(_))> p* => 0)
+      <+
+        <oncetd(is-iter + ?opt(_))> p*
+      );
       if !a* => attrs(a'*) then
-        not(<one(term(default(appl(unquoted("cons" + "ast"), [fun(quoted(id))]))))> a'*);
+        not(<one(term(default(appl(unquoted("cons" + "ast"), [fun(quoted(not("\"\"")))]))))> a'*);
         not(<one(bracket() + reject())> a'*);
         not(!s; (sort("Keyword") + sort("\"Keyword\""))); 
         target := a*
@@ -102,7 +106,10 @@
    * Tests if something is a non-terminal in terms of the AST produced.
    */
   is-non-terminal =
-    ?sort(_) + ?opt(_) + ?iter(_) + ?iter-star(_) + ?iter-sep(_, _) + ?iter-star-sep(_, _)
+    ?sort(_) + ?opt(_) + is-iter
+  
+  is-iter =
+    ?iter(_) + ?iter-star(_) + ?iter-sep(_, _) + ?iter-star-sep(_, _)
   
   // Instruct users to use { X "," }*
 

From L.C.L.Kats at tudelft.nl  Fri Oct 29 12:42:45 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Oct 2010 10:42:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21305 - in
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp:
	project util
Message-ID: <201010291042.o9TAgjsU005519@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Oct 29 10:42:45 2010
New Revision: 21305
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21305&sc=1

Log:
No longer overwrite parse controller and activator classes with each build

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-controller.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-validator.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-controller.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-controller.str	Fri Oct 29 10:06:06 2010	(r21304)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-controller.str	Fri Oct 29 10:42:45 2010	(r21305)
@@ -14,13 +14,10 @@
     <conc-strings> (<get-main-class-name>, "ParseController")
 
   create-parse-controller =
-    // TODO: do not overwrite existing parse controller
-    //       or add a comment explaining it's always overwritten and users
-    //       can add a new class if they want to as long as they reference
-    //       it from plugin.xml
-    x_name  := <parse-controller-name>;
-    pkgname := <get-package-name>;
-    table   := <get-sdf-main-module>;
+    x_name           := <parse-controller-name>;
+    x_namegenerated  := <conc-strings> (x_name, "Generated");
+    pkgname          := <get-package-name>;
+    table            := <get-sdf-main-module>;
     
     <output-java-file> |[
       package pkgname;
@@ -34,7 +31,7 @@
       import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
       import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
       
-      public class x_name extends DynamicParseController {
+      public class x_namegenerated extends DynamicParseController {
 
         public static final String LANGUAGE = new String("~table");
 
@@ -106,4 +103,13 @@
           super.setNotLoadingCause(value);
         }
       }
-    ]|
+    ]|;
+    
+    default-class := |[
+      package pkgname;
+      
+      public class x_name extends x_namegenerated {}
+    ]|;
+    if not(<file-exists> <java-to-path> default-class) then
+      <output-java-file> default-class
+    end

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-validator.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-validator.str	Fri Oct 29 10:06:06 2010	(r21304)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-validator.str	Fri Oct 29 10:42:45 2010	(r21305)
@@ -12,12 +12,11 @@
     <conc-strings> (<get-main-class-name>, "Validator")
 
   create-validator =
-    // TODO: do not overwrite existing validator
     x_name   := <validator-name>;
     x_parser := <parse-controller-name>;
     pkgname  := <get-package-name>;
     
-    <output-java-file> |[
+    default-class := |[
       package pkgname;
 
       import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
@@ -30,4 +29,7 @@
               return x_parser.getDescriptor();
           }
       }
-    ]|
+    ]|;
+    if not(<file-exists> <java-to-path> default-class) then
+      <output-java-file> default-class
+    end

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str	Fri Oct 29 10:06:06 2010	(r21304)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str	Fri Oct 29 10:42:45 2010	(r21305)
@@ -100,13 +100,7 @@
 strategies
   
   output-java-file =
-    where(
-      ?class;
-      path := <create-dirs> ["editor", "java" | <to-package-name>];
-      fullpath := <conc-strings> (path, "/", <class-name> class, ".java")
-    );
-    
-    output-java-file(|fullpath)
+    output-java-file(|<java-to-path>)
 
   output-java-file(|filename) =
     print-filename(|["editor", "java" | <to-package-name>], <base-filename> filename);
@@ -118,6 +112,13 @@
     );
     
     output-text-file'(|filename)
+  
+  java-to-path:
+    class -> fullpath
+    where
+      path     := <create-dirs> ["editor", "java" | <to-package-name>];
+      fullpath := <conc-strings> (path, "/", <class-name> class, ".java")
+    
 
   output-xml-file(|pathparts, filename) =
     print-filename(|pathparts, filename);

From L.C.L.Kats at tudelft.nl  Fri Oct 29 13:33:27 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Oct 2010 11:33:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21306 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice/editor
	org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.runtime/META-INF org.strategoxt.im...
Message-ID: <201010291133.o9TBXRDs006368@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Oct 29 11:33:27 2010
New Revision: 21306
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21306&sc=1

Log:
Added new 'table provider' descriptor element that allows a strategy/method to dynamically select the parse table to be used for a file.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseTableProvider.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseTableProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Fri Oct 29 10:42:45 2010	(r21305)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Fri Oct 29 11:33:27 2010	(r21306)
@@ -102,6 +102,12 @@
  
   completion template : LanguageProperty = 
     "description" ":\n\t" <description> (blank)
+ 
+  completion template : LanguageProperty = 
+    "table" ":\n\t" <table> (blank)
+ 
+  completion template : LanguageProperty = 
+    "table provider" ":\n\t" <provider> (blank)
   
   completion template : SemanticRule = 
   	"reference" " _ : " <s> (blank)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Fri Oct 29 10:42:45 2010	(r21305)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Fri Oct 29 11:33:27 2010	(r21306)
@@ -62,6 +62,7 @@
    Extensions           -- R [ KW["extensions"] KW[":"] _1 ],
    Description          -- R [ KW["description"] KW[":"] _1 ],
    Table                -- R [ KW["table"] KW[":"] _1 ],
+   TableProvider        -- R [ KW["table"] KW["provider"] KW[":"] _1 ],
    UnmanagedTablePrefix -- R [ H [ KW["unmanaged"] KW["table"] ] KW[":"] H hs=0 [ _1 KW["*"] ] ],
    StartSymbols         -- R [ H [ KW["start"] KW["symbols"] ] KW[":"] _1 ],
    NoStartSymbols       -- KW["_"],

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	Fri Oct 29 10:42:45 2010	(r21305)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	Fri Oct 29 11:33:27 2010	(r21306)
@@ -1,6 +1,7 @@
 module LanguageDescription
 
-imports Common
+imports
+	Common SemanticServices
 
 exports
   
@@ -38,6 +39,7 @@
     "extensions"      ":" PropertyValues -> LanguageProperty {cons("Extensions")}
     "description"     ":" PropertyValue  -> LanguageProperty {cons("Description")}
     "table"           ":" PropertyValue  -> LanguageProperty {cons("Table")}
+    "table" "provider" ":" StrategoCall  -> LanguageProperty {cons("TableProvider")}
     "start" "symbols" ":" Sort*          -> LanguageProperty {cons("StartSymbols")}
     "start" "symbols" ":" PropertyValues -> LanguageProperty {cons("StartSymbols"), avoid}
     "url"             ":" URL            -> LanguageProperty {cons("URL")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Fri Oct 29 10:42:45 2010	(r21305)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Fri Oct 29 11:33:27 2010	(r21306)
@@ -9,7 +9,7 @@
  org.spoofax.interpreter.core,
  org.spoofax.interpreter.adapter.aterm,
  org.spoofax.interpreter.library.jsglr,
- lpg.runtime,
+ lpg.runtime;bundle-version="[2.0.17,2.0.17.qualifier]",
  org.eclipse.core.runtime,
  org.eclipse.core.resources,
  org.junit,

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Fri Oct 29 10:42:45 2010	(r21305)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Fri Oct 29 11:33:27 2010	(r21306)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime;
 
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintStream;
@@ -33,6 +34,7 @@
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseTableProvider;
 import org.strategoxt.imp.runtime.dynamicloading.ParseTableProvider;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.IMPJSGLRLibrary;
@@ -247,16 +249,25 @@
 		return parseTableManager.loadFromStream(stream);
 	}
 	
+	public static ParseTable loadParseTable(String filename) throws FileNotFoundException, IOException, InvalidParseTableException {
+		return parseTableManager.loadFromFile(filename);
+	}
+	
 	public static ParseTableProvider getParseTableProvider(Language language)
 			throws BadDescriptorException, InvalidParseTableException,
 			       IOException, CoreException, IllegalStateException {
 		
-		ParseTableProvider result = parseTables.get(language.getName());
-		
-		if (result == null)
-			throw new IllegalStateException("Parse table not available: " + language.getName());
+		String function = getDescriptor(language).getParseTableProviderFunction();
+		if (function != null) {
+			return new DynamicParseTableProvider(getDescriptor(language), function);
+		} else {
+			ParseTableProvider result = parseTables.get(language.getName());
 			
-		return result;
+			if (result == null)
+				throw new IllegalStateException("Parse table not available: " + language.getName());
+			
+			return result;
+		}
 	}
 	
 	public static void registerDescriptor(Language language, Descriptor descriptor)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Fri Oct 29 10:42:45 2010	(r21305)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Fri Oct 29 11:33:27 2010	(r21306)
@@ -376,6 +376,10 @@
 		return file;
 	}
 	
+	public String getParseTableProviderFunction() throws BadDescriptorException {
+		return getProperty("TableProvider", null);
+	}
+	
 	public String getBuilderCaption() {
 		if (builderCaption == null)
 			builderCaption = getProperty("BuilderCaption", "");

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseTableProvider.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseTableProvider.java	Fri Oct 29 11:33:27 2010	(r21306)
@@ -0,0 +1,74 @@
+package org.strategoxt.imp.runtime.dynamicloading;
+
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.core.resources.IResource;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
+import org.strategoxt.imp.runtime.services.StrategoObserver;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
+
+/**
+ * A parse table provider that can dynamically use different parse tables for different files.
+ * 
+ * One can exist for each editor.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class DynamicParseTableProvider extends ParseTableProvider {
+	
+	private final String providerFunction;
+
+	private SGLRParseController controller;
+	
+	private StrategoObserver runtime;
+	
+	public DynamicParseTableProvider(Descriptor descriptor, String providerFunction) {
+		super(descriptor);
+		this.providerFunction = providerFunction;
+	}
+	
+	@Override
+	public boolean isDynamic() {
+		return true;
+	}
+	
+	@Override
+	public void setController(SGLRParseController controller) {
+		this.controller = controller;
+	}
+	
+	@Override
+	public void initialize(File input) {
+		try {
+			assert controller != null;
+			if (runtime == null)
+				runtime = getDescriptor().createService(StrategoObserver.class, controller);
+			runtime.getLock().lock();
+			try {
+				IResource resource = EditorIOAgent.getResource(input);
+				IStrategoTerm pathTerm = Environment.getTermFactory().makeString(input.getAbsolutePath());
+				IStrategoTerm table = runtime.invokeSilent(providerFunction, pathTerm, resource);
+				if (isTermString(table)) {
+					setTable(Environment.loadParseTable(asJavaString(table)));
+				} else {
+					Environment.logException("Path to existing parse table expected from table provider: " + table);
+				}
+			} finally {
+				runtime.getLock().unlock();
+			}
+		} catch (BadDescriptorException e) {
+			Environment.logException("Unable to load parse table provider", e);
+		} catch (InvalidParseTableException e) {
+			Environment.logException("Unable to load table provided by parse provider", e);
+		} catch (IOException e) {
+			Environment.logException("Unable to load table provided by parse provider", e);
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java	Fri Oct 29 10:42:45 2010	(r21305)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java	Fri Oct 29 11:33:27 2010	(r21306)
@@ -35,7 +35,10 @@
 		} catch (RuntimeException e) {
 			throw new BadDescriptorException("Could not load parse table for " + language.getName(), e);
 		}
-		return new SGLRParseController(language, table, syntaxProperties, descriptor.getStartSymbol());
+		SGLRParseController result = new SGLRParseController(language, table, syntaxProperties, descriptor.getStartSymbol());
+		if (table.isDynamic())
+			table.setController(result);
+		return result;
 	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseTableProvider.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseTableProvider.java	Fri Oct 29 10:42:45 2010	(r21305)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseTableProvider.java	Fri Oct 29 11:33:27 2010	(r21306)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 
@@ -9,10 +10,16 @@
 import org.spoofax.jsglr.ParseTable;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
 
 /**
  * Lazily loads a parse table from a resource.
  * 
+ * ParseTableProvider instances are shared among multiple editors
+ * to ensure caching and reuse of their table. This means
+ * they do not support the {@link DynamicParseTableProvider#initialize}
+ * and {@link DynamicParseTableProvider#setTable} methods.
+ * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class ParseTableProvider {
@@ -47,4 +54,27 @@
 		Debug.stopTimer("Loaded parse table for " + (file == null ? descriptor.getLanguage().getName() : file.getName()));
 		return this.table = table;
 	}
+	
+	protected Descriptor getDescriptor() {
+		return descriptor;
+	}
+	
+	protected void setTable(ParseTable table) {
+		this.table = table;
+	}
+	
+	/**
+	 * @see DynamicParseTableProvider
+	 */
+	public boolean isDynamic() {
+		return false;
+	}
+	
+	public void setController(SGLRParseController controller) {
+		throw new UnsupportedOperationException();
+	}
+	
+	public void initialize(File input) {
+		throw new UnsupportedOperationException();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Fri Oct 29 10:42:45 2010	(r21305)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Fri Oct 29 11:33:27 2010	(r21306)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime.parser;
 
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 
@@ -106,7 +107,7 @@
 	protected ATerm doParseNoImplode(char[] inputChars, String filename)
 			throws TokenExpectedException, BadTokenException, SGLRException, IOException {
 		
-		return doParseNoImplode(toByteStream(inputChars), inputChars);
+		return doParseNoImplode(toByteStream(inputChars), inputChars, filename);
 	}
 	
 	/**
@@ -124,13 +125,16 @@
 		}
 	}
 	
-	private ATerm doParseNoImplode(InputStream inputStream, char[] inputChars)
+	private ATerm doParseNoImplode(InputStream inputStream, char[] inputChars, String filename)
 			throws TokenExpectedException, BadTokenException, SGLRException, IOException {
 		
 		// Read stream using tokenizer/lexstream
 		
 		// FIXME: Some bug in JSGLR is causing its state to get corrupted; must reset it every parse
 		// (must do this beforehand to keep getCollectedErrors() intact afterwards)
+		if (parseTable.isDynamic()) {
+			parseTable.initialize(new File(filename));
+		}
 		resetState();
 		try {
 			return parser.parse(inputStream, getStartSymbol());

From L.C.L.Kats at tudelft.nl  Fri Oct 29 13:45:23 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Oct 2010 11:45:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21307 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201010291145.o9TBjNvX006506@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Oct 29 11:45:22 2010
New Revision: 21307
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21307&sc=1

Log:
Updated parse table caching mechanism using weak references and file time stamps.

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTableManager.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTableManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTableManager.java	Fri Oct 29 11:33:27 2010	(r21306)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTableManager.java	Fri Oct 29 11:45:22 2010	(r21307)
@@ -15,6 +15,7 @@
 import java.io.InputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
+import java.lang.ref.WeakReference;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -24,36 +25,44 @@
 
 public class ParseTableManager {
     
-    private Map<String, ParseTable> knownTables;
-    private ATermFactory factory;
+    private final Map<String, CachedTable> cache =
+        new HashMap<String, CachedTable>();
     
-    private static boolean cacheTables = false;
+    private final ATermFactory factory;
+    
+    private boolean useDiskCache;
     
     public ParseTableManager() {
-        factory = new PureFactory();
-        knownTables = new HashMap<String, ParseTable>();
+        this(new PureFactory());
     }
     
     public ParseTableManager(ATermFactory factory) {
+        this(factory, false);
+    }
+    
+    public ParseTableManager(ATermFactory factory, boolean useDiskCache) {
         this.factory = factory;
-        knownTables = new HashMap<String, ParseTable>();
+        this.useDiskCache = useDiskCache;
     }
     
     public ParseTable loadFromFile(String filename) throws FileNotFoundException, IOException, InvalidParseTableException {
         
-    	if(knownTables.containsKey(filename))
-            return knownTables.get(filename);
-    	
-    	ParseTable pt = null;
+        ParseTable pt = null;
+        
+    	if(cache.containsKey(filename)) {
+    	    CachedTable cached = cache.get(filename);
+    	    pt = cached.get();
+            if (pt != null && cached.isUpToDate()) return pt;
+    	}
     	
-        if(cacheTables) {
+        if(useDiskCache) {
         	final String cachedTable = hashFilename(filename);
         	File cached = new File(cachedTable);
         	File table = new File(filename);
         	if(cached.exists() && 
         			cached.lastModified() >= table.lastModified()) {
         		try {
-					pt = loadFromCache(cachedTable);
+					pt = loadFromDiskCache(cachedTable);
 					pt.initAFuns(factory);
 				} catch (ClassNotFoundException e) {
 				}
@@ -62,16 +71,16 @@
 
         if(pt == null) {
         	pt = loadFromStream(new FileInputStream(filename));
-        	if(cacheTables) {
-        		storeInCache(pt, filename);
+        	if(useDiskCache) {
+        		storeInDiskCache(pt, filename);
         	}
         }
         
-        knownTables.put(filename, pt);
+        cache.put(filename, new CachedTable(pt, filename));
         return pt;
     }
     
-    private void storeInCache(ParseTable pt, String filename) throws FileNotFoundException, IOException {
+    private void storeInDiskCache(ParseTable pt, String filename) throws FileNotFoundException, IOException {
     	String storeName = hashFilename(filename);
     	File dir = new File(System.getProperty("user.home") + "/.jsglr/cache/");
     	if(!dir.exists()) {
@@ -82,7 +91,7 @@
     	ous.close();
 	}
 
-	private ParseTable loadFromCache(String cachedTable) throws FileNotFoundException, IOException, ClassNotFoundException {
+	private ParseTable loadFromDiskCache(String cachedTable) throws FileNotFoundException, IOException, ClassNotFoundException {
 		System.out.println("Loading " + cachedTable);
     	ObjectInputStream ois = new ObjectInputStream(new FileInputStream(cachedTable));
     	ParseTable pt = (ParseTable)ois.readObject();
@@ -134,5 +143,25 @@
 	public ParseTable loadFromTerm(ATerm term) throws InvalidParseTableException {
 		return initializeParseTable(term);
 	}
+	
+	/**
+	 * A parse table cache entry.
+	 */
+	private class CachedTable extends WeakReference<ParseTable> {
+        
+        private String path;
+	    
+        private long lastModified;
+	    
+	    public CachedTable(ParseTable table, String path) {
+            super(table);
+            this.path = path;
+            this.lastModified = new File(path).lastModified();
+        }
+	    
+	    public boolean isUpToDate() {
+	        return new File(path).lastModified() == lastModified;
+	    }
+	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java	Fri Oct 29 11:33:27 2010	(r21306)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java	Fri Oct 29 11:45:22 2010	(r21307)
@@ -1,5 +1,6 @@
 package org.spoofax.jsglr;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -9,7 +10,9 @@
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class RangeList {
+public class RangeList implements Serializable {
+    
+    private static final long serialVersionUID = 16593569;
     
     public static final int NONE = -1;
     

From L.C.L.Kats at tudelft.nl  Fri Oct 29 13:46:08 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Oct 2010 11:46:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21308 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
Message-ID: <201010291146.o9TBk8Cv006512@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Oct 29 11:46:08 2010
New Revision: 21308
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21308&sc=1

Log:
Spoofax/282: hardcoded the project name into the launch configuration file for now.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	Fri Oct 29 11:45:22 2010	(r21307)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	Fri Oct 29 11:46:08 2010	(r21308)
@@ -16,7 +16,9 @@
     // We use plain text since the XML pretty printer has problems with this file.
     //
     // - It seems that when a project is initially being built,
-    //   only ${build_project} works, and ${project_loc} doesn't.  
+    //   only ${build_project} works, and ${project_loc} doesn't. 
+    // - ${project_loc} also doesn't work when a project has
+    //   just been imported from version control or the file system
     // - Variable ${build_project} prevents the Ant builder
     //   from detecting that this launch file belongs to the
     //   corresponding build.main.xml.
@@ -25,12 +27,13 @@
     //   are multiple projects
     // - PROJECT_ATTR seems to be ignored
     //
-    // To somewhat accomodate for this, we change the variable to project_loc
-    // after the project has been initially built in NewEditorWizard.
+    // Because of these issues we hardcode the project name in this file for now.
     //
     // The property org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY may be optional,
     // at least for Ant builds.
     
+    project-name := <ProjectName>;
+    
     <output-text-file(|[".externalToolBuilders"], <builder-xml-name>)> 
 $[ <?xml version="1.0" encoding="UTF-8" standalone="no"?>
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
@@ -50,8 +53,8 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${build_project}/build.main.xml"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${build_project}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/[project-name]/build.main.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/[project-name]}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>
 ]

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	Fri Oct 29 11:45:22 2010	(r21307)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	Fri Oct 29 11:46:08 2010	(r21308)
@@ -2,14 +2,9 @@
 
 import static org.eclipse.core.resources.IResource.DEPTH_INFINITE;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
 import java.lang.reflect.InvocationTargetException;
 
-import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IWorkspace;
@@ -165,7 +160,6 @@
 				
 				monitor.setTaskName("Building and loading example editor");
 				project.build(IncrementalProjectBuilder.FULL_BUILD, null);
-				updateProjectBuilder(project, languageName);
 				monitor.worked(6);
 
 				// TODO: Optimize - don't reload editor (already done from Ant file)
@@ -196,30 +190,6 @@
 		refreshProject(project);
 		monitor.done();
 	}
-	
-	/**
-	 * Change the project build configuration to work with the Ant builder after the project
-	 * has been initially built (see create-builder-xml.str).
-	 */
-	private static void updateProjectBuilder(IProject project, String languageName) throws IOException, CoreException {
-		IFile builderConfig = project.getFile(".externalToolBuilders/" + languageName + " build.main.xml.launch");
-		String contents = readString(builderConfig.getContents(true));
-		contents = contents.replaceAll("build_project", "project_loc");
-		builderConfig.setContents(new ByteArrayInputStream(contents.getBytes()), true, false, null);
-	}
-
-	private static String readString(InputStream stream) throws IOException {
-		char[] buffer = new char[2048];
-        StringBuilder result = new StringBuilder();
-		Reader reader = new InputStreamReader(stream);
-		try {
-	        for (int read = 0; read != -1; read = reader.read(buffer))
-	            result.append(buffer, 0, read);
-	        return result.toString();
-		} finally {
-			reader.close();
-		}
-	}
 
 	private static void refreshProject(final IProject project) {
 		// We schedule a project refresh to make all ".generated" files readable

From L.C.L.Kats at tudelft.nl  Fri Oct 29 14:14:55 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Oct 2010 12:14:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21309 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF
	spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF
	spoofax-imp/trunk/org.strategoxt.imp.editor...
Message-ID: <201010291214.o9TCEtLE007024@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Oct 29 12:14:55 2010
New Revision: 21309
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21309&sc=1

Log:
Spoofax/283: missing provider name in eclipse plugins

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.pp/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
   strc-java/trunk/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF/MANIFEST.MF	Fri Oct 29 11:46:08 2010	(r21308)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF/MANIFEST.MF	Fri Oct 29 12:14:55 2010	(r21309)
@@ -18,3 +18,4 @@
   org.spoofax.jsglr
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.aster
+Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF	Fri Oct 29 11:46:08 2010	(r21308)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF	Fri Oct 29 12:14:55 2010	(r21309)
@@ -18,3 +18,4 @@
   org.spoofax.jsglr
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.aterm
+Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/META-INF/MANIFEST.MF	Fri Oct 29 11:46:08 2010	(r21308)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/META-INF/MANIFEST.MF	Fri Oct 29 12:14:55 2010	(r21309)
@@ -20,3 +20,4 @@
  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.editorservice
+Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.pp/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.pp/META-INF/MANIFEST.MF	Fri Oct 29 11:46:08 2010	(r21308)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.pp/META-INF/MANIFEST.MF	Fri Oct 29 12:14:55 2010	(r21309)
@@ -18,3 +18,4 @@
   org.spoofax.jsglr
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.pp
+Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF	Fri Oct 29 11:46:08 2010	(r21308)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF	Fri Oct 29 12:14:55 2010	(r21309)
@@ -18,3 +18,4 @@
   org.spoofax.jsglr
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.sdf
+Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	Fri Oct 29 11:46:08 2010	(r21308)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	Fri Oct 29 12:14:55 2010	(r21309)
@@ -12,3 +12,4 @@
  org.eclipse.core.runtime,
  org.strategoxt.imp.runtime
 Export-Package: org.strategoxt.imp.nativebundle
+Bundle-Vendor: Spoofax.org

Modified: strc-java/trunk/META-INF/MANIFEST.MF
==============================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	Fri Oct 29 11:46:08 2010	(r21308)
+++ strc-java/trunk/META-INF/MANIFEST.MF	Fri Oct 29 12:14:55 2010	(r21309)
@@ -79,3 +79,4 @@
  java/runtime/,
  java/strategoxt.jar,
  java/eclipse/
+Bundle-Vendor: StrategoXT.org

From L.C.L.Kats at tudelft.nl  Fri Oct 29 14:23:48 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Oct 2010 12:23:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21310 - in
	spoofax-imp/trunk/org.strategoxt.imp.generator: .
	src/sdf2imp/project
Message-ID: <201010291223.o9TCNmjm007114@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Oct 29 12:23:48 2010
New Revision: 21310
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21310&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Fri Oct 29 12:14:55 2010	(r21309)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Fri Oct 29 12:23:48 2010	(r21310)
@@ -107,7 +107,7 @@
 	parse-unit --no-heuristic-filters -i $< -p src/syntax/EditorService.tbl
 
 %.runsh : %.sh
-	sh $<
+	$<
 
 src/syntax/EditorService.def : src/syntax/EditorService.sdf $(SDFS)
 	pack-sdf -i $< -o $@ -I src/syntax

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	Fri Oct 29 12:14:55 2010	(r21309)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	Fri Oct 29 12:23:48 2010	(r21310)
@@ -13,6 +13,9 @@
   create-builder-xml =
     <file-exists> $[.externalToolBuilders/[<builder-xml-name>]]
   <+
+    not(ProjectName);
+    warn-msg(|$[Project name not specified, cannot regenerate [<builder-xml-name>]])
+  <+
     // We use plain text since the XML pretty printer has problems with this file.
     //
     // - It seems that when a project is initially being built,

From L.C.L.Kats at tudelft.nl  Fri Oct 29 14:55:21 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Oct 2010 12:55:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21311 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201010291255.o9TCtLk2007486@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Oct 29 12:55:21 2010
New Revision: 21311
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21311&sc=1

Log:
Release 0.5.3.91

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Oct 29 12:23:48 2010	(r21310)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Oct 29 12:55:21 2010	(r21311)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.3.9"
+      version="0.5.3.91"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Fri Oct 29 12:23:48 2010	(r21310)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Fri Oct 29 12:55:21 2010	(r21311)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.3.9.jar" id="org.strategoxt.imp" version="0.5.3.9">
+   <feature url="features/org.strategoxt.imp_0.5.3.91.jar" id="org.strategoxt.imp" version="0.5.3.91">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

