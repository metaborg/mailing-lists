From gabrielkonat at gmail.com  Mon Dec  3 10:14:33 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 09:14:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25737 - in
	spoofax-contrib/index-examples: csharp-partial-classses/lib
	entity-with-aspects/editor entity-with-aspects/trans
	index-libraries/lib
Message-ID: <20121203091433.6E25ECC219@mx4.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 09:14:31 2012
New Revision: 25737
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25737&sc=1

Log:
Remove debug info

Modified:
   spoofax-contrib/index-examples/csharp-partial-classses/lib/editor-common.generated.str
   spoofax-contrib/index-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv
   spoofax-contrib/index-examples/entity-with-aspects/trans/entitywithaspects.str
   spoofax-contrib/index-examples/entity-with-aspects/trans/generate-test.str
   spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str

Modified: spoofax-contrib/index-examples/csharp-partial-classses/lib/editor-common.generated.str
==============================================================================
--- spoofax-contrib/index-examples/csharp-partial-classses/lib/editor-common.generated.str	Tue Nov 27 00:55:30 2012	(r25736)
+++ spoofax-contrib/index-examples/csharp-partial-classses/lib/editor-common.generated.str	Mon Dec  3 09:14:31 2012	(r25737)
@@ -135,8 +135,13 @@
   origin-strip     = prim("SSL_EXT_origin_strip", <id>)
   origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
 
+  origin-language-description =
+    prim("SSL_EXT_languagedescription", <id>)
+
   origin-language =
-    prim("SSL_EXT_origin_language", <id>)
+    origin-file; 
+    origin-language-description;
+    Fst
   
   origin-surrounding-comments =
     prim("SSL_EXT_origin_surrounding_comments", "CSharpPartialClassses", <id>)
@@ -152,6 +157,13 @@
   origin-track-forced(s) =
     ![<id>]; all(s); ?[<id>]
 
+  origin-relative-path:
+    trm -> rel-path
+    where
+      full-path := <origin-file> trm;
+      len-project-prefix := <project-path; string-length; inc>;
+      rel-path := <string-as-chars(drop(|len-project-prefix))> full-path
+      
 strategies
 
   desugar-position(desugar|ast):

Modified: spoofax-contrib/index-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv
==============================================================================
--- spoofax-contrib/index-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv	Tue Nov 27 00:55:30 2012	(r25736)
+++ spoofax-contrib/index-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv	Mon Dec  3 09:14:31 2012	(r25737)
@@ -3,12 +3,6 @@
 imports EntityWithAspects-Builders.generated
 
 builders
-                                                                      
-  // This file can be used for custom analysis and builder rules.     
-  //                                                                  
-  // See the imported file for a brief introduction and examples.
-
-builders
 
   provider : include/entitywithaspects.jar
   provider : include/entitywithaspects-java.jar
@@ -24,14 +18,7 @@
   builder  : "Clear index" = debug-index-clear (meta) (source)
   builder  : "Reload index" = debug-index-reload (meta) (source)
   
-  builder  : "Generate test files" = generate-test-files (meta)
-  builder  : "Create quoted libraries" = create-quoted-libraries (meta)
+  //builder  : "Generate test files" = generate-test-files (meta)
+  //builder  : "Create quoted libraries" = create-quoted-libraries (meta)
 
-refactorings
-                                                                                                                        
-  pretty-print              : prettyprint                                         
-                                                                                  
-  refactoring ID            : "Rename Entity"  = rename-entity (source) (cursor)
-  refactoring Property *    : "Extract Entity" = extract-entity (source)
-  
   on save: editor-save
\ No newline at end of file

Modified: spoofax-contrib/index-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/index-examples/entity-with-aspects/trans/entitywithaspects.str	Tue Nov 27 00:55:30 2012	(r25736)
+++ spoofax-contrib/index-examples/entity-with-aspects/trans/entitywithaspects.str	Mon Dec  3 09:14:31 2012	(r25737)
@@ -38,7 +38,7 @@
   editor-analyze:
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
-      <debug(!"editor-analyze one: ")> path;
+      //<debug(!"editor-analyze one: ")> path;
       editor-init;
       (ast', errors, warnings, notes, filesToAnalyze) := <analyze> (ast, path, project-path);
       <try(editor-queue-analysis)> <remove-all(?path)> filesToAnalyze
@@ -47,8 +47,7 @@
   editor-analyze:
     files -> None()
     where
-      not(is-tuple);
-      debug(!"editor-analyze list: ")
+      not(is-tuple)//; debug(!"editor-analyze list: ")
     with
     	index-setup(|<language>, [<project-path>], ".");
       //disable-commit-and-compile // Disable compilation during analysis.
@@ -170,23 +169,25 @@
   
   // Queue parallel analysis for given list of files.
   editor-queue-analysis = 
-    not(?[]); queue-strategy(|"editor-sequential-analyze", "Analyzing files") 
+    not(?[]); queue-strategy(|"editor-parallel-analyze", "Analyzing files") 
       
   // Executes parallel analysis using the index library.
   editor-parallel-analyze:
   	files -> None()
   	with
   		before := <times>;
+  		<debug> "+";
       <index-parallel-analyze-files(analyze)> files;
       after := <times>;
-      <debug(!"Time taken: ")> <times-to-seconds> <diff-times> (after, before)
+      <debug> <Fst> <times-to-seconds> <diff-times> (after, before)
     
   // Executes sequential analysis using the index library.
   editor-sequential-analyze:
   	files -> None()
   	with
       before := <times>;
+      <debug> "+";
       <index-sequential-analyze-files(analyze)> files;
       after := <times>;
-      <debug(!"Time taken: ")> <times-to-seconds> <diff-times> (after, before)
+      <debug> <Fst> <times-to-seconds> <diff-times> (after, before)
     
\ No newline at end of file

Modified: spoofax-contrib/index-examples/entity-with-aspects/trans/generate-test.str
==============================================================================
--- spoofax-contrib/index-examples/entity-with-aspects/trans/generate-test.str	Tue Nov 27 00:55:30 2012	(r25736)
+++ spoofax-contrib/index-examples/entity-with-aspects/trans/generate-test.str	Mon Dec  3 09:14:31 2012	(r25737)
@@ -16,14 +16,15 @@
   testgen-internal-file = !"/.internal/testgen"
   testgen-module-name = !"TestGen"
   
-  testgen-num-files-per-group = !30
-  testgen-num-groups = !3
+  testgen-num-files-per-group = !10
+  testgen-num-groups = !1
   
   testgen-min-entities = !3
   testgen-max-entities = !5
   
-  testgen-min-properties = !1
-  testgen-max-properties = !5
+  testgen-min-properties = !30
+  testgen-max-properties = !100
+  testgen-max-usertype-properties = !1
   
   testgen-min-functions = !1
   testgen-max-functions = !5
@@ -49,8 +50,9 @@
     _ -> type
     with
       primtypes := <primitive-types>;
-      usertypes := <map(\Def([_, name|_]) -> name\)> <index-get-children(|Entity(), "")> Def([Module(), <testgen-module-name>]); 
-      types := <conc> (primtypes, usertypes);
+      usertypes := <map(\Def([_, name|_]) -> name\)> <index-get-children(|Entity(), "")> Def([Module(), <testgen-module-name>]);
+      (<take(|<testgen-max-usertype-properties>)> usertypes <+ !usertypes) => usertypes';
+      types := <concat> [primtypes, primtypes, primtypes, primtypes, usertypes'];
       type := <random-list-item> types
   
 rules // Random strategies

Modified: spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str
==============================================================================
--- spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str	Tue Nov 27 00:55:30 2012	(r25736)
+++ spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str	Mon Dec  3 09:14:31 2012	(r25737)
@@ -331,7 +331,7 @@
   index-analyze(do-analysis):
     files -> allResults
     with
-      <debug(!"index-analyze: ")> files;
+      //<debug(!"index-analyze: ")> files;
       asts      := <map(index-parse-file)> files; 
       data      := <map(\(ast, file) -> (ast, file, <project-path>)\)> asts;
       results   := <do-analysis> data;

From gabrielkonat at gmail.com  Mon Dec  3 13:04:47 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 12:04:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25738 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	main/java/org/spoofax/interpreter/library/language
	test/java/org/spoofax/interpreter/library...
Message-ID: <20121203120447.63397CC1BB@mx4.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 12:04:46 2012
New Revision: 25738
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25738&sc=1

Log:
Renamed "file" to "partition".
Cleanup.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IIndex.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/ISemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/Index.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntry.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntryFactory.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntryFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexManager.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartition.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartitionDescriptor.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexStatistics.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexStatistics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexURI.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexURI.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithPartitionDescriptor.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithFileDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionIndex.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexSymbolTableTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/SemanticIndexSymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/SemanticIndexTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexAddPerformanceTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexAddPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexClearPerformanceTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexClearPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetChildsPerformanceTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetChildsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetKeyPartitionsPerformanceTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetKeyPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionElementsPerformanceTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPartitionElementsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionsPerformanceTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPerformanceTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPerformanceTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPersistPerformanceTest.java
      - copied, changed from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexPersistPerformanceTest.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/ISemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntryFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexStatistics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexURI.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithFileDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/SemanticIndexSymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/SemanticIndexTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexAddPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexClearPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetChildsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetKeyPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPartitionElementsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexPersistPerformanceTest.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/INotificationService.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_add.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_all.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_commit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_end_transaction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_in_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_children.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_current_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_file_revision.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_newer_than.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_reload.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_set_current_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_setup.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/NotificationCenter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/CSVResultsConsumer.java

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IIndex.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/ISemanticIndex.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/ISemanticIndex.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IIndex.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -8,134 +8,137 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public interface ISemanticIndex {
+/**
+ * @author Gabri?l Konat
+ */
+public interface IIndex {
+    /**
+     * Initializes this index.
+     */
+    public abstract void initialize(ITermFactory factory, IOAgent agent);
+
+    /**
+     * Gets the entry factory used by this index.
+     */
+    public abstract IndexEntryFactory getFactory();
+
+    /**
+     * Adds a new entry to the index.
+     * 
+     * @param entry The entry to add.
+     * @param partitionDescriptor The partition to associate the entry with.
+     */
+    public abstract void add(IStrategoAppl entry, IndexPartitionDescriptor partitionDescriptor);
+
+    /**
+     * Adds a new entry to the index.
+     * 
+     * @param entry The entry to add.
+     */
+    public abstract void add(IndexEntry entry);
+
+    /**
+     * Adds a list of entries to the index.
+     * 
+     * @param entries The entries to add.
+     * @param partitionDescriptor The partition to associate the entries with.
+     */
+    public abstract void addAll(IStrategoList entries, IndexPartitionDescriptor partitionDescriptor);
+
+    /**
+     * Removes all entries that match given template and are from given partition. 
+     * Warning: VERY SLOW!
+     * 
+     * @param template The template to match entries against.
+     * @param partitionDescriptor The partition entries will be removed from.
+     */
+    public abstract void remove(IStrategoAppl template, IndexPartitionDescriptor partitionDescriptor);
+
+    /**
+     * Gets all entries that match given template.
+     * 
+     * @param template The template to match entries against.
+     */
+    public abstract Collection<IndexEntry> getEntries(IStrategoAppl template);
+
+    /**
+     * Gets all entries.
+     */
+    public abstract Collection<IndexEntry> getAllEntries();
+
+    /**
+     * Gets all child entries for URI in given template.
+     * 
+     * @param template The template to match entries against.
+     */
+    public abstract Collection<IndexEntry> getEntryChildTerms(IStrategoAppl template);
+
+    /**
+     * Gets all entries for given partition descriptor.
+     * 
+     * @param partitionDescriptor The partition descriptor to match entries against.
+     */
+    public abstract Collection<IndexEntry> getEntriesInPartition(IndexPartitionDescriptor partitionDescriptor);
+
+    /**
+     * Gets all partitions that contain entries that match given template. Returned collection is a set of partitions,
+     * it does not contain duplicates.
+     * 
+     * @param template The template to match entries against.
+     */
+    public abstract Collection<IndexPartitionDescriptor> getPartitionsOf(IStrategoAppl template);
+
+    /**
+     * Gets an index partition for given partition descriptor.
+     * 
+     * @param partitionDescriptor A partition descriptor.
+     */
+    public abstract IndexPartition getPartition(IndexPartitionDescriptor partitionDescriptor);
+
+    /**
+     * Gets an index partition descriptor for given partition term.
+     * 
+     * @param partitionTerm A string or (string, string) tuple with a file name or the file name and partition
+     *            identifier.
+     */
+    public abstract IndexPartitionDescriptor getPartitionDescriptor(IStrategoTerm partitionTerm);
+
+    /**
+     * Removes all entries in given partition term and removes the partition itself.
+     * 
+     * @param partitionTerm A string or (string, string) tuple with a file name or the file name and partition
+     *            identifier.
+     */
+    public abstract void removePartition(IStrategoTerm partitionTerm);
+
+    /**
+     * Removes all entries for given partition and removes the partition itself.
+     * 
+     * @param partitionDescriptor A partition descriptor.
+     */
+    public abstract void removePartition(IndexPartitionDescriptor partitionDescriptor);
+
+    /**
+     * Gets all partitions that are in the index.
+     */
+    public abstract Collection<IndexPartition> getAllPartitions();
+
+    /**
+     * Gets all partition descriptors that are in the index.
+     */
+    public abstract Collection<IndexPartitionDescriptor> getAllPartitionDescriptors();
+
+    /**
+     * Clears the entire index.
+     */
+    public abstract void clear();
+
+    /**
+     * Returns the index as a Stratego term.
+     * 
+     * @param includePositions
+     */
+    public abstract IStrategoTerm toTerm(boolean includePositions);
 
-	/**
-	 * Initializes this semantic index.
-	 */
-	public abstract void initialize(ITermFactory factory, IOAgent agent);
-
-	/**
-	 * Gets the entry factory used by this semantic index.
-	 */
-	public abstract SemanticIndexEntryFactory getFactory();
-
-	/**
-	 * Adds a new entry to the index.
-	 * 
-	 * @param entry				The entry to add.
-	 * @param fileDescriptor  	The file to associate the entry with.
-	 */
-	public abstract void add(IStrategoAppl entry, SemanticIndexFileDescriptor fileDescriptor);
-	
-	/**
-	 * Adds a new entry to the index.
-	 * 
-	 * @param entry	The entry to add.
-	 */
-	public abstract void add(SemanticIndexEntry entry);
-
-	/**
-	 * Adds a list of entries to the index.
-	 * 
-	 * @param entries			The entries to add.
-	 * @param fileDescriptor	The file to associate the entries with.
-	 */
-	public abstract void addAll(IStrategoList entries, SemanticIndexFileDescriptor fileDescriptor);
-	
-	/**
-	 * Removes all entries that match given template and are from given file.
-	 * Warning: VERY SLOW!
-	 * 
-	 * @param template			The template to match entries against.
-	 * @param fileDescriptor	The file entries must be from.
-	 */
-	public abstract void remove(IStrategoAppl template, SemanticIndexFileDescriptor fileDescriptor);
-	
-	/**
-	 * Gets all entries that match given template.
-	 * 
-	 * @param template	The template to match entries against.
-	 */
-	public abstract Collection<SemanticIndexEntry> getEntries(IStrategoAppl template);
-	
-	/**
-	 * Gets all entries.
-	 */
-	public abstract Collection<SemanticIndexEntry> getAllEntries();
-
-	/**
-	 * Gets all child entries for URI in given template.
-	 * 
-	 * @param template	The template to match entries against.
-	 */
-	public abstract Collection<SemanticIndexEntry> getEntryChildTerms(IStrategoAppl template);
-	
-	/**
-	 * Gets all entries for given file descriptor.
-	 * 
-	 * @param fileDescriptor	The file descriptor to match entries against.
-	 */
-	public abstract Collection<SemanticIndexEntry> getEntriesInFile(SemanticIndexFileDescriptor fileDescriptor);
-
-  /**
-   * Gets all files that contain entries that match given template.
-   * Returned collection is a set of files, it does not contain duplicates.
-   * 
-   * @param template  The template to match entries against.
-   */
-	public abstract Collection<SemanticIndexFileDescriptor> getFilesOf(IStrategoAppl template);
-	
-	/**
-	 * Gets a semantic index file for given file descriptor.
-	 * 
-	 * @param fileDescriptor	A file descriptor.
-	 */
-	public abstract SemanticIndexFile getFile(SemanticIndexFileDescriptor fileDescriptor);
-	
-	/**
-	 * Gets a semantic index file descriptor for given file term.
-	 * 
-	 * @param fileTerm	A string or (string, string) tuple with the filename or the filename and subfilename.
-	 */
-	public abstract SemanticIndexFileDescriptor getFileDescriptor(IStrategoTerm fileTerm);
-	
-	/**
-	 * Removes all entries in given file term and removes the file itself.
-	 * 
-	 * @param fileTerm	A string or (string, string) tuple with the filename or the filename and subfilename.
-	 */
-	public abstract void removeFile(IStrategoTerm fileTerm);
-	
-	/**
-	 * Removes all entries for given file and removes the file itself.
-	 * 
-	 * @param fileDescriptor	A file descriptor.
-	 */
-	public abstract void removeFile(SemanticIndexFileDescriptor fileDescriptor);
-
-	/**
-	 * Gets all files that are in the semantic index.
-	 */
-	public abstract Collection<SemanticIndexFile> getAllFiles();
-	
-	/**
-	 * Gets all file descriptors that are in the semantic index.
-	 */
-	public abstract Collection<SemanticIndexFileDescriptor> getAllFileDescriptors();
-
-	/**
-	 * Clears the entire semantic index.
-	 */
-	public abstract void clear();
-
-	/**
-	 * Returns the semantic index as a stratego term.
-	 * 
-	 * @param includePositions
-	 */
-	public abstract IStrategoTerm toTerm(boolean includePositions);
-
-	public abstract String toString();
-
-}
\ No newline at end of file
+    public abstract String toString();
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/INotificationService.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/INotificationService.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/INotificationService.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -6,34 +6,32 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public interface INotificationService {
-	
-	/**
-	 * Notify listener of a added/removed/changed file.
-	 */
-	void notifyFileChanges(URI file, String subfile);
-	
-	/**
-	 * Notify listeners of multiple added/removed/changed files.
-	 */
-	void notifyFileChanges(FileSubfile[] files);
+    /**
+     * Notify listener of a added/removed/changed file.
+     */
+    void notifyFileChanges(URI file, String subfile);
 
-	/**
-	 * Notify listener of a new project.
-	 * All files in it should be compared to the
-	 * timestamps or other metadata stored about them.
-	 */
-	void notifyNewProject(URI project);
-	
-	/**
-	 * Container for file URI and subfile name.
-	 */
-	public class FileSubfile {
-		public FileSubfile(URI file, String subfile) {
-			this.file = file;
-			this.subfile = subfile;
-		}
-		
-		public URI file;
-		public String subfile;
-	}
+    /**
+     * Notify listeners of multiple added/removed/changed files.
+     */
+    void notifyFileChanges(FileSubfile[] files);
+
+    /**
+     * Notify listener of a new project. All files in it should be compared to the timestamps or other metadata stored
+     * about them.
+     */
+    void notifyNewProject(URI project);
+
+    /**
+     * Container for file URI and subfile name.
+     */
+    public class FileSubfile {
+        public FileSubfile(URI file, String subfile) {
+            this.file = file;
+            this.subfile = subfile;
+        }
+
+        public URI file;
+        public String subfile;
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/Index.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndex.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndex.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/Index.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -27,291 +27,283 @@
 import com.google.common.collect.LinkedHashMultimap;
 import com.google.common.collect.Multimap;
 
-public class SemanticIndex implements ISemanticIndex {
-	public static final boolean DEBUG_ENABLED = SemanticIndex.class.desiredAssertionStatus();
-	
-	private static final int expectedDistinctPartitions = 100;
-	private static final int expectedValuesPerPartition = 1000;
-	
-	private final ConcurrentHashMap<SemanticIndexURI, Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry>> entries = 
-	    new ConcurrentHashMap<SemanticIndexURI, Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry>>();
-	private final ConcurrentHashMap<SemanticIndexURI, Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry>> childs = 
-	    new ConcurrentHashMap<SemanticIndexURI, Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry>>();
-	private final Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> entriesPerFileDescriptor = 
-	    LinkedHashMultimap.create();
-	private final Multimap<URI, SemanticIndexEntry> entriesPerURI = 
-	    LinkedHashMultimap.create();
-	private final Multimap<IStrategoList, SemanticIndexEntry> entriesPerSubfile = 
-	    LinkedHashMultimap.create();
-	private final Map<SemanticIndexFileDescriptor, SemanticIndexFile> files =
-			new HashMap<SemanticIndexFileDescriptor, SemanticIndexFile>();
-	
-	private static final IStrategoConstructor FILE_ENTRIES_CON =
-			new TermFactory().makeConstructor("FileEntries", 2);
-	
-	private IOAgent agent;
-	private ITermFactory termFactory;
-	private SemanticIndexEntryFactory factory;
-	
-	public void initialize(ITermFactory factory, IOAgent agent) {
-		this.agent = agent;
-		this.factory = new SemanticIndexEntryFactory(factory);
-		this.termFactory = factory;
-	}
-
-	public void ensureInitialized() {
-		if (factory == null)
-			throw new IllegalStateException("Semantic index not initialized");
-	}
-
-	public SemanticIndexEntryFactory getFactory() {
-		return factory;
-	}
-	
-  private Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> innerEntries(
-      SemanticIndexURI uri)
-  {
-    Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> innerMap = 
-        ArrayListMultimap.create(expectedDistinctPartitions, 
-            expectedValuesPerPartition);
-   
-    Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> ret = entries.putIfAbsent(uri, innerMap);
-    if(ret == null)
-      ret = innerMap;
-    return ret;
-  }
-  
-  private Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> innerChildEntries(
-      SemanticIndexURI uri)
-  {
-    Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> innerMap = 
-        ArrayListMultimap.create(expectedDistinctPartitions, 
-            expectedValuesPerPartition);
-   
-    Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> ret = childs.putIfAbsent(uri, innerMap);
-    if(ret == null)
-      ret = innerMap;
-    return ret;
-  } 
-	
-	public void add(IStrategoAppl entry, SemanticIndexFileDescriptor fileDescriptor) {
-		ensureInitialized();
-		
-		IStrategoConstructor constructor = entry.getConstructor();
-		IStrategoTerm contentsType = factory.getEntryContentsType(entry);
-		IStrategoList id = factory.getEntryId(entry);
-		IStrategoTerm namespace = factory.getEntryNamespace(entry);
-		IStrategoTerm contents = factory.getEntryContents(entry);
-		
-		SemanticIndexEntry newEntry = 
-				factory.createEntry(constructor, namespace, id, contentsType, contents, fileDescriptor);
-
-		add(newEntry);
-	}
-
-	public void add(SemanticIndexEntry entry) {
-	  final SemanticIndexFileDescriptor file = entry.getFileDescriptor();
-	  final SemanticIndexURI uri = entry.getURI();
-	  
-		addOrGetFile(file);
-		
-		innerEntries(uri).put(file, entry);
-		
-		// Add entry to childs.
-		SemanticIndexURI parent = uri.getParent();
-		if(parent != null)
-		  innerChildEntries(parent).put(file, entry);
-
-		// Add entry to files.
-		entriesPerFileDescriptor.put(file, entry);
-		entriesPerURI.put(file.getURI(), entry);
-		entriesPerSubfile.put(file.getSubfile(), entry);
-	}
-	
-	public void addAll(IStrategoList entries, SemanticIndexFileDescriptor fileDescriptor) {
-		while(!entries.isEmpty()) {
-			add((IStrategoAppl) entries.head(), fileDescriptor);
-			entries = entries.tail();
-		}
-	}
-
-  public void remove(IStrategoAppl template, SemanticIndexFileDescriptor fileDescriptor) {
-    SemanticIndexURI uri = factory.createURIFromTemplate(template);
-    Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> entryValues = entries.get(uri);
-    Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> childValues = childs.get(uri.getParent());
-    Collection<SemanticIndexEntry> removedEntries = entryValues.removeAll(fileDescriptor);
-    
-    for(SemanticIndexEntry entry : removedEntries)
-    {
-      childValues.remove(fileDescriptor, entry);
-      entriesPerFileDescriptor.remove(fileDescriptor, entry);
-      entriesPerURI.remove(fileDescriptor.getURI(), entry);
-      entriesPerSubfile.remove(fileDescriptor.getSubfile(), entry);
-    }
-  }
-	
-	public Collection<SemanticIndexEntry> getEntries(IStrategoAppl template) {
-	  SemanticIndexURI uri = factory.createURIFromTemplate(template);
-		return getCollection(innerEntries(uri).values());
-	}
-
-	public Collection<SemanticIndexEntry> getEntryChildTerms(IStrategoAppl template) {
-	  SemanticIndexURI uri = factory.createURIFromTemplate(template);
-		return getCollection(innerChildEntries(uri).values());
-	}
-	
-	public Collection<SemanticIndexEntry> getEntriesInFile(SemanticIndexFileDescriptor fileDescriptor) {
-		if(fileDescriptor.getSubfile() == null)
-			return getCollection(entriesPerURI.get(fileDescriptor.getURI()));
-		else if(fileDescriptor.getURI() == null)
-			return getCollection(entriesPerSubfile.get(fileDescriptor.getSubfile()));
-		else
-			return getCollection(entriesPerFileDescriptor.get(fileDescriptor));
-	}
-	
-	public Collection<SemanticIndexFileDescriptor> getFilesOf(IStrategoAppl template)
-	{
-	  SemanticIndexURI uri = factory.createURIFromTemplate(template);
-	  return getCollection(innerEntries(uri).keySet());
-	}
-	
-	public Collection<SemanticIndexEntry> getAllEntries() {
-	  List<SemanticIndexEntry> allEntries = new LinkedList<SemanticIndexEntry>();
-		Collection<Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry>> values = entries.values();
-		for(Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> map : values)
-		  allEntries.addAll(map.values());
-		
-		return allEntries;
-	}
-	
-	public SemanticIndexFile getFile(SemanticIndexFileDescriptor fileDescriptor) {
-		return addOrGetFile(fileDescriptor);
-	}
-	
-	private SemanticIndexFile addOrGetFile(SemanticIndexFileDescriptor fileDescriptor) {
-		SemanticIndexFile file = files.get(fileDescriptor);
-		if(file == null) {
-			file = new SemanticIndexFile(fileDescriptor, null);
-			files.put(fileDescriptor, file);
-		}
-		return file;
-	}
-	
-	public SemanticIndexFileDescriptor getFileDescriptor(IStrategoTerm fileTerm) {
-		return SemanticIndexFileDescriptor.fromTerm(agent, fileTerm);
-	}
-	
-	public void removeFile(IStrategoTerm fileTerm) {
-		removeFile(getFileDescriptor(fileTerm));
-	}
-	
-	public void removeFile(SemanticIndexFileDescriptor fileDescriptor) {
-		clearFile(fileDescriptor);
-	}
-	
-	private void clearFile(SemanticIndexFileDescriptor fileDescriptor) {
-	  assert fileDescriptor.getSubfile() != null || fileDescriptor.getURI() != null;
-	  
-	  Collection<Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry>> entryValues = entries.values();
-    for(Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> map : entryValues)
-      map.removeAll(fileDescriptor);
-    
-    Collection<Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry>> childValues = childs.values();
-    for(Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> map : childValues)
-      map.removeAll(fileDescriptor);
-    
-    if(fileDescriptor.getSubfile() == null)
-      entriesPerURI.removeAll(fileDescriptor.getURI());
-    else if(fileDescriptor.getURI() == null)
-      entriesPerSubfile.removeAll(fileDescriptor.getSubfile());
-    else
-    {
-      entriesPerFileDescriptor.removeAll(fileDescriptor);
-      clearFile(new SemanticIndexFileDescriptor(fileDescriptor.getURI(), null));
-      clearFile(new SemanticIndexFileDescriptor(null, fileDescriptor.getSubfile()));
-    }
-    
-		assert getEntriesInFile(fileDescriptor).isEmpty();
-	}
-	
-	public Collection<SemanticIndexFile> getAllFiles() {
-		return getCollection(files.values());
-	}
-	
-	public Collection<SemanticIndexFileDescriptor> getAllFileDescriptors() {
-		return getCollection(files.keySet());
-	}
-	
-	public void clear() {
-		entries.clear();
-		childs.clear();
-		entriesPerFileDescriptor.clear();
-		entriesPerURI.clear();
-		entriesPerSubfile.clear();
-		files.clear();
-	}
-	
-	public IStrategoTerm toTerm(boolean includePositions) {
-		IStrategoList results = termFactory.makeList();
-		for(SemanticIndexFileDescriptor fileDescriptor : files.keySet()) {
-			IStrategoList fileResults = SemanticIndexEntry.toTerms(termFactory, entriesPerFileDescriptor.get(fileDescriptor));
-			// TODO: include time stamp for file
-			IStrategoTerm result = termFactory.makeAppl(FILE_ENTRIES_CON, fileDescriptor.toTerm(termFactory), fileResults);
-			results = termFactory.makeListCons(result, results);
-		}
-		
-		if (includePositions) {
-			// TODO: optimize -- store more compact attachments for positions
-			TermFactory simpleFactory = new TermFactory();
-			TermAttachmentSerializer serializer = new TermAttachmentSerializer(simpleFactory);
-			results = (IStrategoList) serializer.toAnnotations(results);
-		}
-		
-		return results;
-	}
-	
-	public static SemanticIndex fromTerm(IStrategoTerm term, ITermFactory factory, IOAgent agent,
-			boolean extractPositions) throws IOException {
-		
-		if (extractPositions) {
-			TermAttachmentSerializer serializer = new TermAttachmentSerializer(factory);
-			term = (IStrategoList) serializer.fromAnnotations(term, false);
-		}
-		
-		if (isTermList(term)) {
-			SemanticIndex result = new SemanticIndex();
-			result.initialize(factory, agent);
-			for (IStrategoList list = (IStrategoList) term; !list.isEmpty(); list = list.tail()) {
-				result.loadFileEntriesTerm(list.head());
-			}
-			return result;
-		} else {
-			throw new IOException("Expected list of " + FILE_ENTRIES_CON.getName());
-		}
-	}
-	
-	private void loadFileEntriesTerm(IStrategoTerm fileEntries) throws IOException {
-		if (tryGetConstructor(fileEntries) == FILE_ENTRIES_CON) {
-			try {
-				addAll((IStrategoList) termAt(fileEntries, 1), getFileDescriptor(termAt(fileEntries, 0)));
-			} catch (IllegalStateException e) {
-				throw new IllegalStateException(e);
-			} catch (RuntimeException e) { // HACK: catch all runtime exceptions
-				throw new IOException("Unexpected exception reading index: " + e);
-			}
-		} else {
-			throw new IOException("Illegal index entry: " + fileEntries);
-		}
-	}
-	
-	/**
-	 * Returns an unmodifiable collection if in debug mode, or the collection if not.
-	 */
-	private static final <T> Collection<T> getCollection(Collection<T> collection) {
-		if(DEBUG_ENABLED) {
-			return Collections.unmodifiableCollection(collection);
-		} else {
-			return collection;
-		}
-	}
+/**
+ * @author Gabri?l Konat
+ */
+public class Index implements IIndex {
+    public static final boolean DEBUG_ENABLED = Index.class.desiredAssertionStatus();
+
+    private static final int EXPECTED_DISTINCT_PARTITIONS = 100;
+    private static final int EXPECTED_VALUES_PER_PARTITION = 1000;
+    private static final IStrategoConstructor FILE_ENTRIES_CON = new TermFactory().makeConstructor("PartitionEntries",
+        2);
+
+    private final ConcurrentHashMap<IndexURI, Multimap<IndexPartitionDescriptor, IndexEntry>> entries =
+        new ConcurrentHashMap<IndexURI, Multimap<IndexPartitionDescriptor, IndexEntry>>();
+    private final ConcurrentHashMap<IndexURI, Multimap<IndexPartitionDescriptor, IndexEntry>> childs =
+        new ConcurrentHashMap<IndexURI, Multimap<IndexPartitionDescriptor, IndexEntry>>();
+    private final Multimap<IndexPartitionDescriptor, IndexEntry> entriesPerPartitionDescriptor = LinkedHashMultimap
+        .create();
+    private final Multimap<URI, IndexEntry> entriesPerURI = LinkedHashMultimap.create();
+    private final Multimap<IStrategoList, IndexEntry> entriesPerSubpartition = LinkedHashMultimap.create();
+    private final Map<IndexPartitionDescriptor, IndexPartition> partitions =
+        new HashMap<IndexPartitionDescriptor, IndexPartition>();
+
+    private IOAgent agent;
+    private ITermFactory termFactory;
+    private IndexEntryFactory factory;
+
+    public void initialize(ITermFactory factory, IOAgent agent) {
+        this.agent = agent;
+        this.factory = new IndexEntryFactory(factory);
+        this.termFactory = factory;
+    }
+
+    public void ensureInitialized() {
+        if(factory == null)
+            throw new IllegalStateException("Index not initialized");
+    }
+
+    public IndexEntryFactory getFactory() {
+        return factory;
+    }
+
+    private Multimap<IndexPartitionDescriptor, IndexEntry> innerEntries(IndexURI uri) {
+        Multimap<IndexPartitionDescriptor, IndexEntry> innerMap =
+            ArrayListMultimap.create(EXPECTED_DISTINCT_PARTITIONS, EXPECTED_VALUES_PER_PARTITION);
+
+        Multimap<IndexPartitionDescriptor, IndexEntry> ret = entries.putIfAbsent(uri, innerMap);
+        if(ret == null)
+            ret = innerMap;
+        return ret;
+    }
+
+    private Multimap<IndexPartitionDescriptor, IndexEntry> innerChildEntries(IndexURI uri) {
+        Multimap<IndexPartitionDescriptor, IndexEntry> innerMap =
+            ArrayListMultimap.create(EXPECTED_DISTINCT_PARTITIONS, EXPECTED_VALUES_PER_PARTITION);
+
+        Multimap<IndexPartitionDescriptor, IndexEntry> ret = childs.putIfAbsent(uri, innerMap);
+        if(ret == null)
+            ret = innerMap;
+        return ret;
+    }
+
+    public void add(IStrategoAppl entry, IndexPartitionDescriptor partitionDescriptor) {
+        ensureInitialized();
+
+        IStrategoConstructor constructor = entry.getConstructor();
+        IStrategoTerm contentsType = factory.getEntryContentsType(entry);
+        IStrategoList id = factory.getEntryId(entry);
+        IStrategoTerm namespace = factory.getEntryNamespace(entry);
+        IStrategoTerm contents = factory.getEntryContents(entry);
+
+        IndexEntry newEntry =
+            factory.createEntry(constructor, namespace, id, contentsType, contents, partitionDescriptor);
+
+        add(newEntry);
+    }
+
+    public void add(IndexEntry entry) {
+        final IndexPartitionDescriptor partition = entry.getPartitionDescriptor();
+        final IndexURI uri = entry.getURI();
+
+        addOrGetPartition(partition);
+
+        innerEntries(uri).put(partition, entry);
+
+        // Add entry to children.
+        IndexURI parent = uri.getParent();
+        if(parent != null)
+            innerChildEntries(parent).put(partition, entry);
+
+        // Add entry to partitions.
+        entriesPerPartitionDescriptor.put(partition, entry);
+        entriesPerURI.put(partition.getURI(), entry);
+        entriesPerSubpartition.put(partition.getPartition(), entry);
+    }
+
+    public void addAll(IStrategoList entries, IndexPartitionDescriptor partitionDescriptor) {
+        while(!entries.isEmpty()) {
+            add((IStrategoAppl) entries.head(), partitionDescriptor);
+            entries = entries.tail();
+        }
+    }
+
+    public void remove(IStrategoAppl template, IndexPartitionDescriptor partitionDescriptor) {
+        IndexURI uri = factory.createURIFromTemplate(template);
+        Multimap<IndexPartitionDescriptor, IndexEntry> entryValues = entries.get(uri);
+        Multimap<IndexPartitionDescriptor, IndexEntry> childValues = childs.get(uri.getParent());
+        Collection<IndexEntry> removedEntries = entryValues.removeAll(partitionDescriptor);
+
+        for(IndexEntry entry : removedEntries) {
+            childValues.remove(partitionDescriptor, entry);
+            entriesPerPartitionDescriptor.remove(partitionDescriptor, entry);
+            entriesPerURI.remove(partitionDescriptor.getURI(), entry);
+            entriesPerSubpartition.remove(partitionDescriptor.getPartition(), entry);
+        }
+    }
+
+    public Collection<IndexEntry> getEntries(IStrategoAppl template) {
+        IndexURI uri = factory.createURIFromTemplate(template);
+        return getCollection(innerEntries(uri).values());
+    }
+
+    public Collection<IndexEntry> getEntryChildTerms(IStrategoAppl template) {
+        IndexURI uri = factory.createURIFromTemplate(template);
+        return getCollection(innerChildEntries(uri).values());
+    }
+
+    public Collection<IndexEntry> getEntriesInPartition(IndexPartitionDescriptor partitionDescriptor) {
+        if(partitionDescriptor.getPartition() == null)
+            return getCollection(entriesPerURI.get(partitionDescriptor.getURI()));
+        else if(partitionDescriptor.getURI() == null)
+            return getCollection(entriesPerSubpartition.get(partitionDescriptor.getPartition()));
+        else
+            return getCollection(entriesPerPartitionDescriptor.get(partitionDescriptor));
+    }
+
+    public Collection<IndexPartitionDescriptor> getPartitionsOf(IStrategoAppl template) {
+        IndexURI uri = factory.createURIFromTemplate(template);
+        return getCollection(innerEntries(uri).keySet());
+    }
+
+    public Collection<IndexEntry> getAllEntries() {
+        List<IndexEntry> allEntries = new LinkedList<IndexEntry>();
+        Collection<Multimap<IndexPartitionDescriptor, IndexEntry>> values = entries.values();
+        for(Multimap<IndexPartitionDescriptor, IndexEntry> map : values)
+            allEntries.addAll(map.values());
+
+        return allEntries;
+    }
+
+    public IndexPartition getPartition(IndexPartitionDescriptor partitionDescriptor) {
+        return addOrGetPartition(partitionDescriptor);
+    }
+
+    private IndexPartition addOrGetPartition(IndexPartitionDescriptor partitionDescriptor) {
+        IndexPartition partition = partitions.get(partitionDescriptor);
+        if(partition == null) {
+            partition = new IndexPartition(partitionDescriptor, null);
+            partitions.put(partitionDescriptor, partition);
+        }
+        return partition;
+    }
+
+    public IndexPartitionDescriptor getPartitionDescriptor(IStrategoTerm partitionTerm) {
+        return IndexPartitionDescriptor.fromTerm(agent, partitionTerm);
+    }
+
+    public void removePartition(IStrategoTerm partitionTerm) {
+        removePartition(getPartitionDescriptor(partitionTerm));
+    }
+
+    public void removePartition(IndexPartitionDescriptor partitionDescriptor) {
+        clearPartition(partitionDescriptor);
+    }
+
+    private void clearPartition(IndexPartitionDescriptor partitionDescriptor) {
+        assert partitionDescriptor.getPartition() != null || partitionDescriptor.getURI() != null;
+
+        Collection<Multimap<IndexPartitionDescriptor, IndexEntry>> entryValues = entries.values();
+        for(Multimap<IndexPartitionDescriptor, IndexEntry> map : entryValues)
+            map.removeAll(partitionDescriptor);
+
+        Collection<Multimap<IndexPartitionDescriptor, IndexEntry>> childValues = childs.values();
+        for(Multimap<IndexPartitionDescriptor, IndexEntry> map : childValues)
+            map.removeAll(partitionDescriptor);
+
+        if(partitionDescriptor.getPartition() == null)
+            entriesPerURI.removeAll(partitionDescriptor.getURI());
+        else if(partitionDescriptor.getURI() == null)
+            entriesPerSubpartition.removeAll(partitionDescriptor.getPartition());
+        else {
+            entriesPerPartitionDescriptor.removeAll(partitionDescriptor);
+            clearPartition(new IndexPartitionDescriptor(partitionDescriptor.getURI(), null));
+            clearPartition(new IndexPartitionDescriptor(null, partitionDescriptor.getPartition()));
+        }
+
+        assert getEntriesInPartition(partitionDescriptor).isEmpty();
+    }
+
+    public Collection<IndexPartition> getAllPartitions() {
+        return getCollection(partitions.values());
+    }
+
+    public Collection<IndexPartitionDescriptor> getAllPartitionDescriptors() {
+        return getCollection(partitions.keySet());
+    }
+
+    public void clear() {
+        entries.clear();
+        childs.clear();
+        entriesPerPartitionDescriptor.clear();
+        entriesPerURI.clear();
+        entriesPerSubpartition.clear();
+        partitions.clear();
+    }
+
+    public IStrategoTerm toTerm(boolean includePositions) {
+        IStrategoList results = termFactory.makeList();
+        for(IndexPartitionDescriptor partitionDescriptor : partitions.keySet()) {
+            IStrategoList partitionResults =
+                IndexEntry.toTerms(termFactory, entriesPerPartitionDescriptor.get(partitionDescriptor));
+            // TODO: include time stamp for partition
+            IStrategoTerm result =
+                termFactory.makeAppl(FILE_ENTRIES_CON, partitionDescriptor.toTerm(termFactory), partitionResults);
+            results = termFactory.makeListCons(result, results);
+        }
+
+        if(includePositions) {
+            // TODO: optimize -- store more compact attachments for positions
+            TermFactory simpleFactory = new TermFactory();
+            TermAttachmentSerializer serializer = new TermAttachmentSerializer(simpleFactory);
+            results = (IStrategoList) serializer.toAnnotations(results);
+        }
+
+        return results;
+    }
+
+    public static Index fromTerm(IStrategoTerm term, ITermFactory factory, IOAgent agent, boolean extractPositions)
+        throws IOException {
+        if(extractPositions) {
+            TermAttachmentSerializer serializer = new TermAttachmentSerializer(factory);
+            term = (IStrategoList) serializer.fromAnnotations(term, false);
+        }
+
+        if(isTermList(term)) {
+            Index result = new Index();
+            result.initialize(factory, agent);
+            for(IStrategoList list = (IStrategoList) term; !list.isEmpty(); list = list.tail()) {
+                result.loadPartitionEntriesTerm(list.head());
+            }
+            return result;
+        } else {
+            throw new IOException("Expected list of " + FILE_ENTRIES_CON.getName());
+        }
+    }
+
+    private void loadPartitionEntriesTerm(IStrategoTerm partitionEntries) throws IOException {
+        if(tryGetConstructor(partitionEntries) == FILE_ENTRIES_CON) {
+            try {
+                addAll((IStrategoList) termAt(partitionEntries, 1), getPartitionDescriptor(termAt(partitionEntries, 0)));
+            } catch(IllegalStateException e) {
+                throw new IllegalStateException(e);
+            } catch(RuntimeException e) { // HACK: catch all runtime exceptions
+                throw new IOException("Unexpected exception reading index: " + e);
+            }
+        } else {
+            throw new IOException("Illegal index entry: " + partitionEntries);
+        }
+    }
+
+    /**
+     * Returns an unmodifiable collection if in debug mode, or the collection if not.
+     */
+    private static final <T> Collection<T> getCollection(Collection<T> collection) {
+        if(DEBUG_ENABLED) {
+            return Collections.unmodifiableCollection(collection);
+        } else {
+            return collection;
+        }
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntry.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntry.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntry.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntry.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -9,129 +9,126 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 
-public class SemanticIndexEntry implements Serializable {
-
-  private static final long serialVersionUID = -1073077973341978805L;
-
-  private IStrategoTerm contents;
-	
-	private SemanticIndexURI uri;
-	
-	private SemanticIndexFileDescriptor fileDescriptor;
-	
-	private transient IStrategoAppl cachedTerm;
-
-	protected SemanticIndexEntry(IStrategoTerm contents, SemanticIndexURI uri, 
-			SemanticIndexFileDescriptor fileDescriptor) {
-		this.contents = contents;
-		this.uri = uri;
-		this.fileDescriptor = fileDescriptor;
-		
-		assert contents != null || uri.getConstructor().getArity() < 2 : "Contents can't be null for Use/2 or DefData/3";
-	}
-	
-	public IStrategoTerm getContents() {
-		return contents;
-	}
-	
-	public SemanticIndexURI getURI() {
-		return uri;
-	}
-	
-	public SemanticIndexFileDescriptor getFileDescriptor() {
-		return fileDescriptor;
-	}
-	
-	/**
-	 * Returns a term representation of this entry.
-	 */
-	public IStrategoAppl toTerm(ITermFactory factory) {
-		if (cachedTerm != null)
-			return cachedTerm;
-		
-		cachedTerm = uri.toTerm(factory, contents);
-		
-		return forceImploderAttachment(cachedTerm);
-	}
-	
-	/**
-	 * Returns a list with representations of given entries.
-	 */
-	public static IStrategoList toTerms(ITermFactory factory, Collection<SemanticIndexEntry> entries) {
-		IStrategoList results = factory.makeList();
-		for (SemanticIndexEntry entry : entries) {
-			results = factory.makeListCons(entry.toTerm(factory), results);
-		}
-		return results;
-	}
-	
-	/**
-	 * Force an imploder attachment for a term.
-	 * This ensures that there is always some form of position info,
-	 * and makes sure that origin info is not added to the term.
-	 * (The latter would be bad since we cache in {@link #cachedTerm}.)
-	 */
-	private IStrategoAppl forceImploderAttachment(IStrategoAppl term) {
-		ImploderAttachment attach = ImploderAttachment.get(uri.getId());
-		if (attach != null) {
-			ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(), attach.getRightToken());
-		} else {
-			String fn = fileDescriptor == null ? null : fileDescriptor.getURI().getPath();
-			attach = ImploderAttachment.createCompactPositionAttachment(fn, 0, 0, 0, -1);
-			term.putAttachment(attach);
-		}
-		return term;
-	}
-	
-	@Override
-	public String toString() {
-		String result = uri.toString();
-		if (contents != null) result += "," + contents; 
-		return result + ")";
-	}
-
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result
-				+ ((contents == null) ? 0 : contents.hashCode());
-		result = prime * result
-				+ ((fileDescriptor == null) ? 0 : fileDescriptor.hashCode());
-		result = prime * result + ((cachedTerm == null) ? 0 : cachedTerm.hashCode());
-		result = prime * result + ((uri == null) ? 0 : uri.hashCode());
-		return result;
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (!(obj instanceof SemanticIndexEntry))
-			return false;
-		SemanticIndexEntry other = (SemanticIndexEntry) obj;
-		if (contents == null) {
-			if (other.contents != null)
-				return false;
-		} else if (!contents.equals(other.contents))
-			return false;
-		if (fileDescriptor == null) {
-			if (other.fileDescriptor != null)
-				return false;
-		} else if (!fileDescriptor.equals(other.fileDescriptor))
-			return false;
-		if (cachedTerm == null) {
-			if (other.cachedTerm != null)
-				return false;
-		} else if (!cachedTerm.equals(other.cachedTerm))
-			return false;
-		if (uri == null) {
-			if (other.uri != null)
-				return false;
-		} else if (!uri.equals(other.uri))
-			return false;
-		return true;
-	}
+/**
+ * @author Gabri?l Konat
+ */
+public class IndexEntry implements Serializable {
+    private static final long serialVersionUID = -1073077973341978805L;
+
+    private IStrategoTerm contents;
+    private IndexURI uri;
+    private IndexPartitionDescriptor partitionDescriptor;
+
+    private transient IStrategoAppl cachedTerm;
+
+    protected IndexEntry(IStrategoTerm contents, IndexURI uri, IndexPartitionDescriptor partitionDescriptor) {
+        this.contents = contents;
+        this.uri = uri;
+        this.partitionDescriptor = partitionDescriptor;
+
+        assert contents != null || uri.getConstructor().getArity() < 2 : "Contents can't be null for Use/2 or DefData/3";
+    }
+
+    public IStrategoTerm getContents() {
+        return contents;
+    }
+
+    public IndexURI getURI() {
+        return uri;
+    }
+
+    public IndexPartitionDescriptor getPartitionDescriptor() {
+        return partitionDescriptor;
+    }
+
+    /**
+     * Returns a term representation of this entry.
+     */
+    public IStrategoAppl toTerm(ITermFactory factory) {
+        if(cachedTerm != null)
+            return cachedTerm;
+
+        cachedTerm = uri.toTerm(factory, contents);
+
+        return forceImploderAttachment(cachedTerm);
+    }
+
+    /**
+     * Returns a list with representations of given entries.
+     */
+    public static IStrategoList toTerms(ITermFactory factory, Collection<IndexEntry> entries) {
+        IStrategoList results = factory.makeList();
+        for(IndexEntry entry : entries) {
+            results = factory.makeListCons(entry.toTerm(factory), results);
+        }
+        return results;
+    }
+
+    /**
+     * Force an imploder attachment for a term. This ensures that there is always some form of position info, and makes
+     * sure that origin info is not added to the term. (The latter would be bad since we cache in {@link #cachedTerm}.)
+     */
+    private IStrategoAppl forceImploderAttachment(IStrategoAppl term) {
+        ImploderAttachment attach = ImploderAttachment.get(uri.getId());
+        if(attach != null) {
+            ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(),
+                attach.getRightToken());
+        } else {
+            String fn = partitionDescriptor == null ? null : partitionDescriptor.getURI().getPath();
+            attach = ImploderAttachment.createCompactPositionAttachment(fn, 0, 0, 0, -1);
+            term.putAttachment(attach);
+        }
+        return term;
+    }
+
+    @Override
+    public String toString() {
+        String result = uri.toString();
+        if(contents != null)
+            result += "," + contents;
+        return result + ")";
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((contents == null) ? 0 : contents.hashCode());
+        result = prime * result + ((partitionDescriptor == null) ? 0 : partitionDescriptor.hashCode());
+        result = prime * result + ((cachedTerm == null) ? 0 : cachedTerm.hashCode());
+        result = prime * result + ((uri == null) ? 0 : uri.hashCode());
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if(this == obj)
+            return true;
+        if(obj == null)
+            return false;
+        if(!(obj instanceof IndexEntry))
+            return false;
+        IndexEntry other = (IndexEntry) obj;
+        if(contents == null) {
+            if(other.contents != null)
+                return false;
+        } else if(!contents.equals(other.contents))
+            return false;
+        if(partitionDescriptor == null) {
+            if(other.partitionDescriptor != null)
+                return false;
+        } else if(!partitionDescriptor.equals(other.partitionDescriptor))
+            return false;
+        if(cachedTerm == null) {
+            if(other.cachedTerm != null)
+                return false;
+        } else if(!cachedTerm.equals(other.cachedTerm))
+            return false;
+        if(uri == null) {
+            if(other.uri != null)
+                return false;
+        } else if(!uri.equals(other.uri))
+            return false;
+        return true;
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntryFactory.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntryFactory.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntryFactory.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntryFactory.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -13,116 +13,109 @@
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class SemanticIndexEntryFactory {
-	
-	@SuppressWarnings("unused")
-	private static final int DEFDATA_URI = 0;
-	
-	private static final int DEFDATA_TYPE = 1;
-	
-	private static final int DEFDATA_CONTENTS = 2;
-
-	private final ITermFactory termFactory;
-
-	private final TermAttachmentStripper stripper;
-
-	private final IStrategoConstructor defCon;
-
-	private final IStrategoConstructor defDataCon;
-
-	public SemanticIndexEntryFactory(ITermFactory termFactory) {
-		this.termFactory = termFactory;
-		this.stripper = new TermAttachmentStripper(termFactory);
-		defCon = termFactory.makeConstructor("Def", 1);
-		defDataCon = termFactory.makeConstructor("DefData", 3);
-	}
-	
-	public ITermFactory getTermFactory() {
-		return termFactory;
-	}
-	
-	public IStrategoConstructor getDefDataCon() {
-		return defDataCon;
-	}
-	
-	public IStrategoConstructor getDefCon() {
-		return defCon;
-	}
-	
-	public SemanticIndexURI createURI(IStrategoConstructor constructor,
-			IStrategoTerm namespace, IStrategoList id, IStrategoTerm contentsType) {
-		ImploderAttachment idAttachment = ImploderAttachment.getCompactPositionAttachment(id, true);
-		contentsType = stripper.strip(contentsType);
-		assert namespace == stripper.strip(namespace);
-		
-		id.putAttachment(idAttachment);
-		
-		return new SemanticIndexURI(constructor, namespace, id, contentsType);
-	}
-	
-	public SemanticIndexURI createURIFromTemplate(IStrategoAppl template) {
-		return createURI(template.getConstructor(), getEntryNamespace(template), getEntryId(template), 
-				getEntryContentsType(template));
-	}
-	
-	public SemanticIndexEntry createEntry(IStrategoConstructor constructor,
-			IStrategoTerm namespace, IStrategoList id, IStrategoTerm contentsType, IStrategoTerm contents,
-			SemanticIndexFileDescriptor fileDescriptor) {
-		return createEntry(contents, createURI(constructor, namespace, id, contentsType), fileDescriptor);
-	}
-	
-	public SemanticIndexEntry createEntry(IStrategoTerm contents, SemanticIndexURI uri, SemanticIndexFileDescriptor fileDescriptor) {
-		
-		ImploderAttachment dataAttachment =
-			contents == null ? null : ImploderAttachment.getCompactPositionAttachment(contents, false);
-		contents = stripper.strip(contents);
-		if (contents != null)
-			contents.putAttachment(dataAttachment);
-
-		return new SemanticIndexEntry(contents, uri, fileDescriptor);
-	}
-
-	/*private IStrategoList createSanitizedId(IStrategoList id) {
-		return (IStrategoList) stripper.strip(id);
-	}*/
-	
-	public IStrategoTerm getEntryContentsType(IStrategoAppl entry) {
-		IStrategoConstructor type = entry.getConstructor();
-		if (type == defDataCon) {
-			return entry.getSubterm(DEFDATA_TYPE);
-		} else {
-			return null;
-		}
-	}
-	
-	public IStrategoList getEntryId(IStrategoAppl entry) {
-		IStrategoTerm result = entry.getSubterm(0);
-		if (isTermList(result)) {
-			IStrategoList full = (IStrategoList) result;
-			return full.isEmpty() ? full : full.tail();
-		} else {
-			throw new IllegalArgumentException("Illegal index entry: " + entry);
-		}
-	}
-	
-	public IStrategoTerm getEntryNamespace(IStrategoAppl entry) {
-		IStrategoTerm result = entry.getSubterm(0);
-		if (isTermList(result)) {
-			IStrategoList full = (IStrategoList) result;
-			return stripper.strip(full.isEmpty() ? full : full.head());
-		} else {
-			throw new IllegalArgumentException("Illegal index entry: " + entry);
-		}
-	}
-	
-	public IStrategoTerm getEntryContents(IStrategoAppl entry) {
-		if (entry.getSubtermCount() == 3) {
-			return entry.getSubterm(DEFDATA_CONTENTS);
-		} else if (entry.getSubtermCount() == 2) {
-			return entry.getSubterm(1);
-		} else {
-			assert entry.getSubtermCount() < 3;
-			return null;
-		}
-	}
+public class IndexEntryFactory {
+    @SuppressWarnings("unused")
+    private static final int DEFDATA_URI = 0;
+    private static final int DEFDATA_TYPE = 1;
+    private static final int DEFDATA_CONTENTS = 2;
+
+    private final ITermFactory termFactory;
+    private final TermAttachmentStripper stripper;
+    private final IStrategoConstructor defCon;
+    private final IStrategoConstructor defDataCon;
+
+    public IndexEntryFactory(ITermFactory termFactory) {
+        this.termFactory = termFactory;
+        this.stripper = new TermAttachmentStripper(termFactory);
+        defCon = termFactory.makeConstructor("Def", 1);
+        defDataCon = termFactory.makeConstructor("DefData", 3);
+    }
+
+    public ITermFactory getTermFactory() {
+        return termFactory;
+    }
+
+    public IStrategoConstructor getDefDataCon() {
+        return defDataCon;
+    }
+
+    public IStrategoConstructor getDefCon() {
+        return defCon;
+    }
+
+    public IndexURI createURI(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList id,
+        IStrategoTerm contentsType) {
+        ImploderAttachment idAttachment = ImploderAttachment.getCompactPositionAttachment(id, true);
+        contentsType = stripper.strip(contentsType);
+        assert namespace == stripper.strip(namespace);
+
+        id.putAttachment(idAttachment);
+
+        return new IndexURI(constructor, namespace, id, contentsType);
+    }
+
+    public IndexURI createURIFromTemplate(IStrategoAppl template) {
+        return createURI(template.getConstructor(), getEntryNamespace(template), getEntryId(template),
+            getEntryContentsType(template));
+    }
+
+    public IndexEntry createEntry(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList id,
+        IStrategoTerm contentsType, IStrategoTerm contents, IndexPartitionDescriptor partitionDescriptor) {
+        return createEntry(contents, createURI(constructor, namespace, id, contentsType), partitionDescriptor);
+    }
+
+    public IndexEntry createEntry(IStrategoTerm contents, IndexURI uri, IndexPartitionDescriptor partitionDescriptor) {
+
+        ImploderAttachment dataAttachment =
+            contents == null ? null : ImploderAttachment.getCompactPositionAttachment(contents, false);
+        contents = stripper.strip(contents);
+        if(contents != null)
+            contents.putAttachment(dataAttachment);
+
+        return new IndexEntry(contents, uri, partitionDescriptor);
+    }
+
+    /*
+     * private IStrategoList createSanitizedId(IStrategoList id) { return (IStrategoList) stripper.strip(id); }
+     */
+
+    public IStrategoTerm getEntryContentsType(IStrategoAppl entry) {
+        IStrategoConstructor type = entry.getConstructor();
+        if(type == defDataCon) {
+            return entry.getSubterm(DEFDATA_TYPE);
+        } else {
+            return null;
+        }
+    }
+
+    public IStrategoList getEntryId(IStrategoAppl entry) {
+        IStrategoTerm result = entry.getSubterm(0);
+        if(isTermList(result)) {
+            IStrategoList full = (IStrategoList) result;
+            return full.isEmpty() ? full : full.tail();
+        } else {
+            throw new IllegalArgumentException("Illegal index entry: " + entry);
+        }
+    }
+
+    public IStrategoTerm getEntryNamespace(IStrategoAppl entry) {
+        IStrategoTerm result = entry.getSubterm(0);
+        if(isTermList(result)) {
+            IStrategoList full = (IStrategoList) result;
+            return stripper.strip(full.isEmpty() ? full : full.head());
+        } else {
+            throw new IllegalArgumentException("Illegal index entry: " + entry);
+        }
+    }
+
+    public IStrategoTerm getEntryContents(IStrategoAppl entry) {
+        if(entry.getSubtermCount() == 3) {
+            return entry.getSubterm(DEFDATA_CONTENTS);
+        } else if(entry.getSubtermCount() == 2) {
+            return entry.getSubterm(1);
+        } else {
+            assert entry.getSubtermCount() < 3;
+            return null;
+        }
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexManager.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexManager.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexManager.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexManager.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -21,158 +21,154 @@
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Gabri?l Konat
  */
-public class SemanticIndexManager {
-	
-	private final static AtomicLong revisionProvider = new AtomicLong();
-	
-	private final static ReadWriteLock transactionLock = new ReentrantReadWriteLock();
-
-	private ThreadLocal<ISemanticIndex> current = new ThreadLocal<ISemanticIndex>();
-	
-	private ThreadLocal<URI> currentProject = new ThreadLocal<URI>();
-	
-	private ThreadLocal<String> currentLanguage = new ThreadLocal<String>();
-	
-	private ThreadLocal<SemanticIndexFileDescriptor> currentFile = new ThreadLocal<SemanticIndexFileDescriptor>();
-	
-	/**
-	 * Indices by language and project. Access requires a lock on {@link #getSyncRoot}
-	 */
-	private static Map<String, Map<URI, WeakReference<ISemanticIndex>>> asyncIndexCache =
-		new HashMap<String, Map<URI, WeakReference<ISemanticIndex>>>();
-	
-	public static ReadWriteLock getTransactionLock() {
-		return transactionLock;
-	}
-	
-	public ISemanticIndex getCurrent() {
-		if (!isInitialized())
-			throw new IllegalStateException("No semantic index has been set-up, use index-setup(|language, project-paths) to set up the index before use.");
-		
-		return current.get();
-	}
-	
-	public SemanticIndexFileDescriptor getCurrentFile() {
-		if (!isInitialized())
-			throw new IllegalStateException("No semantic index has been set-up, use index-setup(|language, project-paths) to set up the index before use.");
-		
-		return currentFile.get();
-	}
-	
-	public void setCurrentFile(SemanticIndexFileDescriptor currentFile) {
-		this.currentFile.set(currentFile);
-	}
-
-	public URI getCurrentProject() {
-		if (!isInitialized())
-			throw new IllegalStateException("No semantic index has been set-up, use index-setup(|language, project-paths) to set up the index before use.");
-		
-		return currentProject.get();
-	}
-	
-	public long startTransaction(ITermFactory factory, IOAgent agent) {
-		// TODO: Does this operation need a transaction write lock?
-		
-		long rev = revisionProvider.getAndIncrement();
-		ISemanticIndex currentIndex = current.get();
-		currentIndex.getFile(currentFile.get()).setTimeRevision(new Date(), rev);
-		
-		assert currentIndex instanceof SemanticIndex; // Prevent multiple transactions.
-		
-		ISemanticIndex transactionIndex = new SemanticIndex();
-		transactionIndex.initialize(factory, agent);
-		current.set(new TransactionSemanticIndex(currentIndex, transactionIndex, currentFile.get()));
-		
-		return rev;
-	}
-	
-	public void endTransaction() {
-		TransactionSemanticIndex currentIndex = (TransactionSemanticIndex)current.get();
-		ISemanticIndex index = currentIndex.getIndex();
-		ISemanticIndex transactionIndex = currentIndex.getTransactionIndex();
-		current.set(index);
-		
-		transactionLock.writeLock().lock();
-		try {
-			if(currentIndex.hasClearedCurrentFile())
-				index.removeFile(currentIndex.getCurrentFile());
-			
-			for(TemplateWithFileDescriptor entry : currentIndex.getRemovedEntries())
-				index.remove(entry.getTemplate(), entry.getFileDescriptor());
-			
-			for(SemanticIndexEntry entry : transactionIndex.getAllEntries())
-				index.add(entry);
-		} finally {
-			transactionLock.writeLock().unlock();
-		}
-	}
-	
-	private static Object getSyncRoot() {
-		return SemanticIndexManager.class;
-	}
-	
-	public AtomicLong getRevisionProvider() {
-		return revisionProvider;
-	}
-	
-	public boolean isInitialized() {
-		return current.get() != null;
-	}
-	
-	public static boolean isKnownIndexingLanguage(String language) {
-		synchronized (getSyncRoot()) {
-			return asyncIndexCache.containsKey(language);
-		}
-	}
-	
-	public void loadIndex(String language, URI project, ITermFactory factory, IOAgent agent) {
-		synchronized (getSyncRoot()) {
-			Map<URI, WeakReference<ISemanticIndex>> indicesByProject =
-					asyncIndexCache.get(language);
-			if (indicesByProject == null) {
-				indicesByProject = new HashMap<URI, WeakReference<ISemanticIndex>>();
-				asyncIndexCache.put(language, indicesByProject);
-			}
-			WeakReference<ISemanticIndex> indexRef = indicesByProject.get(project);
-			ISemanticIndex index = indexRef == null ? null : indexRef.get();
-			if (index == null) {
-				index = tryReadFromFile(getIndexFile(project, language), factory, agent);
-			}
-			if (index == null) {
-				index = new SemanticIndex();
-				NotificationCenter.notifyNewProject(project);
-			}
-			indicesByProject.put(project, new WeakReference<ISemanticIndex>(index));
-			current.set(index);
-			currentLanguage.set(language);
-			currentProject.set(project);
-		}
-	}
-	
-	public ISemanticIndex tryReadFromFile(File file, ITermFactory factory, IOAgent agent) {
-		try {
-			IStrategoTerm term = new TermReader(factory).parseFromFile(file.toString());
-			return SemanticIndex.fromTerm(term, factory, agent, true); // TODO: Move to other class
-		} catch (IOException e) {
-			return null;
-		}
-	}
-	
-	public void storeCurrent() throws IOException {
-		File file = getIndexFile(currentProject.get(), currentLanguage.get());
-		IStrategoTerm stored = getCurrent().toTerm(true);
-		Writer writer = new BufferedWriter(new FileWriter(file));
-		try {
-			stored.writeAsString(writer, IStrategoTerm.INFINITE);
-		} finally {
-			writer.close();
-		}
-	}
-
-	private File getIndexFile(URI project, String language) {
-		File container = new File(new File(project), ".cache");
-		container.mkdirs();
-		return new File(container, language + ".idx");
-	}
+public class IndexManager {
+    private final static AtomicLong revisionProvider = new AtomicLong();
+    private final static ReadWriteLock transactionLock = new ReentrantReadWriteLock();
+
+    /**
+     * Indices by language and project. Access requires a lock on {@link #getSyncRoot}
+     */
+    private static Map<String, Map<URI, WeakReference<IIndex>>> asyncIndexCache =
+        new HashMap<String, Map<URI, WeakReference<IIndex>>>();
+
+    private ThreadLocal<IIndex> current = new ThreadLocal<IIndex>();
+    private ThreadLocal<URI> currentProject = new ThreadLocal<URI>();
+    private ThreadLocal<String> currentLanguage = new ThreadLocal<String>();
+    private ThreadLocal<IndexPartitionDescriptor> currentPartition = new ThreadLocal<IndexPartitionDescriptor>();
+
+    public static ReadWriteLock getTransactionLock() {
+        return transactionLock;
+    }
+
+    public IIndex getCurrent() {
+        if(!isInitialized())
+            throw new IllegalStateException(
+                "Index has not been set-up, use index-setup(|language, project-paths) to set up the index before use.");
+
+        return current.get();
+    }
+
+    public IndexPartitionDescriptor getCurrentPartition() {
+        if(!isInitialized())
+            throw new IllegalStateException(
+                "Index has not been set-up, use index-setup(|language, project-paths) to set up the index before use.");
+
+        return currentPartition.get();
+    }
+
+    public void setCurrentPartition(IndexPartitionDescriptor currentPartition) {
+        this.currentPartition.set(currentPartition);
+    }
+
+    public URI getCurrentProject() {
+        if(!isInitialized())
+            throw new IllegalStateException(
+                "Index has not been set-up, use index-setup(|language, project-paths) to set up the index before use.");
+
+        return currentProject.get();
+    }
+
+    public long startTransaction(ITermFactory factory, IOAgent agent) {
+        long rev = revisionProvider.getAndIncrement();
+        IIndex currentIndex = current.get();
+        currentIndex.getPartition(currentPartition.get()).setRevisionTime(rev, new Date());
+
+        assert currentIndex instanceof Index; // Prevent multiple transactions.
+
+        IIndex transactionIndex = new Index();
+        transactionIndex.initialize(factory, agent);
+        current.set(new TransactionIndex(currentIndex, transactionIndex, currentPartition.get()));
+
+        return rev;
+    }
+
+    public void endTransaction() {
+        TransactionIndex currentIndex = (TransactionIndex) current.get();
+        IIndex index = currentIndex.getIndex();
+        IIndex transactionIndex = currentIndex.getTransactionIndex();
+        current.set(index);
+
+        transactionLock.writeLock().lock();
+        try {
+            if(currentIndex.hasClearedCurrentPartition())
+                index.removePartition(currentIndex.getCurrentPartition());
+
+            for(TemplateWithPartitionDescriptor entry : currentIndex.getRemovedEntries())
+                index.remove(entry.getTemplate(), entry.getPartitionDescriptor());
+
+            for(IndexEntry entry : transactionIndex.getAllEntries())
+                index.add(entry);
+        } finally {
+            transactionLock.writeLock().unlock();
+        }
+    }
+
+    private static Object getSyncRoot() {
+        return IndexManager.class;
+    }
+
+    public AtomicLong getRevisionProvider() {
+        return revisionProvider;
+    }
+
+    public boolean isInitialized() {
+        return current.get() != null;
+    }
+
+    public static boolean isKnownIndexingLanguage(String language) {
+        synchronized(getSyncRoot()) {
+            return asyncIndexCache.containsKey(language);
+        }
+    }
+
+    public void loadIndex(String language, URI project, ITermFactory factory, IOAgent agent) {
+        synchronized(getSyncRoot()) {
+            Map<URI, WeakReference<IIndex>> indicesByProject = asyncIndexCache.get(language);
+            if(indicesByProject == null) {
+                indicesByProject = new HashMap<URI, WeakReference<IIndex>>();
+                asyncIndexCache.put(language, indicesByProject);
+            }
+            WeakReference<IIndex> indexRef = indicesByProject.get(project);
+            IIndex index = indexRef == null ? null : indexRef.get();
+            if(index == null) {
+                index = tryReadFromFile(getIndexFile(project, language), factory, agent);
+            }
+            if(index == null) {
+                index = new Index();
+                NotificationCenter.notifyNewProject(project);
+            }
+            indicesByProject.put(project, new WeakReference<IIndex>(index));
+            current.set(index);
+            currentLanguage.set(language);
+            currentProject.set(project);
+        }
+    }
+
+    public IIndex tryReadFromFile(File file, ITermFactory factory, IOAgent agent) {
+        try {
+            IStrategoTerm term = new TermReader(factory).parseFromFile(file.toString());
+            return Index.fromTerm(term, factory, agent, true); // TODO: Move to other class
+        } catch(IOException e) {
+            return null;
+        }
+    }
+
+    public void storeCurrent() throws IOException {
+        File file = getIndexFile(currentProject.get(), currentLanguage.get());
+        IStrategoTerm stored = getCurrent().toTerm(true);
+        Writer writer = new BufferedWriter(new FileWriter(file));
+        try {
+            stored.writeAsString(writer, IStrategoTerm.INFINITE);
+        } finally {
+            writer.close();
+        }
+    }
+
+    private File getIndexFile(URI project, String language) {
+        File container = new File(new File(project), ".cache");
+        container.mkdirs();
+        return new File(container, language + ".idx");
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartition.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFile.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFile.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartition.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -5,60 +5,63 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class SemanticIndexFile {
-	private final SemanticIndexFileDescriptor descriptor;
-	
-	private Date time;
-	
-	private long revision;
-	
-	protected SemanticIndexFile(SemanticIndexFileDescriptor descriptor, Date time) {
-		this.descriptor = descriptor;
-		this.time = time;
-	}
-	
-	public SemanticIndexFileDescriptor getDescriptor() {
-		return descriptor;
-	}
-	
-	public Date getTime() {
-		return time;
-	}
-	
-	public long getRevision() {
-		return revision;
-	}
-	
-	public void setTimeRevision(Date time, long revision) {
-		this.time = time;
-		this.revision = revision;
-	}
- 	
-	public IStrategoTerm toTerm(ITermFactory factory) {
-		return descriptor.toTerm(factory);
-	}
-	
-	@Override
-	public String toString() {
-		return descriptor.toString();
-	}
-	
-	@Override
-	public boolean equals(Object obj) {
-		if (obj instanceof SemanticIndexFile) {
-			if (obj == this) return true;
-			SemanticIndexFile other = (SemanticIndexFile) obj;
-			return other.descriptor.equals(descriptor);
-		} else {
-			return false;
-		}
-	}
-	
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + descriptor.hashCode();
-		return result;
-	}
+/**
+ * @author Gabri?l Konat
+ */
+public class IndexPartition {
+    private final IndexPartitionDescriptor descriptor;
+
+    private long revision;
+    private Date time;
+
+    protected IndexPartition(IndexPartitionDescriptor descriptor, Date time) {
+        this.descriptor = descriptor;
+        this.time = time;
+    }
+
+    public IndexPartitionDescriptor getDescriptor() {
+        return descriptor;
+    }
+
+    public long getRevision() {
+        return revision;
+    }
+
+    public Date getTime() {
+        return time;
+    }
+
+    public void setRevisionTime(long revision, Date time) {
+        this.time = time;
+        this.revision = revision;
+    }
+
+    public IStrategoTerm toTerm(ITermFactory factory) {
+        return descriptor.toTerm(factory);
+    }
+
+    @Override
+    public String toString() {
+        return descriptor.toString();
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if(obj instanceof IndexPartition) {
+            if(obj == this)
+                return true;
+            IndexPartition other = (IndexPartition) obj;
+            return other.descriptor.equals(descriptor);
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + descriptor.hashCode();
+        return result;
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartitionDescriptor.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartitionDescriptor.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -13,99 +13,98 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class SemanticIndexFileDescriptor implements Serializable {
+/**
+ * @author Gabri?l Konat
+ */
+public class IndexPartitionDescriptor implements Serializable {
+    private static final long serialVersionUID = -5167366407344668956L;
 
-  private static final long serialVersionUID = -5167366407344668956L;
+    private final URI uri;
+    private final IStrategoList partition;
 
-  private final URI uri;
-	
-	private final IStrategoList subfile;
-	
-	private transient IStrategoTerm cachedTerm;
-	
-	private transient String cachedString;
-	
-	public URI getURI() {
-		return uri;
-	}
-	
-	public IStrategoList getSubfile() {
-		return subfile;
-	}
-	
-	public SemanticIndexFileDescriptor(URI uri, IStrategoList subfile) {
-		this.uri = uri;
-		if(subfile == null || subfile.isEmpty())
-			this.subfile = null;
-		else
-			this.subfile = subfile;
-	}
-	
-	public IStrategoTerm toTerm(ITermFactory factory) {
-		if (cachedTerm != null)
-			return cachedTerm;
-		
-		IStrategoString uriString = factory.makeString(toString());
-		cachedTerm = factory.makeTuple(uriString, subfile == null ? factory.makeList() : subfile);
-		
-		return cachedTerm;
-	}
-	
-	/**
-	 * Converts a term file representation to a SemanticIndexFile,
-	 * using the  {@link IOAgent} to create an absolute path.
-	 * 
-	 * @param agent  The agent that provides the current path and file system access,
-	 *               or null if the path should be used as-is.
-	 * @param term   A string or (string, string) tuple with the filename
-	 *               or the filename and subfilename
-	 */
-	public static SemanticIndexFileDescriptor fromTerm(IOAgent agent, IStrategoTerm term) {
-		String name;
-		IStrategoList subfile;
-		if (isTermTuple(term)) {
-			name = asJavaString(term.getSubterm(0));
-			subfile = (IStrategoList)term.getSubterm(1);
-		} else {
-			name = asJavaString(term);
-			subfile = null;
-		}
-		File file = new File(name);
-		if (!file.isAbsolute() && agent != null)
-			file = new File(agent.getWorkingDir(), name);
-		return new SemanticIndexFileDescriptor(file.toURI(), subfile);
-	}
-	
-	@Override
-	public String toString() {
-		if(cachedString != null)
-			return cachedString;
-		
-		cachedString = "file".equals(uri.getScheme()) ? 
-				new File(uri).getAbsolutePath().replace("\\", "/") : uri.toString();
-				
-		return cachedString;
-	}
-	
-	@Override
-	public boolean equals(Object obj) {
-		if (obj instanceof SemanticIndexFileDescriptor) {
-			if (obj == this) return true;
-			SemanticIndexFileDescriptor other = (SemanticIndexFileDescriptor) obj;
-			return other.uri.equals(uri)
-					&& (subfile == null ? other.subfile == null : subfile.equals(other.subfile));
-		} else {
-			return false;
-		}
-	}
-	
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result
-				+ ((subfile == null) ? 0 : subfile.hashCode());
-		result = prime * result + ((uri == null) ? 0 : uri.hashCode());
-		return result;
-	}
+    private transient IStrategoTerm cachedTerm;
+    private transient String cachedString;
+
+    public URI getURI() {
+        return uri;
+    }
+
+    public IStrategoList getPartition() {
+        return partition;
+    }
+
+    public IndexPartitionDescriptor(URI uri, IStrategoList subpartition) {
+        this.uri = uri;
+        if(subpartition == null || subpartition.isEmpty())
+            this.partition = null;
+        else
+            this.partition = subpartition;
+    }
+
+    public IStrategoTerm toTerm(ITermFactory factory) {
+        if(cachedTerm != null)
+            return cachedTerm;
+
+        IStrategoString uriString = factory.makeString(toString());
+        cachedTerm = factory.makeTuple(uriString, partition == null ? factory.makeList() : partition);
+
+        return cachedTerm;
+    }
+
+    /**
+     * Converts a term partition representation to a SemanticIndexPartition, using the {@link IOAgent} to create an
+     * absolute path.
+     * 
+     * @param agent The agent that provides the current path and partition system access, or null if the path should be
+     *            used as-is.
+     * @param term A string or (string, string) tuple with the partitionname or the partitionname and subpartitionname
+     */
+    public static IndexPartitionDescriptor fromTerm(IOAgent agent, IStrategoTerm term) {
+        String name;
+        IStrategoList subpartition;
+        if(isTermTuple(term)) {
+            name = asJavaString(term.getSubterm(0));
+            subpartition = (IStrategoList) term.getSubterm(1);
+        } else {
+            name = asJavaString(term);
+            subpartition = null;
+        }
+        File file = new File(name);
+        if(!file.isAbsolute() && agent != null)
+            file = new File(agent.getWorkingDir(), name);
+        return new IndexPartitionDescriptor(file.toURI(), subpartition);
+    }
+
+    @Override
+    public String toString() {
+        if(cachedString != null)
+            return cachedString;
+
+        cachedString =
+            "partition".equals(uri.getScheme()) ? new File(uri).getAbsolutePath().replace("\\", "/") : uri.toString();
+
+        return cachedString;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if(obj instanceof IndexPartitionDescriptor) {
+            if(obj == this)
+                return true;
+            IndexPartitionDescriptor other = (IndexPartitionDescriptor) obj;
+            return other.uri.equals(uri)
+                && (partition == null ? other.partition == null : partition.equals(other.partition));
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((partition == null) ? 0 : partition.hashCode());
+        result = prime * result + ((uri == null) ? 0 : uri.hashCode());
+        return result;
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexStatistics.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexStatistics.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexStatistics.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexStatistics.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -10,76 +10,79 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class SemanticIndexStatistics {
-	private class Data {
-		public Collection<SemanticIndexFileDescriptor> files;
-		public Collection<SemanticIndexEntry> entries;
-		public Map<IStrategoConstructor, Integer> entriesPerConstructor;
-		public Map<IStrategoTerm, Integer> entriesPerNamespace;
-	}
-	
-	private ISemanticIndex index;
-	
-	public SemanticIndexStatistics(ISemanticIndex index) {
-		this.index = index;
-	}
-	
-	private Collection<SemanticIndexFileDescriptor> files() {
-		return index.getAllFileDescriptors();
-	}
-	
-	private Collection<SemanticIndexEntry> elements() {
-		List<SemanticIndexEntry> entries = new ArrayList<SemanticIndexEntry>();
-		for(SemanticIndexFileDescriptor fileDescriptor : index.getAllFileDescriptors()) {
-			entries.addAll(index.getEntriesInFile(fileDescriptor));
-		}
-		
-		return entries;
-	}
-	
-	public Data stats() {
-		Data data = new Data();
-		data.files = files();
-		data.entries = elements();
-		
-		// Divide types by constructor and namespace
-		data.entriesPerConstructor = new HashMap<IStrategoConstructor, Integer>();
-		data.entriesPerNamespace = new HashMap<IStrategoTerm, Integer>();
-		for(SemanticIndexEntry entry : data.entries) {
-			SemanticIndexURI uri = entry.getURI();
-			Integer constructorCount = data.entriesPerConstructor.get(uri.getConstructor());
-			if(constructorCount == null)
-				data.entriesPerConstructor.put(uri.getConstructor(), 1);
-			else
-				data.entriesPerConstructor.put(uri.getConstructor(), constructorCount + 1);
-				
-			Integer namespaceCount = data.entriesPerNamespace.get(uri.getNamespace());
-			if(namespaceCount == null)
-				data.entriesPerNamespace.put(uri.getNamespace(), 1);
-			else
-				data.entriesPerNamespace.put(uri.getNamespace(), namespaceCount + 1);
-		}
-		
-		return data;
-	}
-	
-	public String statsString() {
-		Data data = stats();
-		
-		StringBuilder b = new StringBuilder();
-		b.append("* Number of files: " + data.files.size() + "\n");
-		b.append("* Number of elements: " + data.entries.size() + "\n");
-		b.append("* Elements per constructor: \n");
-		for(Entry<IStrategoConstructor, Integer> pair : data.entriesPerConstructor.entrySet())
-			b.append("  - " + pair.getKey() + ": " + pair.getValue() + "\n");
-		b.append("* Elements per namespace: \n");
-		for(Entry<IStrategoTerm, Integer> pair : data.entriesPerNamespace.entrySet())
-			b.append("  - " + pair.getKey() + ": " + pair.getValue() + "\n");
-		
-		return b.toString();
-	}
-	
-	public void printStats() {
-		System.out.println(statsString());
-	}
+/**
+ * @author Gabri?l Konat
+ */
+public class IndexStatistics {
+    private class Data {
+        public Collection<IndexPartitionDescriptor> partitions;
+        public Collection<IndexEntry> entries;
+        public Map<IStrategoConstructor, Integer> entriesPerConstructor;
+        public Map<IStrategoTerm, Integer> entriesPerNamespace;
+    }
+
+    private IIndex index;
+
+    public IndexStatistics(IIndex index) {
+        this.index = index;
+    }
+
+    private Collection<IndexPartitionDescriptor> partitions() {
+        return index.getAllPartitionDescriptors();
+    }
+
+    private Collection<IndexEntry> elements() {
+        List<IndexEntry> entries = new ArrayList<IndexEntry>();
+        for(IndexPartitionDescriptor partitionDescriptor : index.getAllPartitionDescriptors()) {
+            entries.addAll(index.getEntriesInPartition(partitionDescriptor));
+        }
+
+        return entries;
+    }
+
+    public Data stats() {
+        Data data = new Data();
+        data.partitions = partitions();
+        data.entries = elements();
+
+        // Divide types by constructor and namespace
+        data.entriesPerConstructor = new HashMap<IStrategoConstructor, Integer>();
+        data.entriesPerNamespace = new HashMap<IStrategoTerm, Integer>();
+        for(IndexEntry entry : data.entries) {
+            IndexURI uri = entry.getURI();
+            Integer constructorCount = data.entriesPerConstructor.get(uri.getConstructor());
+            if(constructorCount == null)
+                data.entriesPerConstructor.put(uri.getConstructor(), 1);
+            else
+                data.entriesPerConstructor.put(uri.getConstructor(), constructorCount + 1);
+
+            Integer namespaceCount = data.entriesPerNamespace.get(uri.getNamespace());
+            if(namespaceCount == null)
+                data.entriesPerNamespace.put(uri.getNamespace(), 1);
+            else
+                data.entriesPerNamespace.put(uri.getNamespace(), namespaceCount + 1);
+        }
+
+        return data;
+    }
+
+    public String statsString() {
+        Data data = stats();
+
+        StringBuilder b = new StringBuilder();
+        b.append("* Number of partitions: " + data.partitions.size() + "\n");
+        b.append("* Number of elements: " + data.entries.size() + "\n");
+        b.append("* Elements per constructor: \n");
+        for(Entry<IStrategoConstructor, Integer> pair : data.entriesPerConstructor.entrySet())
+            b.append("  - " + pair.getKey() + ": " + pair.getValue() + "\n");
+        b.append("* Elements per namespace: \n");
+        for(Entry<IStrategoTerm, Integer> pair : data.entriesPerNamespace.entrySet())
+            b.append("  - " + pair.getKey() + ": " + pair.getValue() + "\n");
+
+        return b.toString();
+    }
+
+    public void printStats() {
+        System.out.println(statsString());
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexURI.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexURI.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexURI.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexURI.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -8,134 +8,124 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class SemanticIndexURI implements Serializable {
-
-  private static final long serialVersionUID = 1619836759792533807L;
-
-  private IStrategoConstructor constructor;
-
-	private IStrategoTerm namespace;
-
-	private IStrategoList id;
-
-	private IStrategoTerm contentsType;
-
-	private transient IStrategoAppl term;
-
-	/**
-	 * @param namespace
-	 *            The namespace of the entry, e.g., 'Foo()'
-	 * @param id
-	 *            The identifier of the entry, e.g., '["foo", Foo()]'
-	 */
-	protected SemanticIndexURI(IStrategoConstructor constructor,
-			IStrategoTerm namespace, IStrategoList id,
-			IStrategoTerm contentsType) {
-		this.constructor = constructor;
-		this.id = id;
-		this.namespace = namespace;
-		this.contentsType = contentsType;
-
-		assert constructor != null && id != null && namespace != null;
-		assert contentsType == null || "DefData".equals(constructor.getName()) : "Contents type only expected for DefData";
-	}
-
-	public IStrategoConstructor getConstructor() {
-		return constructor;
-	}
-
-	public IStrategoTerm getNamespace() {
-		return namespace;
-	}
-
-	public IStrategoList getId() {
-		return id;
-	}
-
-	public IStrategoTerm getType() {
-		return contentsType;
-	}
-
-	public SemanticIndexURI getParent() {
-		if (id.size() > 0)
-			return new SemanticIndexURI(constructor, namespace, id.tail(),
-					contentsType);
-		else
-			return null;
-	}
-
-	/**
-	 * Returns a term representation of this entry.
-	 */
-	public IStrategoAppl toTerm(ITermFactory factory, IStrategoTerm contents) {
-		if (term != null)
-			return term;
-
-		IStrategoList namespaceId = factory.makeListCons(namespace, id);
-		if (constructor.getArity() == 3) {
-			term = factory.makeAppl(constructor, namespaceId, contentsType,
-					contents);
-		} else if (constructor.getArity() == 2) {
-			term = factory.makeAppl(constructor, namespaceId, contents);
-		} else {
-			term = factory.makeAppl(constructor, namespaceId);
-		}
-
-		return term;
-	}
-
-	@Override
-	public String toString() {
-		String result = constructor.getName() + "([" + namespace + "|" + id
-				+ "]";
-		if (contentsType != null)
-			result += "," + contentsType;
-		return result;
-	}
-
-	@Override
-	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result
-				+ ((constructor == null) ? 0 : constructor.hashCode());
-		result = prime * result
-				+ ((contentsType == null) ? 0 : contentsType.hashCode());
-		result = prime * result + ((id == null) ? 0 : id.hashCode());
-		result = prime * result
-				+ ((namespace == null) ? 0 : namespace.hashCode());
-		return result;
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (obj == null)
-			return false;
-		if (!(obj instanceof SemanticIndexURI))
-			return false;
-		SemanticIndexURI other = (SemanticIndexURI) obj;
-		if (constructor == null) {
-			if (other.constructor != null)
-				return false;
-		} else if (!constructor.equals(other.constructor))
-			return false;
-		if (contentsType == null) {
-			if (other.contentsType != null)
-				return false;
-		} else if (!contentsType.equals(other.contentsType))
-			return false;
-		if (id == null) {
-			if (other.id != null)
-				return false;
-		} else if (!id.equals(other.id))
-			return false;
-		if (namespace == null) {
-			if (other.namespace != null)
-				return false;
-		} else if (!namespace.equals(other.namespace))
-			return false;
-		return true;
-	}
+/**
+ * @author Gabri?l Konat
+ */
+public class IndexURI implements Serializable {
+    private static final long serialVersionUID = 1619836759792533807L;
+
+    private IStrategoConstructor constructor;
+    private IStrategoTerm namespace;
+    private IStrategoList id;
+    private IStrategoTerm contentsType;
+
+    private transient IStrategoAppl term;
+
+    /**
+     * @param namespace The namespace of the entry, e.g., 'Foo()'
+     * @param id The identifier of the entry, e.g., '["foo", Foo()]'
+     */
+    protected IndexURI(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList id,
+        IStrategoTerm contentsType) {
+        this.constructor = constructor;
+        this.id = id;
+        this.namespace = namespace;
+        this.contentsType = contentsType;
+
+        assert constructor != null && id != null && namespace != null;
+        assert contentsType == null || "DefData".equals(constructor.getName()) : "Contents type only expected for DefData";
+    }
+
+    public IStrategoConstructor getConstructor() {
+        return constructor;
+    }
+
+    public IStrategoTerm getNamespace() {
+        return namespace;
+    }
+
+    public IStrategoList getId() {
+        return id;
+    }
+
+    public IStrategoTerm getType() {
+        return contentsType;
+    }
+
+    public IndexURI getParent() {
+        if(id.size() > 0)
+            return new IndexURI(constructor, namespace, id.tail(), contentsType);
+        else
+            return null;
+    }
+
+    /**
+     * Returns a term representation of this entry.
+     */
+    public IStrategoAppl toTerm(ITermFactory factory, IStrategoTerm contents) {
+        if(term != null)
+            return term;
+
+        IStrategoList namespaceId = factory.makeListCons(namespace, id);
+        if(constructor.getArity() == 3) {
+            term = factory.makeAppl(constructor, namespaceId, contentsType, contents);
+        } else if(constructor.getArity() == 2) {
+            term = factory.makeAppl(constructor, namespaceId, contents);
+        } else {
+            term = factory.makeAppl(constructor, namespaceId);
+        }
+
+        return term;
+    }
+
+    @Override
+    public String toString() {
+        String result = constructor.getName() + "([" + namespace + "|" + id + "]";
+        if(contentsType != null)
+            result += "," + contentsType;
+        return result;
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((constructor == null) ? 0 : constructor.hashCode());
+        result = prime * result + ((contentsType == null) ? 0 : contentsType.hashCode());
+        result = prime * result + ((id == null) ? 0 : id.hashCode());
+        result = prime * result + ((namespace == null) ? 0 : namespace.hashCode());
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if(this == obj)
+            return true;
+        if(obj == null)
+            return false;
+        if(!(obj instanceof IndexURI))
+            return false;
+        IndexURI other = (IndexURI) obj;
+        if(constructor == null) {
+            if(other.constructor != null)
+                return false;
+        } else if(!constructor.equals(other.constructor))
+            return false;
+        if(contentsType == null) {
+            if(other.contentsType != null)
+                return false;
+        } else if(!contentsType.equals(other.contentsType))
+            return false;
+        if(id == null) {
+            if(other.id != null)
+                return false;
+        } else if(!id.equals(other.id))
+            return false;
+        if(namespace == null) {
+            if(other.namespace != null)
+                return false;
+        } else if(!namespace.equals(other.namespace))
+            return false;
+        return true;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_add.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_add.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_add.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -14,26 +14,25 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_add extends AbstractPrimitive {
+    private static String NAME = "LANG_index_add";
 
-	private static String NAME = "LANG_index_add";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_add(SemanticIndexManager index) {
-		super(NAME, 0, 2);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (isTermAppl(tvars[0]) && (isTermTuple(tvars[1]) || isTermString(tvars[1]))) {
-			IStrategoAppl entry = (IStrategoAppl) tvars[0];
-			ISemanticIndex ind = index.getCurrent();
-			SemanticIndexFileDescriptor fileDescriptor = ind.getFileDescriptor(tvars[1]);
-			ind.add(entry, fileDescriptor);
-			return true;
-		} else {
-			return false;
-		}
-	}
+    public LANG_index_add(IndexManager index) {
+        super(NAME, 0, 2);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        if(isTermAppl(tvars[0]) && (isTermTuple(tvars[1]) || isTermString(tvars[1]))) {
+            IStrategoAppl entry = (IStrategoAppl) tvars[0];
+            IIndex ind = index.getCurrent();
+            IndexPartitionDescriptor partitionDescriptor = ind.getPartitionDescriptor(tvars[1]);
+            ind.add(entry, partitionDescriptor);
+            return true;
+        } else {
+            return false;
+        }
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_all.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_all.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_all.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -9,19 +9,18 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_clear_all extends AbstractPrimitive {
+    private static String NAME = "LANG_index_clear_all";
 
-	private static String NAME = "LANG_index_clear_all";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_clear_all(SemanticIndexManager index) {
-		super(NAME, 0, 0);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		index.getCurrent().clear();
-		return true;
-	}
+    public LANG_index_clear_all(IndexManager index) {
+        super(NAME, 0, 0);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        index.getCurrent().clear();
+        return true;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -12,24 +12,23 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_clear_file extends AbstractPrimitive {
+    private static String NAME = "LANG_index_clear_file";
 
-	private static String NAME = "LANG_index_clear_file";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_clear_file(SemanticIndexManager index) {
-		super(NAME, 0, 1);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (isTermString(tvars[0]) || isTermTuple(tvars[0])) {
-			ISemanticIndex ind = index.getCurrent();
-			ind.removeFile(tvars[0]);
-			return true;
-		} else {
-			return false;
-		}
-	}
+    public LANG_index_clear_file(IndexManager index) {
+        super(NAME, 0, 1);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        if(isTermString(tvars[0]) || isTermTuple(tvars[0])) {
+            IIndex ind = index.getCurrent();
+            ind.removePartition(tvars[0]);
+            return true;
+        } else {
+            return false;
+        }
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_commit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_commit.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_commit.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -11,23 +11,22 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_commit extends AbstractPrimitive {
+    private static String NAME = "LANG_index_commit";
 
-	private static String NAME = "LANG_index_commit";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_commit(SemanticIndexManager index) {
-		super(NAME, 0, 0);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		try {
-			index.storeCurrent();
-		} catch (IOException e) {
-			e.printStackTrace(); // ignore
-		}
-		return true;
-	}
+    public LANG_index_commit(IndexManager index) {
+        super(NAME, 0, 0);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        try {
+            index.storeCurrent();
+        } catch(IOException e) {
+            e.printStackTrace(); // ignore
+        }
+        return true;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_end_transaction.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_end_transaction.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_end_transaction.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -7,21 +7,18 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class LANG_index_end_transaction extends AbstractPrimitive {
+    private static String NAME = "LANG_index_end_transaction";
 
-	private static String NAME = "LANG_index_end_transaction";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_end_transaction(SemanticIndexManager index) {
-		super(NAME, 0, 0);
-		this.index = index;
-	}
-	
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
-		index.endTransaction();
-		return true;
-	}
+    private final IndexManager index;
 
+    public LANG_index_end_transaction(IndexManager index) {
+        super(NAME, 0, 0);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
+        index.endTransaction();
+        return true;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -14,26 +14,25 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_get extends AbstractPrimitive {
+    private static String NAME = "LANG_index_get";
 
-	private static String NAME = "LANG_index_get";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_get(SemanticIndexManager index) {
-		super(NAME, 0, 1);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (isTermAppl(tvars[0])) {
-			IStrategoAppl template = (IStrategoAppl) tvars[0];
-			ISemanticIndex ind = index.getCurrent();
-			Collection<SemanticIndexEntry> entries = ind.getEntries(template);
-			env.setCurrent(SemanticIndexEntry.toTerms(env.getFactory(), entries));
-			return true;
-		} else {
-			return false;
-		}
-	}
+    public LANG_index_get(IndexManager index) {
+        super(NAME, 0, 1);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        if(isTermAppl(tvars[0])) {
+            IStrategoAppl template = (IStrategoAppl) tvars[0];
+            IIndex ind = index.getCurrent();
+            Collection<IndexEntry> entries = ind.getEntries(template);
+            env.setCurrent(IndexEntry.toTerms(env.getFactory(), entries));
+            return true;
+        } else {
+            return false;
+        }
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -10,31 +10,30 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 
 public class LANG_index_get_all_files extends AbstractPrimitive {
+    private static String NAME = "LANG_index_all_files";
 
-	private static String NAME = "LANG_index_all_files";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_get_all_files(SemanticIndexManager index) {
-		super(NAME, 0, 0);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		ITermFactory factory = env.getFactory();
-		IStrategoList results = getAllFiles(index.getCurrent(), factory);
-		System.out.println(results.toString());
-		env.setCurrent(results);
-		return true;
-	}
+    public LANG_index_get_all_files(IndexManager index) {
+        super(NAME, 0, 0);
+        this.index = index;
+    }
 
-	public static IStrategoList getAllFiles(ISemanticIndex index, ITermFactory factory) {
-		Collection<SemanticIndexFileDescriptor> allFileDescriptors = index.getAllFileDescriptors();
-		IStrategoList results = factory.makeList();
-		for (SemanticIndexFileDescriptor fileDescriptor : allFileDescriptors) {
-			results = factory.makeListCons(fileDescriptor.toTerm(factory), results);
-		}
-		return results;
-	}
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        ITermFactory factory = env.getFactory();
+        IStrategoList results = getAllPartitions(index.getCurrent(), factory);
+        System.out.println(results.toString());
+        env.setCurrent(results);
+        return true;
+    }
+
+    public static IStrategoList getAllPartitions(IIndex index, ITermFactory factory) {
+        Collection<IndexPartitionDescriptor> allPartitionDescriptors = index.getAllPartitionDescriptors();
+        IStrategoList results = factory.makeList();
+        for(IndexPartitionDescriptor partitionDescriptor : allPartitionDescriptors) {
+            results = factory.makeListCons(partitionDescriptor.toTerm(factory), results);
+        }
+        return results;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_in_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_in_file.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_in_file.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -14,26 +14,25 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_get_all_in_file extends AbstractPrimitive {
+    private static String NAME = "LANG_index_get_all_in_file";
 
-	private static String NAME = "LANG_index_get_all_in_file";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_get_all_in_file(SemanticIndexManager index) {
-		super(NAME, 0, 1);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (isTermTuple(tvars[0]) || isTermString(tvars[0])) {
-			ISemanticIndex ind = index.getCurrent();
-			SemanticIndexFileDescriptor fileDescriptor = ind.getFileDescriptor(tvars[0]);
-			Collection<SemanticIndexEntry> results = ind.getEntriesInFile(fileDescriptor);
-			env.setCurrent(SemanticIndexEntry.toTerms(env.getFactory(), results));
-			return true;
-		} else {
-			return false;
-		}
-	}
+    public LANG_index_get_all_in_file(IndexManager index) {
+        super(NAME, 0, 1);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        if(isTermTuple(tvars[0]) || isTermString(tvars[0])) {
+            IIndex ind = index.getCurrent();
+            IndexPartitionDescriptor partitionDescriptor = ind.getPartitionDescriptor(tvars[0]);
+            Collection<IndexEntry> results = ind.getEntriesInPartition(partitionDescriptor);
+            env.setCurrent(IndexEntry.toTerms(env.getFactory(), results));
+            return true;
+        } else {
+            return false;
+        }
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_children.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_children.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_children.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -14,26 +14,25 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_get_children extends AbstractPrimitive {
+    private static String NAME = "LANG_index_get_children";
 
-	private static String NAME = "LANG_index_get_children";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_get_children(SemanticIndexManager index) {
-		super(NAME, 0, 1);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (isTermAppl(tvars[0])) {
-			IStrategoAppl template = (IStrategoAppl) tvars[0];
-			ISemanticIndex ind = index.getCurrent();
-			Collection<SemanticIndexEntry> entries = ind.getEntryChildTerms(template);
-			env.setCurrent(SemanticIndexEntry.toTerms(env.getFactory(), entries));
-			return true;
-		} else {
-			return false;
-		}
-	}
+    public LANG_index_get_children(IndexManager index) {
+        super(NAME, 0, 1);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        if(isTermAppl(tvars[0])) {
+            IStrategoAppl template = (IStrategoAppl) tvars[0];
+            IIndex ind = index.getCurrent();
+            Collection<IndexEntry> entries = ind.getEntryChildTerms(template);
+            env.setCurrent(IndexEntry.toTerms(env.getFactory(), entries));
+            return true;
+        } else {
+            return false;
+        }
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_current_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_current_file.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_current_file.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -6,19 +6,18 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class LANG_index_get_current_file extends AbstractPrimitive {
+    private static String NAME = "LANG_index_get_current_file";
 
-	private static String NAME = "LANG_index_get_current_file";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_get_current_file(SemanticIndexManager index) {
-		super(NAME, 0, 0);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		env.setCurrent(index.getCurrentFile().toTerm(env.getFactory()));
-		return true;
-	}
+    public LANG_index_get_current_file(IndexManager index) {
+        super(NAME, 0, 0);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        env.setCurrent(index.getCurrentPartition().toTerm(env.getFactory()));
+        return true;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_file_revision.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_file_revision.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_file_revision.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -10,27 +10,25 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class LANG_index_get_file_revision extends AbstractPrimitive {
-	private static String NAME = "LANG_index_get_file_revision";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_get_file_revision(SemanticIndexManager index) {
-		super(NAME, 0, 1);
-		this.index = index;
-	}
+    private static String NAME = "LANG_index_get_file_revision";
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
-		if (isTermTuple(tvars[0]) || isTermString(tvars[0])) {
-			ISemanticIndex ind = index.getCurrent();
-			SemanticIndexFileDescriptor fileDescriptor = ind.getFileDescriptor(tvars[0]);
-			SemanticIndexFile file = ind.getFile(fileDescriptor);
-			long revision = file.getRevision();
-			env.setCurrent(env.getFactory().makeInt((int)revision));
-			return true;
-		} else {
-			return false;
-		}
-	}
+    private final IndexManager index;
+
+    public LANG_index_get_file_revision(IndexManager index) {
+        super(NAME, 0, 1);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
+        if(isTermTuple(tvars[0]) || isTermString(tvars[0])) {
+            IIndex ind = index.getCurrent();
+            IndexPartitionDescriptor partitionDescriptor = ind.getPartitionDescriptor(tvars[0]);
+            IndexPartition partition = ind.getPartition(partitionDescriptor);
+            env.setCurrent(env.getFactory().makeInt((int) partition.getRevision()));
+            return true;
+        } else {
+            return false;
+        }
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_newer_than.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_newer_than.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_newer_than.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -10,43 +10,41 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
- * Gets all files newer than (or equally old as) the specified file,
- * or gets all files if no file with the given name exists.
+ * Gets all partitions newer than (or equally old as) the specified partition, or gets all partitions if no partition with the given name
+ * exists.
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_get_files_newer_than extends AbstractPrimitive {
+    private static String NAME = "LANG_index_get_files_newer_than";
 
-	private static String NAME = "LANG_index_get_files_newer_than";
+    private final IndexManager index;
 
-	private final SemanticIndexManager index;
-
-	public LANG_index_get_files_newer_than(SemanticIndexManager index) {
-		super(NAME, 0, 1);
-		this.index = index;
-	}
-
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		ISemanticIndex ind = index.getCurrent();
-		SemanticIndexFile file = ind.getFile(ind.getFileDescriptor(tvars[0]));
-		if (file == null || file.getTime() == null) {
-			env.setCurrent(LANG_index_get_all_files.getAllFiles(
-					index.getCurrent(), env.getFactory()));
-		} else {
-			Date time = file.getTime();
-			env.setCurrent(getFilesAfter(env.getFactory(), ind, time));
-		}
-		return true;
-	}
-
-	private static IStrategoList getFilesAfter(ITermFactory factory, ISemanticIndex ind, Date time) {
- 		IStrategoList results = factory.makeList();
-		for (SemanticIndexFile file : ind.getAllFiles()) {
-			if (file.getTime() != null && !file.getTime().before(time)) {
-				results = factory.makeListCons(file.toTerm(factory), results);
-			}
-		}
-		return results;
-	}
+    public LANG_index_get_files_newer_than(IndexManager index) {
+        super(NAME, 0, 1);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        IIndex ind = index.getCurrent();
+        IndexPartition partition = ind.getPartition(ind.getPartitionDescriptor(tvars[0]));
+        if(partition == null || partition.getTime() == null) {
+            env.setCurrent(LANG_index_get_all_files.getAllPartitions(index.getCurrent(), env.getFactory()));
+        } else {
+            Date time = partition.getTime();
+            env.setCurrent(getPartitionsAfter(env.getFactory(), ind, time));
+        }
+        return true;
+    }
+
+    private static IStrategoList getPartitionsAfter(ITermFactory factory, IIndex ind, Date time) {
+        IStrategoList results = factory.makeList();
+        for(IndexPartition partition : ind.getAllPartitions()) {
+            if(partition.getTime() != null && !partition.getTime().before(time)) {
+                results = factory.makeListCons(partition.toTerm(factory), results);
+            }
+        }
+        return results;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -15,34 +15,33 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_get_files_of extends AbstractPrimitive {
+    private static String NAME = "LANG_index_get_files_of";
 
-	private static String NAME = "LANG_index_get_files_of";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_get_files_of(SemanticIndexManager index) {
-		super(NAME, 0, 1);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	/**
-	 * Returns [] if URI not in index.
-	 */
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (isTermAppl(tvars[0])) {
-			IStrategoAppl template = (IStrategoAppl) tvars[0];
-			ISemanticIndex ind = index.getCurrent();
-			Collection<SemanticIndexEntry> entries = ind.getEntries(template);
-			IStrategoList files = env.getFactory().makeList();
-			for(SemanticIndexEntry entry : entries) {
-				IStrategoTerm file = entry.getFileDescriptor().toTerm(env.getFactory());
-				files = env.getFactory().makeListCons(file, files);
-			}
-			env.setCurrent(files);
-			return true;
-		} else {
-			return false;
-		}
-	}
+    public LANG_index_get_files_of(IndexManager index) {
+        super(NAME, 0, 1);
+        this.index = index;
+    }
+
+    /**
+     * Returns [] if URI not in index.
+     */
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        if(isTermAppl(tvars[0])) {
+            IStrategoAppl template = (IStrategoAppl) tvars[0];
+            IIndex ind = index.getCurrent();
+            Collection<IndexEntry> entries = ind.getEntries(template);
+            IStrategoList partitions = env.getFactory().makeList();
+            for(IndexEntry entry : entries) {
+                IStrategoTerm partition = entry.getPartitionDescriptor().toTerm(env.getFactory());
+                partitions = env.getFactory().makeListCons(partition, partitions);
+            }
+            env.setCurrent(partitions);
+            return true;
+        } else {
+            return false;
+        }
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_reload.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_reload.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_reload.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -6,20 +6,19 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class LANG_index_reload extends AbstractPrimitive {
+    private static String NAME = "LANG_index_reload";
 
-	private static String NAME = "LANG_index_reload";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_reload(SemanticIndexManager index) {
-		super(NAME, 0, 0);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		index.getCurrent().clear();
-		NotificationCenter.notifyNewProject(index.getCurrentProject());
-		return true;
-	}
+    public LANG_index_reload(IndexManager index) {
+        super(NAME, 0, 0);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        index.getCurrent().clear();
+        NotificationCenter.notifyNewProject(index.getCurrentProject());
+        return true;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_remove.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_remove.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_remove.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -14,26 +14,25 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_remove extends AbstractPrimitive {
+    private static String NAME = "LANG_index_remove";
 
-	private static String NAME = "LANG_index_remove";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_remove(SemanticIndexManager index) {
-		super(NAME, 0, 2);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (isTermAppl(tvars[0]) && (isTermTuple(tvars[1]) || isTermString(tvars[1]))) {
-			IStrategoAppl template = (IStrategoAppl) tvars[0];
-			ISemanticIndex ind = index.getCurrent();
-			SemanticIndexFileDescriptor fileDescriptor = ind.getFileDescriptor(tvars[1]);
-			ind.remove(template, fileDescriptor);
-			return true;
-		} else {
-			return false;
-		}
-	}
+    public LANG_index_remove(IndexManager index) {
+        super(NAME, 0, 2);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        if(isTermAppl(tvars[0]) && (isTermTuple(tvars[1]) || isTermString(tvars[1]))) {
+            IStrategoAppl template = (IStrategoAppl) tvars[0];
+            IIndex ind = index.getCurrent();
+            IndexPartitionDescriptor partitionDescriptor = ind.getPartitionDescriptor(tvars[1]);
+            ind.remove(template, partitionDescriptor);
+            return true;
+        } else {
+            return false;
+        }
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_set_current_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_set_current_file.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_set_current_file.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -9,25 +9,24 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class LANG_index_set_current_file extends AbstractPrimitive {
+    private static String NAME = "LANG_index_set_current_file";
 
-	private static String NAME = "LANG_index_set_current_file";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_set_current_file(SemanticIndexManager index) {
-		super(NAME, 0, 1);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (isTermTuple(tvars[0]) || isTermString(tvars[0])) {
-			ISemanticIndex ind = index.getCurrent();
-			SemanticIndexFileDescriptor fileDescriptor = ind.getFileDescriptor(tvars[0]);
-			index.setCurrentFile(fileDescriptor);
-			return true;
-		} else {
-			return false;
-		}
-	}
+    public LANG_index_set_current_file(IndexManager index) {
+        super(NAME, 0, 1);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        if(isTermTuple(tvars[0]) || isTermString(tvars[0])) {
+            IIndex ind = index.getCurrent();
+            IndexPartitionDescriptor partitionDescriptor = ind.getPartitionDescriptor(tvars[0]);
+            index.setCurrentPartition(partitionDescriptor);
+            return true;
+        } else {
+            return false;
+        }
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_setup.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_setup.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_setup.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -16,30 +16,29 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LANG_index_setup extends AbstractPrimitive {
+    private static String NAME = "LANG_index_setup";
 
-	private static String NAME = "LANG_index_setup";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_setup(SemanticIndexManager index) {
-		super(NAME, 0, 3);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		IStrategoString language = (IStrategoString) tvars[0];
-		IStrategoList projectPaths = (IStrategoList) tvars[1];
-		IStrategoTerm fileTerm = tvars[2];
-		if (projectPaths.size() != 1) {
-			throw new NotImplementedException("Multiple project paths");
-		}
-		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
-		SemanticIndexFileDescriptor project = SemanticIndexFileDescriptor.fromTerm(agent, projectPaths.head());
-		SemanticIndexFileDescriptor file = SemanticIndexFileDescriptor.fromTerm(agent, fileTerm);
-		index.loadIndex(asJavaString(language), project.getURI(), env.getFactory(), agent);
-		index.setCurrentFile(file);
-		index.getCurrent().initialize(env.getFactory(), agent);
-		return true;
-	}
+    public LANG_index_setup(IndexManager index) {
+        super(NAME, 0, 3);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        IStrategoString language = (IStrategoString) tvars[0];
+        IStrategoList projectPaths = (IStrategoList) tvars[1];
+        IStrategoTerm partitionTerm = tvars[2];
+        if(projectPaths.size() != 1) {
+            throw new NotImplementedException("Multiple project paths");
+        }
+        IOAgent agent = SSLLibrary.instance(env).getIOAgent();
+        IndexPartitionDescriptor project = IndexPartitionDescriptor.fromTerm(agent, projectPaths.head());
+        IndexPartitionDescriptor partition = IndexPartitionDescriptor.fromTerm(agent, partitionTerm);
+        index.loadIndex(asJavaString(language), project.getURI(), env.getFactory(), agent);
+        index.setCurrentPartition(partition);
+        index.getCurrent().initialize(env.getFactory(), agent);
+        return true;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -9,22 +9,20 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class LANG_index_start_transaction extends AbstractPrimitive {
+    private static String NAME = "LANG_index_start_transaction";
 
-	private static String NAME = "LANG_index_start_transaction";
-	
-	private final SemanticIndexManager index;
-	
-	public LANG_index_start_transaction(SemanticIndexManager index) {
-		super(NAME, 0, 0);
-		this.index = index;
-	}
+    private final IndexManager index;
 
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
-		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
-		long newRev = index.startTransaction(env.getFactory(), agent);
-		env.setCurrent(env.getFactory().makeInt((int)newRev));
-		return true;
-	}
+    public LANG_index_start_transaction(IndexManager index) {
+        super(NAME, 0, 0);
+        this.index = index;
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
+        IOAgent agent = SSLLibrary.instance(env).getIOAgent();
+        long newRev = index.startTransaction(env.getFactory(), agent);
+        env.setCurrent(env.getFactory().makeInt((int) newRev));
+        return true;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -8,79 +8,73 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LanguageLibrary extends AbstractStrategoOperatorRegistry {
-	
-	public static final String REGISTRY_NAME = "LANGUAGE";
+    public static final String REGISTRY_NAME = "LANGUAGE";
 
-	public LanguageLibrary() {
-		
-		SemanticIndexManager index = new SemanticIndexManager();
-		add(new LANG_index_add(index));
-		add(new LANG_index_remove(index));
-		add(new LANG_index_clear_all(index));
-		add(new LANG_index_clear_file(index));
-		add(new LANG_index_get_all_files(index));
-		add(new LANG_index_get_all_in_file(index));
-		add(new LANG_index_get_children(index));
-		add(new LANG_index_get_files_of(index));
-		add(new LANG_index_get(index));
-		add(new LANG_index_setup(index));
-		add(new LANG_index_commit(index));
-		add(new LANG_index_get_files_newer_than(index));
-		add(new LANG_index_get_current_file(index));
-		add(new LANG_index_start_transaction(index));
-		add(new LANG_index_end_transaction(index));
-		add(new LANG_index_get_file_revision(index));
-		add(new LANG_index_set_current_file(index));
-		add(new LANG_index_reload(index));
-		
-		addSpxIndexPrimitives();
-	}
-
-	/**
-	 * Primitives related to the Symbol-Table and Index
-	 * of Spoofax-lang
-	 */
-	private void addSpxIndexPrimitives() {
-		SpxSemanticIndex spxIndex= new SpxSemanticIndex();
-		add(new SPX_exec_index_manage_command(spxIndex));
-		
-		// primitives to index spoofaxlang compilation unit 
-		add(new SPX_index_compilation_unit(spxIndex));
-		add(new SPX_index_get_compilation_unit(spxIndex));
-		
-		// primitives to index packages, language descriptions  and modules 
-		add(new SPX_index_package_declaration(spxIndex));
-		add(new SPX_index_language_descriptor(spxIndex));
-		add(new SPX_index_module_definition(spxIndex));
-		add(new SPX_index_import_references(spxIndex));
-		
-		
-		add(new SPX_index_get_language_descriptor(spxIndex));
-		add(new SPX_index_get_package_declaration(spxIndex));
-		add(new SPX_index_get_module_declaration(spxIndex));
-		add(new SPX_index_get_module_definition(spxIndex));
-		add(new SPX_index_get_module_declarations_of(spxIndex));
-		add(new SPX_index_get_package_declarations_of(spxIndex));
-		add(new SPX_index_get_package_declarations_by_LanguageName(spxIndex));
-		
-		add(new SPX_index_get_imports(spxIndex));
-		add(new SPX_index_get_imported_to_references(spxIndex));
-		add(new SPX_index_get_related_files_of_packages(spxIndex));
-		add(new SPX_index_equal_resource_uri(spxIndex));
-		
-
-		// Primitives related to symbol-table - i.e. symbol definition and resolving
-		add(new SPX_symtab_new_scope(spxIndex));
-		add(new SPX_symtab_destroy_scope(spxIndex));
-		add(new SPX_symtab_define_symbol(spxIndex));
-		add(new SPX_symtab_resolve_symbols(spxIndex));
-		add(new SPX_symtab_verify_symbol_exists(spxIndex));
-		add(new SPX_symtab_undefine_symbols(spxIndex));
-		add(new SPX_symtab_verify_symbols_have_equal_origin(spxIndex));
-		
-	}
-
-	public String getOperatorRegistryName() {
-		return REGISTRY_NAME;
-	}
+    public LanguageLibrary() {
+        IndexManager index = new IndexManager();
+        add(new LANG_index_add(index));
+        add(new LANG_index_remove(index));
+        add(new LANG_index_clear_all(index));
+        add(new LANG_index_clear_file(index));
+        add(new LANG_index_get_all_files(index));
+        add(new LANG_index_get_all_in_file(index));
+        add(new LANG_index_get_children(index));
+        add(new LANG_index_get_files_of(index));
+        add(new LANG_index_get(index));
+        add(new LANG_index_setup(index));
+        add(new LANG_index_commit(index));
+        add(new LANG_index_get_files_newer_than(index));
+        add(new LANG_index_get_current_file(index));
+        add(new LANG_index_start_transaction(index));
+        add(new LANG_index_end_transaction(index));
+        add(new LANG_index_get_file_revision(index));
+        add(new LANG_index_set_current_file(index));
+        add(new LANG_index_reload(index));
+
+        addSpxIndexPrimitives();
+    }
+
+    /**
+     * Primitives related to the Symbol-Table and Index of Spoofax-lang
+     */
+    private void addSpxIndexPrimitives() {
+        SpxSemanticIndex spxIndex = new SpxSemanticIndex();
+        add(new SPX_exec_index_manage_command(spxIndex));
+
+        // primitives to index spoofaxlang compilation unit
+        add(new SPX_index_compilation_unit(spxIndex));
+        add(new SPX_index_get_compilation_unit(spxIndex));
+
+        // primitives to index packages, language descriptions and modules
+        add(new SPX_index_package_declaration(spxIndex));
+        add(new SPX_index_language_descriptor(spxIndex));
+        add(new SPX_index_module_definition(spxIndex));
+        add(new SPX_index_import_references(spxIndex));
+
+        add(new SPX_index_get_language_descriptor(spxIndex));
+        add(new SPX_index_get_package_declaration(spxIndex));
+        add(new SPX_index_get_module_declaration(spxIndex));
+        add(new SPX_index_get_module_definition(spxIndex));
+        add(new SPX_index_get_module_declarations_of(spxIndex));
+        add(new SPX_index_get_package_declarations_of(spxIndex));
+        add(new SPX_index_get_package_declarations_by_LanguageName(spxIndex));
+
+        add(new SPX_index_get_imports(spxIndex));
+        add(new SPX_index_get_imported_to_references(spxIndex));
+        add(new SPX_index_get_related_files_of_packages(spxIndex));
+        add(new SPX_index_equal_resource_uri(spxIndex));
+
+        // Primitives related to symbol-table - i.e. symbol definition and resolving
+        add(new SPX_symtab_new_scope(spxIndex));
+        add(new SPX_symtab_destroy_scope(spxIndex));
+        add(new SPX_symtab_define_symbol(spxIndex));
+        add(new SPX_symtab_resolve_symbols(spxIndex));
+        add(new SPX_symtab_verify_symbol_exists(spxIndex));
+        add(new SPX_symtab_undefine_symbols(spxIndex));
+        add(new SPX_symtab_verify_symbols_have_equal_origin(spxIndex));
+    }
+
+    public String getOperatorRegistryName() {
+        return REGISTRY_NAME;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/NotificationCenter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/NotificationCenter.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/NotificationCenter.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -15,116 +15,111 @@
  */
 public class NotificationCenter {
 
-	private static Map<ObserverDescription, INotificationService> asyncObservers =
-			new HashMap<ObserverDescription, INotificationService>();
-	
-	/**
-	 * Notify listeners of a added/removed/changed file.
-	 *
-	 * @param file      The URI of the file
-	 * @param subfile   The subfilename, or null if not applicable
-	 */
-	public synchronized static void notifyFileChanges(URI file, String subfile) {
-		assert file.isAbsolute();
-		for (INotificationService observer : asyncObservers.values()) {
-			observer.notifyFileChanges(file, subfile);
-		}
-	}
-	
-	/**
-	 * Notify listeners of multiple added/removed/changed files.
-	 *
-	 * @param files		The changed files
-	 */
-	public synchronized static void notifyFileChanges(FileSubfile[] files) {
-		if(files.length == 1)
-		{
-			FileSubfile file = files[0];
-			notifyFileChanges(file.file, file.subfile);
-			return;
-		}
-		
-		for(FileSubfile file : files) {
-			assert file.file.isAbsolute();
-		}
-		
-		for (INotificationService observer : asyncObservers.values()) {
-			observer.notifyFileChanges(files);
-		}
-	}
-
-	/**
-	 * Notify listener of a new project.
-	 * All files in it should be compared to the
-	 * timestamps or other metadata stored about them.
-	 */
-	public synchronized static void notifyNewProject(URI project) {
-		for (INotificationService observer : asyncObservers.values()) {
-			observer.notifyNewProject(project);
-		}
-	}
-	
-	/**
-	 * Registers an observer. Only one observer is stored at a time for a language/serviceName combination.
-	 * 
-	 * @param language     The language for this observer, may be null.
-	 * @param serviceName  The name of the service represented by this observer, may be null.
-	 */
-	public synchronized static void putObserver(String language, String serviceName, INotificationService service) {
-		asyncObservers.put(new ObserverDescription(language, serviceName), service);
-	}
-	
-	public synchronized static boolean removeObserver(String language, String service) {
-		return asyncObservers.remove(new ObserverDescription(language, service)) != null;
-	}
-	
-	/**
-	 * An observer. A wannabe case class.
-	 * 
-	 * @author Lennart Kats <lennart add lclnet.nl>
-	 */
-	private static class ObserverDescription {
-		final String language;
-		
-		final String service;
-
-		public ObserverDescription(String language, String service) {
-			this.language = language;
-			this.service = service;
-		}
-
-		@Override
-		public int hashCode() {
-			final int prime = 31;
-			int result = 1;
-			result = prime * result
-					+ ((language == null) ? 0 : language.hashCode());
-			result = prime * result
-					+ ((service == null) ? 0 : service.hashCode());
-			return result;
-		}
-
-		@Override
-		public boolean equals(Object obj) {
-			if (this == obj)
-				return true;
-			if (obj == null)
-				return false;
-			if (!(obj instanceof ObserverDescription))
-				return false;
-			ObserverDescription other = (ObserverDescription) obj;
-			if (language == null) {
-				if (other.language != null)
-					return false;
-			} else if (!language.equals(other.language))
-				return false;
-			if (service == null) {
-				if (other.service != null)
-					return false;
-			} else if (!service.equals(other.service))
-				return false;
-			return true;
-		}
-		
-	}
+    private static Map<ObserverDescription, INotificationService> asyncObservers =
+        new HashMap<ObserverDescription, INotificationService>();
+
+    /**
+     * Notify listeners of a added/removed/changed file.
+     * 
+     * @param file The URI of the file
+     * @param subfile The subfilename, or null if not applicable
+     */
+    public synchronized static void notifyFileChanges(URI file, String subfile) {
+        assert file.isAbsolute();
+        for(INotificationService observer : asyncObservers.values()) {
+            observer.notifyFileChanges(file, subfile);
+        }
+    }
+
+    /**
+     * Notify listeners of multiple added/removed/changed files.
+     * 
+     * @param files The changed files
+     */
+    public synchronized static void notifyFileChanges(FileSubfile[] files) {
+        if(files.length == 1) {
+            FileSubfile file = files[0];
+            notifyFileChanges(file.file, file.subfile);
+            return;
+        }
+
+        for(FileSubfile file : files) {
+            assert file.file.isAbsolute();
+        }
+
+        for(INotificationService observer : asyncObservers.values()) {
+            observer.notifyFileChanges(files);
+        }
+    }
+
+    /**
+     * Notify listener of a new project. All files in it should be compared to the timestamps or other metadata stored
+     * about them.
+     */
+    public synchronized static void notifyNewProject(URI project) {
+        for(INotificationService observer : asyncObservers.values()) {
+            observer.notifyNewProject(project);
+        }
+    }
+
+    /**
+     * Registers an observer. Only one observer is stored at a time for a language/serviceName combination.
+     * 
+     * @param language The language for this observer, may be null.
+     * @param serviceName The name of the service represented by this observer, may be null.
+     */
+    public synchronized static void putObserver(String language, String serviceName, INotificationService service) {
+        asyncObservers.put(new ObserverDescription(language, serviceName), service);
+    }
+
+    public synchronized static boolean removeObserver(String language, String service) {
+        return asyncObservers.remove(new ObserverDescription(language, service)) != null;
+    }
+
+    /**
+     * An observer. A wannabe case class.
+     * 
+     * @author Lennart Kats <lennart add lclnet.nl>
+     */
+    private static class ObserverDescription {
+        final String language;
+        final String service;
+
+        public ObserverDescription(String language, String service) {
+            this.language = language;
+            this.service = service;
+        }
+
+        @Override
+        public int hashCode() {
+            final int prime = 31;
+            int result = 1;
+            result = prime * result + ((language == null) ? 0 : language.hashCode());
+            result = prime * result + ((service == null) ? 0 : service.hashCode());
+            return result;
+        }
+
+        @Override
+        public boolean equals(Object obj) {
+            if(this == obj)
+                return true;
+            if(obj == null)
+                return false;
+            if(!(obj instanceof ObserverDescription))
+                return false;
+            ObserverDescription other = (ObserverDescription) obj;
+            if(language == null) {
+                if(other.language != null)
+                    return false;
+            } else if(!language.equals(other.language))
+                return false;
+            if(service == null) {
+                if(other.service != null)
+                    return false;
+            } else if(!service.equals(other.service))
+                return false;
+            return true;
+        }
+
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithPartitionDescriptor.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithFileDescriptor.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithFileDescriptor.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithPartitionDescriptor.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -2,20 +2,20 @@
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 
-public class TemplateWithFileDescriptor {
-	private final IStrategoAppl template;
-	private final SemanticIndexFileDescriptor fileDescriptor;
-	
-	public TemplateWithFileDescriptor(IStrategoAppl template, SemanticIndexFileDescriptor fileDescriptor) {
-		this.template = template;
-		this.fileDescriptor = fileDescriptor;
-	}
-	
-	public IStrategoAppl getTemplate() {
-		return template;
-	}
-	
-	public SemanticIndexFileDescriptor getFileDescriptor() {
-		return fileDescriptor;
-	}
+public class TemplateWithPartitionDescriptor {
+    private final IStrategoAppl template;
+    private final IndexPartitionDescriptor fileDescriptor;
+
+    public TemplateWithPartitionDescriptor(IStrategoAppl template, IndexPartitionDescriptor partitionDescriptor) {
+        this.template = template;
+        this.fileDescriptor = partitionDescriptor;
+    }
+
+    public IStrategoAppl getTemplate() {
+        return template;
+    }
+
+    public IndexPartitionDescriptor getPartitionDescriptor() {
+        return fileDescriptor;
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionIndex.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionIndex.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -11,243 +11,240 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class TransactionSemanticIndex implements ISemanticIndex {
-	private ISemanticIndex index;
-	private ISemanticIndex transactionIndex;
-	private SemanticIndexFileDescriptor currentFile;
-	private boolean clearedCurrentFile = false;
-	private List<TemplateWithFileDescriptor> removedEntries = new ArrayList<TemplateWithFileDescriptor>();
-	
-	public TransactionSemanticIndex(ISemanticIndex index, ISemanticIndex transactionIndex, 
-			SemanticIndexFileDescriptor currentFile) {
-		this.index = index;
-		this.transactionIndex = transactionIndex;
-		this.currentFile = currentFile;
-	}
-	
-	public ISemanticIndex getIndex() {
-		return index;
-	}
-	
-	public ISemanticIndex getTransactionIndex() {
-		return transactionIndex;
-	}
-	
-	public boolean hasClearedCurrentFile() {
-		return clearedCurrentFile;
-	}
-	
-	public SemanticIndexFileDescriptor getCurrentFile() {
-		return currentFile;
-	}
-	
-	public Collection<TemplateWithFileDescriptor> getRemovedEntries() {
-		return removedEntries;
-	}
-	
-	public void initialize(ITermFactory factory, IOAgent agent) {
-		// Should not be called, both the index and transaction index should already be initialized.
-		assert false;
-	}
-
-	public SemanticIndexEntryFactory getFactory() {
-		return index.getFactory();
-	}
-
-	public void add(IStrategoAppl entry, SemanticIndexFileDescriptor fileDescriptor) {
-		transactionIndex.add(entry, fileDescriptor);
-	}
-	
-	public void add(SemanticIndexEntry entry) {
-		transactionIndex.add(entry);
-	}
-
-	public void addAll(IStrategoList entries, SemanticIndexFileDescriptor fileDescriptor) {
-		transactionIndex.addAll(entries, fileDescriptor);
-	}
-	
-	public void remove(IStrategoAppl template, SemanticIndexFileDescriptor fileDescriptor) {
-		transactionIndex.remove(template, fileDescriptor);
-		removedEntries.add(new TemplateWithFileDescriptor(template, fileDescriptor));
-	}
-
-	public Collection<SemanticIndexEntry> getEntries(IStrategoAppl template) {
-		Collection<SemanticIndexEntry> entries1 = transactionIndex.getEntries(template);
-		getReadLock().lock();
-		try {
-			Collection<SemanticIndexEntry> entries2 = filterInvisibleEntries(index.getEntries(template));
-			return concat(entries1, entries2);
-		} finally {
-			getReadLock().unlock();
-		}
-	}
-	
-	public Collection<SemanticIndexEntry> getAllEntries() {
-		Collection<SemanticIndexEntry> entries1 = transactionIndex.getAllEntries();
-		getReadLock().lock();
-		try {
-			Collection<SemanticIndexEntry> entries2 = filterInvisibleEntries(index.getAllEntries());
-			return concat(entries1, entries2);
-		} finally {
-			getReadLock().unlock();
-		}
-	}
-
-	public Collection<SemanticIndexEntry> getEntryChildTerms(
-			IStrategoAppl template) {
-		Collection<SemanticIndexEntry> entries1 = transactionIndex.getEntryChildTerms(template);
-		getReadLock().lock();
-		try {
-			Collection<SemanticIndexEntry> entries2 = filterInvisibleEntries(index.getEntryChildTerms(template));
-			return concat(entries1, entries2);
-		} finally {
-			getReadLock().unlock();
-		}
-	}
-
-	public Collection<SemanticIndexEntry> getEntriesInFile(
-			SemanticIndexFileDescriptor fileDescriptor) {
-		Collection<SemanticIndexEntry> entries1 = transactionIndex.getEntriesInFile(fileDescriptor);
-		
-		if(isCurrentFile(fileDescriptor) && clearedCurrentFile)
-			return entries1; // Current file has been cleared, entries from index should not be visible.
-		
-		getReadLock().lock();
-		try {
-			Collection<SemanticIndexEntry> entries2 = index.getEntriesInFile(fileDescriptor);
-			return concat(entries1, entries2);
-		} finally {
-			getReadLock().unlock();
-		}
-	}
-	
-  public Collection<SemanticIndexFileDescriptor> getFilesOf(IStrategoAppl template)
-  {
-    Collection<SemanticIndexFileDescriptor> entries1 = transactionIndex.getFilesOf(template);
-    getReadLock().lock();
-    try {
-      // TODO: Need to filter hidden entries here?
-      Collection<SemanticIndexFileDescriptor> entries2 = index.getFilesOf(template);
-      return concat(entries1, entries2);
-    } finally {
-      getReadLock().unlock();
-    }
-  }
-	
-	public SemanticIndexFile getFile(SemanticIndexFileDescriptor fileDescriptor) {
-		// Need a write lock here because getFile can add a new file.
-		getWriteLock().lock();
-		try {
-			return index.getFile(fileDescriptor);
-		} finally {
-			getWriteLock().unlock();
-		}
-	}
-	
-	public SemanticIndexFileDescriptor getFileDescriptor(IStrategoTerm fileTerm) {
-		return index.getFileDescriptor(fileTerm);
-	}
-
-	public void removeFile(IStrategoTerm fileTerm) {
-		removeFile(transactionIndex.getFileDescriptor(fileTerm));
-	}
-	
-	public void removeFile(SemanticIndexFileDescriptor fileDescriptor) {
-		assert isCurrentFile(fileDescriptor); // May only clear current file.
-
-		clearedCurrentFile = true;
-		transactionIndex.removeFile(fileDescriptor);
-	}
-
-	public Collection<SemanticIndexFile> getAllFiles() {
-		// TODO: No duplicates?
-		Collection<SemanticIndexFile> files1 = transactionIndex.getAllFiles();
-		getReadLock().lock();
-		try {
-			Collection<SemanticIndexFile> files2 = index.getAllFiles();
-			return concat(files1, files2);
-		} finally {
-			getReadLock().unlock();
-		}
-	}
-	
-	public Collection<SemanticIndexFileDescriptor> getAllFileDescriptors() {
-		// TODO: No duplicates?
-		Collection<SemanticIndexFileDescriptor> files1 = transactionIndex.getAllFileDescriptors();
-		getReadLock().lock();
-		try {
-			Collection<SemanticIndexFileDescriptor> files2 = index.getAllFileDescriptors();
-			return concat(files1, files2);
-		} finally {
-			getReadLock().unlock();
-		}
-	}
-
-	public void clear() {
-		// Should not be called on transaction index, index cannot be cleared.
-		assert false;
-	}
-
-	public IStrategoTerm toTerm(boolean includePositions) {
-		return index.toTerm(includePositions);
-	}
-	
-	/**
-	 * Queries if given file descriptor equals the current file; the file this transaction index has 
-	 * been created for.
-	 * 
-	 * @param fileDescriptor	The file descriptor to check.
-	 * @return True if given file descriptor equals the current file.
-	 */
-	private boolean isCurrentFile(SemanticIndexFileDescriptor fileDescriptor) {
-		return fileDescriptor.equals(currentFile) || fileDescriptor.getURI().equals(currentFile.getURI());
-	}
-	
-	/**
-	 * Query if given entry should be visible. Entries are invisible if the current file is cleared and the
-	 * file descriptor of the entry equals the current file descriptor. Invisible entries from the global
-	 * index should not be returned.
-	 * 
-	 * @param entry	The entry to check.
-	 * @return True if given entry should be visible, false otherwise.
-	 */
-	private boolean isEntryVisible(SemanticIndexEntry entry) {
-		return !(clearedCurrentFile && isCurrentFile(entry.getFileDescriptor()));
-	}
-	
-	/**
-	 * Given a collection of entries, filters out all invisible entries.
-	 * 
-	 * @see #isEntryVisible
-	 * @param entries The collection of entries to filter.
-	 * @return Filtered collection of entries.
-	 */
-	private Collection<SemanticIndexEntry> filterInvisibleEntries(Collection<SemanticIndexEntry> entries) {
-		if(!clearedCurrentFile)
-			return entries;
-		
-		List<SemanticIndexEntry> l = new ArrayList<SemanticIndexEntry>(entries.size());
-		for(SemanticIndexEntry entry : entries) {
-			if(isEntryVisible(entry))
-				l.add(entry);
-		}
-		return l;
-	}
-	
-	private <T> Collection<T> concat(Collection<T> c1, Collection<T> c2) {
-		// Need to copy here, collections could be changed from other threads.
-		List<T> l = new ArrayList<T>(c1.size() + c2.size());
-		l.addAll(c1);
-		l.addAll(c2);
-		
-		return l;
-	}
-	
-	private Lock getReadLock() {
-		return SemanticIndexManager.getTransactionLock().readLock();
-	}
-	
-	private Lock getWriteLock() {
-		return SemanticIndexManager.getTransactionLock().writeLock();
-	}
+public class TransactionIndex implements IIndex {
+    private IIndex index;
+    private IIndex transactionIndex;
+    private IndexPartitionDescriptor currentPartition;
+    private boolean clearedCurrentPartition = false;
+    private List<TemplateWithPartitionDescriptor> removedEntries = new ArrayList<TemplateWithPartitionDescriptor>();
+
+    public TransactionIndex(IIndex index, IIndex transactionIndex, IndexPartitionDescriptor currentPartition) {
+        this.index = index;
+        this.transactionIndex = transactionIndex;
+        this.currentPartition = currentPartition;
+    }
+
+    public IIndex getIndex() {
+        return index;
+    }
+
+    public IIndex getTransactionIndex() {
+        return transactionIndex;
+    }
+
+    public boolean hasClearedCurrentPartition() {
+        return clearedCurrentPartition;
+    }
+
+    public IndexPartitionDescriptor getCurrentPartition() {
+        return currentPartition;
+    }
+
+    public Collection<TemplateWithPartitionDescriptor> getRemovedEntries() {
+        return removedEntries;
+    }
+
+    public void initialize(ITermFactory factory, IOAgent agent) {
+        // Should not be called, both the index and transaction index should already be initialized.
+        assert false;
+    }
+
+    public IndexEntryFactory getFactory() {
+        return index.getFactory();
+    }
+
+    public void add(IStrategoAppl entry, IndexPartitionDescriptor partitionDescriptor) {
+        transactionIndex.add(entry, partitionDescriptor);
+    }
+
+    public void add(IndexEntry entry) {
+        transactionIndex.add(entry);
+    }
+
+    public void addAll(IStrategoList entries, IndexPartitionDescriptor partitionDescriptor) {
+        transactionIndex.addAll(entries, partitionDescriptor);
+    }
+
+    public void remove(IStrategoAppl template, IndexPartitionDescriptor partitionDescriptor) {
+        transactionIndex.remove(template, partitionDescriptor);
+        removedEntries.add(new TemplateWithPartitionDescriptor(template, partitionDescriptor));
+    }
+
+    public Collection<IndexEntry> getEntries(IStrategoAppl template) {
+        Collection<IndexEntry> entries1 = transactionIndex.getEntries(template);
+        getReadLock().lock();
+        try {
+            Collection<IndexEntry> entries2 = filterInvisibleEntries(index.getEntries(template));
+            return concat(entries1, entries2);
+        } finally {
+            getReadLock().unlock();
+        }
+    }
+
+    public Collection<IndexEntry> getAllEntries() {
+        Collection<IndexEntry> entries1 = transactionIndex.getAllEntries();
+        getReadLock().lock();
+        try {
+            Collection<IndexEntry> entries2 = filterInvisibleEntries(index.getAllEntries());
+            return concat(entries1, entries2);
+        } finally {
+            getReadLock().unlock();
+        }
+    }
+
+    public Collection<IndexEntry> getEntryChildTerms(IStrategoAppl template) {
+        Collection<IndexEntry> entries1 = transactionIndex.getEntryChildTerms(template);
+        getReadLock().lock();
+        try {
+            Collection<IndexEntry> entries2 = filterInvisibleEntries(index.getEntryChildTerms(template));
+            return concat(entries1, entries2);
+        } finally {
+            getReadLock().unlock();
+        }
+    }
+
+    public Collection<IndexEntry> getEntriesInPartition(IndexPartitionDescriptor partitionDescriptor) {
+        Collection<IndexEntry> entries1 = transactionIndex.getEntriesInPartition(partitionDescriptor);
+
+        if(isCurrentPartition(partitionDescriptor) && clearedCurrentPartition)
+            return entries1; // Current partition has been cleared, entries from index should not be visible.
+
+        getReadLock().lock();
+        try {
+            Collection<IndexEntry> entries2 = index.getEntriesInPartition(partitionDescriptor);
+            return concat(entries1, entries2);
+        } finally {
+            getReadLock().unlock();
+        }
+    }
+
+    public Collection<IndexPartitionDescriptor> getPartitionsOf(IStrategoAppl template) {
+        Collection<IndexPartitionDescriptor> entries1 = transactionIndex.getPartitionsOf(template);
+        getReadLock().lock();
+        try {
+            // TODO: Need to filter hidden entries here?
+            Collection<IndexPartitionDescriptor> entries2 = index.getPartitionsOf(template);
+            return concat(entries1, entries2);
+        } finally {
+            getReadLock().unlock();
+        }
+    }
+
+    public IndexPartition getPartition(IndexPartitionDescriptor partitionDescriptor) {
+        // Need a write lock here because getPartition can add a new partition.
+        getWriteLock().lock();
+        try {
+            return index.getPartition(partitionDescriptor);
+        } finally {
+            getWriteLock().unlock();
+        }
+    }
+
+    public IndexPartitionDescriptor getPartitionDescriptor(IStrategoTerm partitionTerm) {
+        return index.getPartitionDescriptor(partitionTerm);
+    }
+
+    public void removePartition(IStrategoTerm partitionTerm) {
+        removePartition(transactionIndex.getPartitionDescriptor(partitionTerm));
+    }
+
+    public void removePartition(IndexPartitionDescriptor partitionDescriptor) {
+        assert isCurrentPartition(partitionDescriptor); // May only clear current partition.
+
+        clearedCurrentPartition = true;
+        transactionIndex.removePartition(partitionDescriptor);
+    }
+
+    public Collection<IndexPartition> getAllPartitions() {
+        // TODO: No duplicates?
+        Collection<IndexPartition> partitions1 = transactionIndex.getAllPartitions();
+        getReadLock().lock();
+        try {
+            Collection<IndexPartition> partitions2 = index.getAllPartitions();
+            return concat(partitions1, partitions2);
+        } finally {
+            getReadLock().unlock();
+        }
+    }
+
+    public Collection<IndexPartitionDescriptor> getAllPartitionDescriptors() {
+        // TODO: No duplicates?
+        Collection<IndexPartitionDescriptor> partitions1 = transactionIndex.getAllPartitionDescriptors();
+        getReadLock().lock();
+        try {
+            Collection<IndexPartitionDescriptor> partitions2 = index.getAllPartitionDescriptors();
+            return concat(partitions1, partitions2);
+        } finally {
+            getReadLock().unlock();
+        }
+    }
+
+    public void clear() {
+        // Should not be called on transaction index, index cannot be cleared.
+        assert false;
+    }
+
+    public IStrategoTerm toTerm(boolean includePositions) {
+        return index.toTerm(includePositions);
+    }
+
+    /**
+     * Queries if given partition descriptor equals the current partition; the partition this transaction index has been
+     * created for.
+     * 
+     * @param partitionDescriptor The partition descriptor to check.
+     * @return True if given partition descriptor equals the current partition.
+     */
+    private boolean isCurrentPartition(IndexPartitionDescriptor partitionDescriptor) {
+        return partitionDescriptor.equals(currentPartition)
+            || partitionDescriptor.getURI().equals(currentPartition.getURI());
+    }
+
+    /**
+     * Query if given entry should be visible. Entries are invisible if the current partition is cleared and the
+     * partition descriptor of the entry equals the current partition descriptor. Invisible entries from the global
+     * index should not be returned.
+     * 
+     * @param entry The entry to check.
+     * @return True if given entry should be visible, false otherwise.
+     */
+    private boolean isEntryVisible(IndexEntry entry) {
+        return !(clearedCurrentPartition && isCurrentPartition(entry.getPartitionDescriptor()));
+    }
+
+    /**
+     * Given a collection of entries, filters out all invisible entries.
+     * 
+     * @see #isEntryVisible
+     * @param entries The collection of entries to filter.
+     * @return Filtered collection of entries.
+     */
+    private Collection<IndexEntry> filterInvisibleEntries(Collection<IndexEntry> entries) {
+        if(!clearedCurrentPartition)
+            return entries;
+
+        List<IndexEntry> l = new ArrayList<IndexEntry>(entries.size());
+        for(IndexEntry entry : entries) {
+            if(isEntryVisible(entry))
+                l.add(entry);
+        }
+        return l;
+    }
+
+    private <T> Collection<T> concat(Collection<T> c1, Collection<T> c2) {
+        // Need to copy here, collections could be changed from other threads.
+        List<T> l = new ArrayList<T>(c1.size() + c2.size());
+        l.addAll(c1);
+        l.addAll(c2);
+
+        return l;
+    }
+
+    private Lock getReadLock() {
+        return IndexManager.getTransactionLock().readLock();
+    }
+
+    private Lock getWriteLock() {
+        return IndexManager.getTransactionLock().writeLock();
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexSymbolTableTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/SemanticIndexSymbolTableTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/SemanticIndexSymbolTableTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexSymbolTableTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -10,253 +10,241 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.spoofax.interpreter.library.language.SemanticIndexEntry;
-import org.spoofax.interpreter.library.language.SemanticIndexFile;
-import org.spoofax.interpreter.library.language.SemanticIndexFileDescriptor;
+import org.spoofax.interpreter.library.language.IndexEntry;
+import org.spoofax.interpreter.library.language.IndexPartition;
+import org.spoofax.interpreter.library.language.IndexPartitionDescriptor;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class SemanticIndexSymbolTableTest extends SemanticIndexTest {
-  @Before
-  public void setUp()
-  {
-    index.clear();
-  }
-  
-  @Test
-  public void files() {
-    IStrategoTerm fileTerm1 = file("a/b/c");
-    IStrategoTerm fileTerm2 = file("a/b/c", "some", "element");
-
-    SemanticIndexFileDescriptor file1 = setupIndex(fileTerm1);
-    SemanticIndexFileDescriptor file2 = setupIndex(fileTerm2);
-
-    SemanticIndexFileDescriptor ret1 = index.getFileDescriptor(fileTerm1);
-    SemanticIndexFileDescriptor ret2 = index.getFileDescriptor(fileTerm2);
-
-    // Files have not been added yet.
-    Collection<SemanticIndexFileDescriptor> all1 = index
-        .getAllFileDescriptors();
-    assertFalse(all1.contains(ret1));
-    assertFalse(all1.contains(ret2));
-
-    assertEquals(file1, ret1);
-    assertEquals(file1.toTerm(factory), ret1.toTerm(factory));
-    assertEquals(file2, ret2);
-    assertEquals(file2.toTerm(factory), ret2.toTerm(factory));
-
-    SemanticIndexFile retf1 = index.getFile(file1);
-    SemanticIndexFile retf2 = index.getFile(file2);
-
-    assertEquals(retf1.getDescriptor(), ret1);
-    assertEquals(file1.toTerm(factory), retf1.toTerm(factory));
-    assertEquals(retf2.getDescriptor(), ret2);
-    assertEquals(file2.toTerm(factory), retf2.toTerm(factory));
-
-    // Files have been added by calling getFile.
-    Collection<SemanticIndexFileDescriptor> all2 = index
-        .getAllFileDescriptors();
-    assertTrue(all2.contains(ret1));
-    assertTrue(all2.contains(ret2));
-  }
-
-  @Test
-  public void getEntries() {
-    IStrategoAppl def = def("Class", "java", "lang", "String");
-    IStrategoAppl type = type(constructor("Type", str("String")), "Class",
-        "java", "lang", "String");
-
-    assertEquals(index.getEntries(def).size(), 0);
-    assertEquals(index.getEntries(type).size(), 0);
-
-    index.add(def, file);
-    index.add(type, file);
-
-    Collection<SemanticIndexEntry> ret1 = index.getEntries(def);
-    Collection<SemanticIndexEntry> ret2 = index.getEntries(type);
-
-    assertTrue(matchAll(ret1, def));
-    assertTrue(matchAll(ret2, type));
-    assertFalse(matchAll(ret1, type));
-    assertFalse(matchAll(ret2, def));
-  }
-
-  @Test
-  public void duplicateAddAndGetEntries() {
-    IStrategoAppl def = def("Entity", "CRM", "Person");
-    IStrategoAppl read = read("Function", "CRM", "Person", "GetName");
-
-    assertEquals(index.getEntries(def).size(), 0);
-    assertEquals(index.getEntries(read).size(), 0);
-
-    index.add(def, file);
-    index.add(def, file);
-    index.add(def, file);
-    index.add(read, file);
-    index.add(read, file);
-
-    Collection<SemanticIndexEntry> ret1 = index.getEntries(def);
-    Collection<SemanticIndexEntry> ret2 = index.getEntries(read);
-
-    assertEquals(ret1.size(), 3);
-    assertEquals(ret2.size(), 2);
-
-    assertTrue(matchAll(ret1, def));
-    assertTrue(matchAll(ret2, read));
-    assertFalse(matchAll(ret1, read));
-    assertFalse(matchAll(ret2, def));
-
-    // Add entries from ret2 again using the other add function.
-    // Need to make a copy of ret2, because ret2 is a view over the index and
-    // could cause a ConcurrentModificationException
-    for (SemanticIndexEntry entry : ret2.toArray(new SemanticIndexEntry[0]))
-      index.add(entry);
-
-    Collection<SemanticIndexEntry> ret3 = index.getEntries(read);
-    assertEquals(ret2.size(), 4);
-    assertTrue(matchAll(ret3, read));
-    assertFalse(matchAll(ret3, def));
-  }
-
-  @Test
-  public void addAllAndGetAllEntries() {
-    IStrategoAppl def = def("Class", "java", "lang", "String");
-    IStrategoAppl type = type(constructor("Type", str("String")), "Class",
-        "java", "lang", "String");
-    IStrategoList all = factory.makeList(def, type);
-
-    assertEquals(index.getEntries(def).size(), 0);
-    assertEquals(index.getEntries(type).size(), 0);
-
-    index.addAll(all, file);
-
-    Collection<SemanticIndexEntry> ret = index.getAllEntries();
-
-    assertTrue(contains(ret, def));
-    assertTrue(contains(ret, type));
-    assertFalse(contains(ret, all));
-  }
-
-  @Test
-  public void getChildEntries() {
-    IStrategoAppl classDef = def("Class", "java", "lang", "String");
-    IStrategoAppl methodDef1 = def("Method", "java", "lang", "String", "charAt");
-    IStrategoAppl methodDef2 = def("Method", "java", "lang", "String",
-        "getBytes");
-    IStrategoAppl fieldDef = def("Field", "java", "lang", "String", "length");
-
-    IStrategoAppl methodsTemplate = def("Method", "java", "lang", "String");
-    IStrategoAppl fieldsTemplate = def("Field", "java", "lang", "String");
-
-    assertEquals(index.getEntries(classDef).size(), 0);
-    assertEquals(index.getEntries(methodDef1).size(), 0);
-    assertEquals(index.getEntries(methodDef2).size(), 0);
-    assertEquals(index.getEntries(fieldDef).size(), 0);
-    assertEquals(index.getEntryChildTerms(methodsTemplate).size(), 0);
-    assertEquals(index.getEntryChildTerms(fieldsTemplate).size(), 0);
-
-    index.add(classDef, file);
-    index.add(methodDef1, file);
-    index.add(methodDef2, file);
-    index.add(fieldDef, file);
-
-    Collection<SemanticIndexEntry> ret1 = index
-        .getEntryChildTerms(methodsTemplate);
-    Collection<SemanticIndexEntry> ret2 = index
-        .getEntryChildTerms(fieldsTemplate);
-
-    assertEquals(ret1.size(), 2);
-    assertEquals(ret2.size(), 1);
-
-    assertTrue(contains(ret1, methodDef1));
-    assertTrue(contains(ret1, methodDef2));
-    assertFalse(contains(ret1, fieldDef));
-    assertFalse(contains(ret1, classDef));
-
-    assertFalse(contains(ret2, methodDef1));
-    assertFalse(contains(ret2, methodDef2));
-    assertTrue(contains(ret2, fieldDef));
-    assertFalse(contains(ret2, classDef));
-  }
-
-  @Test
-  public void getEntriesInFileAndRemoveFile() {
-    IStrategoTerm fileTerm1 = file("TestFile", "Partition", "1");
-    SemanticIndexFileDescriptor file1 = setupIndex(fileTerm1);
-    SemanticIndexFileDescriptor file2 = setupIndex(file("TestFile",
-        "Partition", "2"));
-
-    IStrategoAppl def1 = def("Entity", "CRM", "Person");
-    IStrategoAppl read = read("Function", "CRM", "Person", "GetName");
-
-    IStrategoAppl def2 = def("Class", "java", "lang", "String");
-    IStrategoAppl type = type(constructor("Type", str("String")), "Class",
-        "java", "lang", "String");
-
-    assertEquals(index.getEntries(def1).size(), 0);
-    assertEquals(index.getEntries(read).size(), 0);
-    assertEquals(index.getEntries(def2).size(), 0);
-    assertEquals(index.getEntries(type).size(), 0);
-    assertEquals(index.getEntriesInFile(file1).size(), 0);
-    assertEquals(index.getEntriesInFile(file2).size(), 0);
-
-    index.add(def1, file1);
-    index.add(read, file1);
-    index.add(def2, file2);
-    index.add(type, file2);
-
-    Collection<SemanticIndexEntry> ret1 = index.getEntriesInFile(file1);
-    Collection<SemanticIndexEntry> ret2 = index.getEntriesInFile(file2);
-
-    assertEquals(ret1.size(), 2);
-    assertEquals(ret2.size(), 2);
-
-    assertTrue(contains(ret1, def1));
-    assertTrue(contains(ret1, read));
-    assertFalse(contains(ret1, def2));
-    assertFalse(contains(ret1, type));
-
-    assertFalse(contains(ret2, def1));
-    assertFalse(contains(ret2, read));
-    assertTrue(contains(ret2, def2));
-    assertTrue(contains(ret2, type));
-
-    for (SemanticIndexEntry entry : ret1) {
-      assertSame(entry.getFileDescriptor(), file1);
-      assertNotSame(entry.getFileDescriptor(), file2);
-    }
-    for (SemanticIndexEntry entry : ret2) {
-      assertNotSame(entry.getFileDescriptor(), file1);
-      assertSame(entry.getFileDescriptor(), file2);
-    }
-
-    index.removeFile(fileTerm1);
-    assertEquals(index.getEntriesInFile(file1).size(), 0);
-    assertEquals(index.getEntriesInFile(file2).size(), 2);
-
-    index.removeFile(file2);
-    assertEquals(index.getEntriesInFile(file2).size(), 0);
-  }
-
-  @Test
-  public void clear() {
-    SemanticIndexFileDescriptor file1 = setupIndex(file("TestFile",
-        "Partition", "1"));
-    SemanticIndexFileDescriptor file2 = setupIndex(file("TestFile",
-        "Partition", "2"));
-
-    IStrategoAppl readAll = readAll("Str", "Class", "java", "lang");
-
-    assertEquals(index.getAllEntries().size(), 0);
-
-    index.add(readAll, file1);
-    index.add(readAll, file2);
+public class IndexSymbolTableTest extends IndexTest {
+    @Before
+    public void setUp() {
+        index.clear();
+    }
+
+    @Test
+    public void files() {
+        IStrategoTerm fileTerm1 = file("a/b/c");
+        IStrategoTerm fileTerm2 = file("a/b/c", "some", "element");
+
+        IndexPartitionDescriptor file1 = setupIndex(fileTerm1);
+        IndexPartitionDescriptor file2 = setupIndex(fileTerm2);
+
+        IndexPartitionDescriptor ret1 = index.getPartitionDescriptor(fileTerm1);
+        IndexPartitionDescriptor ret2 = index.getPartitionDescriptor(fileTerm2);
+
+        // Files have not been added yet.
+        Collection<IndexPartitionDescriptor> all1 = index.getAllPartitionDescriptors();
+        assertFalse(all1.contains(ret1));
+        assertFalse(all1.contains(ret2));
+
+        assertEquals(file1, ret1);
+        assertEquals(file1.toTerm(factory), ret1.toTerm(factory));
+        assertEquals(file2, ret2);
+        assertEquals(file2.toTerm(factory), ret2.toTerm(factory));
+
+        IndexPartition retf1 = index.getPartition(file1);
+        IndexPartition retf2 = index.getPartition(file2);
+
+        assertEquals(retf1.getDescriptor(), ret1);
+        assertEquals(file1.toTerm(factory), retf1.toTerm(factory));
+        assertEquals(retf2.getDescriptor(), ret2);
+        assertEquals(file2.toTerm(factory), retf2.toTerm(factory));
+
+        // Files have been added by calling getFile.
+        Collection<IndexPartitionDescriptor> all2 = index.getAllPartitionDescriptors();
+        assertTrue(all2.contains(ret1));
+        assertTrue(all2.contains(ret2));
+    }
+
+    @Test
+    public void getEntries() {
+        IStrategoAppl def = def("Class", "java", "lang", "String");
+        IStrategoAppl type = type(constructor("Type", str("String")), "Class", "java", "lang", "String");
+
+        assertEquals(index.getEntries(def).size(), 0);
+        assertEquals(index.getEntries(type).size(), 0);
+
+        index.add(def, file);
+        index.add(type, file);
+
+        Collection<IndexEntry> ret1 = index.getEntries(def);
+        Collection<IndexEntry> ret2 = index.getEntries(type);
+
+        assertTrue(matchAll(ret1, def));
+        assertTrue(matchAll(ret2, type));
+        assertFalse(matchAll(ret1, type));
+        assertFalse(matchAll(ret2, def));
+    }
 
-    assertEquals(index.getAllEntries().size(), 2);
+    @Test
+    public void duplicateAddAndGetEntries() {
+        IStrategoAppl def = def("Entity", "CRM", "Person");
+        IStrategoAppl read = read("Function", "CRM", "Person", "GetName");
+
+        assertEquals(index.getEntries(def).size(), 0);
+        assertEquals(index.getEntries(read).size(), 0);
+
+        index.add(def, file);
+        index.add(def, file);
+        index.add(def, file);
+        index.add(read, file);
+        index.add(read, file);
+
+        Collection<IndexEntry> ret1 = index.getEntries(def);
+        Collection<IndexEntry> ret2 = index.getEntries(read);
+
+        assertEquals(ret1.size(), 3);
+        assertEquals(ret2.size(), 2);
+
+        assertTrue(matchAll(ret1, def));
+        assertTrue(matchAll(ret2, read));
+        assertFalse(matchAll(ret1, read));
+        assertFalse(matchAll(ret2, def));
+
+        // Add entries from ret2 again using the other add function.
+        // Need to make a copy of ret2, because ret2 is a view over the index and
+        // could cause a ConcurrentModificationException
+        for(IndexEntry entry : ret2.toArray(new IndexEntry[0]))
+            index.add(entry);
+
+        Collection<IndexEntry> ret3 = index.getEntries(read);
+        assertEquals(ret2.size(), 4);
+        assertTrue(matchAll(ret3, read));
+        assertFalse(matchAll(ret3, def));
+    }
+
+    @Test
+    public void addAllAndGetAllEntries() {
+        IStrategoAppl def = def("Class", "java", "lang", "String");
+        IStrategoAppl type = type(constructor("Type", str("String")), "Class", "java", "lang", "String");
+        IStrategoList all = factory.makeList(def, type);
+
+        assertEquals(index.getEntries(def).size(), 0);
+        assertEquals(index.getEntries(type).size(), 0);
+
+        index.addAll(all, file);
+
+        Collection<IndexEntry> ret = index.getAllEntries();
+
+        assertTrue(contains(ret, def));
+        assertTrue(contains(ret, type));
+        assertFalse(contains(ret, all));
+    }
+
+    @Test
+    public void getChildEntries() {
+        IStrategoAppl classDef = def("Class", "java", "lang", "String");
+        IStrategoAppl methodDef1 = def("Method", "java", "lang", "String", "charAt");
+        IStrategoAppl methodDef2 = def("Method", "java", "lang", "String", "getBytes");
+        IStrategoAppl fieldDef = def("Field", "java", "lang", "String", "length");
+
+        IStrategoAppl methodsTemplate = def("Method", "java", "lang", "String");
+        IStrategoAppl fieldsTemplate = def("Field", "java", "lang", "String");
+
+        assertEquals(index.getEntries(classDef).size(), 0);
+        assertEquals(index.getEntries(methodDef1).size(), 0);
+        assertEquals(index.getEntries(methodDef2).size(), 0);
+        assertEquals(index.getEntries(fieldDef).size(), 0);
+        assertEquals(index.getEntryChildTerms(methodsTemplate).size(), 0);
+        assertEquals(index.getEntryChildTerms(fieldsTemplate).size(), 0);
+
+        index.add(classDef, file);
+        index.add(methodDef1, file);
+        index.add(methodDef2, file);
+        index.add(fieldDef, file);
+
+        Collection<IndexEntry> ret1 = index.getEntryChildTerms(methodsTemplate);
+        Collection<IndexEntry> ret2 = index.getEntryChildTerms(fieldsTemplate);
+
+        assertEquals(ret1.size(), 2);
+        assertEquals(ret2.size(), 1);
+
+        assertTrue(contains(ret1, methodDef1));
+        assertTrue(contains(ret1, methodDef2));
+        assertFalse(contains(ret1, fieldDef));
+        assertFalse(contains(ret1, classDef));
+
+        assertFalse(contains(ret2, methodDef1));
+        assertFalse(contains(ret2, methodDef2));
+        assertTrue(contains(ret2, fieldDef));
+        assertFalse(contains(ret2, classDef));
+    }
 
-    index.clear();
+    @Test
+    public void getEntriesInFileAndRemoveFile() {
+        IStrategoTerm fileTerm1 = file("TestFile", "Partition", "1");
+        IndexPartitionDescriptor file1 = setupIndex(fileTerm1);
+        IndexPartitionDescriptor file2 = setupIndex(file("TestFile", "Partition", "2"));
+
+        IStrategoAppl def1 = def("Entity", "CRM", "Person");
+        IStrategoAppl read = read("Function", "CRM", "Person", "GetName");
+
+        IStrategoAppl def2 = def("Class", "java", "lang", "String");
+        IStrategoAppl type = type(constructor("Type", str("String")), "Class", "java", "lang", "String");
+
+        assertEquals(index.getEntries(def1).size(), 0);
+        assertEquals(index.getEntries(read).size(), 0);
+        assertEquals(index.getEntries(def2).size(), 0);
+        assertEquals(index.getEntries(type).size(), 0);
+        assertEquals(index.getEntriesInPartition(file1).size(), 0);
+        assertEquals(index.getEntriesInPartition(file2).size(), 0);
+
+        index.add(def1, file1);
+        index.add(read, file1);
+        index.add(def2, file2);
+        index.add(type, file2);
+
+        Collection<IndexEntry> ret1 = index.getEntriesInPartition(file1);
+        Collection<IndexEntry> ret2 = index.getEntriesInPartition(file2);
+
+        assertEquals(ret1.size(), 2);
+        assertEquals(ret2.size(), 2);
+
+        assertTrue(contains(ret1, def1));
+        assertTrue(contains(ret1, read));
+        assertFalse(contains(ret1, def2));
+        assertFalse(contains(ret1, type));
+
+        assertFalse(contains(ret2, def1));
+        assertFalse(contains(ret2, read));
+        assertTrue(contains(ret2, def2));
+        assertTrue(contains(ret2, type));
+
+        for(IndexEntry entry : ret1) {
+            assertSame(entry.getPartitionDescriptor(), file1);
+            assertNotSame(entry.getPartitionDescriptor(), file2);
+        }
+        for(IndexEntry entry : ret2) {
+            assertNotSame(entry.getPartitionDescriptor(), file1);
+            assertSame(entry.getPartitionDescriptor(), file2);
+        }
+
+        index.removePartition(fileTerm1);
+        assertEquals(index.getEntriesInPartition(file1).size(), 0);
+        assertEquals(index.getEntriesInPartition(file2).size(), 2);
 
-    assertEquals(index.getAllEntries().size(), 0);
-  }
+        index.removePartition(file2);
+        assertEquals(index.getEntriesInPartition(file2).size(), 0);
+    }
+
+    @Test
+    public void clear() {
+        IndexPartitionDescriptor file1 = setupIndex(file("TestFile", "Partition", "1"));
+        IndexPartitionDescriptor file2 = setupIndex(file("TestFile", "Partition", "2"));
+
+        IStrategoAppl readAll = readAll("Str", "Class", "java", "lang");
+
+        assertEquals(index.getAllEntries().size(), 0);
+
+        index.add(readAll, file1);
+        index.add(readAll, file2);
+
+        assertEquals(index.getAllEntries().size(), 2);
+
+        index.clear();
+
+        assertEquals(index.getAllEntries().size(), 0);
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/SemanticIndexTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/SemanticIndexTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -8,10 +8,10 @@
 import org.junit.BeforeClass;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.library.language.ISemanticIndex;
-import org.spoofax.interpreter.library.language.SemanticIndexEntry;
-import org.spoofax.interpreter.library.language.SemanticIndexFileDescriptor;
-import org.spoofax.interpreter.library.language.SemanticIndexManager;
+import org.spoofax.interpreter.library.language.IIndex;
+import org.spoofax.interpreter.library.language.IndexEntry;
+import org.spoofax.interpreter.library.language.IndexPartitionDescriptor;
+import org.spoofax.interpreter.library.language.IndexManager;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -19,141 +19,132 @@
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public class SemanticIndexTest {
-  protected static Interpreter interpreter;
-  protected static ITermFactory factory;
-  protected static IOAgent agent;
-
-  protected static IStrategoString language;
-  protected static IStrategoString projectPath;
-  protected static IStrategoTerm fileTerm;
-
-  protected static SemanticIndexManager indexManager;
-  protected static SemanticIndexFileDescriptor project;
-  protected static SemanticIndexFileDescriptor file;
-  protected static ISemanticIndex index;
-
-  @BeforeClass
-  public static void setUpOnce() {
-    interpreter = new Interpreter();
-    factory = interpreter.getFactory();
-    agent = interpreter.getIOAgent();
-
-    language = str("TestLanguage");
-    projectPath = str("TestPath");
-    fileTerm = file("TestFile");
-    
-    project = SemanticIndexFileDescriptor.fromTerm(agent, projectPath);
-    indexManager = new SemanticIndexManager();
-    indexManager.loadIndex(asJavaString(language), project.getURI(), factory, agent);
-    index = indexManager.getCurrent();
-    index.initialize(factory, agent);
-    file = setupIndex(fileTerm);
-  }
-  
-  @AfterClass
-  public static void tearDownOnce() {
-    index.clear();
-    index = null;
-    indexManager = null;
-    project = null;
-    language = null;
-    projectPath = null;
-    fileTerm = null;
-    interpreter.shutdown();
-    interpreter = null;
-    factory = null;
-    agent = null;
-  }
-  
-  public static SemanticIndexFileDescriptor setupIndex(IStrategoTerm fileTerm) {
-    SemanticIndexFileDescriptor file = getFile(fileTerm);
-    indexManager.setCurrentFile(file);
-    return file;
-  }
-
-  public static void setupIndex(SemanticIndexFileDescriptor file) {
-    indexManager.setCurrentFile(file);
-  }
-
-  public static SemanticIndexFileDescriptor getFile(IStrategoTerm fileTerm) {
-    return index.getFileDescriptor(fileTerm);
-  }
-  
-  public static IStrategoString str(String str) {
-    return factory.makeString(str);
-  }
-
-  public static IStrategoAppl constructor(String constructor, IStrategoTerm... terms) {
-    return factory.makeAppl(factory.makeConstructor(constructor, terms.length),
-        terms);
-  }
-  
-  public static IStrategoTuple tuple(IStrategoTerm... terms) {
-    return factory.makeTuple(terms);
-  }
-
-  public static IStrategoString file(String file) {
-    return str(file);
-  }
-
-  public static IStrategoTuple file(String file, String namespace, String... path) {
-    return factory.makeTuple(str(file), uri(namespace, path));
-  }
-
-  public static IStrategoList path(String... path) {
-    IStrategoString[] strategoPath = new IStrategoString[path.length];
-    for (int i = 0; i < path.length; ++i)
-      // Paths are reversed in Stratego for easy appending of new names.
-      strategoPath[i] = str(path[path.length - i - 1]);
-    return factory.makeList(strategoPath);
-  }
-
-  public static IStrategoList uri(String namespace, String... path) {
-    return factory.makeListCons(constructor(namespace), path(path));
-  }
-
-  public static IStrategoAppl def(String namespace, String... path) {
-    return factory.makeAppl(factory.makeConstructor("Def", 1),
-        uri(namespace, path));
-  }
-
-  public static IStrategoAppl use(String namespace, String... path) {
-    return factory.makeAppl(factory.makeConstructor("Use", 1),
-        uri(namespace, path));
-  }
-
-  public static IStrategoAppl read(String namespace, String... path) {
-    return factory.makeAppl(factory.makeConstructor("Read", 1),
-        uri(namespace, path));
-  }
-
-  public static IStrategoAppl readAll(String prefix, String namespace, String... path) {
-    return factory.makeAppl(factory.makeConstructor("ReadAll", 2),
-        uri(namespace, path), str(prefix));
-  }
-
-  public static IStrategoAppl type(IStrategoTerm type, String namespace,
-      String... path) {
-    return factory.makeAppl(factory.makeConstructor("Type", 2),
-        uri(namespace, path), type);
-  }
-
-  public static boolean contains(Collection<SemanticIndexEntry> entries,
-      IStrategoTerm term) {
-    boolean found = false;
-    for (SemanticIndexEntry entry : entries)
-      found = found || entry.toTerm(factory).match(term);
-    return found;
-  }
-
-  public static boolean matchAll(Collection<SemanticIndexEntry> entries,
-      IStrategoTerm term) {
-    if (entries.size() == 0)
-      return false;
-    boolean matchAll = true;
-    for (SemanticIndexEntry entry : entries)
-      matchAll = matchAll && entry.toTerm(factory).match(term);
-    return matchAll;
-  }
+public class IndexTest {
+    protected static Interpreter interpreter;
+    protected static ITermFactory factory;
+    protected static IOAgent agent;
+
+    protected static IStrategoString language;
+    protected static IStrategoString projectPath;
+    protected static IStrategoTerm fileTerm;
+
+    protected static IndexManager indexManager;
+    protected static IndexPartitionDescriptor project;
+    protected static IndexPartitionDescriptor file;
+    protected static IIndex index;
+
+    @BeforeClass
+    public static void setUpOnce() {
+        interpreter = new Interpreter();
+        factory = interpreter.getFactory();
+        agent = interpreter.getIOAgent();
+
+        language = str("TestLanguage");
+        projectPath = str("TestPath");
+        fileTerm = file("TestFile");
+
+        project = IndexPartitionDescriptor.fromTerm(agent, projectPath);
+        indexManager = new IndexManager();
+        indexManager.loadIndex(asJavaString(language), project.getURI(), factory, agent);
+        index = indexManager.getCurrent();
+        index.initialize(factory, agent);
+        file = setupIndex(fileTerm);
+    }
+
+    @AfterClass
+    public static void tearDownOnce() {
+        index.clear();
+        index = null;
+        indexManager = null;
+        project = null;
+        language = null;
+        projectPath = null;
+        fileTerm = null;
+        interpreter.shutdown();
+        interpreter = null;
+        factory = null;
+        agent = null;
+    }
+
+    public static IndexPartitionDescriptor setupIndex(IStrategoTerm fileTerm) {
+        IndexPartitionDescriptor file = getFile(fileTerm);
+        indexManager.setCurrentPartition(file);
+        return file;
+    }
+
+    public static void setupIndex(IndexPartitionDescriptor file) {
+        indexManager.setCurrentPartition(file);
+    }
+
+    public static IndexPartitionDescriptor getFile(IStrategoTerm fileTerm) {
+        return index.getPartitionDescriptor(fileTerm);
+    }
+
+    public static IStrategoString str(String str) {
+        return factory.makeString(str);
+    }
+
+    public static IStrategoAppl constructor(String constructor, IStrategoTerm... terms) {
+        return factory.makeAppl(factory.makeConstructor(constructor, terms.length), terms);
+    }
+
+    public static IStrategoTuple tuple(IStrategoTerm... terms) {
+        return factory.makeTuple(terms);
+    }
+
+    public static IStrategoString file(String file) {
+        return str(file);
+    }
+
+    public static IStrategoTuple file(String file, String namespace, String... path) {
+        return factory.makeTuple(str(file), uri(namespace, path));
+    }
+
+    public static IStrategoList path(String... path) {
+        IStrategoString[] strategoPath = new IStrategoString[path.length];
+        for(int i = 0; i < path.length; ++i)
+            // Paths are reversed in Stratego for easy appending of new names.
+            strategoPath[i] = str(path[path.length - i - 1]);
+        return factory.makeList(strategoPath);
+    }
+
+    public static IStrategoList uri(String namespace, String... path) {
+        return factory.makeListCons(constructor(namespace), path(path));
+    }
+
+    public static IStrategoAppl def(String namespace, String... path) {
+        return factory.makeAppl(factory.makeConstructor("Def", 1), uri(namespace, path));
+    }
+
+    public static IStrategoAppl use(String namespace, String... path) {
+        return factory.makeAppl(factory.makeConstructor("Use", 1), uri(namespace, path));
+    }
+
+    public static IStrategoAppl read(String namespace, String... path) {
+        return factory.makeAppl(factory.makeConstructor("Read", 1), uri(namespace, path));
+    }
+
+    public static IStrategoAppl readAll(String prefix, String namespace, String... path) {
+        return factory.makeAppl(factory.makeConstructor("ReadAll", 2), uri(namespace, path), str(prefix));
+    }
+
+    public static IStrategoAppl type(IStrategoTerm type, String namespace, String... path) {
+        return factory.makeAppl(factory.makeConstructor("Type", 2), uri(namespace, path), type);
+    }
+
+    public static boolean contains(Collection<IndexEntry> entries, IStrategoTerm term) {
+        boolean found = false;
+        for(IndexEntry entry : entries)
+            found = found || entry.toTerm(factory).match(term);
+        return found;
+    }
+
+    public static boolean matchAll(Collection<IndexEntry> entries, IStrategoTerm term) {
+        if(entries.size() == 0)
+            return false;
+        boolean matchAll = true;
+        for(IndexEntry entry : entries)
+            matchAll = matchAll && entry.toTerm(factory).match(term);
+        return matchAll;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/CSVResultsConsumer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/CSVResultsConsumer.java	Mon Dec  3 09:14:31 2012	(r25737)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/CSVResultsConsumer.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -8,25 +8,23 @@
 import com.carrotsearch.junitbenchmarks.Result;
 
 public class CSVResultsConsumer implements IResultsConsumer {
-  private String prefixCSV;
-  private Writer writer;
-  
-  public CSVResultsConsumer(String prefixCSV, Writer writer) {
-    this.prefixCSV = prefixCSV;
-    this.writer = writer;
-  }
+    private String prefixCSV;
+    private Writer writer;
 
-  public void accept(Result result) throws IOException {
-    String line = String.format(Locale.ROOT,
-        "%s,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d%n", prefixCSV,
-        result.roundAverage.avg, result.roundAverage.stddev,
-        result.gcAverage.avg, result.gcAverage.stddev,
-        result.gcInfo.accumulatedInvocations(),
-        result.gcInfo.accumulatedTime(), result.benchmarkRounds,
-        result.benchmarkTime, result.warmupRounds, result.warmupTime);
-    System.out.print(line);
-    writer.write(line);
-    writer.flush();
-    writer.close();
-  }
+    public CSVResultsConsumer(String prefixCSV, Writer writer) {
+        this.prefixCSV = prefixCSV;
+        this.writer = writer;
+    }
+
+    public void accept(Result result) throws IOException {
+        String line =
+            String.format(Locale.ROOT, "%s,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d%n", prefixCSV, result.roundAverage.avg,
+                result.roundAverage.stddev, result.gcAverage.avg, result.gcAverage.stddev,
+                result.gcInfo.accumulatedInvocations(), result.gcInfo.accumulatedTime(), result.benchmarkRounds,
+                result.benchmarkTime, result.warmupRounds, result.warmupTime);
+        System.out.print(line);
+        writer.write(line);
+        writer.flush();
+        writer.close();
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexAddPerformanceTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexAddPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexAddPerformanceTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexAddPerformanceTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -2,15 +2,12 @@
 
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
 
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;
@@ -18,83 +15,36 @@
 
 @BenchmarkOptions(benchmarkRounds = 5, warmupRounds = 3, callgc = true, clock = Clock.CPU_TIME)
 @RunWith(value = Parameterized.class)
-public class SemanticIndexAddPerformanceTest extends
-    SemanticIndexPerformanceTest {
-  @Rule
-  public MethodRule benchmarkRun;
-  
-  private int numItems;
-  private int numFiles;
-  
-  @Parameters
-  public static List<Object[]> data() {
-    Object[][] data = new Object[][] { 
-        { 100   , 1    }
-      , { 1000  , 1    }
-      , { 10000 , 1    }
-      , { 20000 , 1    }
-      , { 50000 , 1    }
-      , { 100000, 1    }
-      , { 150000, 1    }
-      , { 200000, 1    }
-      , { 100   , 10   }
-      , { 1000  , 10   }
-      , { 10000 , 10   }
-      , { 20000 , 10   }
-      , { 50000 , 10   }
-      , { 100000, 10   }
-      , { 150000, 10   }
-      , { 200000, 10   }
-      , { 100   , 100  }
-      , { 1000  , 100  }
-      , { 10000 , 100  }
-      , { 20000 , 100  }
-      , { 50000 , 100  }
-      , { 100000, 100  }
-      , { 150000, 100  }
-      , { 200000, 100  }
-      , { 100   , 500  }
-      , { 1000  , 500  }
-      , { 10000 , 500  }
-      , { 20000 , 500  }
-      , { 50000 , 500  }
-      , { 100000, 500  }
-      , { 150000, 500  }
-      , { 200000, 500  }
-      , { 100   , 1000 }
-      , { 1000  , 1000 }
-      , { 10000 , 1000 }
-      , { 20000 , 1000 }
-      , { 50000 , 1000 }
-      , { 100000, 1000 }
-      , { 150000, 1000 }
-      , { 200000, 1000 }
-      };
-    return Arrays.asList(data);
-  }
-  
-  public SemanticIndexAddPerformanceTest(int numItems, int numFiles) {
-    this.numItems = numItems;
-    this.numFiles = numFiles;
-    
-    try {
-      benchmarkRun = new BenchmarkRule(new CSVResultsConsumer(
-          (this.numItems * 5) + "," + this.numFiles, new FileWriter("add_" + this.numFiles + ".csv", true)));
-    } catch (IOException e) {
-      e.printStackTrace();
+public class IndexAddPerformanceTest extends IndexPerformanceTest {
+    @Rule
+    public MethodRule benchmarkRun;
+
+    private int numItems;
+    private int numFiles;
+
+    public IndexAddPerformanceTest(int numItems, int numFiles) {
+        this.numItems = numItems;
+        this.numFiles = numFiles;
+
+        try {
+            benchmarkRun =
+                new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
+                    "add_" + this.numFiles + ".csv", true)));
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
+
+        index.clear();
     }
-    
-    index.clear();
-  }
-
-  @Test
-  public void add() {
-    for (int i = 0; i < numItems; ++i) {
-      index.add(def1, getFile(numFiles));
-      index.add(def2, getFile(numFiles));
-      index.add(def3, getFile(numFiles));
-      index.add(use1, getFile(numFiles));
-      index.add(type1, getFile(numFiles));
+
+    @Test
+    public void add() {
+        for(int i = 0; i < numItems; ++i) {
+            index.add(def1, getFile(numFiles));
+            index.add(def2, getFile(numFiles));
+            index.add(def3, getFile(numFiles));
+            index.add(use1, getFile(numFiles));
+            index.add(type1, getFile(numFiles));
+        }
     }
-  }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexClearPerformanceTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexClearPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexClearPerformanceTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexClearPerformanceTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -2,15 +2,12 @@
 
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
 
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;
@@ -18,89 +15,42 @@
 
 @BenchmarkOptions(benchmarkRounds = 5, warmupRounds = 3, callgc = true, clock = Clock.CPU_TIME)
 @RunWith(value = Parameterized.class)
-public class SemanticIndexClearPerformanceTest extends
-    SemanticIndexPerformanceTest {
-  @Rule
-  public MethodRule benchmarkRun;
-
-  private int numItems;
-  private int numFiles;
-  private int fileIndexToClear;
-  
-  @Parameters
-  public static List<Object[]> data() {
-    Object[][] data = new Object[][] { 
-        { 100   , 1    }
-      , { 1000  , 1    }
-      , { 10000 , 1    }
-      , { 20000 , 1    }
-      , { 50000 , 1    }
-      , { 100000, 1    }
-      , { 150000, 1    }
-      , { 200000, 1    }
-      , { 100   , 10   }
-      , { 1000  , 10   }
-      , { 10000 , 10   }
-      , { 20000 , 10   }
-      , { 50000 , 10   }
-      , { 100000, 10   }
-      , { 150000, 10   }
-      , { 200000, 10   }
-      , { 100   , 100  }
-      , { 1000  , 100  }
-      , { 10000 , 100  }
-      , { 20000 , 100  }
-      , { 50000 , 100  }
-      , { 100000, 100  }
-      , { 150000, 100  }
-      , { 200000, 100  }
-      , { 100   , 500  }
-      , { 1000  , 500  }
-      , { 10000 , 500  }
-      , { 20000 , 500  }
-      , { 50000 , 500  }
-      , { 100000, 500  }
-      , { 150000, 500  }
-      , { 200000, 500  }
-      , { 100   , 1000 }
-      , { 1000  , 1000 }
-      , { 10000 , 1000 }
-      , { 20000 , 1000 }
-      , { 50000 , 1000 }
-      , { 100000, 1000 }
-      , { 150000, 1000 }
-      , { 200000, 1000 }
-      };
-    return Arrays.asList(data);
-  }
-  
-  public SemanticIndexClearPerformanceTest(int numItemsPerFile, int numFiles) {
-    this.numItems = numItemsPerFile;
-    this.numFiles = numFiles;
-    this.fileIndexToClear = (int) Math.floor((double)this.numFiles / 2);
-    
-    try {
-      benchmarkRun = new BenchmarkRule(new CSVResultsConsumer(
-          (this.numItems * 5) + "," + this.numFiles, new FileWriter("clear_" + this.numFiles + ".csv", true)));
-    } catch (IOException e) {
-      e.printStackTrace();
+public class IndexClearPerformanceTest extends IndexPerformanceTest {
+    @Rule
+    public MethodRule benchmarkRun;
+
+    private int numItems;
+    private int numFiles;
+    private int fileIndexToClear;
+
+    public IndexClearPerformanceTest(int numItemsPerFile, int numFiles) {
+        this.numItems = numItemsPerFile;
+        this.numFiles = numFiles;
+        this.fileIndexToClear = (int) Math.floor((double) this.numFiles / 2);
+
+        try {
+            benchmarkRun =
+                new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
+                    "clear_" + this.numFiles + ".csv", true)));
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
     }
-  }
-  
-  @Test
-  public void clear() {
-    // Have to add items here, otherwise index will be empty after first round.
-    // This results in the time taken to add entries being added.
-    index.clear();
-    for(int i = 0; i < this.numItems; ++i) {
-      index.add(def1, getFile(this.numFiles));
-      index.add(def2, getFile(this.numFiles));
-      index.add(def3, getFile(this.numFiles));
-      index.add(use1, getFile(this.numFiles));
-      index.add(type1, getFile(this.numFiles));
+
+    @Test
+    public void clear() {
+        // Have to add items here, otherwise index will be empty after first round.
+        // This results in the time taken to add entries being added.
+        index.clear();
+        for(int i = 0; i < this.numItems; ++i) {
+            index.add(def1, getFile(this.numFiles));
+            index.add(def2, getFile(this.numFiles));
+            index.add(def3, getFile(this.numFiles));
+            index.add(use1, getFile(this.numFiles));
+            index.add(type1, getFile(this.numFiles));
+        }
+
+        // Clear one file in the middle.
+        index.removePartition(files[fileIndexToClear]);
     }
-    
-    // Clear one file in the middle.
-    index.removeFile(files[fileIndexToClear]);
-  }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetChildsPerformanceTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetChildsPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetChildsPerformanceTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetChildsPerformanceTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -2,17 +2,14 @@
 
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
 
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-import org.spoofax.interpreter.library.language.SemanticIndexEntry;
+import org.spoofax.interpreter.library.language.IndexEntry;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;
@@ -20,95 +17,48 @@
 
 @BenchmarkOptions(benchmarkRounds = 5, warmupRounds = 3, callgc = true, clock = Clock.CPU_TIME)
 @RunWith(value = Parameterized.class)
-public class SemanticIndexGetChildsPerformanceTest extends
-    SemanticIndexPerformanceTest {
-  @Rule
-  public MethodRule benchmarkRun;
-  
-  private static int NUM_GET = 200000;
-  
-  private int numItems;
-  private int numFiles;
-
-  @Parameters
-  public static List<Object[]> data() {
-    Object[][] data = new Object[][] { 
-      { 100   , 1    }
-    , { 1000  , 1    }
-    , { 10000 , 1    }
-    , { 20000 , 1    }
-    , { 50000 , 1    }
-    , { 100000, 1    }
-    , { 150000, 1    }
-    , { 200000, 1    }
-    , { 100   , 10   }
-    , { 1000  , 10   }
-    , { 10000 , 10   }
-    , { 20000 , 10   }
-    , { 50000 , 10   }
-    , { 100000, 10   }
-    , { 150000, 10   }
-    , { 200000, 10   }
-    , { 100   , 100  }
-    , { 1000  , 100  }
-    , { 10000 , 100  }
-    , { 20000 , 100  }
-    , { 50000 , 100  }
-    , { 100000, 100  }
-    , { 150000, 100  }
-    , { 200000, 100  }
-    , { 100   , 500  }
-    , { 1000  , 500  }
-    , { 10000 , 500  }
-    , { 20000 , 500  }
-    , { 50000 , 500  }
-    , { 100000, 500  }
-    , { 150000, 500  }
-    , { 200000, 500  }
-    , { 100   , 1000 }
-    , { 1000  , 1000 }
-    , { 10000 , 1000 }
-    , { 20000 , 1000 }
-    , { 50000 , 1000 }
-    , { 100000, 1000 }
-    , { 150000, 1000 }
-    , { 200000, 1000 }
-    };
-    return Arrays.asList(data);
-  }
-  
-  public SemanticIndexGetChildsPerformanceTest(int numItems, int numFiles) {
-    this.numItems = numItems;
-    this.numFiles = numFiles;
-    
-    try {
-      benchmarkRun = new BenchmarkRule(new CSVResultsConsumer(
-          (this.numItems * 5) + "," + this.numFiles, new FileWriter("get-childs_" + this.numFiles + ".csv", true)));
-    } catch (IOException e) {
-      e.printStackTrace();
+public class IndexGetChildsPerformanceTest extends IndexPerformanceTest {
+    @Rule
+    public MethodRule benchmarkRun;
+
+    private static int NUM_GET = 200000;
+
+    private int numItems;
+    private int numFiles;
+
+    public IndexGetChildsPerformanceTest(int numItems, int numFiles) {
+        this.numItems = numItems;
+        this.numFiles = numFiles;
+
+        try {
+            benchmarkRun =
+                new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
+                    "get-childs_" + this.numFiles + ".csv", true)));
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
+
+        index.clear();
+
+        for(int i = 0; i < this.numItems; ++i) {
+            index.add(def1, getFile(this.numFiles));
+            index.add(def2, getFile(this.numFiles));
+            index.add(def3, getFile(this.numFiles));
+            index.add(use1, getFile(this.numFiles));
+            index.add(type1, getFile(this.numFiles));
+        }
     }
-    
-    index.clear();
 
-    for(int i = 0; i < this.numItems; ++i) {
-      index.add(def1, getFile(this.numFiles));
-      index.add(def2, getFile(this.numFiles));
-      index.add(def3, getFile(this.numFiles));
-      index.add(use1, getFile(this.numFiles));
-      index.add(type1, getFile(this.numFiles));
+    @Test
+    public void getChilds() {
+        @SuppressWarnings("unused")
+        Collection<IndexEntry> ret;
+        for(int i = 0; i < NUM_GET; ++i) {
+            ret = index.getEntryChildTerms(def1Parent);
+            ret = index.getEntryChildTerms(def2Parent);
+            ret = index.getEntryChildTerms(def3Parent);
+            ret = index.getEntryChildTerms(use1Parent);
+            ret = index.getEntryChildTerms(typeTemplate1Parent);
+        }
     }
-  }
-
-  @Test
-  public void getChilds() {
-    @SuppressWarnings("unused")
-    Collection<SemanticIndexEntry> ret;
-    for(int i = 0; i < NUM_GET; ++i) {
-      ret = index.getEntryChildTerms(def1Parent);
-      ret = index.getEntryChildTerms(def2Parent);
-      ret = index.getEntryChildTerms(def3Parent);
-      ret = index.getEntryChildTerms(use1Parent);
-      ret = index.getEntryChildTerms(typeTemplate1Parent);
-    }
-  }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetKeyPartitionsPerformanceTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetKeyPartitionsPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetKeyPartitionsPerformanceTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetKeyPartitionsPerformanceTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -2,17 +2,14 @@
 
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.HashSet;
-import java.util.List;
 
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-import org.spoofax.interpreter.library.language.SemanticIndexFileDescriptor;
+import org.spoofax.interpreter.library.language.IndexPartitionDescriptor;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;
@@ -20,90 +17,43 @@
 
 @BenchmarkOptions(benchmarkRounds = 5, warmupRounds = 3, callgc = true, clock = Clock.CPU_TIME)
 @RunWith(value = Parameterized.class)
-public class SemanticIndexGetKeyPartitionsPerformanceTest extends
-    SemanticIndexPerformanceTest {
-  @Rule
-  public MethodRule benchmarkRun;
-  
-  private int numItems;
-  private int numFiles;
-
-  @Parameters
-  public static List<Object[]> data() {
-    Object[][] data = new Object[][] { 
-      { 100   , 1    }
-    , { 1000  , 1    }
-    , { 10000 , 1    }
-    , { 20000 , 1    }
-    , { 50000 , 1    }
-    , { 100000, 1    }
-    , { 150000, 1    }
-    , { 200000, 1    }
-    , { 100   , 10   }
-    , { 1000  , 10   }
-    , { 10000 , 10   }
-    , { 20000 , 10   }
-    , { 50000 , 10   }
-    , { 100000, 10   }
-    , { 150000, 10   }
-    , { 200000, 10   }
-    , { 100   , 100  }
-    , { 1000  , 100  }
-    , { 10000 , 100  }
-    , { 20000 , 100  }
-    , { 50000 , 100  }
-    , { 100000, 100  }
-    , { 150000, 100  }
-    , { 200000, 100  }
-    , { 100   , 500  }
-    , { 1000  , 500  }
-    , { 10000 , 500  }
-    , { 20000 , 500  }
-    , { 50000 , 500  }
-    , { 100000, 500  }
-    , { 150000, 500  }
-    , { 200000, 500  }
-    , { 100   , 1000 }
-    , { 1000  , 1000 }
-    , { 10000 , 1000 }
-    , { 20000 , 1000 }
-    , { 50000 , 1000 }
-    , { 100000, 1000 }
-    , { 150000, 1000 }
-    , { 200000, 1000 }
-    };
-    return Arrays.asList(data);
-  }
-  
-  public SemanticIndexGetKeyPartitionsPerformanceTest(int numItems, int numFiles) {
-    this.numItems = numItems;
-    this.numFiles = numFiles;
-    
-    try {
-      benchmarkRun = new BenchmarkRule(new CSVResultsConsumer(
-          (this.numItems * 5) + "," + this.numFiles, new FileWriter("get-key-partitions_" + this.numFiles + ".csv", true)));
-    } catch (IOException e) {
-      e.printStackTrace();
+public class IndexGetKeyPartitionsPerformanceTest extends IndexPerformanceTest {
+    @Rule
+    public MethodRule benchmarkRun;
+
+    private int numItems;
+    private int numFiles;
+
+    public IndexGetKeyPartitionsPerformanceTest(int numItems, int numFiles) {
+        this.numItems = numItems;
+        this.numFiles = numFiles;
+
+        try {
+            benchmarkRun =
+                new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
+                    "get-key-partitions_" + this.numFiles + ".csv", true)));
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
+
+        index.clear();
+
+        for(int i = 0; i < this.numItems; ++i) {
+            index.add(def1, getFile(this.numFiles));
+            index.add(def2, getFile(this.numFiles));
+            index.add(def3, getFile(this.numFiles));
+            index.add(use1, getFile(this.numFiles));
+            index.add(type1, getFile(this.numFiles));
+        }
     }
-    
-    index.clear();
 
-    for(int i = 0; i < this.numItems; ++i) {
-      index.add(def1, getFile(this.numFiles));
-      index.add(def2, getFile(this.numFiles));
-      index.add(def3, getFile(this.numFiles));
-      index.add(use1, getFile(this.numFiles));
-      index.add(type1, getFile(this.numFiles));
+    @Test
+    public void getKeyPartitions() {
+        HashSet<IndexPartitionDescriptor> files = new HashSet<IndexPartitionDescriptor>();
+        files.addAll(index.getPartitionsOf(def1));
+        files.addAll(index.getPartitionsOf(def2));
+        files.addAll(index.getPartitionsOf(def3));
+        files.addAll(index.getPartitionsOf(use1));
+        files.addAll(index.getPartitionsOf(typeTemplate1));
     }
-  }
-
-  @Test
-  public void getKeyPartitions() {
-    HashSet<SemanticIndexFileDescriptor> files = new HashSet<SemanticIndexFileDescriptor>();
-    files.addAll(index.getFilesOf(def1));
-    files.addAll(index.getFilesOf(def2));
-    files.addAll(index.getFilesOf(def3));
-    files.addAll(index.getFilesOf(use1));
-    files.addAll(index.getFilesOf(typeTemplate1));
-  }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionElementsPerformanceTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPartitionElementsPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPartitionElementsPerformanceTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionElementsPerformanceTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -2,17 +2,14 @@
 
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
 
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-import org.spoofax.interpreter.library.language.SemanticIndexEntry;
+import org.spoofax.interpreter.library.language.IndexEntry;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;
@@ -20,89 +17,42 @@
 
 @BenchmarkOptions(benchmarkRounds = 5, warmupRounds = 3, callgc = true, clock = Clock.CPU_TIME)
 @RunWith(value = Parameterized.class)
-public class SemanticIndexGetPartitionElementsPerformanceTest extends
-    SemanticIndexPerformanceTest {
-  @Rule
-  public MethodRule benchmarkRun;
-  
-  private int numItems;
-  private int numFiles;
-
-  @Parameters
-  public static List<Object[]> data() {
-    Object[][] data = new Object[][] { 
-      { 100   , 1    }
-    , { 1000  , 1    }
-    , { 10000 , 1    }
-    , { 20000 , 1    }
-    , { 50000 , 1    }
-    , { 100000, 1    }
-    , { 150000, 1    }
-    , { 200000, 1    }
-    , { 100   , 10   }
-    , { 1000  , 10   }
-    , { 10000 , 10   }
-    , { 20000 , 10   }
-    , { 50000 , 10   }
-    , { 100000, 10   }
-    , { 150000, 10   }
-    , { 200000, 10   }
-    , { 100   , 100  }
-    , { 1000  , 100  }
-    , { 10000 , 100  }
-    , { 20000 , 100  }
-    , { 50000 , 100  }
-    , { 100000, 100  }
-    , { 150000, 100  }
-    , { 200000, 100  }
-    , { 100   , 500  }
-    , { 1000  , 500  }
-    , { 10000 , 500  }
-    , { 20000 , 500  }
-    , { 50000 , 500  }
-    , { 100000, 500  }
-    , { 150000, 500  }
-    , { 200000, 500  }
-    , { 100   , 1000 }
-    , { 1000  , 1000 }
-    , { 10000 , 1000 }
-    , { 20000 , 1000 }
-    , { 50000 , 1000 }
-    , { 100000, 1000 }
-    , { 150000, 1000 }
-    , { 200000, 1000 }
-    };
-    return Arrays.asList(data);
-  }
-  
-  public SemanticIndexGetPartitionElementsPerformanceTest(int numItems, int numFiles) {
-    this.numItems = numItems;
-    this.numFiles = numFiles;
-    
-    try {
-      benchmarkRun = new BenchmarkRule(new CSVResultsConsumer(
-          (this.numItems * 5) + "," + this.numFiles, new FileWriter("get-partition-elems_" + this.numFiles + ".csv", true)));
-    } catch (IOException e) {
-      e.printStackTrace();
+public class IndexGetPartitionElementsPerformanceTest extends IndexPerformanceTest {
+    @Rule
+    public MethodRule benchmarkRun;
+
+    private int numItems;
+    private int numFiles;
+
+    public IndexGetPartitionElementsPerformanceTest(int numItems, int numFiles) {
+        this.numItems = numItems;
+        this.numFiles = numFiles;
+
+        try {
+            benchmarkRun =
+                new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
+                    "get-partition-elems_" + this.numFiles + ".csv", true)));
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
+
+        index.clear();
+
+        for(int i = 0; i < this.numItems; ++i) {
+            index.add(def1, getFile(this.numFiles));
+            index.add(def2, getFile(this.numFiles));
+            index.add(def3, getFile(this.numFiles));
+            index.add(use1, getFile(this.numFiles));
+            index.add(type1, getFile(this.numFiles));
+        }
     }
-    
-    index.clear();
 
-    for(int i = 0; i < this.numItems; ++i) {
-      index.add(def1, getFile(this.numFiles));
-      index.add(def2, getFile(this.numFiles));
-      index.add(def3, getFile(this.numFiles));
-      index.add(use1, getFile(this.numFiles));
-      index.add(type1, getFile(this.numFiles));
+    @Test
+    public void getPartitionElements() {
+        @SuppressWarnings("unused")
+        Collection<IndexEntry> ret;
+        for(int i = 0; i < this.numFiles; ++i) {
+            ret = index.getEntriesInPartition(files[i]);
+        }
     }
-  }
-
-  @Test
-  public void getPartitionElements() {
-    @SuppressWarnings("unused")
-    Collection<SemanticIndexEntry> ret;
-    for(int i = 0; i < this.numFiles; ++i) {
-      ret = index.getEntriesInFile(files[i]);
-    }
-  }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionsPerformanceTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPartitionsPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPartitionsPerformanceTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionsPerformanceTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -2,17 +2,14 @@
 
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
 
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-import org.spoofax.interpreter.library.language.SemanticIndexFile;
+import org.spoofax.interpreter.library.language.IndexPartition;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;
@@ -20,91 +17,44 @@
 
 @BenchmarkOptions(benchmarkRounds = 5, warmupRounds = 3, callgc = true, clock = Clock.CPU_TIME)
 @RunWith(value = Parameterized.class)
-public class SemanticIndexGetPartitionsPerformanceTest extends
-    SemanticIndexPerformanceTest {
-  @Rule
-  public MethodRule benchmarkRun;
-  
-  private static int NUM_GET = 200000;
-  
-  private int numItems;
-  private int numFiles;
-
-  @Parameters
-  public static List<Object[]> data() {
-    Object[][] data = new Object[][] { 
-      { 100   , 1    }
-    , { 1000  , 1    }
-    , { 10000 , 1    }
-    , { 20000 , 1    }
-    , { 50000 , 1    }
-    , { 100000, 1    }
-    , { 150000, 1    }
-    , { 200000, 1    }
-    , { 100   , 10   }
-    , { 1000  , 10   }
-    , { 10000 , 10   }
-    , { 20000 , 10   }
-    , { 50000 , 10   }
-    , { 100000, 10   }
-    , { 150000, 10   }
-    , { 200000, 10   }
-    , { 100   , 100  }
-    , { 1000  , 100  }
-    , { 10000 , 100  }
-    , { 20000 , 100  }
-    , { 50000 , 100  }
-    , { 100000, 100  }
-    , { 150000, 100  }
-    , { 200000, 100  }
-    , { 100   , 500  }
-    , { 1000  , 500  }
-    , { 10000 , 500  }
-    , { 20000 , 500  }
-    , { 50000 , 500  }
-    , { 100000, 500  }
-    , { 150000, 500  }
-    , { 200000, 500  }
-    , { 100   , 1000 }
-    , { 1000  , 1000 }
-    , { 10000 , 1000 }
-    , { 20000 , 1000 }
-    , { 50000 , 1000 }
-    , { 100000, 1000 }
-    , { 150000, 1000 }
-    , { 200000, 1000 }
-    };
-    return Arrays.asList(data);
-  }
-  
-  public SemanticIndexGetPartitionsPerformanceTest(int numItems, int numFiles) {
-    this.numItems = numItems;
-    this.numFiles = numFiles;
-    
-    try {
-      benchmarkRun = new BenchmarkRule(new CSVResultsConsumer(
-          (this.numItems * 5) + "," + this.numFiles, new FileWriter("get-partitions_" + this.numFiles + ".csv", true)));
-    } catch (IOException e) {
-      e.printStackTrace();
+public class IndexGetPartitionsPerformanceTest extends IndexPerformanceTest {
+    @Rule
+    public MethodRule benchmarkRun;
+
+    private static int NUM_GET = 200000;
+
+    private int numItems;
+    private int numFiles;
+
+    public IndexGetPartitionsPerformanceTest(int numItems, int numFiles) {
+        this.numItems = numItems;
+        this.numFiles = numFiles;
+
+        try {
+            benchmarkRun =
+                new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
+                    "get-partitions_" + this.numFiles + ".csv", true)));
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
+
+        index.clear();
+
+        for(int i = 0; i < this.numItems; ++i) {
+            index.add(def1, getFile(this.numFiles));
+            index.add(def2, getFile(this.numFiles));
+            index.add(def3, getFile(this.numFiles));
+            index.add(use1, getFile(this.numFiles));
+            index.add(type1, getFile(this.numFiles));
+        }
     }
-    
-    index.clear();
 
-    for(int i = 0; i < this.numItems; ++i) {
-      index.add(def1, getFile(this.numFiles));
-      index.add(def2, getFile(this.numFiles));
-      index.add(def3, getFile(this.numFiles));
-      index.add(use1, getFile(this.numFiles));
-      index.add(type1, getFile(this.numFiles));
+    @Test
+    public void getPartitions() {
+        @SuppressWarnings("unused")
+        Collection<IndexPartition> ret;
+        for(int i = 0; i < NUM_GET; ++i) {
+            ret = index.getAllPartitions();
+        }
     }
-  }
-
-  @Test
-  public void getPartitions() {
-    @SuppressWarnings("unused")
-    Collection<SemanticIndexFile> ret;
-    for(int i = 0; i < NUM_GET; ++i) {
-      ret = index.getAllFiles();
-    }
-  }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPerformanceTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexGetPerformanceTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPerformanceTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -2,17 +2,14 @@
 
 import java.io.FileWriter;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
 
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-import org.spoofax.interpreter.library.language.SemanticIndexEntry;
+import org.spoofax.interpreter.library.language.IndexEntry;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;
@@ -20,95 +17,48 @@
 
 @BenchmarkOptions(benchmarkRounds = 5, warmupRounds = 3, callgc = true, clock = Clock.CPU_TIME)
 @RunWith(value = Parameterized.class)
-public class SemanticIndexGetPerformanceTest extends
-    SemanticIndexPerformanceTest {
-  @Rule
-  public MethodRule benchmarkRun;
-  
-  private static int NUM_GET = 200000;
-  
-  private int numItems;
-  private int numFiles;
-
-  @Parameters
-  public static List<Object[]> data() {
-    Object[][] data = new Object[][] { 
-      { 100   , 1    }
-    , { 1000  , 1    }
-    , { 10000 , 1    }
-    , { 20000 , 1    }
-    , { 50000 , 1    }
-    , { 100000, 1    }
-    , { 150000, 1    }
-    , { 200000, 1    }
-    , { 100   , 10   }
-    , { 1000  , 10   }
-    , { 10000 , 10   }
-    , { 20000 , 10   }
-    , { 50000 , 10   }
-    , { 100000, 10   }
-    , { 150000, 10   }
-    , { 200000, 10   }
-    , { 100   , 100  }
-    , { 1000  , 100  }
-    , { 10000 , 100  }
-    , { 20000 , 100  }
-    , { 50000 , 100  }
-    , { 100000, 100  }
-    , { 150000, 100  }
-    , { 200000, 100  }
-    , { 100   , 500  }
-    , { 1000  , 500  }
-    , { 10000 , 500  }
-    , { 20000 , 500  }
-    , { 50000 , 500  }
-    , { 100000, 500  }
-    , { 150000, 500  }
-    , { 200000, 500  }
-    , { 100   , 1000 }
-    , { 1000  , 1000 }
-    , { 10000 , 1000 }
-    , { 20000 , 1000 }
-    , { 50000 , 1000 }
-    , { 100000, 1000 }
-    , { 150000, 1000 }
-    , { 200000, 1000 }
-    };
-    return Arrays.asList(data);
-  }
-  
-  public SemanticIndexGetPerformanceTest(int numItems, int numFiles) {
-    this.numItems = numItems;
-    this.numFiles = numFiles;
-    
-    try {
-      benchmarkRun = new BenchmarkRule(new CSVResultsConsumer(
-          (this.numItems * 5) + "," + this.numFiles, new FileWriter("get_" + this.numFiles + ".csv", true)));
-    } catch (IOException e) {
-      e.printStackTrace();
+public class IndexGetPerformanceTest extends IndexPerformanceTest {
+    @Rule
+    public MethodRule benchmarkRun;
+
+    private static int NUM_GET = 200000;
+
+    private int numItems;
+    private int numFiles;
+
+    public IndexGetPerformanceTest(int numItems, int numFiles) {
+        this.numItems = numItems;
+        this.numFiles = numFiles;
+
+        try {
+            benchmarkRun =
+                new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
+                    "get_" + this.numFiles + ".csv", true)));
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
+
+        index.clear();
+
+        for(int i = 0; i < this.numItems; ++i) {
+            index.add(def1, getFile(this.numFiles));
+            index.add(def2, getFile(this.numFiles));
+            index.add(def3, getFile(this.numFiles));
+            index.add(use1, getFile(this.numFiles));
+            index.add(type1, getFile(this.numFiles));
+        }
     }
-    
-    index.clear();
 
-    for(int i = 0; i < this.numItems; ++i) {
-      index.add(def1, getFile(this.numFiles));
-      index.add(def2, getFile(this.numFiles));
-      index.add(def3, getFile(this.numFiles));
-      index.add(use1, getFile(this.numFiles));
-      index.add(type1, getFile(this.numFiles));
+    @Test
+    public void get() {
+        @SuppressWarnings("unused")
+        Collection<IndexEntry> ret;
+        for(int i = 0; i < NUM_GET; ++i) {
+            ret = index.getEntries(def1);
+            ret = index.getEntries(def2);
+            ret = index.getEntries(def3);
+            ret = index.getEntries(use1);
+            ret = index.getEntries(typeTemplate1);
+        }
     }
-  }
-
-  @Test
-  public void get() {
-    @SuppressWarnings("unused")
-    Collection<SemanticIndexEntry> ret;
-    for(int i = 0; i < NUM_GET; ++i) {
-      ret = index.getEntries(def1);
-      ret = index.getEntries(def2);
-      ret = index.getEntries(def3);
-      ret = index.getEntries(use1);
-      ret = index.getEntries(typeTemplate1);
-    }
-  }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPerformanceTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexPerformanceTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPerformanceTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -1,63 +1,112 @@
 package org.spoofax.interpreter.library.language.tests.performance;
 
+import java.util.Arrays;
+import java.util.List;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.spoofax.interpreter.library.language.SemanticIndexFileDescriptor;
-import org.spoofax.interpreter.library.language.tests.SemanticIndexTest;
+import org.junit.runners.Parameterized.Parameters;
+import org.spoofax.interpreter.library.language.IndexPartitionDescriptor;
+import org.spoofax.interpreter.library.language.tests.IndexTest;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 
-public class SemanticIndexPerformanceTest extends SemanticIndexTest {
-  private static int MAX_NUM_FILES = 1000;
+public class IndexPerformanceTest extends IndexTest {
+    private static int MAX_NUM_FILES = 1000;
+
+    public static IStrategoAppl def1;
+    public static IStrategoAppl def2;
+    public static IStrategoAppl def3;
+    public static IStrategoAppl use1;
+    public static IStrategoAppl type1;
+    public static IStrategoAppl typeTemplate1;
+    public static IStrategoAppl def1Parent;
+    public static IStrategoAppl def2Parent;
+    public static IStrategoAppl def3Parent;
+    public static IStrategoAppl use1Parent;
+    public static IStrategoAppl typeTemplate1Parent;
+    public static IndexPartitionDescriptor[] files;
+    public static int fileIndex;
+    
+    @Parameters
+    public static List<Object[]> data() {
+        Object[][] data = new Object[][] { 
+              { 100   , 1    }
+            , { 1000  , 1    }
+            , { 10000 , 1    }
+            , { 20000 , 1    }
+            , { 50000 , 1    }
+            , { 100000, 1    }
+            , { 150000, 1    }
+            , { 200000, 1    }
+            , { 100   , 10   }
+            , { 1000  , 10   }
+            , { 10000 , 10   }
+            , { 20000 , 10   }
+            , { 50000 , 10   }
+            , { 100000, 10   }
+            , { 150000, 10   }
+            , { 200000, 10   }
+            , { 100   , 100  }
+            , { 1000  , 100  }
+            , { 10000 , 100  }
+            , { 20000 , 100  }
+            , { 50000 , 100  }
+            , { 100000, 100  }
+            , { 150000, 100  }
+            , { 200000, 100  }
+            , { 100   , 500  }
+            , { 1000  , 500  }
+            , { 10000 , 500  }
+            , { 20000 , 500  }
+            , { 50000 , 500  }
+            , { 100000, 500  }
+            , { 150000, 500  }
+            , { 200000, 500  }
+            , { 100   , 1000 }
+            , { 1000  , 1000 }
+            , { 10000 , 1000 }
+            , { 20000 , 1000 }
+            , { 50000 , 1000 }
+            , { 100000, 1000 }
+            , { 150000, 1000 }
+            , { 200000, 1000 }
+        };
+        return Arrays.asList(data);
+    }
+
+    @BeforeClass
+    public static void setUpOnce() {
+        IndexTest.setUpOnce();
+
+        def1 = def("Class", "java", "lang", "String");
+        def1Parent = def("Class", "java", "lang");
+        def2 = def("Method", "java", "lang", "System", "out", "println");
+        def2Parent = def("Method", "java", "lang", "System", "out");
+        def3 = def("Field", "java", "lang", "array", "Length");
+        def3Parent = def("Field", "java", "lang", "array");
+        use1 = use("Class", "java", "lang", "System");
+        use1Parent = use("Class", "java", "lang");
+        type1 = type(constructor("Type", str("String")), "Method", "java", "lang", "Object", "toString");
+        typeTemplate1 = type(tuple(), "Method", "java", "lang", "Object", "toString");
+        typeTemplate1Parent = type(tuple(), "Method", "java", "lang", "Object");
+
+        files = new IndexPartitionDescriptor[MAX_NUM_FILES];
+        for(int i = 0; i < MAX_NUM_FILES; ++i) {
+            files[i] = IndexPartitionDescriptor.fromTerm(agent, file("File" + i));
+        }
 
-  public static IStrategoAppl def1;
-  public static IStrategoAppl def2;
-  public static IStrategoAppl def3;
-  public static IStrategoAppl use1;
-  public static IStrategoAppl type1;
-  public static IStrategoAppl typeTemplate1;
-  public static IStrategoAppl def1Parent;
-  public static IStrategoAppl def2Parent;
-  public static IStrategoAppl def3Parent;
-  public static IStrategoAppl use1Parent;
-  public static IStrategoAppl typeTemplate1Parent;
-  public static SemanticIndexFileDescriptor[] files;
-  public static int fileIndex;
-
-  @BeforeClass
-  public static void setUpOnce() {
-    SemanticIndexTest.setUpOnce();
-
-    def1 = def("Class", "java", "lang", "String");
-    def1Parent = def("Class", "java", "lang");
-    def2 = def("Method", "java", "lang", "System", "out", "println");
-    def2Parent = def("Method", "java", "lang", "System", "out");
-    def3 = def("Field", "java", "lang", "array", "Length");
-    def3Parent = def("Field", "java", "lang", "array");
-    use1 = use("Class", "java", "lang", "System");
-    use1Parent = use("Class", "java", "lang");
-    type1 = type(constructor("Type", str("String")), "Method", "java", "lang",
-        "Object", "toString");
-    typeTemplate1 = type(tuple(), "Method", "java", "lang", "Object",
-        "toString");
-    typeTemplate1Parent = type(tuple(), "Method", "java", "lang", "Object");
-
-    files = new SemanticIndexFileDescriptor[MAX_NUM_FILES];
-    for (int i = 0; i < MAX_NUM_FILES; ++i) {
-      files[i] = SemanticIndexFileDescriptor.fromTerm(agent, file("File" + i));
+        fileIndex = -1;
     }
 
-    fileIndex = -1;
-  }
-  
-  @Before
-  public void setUp() {
-    fileIndex = -1;
-  }
-
-  public static SemanticIndexFileDescriptor getFile(int numFiles) {
-    SemanticIndexFileDescriptor file = files[++fileIndex];
-    if (fileIndex == numFiles - 1)
-      fileIndex = -1;
-    return file;
-  }
+    @Before
+    public void setUp() {
+        fileIndex = -1;
+    }
+
+    public static IndexPartitionDescriptor getFile(int numFiles) {
+        IndexPartitionDescriptor file = files[++fileIndex];
+        if(fileIndex == numFiles - 1)
+            fileIndex = -1;
+        return file;
+    }
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPersistPerformanceTest.java (from r25737, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexPersistPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/SemanticIndexPersistPerformanceTest.java	Mon Dec  3 09:14:31 2012	(r25737, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPersistPerformanceTest.java	Mon Dec  3 12:04:46 2012	(r25738)
@@ -4,15 +4,12 @@
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.ObjectOutputStream;
-import java.util.Arrays;
-import java.util.List;
 
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;
@@ -20,88 +17,41 @@
 
 @BenchmarkOptions(benchmarkRounds = 5, warmupRounds = 3, callgc = true, clock = Clock.CPU_TIME)
 @RunWith(value = Parameterized.class)
-public class SemanticIndexPersistPerformanceTest extends
-    SemanticIndexPerformanceTest {
-  @Rule
-  public MethodRule benchmarkRun;
-  
-  private int numItems;
-  private int numFiles;
-
-  @Parameters
-  public static List<Object[]> data() {
-    Object[][] data = new Object[][] { 
-      { 100   , 1    }
-    , { 1000  , 1    }
-    , { 10000 , 1    }
-    , { 20000 , 1    }
-    , { 50000 , 1    }
-    , { 100000, 1    }
-    , { 150000, 1    }
-    , { 200000, 1    }
-    , { 100   , 10   }
-    , { 1000  , 10   }
-    , { 10000 , 10   }
-    , { 20000 , 10   }
-    , { 50000 , 10   }
-    , { 100000, 10   }
-    , { 150000, 10   }
-    , { 200000, 10   }
-    , { 100   , 100  }
-    , { 1000  , 100  }
-    , { 10000 , 100  }
-    , { 20000 , 100  }
-    , { 50000 , 100  }
-    , { 100000, 100  }
-    , { 150000, 100  }
-    , { 200000, 100  }
-    , { 100   , 500  }
-    , { 1000  , 500  }
-    , { 10000 , 500  }
-    , { 20000 , 500  }
-    , { 50000 , 500  }
-    , { 100000, 500  }
-    , { 150000, 500  }
-    , { 200000, 500  }
-    , { 100   , 1000 }
-    , { 1000  , 1000 }
-    , { 10000 , 1000 }
-    , { 20000 , 1000 }
-    , { 50000 , 1000 }
-    , { 100000, 1000 }
-    , { 150000, 1000 }
-    , { 200000, 1000 }
-    };
-    return Arrays.asList(data);
-  }
-  
-  public SemanticIndexPersistPerformanceTest(int numItems, int numFiles) {
-    this.numItems = numItems;
-    this.numFiles = numFiles;
-    
-    try {
-      benchmarkRun = new BenchmarkRule(new CSVResultsConsumer(
-          (this.numItems * 5) + "," + this.numFiles, new FileWriter("persist_" + this.numFiles + ".csv", true)));
-    } catch (IOException e) {
-      e.printStackTrace();
-    }
-    
-    index.clear();
-    
-    for(int i = 0; i < this.numItems; ++i) {
-      index.add(def1, getFile(this.numFiles));
-      index.add(def2, getFile(this.numFiles));
-      index.add(def3, getFile(this.numFiles));
-      index.add(use1, getFile(this.numFiles));
-      index.add(type1, getFile(this.numFiles));
+public class IndexPersistPerformanceTest extends IndexPerformanceTest {
+    @Rule
+    public MethodRule benchmarkRun;
+
+    private int numItems;
+    private int numFiles;
+
+    public IndexPersistPerformanceTest(int numItems, int numFiles) {
+        this.numItems = numItems;
+        this.numFiles = numFiles;
+
+        try {
+            benchmarkRun =
+                new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
+                    "persist_" + this.numFiles + ".csv", true)));
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
+
+        index.clear();
+
+        for(int i = 0; i < this.numItems; ++i) {
+            index.add(def1, getFile(this.numFiles));
+            index.add(def2, getFile(this.numFiles));
+            index.add(def3, getFile(this.numFiles));
+            index.add(use1, getFile(this.numFiles));
+            index.add(type1, getFile(this.numFiles));
+        }
     }
-  }
 
-  @Test
-  public void persist() throws IOException {
-    ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("persist.dat", false));
-    outputStream.writeObject(index.getAllEntries().toArray());
-    outputStream.flush();
-    outputStream.close();
-  }
+    @Test
+    public void persist() throws IOException {
+        ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("persist.dat", false));
+        outputStream.writeObject(index.getAllEntries().toArray());
+        outputStream.flush();
+        outputStream.close();
+    }
 }

From gabrielkonat at gmail.com  Mon Dec  3 13:49:30 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 12:49:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25739 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20121203124930.365F1CC1B9@mx4.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 12:49:29 2012
New Revision: 25739
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25739&sc=1

Log:
Missing rename.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Mon Dec  3 12:04:46 2012	(r25738)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Mon Dec  3 12:49:29 2012	(r25739)
@@ -12,8 +12,8 @@
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
 import org.spoofax.interpreter.library.language.INotificationService;
+import org.spoofax.interpreter.library.language.IndexManager;
 import org.spoofax.interpreter.library.language.NotificationCenter;
-import org.spoofax.interpreter.library.language.SemanticIndexManager;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.services.StrategoAnalysisQueueFactory;
@@ -107,7 +107,7 @@
 
 	public static boolean isIndexedFile(IPath path) {
 		Language language = LanguageRegistry.findLanguage(path, null);
-		return language != null && SemanticIndexManager.isKnownIndexingLanguage(language.getName());
+		return language != null && IndexManager.isKnownIndexingLanguage(language.getName());
 	}
 	
 }

From gabrielkonat at gmail.com  Mon Dec  3 13:57:38 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 12:57:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25740 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index:
	. .settings META-INF src src/main src/main/java
	src/main/java/org src/main/java/org/spoofax src/mai...
Message-ID: <20121203125738.7C8A1CC1BA@mx4.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 12:57:36 2012
New Revision: 25740
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25740&sc=1

Log:
Add a separate project for the index primitives.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.project
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.settings/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.settings/org.eclipse.jdt.core.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/META-INF/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/build.properties
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.classpath	Mon Dec  3 12:57:36 2012	(r25740)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="src" path="src/test/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="lib" path="lib/guava-11.0.2.jar" sourcepath="lib/guava-11.0.1-sources.jar">
+		<attributes>
+			<attribute name="javadoc_location" value="jar:platform:/resource/org.spoofax.interpreter.library.index/lib/guava-11.0.1-javadoc.jar!/"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="lib" path="lib/junit-benchmarks-0.4.0.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.project	Mon Dec  3 12:57:36 2012	(r25740)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.spoofax.interpreter.library.index</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/.settings/org.eclipse.jdt.core.prefs	Mon Dec  3 12:57:36 2012	(r25740)
@@ -0,0 +1,8 @@
+#Thu Apr 21 17:14:07 CEST 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/META-INF/MANIFEST.MF	Mon Dec  3 12:57:36 2012	(r25740)
@@ -0,0 +1,14 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: org.spoofax.interpreter.library.index
+Bundle-SymbolicName: org.spoofax.interpreter.library.index
+Bundle-Version: 1.0.0.qualifier
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Require-Bundle: org.junit,
+ org.junit4,
+ org.spoofax.interpreter.core,
+ org.spoofax.terms;bundle-version="1.0.0",
+ org.spoofax.jsglr;bundle-version="0.3.0"
+Bundle-ClassPath: lib/guava-11.0.2.jar,
+ lib/junit-benchmarks-0.4.0.jar,
+ .

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/build.properties	Mon Dec  3 12:57:36 2012	(r25740)
@@ -0,0 +1,7 @@
+source.. = src/main/java,\
+           src/test/java
+output.. = bin/
+bin.includes = META-INF/,\
+               lib/guava-11.0.2.jar,\
+               lib/junit-benchmarks-0.4.0.jar,\
+               .

From gabrielkonat at gmail.com  Mon Dec  3 14:17:52 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 13:17:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25741 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/...
Message-ID: <20121203131753.02E457F8010@mx1.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 13:17:51 2012
New Revision: 25741
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25741&sc=1

Log:
Moved index primitive source files to their own project.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/INotificationService.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/Index.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntryFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartition.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartitionDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexStatistics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexURI.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_add.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_add.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_all.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_all.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_file.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_commit.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_commit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_end_transaction.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_end_transaction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_files.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_in_file.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_in_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_children.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_children.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_current_file.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_current_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_file_revision.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_file_revision.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_newer_than.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_newer_than.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_reload.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_reload.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_remove.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_set_current_file.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_set_current_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_setup.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_setup.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_start_transaction.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/NotificationCenter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TemplateWithPartitionDescriptor.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithPartitionDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexSymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/CSVResultsConsumer.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/CSVResultsConsumer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexAddPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexClearPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetChildsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetKeyPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionElementsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java
      - copied, changed from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPersistPerformanceTest.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/INotificationService.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/Index.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntryFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartitionDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexStatistics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexURI.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_add.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_all.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_commit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_end_transaction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_in_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_children.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_current_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_file_revision.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_newer_than.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_reload.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_set_current_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_setup.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/NotificationCenter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithPartitionDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java	Mon Dec  3 12:57:36 2012	(r25740)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -23,8 +23,8 @@
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.imp.language.LanguageRegistry;
-import org.spoofax.interpreter.library.language.INotificationService.FileSubfile;
-import org.spoofax.interpreter.library.language.NotificationCenter;
+import org.spoofax.interpreter.library.index.NotificationCenter;
+import org.spoofax.interpreter.library.index.INotificationService.FileSubfile;
 import org.strategoxt.imp.runtime.Environment;
 
 /**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Mon Dec  3 12:57:36 2012	(r25740)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -11,9 +11,9 @@
 import org.eclipse.core.runtime.Path;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
-import org.spoofax.interpreter.library.language.INotificationService;
-import org.spoofax.interpreter.library.language.IndexManager;
-import org.spoofax.interpreter.library.language.NotificationCenter;
+import org.spoofax.interpreter.library.index.INotificationService;
+import org.spoofax.interpreter.library.index.IndexManager;
+import org.spoofax.interpreter.library.index.NotificationCenter;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.services.StrategoAnalysisQueueFactory;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IIndex.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IIndex.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.util.Collection;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/INotificationService.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/INotificationService.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.net.URI;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/Index.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/Index.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermList;
 import static org.spoofax.terms.Term.termAt;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntry.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntry.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.io.Serializable;
 import java.util.Collection;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntryFactory.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexEntryFactory.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermList;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexManager.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexManager.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.io.BufferedWriter;
 import java.io.File;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartition.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartition.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartition.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartition.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.util.Date;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartitionDescriptor.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexPartitionDescriptor.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 import static org.spoofax.interpreter.core.Tools.isTermTuple;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexStatistics.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexStatistics.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.util.ArrayList;
 import java.util.Collection;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexURI.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/IndexURI.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.io.Serializable;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_add.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_add.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_add.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_add.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 import static org.spoofax.interpreter.core.Tools.isTermString;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_all.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_all.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_all.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_all.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_file.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_file.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 import static org.spoofax.interpreter.core.Tools.isTermTuple;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_commit.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_commit.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_commit.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_commit.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.io.IOException;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_end_transaction.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_end_transaction.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_end_transaction.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_end_transaction.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_files.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_files.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.util.Collection;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_in_file.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_in_file.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_in_file.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_in_file.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 import static org.spoofax.interpreter.core.Tools.isTermTuple;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_children.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_children.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_children.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_children.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_current_file.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_current_file.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_current_file.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_current_file.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_file_revision.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_file_revision.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_file_revision.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_file_revision.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 import static org.spoofax.interpreter.core.Tools.isTermTuple;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_newer_than.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_newer_than.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_newer_than.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_newer_than.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.util.Date;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_reload.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_reload.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_reload.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_reload.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_remove.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_remove.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_remove.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_remove.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 import static org.spoofax.interpreter.core.Tools.isTermString;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_set_current_file.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_set_current_file.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_set_current_file.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_set_current_file.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.isTermString;
 import static org.spoofax.interpreter.core.Tools.isTermTuple;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_setup.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_setup.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_setup.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_setup.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_start_transaction.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_start_transaction.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/NotificationCenter.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/NotificationCenter.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,10 +1,10 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.net.URI;
 import java.util.HashMap;
 import java.util.Map;
 
-import org.spoofax.interpreter.library.language.INotificationService.FileSubfile;
+import org.spoofax.interpreter.library.index.INotificationService.FileSubfile;
 
 /**
  * A central, static go-to point for file system notifications.

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TemplateWithPartitionDescriptor.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithPartitionDescriptor.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TemplateWithPartitionDescriptor.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TemplateWithPartitionDescriptor.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionIndex.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionIndex.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language;
+package org.spoofax.interpreter.library.index;
 
 import java.util.ArrayList;
 import java.util.Collection;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexSymbolTableTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexSymbolTableTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests;
+package org.spoofax.interpreter.library.index.tests;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -10,9 +10,9 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.spoofax.interpreter.library.language.IndexEntry;
-import org.spoofax.interpreter.library.language.IndexPartition;
-import org.spoofax.interpreter.library.language.IndexPartitionDescriptor;
+import org.spoofax.interpreter.library.index.IndexEntry;
+import org.spoofax.interpreter.library.index.IndexPartition;
+import org.spoofax.interpreter.library.index.IndexPartitionDescriptor;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/IndexTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests;
+package org.spoofax.interpreter.library.index.tests;
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 
@@ -8,10 +8,10 @@
 import org.junit.BeforeClass;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.library.language.IIndex;
-import org.spoofax.interpreter.library.language.IndexEntry;
-import org.spoofax.interpreter.library.language.IndexPartitionDescriptor;
-import org.spoofax.interpreter.library.language.IndexManager;
+import org.spoofax.interpreter.library.index.IIndex;
+import org.spoofax.interpreter.library.index.IndexEntry;
+import org.spoofax.interpreter.library.index.IndexManager;
+import org.spoofax.interpreter.library.index.IndexPartitionDescriptor;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/CSVResultsConsumer.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/CSVResultsConsumer.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/CSVResultsConsumer.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/CSVResultsConsumer.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.io.IOException;
 import java.io.Writer;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexAddPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexAddPerformanceTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.io.FileWriter;
 import java.io.IOException;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexClearPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexClearPerformanceTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.io.FileWriter;
 import java.io.IOException;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetChildsPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetChildsPerformanceTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.io.FileWriter;
 import java.io.IOException;
@@ -9,7 +9,7 @@
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.spoofax.interpreter.library.language.IndexEntry;
+import org.spoofax.interpreter.library.index.IndexEntry;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetKeyPartitionsPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetKeyPartitionsPerformanceTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.io.FileWriter;
 import java.io.IOException;
@@ -9,7 +9,7 @@
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.spoofax.interpreter.library.language.IndexPartitionDescriptor;
+import org.spoofax.interpreter.library.index.IndexPartitionDescriptor;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionElementsPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionElementsPerformanceTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.io.FileWriter;
 import java.io.IOException;
@@ -9,7 +9,7 @@
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.spoofax.interpreter.library.language.IndexEntry;
+import org.spoofax.interpreter.library.index.IndexEntry;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionsPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPartitionsPerformanceTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.io.FileWriter;
 import java.io.IOException;
@@ -9,7 +9,7 @@
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.spoofax.interpreter.library.language.IndexPartition;
+import org.spoofax.interpreter.library.index.IndexPartition;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexGetPerformanceTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.io.FileWriter;
 import java.io.IOException;
@@ -9,7 +9,7 @@
 import org.junit.rules.MethodRule;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
-import org.spoofax.interpreter.library.language.IndexEntry;
+import org.spoofax.interpreter.library.index.IndexEntry;
 
 import com.carrotsearch.junitbenchmarks.BenchmarkOptions;
 import com.carrotsearch.junitbenchmarks.BenchmarkRule;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPerformanceTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.util.Arrays;
 import java.util.List;
@@ -6,7 +6,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.runners.Parameterized.Parameters;
-import org.spoofax.interpreter.library.language.IndexPartitionDescriptor;
+import org.spoofax.interpreter.library.index.IndexPartitionDescriptor;
 import org.spoofax.interpreter.library.language.tests.IndexTest;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java (from r25740, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPersistPerformanceTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/org/spoofax/interpreter/library/language/tests/performance/IndexPersistPerformanceTest.java	Mon Dec  3 12:57:36 2012	(r25740, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.library.language.tests.performance;
+package org.spoofax.interpreter.library.index.tests.performance;
 
 import java.io.FileOutputStream;
 import java.io.FileWriter;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java	Mon Dec  3 12:57:36 2012	(r25740)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java	Mon Dec  3 13:17:51 2012	(r25741)
@@ -1,7 +1,31 @@
 package org.spoofax.interpreter.library.language;
 
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
-import org.spoofax.interpreter.library.language.spxlang.*;
+import org.spoofax.interpreter.library.language.spxlang.SPX_exec_index_manage_command;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_compilation_unit;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_equal_resource_uri;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_compilation_unit;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_imported_to_references;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_imports;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_language_descriptor;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_module_declaration;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_module_declarations_of;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_module_definition;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_package_declaration;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_package_declarations_by_LanguageName;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_package_declarations_of;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_get_related_files_of_packages;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_import_references;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_language_descriptor;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_module_definition;
+import org.spoofax.interpreter.library.language.spxlang.SPX_index_package_declaration;
+import org.spoofax.interpreter.library.language.spxlang.SPX_symtab_define_symbol;
+import org.spoofax.interpreter.library.language.spxlang.SPX_symtab_destroy_scope;
+import org.spoofax.interpreter.library.language.spxlang.SPX_symtab_new_scope;
+import org.spoofax.interpreter.library.language.spxlang.SPX_symtab_resolve_symbols;
+import org.spoofax.interpreter.library.language.spxlang.SPX_symtab_undefine_symbols;
+import org.spoofax.interpreter.library.language.spxlang.SPX_symtab_verify_symbol_exists;
+import org.spoofax.interpreter.library.language.spxlang.SPX_symtab_verify_symbols_have_equal_origin;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 
 /**
@@ -11,26 +35,6 @@
     public static final String REGISTRY_NAME = "LANGUAGE";
 
     public LanguageLibrary() {
-        IndexManager index = new IndexManager();
-        add(new LANG_index_add(index));
-        add(new LANG_index_remove(index));
-        add(new LANG_index_clear_all(index));
-        add(new LANG_index_clear_file(index));
-        add(new LANG_index_get_all_files(index));
-        add(new LANG_index_get_all_in_file(index));
-        add(new LANG_index_get_children(index));
-        add(new LANG_index_get_files_of(index));
-        add(new LANG_index_get(index));
-        add(new LANG_index_setup(index));
-        add(new LANG_index_commit(index));
-        add(new LANG_index_get_files_newer_than(index));
-        add(new LANG_index_get_current_file(index));
-        add(new LANG_index_start_transaction(index));
-        add(new LANG_index_end_transaction(index));
-        add(new LANG_index_get_file_revision(index));
-        add(new LANG_index_set_current_file(index));
-        add(new LANG_index_reload(index));
-
         addSpxIndexPrimitives();
     }
 

From gabrielkonat at gmail.com  Mon Dec  3 14:32:55 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 13:32:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25742 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index
	spoofax/trunk/spoofax/org.spoofax.interpreter.lib...
Message-ID: <20121203133255.B3E4E2B8033@mx2.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 13:32:55 2012
New Revision: 25742
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25742&sc=1

Log:
Moved over libraries.
Fixed references.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/lib/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/lib/guava-11.0.1-javadoc.jar   (contents, props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/lib/guava-11.0.1-sources.jar   (contents, props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/lib/guava-11.0.2.jar   (contents, props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/lib/junit-benchmarks-0.4.0.jar   (contents, props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/stratego/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/stratego/lib/
      - copied from r25741, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/lib/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java
   strategoxt-java-backend/trunk/META-INF/MANIFEST.MF
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Mon Dec  3 13:17:51 2012	(r25741)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Mon Dec  3 13:32:55 2012	(r25742)
@@ -27,10 +27,10 @@
  org.strategoxt.strj,
  org.strategoxt.imp.debug.core,
  org.eclipse.core.expressions,
- org.spoofax.interpreter.library.language;bundle-version="1.0.0",
  org.strategoxt.imp.runtime.sidebyside.main;bundle-version="0.0.1",
  org.strategoxt.imp.runtime.sidebyside.legacy;bundle-version="0.0.1";resolution:=optional,
- org.strategoxt.imp.runtime.sidebyside.latest;bundle-version="0.0.1"
+ org.strategoxt.imp.runtime.sidebyside.latest;bundle-version="0.0.1",
+ org.spoofax.interpreter.library.index;bundle-version="1.0.0"
 Export-Package: org.strategoxt.imp.runtime,
  org.strategoxt.imp.runtime.dynamicloading,
  org.strategoxt.imp.runtime.parser,

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/META-INF/MANIFEST.MF	Mon Dec  3 13:17:51 2012	(r25741)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/META-INF/MANIFEST.MF	Mon Dec  3 13:32:55 2012	(r25742)
@@ -12,3 +12,4 @@
 Bundle-ClassPath: lib/guava-11.0.2.jar,
  lib/junit-benchmarks-0.4.0.jar,
  .
+Export-Package: org.spoofax.interpreter.library.index

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/lib/guava-11.0.1-javadoc.jar
==============================================================================
Binary file. No diff available.

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/lib/guava-11.0.1-sources.jar
==============================================================================
Binary file. No diff available.

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/lib/guava-11.0.2.jar
==============================================================================
Binary file. No diff available.

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/lib/junit-benchmarks-0.4.0.jar
==============================================================================
Binary file. No diff available.

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexLibrary.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexLibrary.java	Mon Dec  3 13:32:55 2012	(r25742)
@@ -0,0 +1,36 @@
+package org.spoofax.interpreter.library.index;
+
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+
+/**
+ * @author Gabri?l Konat
+ */
+public class IndexLibrary extends AbstractStrategoOperatorRegistry {
+    public static final String REGISTRY_NAME = "INDEX";
+
+    public IndexLibrary() {
+        IndexManager index = new IndexManager();
+        add(new LANG_index_add(index));
+        add(new LANG_index_remove(index));
+        add(new LANG_index_clear_all(index));
+        add(new LANG_index_clear_file(index));
+        add(new LANG_index_get_all_files(index));
+        add(new LANG_index_get_all_in_file(index));
+        add(new LANG_index_get_children(index));
+        add(new LANG_index_get_files_of(index));
+        add(new LANG_index_get(index));
+        add(new LANG_index_setup(index));
+        add(new LANG_index_commit(index));
+        add(new LANG_index_get_files_newer_than(index));
+        add(new LANG_index_get_current_file(index));
+        add(new LANG_index_start_transaction(index));
+        add(new LANG_index_end_transaction(index));
+        add(new LANG_index_get_file_revision(index));
+        add(new LANG_index_set_current_file(index));
+        add(new LANG_index_reload(index));
+    }
+
+    public String getOperatorRegistryName() {
+        return REGISTRY_NAME;
+    }
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java	Mon Dec  3 13:17:51 2012	(r25741)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java	Mon Dec  3 13:32:55 2012	(r25742)
@@ -7,7 +7,7 @@
 import org.junit.BeforeClass;
 import org.junit.runners.Parameterized.Parameters;
 import org.spoofax.interpreter.library.index.IndexPartitionDescriptor;
-import org.spoofax.interpreter.library.language.tests.IndexTest;
+import org.spoofax.interpreter.library.index.tests.IndexTest;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 
 public class IndexPerformanceTest extends IndexTest {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF	Mon Dec  3 13:17:51 2012	(r25741)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF	Mon Dec  3 13:32:55 2012	(r25742)
@@ -11,6 +11,4 @@
  org.spoofax.jsglr;bundle-version="0.3.0"
 Export-Package: org.spoofax.interpreter.library.language,
  org.spoofax.interpreter.library.language.spxlang
-Bundle-ClassPath: lib/guava-11.0.2.jar,
- lib/junit-benchmarks-0.4.0.jar,
- .
+Bundle-ClassPath: .

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties	Mon Dec  3 13:17:51 2012	(r25741)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties	Mon Dec  3 13:32:55 2012	(r25742)
@@ -2,6 +2,4 @@
            src/test/java
 output.. = bin/
 bin.includes = META-INF/,\
-               lib/guava-11.0.2.jar,\
-               lib/junit-benchmarks-0.4.0.jar,\
                .

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java	Mon Dec  3 13:17:51 2012	(r25741)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LanguageLibrary.java	Mon Dec  3 13:32:55 2012	(r25742)
@@ -35,13 +35,6 @@
     public static final String REGISTRY_NAME = "LANGUAGE";
 
     public LanguageLibrary() {
-        addSpxIndexPrimitives();
-    }
-
-    /**
-     * Primitives related to the Symbol-Table and Index of Spoofax-lang
-     */
-    private void addSpxIndexPrimitives() {
         SpxSemanticIndex spxIndex = new SpxSemanticIndex();
         add(new SPX_exec_index_manage_command(spxIndex));
 

Modified: strategoxt-java-backend/trunk/META-INF/MANIFEST.MF
==============================================================================
--- strategoxt-java-backend/trunk/META-INF/MANIFEST.MF	Mon Dec  3 13:17:51 2012	(r25741)
+++ strategoxt-java-backend/trunk/META-INF/MANIFEST.MF	Mon Dec  3 13:32:55 2012	(r25742)
@@ -52,7 +52,8 @@
  org.spoofax.interpreter.library.xml,
  org.spoofax.interpreter.library.interpreter,
  org.eclipse.ant.core;bundle-version="3.0.0",
- org.eclipse.core.runtime;bundle-version="3.0.0"
+ org.eclipse.core.runtime;bundle-version="3.0.0",
+ org.spoofax.interpreter.library.index;bundle-version="1.0.0"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ClassPath: .,
  java/runtime/,

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Mon Dec  3 13:17:51 2012	(r25741)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Mon Dec  3 13:32:55 2012	(r25742)
@@ -5,6 +5,7 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.VarScope;
+import org.spoofax.interpreter.library.index.IndexLibrary;
 import org.spoofax.interpreter.library.interpreter.InterpreterLibrary;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.spoofax.interpreter.library.jsglr.origin.OriginLibrary;
@@ -50,6 +51,7 @@
 
 		// More standard registries, kind of
         context.addOperatorRegistry(new LanguageLibrary());
+        context.addOperatorRegistry(new IndexLibrary());
         context.addOperatorRegistry(new OriginLibrary());
         context.addOperatorRegistry(new XMLLibrary());
         context.addOperatorRegistry(new InterpreterLibrary());

From gabrielkonat at gmail.com  Mon Dec  3 15:08:19 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 14:08:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25743 - hydra/jobs
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <20121203140819.32BE27F801F@mx1.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 14:08:18 2012
New Revision: 25743
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25743&sc=1

Log:
More missing references.

Modified:
   hydra/jobs/spoofax-imp.nix
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Mon Dec  3 13:32:55 2012	(r25742)
+++ hydra/jobs/spoofax-imp.nix	Mon Dec  3 14:08:18 2012	(r25743)
@@ -85,6 +85,7 @@
                  ${spoofax}/org.spoofax.interpreter \
                  ${spoofax}/org.spoofax.interpreter.ui \
                  ${spoofax}/org.spoofax.interpreter.library.jsglr \
+                 ${spoofax}/org.spoofax.interpreter.library.index \
                  ${spoofax}/org.spoofax.interpreter.library.language \
                  ${spoofax}/org.spoofax.interpreter.library.xml \
                  ${spoofax}/org.spoofax.interpreter.library.interpreter \

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Dec  3 13:32:55 2012	(r25742)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Dec  3 14:08:18 2012	(r25743)
@@ -360,6 +360,13 @@
          version="0.1.0.qualifier"/>
 
    <plugin
+         id="org.spoofax.interpreter.library.index"
+         download-size="0"
+         install-size="0"
+         version="1.0.0.qualifier"
+         unpack="false"/>
+
+   <plugin
          id="org.spoofax.interpreter.library.language"
          download-size="0"
          install-size="0"

From gabrielkonat at gmail.com  Mon Dec  3 15:09:21 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 14:09:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25744 -
	strategoxt-java-backend/trunk/java
Message-ID: <20121203140921.F2A3B2B8040@mx2.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 14:09:21 2012
New Revision: 25744
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25744&sc=1

Log:
More missing references.

Modified:
   strategoxt-java-backend/trunk/java/Makefile.am

Modified: strategoxt-java-backend/trunk/java/Makefile.am
==============================================================================
--- strategoxt-java-backend/trunk/java/Makefile.am	Mon Dec  3 14:08:18 2012	(r25743)
+++ strategoxt-java-backend/trunk/java/Makefile.am	Mon Dec  3 14:09:21 2012	(r25744)
@@ -152,6 +152,7 @@
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.terms/bin/ .
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.jsglr/bin/ .
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.jsglr/bin/ .
+	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.index/bin/ .
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.language/bin/ .
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.java/bin/ .
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.xml/bin/ .

From gabrielkonat at gmail.com  Mon Dec  3 15:10:31 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 14:10:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25745 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language
Message-ID: <20121203141031.939D0108C05B@mx3.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 14:10:31 2012
New Revision: 25745
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25745&sc=1

Log:
Remove unused libraries.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath	Mon Dec  3 14:09:21 2012	(r25744)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath	Mon Dec  3 14:10:31 2012	(r25745)
@@ -4,11 +4,5 @@
 	<classpathentry kind="src" path="src/test/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="lib" path="lib/guava-11.0.2.jar" sourcepath="lib/guava-11.0.1-sources.jar">
-		<attributes>
-			<attribute name="javadoc_location" value="jar:platform:/resource/org.spoofax.interpreter.library.language/lib/guava-11.0.1-javadoc.jar!/"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="lib" path="lib/junit-benchmarks-0.4.0.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

From m.dejonge at tudelft.nl  Mon Dec  3 16:01:20 2012
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 03 Dec 2012 15:01:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25746 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime: _attic
	test/org/strategoxt/imp/runtime/services
Message-ID: <20121203150120.6102BCC1F0@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Dec  3 15:01:19 2012
New Revision: 25746
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25746&sc=1

Log:


Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/_attic/TestContentProposerAstReuser.java
      - copied unchanged from r25745, spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestContentProposerAstReuser.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/_attic/TestFilterCompletions.java
      - copied, changed from r25745, spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestFilterCompletions.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestContentProposerAstReuser.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestFilterCompletions.java

Copied: spoofax-imp/trunk/org.strategoxt.imp.runtime/_attic/TestContentProposerAstReuser.java (from r25745, spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestContentProposerAstReuser.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/_attic/TestContentProposerAstReuser.java	Mon Dec  3 15:01:19 2012	(r25746, copy of r25745, spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestContentProposerAstReuser.java)
@@ -0,0 +1,65 @@
+package org.strategoxt.imp.runtime.services;
+
+import static org.junit.Assert.*;
+
+import java.util.regex.Pattern;
+
+import org.eclipse.jface.text.Position;
+import org.junit.Before;
+import org.junit.Test;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.TermFactory;
+
+public class TestContentProposerAstReuser {
+
+	private static final Pattern identifierLexical = Pattern.compile("[A-Za-z0-9]+");
+
+	private final IStrategoTerm term = TermFactory.EMPTY_LIST;
+
+	private ContentProposerAstReuser cpar;
+
+	@Before
+	public void setUp() {
+		cpar = new ContentProposerAstReuser(identifierLexical);
+		assertNull(cpar.tryReusePreviousAst(new Position(3), "hel"));
+		cpar.storeAstForReuse(term, term, "hel");
+	}
+
+	@Test
+	public void completionNodeAndPrefix() {
+		assertNull(cpar.getCompletionNode());
+		assertNull(cpar.getCompletionPrefix());
+	}
+
+	@Test
+	public void reuseWithoutMove() {
+		assertSame(term, cpar.tryReusePreviousAst(new Position(3), "hel"));
+		assertSame(term, cpar.getCompletionNode());
+		assertEquals("hel", cpar.getCompletionPrefix());
+	}
+
+	@Test
+	public void reuseWithMoveForward() {
+		assertSame(term, cpar.tryReusePreviousAst(new Position(4), "hell"));
+	}
+
+	@Test
+	public void reuseWithMoveBackward() {
+		assertSame(term, cpar.tryReusePreviousAst(new Position(2), "he"));
+	}
+
+	@Test
+	public void reuseWithMoveForwardMuch() {
+		assertNull(cpar.tryReusePreviousAst(new Position(5), "hello"));
+	}
+
+	@Test
+	public void reuseWithMoveBackwardMuch() {
+		assertNull(cpar.tryReusePreviousAst(new Position(1), "h"));
+	}
+
+	@Test
+	public void reuseWithChangedText() {
+		assertNull(cpar.tryReusePreviousAst(new Position(3), "foo"));
+	}
+}

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/_attic/TestFilterCompletions.java (from r25745, spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestFilterCompletions.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/test/org/strategoxt/imp/runtime/services/TestFilterCompletions.java	Mon Dec  3 14:10:31 2012	(r25745, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/_attic/TestFilterCompletions.java	Mon Dec  3 15:01:19 2012	(r25746)
@@ -11,6 +11,7 @@
 import org.eclipse.jface.text.contentassist.ICompletionProposal;
 import org.junit.Before;
 import org.junit.Test;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * Unit tests for the ContentProposer.filterCompletions method.
@@ -29,7 +30,7 @@
 
 	@Before
 	public void setUp() throws Exception {
-		cp = new ContentProposer(null, null, null, identifierLexical, null);
+		cp = new ContentProposer(null, null, null, new IStrategoTerm[0], identifierLexical, null);
 		completions = new HashSet<Completion>();
 		results = null;
 	}
@@ -42,7 +43,7 @@
 	 * @param sorts    Sorts allowed at this position 
 	 */
 	void filterCompletions(String document, String prefix, int offset, int length, Set<String> sorts) {
-		//results = cp.filterCompletions(completions, document, prefix, new Position(offset, length), sorts, null);
+		results = cp.filterCompletions(completions, document, prefix, new Position(offset, length), sorts, null);
 	}
 
 	@Test

From gabrielkonat at gmail.com  Mon Dec  3 17:51:45 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 03 Dec 2012 16:51:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25747 - in
	spoofax-contrib/index-examples/index-libraries: . lib
Message-ID: <20121203165145.98A517F8005@mx1.tudelft.nl>

Author: gkonat
Date: Mon Dec  3 16:51:44 2012
New Revision: 25747
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25747&sc=1

Log:
Improved performance of reference resolution.

Added:
   spoofax-contrib/index-examples/index-libraries/.project
Modified:
   spoofax-contrib/index-examples/index-libraries/   (props changed)
   spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str
   spoofax-contrib/index-examples/index-libraries/lib/analysis-library.str
   spoofax-contrib/index-examples/index-libraries/lib/nbl-library.str

Added: spoofax-contrib/index-examples/index-libraries/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/index-examples/index-libraries/.project	Mon Dec  3 16:51:44 2012	(r25747)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>index-libraries</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+	</buildSpec>
+	<natures>
+	</natures>
+</projectDescription>

Modified: spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str
==============================================================================
--- spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str	Mon Dec  3 15:01:19 2012	(r25746)
+++ spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str	Mon Dec  3 16:51:44 2012	(r25747)
@@ -496,10 +496,10 @@
    *
    * @internal
    */
-  index-lookup-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix):
+  index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
     x -> definition
     where
-      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix)> x;
+      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
       
       if StopLookup() := defs then
         fail
@@ -507,12 +507,12 @@
       
       if not(definition := <Hd> defs) then
         [_|path']  := path;
-        definition := <index-lookup-internal(adjust-import, adjust-lookup, name-compare|namespace, path', prefix)> x
+        definition := <index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path', prefix)> x
       end
       
   /** @internal */
-  index-lookup-internal(name-compare|namespace, path, prefix) = 
-    index-lookup-internal(id, id, name-compare|namespace, path, prefix)
+  index-lookup-internal(get-defs, name-compare|namespace, path, prefix) = 
+    index-lookup-internal(id, id, get-defs, name-compare|namespace, path, prefix)
 
   /**
    * Given a term x, namespace n, path s and prefix p, looks for definitions in the scope of s 
@@ -525,21 +525,21 @@
    *
    * @internal
    */
-  index-lookup-all-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix):
+  index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
     x -> defs'
     where
-      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix)> x;
+      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
       
       if [_|path'] := path then
-        defs2 := <index-lookup-all-internal(adjust-import, adjust-lookup, name-compare|namespace, path', prefix)> x;
+        defs2 := <index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path', prefix)> x;
         defs' := <conc> (defs, defs2)
       else
         defs' := defs
       end
 
   /** @internal */
-  index-lookup-all-internal(name-compare|namespace, path, prefix) = 
-    index-lookup-all-internal(id, id, name-compare|namespace, path, prefix)
+  index-lookup-all-internal(get-defs, name-compare|namespace, path, prefix) = 
+    index-lookup-all-internal(id, id, get-defs, name-compare|namespace, path, prefix)
       
   /**
    * Given a term x, namespace n, path s and prefix p, looks for a definition in the 
@@ -552,34 +552,34 @@
    *
    * @internal
    */
-  index-lookup-all-scoped-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix):
+  index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
     x -> defs
     with
       adjust-lookup;
       adjusted := <index-do-adjust-lookup(|namespace, path, x, prefix)> x;
-      defs     := <index-get-adjust-lookup-results(adjust-import, name-compare|adjusted, prefix)> x
+      defs     := <index-get-adjust-lookup-results(adjust-import, get-defs, name-compare|adjusted, prefix)> x
     <+
       adjust-import;
       adjusted := <index-do-adjust-import(|namespace, path)> x;
-      defs     := <index-get-adjust-import-results(adjust-lookup, name-compare|adjusted, prefix)> x
+      defs     := <index-get-adjust-import-results(adjust-lookup, get-defs, name-compare|adjusted, prefix)> x
     <+
-      defs     := <index-get-children(\uri -> Def(uri)\, name-compare|namespace, prefix)> [namespace | path]
+      defs     := <get-defs(name-compare|namespace, prefix)> [namespace | path]
       
   /** @internal */
-  index-lookup-all-scoped-internal(name-compare|namespace, path, prefix) = 
-    index-lookup-all-scoped-internal(id, id, name-compare|namespace, path, prefix)
+  index-lookup-all-scoped-internal(get-defs, name-compare|namespace, path, prefix) = 
+    index-lookup-all-scoped-internal(id, id, get-defs, name-compare|namespace, path, prefix)
   
   /** @internal */
   index-do-adjust-import(|namespace, path) =
     adjust-index-import(|namespace, path)
     
   /** @internal */
-  index-get-adjust-import-results(adjust-lookup, name-compare|adjusted, prefix):
+  index-get-adjust-import-results(adjust-lookup, get-defs, name-compare|adjusted, prefix):
     x -> defs'
     with
       defs := 
         <mapconcat(
-             index-adjust-import-recurse(adjust-lookup, name-compare|x, prefix)
+             index-adjust-import-recurse(adjust-lookup, get-defs, name-compare|x, prefix)
           <+ fatal-err(|"Unexpected result from adjust-index-import, should be a list of [namespace | path].")
         )> adjusted;
         if not(<elem> (StopLookup(), defs)) then
@@ -589,10 +589,10 @@
       	end
       	
   /** @internal */
-  index-adjust-import-recurse(adjust-lookup, name-compare|x, prefix):
+  index-adjust-import-recurse(adjust-lookup, get-defs, name-compare|x, prefix):
   	[namespace|path] -> results'
   	with
-  		results := <index-lookup-all-scoped-internal(fail, adjust-lookup, name-compare|namespace, path, prefix)> x;
+  		results := <index-lookup-all-scoped-internal(fail, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
   		if not(<is-list> results) then
   			results' := [results]
   		else
@@ -607,7 +607,7 @@
     )
     
   /** @internal */  
-  index-get-adjust-lookup-results(adjust-import, name-compare|adjusted, prefix):
+  index-get-adjust-lookup-results(adjust-import, get-defs, name-compare|adjusted, prefix):
     x -> defs'
     with
       if StopLookup() := adjusted then
@@ -616,11 +616,19 @@
         defs := 
           <mapconcat(
                \d at Def(p) -> [d]\
-            <+ \[namespace'|path'] -> <index-lookup-all-scoped-internal(adjust-import, fail, name-compare|namespace', path', prefix)> x\
+            <+ \[namespace'|path'] -> <index-lookup-all-scoped-internal(adjust-import, fail, get-defs, name-compare|namespace', path', prefix)> x\
             <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a list of Def(uri) or [namespace | path], or StopLookup() to stop the lookup.")
           )> adjusted;
           defs' := <filter(name-compare)> defs
       end
+
+rules // Definition retrieval
+  
+  index-get-defs(name-compare|namespace, name):
+    [ns|path] -> <index-get-all> Def([ns, name|path])
+  
+  index-get-defs-prefix(name-compare|namespace, prefix) = 
+    index-get-children(\uri -> Def(uri)\, name-compare|namespace, prefix)
       
 rules // Name comparisons
 

Modified: spoofax-contrib/index-examples/index-libraries/lib/analysis-library.str
==============================================================================
--- spoofax-contrib/index-examples/index-libraries/lib/analysis-library.str	Mon Dec  3 15:01:19 2012	(r25746)
+++ spoofax-contrib/index-examples/index-libraries/lib/analysis-library.str	Mon Dec  3 16:51:44 2012	(r25747)
@@ -319,10 +319,10 @@
   index-get-all:
     template -> <indexlib-get-all> template
       with
-       if set := <Index-ReadSet> then
-         uri := <index-uri>;
-         <iset-add(|Read(uri))> set
-       end
+        if set := <Index-ReadSet> then
+          uri := <index-uri>;
+          <iset-add(|Read(uri))> set
+        end
        
   /**
    * Get all values of index entries that match the given template.
@@ -468,7 +468,7 @@
    * @type "name"{uri} -> ?Def(uri')
    */
   index-lookup:
-    x{[namespace|path]} -> <index-lookup-internal(index-compare-name-equal(|name)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-name-equal(|name)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -480,7 +480,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all:
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-name-equal(|name)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs, index-compare-name-equal(|name)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -494,7 +494,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all(|prefix):
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-name-substring(|prefix)|ns, path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|ns, path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace
       
@@ -505,7 +505,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped:
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-compare-name-equal(|name)|ns, parent-path, name)> x
+    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs, index-compare-name-equal(|name)|ns, parent-path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x;
@@ -518,7 +518,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped-noimports:
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(fail, id, index-compare-name-equal(|name)|ns, parent-path, name)> x
+    x{[namespace|path]} -> <index-lookup-all-scoped-internal(fail, id, index-get-defs, index-compare-name-equal(|name)|ns, parent-path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x;
@@ -533,7 +533,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped(|prefix):
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-compare-name-substring(|prefix)|ns, parent-path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|ns, parent-path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace;
       (<?[_|<id>]> path <+ !path) => parent-path
@@ -558,7 +558,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */    
   index-lookup-children(|namespace, prefix):
-    x{[_|path]} -> <index-lookup-all-scoped-internal(index-compare-name-substring(|prefix, namespace)|namespace, path, prefix)> x
+    x{[_|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix, namespace)|namespace, path, prefix)> x
       
 rules // Index utilities
   

Modified: spoofax-contrib/index-examples/index-libraries/lib/nbl-library.str
==============================================================================
--- spoofax-contrib/index-examples/index-libraries/lib/nbl-library.str	Mon Dec  3 15:01:19 2012	(r25746)
+++ spoofax-contrib/index-examples/index-libraries/lib/nbl-library.str	Mon Dec  3 16:51:44 2012	(r25747)
@@ -91,7 +91,7 @@
    * @type "name"{uri} -> ?Def(uri')
    */
   index-lookup-typed(|type):
-    x{[namespace|path]} -> <index-lookup-internal(index-compare-nametype-equal(|name, type)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-nametype-equal(|name, type)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -106,7 +106,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-typed(|prefix, type):
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-nametype-substring(|prefix, type)|ns, path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-nametype-substring(|prefix, type)|ns, path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace
 

From gabrielkonat at gmail.com  Wed Dec  5 13:30:07 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Wed, 05 Dec 2012 12:30:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25748 -
	strategoxt-java-backend/trunk/java
Message-ID: <20121205123007.0EA897F8003@mx1.tudelft.nl>

Author: gkonat
Date: Wed Dec  5 12:30:06 2012
New Revision: 25748
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25748&sc=1

Log:
New libraries

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From v.vergu+vc at gmail.com  Wed Dec  5 15:23:48 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Wed, 05 Dec 2012 14:23:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25749 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20121205142348.157C77F8034@mx1.tudelft.nl>

Author: VladVergu
Date: Wed Dec  5 14:23:46 2012
New Revision: 25749
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25749&sc=1

Log:
Fixes http://yellowgrass.org/issue/Spoofax/535

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str	Wed Dec  5 12:30:06 2012	(r25748)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str	Wed Dec  5 14:23:46 2012	(r25749)
@@ -10,13 +10,14 @@
     where(InputFile) // if no input file: create a new .project, overwriting Eclipse's default
   <+
     package     := <BasePackage <+ default-package-name>;
+    project		:= <ProjectName>;
     builder-xml := <conc-strings> ("&lt;project&gt;/.externalToolBuilders/", <builder-xml-name>);
     
     <output-xml-file(|[], ".project")>
     %>
     <?xml version="1.0" encoding="UTF-8"?>
     <projectDescription>
-      <name><%= package::cdata %></name>
+      <name><%= project::cdata %></name>
       <comment></comment>
       <buildSpec>
         <buildCommand>

From v.vergu+vc at gmail.com  Wed Dec  5 20:57:18 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Wed, 05 Dec 2012 19:57:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25750 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/i...
Message-ID: <20121205195718.906B72B800E@mx2.tudelft.nl>

Author: VladVergu
Date: Wed Dec  5 19:57:16 2012
New Revision: 25750
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25750&sc=1

Log:
Implements http://yellowgrass.org/issue/Spoofax/573

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	Wed Dec  5 14:23:46 2012	(r25749)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	Wed Dec  5 19:57:16 2012	(r25750)
@@ -164,6 +164,8 @@
     copy-def-file;
     create-jdt-prefs;
     
+    create-ignore-files;
+    
     say(!"Build succesful.")
 
   is-heuristic-services-needed =

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	Wed Dec  5 14:23:46 2012	(r25749)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	Wed Dec  5 19:57:16 2012	(r25750)
@@ -12,6 +12,7 @@
   <+ start-symbol-option
   <+ jar-option
   <+ reset-files-option
+  <+ gen-ignores-option
   <+ verbose-option
 
   input-file-option =
@@ -49,7 +50,7 @@
     , rules(ProjectName := <id>)
     , !"-pn <project name>    Set project name (optional)"
     )
-
+  	
   jar-option =
     MultiArgOption(
       "-jar"
@@ -80,6 +81,14 @@
     , rules(ResetFiles: _)
     , !"-r | --reset          Reset all generated files to their defaults"
     )
+    
+  gen-ignores-option =
+  	Option(
+  	  "-vci"
+  	, rules(GenerateVCIgnores: _)
+  	, !"-vci                 Enable generation of ignores for version control systems" 
+  	)
+    
   
   parameterized-sort-to-rtg-sort =
     // Module[StrategoHost] -> Module_StrategoHost

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str	Wed Dec  5 19:57:16 2012	(r25750)
@@ -0,0 +1,20 @@
+module sdf2imp/project/create-ignore-files
+    
+imports
+  sdf2imp/util/-
+
+strategies
+
+  create-ignore-files =
+  	not(GenerateVCIgnores)
+  	<+
+  	name       := <get-sdf-main-module>;
+  	<output-text-file(|[], ".gitignore")>
+    <conc-strings>
+(
+".cache
+bin
+editor/", name, "-*.generated.esv
+include/*
+syntax/", name, ".generated.pp"
+)

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	Wed Dec  5 14:23:46 2012	(r25749)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	Wed Dec  5 19:57:16 2012	(r25750)
@@ -73,11 +73,12 @@
 		final String projectName = input.getInputProjectName();
 		final String packageName = input.getInputPackageName();
 		final String extensions = input.getInputExtensions();
+		final boolean genIgnores = input.getInputIgnores();
 		
 		IRunnableWithProgress op = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) throws InvocationTargetException {
 				try {
-					doFinish(languageName, projectName, packageName, extensions, monitor);
+					doFinish(languageName, projectName, packageName, extensions, genIgnores, monitor);
 				} catch (Exception e) {
 					throw new InvocationTargetException(e);
 				} finally {
@@ -110,7 +111,7 @@
 		}
 	}
 	
- 	private void doFinish(String languageName, String projectName, String packageName, String extensions, IProgressMonitor monitor) throws IOException, CoreException {
+ 	private void doFinish(String languageName, String projectName, String packageName, String extensions, boolean genIgnores, IProgressMonitor monitor) throws IOException, CoreException {
 		final int TASK_COUNT = 22;
 		lastProject = null;
 		monitor.beginTask("Creating " + languageName + " project", TASK_COUNT);
@@ -132,7 +133,11 @@
 
 		agent.setWorkingDir(project.getLocation().toOSString());
 		try {
-			sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "--verbose", "2");
+			if(genIgnores){
+				sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "-vci", "--verbose", "2");
+			}else{
+				sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "--verbose", "2");
+			}
 		} catch (StrategoErrorExit e) {
 			Environment.logException(e);
 			throw new StrategoException("Project builder failed: " + e.getMessage() + "\nLog follows:\n\n"

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	Wed Dec  5 14:23:46 2012	(r25749)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	Wed Dec  5 19:57:16 2012	(r25750)
@@ -9,6 +9,7 @@
 import org.eclipse.swt.events.ModifyListener;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Text;
@@ -29,6 +30,8 @@
 	
 	private Text inputExtensions;
 	
+	private Button inputIgnores;
+	
 	private boolean isInputProjectNameChanged;
 	
 	private boolean isInputPackageNameChanged;
@@ -125,6 +128,11 @@
 				}
 			}
 		});
+		
+
+		inputIgnores = new Button(container, SWT.CHECK);
+		inputIgnores.setText("&Generate .gitignore file");
+		inputIgnores.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
 
 		setControl(container);
 		setPageComplete(false);
@@ -307,4 +315,8 @@
 	public String getInputExtensions() {
 		return inputExtensions.getText().trim();
 	}
+	
+	public boolean getInputIgnores() {
+		return inputIgnores.getSelection();
+	}
 }

From andre.s.d.vieira at gmail.com  Thu Dec  6 12:26:51 2012
From: andre.s.d.vieira at gmail.com (Andre Vieira)
Date: Thu, 06 Dec 2012 11:26:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25751 -
	spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error
Message-ID: <20121206112651.304A42B802B@mx2.tudelft.nl>

Author: AndreVieira
Date: Thu Dec  6 11:26:49 2012
New Revision: 25751
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25751&sc=1

Log:


Added:
   spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/
   spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/console.log
   spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/crashed.log
   spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/program-after-parsing.aterm
   spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/program.app
   spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/program.aterm
   spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/report.txt

Added: spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/console.log
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/console.log	Thu Dec  6 11:26:49 2012	(r25751)
@@ -0,0 +1,59 @@
+[ test | info ] stage 1: parsing test.app     : [user/system] = [0.63s/0.00s]
+[ test | info ] stage 2: importing modules    : [user/system] = [0.02s/0.00s]
+[ test | info ] stage 3: typecheckingtest: rewriting failed, trace:
+	webdslc_main_0_0
+	webdslc_main_0_0
+	setup_adderror_for_random_testing_1_0
+	webdslc_main2_0_0
+	xtc_io_wrap_5_0
+	option_wrap_5_0
+	xtc_io_1_0
+	xtc_temp_files_1_0
+	restore_always_2_0
+	xtc_webdslc_0_0
+	dsl_to_core_0_0
+	dsl_to_core_analysis_0_0
+	stage_1_1
+	dr_scope_1_1
+	log_timed_1_1
+	typecheck_0_0
+	in_typechecking_phase_1_0
+	dr_scope_1_1
+	rename_top_0_0
+	log_time_1_1
+	if_statistics_2_0
+	map_toplevel_2_0
+	alltd_1_0
+	map_1_0
+	rename_toplevel_0_0
+	with_toplevel_name_1_0
+	with_toplevel_name_1_1
+	dr_scope_1_1
+	rename_all_0_0
+	with_origin_1_0
+	with_origin_1_1
+	preserve_editor_origin_1_1
+	alltd_1_0
+	rename_0_0
+	rename_action_0_0
+	rename_all_0_0
+	with_origin_1_0
+	with_origin_1_1
+	preserve_editor_origin_1_1
+	alltd_1_0
+	rename_0_0
+	rename_ui_0_0
+	rename_ui_0_0_fragment_3
+	rename_ui_0_0_fragment_2
+	rename_ui_0_0_fragment_1
+	rename_ui_0_0_fragment_0
+	type_of_0_0
+	eq_type_of_0_0
+	eq_type_of_action_0_0
+	TypeOf_0_0
+	fetch_elem_1_0
+	aux_TypeOf_0_2
+	get_inferred_type_0_0
+	dr_scope_1_1
+[ test | critical ] Internal error: with clause failed unexpectedly in rule 'get-inferred-type'
+           ("uU___Wr",ThisCall("Il",[]){At("../Tests/WebDSL/test.app",393,3)})
\ No newline at end of file

Added: spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/crashed.log
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/crashed.log	Thu Dec  6 11:26:49 2012	(r25751)
@@ -0,0 +1,55 @@
+Exception during evaluation
+webdslc_main_0_0
+webdslc_main_0_0
+setup_adderror_for_random_testing_1_0
+webdslc_main2_0_0
+xtc_io_wrap_5_0
+option_wrap_5_0
+xtc_io_1_0
+xtc_temp_files_1_0
+restore_always_2_0
+xtc_webdslc_0_0
+dsl_to_core_0_0
+dsl_to_core_analysis_0_0
+stage_1_1
+dr_scope_1_1
+log_timed_1_1
+typecheck_0_0
+in_typechecking_phase_1_0
+dr_scope_1_1
+rename_top_0_0
+log_time_1_1
+if_statistics_2_0
+map_toplevel_2_0
+alltd_1_0
+map_1_0
+rename_toplevel_0_0
+with_toplevel_name_1_0
+with_toplevel_name_1_1
+dr_scope_1_1
+rename_all_0_0
+with_origin_1_0
+with_origin_1_1
+preserve_editor_origin_1_1
+alltd_1_0
+rename_0_0
+rename_action_0_0
+rename_all_0_0
+with_origin_1_0
+with_origin_1_1
+preserve_editor_origin_1_1
+alltd_1_0
+rename_0_0
+rename_ui_0_0
+rename_ui_0_0_fragment_3
+rename_ui_0_0_fragment_2
+rename_ui_0_0_fragment_1
+rename_ui_0_0_fragment_0
+type_of_0_0
+eq_type_of_0_0
+eq_type_of_action_0_0
+TypeOf_0_0
+fetch_elem_1_0
+aux_TypeOf_0_2
+get_inferred_type_0_0
+report_with_failure_0_2

Added: spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/program-after-parsing.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/program-after-parsing.aterm	Thu Dec  6 11:26:49 2012	(r25751)
@@ -0,0 +1,195 @@
+Application(
+  "Nf22_p2___H"
+, [ Section(
+      " *'tz% pp {"
+    , [ EntityNoSuper(
+          "d2EJ_8__4N2"
+        , [SearchMappingEmbedded([]), SearchMappingEmbedded([]), SearchMappingEmbedded([]), SearchMappingEmbedded([]), CachedEntity()]
+        )
+      , InvokeEvery(ListCreation([]), TimeInterval([]))
+      , SearchMapping("Nf22_p2___H", [])
+      , GlobalVarDeclInitInferred("f", Var("r_"))
+      , AccessControlPrincipal("Nf22_p2___H", ["Td1_y_722"])
+      , DeriveCrud("uU___Wr")
+      , AccessControlPrincipal("d2EJ_8__4N2", ["WE"])
+      , FullTextAnalyzer(None(), "mURRE", FullTextAnalyzerBodyDef([], TokenizerNoArgs("X9"), []))
+      , AccessControlPrincipal("j3", ["f"])
+      , GlobalVarDeclInitInferred("f", ThisCall("uU___Wr", []))
+      , TypeDef("Il", [])
+      , FullTextAnalyzer(
+          None()
+        , "X9"
+        , DualFullTextAnalyzerBodyDef(
+            "index"
+          , FullTextAnalyzerBodyDef([], TokenizerNoArgs("WE"), [])
+          , "index"
+          , FullTextAnalyzerBodyDef([], Tokenizer("r_", []), [])
+          )
+        )
+      , DefinePage([], "f", [], None(), [])
+      ]
+    )
+  , Section(
+      "  ||}p pu q"
+    , [ Entity(
+          "X9"
+        , "Xqd_"
+        , [DerivedProperty(
+             "f"
+           , Ref()
+           , SimpleSort("I6HO")
+           , []
+           , ThisCall("Il", [])
+           )]
+        )
+      , Predicate("M_DYT2U_j__", [], SetCreation([]))
+      , GlobalVarDeclInitInferred("M_DYT2U_j__", Null())
+      , ExtendSessionEntity("r_", [])
+      , Enum("hAU6", [])
+      , DeriveCrud("X9")
+      , Enum("I6HO", [])
+      , GlobalVarDeclInitInferred("mURRE", ListCreation([]))
+      , DeriveWebServices("I", "I")
+      , ExtendEntity("M", [])
+      , GlobalVarDeclInitInferred("mURRE", ListCreation([]))
+      , Enum("mURRE", [])
+      , ServiceFunction("X9", [], Block([]))
+      , LocalRedefine([], "Xqd_", [], "I6HO", None())
+      , ExtendSessionEntity("Il", [])
+      , RecommendConfigStaticOrder(
+          "WE"
+        , RecommendUser("j3")
+        , RecommendItem("Td1_y_722")
+        , RecommendValue("M")
+        , RecommendAlgorithm("d2EJ_8__4N2")
+        , RecommendNeighborAlg("r_")
+        , RecommendNeighborSize("WE")
+        , RecommendType("Il")
+        , RecommendSchedule("M")
+        )
+      ]
+    )
+  , Section(
+      " *'tz% pp {"
+    , [ EntityNoSuper(
+          "I"
+        , [ Function("f", [], SimpleSort("Void"), Block([]))
+          , Function("M_DYT2U_j__", [], SimpleSort("Void"), Block([]))
+          , ValidateEntity(GlobalVar("mURRE"), ListCreation([]))
+          , SearchMappingEmbedded([])
+          , SearchMappingEmbedded([])
+          , SearchMappingEmbedded([])
+          , StaticEntityFunction("M", [], ReturnType(SimpleSort("Void")), Block([]))
+          , Property("j3", Ref(), SimpleSort("X9"), [])
+          , CachedEntity()
+          , CachedEntity()
+          , ValidateEntity(False(), ListCreation([]))
+          , Function("hAU6", [], SimpleSort("Void"), Block([]))
+          , SearchMappingEmbedded([])
+          , DerivedPropertyNoAnno("M_DYT2U_j__", Simple(), SimpleSort("d2EJ_8__4N2"), Var("r_"))
+          ]
+        )
+      , FullTextAnalyzer(
+          None()
+        , "j82"
+        , FullTextAnalyzerBodyDef([], Tokenizer("f", []), [])
+        )
+      , TypeDef("M_DYT2U_j__", [])
+      , SearchMapping("f", [])
+      , DeriveCrud("d2EJ_8__4N2")
+      , TypeDef("mURRE", [])
+      , Action([], "I", [], Block([]))
+      , SearchMapping("mURRE", [])
+      , Enum("mURRE", [])
+      , Predicate("Xqd_", [], ListCreation([]))
+      , ServiceFunction("j3", [], Block([]))
+      , Predicate("Nf22_p2___H", [], Null())
+      , ExtendSessionEntity("WE", [])
+      , EntityNoSuper("r_", [])
+      , InitAction(Block([]))
+      , GlobalVarDeclInitInferred("I", GlobalVar("uU___Wr"))
+      ]
+    )
+  , Section(
+      " | p"
+    , [ Entity(
+          "M"
+        , "j3"
+        , [ ValidateEntity(True(), ListCreation([]))
+          , ExtendFunction(Function("p_06gf_m3_3", [], SimpleSort("Void"), Block([])))
+          , ValidateEntity(ListCreation([]), Var("p_06gf_m3_3"))
+          , StaticEntityFunction("WE", [], ReturnType(SimpleSort("Void")), Block([]))
+          ]
+        )
+      , TypeDef("r_", [])
+      , AccessControlPrincipal("uU___Wr", ["j3"])
+      , Action([], "M", [], Block([]))
+      , GlobalVarDeclInitInferred("uU___Wr", ThisCall("Il", []))
+      , Entity("M_DYT2U_j__", "I", [])
+      , Action([], "mURRE", [], Block([]))
+      , DeriveCrud("WE")
+      , Enum("I6HO", [])
+      ]
+    )
+  , Section(
+      " | p"
+    , [ DefineTemplate(
+          [Template()]
+        , "t___1m"
+        , [ Arg("p_06gf_m3_3", FunctionSort([], SimpleSort("Void")))
+          , Arg("Il", RefSort(SimpleSort("M")))
+          , Arg("M", SimpleSort("I"))
+          , Arg("r_", SimpleSort("M"))
+          , Arg("X9", SimpleSort("I"))
+          , Arg("WE", SimpleSort("X9"))
+          , Arg("d2EJ_8__4N2", SimpleSort("X9"))
+          , Arg("Xqd_", SimpleSort("d2EJ_8__4N2"))
+          , Arg("M", SimpleSort("M"))
+          , Arg("X9", SimpleSort("X9"))
+          , Arg("p_06gf_m3_3", SimpleSort("X9"))
+          ]
+        , None()
+        , [ Action(
+              [ ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              ]
+            , "f"
+            , [Arg("M_DYT2U_j__", SimpleSort("Il")), Arg("M_DYT2U_j__", SimpleSort("M_DYT2U_j__"))]
+            , Block([])
+            )
+          , Action(
+              [ActionModifierIgnoreValidation(), ActionModifierIgnoreValidation()]
+            , "X9"
+            , [ Arg("hAU6", SimpleSort("Il"))
+              , Arg("M", SimpleSort("I6HO"))
+              , Arg("t___1m", SimpleSort("I"))
+              , Arg("WE", SimpleSort("X9"))
+              , Arg("t___1m", SimpleSort("hAU6"))
+              ]
+            , Block([])
+            )
+          , Submit(ListCreation([]), ActionCall("X9", []), [])
+          , SelectFromListNoPropsNoElems(True(), SetCreation([]))
+          , SelectFromList(Null(), True(), [], [])
+          , ForAll("mURRE", SimpleSort("d2EJ_8__4N2"), None(), [], ForSeparator([]))
+          , RenderAction(Block([]))
+          , SubmitLink(True(), ActionCall("f", []), [])
+          , Derive("M", GlobalVar("uU___Wr"), DeriveBody([]))
+          ]
+        )
+      , Enum("Il", [])
+      , ExtendSessionEntity("t___1m", [])
+      , NativeClass("j3", NativeClassAlias("Nf22_p2___H"), NativeClassSuper("M"), [])
+      ]
+    )
+  ]
+)
\ No newline at end of file

Added: spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/program.app
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/program.app	Thu Dec  6 11:26:49 2012	(r25751)
@@ -0,0 +1,595 @@
+application Nf22_p2___H
+
+section *'tz% pp {
+
+  entity d2EJ_8__4N2 {
+    search mapping {
+    }
+    search mapping {
+    }
+    search mapping {
+    }
+    search mapping {
+    }
+    cache
+  }
+
+  invoke
+
+  [
+  ]
+
+  every
+
+  search mapping Nf22_p2___H {
+  }
+
+  var
+
+  f
+
+  :=
+
+  r_
+
+  principal
+
+  is
+
+  Nf22_p2___H
+
+  with
+
+  credentials
+
+  Td1_y_722
+
+  derive
+
+  CRUD
+
+  uU___Wr
+
+  principal
+
+  is
+
+  d2EJ_8__4N2
+
+  with
+
+  credentials
+
+  WE
+
+  analyzer mURRE {
+    tokenizer = X9
+  }
+
+  principal
+
+  is
+
+  j3
+
+  with
+
+  credentials
+
+  f
+
+  var
+
+  f
+
+  :=
+
+  uU___Wr()
+
+  type Il { }
+
+  analyzer X9 {
+    index {
+    tokenizer = WE
+    }
+    index {
+    tokenizer = r_ ( )
+    }
+  }
+
+  page f ( )
+  {
+  }
+
+section  ||}p pu q
+
+  entity X9 : Xqd_ {
+    f -> I6HO ( ) := Il()
+  }
+
+  predicate
+
+  M_DYT2U_j__
+
+  (
+
+  )
+
+  {
+
+  {}
+
+  }
+
+  var
+
+  M_DYT2U_j__
+
+  :=
+
+  null
+
+  extend
+
+  session
+
+  r_
+
+  {
+
+  }
+
+  enum hAU6 { }
+
+  derive
+
+  CRUD
+
+  X9
+
+  enum I6HO { }
+
+  var
+
+  mURRE
+
+  :=
+
+  []
+
+  derive
+
+  webservices
+
+  for
+
+  I
+
+  ,
+
+  with
+
+  nameproperty
+
+  I
+
+  extend entity M {
+  }
+
+  var
+
+  mURRE
+
+  :=
+
+  []
+
+  enum mURRE { }
+
+  service X9 ( )
+  {
+  }
+
+  define
+
+  Xqd_
+
+  (
+
+  )
+
+  =
+
+  I6HO
+
+  extend
+
+  session
+
+  Il
+
+  {
+
+  }
+
+  recommenderStaticOrder
+
+  WE
+
+  {
+
+  j3
+
+  Td1_y_722
+
+  M
+
+  d2EJ_8__4N2
+
+  r_
+
+  WE
+
+  Il
+
+  M
+
+  }
+
+section *'tz% pp {
+
+  entity I {
+    function f ( ) : Void
+    {
+    }
+    function M_DYT2U_j__ ( ) : Void
+    {
+    }
+    validate(global.mURRE,[
+                          ])
+    search mapping {
+    }
+    search mapping {
+    }
+    search mapping {
+    }
+    static function M ( ) : Void
+    {
+    }
+    j3 -> X9 ( )
+    cache
+    cache
+    validate(false,[])
+    function hAU6 ( ) : Void
+    {
+    }
+    search mapping {
+    }
+    M_DYT2U_j__ :: d2EJ_8__4N2 := r_
+  }
+
+  analyzer j82 {
+    tokenizer = f ( )
+  }
+
+  type M_DYT2U_j__ { }
+
+  search mapping f {
+  }
+
+  derive
+
+  CRUD
+
+  d2EJ_8__4N2
+
+  type mURRE { }
+
+  action I ( )
+  {
+  }
+
+  search mapping mURRE {
+  }
+
+  enum mURRE { }
+
+  predicate
+
+  Xqd_
+
+  (
+
+  )
+
+  {
+
+  []
+
+  }
+
+  service j3 ( )
+  {
+  }
+
+  predicate
+
+  Nf22_p2___H
+
+  (
+
+  )
+
+  {
+
+  null
+
+  }
+
+  extend
+
+  session
+
+  WE
+
+  {
+
+  }
+
+  entity r_ {
+  }
+
+  init
+  {
+  }
+
+  var
+
+  I
+
+  :=
+
+  global.uU___Wr
+
+section | p
+
+  entity M : j3 {
+    validate(true,[
+                  ])
+    extend
+    function p_06gf_m3_3 ( ) : Void
+    {
+    }
+    validate([],p_06gf_m3_3)
+    static function WE ( ) : Void
+    {
+    }
+  }
+
+  type r_ { }
+
+  principal
+
+  is
+
+  uU___Wr
+
+  with
+
+  credentials
+
+  j3
+
+  action M ( )
+  {
+  }
+
+  var
+
+  uU___Wr
+
+  :=
+
+  Il()
+
+  entity M_DYT2U_j__ : I {
+  }
+
+  action mURRE ( )
+  {
+  }
+
+  derive
+
+  CRUD
+
+  WE
+
+  enum I6HO { }
+
+section | p
+
+  template
+
+  template
+
+  t___1m
+
+  (
+
+  p_06gf_m3_3 : function ( ) : Void
+
+  ,
+
+  Il : Ref<M>
+
+  ,
+
+  M : I
+
+  ,
+
+  r_ : M
+
+  ,
+
+  X9 : I
+
+  ,
+
+  WE : X9
+
+  ,
+
+  d2EJ_8__4N2 : X9
+
+  ,
+
+  Xqd_ : d2EJ_8__4N2
+
+  ,
+
+  M : M
+
+  ,
+
+  X9 : X9
+
+  ,
+
+  p_06gf_m3_3 : X9
+
+  )
+
+  {
+
+  action ignore-validation ignore-validation ignore-validation ignore-validation ignore-validation ignore-validation ignore-validation ignore-validation ignore-validation ignore-validation ignore-validation f ( M_DYT2U_j__ : Il, M_DYT2U_j__ : M_DYT2U_j__ )
+  {
+  }
+
+  action ignore-validation ignore-validation X9 ( hAU6 : Il, M : I6HO, t___1m : I, WE : X9, t___1m : hAU6 )
+  {
+  }
+
+  submit
+
+  (
+
+  []
+
+  ,
+
+  X9()
+
+  )
+
+  [
+
+  ]
+
+  select
+
+  (
+
+  true
+
+  from
+
+  {}
+
+  )
+
+  select
+
+  (
+
+  null
+
+  from
+
+  true
+
+  )
+
+  [
+
+  ]
+
+  {
+
+  }
+
+  for
+
+  (
+
+  mURRE
+
+  :
+
+  d2EJ_8__4N2
+
+  )
+
+  {
+
+  }
+
+  separated-by
+
+  {
+
+  }
+
+  render
+
+  {
+  }
+
+  submitlink
+
+  (
+
+  true
+
+  ,
+
+  f()
+
+  )
+
+  [
+
+  ]
+
+  derive
+
+  M
+
+  from
+
+  global.uU___Wr
+
+  {
+  }
+
+  }
+
+  enum Il { }
+
+  extend
+
+  session
+
+  t___1m
+
+  {
+
+  }
+
+  native class j3 as Nf22_p2___H : M
+
+  {
+
+  }
+
\ No newline at end of file

Added: spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/program.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/program.aterm	Thu Dec  6 11:26:49 2012	(r25751)
@@ -0,0 +1,195 @@
+Application(
+  "Nf22_p2___H"
+, [ Section(
+      "*'tz% pp {"
+    , [ EntityNoSuper(
+          "d2EJ_8__4N2"
+        , [SearchMappingEmbedded([]), SearchMappingEmbedded([]), SearchMappingEmbedded([]), SearchMappingEmbedded([]), CachedEntity()]
+        ){"EntityNoSuper155"}
+      , InvokeEvery(MapCreation([]), TimeInterval([]))
+      , SearchMapping("Nf22_p2___H", [])
+      , GlobalVarDeclInitInferred("f", Var("r_"))
+      , AccessControlPrincipal("Nf22_p2___H", ["Td1_y_722"])
+      , DeriveCrud("uU___Wr")
+      , AccessControlPrincipal("d2EJ_8__4N2", ["WE"])
+      , FullTextAnalyzer([], "mURRE", FullTextAnalyzerBodyDef([], TokenizerNoArgs("X9"), []))
+      , AccessControlPrincipal("j3", ["f"])
+      , GlobalVarDeclInitInferred("f", ThisCall("uU___Wr", []))
+      , TypeDef("Il", [])
+      , FullTextAnalyzer(
+          []
+        , "X9"
+        , DualFullTextAnalyzerBodyDef(
+            "index"
+          , FullTextAnalyzerBodyDef([], TokenizerNoArgs("WE"), [])
+          , "index"
+          , FullTextAnalyzerBodyDef([], Tokenizer("r_", []), [])
+          )
+        )
+      , DefinePage([], "f", [], None(), []){"DefinePage101"}
+      ]
+    )
+  , Section(
+      " ||}p pu q"
+    , [ Entity(
+          "X9"
+        , "Xqd_"
+        , [DerivedProperty(
+             "f"
+           , Ref()
+           , SimpleSort("I6HO")
+           , []
+           , ThisCall("Il", [])
+           )]
+        ){"Entity157"}
+      , Predicate("M_DYT2U_j__", [], SetCreation([]))
+      , GlobalVarDeclInitInferred("M_DYT2U_j__", Null())
+      , ExtendSessionEntity("r_", [])
+      , Enum("hAU6", [])
+      , DeriveCrud("X9")
+      , Enum("I6HO", [])
+      , GlobalVarDeclInitInferred("mURRE", ListCreation([]))
+      , DeriveWebServices("I", "I")
+      , ExtendEntity("M", []){"ExtendEntity133"}
+      , GlobalVarDeclInitInferred("mURRE", ListCreation([]))
+      , Enum("mURRE", [])
+      , ServiceFunction("X9", [], Block([]))
+      , LocalRedefine([], "Xqd_", [], "I6HO", None())
+      , ExtendSessionEntity("Il", [])
+      , RecommendConfigStaticOrder(
+          "WE"
+        , RecommendUser("j3")
+        , RecommendItem("Td1_y_722")
+        , RecommendValue("M")
+        , RecommendAlgorithm("d2EJ_8__4N2")
+        , RecommendNeighborAlg("r_")
+        , RecommendNeighborSize("WE")
+        , RecommendType("Il")
+        , RecommendSchedule("M")
+        )
+      ]
+    )
+  , Section(
+      "*'tz% pp {"
+    , [ EntityNoSuper(
+          "I"
+        , [ Function("f", [], SimpleSort("Void"), Block([])){"Function399"}
+          , Function("M_DYT2U_j__", [], SimpleSort("Void"), Block([])){"Function400"}
+          , ValidateEntity(GlobalVar("mURRE"), MapCreation([]))
+          , SearchMappingEmbedded([])
+          , SearchMappingEmbedded([])
+          , SearchMappingEmbedded([])
+          , StaticEntityFunction("M", [], ReturnType(SimpleSort("Void")), Block([]))
+          , Property("j3", Ref(), SimpleSort("X9"), [])
+          , CachedEntity()
+          , CachedEntity()
+          , ValidateEntity(False(), ListCreation([]))
+          , Function("hAU6", [], SimpleSort("Void"), Block([])){"Function401"}
+          , SearchMappingEmbedded([])
+          , DerivedPropertyNoAnno("M_DYT2U_j__", Simple(), SimpleSort("d2EJ_8__4N2"), Var("r_"))
+          ]
+        ){"EntityNoSuper153"}
+      , FullTextAnalyzer(
+          []
+        , "j82"
+        , FullTextAnalyzerBodyDef([], Tokenizer("f", []), [])
+        )
+      , TypeDef("M_DYT2U_j__", [])
+      , SearchMapping("f", [])
+      , DeriveCrud("d2EJ_8__4N2")
+      , TypeDef("mURRE", [])
+      , Action([], "I", [], Block([])){"Action188"}
+      , SearchMapping("mURRE", [])
+      , Enum("mURRE", [])
+      , Predicate("Xqd_", [], ListCreation([]))
+      , ServiceFunction("j3", [], Block([]))
+      , Predicate("Nf22_p2___H", [], Null())
+      , ExtendSessionEntity("WE", [])
+      , EntityNoSuper("r_", []){"EntityNoSuper154"}
+      , InitAction(Block([])){"InitAction168"}
+      , GlobalVarDeclInitInferred("I", GlobalVar("uU___Wr"))
+      ]
+    )
+  , Section(
+      "| p"
+    , [ Entity(
+          "M"
+        , "j3"
+        , [ ValidateEntity(True(), MapCreation([]))
+          , ExtendFunction(Function("p_06gf_m3_3", [], SimpleSort("Void"), Block([])){"Function398"})
+          , ValidateEntity(ListCreation([]), Var("p_06gf_m3_3"))
+          , StaticEntityFunction("WE", [], ReturnType(SimpleSort("Void")), Block([]))
+          ]
+        ){"Entity155"}
+      , TypeDef("r_", [])
+      , AccessControlPrincipal("uU___Wr", ["j3"])
+      , Action([], "M", [], Block([])){"Action186"}
+      , GlobalVarDeclInitInferred("uU___Wr", ThisCall("Il", []))
+      , Entity("M_DYT2U_j__", "I", []){"Entity156"}
+      , Action([], "mURRE", [], Block([])){"Action187"}
+      , DeriveCrud("WE")
+      , Enum("I6HO", [])
+      ]
+    )
+  , Section(
+      "| p"
+    , [ DefineTemplate(
+          [Template()]
+        , "t___1m"
+        , [ Arg("p_06gf_m3_3", FunctionSort([], SimpleSort("Void")))
+          , Arg("Il", RefSort(SimpleSort("M")))
+          , Arg("M", SimpleSort("I"))
+          , Arg("r_", SimpleSort("M"))
+          , Arg("X9", SimpleSort("I"))
+          , Arg("WE", SimpleSort("X9"))
+          , Arg("d2EJ_8__4N2", SimpleSort("X9"))
+          , Arg("Xqd_", SimpleSort("d2EJ_8__4N2"))
+          , Arg("M", SimpleSort("M"))
+          , Arg("X9", SimpleSort("X9"))
+          , Arg("p_06gf_m3_3", SimpleSort("X9"))
+          ]
+        , None()
+        , [ Action(
+              [ ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              , ActionModifierIgnoreValidation()
+              ]
+            , "f"
+            , [Arg("M_DYT2U_j__", SimpleSort("Il")), Arg("M_DYT2U_j__", SimpleSort("M_DYT2U_j__"))]
+            , Block([])
+            ){"Action190"}
+          , Action(
+              [ActionModifierIgnoreValidation(), ActionModifierIgnoreValidation()]
+            , "X9"
+            , [ Arg("hAU6", SimpleSort("Il"))
+              , Arg("M", SimpleSort("I6HO"))
+              , Arg("t___1m", SimpleSort("I"))
+              , Arg("WE", SimpleSort("X9"))
+              , Arg("t___1m", SimpleSort("hAU6"))
+              ]
+            , Block([])
+            ){"Action189"}
+          , Submit(ListCreation([]), ActionCall("X9", []), [])
+          , SelectFromListNoPropsNoElems(True(), SetCreation([]))
+          , SelectFromList(Null(), True(), [], [])
+          , ForAll("mURRE", SimpleSort("d2EJ_8__4N2"), None(), [], ForSeparator([]))
+          , RenderAction(Block([]))
+          , SubmitLink(True(), ActionCall("f", []), [])
+          , Derive4("M", GlobalVar("uU___Wr"), DeriveBody([]))
+          ]
+        ){"DefineTemplate57"}
+      , Enum("Il", [])
+      , ExtendSessionEntity("t___1m", [])
+      , NativeClass("j3", NativeClassAlias("Nf22_p2___H"), NativeClassSuper("M"), [])
+      ]
+    )
+  ]
+){"Application168"}
\ No newline at end of file

Added: spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/report.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/spoofax-testing-automation/Errors/Webdsl/get_inferred_type_error/report.txt	Thu Dec  6 11:26:49 2012	(r25751)
@@ -0,0 +1,669 @@
+Covered: 668/7150
+"rename-property_m_89" "__RULE_END__" "rename-property" : 5
+"declare-authenticate-function_q_223" "__STRATEGY_END__" "declare-authenticate-function" : 1
+"get-toplevel-name_d_91" "__STRATEGY_START__" "get-toplevel-name" : 10
+"declare-ac_y_225" "__STRATEGY_END__" "declare-ac" : 4
+"declare-entity-body_o_104" "__RULE_END__" "declare-entity-body" : 26
+"java-servlet-backend-option_t_10" "__STRATEGY_START__" "java-servlet-backend-option" : 7
+"get-toplevel-name_j_91" "__STRATEGY_START__" "get-toplevel-name" : 9
+"type-compatible-data_s_110" "__STRATEGY_START__" "type-compatible-data" : 22
+"strip-ref-sort-helper-2_c_33" "__RULE_END__" "strip-ref-sort-helper-2" : 187
+"built-in-template-rule-setup_c_54" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-crud_m_16" "__RULE_END__" "declare-crud" : 4
+"built-in-template-rule-setup_c_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"create-vars-for-login-tpl_v_224" "__RULE_END__" "create-vars-for-login-tpl" : 1
+"webdsl-debug-option_y_10" "__STRATEGY_START__" "webdsl-debug-option" : 5
+"declare-property_f_105" "__STRATEGY_END__" "declare-property" : 7
+"pp-type-aux_n_43" "__RULE_END__" "pp-type-aux" : 18
+"type-of_k_31" "__STRATEGY_END__" "type-of" : 2
+"eq-type-of_y_1" "__STRATEGY_START__" "eq-type-of" : 3
+"log-timed_j_34" "__STRATEGY_END__" "log-timed" : 2
+"built-in-template-rule-setup_e_54" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_e_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"clean-module-name_c_35" "__STRATEGY_START__" "clean-module-name" : 6
+"create-toplevel-name_x_34" "__STRATEGY_END__" "create-toplevel-name" : 7
+"print-stage-time_h_34" "__STRATEGY_END__" "print-stage-time" : 2
+"get-entity-def_z_38" "__STRATEGY_START__" "get-entity-def" : 10
+"emit-and-declare-logout-template_y_224" "__STRATEGY_START__" "emit-and-declare-logout-template" : 1
+"normalize-declare_p_103" "__RULE_NO_COND__" "normalize-declare" : 17
+"normalize-constructors_e_34" "__STRATEGY_START__" "normalize-constructors" : 40
+"allowed-collection-function-name_w_42" "__RULE_NO_COND__" "allowed-collection-function-name" : 13
+"built-in-template-rule-setup_k_26" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"native-type-to-webdsl-type_a_169" "__RULE_NO_COND__" "native-type-to-webdsl-type" : 63
+"is-function-cons_o_205" "__STRATEGY_START__" "is-function-cons" : 52
+"declare-entity_i_104" "__STRATEGY_END__" "declare-entity" : 4
+"declare-name-property_s_80" "__RULE_END__" "declare-name-property" : 28
+"built-in-template-rule-setup_a_54" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_a_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare_k_16" "__STRATEGY_END__" "declare" : 4
+"stage-option_f_11" "__STRATEGY_START__" "stage-option" : 6
+"type-compatible_m_183" "__STRATEGY_START__" "type-compatible" : 15
+"string-property-addition_e_117" "__STRATEGY_END__" "string-property-addition" : 9
+"declare-global-func_r_173" "__STRATEGY_START__" "declare-global-func" : 250
+"type-compatible_z_31" "__STRATEGY_START__" "type-compatible" : 15
+"newname-string-limit_g_41" "__STRATEGY_END__" "newname-string-limit" : 13
+"create-toplevel-name-no-loc_a_35" "__STRATEGY_START__" "create-toplevel-name-no-loc" : 1
+"declare_w_225" "__RULE_END__" "declare" : 7
+"emit-and-declare-session-manager_k_117" "__STRATEGY_END__" "emit-and-declare-session-manager" : 1
+"create-dirs_w_27" "__STRATEGY_START__" "create-dirs" : 2
+"formal-arguments-to-types_d_0" "__STRATEGY_END__" "formal-arguments-to-types" : 378
+"preserve-editor-origin_x_30" "__STRATEGY_START__" "preserve-editor-origin" : 293
+"prepare-type-list-for-compare_e_0" "__STRATEGY_START__" "prepare-type-list-for-compare" : 378
+"formal-arguments-to-types_c_0" "__STRATEGY_START__" "formal-arguments-to-types" : 378
+"stage_z_33" "__STRATEGY_START__" "stage" : 3
+"webdsl-verbose-option_n_13" "__STRATEGY_END__" "webdsl-verbose-option" : 1
+"declare-action_p_213" "__STRATEGY_START__" "declare-action" : 141
+"built-in-template-rule-setup_k_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"is-searchable-anno_w_9" "__STRATEGY_END__" "is-searchable-anno" : 1
+"declare-native-class_m_168" "__RULE_END__" "declare-native-class" : 4
+"extend-property-declare_w_17" "__RULE_START__" "extend-property-declare" : 33
+"built-in-template-rule-setup_k_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_n_198" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"is-searchable-anno_v_9" "__STRATEGY_START__" "is-searchable-anno" : 43
+"prepare-type-list-for-compare_f_0" "__STRATEGY_END__" "prepare-type-list-for-compare" : 378
+"built-in-template-rule-setup_k_54" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"rename-bound-immutable_n_29" "__RULE_START__" "rename-bound-immutable" : 2
+"make-human-readable_b_8" "__STRATEGY_START__" "make-human-readable" : 1
+"declare-emit-static-function_t_111" "__STRATEGY_END__" "declare-emit-static-function" : 38
+"verbose-1_p_13" "__STRATEGY_END__" "verbose-1" : 5
+"built-in-template-rule-setup_c_26" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"java-servlet-backend-option_u_10" "__STRATEGY_END__" "java-servlet-backend-option" : 1
+"eq-type-of_q_1" "__STRATEGY_START__" "eq-type-of" : 4
+"declare-ui_m_49" "__STRATEGY_START__" "declare-ui" : 135
+"declare_j_16" "__STRATEGY_START__" "declare" : 106
+"xtc-parse-webdsl-unit_f_45" "__STRATEGY_START__" "xtc-parse-webdsl-unit" : 2
+"typecheck-declare_m_34" "__STRATEGY_START__" "typecheck-declare" : 1
+"rename-action_c_200" "__RULE_START__" "rename-action" : 2
+"decapitalize-string_w_7" "__STRATEGY_END__" "decapitalize-string" : 4
+"built-in-template-rule-setup_d_22" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"make-string-compatible_p_183" "__STRATEGY_END__" "make-string-compatible" : 7
+"log-time_k_34" "__STRATEGY_START__" "log-time" : 4
+"get-extensible-functions-for-property-events_f_116" "__RULE_END__" "get-extensible-functions-for-property-events" : 32
+"built-in-template-rule-setup_a_76" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_n_185" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_w_188" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"is-namefield_d_81" "__STRATEGY_START__" "is-namefield" : 28
+"built-in-template-rule-setup_w_75" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"rename-toplevel_o_28" "__STRATEGY_START__" "rename-toplevel" : 10
+"extend-property-declare_g_42" "__RULE_START__" "extend-property-declare" : 33
+"type-compatible_q_181" "__STRATEGY_START__" "type-compatible" : 15
+"rename_w_22" "__STRATEGY_START__" "rename" : 46
+"declare-entity_n_103" "__STRATEGY_START__" "declare-entity" : 298
+"rename-ui_g_174" "__RULE_START__" "rename-ui" : 1
+"prefix-rename_i_30" "__STRATEGY_END__" "prefix-rename" : 7
+"declare-list-property_j_105" "__STRATEGY_END__" "declare-list-property" : 1
+"normalize-declare_b_105" "__RULE_NO_COND__" "normalize-declare" : 5
+"declare_z_30" "__STRATEGY_START__" "declare" : 96
+"declare-ui_k_49" "__STRATEGY_START__" "declare-ui" : 141
+"built-in-template-rule-setup_e_183" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"get-entity-def_a_39" "__STRATEGY_END__" "get-entity-def" : 1
+"pp-type-aux_u_43" "__RULE_NO_COND__" "pp-type-aux" : 1
+"after-tc-declare-hook_f_117" "__STRATEGY_START__" "after-tc-declare-hook" : 1
+"initial-declare-page-definition_p_49" "__RULE_END__" "initial-declare-page-definition" : 19
+"extend-entity-declare_j_116" "__RULE_END__" "extend-entity-declare" : 20
+"register-flush-function_p_198" "__STRATEGY_START__" "register-flush-function" : 1
+"print-stage_f_34" "__STRATEGY_END__" "print-stage" : 3
+"rename-all_r_28" "__STRATEGY_END__" "rename-all" : 14
+"typechecker-after-declare_o_34" "__STRATEGY_START__" "typechecker-after-declare" : 1
+"declare-property_h_105" "__STRATEGY_END__" "declare-property" : 18
+"type-compatible_g_1" "__STRATEGY_START__" "type-compatible" : 22
+"normalize-declare_e_104" "__RULE_NO_COND__" "normalize-declare" : 4
+"declare-override_p_16" "__STRATEGY_START__" "declare-override" : 1
+"built-in-template-rule-setup_m_187" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"extend-entity-declare_d_111" "__RULE_START__" "extend-entity-declare" : 20
+"create-toplevel-name-no-loc_b_35" "__STRATEGY_END__" "create-toplevel-name-no-loc" : 1
+"create-toplevel-name-loc_y_34" "__STRATEGY_START__" "create-toplevel-name-loc" : 7
+"rename-entity-common_j_89" "__RULE_START__" "rename-entity-common" : 1
+"rename-data_n_89" "__STRATEGY_START__" "rename-data" : 50
+"session-timeout-option_c_11" "__STRATEGY_START__" "session-timeout-option" : 6
+"built-in-template-rule-setup_f_206" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"fast-pretty-print-option_q_14" "__STRATEGY_START__" "fast-pretty-print-option" : 5
+"declare-action_f_107" "__RULE_END__" "declare-action" : 7
+"disable-pretty-print-option_x_13" "__STRATEGY_START__" "disable-pretty-print-option" : 5
+"declare-action_e_174" "__STRATEGY_START__" "declare-action" : 141
+"build-id-option_n_11" "__STRATEGY_START__" "build-id-option" : 5
+"rename_j_3" "__STRATEGY_START__" "rename" : 46
+"declare-action_b_174" "__STRATEGY_START__" "declare-action" : 141
+"credential-to-var-name_u_223" "__STRATEGY_END__" "credential-to-var-name" : 4
+"capitalize-string_q_7" "__STRATEGY_START__" "capitalize-string" : 166
+"set-default-config_o_10" "__STRATEGY_END__" "set-default-config" : 1
+"eq-type-of-action_e_193" "__STRATEGY_START__" "eq-type-of-action" : 3
+"declare-normalized_q_30" "__RULE_END__" "declare-normalized" : 28
+"built-in-template-rule-setup_c_73" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"normalize-constructor_g_34" "__RULE_NO_COND__" "normalize-constructor" : 1
+"clean-module-name_d_35" "__STRATEGY_END__" "clean-module-name" : 6
+"jrebel-option_s_17" "__STRATEGY_START__" "jrebel-option" : 5
+"built-in-template-rule-setup_d_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"rename-all_q_28" "__STRATEGY_START__" "rename-all" : 16
+"get-anno_f_28" "__STRATEGY_END__" "get-anno" : 34
+"built-in-template-rule-setup_c_76" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"try-strip-generic-sort_j_33" "__STRATEGY_END__" "try-strip-generic-sort" : 13
+"debug-print-backend-tree-option_t_16" "__STRATEGY_START__" "debug-print-backend-tree-option" : 5
+"implode-with-location-annos_c_45" "__STRATEGY_END__" "implode-with-location-annos" : 1
+"declare-in-template_n_16" "__STRATEGY_START__" "declare-in-template" : 234
+"remove-string-position-annos_n_33" "__STRATEGY_START__" "remove-string-position-annos" : 1
+"load-entity-function-declare_s_108" "__STRATEGY_END__" "load-entity-function-declare" : 20
+"pp-type_k_43" "__RULE_START__" "pp-type" : 20
+"import-modules-from-application_b_38" "__RULE_END__" "import-modules-from-application" : 1
+"declare-action_z_173" "__STRATEGY_START__" "declare-action" : 141
+"set-default-config_n_10" "__STRATEGY_START__" "set-default-config" : 1
+"extract-entity-id_n_82" "__STRATEGY_START__" "extract-entity-id" : 27
+"built-in-template-rule-setup_q_183" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"get-toplevel-name_j_108" "__STRATEGY_START__" "get-toplevel-name" : 9
+"disable-typecheck-option_c_15" "__STRATEGY_START__" "disable-typecheck-option" : 5
+"xtc-parse-webdsl-unit_g_45" "__STRATEGY_END__" "xtc-parse-webdsl-unit" : 2
+"make-human-readable_c_8" "__STRATEGY_END__" "make-human-readable" : 1
+"declare-crud_l_16" "__RULE_START__" "declare-crud" : 4
+"import-extra-modules-hook_u_4" "__STRATEGY_START__" "import-extra-modules-hook" : 1
+"extend-property-declare_c_116" "__STRATEGY_START__" "extend-property-declare" : 33
+"declare-native_c_168" "__STRATEGY_END__" "declare-native" : 4
+"pp-types_i_43" "__STRATEGY_START__" "pp-types" : 25
+"declare-all_l_30" "__STRATEGY_START__" "declare-all" : 24
+"normalize-declare_d_105" "__RULE_NO_COND__" "normalize-declare" : 13
+"with-origin_r_30" "__STRATEGY_START__" "with-origin" : 293
+"type-compatible_w_190" "__STRATEGY_START__" "type-compatible" : 13
+"get-toplevel-name_n_108" "__STRATEGY_END__" "get-toplevel-name" : 2
+"parse-and-write-cache_h_45" "__STRATEGY_START__" "parse-and-write-cache" : 1
+"extend-entity-declare_n_19" "__RULE_END__" "extend-entity-declare" : 20
+"extends-builtin_d_183" "__RULE_NO_COND__" "extends-builtin" : 14
+"create-prop-required-rule_y_104" "__STRATEGY_START__" "create-prop-required-rule" : 33
+"Extends_h_168" "__STRATEGY_START__" "Extends" : 30
+"built-in-template-rule-setup_g_118" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-no-overloading_a_106" "__STRATEGY_START__" "declare-no-overloading" : 54
+"rename_i_0" "__STRATEGY_START__" "rename" : 51
+"in-def-rename-scope_i_29" "__STRATEGY_END__" "in-def-rename-scope" : 1
+"strip-ref-sort_y_32" "__STRATEGY_START__" "strip-ref-sort" : 187
+"declare-entity_r_103" "__STRATEGY_END__" "declare-entity" : 17
+"declare-built-in-template-rules_s_54" "__RULE_START__" "declare-built-in-template-rules" : 64
+"emit-webdsl-code-no-declare_e_37" "__STRATEGY_END__" "emit-webdsl-code-no-declare" : 61
+"rename-action_u_198" "__RULE_START__" "rename-action" : 1
+"built-in-template-rule-setup_o_187" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_r_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"in-def-rename-scope_h_29" "__STRATEGY_START__" "in-def-rename-scope" : 1
+"built-in-template-rule-setup_y_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"is-searchmapping-cons_x_9" "__STRATEGY_START__" "is-searchmapping-cons" : 55
+"built-in-template-rule-setup_y_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-ac-principal_a_226" "__RULE_END__" "declare-ac-principal" : 4
+"string-property-addition_d_117" "__STRATEGY_START__" "string-property-addition" : 47
+"get-internal-validate-func-name-int_q_27" "__STRATEGY_START__" "get-internal-validate-func-name-int" : 33
+"eq-type-of_y_111" "__RULE_START__" "eq-type-of" : 2
+"xtc-parse-webdsl-module_d_45" "__STRATEGY_START__" "xtc-parse-webdsl-module" : 1
+"built-in-template-rule-setup_q_75" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_t_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"try-strip-generic-sort_i_33" "__STRATEGY_START__" "try-strip-generic-sort" : 13
+"is-function-cons_p_205" "__STRATEGY_END__" "is-function-cons" : 2
+"strip-ref-sort-helper-1_a_33" "__RULE_NO_COND__" "strip-ref-sort-helper-1" : 2
+"get-property-def_g_39" "__STRATEGY_END__" "get-property-def" : 55
+"get-internal-validate-func-name-int_r_27" "__STRATEGY_END__" "get-internal-validate-func-name-int" : 33
+"pp-type-aux_m_43" "__RULE_START__" "pp-type-aux" : 19
+"declare-search_k_119" "__RULE_START__" "declare-search" : 3
+"newname-webdsl_i_41" "__STRATEGY_END__" "newname-webdsl" : 13
+"declare-type-def_l_84" "__RULE_END__" "declare-type-def" : 4
+"register-reserved-function_s_195" "__RULE_START__" "register-reserved-function" : 105
+"built-in-template-rule-setup_u_75" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"all-entity-properties-tuples_v_93" "__STRATEGY_END__" "all-entity-properties-tuples" : 1
+"declare-function_y_172" "__STRATEGY_START__" "declare-function" : 220
+"rename_m_1" "__STRATEGY_START__" "rename" : 50
+"declare-no-overloading_b_106" "__STRATEGY_END__" "declare-no-overloading" : 54
+"normalize-declare_u_225" "__RULE_NO_COND__" "normalize-declare" : 7
+"is-namefield_b_81" "__STRATEGY_START__" "is-namefield" : 28
+"strip-all-annos_i_29" "__STRATEGY_END__" "strip-all-annos" : 380
+"set-appname-and-dirs_f_10" "__STRATEGY_END__" "set-appname-and-dirs" : 1
+"parse-and-write-cache_i_45" "__STRATEGY_END__" "parse-and-write-cache" : 1
+"rename_c_2" "__STRATEGY_START__" "rename" : 47
+"declare-enum_h_17" "__RULE_END__" "declare-enum" : 6
+"declare-extend-entity_j_104" "__RULE_START__" "declare-extend-entity" : 4
+"rename_c_0" "__STRATEGY_START__" "rename" : 51
+"is-ref-type_v_28" "__STRATEGY_START__" "is-ref-type" : 17
+"built-in-template-rule-setup_n_117" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"rename-bound-immutable_o_29" "__RULE_END__" "rename-bound-immutable" : 2
+"built-in-template-rule-setup_z_28" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"typecheck-init_l_34" "__STRATEGY_END__" "typecheck-init" : 1
+"eq-type-of_z_111" "__RULE_END__" "eq-type-of" : 2
+"rename-bound_m_29" "__RULE_END__" "rename-bound" : 2
+"get-ac-principal-type_c_226" "__STRATEGY_END__" "get-ac-principal-type" : 1
+"create-inputs-for-login-tpl_x_224" "__RULE_END__" "create-inputs-for-login-tpl" : 1
+"farg-to-type_q_0" "__STRATEGY_END__" "farg-to-type" : 34
+"type-of-property_r_105" "__STRATEGY_START__" "type-of-property" : 2
+"declare-search_n_119" "__RULE_END__" "declare-search" : 3
+"declare-entity_q_103" "__STRATEGY_START__" "declare-entity" : 278
+"get-extensible-functions-for-entity-events_o_115" "__RULE_START__" "get-extensible-functions-for-entity-events" : 20
+"built-in-template-rule-setup_y_75" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-login_n_223" "__STRATEGY_START__" "declare-login" : 1
+"mark-access-control-enabled_w_0" "__STRATEGY_END__" "mark-access-control-enabled" : 4
+"create-farg-for-login-fun_r_223" "__RULE_START__" "create-farg-for-login-fun" : 1
+"declare-page-definition_x_49" "__STRATEGY_END__" "declare-page-definition" : 19
+"eq-type-of_k_2" "__STRATEGY_START__" "eq-type-of" : 3
+"built-in-template-rule-setup_q_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"preserve-editor-origin_y_30" "__STRATEGY_END__" "preserve-editor-origin" : 291
+"extract-function-sig_b_206" "__STRATEGY_START__" "extract-function-sig" : 54
+"rename-bound-rules_v_29" "__STRATEGY_START__" "rename-bound-rules" : 2
+"new-function-name_s_0" "__RULE_END__" "new-function-name" : 25
+"mark-access-control-enabled_v_0" "__STRATEGY_START__" "mark-access-control-enabled" : 4
+"type-of_k_1" "__STRATEGY_START__" "type-of" : 4
+"declare-extend-entity_m_104" "__RULE_END__" "declare-extend-entity" : 6
+"common-declare-template-rules_q_50" "__RULE_START__" "common-declare-template-rules" : 25
+"built-in-template-rule-setup_u_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-email-definition_i_23" "__STRATEGY_START__" "declare-email-definition" : 96
+"normalize-constructor_h_34" "__RULE_NO_COND__" "normalize-constructor" : 1
+"declare-exception-type_n_26" "__STRATEGY_END__" "declare-exception-type" : 1
+"declare-entity-body_n_104" "__RULE_START__" "declare-entity-body" : 26
+"newname-deterministic_n_41" "__RULE_END__" "newname-deterministic" : 28
+"xtc-parse-webdsl_a_45" "__STRATEGY_END__" "xtc-parse-webdsl" : 1
+"split-entity-body_h_110" "__RULE_END__" "split-entity-body" : 26
+"query-optimization-option_x_16" "__STRATEGY_START__" "query-optimization-option" : 5
+"built-in-template-rule-setup_s_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-static-function_f_112" "__STRATEGY_START__" "declare-static-function" : 22
+"built-in-template-rule-setup_t_108" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"subtype-of_b_32" "__STRATEGY_START__" "subtype-of" : 15
+"declare-override_l_223" "__STRATEGY_START__" "declare-override" : 1
+"built-in-template-rule-setup_q_20" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_q_21" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"prevent-strategy-removal_d_29" "__STRATEGY_START__" "prevent-strategy-removal" : 1
+"map-toplevel_i_35" "__STRATEGY_START__" "map-toplevel" : 1
+"is-searchmapping-cons_y_9" "__STRATEGY_END__" "is-searchmapping-cons" : 8
+"eq-type-of-ui_t_74" "__STRATEGY_START__" "eq-type-of-ui" : 3
+"rename_q_2" "__STRATEGY_START__" "rename" : 46
+"static-function-name_p_111" "__RULE_NO_COND__" "static-function-name" : 105
+"register-get-string-function_i_76" "__STRATEGY_START__" "register-get-string-function" : 6
+"rename_q_0" "__STRATEGY_START__" "rename" : 51
+"built-in-template-rule-setup_u_25" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"with-toplevel-name_g_35" "__STRATEGY_START__" "with-toplevel-name" : 10
+"declare_c_17" "__STRATEGY_END__" "declare" : 6
+"extend-entity-declare_i_116" "__RULE_START__" "extend-entity-declare" : 20
+"type-compatible_a_191" "__STRATEGY_START__" "type-compatible" : 13
+"built-in-template-rule-setup_m_116" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-name-property_r_80" "__RULE_START__" "declare-name-property" : 33
+"extends-check_f_32" "__STRATEGY_START__" "extends-check" : 28
+"register-get-list-string-1-function_r_76" "__STRATEGY_START__" "register-get-list-string-1-function" : 1
+"extend-session-entity-declare_l_117" "__STRATEGY_START__" "extend-session-entity-declare" : 4
+"store-property-annos_q_89" "__RULE_START__" "store-property-annos" : 5
+"built-in-template-rule-setup_w_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"entity-prop-to-type_v_223" "__RULE_START__" "entity-prop-to-type" : 2
+"Extends_j_168" "__STRATEGY_START__" "Extends" : 30
+"built-in-template-rule-setup_w_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-extend-entity_k_104" "__RULE_END__" "declare-extend-entity" : 4
+"extends-check_h_32" "__STRATEGY_START__" "extends-check" : 28
+"handle-entity-id_j_82" "__RULE_START__" "handle-entity-id" : 20
+"declare-static-function_q_111" "__STRATEGY_START__" "declare-static-function" : 67
+"get-webdsl-parse-table_o_45" "__STRATEGY_START__" "get-webdsl-parse-table" : 2
+"IsEntity_p_98" "__STRATEGY_END__" "IsEntity" : 2
+"extend-entity-declare_q_108" "__RULE_END__" "extend-entity-declare" : 20
+"emit-and-declare-logout-template_z_224" "__STRATEGY_END__" "emit-and-declare-logout-template" : 1
+"import-modules_y_37" "__STRATEGY_END__" "import-modules" : 1
+"built-in-template-rule-setup_s_75" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"with-toplevel-name_f_35" "__STRATEGY_END__" "with-toplevel-name" : 9
+"rename-bound-rules_w_29" "__STRATEGY_END__" "rename-bound-rules" : 2
+"with-toplevel-name_e_35" "__STRATEGY_START__" "with-toplevel-name" : 10
+"pp-type_l_43" "__RULE_END__" "pp-type" : 20
+"decapitalize-string_t_7" "__STRATEGY_START__" "decapitalize-string" : 4
+"declare_b_17" "__STRATEGY_START__" "declare" : 102
+"get-toplevel-name_y_196" "__STRATEGY_START__" "get-toplevel-name" : 7
+"declare-inverse-property_j_112" "__RULE_START__" "declare-inverse-property" : 33
+"eq-type-of-ui_r_74" "__STRATEGY_START__" "eq-type-of-ui" : 3
+"import-modules_w_37" "__STRATEGY_START__" "import-modules" : 1
+"declare-native-class-static-functions_v_168" "__STRATEGY_END__" "declare-native-class-static-functions" : 5
+"type-compatible_a_184" "__STRATEGY_START__" "type-compatible" : 13
+"all-entity-properties-tuples_n_93" "__STRATEGY_START__" "all-entity-properties-tuples" : 1
+"built-in-template-rule-setup_i_118" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"emit-and-declare-session-manager_j_117" "__STRATEGY_START__" "emit-and-declare-session-manager" : 1
+"extract-entity-id_o_82" "__STRATEGY_END__" "extract-entity-id" : 9
+"all-entity-properties-tuples_q_94" "__RULE_START__" "all-entity-properties-tuples" : 2
+"pp-type-aux_o_43" "__RULE_NO_COND__" "pp-type-aux" : 1
+"declare-data_s_90" "__STRATEGY_START__" "declare-data" : 298
+"empty-entity-function-declare_k_116" "__STRATEGY_START__" "empty-entity-function-declare" : 20
+"built-in-template-rule-setup_m_54" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_m_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-property_e_105" "__STRATEGY_START__" "declare-property" : 25
+"built-in-template-rule-setup_m_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"empty-entity-function-declare_l_116" "__STRATEGY_END__" "empty-entity-function-declare" : 20
+"webdsl-version-option_h_16" "__STRATEGY_START__" "webdsl-version-option" : 5
+"request-log-entities_q_27" "__STRATEGY_END__" "request-log-entities" : 1
+"normalize-native-constructor_p_168" "__RULE_START__" "normalize-native-constructor" : 3
+"handle-entity-id_k_82" "__RULE_END__" "handle-entity-id" : 20
+"farg-to-type_p_0" "__STRATEGY_START__" "farg-to-type" : 34
+"toplevel-rename_k_30" "__STRATEGY_END__" "toplevel-rename" : 2
+"log-time_l_34" "__STRATEGY_END__" "log-time" : 3
+"entity-declare-id-property_m_82" "__RULE_END__" "entity-declare-id-property" : 20
+"normalize-declare_b_169" "__RULE_START__" "normalize-declare" : 168
+"initial-declare-page-definition_o_49" "__RULE_START__" "initial-declare-page-definition" : 19
+"declare-emit-static-function_s_111" "__STRATEGY_START__" "declare-emit-static-function" : 38
+"webdsl-statistics-option_w_14" "__STRATEGY_START__" "webdsl-statistics-option" : 5
+"implode-with-location-annos_b_45" "__STRATEGY_START__" "implode-with-location-annos" : 1
+"rename_x_0" "__STRATEGY_END__" "rename" : 1
+"rename_w_0" "__STRATEGY_START__" "rename" : 51
+"declare-data_u_90" "__STRATEGY_END__" "declare-data" : 41
+"eq-type-of-this-call-global_u_177" "__RULE_START__" "eq-type-of-this-call-global" : 1
+"extend-entity-declare-body_c_117" "__STRATEGY_END__" "extend-entity-declare-body" : 9
+"newname-deterministic_l_41" "__RULE_NO_COND__" "newname-deterministic" : 13
+"declare-static-function_r_111" "__STRATEGY_END__" "declare-static-function" : 67
+"built-in-template-rule-setup_w_25" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"index-dir-option_v_16" "__STRATEGY_START__" "index-dir-option" : 5
+"new-function-name_r_0" "__RULE_START__" "new-function-name" : 25
+"rename_y_2" "__STRATEGY_START__" "rename" : 46
+"rename-toplevel_p_28" "__STRATEGY_END__" "rename-toplevel" : 9
+"create-dirs_x_27" "__STRATEGY_END__" "create-dirs" : 2
+"declare_i_22" "__STRATEGY_START__" "declare" : 96
+"get-webdsl-version_l_16" "__STRATEGY_END__" "get-webdsl-version" : 2
+"emit-and-declare-body-template_s_16" "__STRATEGY_END__" "emit-and-declare-body-template" : 1
+"native-type-to-webdsl-type_z_168" "__RULE_NO_COND__" "native-type-to-webdsl-type" : 708
+"webdsl-verbose-option_m_13" "__STRATEGY_START__" "webdsl-verbose-option" : 6
+"with-origin_w_30" "__STRATEGY_END__" "with-origin" : 291
+"declare-native_b_168" "__STRATEGY_START__" "declare-native" : 110
+"declare-native-class-func_e_169" "__RULE_START__" "declare-native-class-func" : 168
+"webdslc-options_p_10" "__STRATEGY_START__" "webdslc-options" : 7
+"extend-property-declare_p_80" "__STRATEGY_START__" "extend-property-declare" : 33
+"built-in-template-rule-setup_b_22" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"type-compatible_l_191" "__STRATEGY_START__" "type-compatible" : 13
+"built-in-template-rule-setup_x_61" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-override_b_31" "__STRATEGY_START__" "declare-override" : 1
+"declare-all-override_o_30" "__STRATEGY_END__" "declare-all-override" : 1
+"get-internal-validate-func-name_u_27" "__STRATEGY_START__" "get-internal-validate-func-name" : 33
+"declare-function_c_173" "__STRATEGY_START__" "declare-function" : 220
+"remove-string-position-anno_q_33" "__STRATEGY_END__" "remove-string-position-anno" : 186
+"emit-and-declare-main-template_t_16" "__STRATEGY_START__" "emit-and-declare-main-template" : 1
+"extend-entity-declare_l_115" "__STRATEGY_START__" "extend-entity-declare" : 20
+"after-tc-declare-hook_k_27" "__STRATEGY_START__" "after-tc-declare-hook" : 1
+"declare-global-func_v_173" "__STRATEGY_START__" "declare-global-func" : 142
+"with-toplevel-name_h_35" "__STRATEGY_END__" "with-toplevel-name" : 9
+"declare-logout-function_j_224" "__STRATEGY_END__" "declare-logout-function" : 1
+"register-reserved-function_t_195" "__RULE_END__" "register-reserved-function" : 105
+"built-in-template-rule-setup_i_17" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"with-origin_s_30" "__STRATEGY_END__" "with-origin" : 291
+"declare-exception-type_m_26" "__STRATEGY_START__" "declare-exception-type" : 1
+"replace-special-chars-func-name_u_0" "__STRATEGY_END__" "replace-special-chars-func-name" : 25
+"normalize-declare_f_17" "__RULE_NO_COND__" "normalize-declare" : 6
+"after-tc-declare-hook_y_119" "__STRATEGY_START__" "after-tc-declare-hook" : 1
+"emit-webdsl-code_c_37" "__STRATEGY_END__" "emit-webdsl-code" : 23
+"built-in-template-rule-setup_h_206" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-search-functions_x_12" "__RULE_START__" "declare-search-functions" : 12
+"python-backend-option_r_10" "__STRATEGY_START__" "python-backend-option" : 7
+"declare_s_0" "__STRATEGY_START__" "declare" : 302
+"Extends_k_103" "__RULE_END__" "Extends" : 2
+"declare-extend-entity_l_104" "__RULE_START__" "declare-extend-entity" : 6
+"newname-i_k_41" "__RULE_END__" "newname-i" : 13
+"normalize-declare_c_169" "__RULE_END__" "normalize-declare" : 168
+"rename_n_1" "__STRATEGY_END__" "rename" : 2
+"newname-string-limit_f_41" "__STRATEGY_START__" "newname-string-limit" : 13
+"get-toplevel-name_o_51" "__STRATEGY_START__" "get-toplevel-name" : 10
+"crud-page-names_w_16" "__RULE_END__" "crud-page-names" : 4
+"get-property-type_v_34" "__RULE_NO_COND__" "get-property-type" : 18
+"Extends_l_101" "__RULE_START__" "Extends" : 32
+"type-of-binop_g_193" "__RULE_START__" "type-of-binop" : 1
+"eq-type-of-action_s_177" "__STRATEGY_START__" "eq-type-of-action" : 4
+"extend-set-default-config_i_10" "__STRATEGY_START__" "extend-set-default-config" : 1
+"declare-search_l_119" "__RULE_END__" "declare-search" : 3
+"TypeOfProperty_u_104" "__STRATEGY_START__" "TypeOfProperty" : 2
+"already-imported_f_38" "__RULE_START__" "already-imported" : 1
+"entity-prop-to-type_w_223" "__RULE_END__" "entity-prop-to-type" : 2
+"built-in-template-rule-setup_x_40" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare_s_1" "__STRATEGY_START__" "declare" : 251
+"get-extensible-functions-for-property-events_g_116" "__RULE_START__" "get-extensible-functions-for-property-events" : 1
+"create-farg-for-login-fun_s_223" "__RULE_END__" "create-farg-for-login-fun" : 1
+"emit-and-declare-body-template_r_16" "__STRATEGY_START__" "emit-and-declare-body-template" : 1
+"declare-data_a_91" "__STRATEGY_END__" "declare-data" : 6
+"rename-ac_k_225" "__STRATEGY_START__" "rename-ac" : 51
+"emit-webdsl-code_b_37" "__STRATEGY_START__" "emit-webdsl-code" : 23
+"emit-and-declare-authentication-template_a_225" "__STRATEGY_START__" "emit-and-declare-authentication-template" : 1
+"normalize-declare_a_112" "__RULE_NO_COND__" "normalize-declare" : 22
+"newname-webdsl_h_41" "__STRATEGY_START__" "newname-webdsl" : 13
+"get-property-kind_e_38" "__RULE_NO_COND__" "get-property-kind" : 33
+"print-stage-time_g_34" "__STRATEGY_START__" "print-stage-time" : 2
+"setup-adderror-for-random-testing_v_241" "__STRATEGY_START__" "setup-adderror-for-random-testing" : 1
+"declare-toplevel-template-definition_c_50" "__STRATEGY_START__" "declare-toplevel-template-definition" : 6
+"declare_c_118" "__STRATEGY_START__" "declare" : 90
+"normalize-native-constructor_q_168" "__RULE_END__" "normalize-native-constructor" : 3
+"register-get-string-1-function_o_76" "__STRATEGY_START__" "register-get-string-1-function" : 1
+"normalize-declare_a_105" "__RULE_NO_COND__" "normalize-declare" : 7
+"declare_u_2" "__STRATEGY_START__" "declare" : 116
+"simplify-functionsort_g_0" "__RULE_NO_COND__" "simplify-functionsort" : 2
+"set-appname-and-dirs_e_10" "__STRATEGY_START__" "set-appname-and-dirs" : 1
+"in-typechecking-phase_i_34" "__STRATEGY_START__" "in-typechecking-phase" : 1
+"declare-built-in-template-rules_t_54" "__RULE_END__" "declare-built-in-template-rules" : 64
+"declare_c_1" "__STRATEGY_START__" "declare" : 298
+"import-module_h_38" "__RULE_START__" "import-module" : 1
+"built-in-template-rule-setup_f_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare_c_3" "__STRATEGY_START__" "declare" : 110
+"IsEntity_m_98" "__STRATEGY_START__" "IsEntity" : 2
+"declare-enum_g_17" "__RULE_START__" "declare-enum" : 6
+"rename_l_10" "__STRATEGY_START__" "rename" : 46
+"webdsl-verbose-option_g_10" "__STRATEGY_START__" "webdsl-verbose-option" : 6
+"declare-entity_o_103" "__STRATEGY_END__" "declare-entity" : 20
+"crud-page-names_v_16" "__RULE_START__" "crud-page-names" : 4
+"extend-property-declare_q_83" "__STRATEGY_START__" "extend-property-declare" : 33
+"all-entity-properties-tuples_k_95" "__RULE_START__" "all-entity-properties-tuples" : 2
+"rename-data_v_86" "__RULE_START__" "rename-data" : 1
+"import-modules-from-application_a_38" "__RULE_START__" "import-modules-from-application" : 1
+"webdsl-compile-built-ins-option_n_12" "__STRATEGY_START__" "webdsl-compile-built-ins-option" : 5
+"declare-ui_l_49" "__STRATEGY_END__" "declare-ui" : 6
+"declare-property_g_105" "__STRATEGY_START__" "declare-property" : 18
+"only-typecheck-option_j_15" "__STRATEGY_START__" "only-typecheck-option" : 5
+"built-in-template-rule-setup_i_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-native-search-query-class_j_120" "__RULE_START__" "declare-native-search-query-class" : 3
+"dsl-to-core-analysis_m_241" "__STRATEGY_START__" "dsl-to-core-analysis" : 1
+"built-in-template-rule-setup_i_54" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare_d_3" "__STRATEGY_END__" "declare" : 4
+"declare_d_1" "__STRATEGY_END__" "declare" : 47
+"declare_e_2" "__STRATEGY_START__" "declare" : 141
+"declare-property_w_104" "__STRATEGY_START__" "declare-property" : 58
+"is-compile-units-cache-enabled_x_12" "__STRATEGY_START__" "is-compile-units-cache-enabled" : 1
+"built-in-template-rule-setup_t_186" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"get-toplevel-name_z_233" "__STRATEGY_START__" "get-toplevel-name" : 7
+"strip-ref-sort-helper-2_b_33" "__RULE_START__" "strip-ref-sort-helper-2" : 187
+"extends-check_i_32" "__STRATEGY_END__" "extends-check" : 14
+"toplevel-rename_j_30" "__STRATEGY_START__" "toplevel-rename" : 2
+"replace-special-chars-func-name_t_0" "__STRATEGY_START__" "replace-special-chars-func-name" : 25
+"built-in-template-rule-setup_l_21" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare_g_0" "__STRATEGY_START__" "declare" : 302
+"declare-authenticate-function_p_223" "__STRATEGY_START__" "declare-authenticate-function" : 1
+"get-extensible-functions-for-property-events_h_116" "__RULE_END__" "get-extensible-functions-for-property-events" : 1
+"declare-native-search-query-class_k_120" "__RULE_END__" "declare-native-search-query-class" : 3
+"declare_f_2" "__STRATEGY_END__" "declare" : 25
+"declare-toplevel-template-definition_d_50" "__STRATEGY_END__" "declare-toplevel-template-definition" : 6
+"built-in-template-rule-setup_i_62" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"check-for-ambiguities_r_45" "__STRATEGY_END__" "check-for-ambiguities" : 2
+"pp-args_x_43" "__STRATEGY_END__" "pp-args" : 1
+"all-entity-properties-tuples_r_95" "__RULE_END__" "all-entity-properties-tuples" : 2
+"normalize-signature_b_0" "__STRATEGY_END__" "normalize-signature" : 378
+"is-access-control-enabled_x_0" "__STRATEGY_START__" "is-access-control-enabled" : 1
+"is-access-control-enabled_y_0" "__STRATEGY_END__" "is-access-control-enabled" : 1
+"get-extend-entity-def_b_39" "__STRATEGY_START__" "get-extend-entity-def" : 9
+"initial-declare-template-definition_r_49" "__RULE_END__" "initial-declare-template-definition" : 6
+"built-in-template-rule-setup_o_118" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_z_61" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_o_116" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-all-override_n_30" "__STRATEGY_START__" "declare-all-override" : 1
+"typecheck-init_k_34" "__STRATEGY_START__" "typecheck-init" : 1
+"declare-native-class-static-functions_u_168" "__STRATEGY_START__" "declare-native-class-static-functions" : 5
+"is-function-cons_k_205" "__STRATEGY_START__" "is-function-cons" : 52
+"print-stage_e_34" "__STRATEGY_START__" "print-stage" : 3
+"trim-initial-dots-slashes_o_9" "__STRATEGY_END__" "trim-initial-dots-slashes" : 2
+"emit-and-declare-login-template_t_224" "__STRATEGY_END__" "emit-and-declare-login-template" : 1
+"has-searchable-anno_t_9" "__STRATEGY_START__" "has-searchable-anno" : 40
+"has-searchable-anno_u_9" "__STRATEGY_END__" "has-searchable-anno" : 1
+"built-in-template-rule-setup_k_187" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_f_76" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"pp-args_w_43" "__STRATEGY_START__" "pp-args" : 1
+"create-toplevel-name-loc_z_34" "__STRATEGY_END__" "create-toplevel-name-loc" : 6
+"get-toplevel-name_g_91" "__STRATEGY_END__" "get-toplevel-name" : 1
+"get-property-def_f_39" "__STRATEGY_START__" "get-property-def" : 159
+"declare-action_x_173" "__STRATEGY_START__" "declare-action" : 142
+"remove-string-position-anno_p_33" "__STRATEGY_START__" "remove-string-position-anno" : 523
+"put-closure-in-anno_x_201" "__RULE_END__" "put-closure-in-anno" : 1
+"dsl-to-core_k_241" "__STRATEGY_START__" "dsl-to-core" : 1
+"debug-print-source-tree-option_m_16" "__STRATEGY_START__" "debug-print-source-tree-option" : 5
+"built-in-template-rule-setup_b_182" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"log-timed_i_34" "__STRATEGY_START__" "log-timed" : 3
+"declare-property_x_104" "__STRATEGY_END__" "declare-property" : 33
+"typechecker-after-declare_p_34" "__STRATEGY_END__" "typechecker-after-declare" : 1
+"declare-ui_n_49" "__STRATEGY_END__" "declare-ui" : 19
+"eq-type-of-action_v_191" "__RULE_NO_COND__" "eq-type-of-action" : 3
+"declare_v_2" "__STRATEGY_END__" "declare" : 6
+"is-property-cons_e_39" "__STRATEGY_END__" "is-property-cons" : 55
+"emit-webdsl-code-no-rename_f_37" "__STRATEGY_START__" "emit-webdsl-code-no-rename" : 61
+"normalize-constructors_f_34" "__STRATEGY_END__" "normalize-constructors" : 40
+"declare_v_225" "__RULE_START__" "declare" : 7
+"is-custom-compile-units-enabled_r_12" "__STRATEGY_START__" "is-custom-compile-units-enabled" : 1
+"rename-action_d_200" "__RULE_END__" "rename-action" : 1
+"type-compatible_w_31" "__STRATEGY_END__" "type-compatible" : 7
+"declare-vars-in-entity-context_c_30" "__STRATEGY_END__" "declare-vars-in-entity-context" : 7
+"declare-entity_g_104" "__STRATEGY_START__" "declare-entity" : 261
+"rename-bound_l_29" "__RULE_START__" "rename-bound" : 2
+"get-toplevel-name_u_34" "__STRATEGY_START__" "get-toplevel-name" : 10
+"type-compatible_x_31" "__STRATEGY_START__" "type-compatible" : 15
+"type-compatible_n_191" "__STRATEGY_START__" "type-compatible" : 13
+"create-toplevel-name_w_34" "__STRATEGY_START__" "create-toplevel-name" : 7
+"add-anno_y_27" "__RULE_START__" "add-anno" : 40
+"webdslc-main_a_0" "__STRATEGY_START__" "webdslc-main" : 1
+"rename_j_29" "__STRATEGY_START__" "rename" : 46
+"emit-webdsl-code-no-declare_d_37" "__STRATEGY_START__" "emit-webdsl-code-no-declare" : 61
+"make-human-readable-internal_e_8" "__RULE_END__" "make-human-readable-internal" : 2
+"entity-declare-id-property_l_82" "__RULE_START__" "entity-declare-id-property" : 20
+"declare-override_v_12" "__STRATEGY_START__" "declare-override" : 1
+"prevent-strategy-removal_e_29" "__STRATEGY_END__" "prevent-strategy-removal" : 1
+"type-of_j_31" "__STRATEGY_START__" "type-of" : 4
+"built-in-template-rule-setup_v_108" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"rename-data_h_87" "__RULE_END__" "rename-data" : 1
+"declare-ac-principal_z_225" "__RULE_START__" "declare-ac-principal" : 4
+"make-human-readable-internal_k_8" "__RULE_NO_COND__" "make-human-readable-internal" : 1
+"declare-function_e_112" "__RULE_END__" "declare-function" : 22
+"make-human-readable-internal_d_8" "__RULE_START__" "make-human-readable-internal" : 2
+"webdsl-test-option_e_13" "__STRATEGY_START__" "webdsl-test-option" : 5
+"declare_z_4" "__STRATEGY_START__" "declare" : 106
+"get-inferred-type_i_107" "__RULE_START__" "get-inferred-type" : 1
+"strip-all-annos_h_29" "__STRATEGY_START__" "strip-all-annos" : 380
+"extends-check_j_32" "__STRATEGY_START__" "extends-check" : 14
+"get-webdsl-version_k_16" "__STRATEGY_START__" "get-webdsl-version" : 2
+"declare-data_x_90" "__STRATEGY_START__" "declare-data" : 257
+"pp-types_j_43" "__STRATEGY_END__" "pp-types" : 25
+"declare_x_83" "__STRATEGY_START__" "declare" : 96
+"newname-i_j_41" "__RULE_START__" "newname-i" : 13
+"eq-type-of_w_2" "__STRATEGY_START__" "eq-type-of" : 3
+"declare-logout-function_i_224" "__STRATEGY_START__" "declare-logout-function" : 1
+"split-entity-body_g_110" "__RULE_START__" "split-entity-body" : 26
+"built-in-template-rule-setup_g_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-action_d_107" "__RULE_START__" "declare-action" : 7
+"register-get-bool-function_l_76" "__STRATEGY_START__" "register-get-bool-function" : 1
+"type-compatible_o_181" "__STRATEGY_START__" "type-compatible" : 15
+"get-extensible-functions-for-entity-events_p_115" "__RULE_END__" "get-extensible-functions-for-entity-events" : 20
+"extend-property-declare_h_112" "__STRATEGY_START__" "extend-property-declare" : 33
+"trim-initial-dots-slashes_n_9" "__STRATEGY_START__" "trim-initial-dots-slashes" : 2
+"common-declare-template-rules_r_50" "__RULE_END__" "common-declare-template-rules" : 25
+"type-compatible_c_191" "__STRATEGY_START__" "type-compatible" : 13
+"get-toplevel-name_a_118" "__STRATEGY_START__" "get-toplevel-name" : 7
+"stage_a_34" "__STRATEGY_END__" "stage" : 2
+"built-in-template-rule-setup_g_21" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-native-class-func_f_169" "__RULE_END__" "declare-native-class-func" : 168
+"normalize-signature_a_0" "__STRATEGY_START__" "normalize-signature" : 378
+"emit-and-declare-login-template_s_224" "__STRATEGY_START__" "emit-and-declare-login-template" : 1
+"built-in-template-rule-setup_o_54" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-vars-in-entity-context_b_30" "__STRATEGY_START__" "declare-vars-in-entity-context" : 7
+"built-in-template-rule-setup_o_52" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"built-in-template-rule-setup_o_53" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"load-entity-function-declare_r_108" "__STRATEGY_START__" "load-entity-function-declare" : 20
+"create-tuple-with-entity-prop_t_95" "__RULE_NO_COND__" "create-tuple-with-entity-prop" : 5
+"webdslc-options_q_10" "__STRATEGY_END__" "webdslc-options" : 2
+"xtc-parse-webdsl-module_e_45" "__STRATEGY_END__" "xtc-parse-webdsl-module" : 1
+"eq-type-of-action_g_192" "__STRATEGY_START__" "eq-type-of-action" : 3
+"webdsl-custom-compile-units-option_p_12" "__STRATEGY_START__" "webdsl-custom-compile-units-option" : 5
+"declare-action_j_173" "__STRATEGY_START__" "declare-action" : 247
+"built-in-template-rule-setup_v_61" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"emit-and-declare-dummy-entity_f_120" "__STRATEGY_START__" "emit-and-declare-dummy-entity" : 1
+"declare-page-definition_w_49" "__STRATEGY_START__" "declare-page-definition" : 19
+"declare-type-def_i_84" "__RULE_START__" "declare-type-def" : 4
+"declare_g_84" "__STRATEGY_END__" "declare" : 4
+"generate-template-name_k_0" "__STRATEGY_END__" "generate-template-name" : 25
+"type-compatible_n_186" "__STRATEGY_START__" "type-compatible" : 13
+"type-compatible_v_31" "__STRATEGY_START__" "type-compatible" : 22
+"remove-string-position-annos_o_33" "__STRATEGY_END__" "remove-string-position-annos" : 1
+"declare-action_k_173" "__STRATEGY_END__" "declare-action" : 105
+"subtype-of_w_183" "__STRATEGY_START__" "subtype-of" : 15
+"type-compatible_n_183" "__STRATEGY_END__" "type-compatible" : 2
+"initial-declare-template-definition_q_49" "__RULE_START__" "initial-declare-template-definition" : 25
+"eq-type-of_h_3" "__STRATEGY_START__" "eq-type-of" : 3
+"make-string-compatible_o_183" "__STRATEGY_START__" "make-string-compatible" : 7
+"rename-entity-common_k_89" "__RULE_END__" "rename-entity-common" : 1
+"newname-deterministic_m_41" "__RULE_START__" "newname-deterministic" : 28
+"is-function-cons_i_205" "__STRATEGY_END__" "is-function-cons" : 3
+"declare-ac_x_225" "__STRATEGY_START__" "declare-ac" : 302
+"generate-template-name_j_0" "__STRATEGY_START__" "generate-template-name" : 25
+"strip-ref-sort_z_32" "__STRATEGY_END__" "strip-ref-sort" : 187
+"built-in-template-rule-setup_d_190" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"declare-static-function_g_112" "__STRATEGY_END__" "declare-static-function" : 22
+"get-webdsl-parse-table_p_45" "__STRATEGY_END__" "get-webdsl-parse-table" : 2
+"extra-typecheck-option_r_15" "__STRATEGY_START__" "extra-typecheck-option" : 5
+"declare-normalized_p_30" "__RULE_START__" "declare-normalized" : 28
+"emit-webdsl-code-no-rename_g_37" "__STRATEGY_END__" "emit-webdsl-code-no-rename" : 61
+"webdsl-compile-units-cache-option_v_12" "__STRATEGY_START__" "webdsl-compile-units-cache-option" : 5
+"prefix-rename_h_30" "__STRATEGY_START__" "prefix-rename" : 7
+"get-ac-principal-type_b_226" "__STRATEGY_START__" "get-ac-principal-type" : 1
+"emit-and-declare-main-template_u_16" "__STRATEGY_END__" "emit-and-declare-main-template" : 1
+"eq-type-of-ui_w_74" "__STRATEGY_START__" "eq-type-of-ui" : 3
+"if-statistics_b_15" "__STRATEGY_END__" "if-statistics" : 3
+"extend-entity-declare-body_b_117" "__STRATEGY_START__" "extend-entity-declare-body" : 47
+"is-property-cons_d_39" "__STRATEGY_START__" "is-property-cons" : 159
+"get-anno_e_28" "__STRATEGY_START__" "get-anno" : 327
+"declare-global-func_s_173" "__STRATEGY_END__" "declare-global-func" : 108
+"xtc-parse-webdsl_z_44" "__STRATEGY_START__" "xtc-parse-webdsl" : 1
+"extract-function-sig_c_206" "__STRATEGY_END__" "extract-function-sig" : 54
+"declare_p_117" "__RULE_START__" "declare" : 2
+"declare-native-class_l_168" "__RULE_START__" "declare-native-class" : 4
+"caching-option_j_11" "__STRATEGY_START__" "caching-option" : 5
+"import-extra-modules-hook_c_38" "__STRATEGY_START__" "import-extra-modules-hook" : 1
+"rename-property_l_89" "__RULE_START__" "rename-property" : 5
+"declare-procedure_h_215" "__STRATEGY_START__" "declare-procedure" : 302
+"create-inputs-for-login-tpl_w_224" "__RULE_START__" "create-inputs-for-login-tpl" : 1
+"extend-property-declare_h_42" "__RULE_END__" "extend-property-declare" : 13
+"register-flush-function_q_198" "__STRATEGY_END__" "register-flush-function" : 1
+"normalize-declare_d_31" "__STRATEGY_START__" "normalize-declare" : 243
+"is-function-cons_m_205" "__STRATEGY_START__" "is-function-cons" : 52
+"emit-and-declare-authentication-template_b_225" "__STRATEGY_END__" "emit-and-declare-authentication-template" : 1
+"put-closure-in-anno_w_201" "__RULE_START__" "put-closure-in-anno" : 1
+"get-internal-validate-func-name_v_27" "__STRATEGY_END__" "get-internal-validate-func-name" : 33
+"rename-top_l_28" "__STRATEGY_START__" "rename-top" : 1
+"credential-to-var-name_t_223" "__STRATEGY_START__" "credential-to-var-name" : 4
+"create-vars-for-login-tpl_u_224" "__RULE_START__" "create-vars-for-login-tpl" : 1
+"with-origin_v_30" "__STRATEGY_START__" "with-origin" : 293
+"check-for-ambiguities_q_45" "__STRATEGY_START__" "check-for-ambiguities" : 2
+"declare-in-template_s_50" "__STRATEGY_START__" "declare-in-template" : 234
+"declare_t_1" "__STRATEGY_END__" "declare" : 110
+"declare_t_0" "__STRATEGY_END__" "declare" : 4
+"declare-all_m_30" "__STRATEGY_END__" "declare-all" : 24
+"verbose-1_o_13" "__STRATEGY_START__" "verbose-1" : 5
+"declare-search_m_119" "__RULE_START__" "declare-search" : 3
+"subtype-of_d_32" "__STRATEGY_START__" "subtype-of" : 15
+"type-compatible_y_190" "__STRATEGY_START__" "type-compatible" : 13
+"get-extensible-functions-for-property-events_e_116" "__RULE_START__" "get-extensible-functions-for-property-events" : 32
+"is-function-cons_h_205" "__STRATEGY_START__" "is-function-cons" : 55
+"add-anno_z_27" "__RULE_END__" "add-anno" : 40
+"emit-and-declare-dummy-entity_i_120" "__STRATEGY_END__" "emit-and-declare-dummy-entity" : 1
+"request-log-entities_p_27" "__STRATEGY_START__" "request-log-entities" : 1
+"capitalize-string_s_7" "__STRATEGY_END__" "capitalize-string" : 166
+"built-in-template-rule-setup_u_118" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"extend-property-declare_x_17" "__RULE_END__" "extend-property-declare" : 33
+"typecheck-declare_n_34" "__STRATEGY_END__" "typecheck-declare" : 1
+"built-in-template-rule-setup_d_182" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"if-statistics_a_15" "__STRATEGY_START__" "if-statistics" : 4
+"declare_q_117" "__RULE_END__" "declare" : 2
+"built-in-template-rule-setup_j_189" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"extends_n_32" "__STRATEGY_START__" "extends" : 14
+"eq-type-of-action_c_201" "__RULE_START__" "eq-type-of-action" : 1
+"get-property-name_z_34" "__RULE_NO_COND__" "get-property-name" : 79
+"declare-action_y_173" "__STRATEGY_END__" "declare-action" : 1
+"xtc-webdslc_e_0" "__STRATEGY_START__" "xtc-webdslc" : 1
+"built-in-template-rule-setup_d_187" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"rename-action_v_198" "__RULE_END__" "rename-action" : 1
+"extend-entity-declare_e_111" "__RULE_END__" "extend-entity-declare" : 20
+"typecheck_c_34" "__STRATEGY_START__" "typecheck" : 1
+"extend-entity-declare_o_108" "__RULE_START__" "extend-entity-declare" : 20
+"declare-search-functions_y_12" "__RULE_END__" "declare-search-functions" : 3
+"declare-function_d_173" "__STRATEGY_END__" "declare-function" : 220
+"declare-list-property_i_105" "__STRATEGY_START__" "declare-list-property" : 33
+"declare-action_n_213" "__STRATEGY_START__" "declare-action" : 141
+"declare-login_o_223" "__STRATEGY_END__" "declare-login" : 1
+"built-in-template-rule-setup_e_21" "__STRATEGY_START__" "built-in-template-rule-setup" : 1
+"webdslc-main2_c_0" "__STRATEGY_START__" "webdslc-main2" : 1
+"import-module_i_38" "__RULE_END__" "import-module" : 1
+"emit-import_e_38" "__RULE_NO_COND__" "emit-import" : 1
+"declare-function_b_112" "__RULE_START__" "declare-function" : 22
+"extend-entity-declare_m_19" "__RULE_START__" "extend-entity-declare" : 20

From v.vergu+vc at gmail.com  Thu Dec  6 13:25:02 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Thu, 06 Dec 2012 12:25:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25752 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20121206122502.4663F2B8047@mx2.tudelft.nl>

Author: VladVergu
Date: Thu Dec  6 12:25:01 2012
New Revision: 25752
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25752&sc=1

Log:
Fixes http://yellowgrass.org/issue/Spoofax/575

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 11:26:49 2012	(r25751)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 12:25:01 2012	(r25752)
@@ -76,8 +76,8 @@
     <project name="build.generated">
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
-        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar"   depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,sdf2parenthesize,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar"   depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,sdf2parenthesize,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${src-gen}/<%= pkgdir %>/strategies/Main.java" property="java.jar.enabled"/>

From v.vergu+vc at gmail.com  Thu Dec  6 13:25:04 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Thu, 06 Dec 2012 12:25:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25753 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20121206122504.23D512B8047@mx2.tudelft.nl>

Author: VladVergu
Date: Thu Dec  6 12:25:03 2012
New Revision: 25753
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25753&sc=1

Log:
Partially implements http://yellowgrass.org/issue/Spoofax/188

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 12:25:01 2012	(r25752)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 12:25:03 2012	(r25753)
@@ -709,8 +709,17 @@
         <target name="clean" description="Selective clean up">
             <delete dir="${build}"/>
             <delete file="${include}/${sdfmodule}.def"/>
+            <delete file="${include}/${sdfmodule}-parenthesize.str"/>
+            <delete file="${include}/${sdfmodule}-Permissive.def"/>
+            <delete file="${include}/${sdfmodule}.generated.pp.af"/>
+            <delete file="${include}/${sdfmodule}.packed.esv"/>
+            <delete file="${include}/${sdfmodule}.pp.af"/>
+            <delete file="${include}/${sdfmodule}.rtg"/>
+            <delete file="${include}/${sdfmodule}.str"/>
+            <delete file="${include}/${sdfmodule}.tbl"/>
             <delete file="${include}/${strmodule}.rtree"/>
             <delete file="${include}/${strmodule}.ctree"/>
+            <delete file="${include}/${strmodule}.ctree.dep"/>
             <delete file="${include}/${strmodule}.jar"/>
             <delete dir="${src-gen}/trans"/>
         </target>

From v.vergu+vc at gmail.com  Thu Dec  6 16:19:31 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Thu, 06 Dec 2012 15:19:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25754 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator
	org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.gen...
Message-ID: <20121206151931.DFA647F8054@mx1.tudelft.nl>

Author: VladVergu
Date: Thu Dec  6 15:19:30 2012
New Revision: 25754
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25754&sc=1

Log:
Minimal project generation. Implements http://yellowgrass.org/issue/Spoofax/96

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/include   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-nbl-example.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-refactorings-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/include
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/include	Thu Dec  6 15:19:30 2012	(r25754)
@@ -0,0 +1 @@
+link src/syntax
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	Thu Dec  6 12:25:03 2012	(r25753)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	Thu Dec  6 15:19:30 2012	(r25754)
@@ -13,6 +13,7 @@
   <+ jar-option
   <+ reset-files-option
   <+ gen-ignores-option
+  <+ gen-minimal-project
   <+ verbose-option
 
   input-file-option =
@@ -88,7 +89,13 @@
   	, rules(GenerateVCIgnores: _)
   	, !"-vci                 Enable generation of ignores for version control systems" 
   	)
-    
+  
+  gen-minimal-project = 
+  	Option(
+  	  "-min"
+  	, rules(GenerateMinimal: _)
+  	, !"-vci                 Generate only a minimal project" 
+  	)
   
   parameterized-sort-to-rtg-sort =
     // Module[StrategoHost] -> Module_StrategoHost

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str	Thu Dec  6 12:25:03 2012	(r25753)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str	Thu Dec  6 15:19:30 2012	(r25754)
@@ -6,7 +6,7 @@
 strategies
 
   create-example-file =
-    not(NoExistingDescriptor)
+    (GenerateMinimal < id + not(NoExistingDescriptor))
   <+
     with(
       name       := <get-sdf-main-module>;

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	Thu Dec  6 12:25:03 2012	(r25753)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	Thu Dec  6 15:19:30 2012	(r25754)
@@ -187,7 +187,25 @@
 
 if not(<file-exists> "trans/generate.str") then
   <output-text-file(|["trans"], "generate.str")>
-${module generate
+<(GenerateMinimal
+  <
+!${module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/{sdf-name}
+  lib/editor-common.generated
+  lib/compilation-library.generated
+
+rules // Incremental code generation of project using compilation library.
+      
+  // See lib/compilation-library.generated.str for documentation
+
+}
+  +
+!${module generate
 
 imports
   libstratego-lib
@@ -251,12 +269,38 @@
 
   to-java:
     t* -> <map(to-java)> t*
-}
+})>
 end;
 
 if not(<file-exists> "trans/check.str") then
   <output-text-file(|["trans"], "check.str")>
-${module check
+  <(GenerateMinimal
+  <
+!${module check
+
+imports
+  libstratego-lib
+  include/{sdf-name}
+  lib/editor-common.generated
+  lib/index-library.generated
+  lib/analysis-library.generated
+  lib/analysis-library-internal.generated
+  lib/nbl-library.generated
+
+rules // Extensions for error/warning/note reporting
+  
+  constraint-error:
+  	_ -> <fail>
+ 
+  constraint-warning:
+  	_ -> <fail>
+  	
+  constraint-note:
+  	_ -> <fail>
+
+}
+  +
+!${module check
 
 imports
   libstratego-lib
@@ -277,12 +321,24 @@
   constraint-note:
     Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
                                       (this note is defined in trans/check.str) ])
-}
+})>
 end;
 
 if not(<file-exists> "trans/refactor.str") then
   <output-text-file(|["trans"], "refactor.str")>
-"module refactor
+  <(GenerateMinimal
+  <
+!"module refactor
+
+imports
+  lib-refactoring/behavior-preservation.generated
+  check
+  lib/nbl-library.generated
+
+rules // Definitions of refactorings. Referenced from Minimal-Refactorings.esv
+"
+  +
+!"module refactor
 
 imports
   lib-refactoring/behavior-preservation.generated
@@ -303,5 +359,5 @@
 
   rename-all(|newname, oldname):
     ast -> <alltd(preserve-annos((oldname -> newname)))> ast
-"
+")>
 end

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str	Thu Dec  6 12:25:03 2012	(r25753)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str	Thu Dec  6 15:19:30 2012	(r25754)
@@ -15,9 +15,25 @@
   <+
     name        := <get-sdf-main-module>;
     startsymbol := <StartSymbol>;
-    
     <output-text-file(|["syntax"], <conc-strings> (name, ".sdf"))>
-$[%% Grammar for the [name] language
+    <(GenerateMinimal
+    	<
+!$[module [name]
+
+imports Common
+
+exports
+
+  context-free start-symbols
+  
+    [startsymbol]
+
+  context-free syntax
+  
+    -> Start {"Dummy"}
+]
+    	+
+!$[%% Grammar for the [name] language
 %% By default, based on an example "entities" syntax
 module [name]
 
@@ -36,6 +52,7 @@
     ID ":" Type                   -> Property {"Property"}
     ID                            -> Type {"Type"}
 ]
+    )>
   
   create-grammar-common =
     <file-exists> <conc-strings> ("syntax/Common.sdf")

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-nbl-example.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-nbl-example.str	Thu Dec  6 12:25:03 2012	(r25753)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-nbl-example.str	Thu Dec  6 15:19:30 2012	(r25754)
@@ -10,7 +10,21 @@
   <+
     sdf-name := <get-sdf-main-module>;
     <output-text-file(|["trans"], $[names.nd])>
-${module names
+    <(GenerateMinimal
+    <
+!${module names
+
+imports
+	
+	include/{sdf-name}
+	
+namespaces
+	
+rules
+
+}
++
+!${module names
 
 imports
 	
@@ -39,14 +53,38 @@
 		refers to Entity x
 		refers to Entity "String"
 		refers to Entity "Int"
-}
+})>
 
   create-placeholder-compiled-nd =
     <file-exists> <conc-strings> ("trans/names.str")
   <+
     sdf-name := <get-sdf-main-module>;
     <output-text-file(|["trans"], $[names.str])>
-${module names
+    <(GenerateMinimal
+    <
+!${module names
+
+imports
+  lib/analysis-library.generated
+  lib/analysis-library-internal.generated
+  lib/index-library.generated
+
+imports
+  include/{sdf-name}
+
+
+signature
+  constructors
+    Type        : DefDataKind
+    Import      : DefDataKind
+    Transitive  : ImportAnno
+    CurrentFile : ImportAnno
+
+  constructors
+    
+}
++
+!${module names
 
 imports
   lib/analysis-library.generated
@@ -162,4 +200,4 @@
                         , [Def([Entity(), "Int"])]
                         ]
     where <target__> x
-}
\ No newline at end of file
+})>
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Thu Dec  6 12:25:03 2012	(r25753)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Thu Dec  6 15:19:30 2012	(r25754)
@@ -19,7 +19,36 @@
   create-completions-descriptor =
     output-initial-descriptor-file(
       <descriptor-name> "-Completions"
-    , !|[
+    , completions-descriptor
+    );
+    create-derived-completions-descriptor
+
+
+  completions-descriptor =
+  	GenerateMinimal
+  	<
+  	!|[
+        module <descriptor-name> "-Completions"
+
+        imports <descriptor-name> "-Completions.generated"
+
+        completions
+          ~~
+          ~~// This file is used to define content completion.
+          ~~//
+          ~~// See the imported file for a brief introduction and examples.
+          ~~
+        completions
+          ~~
+        completions
+          ~~// Semantic (identifier) completion:
+          ~~
+          completion proposer: editor-complete
+          ~~
+          completion trigger: "."
+      ]|	
+  	+
+  	!|[
         module <descriptor-name> "-Completions"
 
         imports <descriptor-name> "-Completions.generated"
@@ -50,8 +79,6 @@
           ~~
           completion trigger: ":"
       ]|
-    );
-    create-derived-completions-descriptor
 
   create-derived-completions-descriptor =
     not(is-heuristic-services-needed);

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-refactorings-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-refactorings-descriptor.str	Thu Dec  6 12:25:03 2012	(r25753)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-refactorings-descriptor.str	Thu Dec  6 15:19:30 2012	(r25754)
@@ -12,26 +12,7 @@
   create-refactorings-descriptor =
     output-initial-descriptor-file(
       <descriptor-name> "-Refactorings"
-    , pp-strategy := $[pp-[<trans-module-name>]-string];
-      !|[
-        module <descriptor-name> "-Refactorings"
-
-        imports <descriptor-name> "-Refactorings.generated"
-
-        refactorings
-          ~~
-          ~~// This file can be used for specification of refactorings.
-          ~~//
-          ~~// See the imported file for a brief introduction and examples.
-        refactorings
-          ~~
-          pretty-print: ~pp-strategy
-          ~~
-          refactoring ID: "Rename Entity" = rename-refactoring (cursor)
-          shortcut : Shift + Alt + R
-          input
-            identifier: "new name" = ""
-      ]|
+    , refactorings-descriptor
     );
     
     output-derived-descriptor-file(
@@ -114,4 +95,45 @@
           Shift + Ctrl + O = "org.eclipse.jdt.ui.edit.text.java.organize.imports" // Organize Imports
       ]|  
     )
+    
+  refactorings-descriptor =
+  	pp-strategy := $[pp-[<trans-module-name>]-string];
+  	(GenerateMinimal
+  	<
+  	!|[
+        module <descriptor-name> "-Refactorings"
+
+        imports <descriptor-name> "-Refactorings.generated"
+
+        refactorings
+          ~~
+          ~~// This file can be used for specification of refactorings.
+          ~~//
+          ~~// See the imported file for a brief introduction and examples.
+        refactorings
+          ~~
+          pretty-print: ~pp-strategy
+          ~~
+      ]|
+  	+
+  	!|[
+        module <descriptor-name> "-Refactorings"
+
+        imports <descriptor-name> "-Refactorings.generated"
+
+        refactorings
+          ~~
+          ~~// This file can be used for specification of refactorings.
+          ~~//
+          ~~// See the imported file for a brief introduction and examples.
+        refactorings
+          ~~
+          pretty-print: ~pp-strategy
+          ~~
+          refactoring ID: "Rename Entity" = rename-refactoring (cursor)
+          shortcut : Shift + Alt + R
+          input
+            identifier: "new name" = ""
+      ]|
+      )
  
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	Thu Dec  6 12:25:03 2012	(r25753)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	Thu Dec  6 15:19:30 2012	(r25754)
@@ -4,6 +4,8 @@
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
+import java.util.ArrayList;
+import java.util.List;
 
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
@@ -39,7 +41,8 @@
 /**
  * A wizard for creating new Spoofax/IMP projects.
  * 
- * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Lennart Kats <lennart at lclnet.nl>
+ * @author Vlad Vergu <v.a.vergu at tudelft.nl>
  */
 public class NewEditorWizard extends Wizard implements INewWizard {
 	
@@ -74,11 +77,12 @@
 		final String packageName = input.getInputPackageName();
 		final String extensions = input.getInputExtensions();
 		final boolean genIgnores = input.getInputIgnores();
+		final boolean genMinimal = input.getInputMinimalProject();
 		
 		IRunnableWithProgress op = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) throws InvocationTargetException {
 				try {
-					doFinish(languageName, projectName, packageName, extensions, genIgnores, monitor);
+					doFinish(languageName, projectName, packageName, extensions, genIgnores, genMinimal, monitor);
 				} catch (Exception e) {
 					throw new InvocationTargetException(e);
 				} finally {
@@ -111,7 +115,7 @@
 		}
 	}
 	
- 	private void doFinish(String languageName, String projectName, String packageName, String extensions, boolean genIgnores, IProgressMonitor monitor) throws IOException, CoreException {
+ 	private void doFinish(String languageName, String projectName, String packageName, String extensions, boolean genIgnores, boolean genMinimal, IProgressMonitor monitor) throws IOException, CoreException {
 		final int TASK_COUNT = 22;
 		lastProject = null;
 		monitor.beginTask("Creating " + languageName + " project", TASK_COUNT);
@@ -133,11 +137,33 @@
 
 		agent.setWorkingDir(project.getLocation().toOSString());
 		try {
-			if(genIgnores){
-				sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "-vci", "--verbose", "2");
-			}else{
-				sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "--verbose", "2");
-			}
+			final List<String> sdf2imp_switches = new ArrayList<String>();
+			// language name
+			sdf2imp_switches.add("-m");
+			sdf2imp_switches.add(languageName);
+			// project name
+			sdf2imp_switches.add("-pn");
+			sdf2imp_switches.add(projectName);
+			// package (java) name
+			sdf2imp_switches.add("-n");
+			sdf2imp_switches.add(packageName);
+			// target language file extensions
+			sdf2imp_switches.add("-e");
+			sdf2imp_switches.add(extensions);
+			// .gitignores
+			if(genIgnores)
+				sdf2imp_switches.add("-vci");
+			// minimal project
+			if(genMinimal)
+				sdf2imp_switches.add("-min");
+			
+			// verbosity of builder
+			sdf2imp_switches.add("--verbose");
+			sdf2imp_switches.add("2");
+			
+			sdf2imp.mainNoExit(context, sdf2imp_switches.toArray(new String[sdf2imp_switches.size()]));
+			
+//				sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "-vci", "--verbose", "2");
 		} catch (StrategoErrorExit e) {
 			Environment.logException(e);
 			throw new StrategoException("Project builder failed: " + e.getMessage() + "\nLog follows:\n\n"
@@ -192,7 +218,8 @@
 		monitor.worked(1);
 		EditorState.asyncOpenEditor(display, project.getFile("/syntax/" + languageName +  ".sdf"), true);
 		monitor.worked(1);
-		EditorState.asyncOpenEditor(display, project.getFile("/test/example." + extensions.split(",")[0]), false);
+		if(!genMinimal)
+			EditorState.asyncOpenEditor(display, project.getFile("/test/example." + extensions.split(",")[0]), false);
 		refreshProject(project);
 		monitor.done();
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	Thu Dec  6 12:25:03 2012	(r25753)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	Thu Dec  6 15:19:30 2012	(r25754)
@@ -18,6 +18,10 @@
  * The "New" wizard page allows setting the container for the new file as well
  * as the file name. The page will only accept file name without the extension
  * OR with the extension that matches the expected one (esv).
+ * 
+ * @author Lennart Kats <lennart at lclnet.nl>
+ * @author Vlad Vergu <v.a.vergu at tudelft.nl>
+ * 
  */
 
 public class NewEditorWizardPage extends WizardPage {
@@ -32,6 +36,8 @@
 	
 	private Button inputIgnores;
 	
+	private Button inputMinimalProject; 
+	
 	private boolean isInputProjectNameChanged;
 	
 	private boolean isInputPackageNameChanged;
@@ -129,11 +135,19 @@
 			}
 		});
 		
-
 		inputIgnores = new Button(container, SWT.CHECK);
 		inputIgnores.setText("&Generate .gitignore file");
-		inputIgnores.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
-
+		final GridData inputIgnores_gd = new GridData(GridData.FILL_HORIZONTAL);
+		inputIgnores_gd.horizontalSpan = 2;
+		inputIgnores.setLayoutData(inputIgnores_gd);
+		
+		
+		inputMinimalProject = new Button(container, SWT.CHECK);
+		inputMinimalProject.setText("&Generate minimal project only");
+		final GridData inputMinimalProject_gd = new GridData(GridData.FILL_HORIZONTAL);
+		inputMinimalProject_gd.horizontalSpan = 2;
+		inputMinimalProject.setLayoutData(inputMinimalProject_gd);
+		
 		setControl(container);
 		setPageComplete(false);
 		inputProjectName.setFocus();
@@ -319,4 +333,8 @@
 	public boolean getInputIgnores() {
 		return inputIgnores.getSelection();
 	}
+	
+	public boolean getInputMinimalProject() {
+		return inputMinimalProject.getSelection();
+	}
 }

From v.vergu+vc at gmail.com  Thu Dec  6 19:01:08 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Thu, 06 Dec 2012 18:01:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25755 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20121206180108.5E7407F802C@mx1.tudelft.nl>

Author: VladVergu
Date: Thu Dec  6 18:01:06 2012
New Revision: 25755
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25755&sc=1

Log:
Partially implements/resolves http://yellowgrass.org/issue/Spoofax/577

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 15:19:30 2012	(r25754)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 18:01:06 2012	(r25755)
@@ -76,8 +76,34 @@
     <project name="build.generated">
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
-        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,sdf2parenthesize,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar"   depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,sdf2parenthesize,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.ctree" depends="
+			check-classpath,
+			init,
+			sdf2table,
+			meta-sdf2table,
+			ppgen,
+			pppack,
+			sdf2imp.eclipse,
+			sdf2imp.standalone,
+			sdf2parenthesize,
+			stratego.aster,
+			java.jar,
+			stratego.ctree,
+			refresh" />
+        <target name="spoofaximp.default.jar" depends="
+			check-classpath,
+			init,
+			sdf2table,
+			meta-sdf2table,
+			ppgen,
+			pppack,
+			sdf2imp.eclipse,
+			sdf2imp.standalone,
+			sdf2parenthesize,
+			stratego.aster,
+			java.jar,
+			stratego.jar.helper,
+			refresh" />
     
         <!-- Initialization -->
         <available file="${src-gen}/<%= pkgdir %>/strategies/Main.java" property="java.jar.enabled"/>
@@ -119,7 +145,7 @@
         <mkdir dir="${lib}"/>
         <mkdir dir="${syntax}"/>
 
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
+        <!-- <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/> -->
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
             <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
@@ -706,22 +732,39 @@
             </apply>
         </target>
         
-        <target name="clean" description="Selective clean up">
-            <delete dir="${build}"/>
-            <delete file="${include}/${sdfmodule}.def"/>
-            <delete file="${include}/${sdfmodule}-parenthesize.str"/>
-            <delete file="${include}/${sdfmodule}-Permissive.def"/>
-            <delete file="${include}/${sdfmodule}.generated.pp.af"/>
-            <delete file="${include}/${sdfmodule}.packed.esv"/>
-            <delete file="${include}/${sdfmodule}.pp.af"/>
-            <delete file="${include}/${sdfmodule}.rtg"/>
-            <delete file="${include}/${sdfmodule}.str"/>
-            <delete file="${include}/${sdfmodule}.tbl"/>
-            <delete file="${include}/${strmodule}.rtree"/>
-            <delete file="${include}/${strmodule}.ctree"/>
-            <delete file="${include}/${strmodule}.ctree.dep"/>
-            <delete file="${include}/${strmodule}.jar"/>
-            <delete dir="${src-gen}/trans"/>
-        </target>
+	<target name="clean" description="Clean project">
+		<delete dir="${build}" />
+		<delete dir=".cache" />
+		<delete file="${include}/${sdfmodule}.def" />
+		<delete file="${include}/${sdfmodule}-parenthesize.str" />
+		<delete file="${include}/${sdfmodule}-Permissive.def" />
+		<delete file="${include}/${sdfmodule}.generated.pp.af" />
+		<delete file="${include}/${sdfmodule}.packed.esv" />
+		<delete file="${include}/${sdfmodule}.pp.af" />
+		<delete file="${include}/${sdfmodule}.rtg" />
+		<delete file="${include}/${sdfmodule}.str" />
+		<delete file="${include}/${sdfmodule}.tbl" />
+		<delete file="${include}/${strmodule}.rtree" />
+		<delete file="${include}/${strmodule}.ctree" />
+		<delete file="${include}/${strmodule}.ctree.dep" />
+		<delete file="${include}/${strmodule}.jar" />
+		<delete>
+			<fileset dir="editor" includes="*.generated.esv"/>
+		</delete>
+		<delete dir="${src-gen}/trans" />
+		<delete file="editor/${sdfmodule}.generated.esv" />
+		<delete file="${syntax}/${sdfmodule}.generated.esv" />
+		<delete file="${syntax}/${sdfmodule}.generated.pp" />
+		<delete file="${include}/${metasdfmodule}-Permissive.def" />
+		<delete file="${include}/${metasdfmodule}.def" />
+		<delete file="${include}/${metasdfmodule}.tbl" />
+		<delete file=".settings/org.eclipse.jdt.core.prefs" />
+		<delete dir="utils" />
+		<delete>
+			<fileset dir="lib-refactoring" includes="*.generated.str" />
+			<fileset dir="${lib}" includes="*.generated.str" />
+		</delete>
+	</target>
+	
     </project>
     <%

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str	Thu Dec  6 15:19:30 2012	(r25754)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str	Thu Dec  6 18:01:06 2012	(r25755)
@@ -9,12 +9,31 @@
   	not(GenerateVCIgnores)
   	<+
   	name       := <get-sdf-main-module>;
+    name'      := <trans-module-name>;
   	<output-text-file(|[], ".gitignore")>
     <conc-strings>
 (
-".cache
-bin
+"bin,
+.cache
+include/*",name,".def
+include/*",name,"-parenthesize.str
+include/*",name,"-Permissive.def
+include/*",name,".generated.pp.af
+include/*",name,".packed.esv
+include/*",name,".pp.af
+include/*",name,".rtg
+include/*",name,".str
+include/*",name,".tbl
+include/*",name',".rtree
+include/*",name',".ctree
+include/*",name',".ctree.dep
+include/*",name',".jar
+editor/java/trans
 editor/", name, "-*.generated.esv
-include/*
-syntax/", name, ".generated.pp"
+syntax/", name, "*.generated.esv
+.settings/org.eclipse.jdt.core.prefs
+utils
+lib/*.generated.str
+lib-refactoring/*.generated.str
+"
 )

From gabrielkonat at gmail.com  Thu Dec  6 19:48:59 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Thu, 06 Dec 2012 18:48:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25756 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime
	spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/...
Message-ID: <20121206184859.F41717F802C@mx1.tudelft.nl>

Author: gkonat
Date: Thu Dec  6 18:48:58 2012
New Revision: 25756
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25756&sc=1

Log:
Added project reference from runtime to index library.
Moved index library dependency in runtime above strj so that the source version (instead of the one from the strj jar file) is used.
Cleaned up NotificationCenter.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/FilePartition.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/.project
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/.project
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/.project	Thu Dec  6 18:01:06 2012	(r25755)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/.project	Thu Dec  6 18:48:58 2012	(r25756)
@@ -1,28 +1,29 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>org.strategoxt.imp.runtime</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.pde.ManifestBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.pde.SchemaBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.pde.PluginNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.runtime</name>
+	<comment></comment>
+	<projects>
+		<project>org.spoofax.interpreter.library.index</project>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Thu Dec  6 18:01:06 2012	(r25755)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Thu Dec  6 18:48:58 2012	(r25756)
@@ -24,13 +24,13 @@
  org.strategoxt.imp.generator,
  org.strategoxt.imp.spoofax.generator,
  org.spoofax.terms,
+ org.spoofax.interpreter.library.index,
  org.strategoxt.strj,
  org.strategoxt.imp.debug.core,
  org.eclipse.core.expressions,
  org.strategoxt.imp.runtime.sidebyside.main;bundle-version="0.0.1",
  org.strategoxt.imp.runtime.sidebyside.legacy;bundle-version="0.0.1";resolution:=optional,
- org.strategoxt.imp.runtime.sidebyside.latest;bundle-version="0.0.1",
- org.spoofax.interpreter.library.index;bundle-version="1.0.0"
+ org.strategoxt.imp.runtime.sidebyside.latest;bundle-version="0.0.1"
 Export-Package: org.strategoxt.imp.runtime,
  org.strategoxt.imp.runtime.dynamicloading,
  org.strategoxt.imp.runtime.parser,

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java	Thu Dec  6 18:01:06 2012	(r25755)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java	Thu Dec  6 18:48:58 2012	(r25756)
@@ -23,8 +23,8 @@
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.imp.language.LanguageRegistry;
+import org.spoofax.interpreter.library.index.FilePartition;
 import org.spoofax.interpreter.library.index.NotificationCenter;
-import org.spoofax.interpreter.library.index.INotificationService.FileSubfile;
 import org.strategoxt.imp.runtime.Environment;
 
 /**
@@ -63,7 +63,7 @@
 
 	private void postResourceChanged(IResourceDelta delta) {
 		try {
-			final List<FileSubfile> changedFiles = new ArrayList<FileSubfile>();
+			final List<FilePartition> changedFiles = new ArrayList<FilePartition>();
 
 			delta.accept(new IResourceDeltaVisitor() {
 				public boolean visit(IResourceDelta delta) throws CoreException {
@@ -72,14 +72,14 @@
 							&& !isIgnoredChange(resource)
 							&& resource.getLocation() != null
 							&& LanguageRegistry.findLanguage(resource.getLocation(), null) != null) {
-						changedFiles.add(new FileSubfile(resource.getLocationURI(), null));
+						changedFiles.add(new FilePartition(resource.getLocationURI(), null));
 					}
 					return true;
 				}
 			});
 			
 			if(changedFiles.size() > 0)
-				NotificationCenter.notifyFileChanges(changedFiles.toArray(new FileSubfile[0]));
+				NotificationCenter.notifyFileChanges(changedFiles.toArray(new FilePartition[0]));
 		} catch (CoreException e) {
 			Environment.logException("Exception when processing fileystem events", e);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Thu Dec  6 18:01:06 2012	(r25755)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Thu Dec  6 18:48:58 2012	(r25756)
@@ -11,6 +11,7 @@
 import org.eclipse.core.runtime.Path;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
+import org.spoofax.interpreter.library.index.FilePartition;
 import org.spoofax.interpreter.library.index.INotificationService;
 import org.spoofax.interpreter.library.index.IndexManager;
 import org.spoofax.interpreter.library.index.NotificationCenter;
@@ -27,7 +28,7 @@
  */
 public class QueueAnalysisService implements INotificationService {
 
-	public void notifyFileChanges(URI file, String subfile) {
+	public void notifyChanges(URI file, String subfile) {
 		try {
 			IProject project = EditorIOAgent.getProject(new File(file));
 			IPath relPath = relativePath(file, subfile);
@@ -39,14 +40,14 @@
 		}
 	}
 	
-	public void notifyFileChanges(FileSubfile[] files) {
+	public void notifyChanges(FilePartition[] files) {
 		if(files.length == 0)
 			return;
 		
 		List<IPath> relativePaths = new ArrayList<IPath>(files.length);
-		for(FileSubfile file : files) {
+		for(FilePartition file : files) {
 			try {
-				IPath path = relativePath(file.file, file.subfile);
+				IPath path = relativePath(file.file, file.partition);
 				if(path != null)
 					relativePaths.add(path);
 			} catch (FileNotFoundException e) {
@@ -88,14 +89,14 @@
 	}
 
 	private void notifyNewProjectFiles(File file) {
-		notifyFileChanges(getProjectFileSubfiles(file).toArray(new FileSubfile[0]));
+		notifyChanges(getProjectFileSubfiles(file).toArray(new FilePartition[0]));
 	}
 	
-	private List<FileSubfile> getProjectFileSubfiles(File file) {
-		List<FileSubfile> fileSubfiles = new ArrayList<FileSubfile>();
+	private List<FilePartition> getProjectFileSubfiles(File file) {
+		List<FilePartition> fileSubfiles = new ArrayList<FilePartition>();
 		if(file.isFile()) {
 			if (isIndexedFile(new Path(file.getAbsolutePath()))) {
-				fileSubfiles.add(new FileSubfile(file.toURI(), null));
+				fileSubfiles.add(new FilePartition(file.toURI(), null));
 			}
 		} else {
 			for(File child : file.listFiles()) {

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/FilePartition.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/FilePartition.java	Thu Dec  6 18:48:58 2012	(r25756)
@@ -0,0 +1,16 @@
+package org.spoofax.interpreter.library.index;
+
+import java.net.URI;
+
+/**
+ * Container for file URI and partition.
+ */
+public class FilePartition {
+    public final URI file;
+    public final String partition;
+
+    public FilePartition(URI file, String partition) {
+        this.file = file;
+        this.partition = partition;
+    }
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java	Thu Dec  6 18:01:06 2012	(r25755)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java	Thu Dec  6 18:48:58 2012	(r25756)
@@ -7,31 +7,24 @@
  */
 public interface INotificationService {
     /**
-     * Notify listener of a added/removed/changed file.
+     * Notify listener of a added/removed/changed file with optional partition.
+     * 
+     * @param file The URI of the file
+     * @param partition The partition, or null if not applicable.
      */
-    void notifyFileChanges(URI file, String subfile);
+    void notifyChanges(URI file, String partition);
 
     /**
-     * Notify listeners of multiple added/removed/changed files.
+     * Notify listeners of multiple added/removed/changed files with optional partitions.
+     * 
+     * @param files The changed files.
      */
-    void notifyFileChanges(FileSubfile[] files);
+    void notifyChanges(FilePartition[] files);
 
     /**
-     * Notify listener of a new project. All files in it should be compared to the timestamps or other metadata stored
-     * about them.
+     * Notify listener of a new project.
+     * 
+     * @param project The new project.
      */
     void notifyNewProject(URI project);
-
-    /**
-     * Container for file URI and subfile name.
-     */
-    public class FileSubfile {
-        public FileSubfile(URI file, String subfile) {
-            this.file = file;
-            this.subfile = subfile;
-        }
-
-        public URI file;
-        public String subfile;
-    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java	Thu Dec  6 18:01:06 2012	(r25755)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java	Thu Dec  6 18:48:58 2012	(r25756)
@@ -4,8 +4,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.spoofax.interpreter.library.index.INotificationService.FileSubfile;
-
 /**
  * A central, static go-to point for file system notifications.
  * 
@@ -19,42 +17,43 @@
         new HashMap<ObserverDescription, INotificationService>();
 
     /**
-     * Notify listeners of a added/removed/changed file.
+     * Notify listeners of an added/removed/moved/modified file with optional partition.
      * 
      * @param file The URI of the file
-     * @param subfile The subfilename, or null if not applicable
+     * @param partition The partition, or null if not applicable.
      */
-    public synchronized static void notifyFileChanges(URI file, String subfile) {
+    public synchronized static void notifyFileChanges(URI file, String partition) {
         assert file.isAbsolute();
         for(INotificationService observer : asyncObservers.values()) {
-            observer.notifyFileChanges(file, subfile);
+            observer.notifyChanges(file, partition);
         }
     }
 
     /**
-     * Notify listeners of multiple added/removed/changed files.
+     * Notify listeners of multiple added/removed/moved/modified files with optional partitions.
      * 
-     * @param files The changed files
+     * @param files The changed files.
      */
-    public synchronized static void notifyFileChanges(FileSubfile[] files) {
+    public synchronized static void notifyFileChanges(FilePartition[] files) {
         if(files.length == 1) {
-            FileSubfile file = files[0];
-            notifyFileChanges(file.file, file.subfile);
+            FilePartition file = files[0];
+            notifyFileChanges(file.file, file.partition);
             return;
         }
 
-        for(FileSubfile file : files) {
+        for(FilePartition file : files) {
             assert file.file.isAbsolute();
         }
 
         for(INotificationService observer : asyncObservers.values()) {
-            observer.notifyFileChanges(files);
+            observer.notifyChanges(files);
         }
     }
 
     /**
-     * Notify listener of a new project. All files in it should be compared to the timestamps or other metadata stored
-     * about them.
+     * Notify listener of a new project.
+     * 
+     * @param project The new project.
      */
     public synchronized static void notifyNewProject(URI project) {
         for(INotificationService observer : asyncObservers.values()) {

From gabrielkonat at gmail.com  Thu Dec  6 20:05:54 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Thu, 06 Dec 2012 19:05:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25757 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	. dynamicloading services
Message-ID: <20121206190554.44092108C004@mx3.tudelft.nl>

Author: gkonat
Date: Thu Dec  6 19:05:52 2012
New Revision: 25757
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25757&sc=1

Log:
Disabled spammy error log warnings.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/FoldingUpdaterFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Thu Dec  6 18:48:58 2012	(r25756)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Thu Dec  6 19:05:52 2012	(r25757)
@@ -104,7 +104,7 @@
 		if (!isInitialized && EditorState.isUIThread()) {
 			isInitialized = true;
 		} else if (Debug.ENABLED && !lock.isHeldByCurrentThread() && EditorState.isUIThread()) {
-			Environment.logWarning("Acquired environment lock from main thread");
+			//Environment.logWarning("Acquired environment lock from main thread");
 		}
 		return lock;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/FoldingUpdaterFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/FoldingUpdaterFactory.java	Thu Dec  6 18:48:58 2012	(r25756)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/FoldingUpdaterFactory.java	Thu Dec  6 19:05:52 2012	(r25757)
@@ -8,7 +8,6 @@
 
 import org.eclipse.imp.services.IFoldingUpdater;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.services.FoldingUpdater;
 import org.strategoxt.imp.runtime.services.NodeMapping;
@@ -41,7 +40,7 @@
 				folded.remove(mapping);
 				defaultFolded.remove(mapping);
 			} else {
-				Environment.logWarning("Unknown folding rule type:" + type);
+				//Environment.logWarning("Unknown folding rule type:" + type);
 				defaultFolded.add(mapping);
 			}
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java	Thu Dec  6 18:48:58 2012	(r25756)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java	Thu Dec  6 19:05:52 2012	(r25757)
@@ -48,7 +48,7 @@
 				if (folding.getAttribute(constructor, sort, 0) != null) {
 					makeCompleteAnnotation(node);
 					// TODO: Fold node by default
-					Environment.logWarning("Folding annotation (folded) not implemented");
+					// Environment.logWarning("Folding annotation (folded) not implemented");
 					break;
 				}
 			}

From v.vergu+vc at gmail.com  Thu Dec  6 20:19:37 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Thu, 06 Dec 2012 19:19:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25758 - in
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp: .
	project
Message-ID: <20121206191937.2482F7F8079@mx1.tudelft.nl>

Author: VladVergu
Date: Thu Dec  6 19:19:36 2012
New Revision: 25758
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25758&sc=1

Log:
Partially implements/resolves http://yellowgrass.org/issue/Spoofax/577

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-cleaner-xml.meta
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-cleaner-xml.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	Thu Dec  6 19:05:52 2012	(r25757)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	Thu Dec  6 19:19:36 2012	(r25758)
@@ -147,6 +147,7 @@
     create-build-xml;
     create-build-generated-xml;
     create-builder-xml;
+    create-cleaner-xml;
     create-example-file;
     create-common-trans;
     

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 19:05:52 2012	(r25757)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 19:19:36 2012	(r25758)
@@ -764,7 +764,13 @@
 			<fileset dir="lib-refactoring" includes="*.generated.str" />
 			<fileset dir="${lib}" includes="*.generated.str" />
 		</delete>
+		<antcall target="refresh-cleaned"/>
 	</target>
 	
+	<target name="refresh-cleaned" if="eclipse.running">
+        <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir" />
+        <eclipse.refreshLocal resource="${projectdir}" depth="infinite" />
+    </target>
+	
     </project>
     <%

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-cleaner-xml.meta
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-cleaner-xml.meta	Thu Dec  6 19:19:36 2012	(r25758)
@@ -0,0 +1 @@
+Meta([Syntax("Stratego-xml")])
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-cleaner-xml.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-cleaner-xml.str	Thu Dec  6 19:19:36 2012	(r25758)
@@ -0,0 +1,35 @@
+module sdf2imp/project/create-cleaner-xml
+    
+imports
+  sdf2imp/util/-
+
+strategies
+
+  cleaner-xml-name =
+    // Note that we cannot use ProjectName here since
+    // it may not be set after the first time this runs
+    !$[[<get-sdf-main-module>] clean-project.xml.launch]
+
+  create-cleaner-xml =
+    <file-exists> $[.externalToolBuilders/[<cleaner-xml-name>]]
+  <+
+    not(ProjectName);
+    warn-msg(|$[Project name not specified, cannot regenerate [<cleaner-xml-name>]])
+  <+
+    project-name := <ProjectName>;
+    
+    <output-text-file(|[".externalToolBuilders"], <cleaner-xml-name>)>
+    $[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntBuilderLaunchConfigurationType">
+	<stringAttribute key="org.eclipse.ant.ui.ATTR_ANT_CLEAN_TARGETS" value="clean,"/>
+	<booleanAttribute key="org.eclipse.ant.ui.ATTR_TARGETS_UPDATED" value="true"/>
+	<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+	<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+	<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+	<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="true"/>
+	<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="[project-name]"/>
+	<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/[project-name]/build.main.xml}"/>
+	<stringAttribute key="org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS" value="clean"/>
+	<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+</launchConfiguration>
+]
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str	Thu Dec  6 19:05:52 2012	(r25757)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str	Thu Dec  6 19:19:36 2012	(r25758)
@@ -11,23 +11,23 @@
   	name       := <get-sdf-main-module>;
     name'      := <trans-module-name>;
   	<output-text-file(|[], ".gitignore")>
-    <conc-strings>
+    <conc-strings> (<conc-strings>
 (
 "bin,
 .cache
-include/*",name,".def
-include/*",name,"-parenthesize.str
-include/*",name,"-Permissive.def
-include/*",name,".generated.pp.af
-include/*",name,".packed.esv
-include/*",name,".pp.af
-include/*",name,".rtg
-include/*",name,".str
-include/*",name,".tbl
-include/*",name',".rtree
-include/*",name',".ctree
-include/*",name',".ctree.dep
-include/*",name',".jar
+include/",name,".def
+include/",name,"-parenthesize.str
+include/",name,"-Permissive.def
+include/",name,".generated.pp.af
+include/",name,".packed.esv
+include/",name,".pp.af
+include/",name,".rtg
+include/",name,".str"
+), "include/",name,".tbl
+include/",name',".rtree
+include/",name',".ctree
+include/",name',".ctree.dep
+include/",name',".jar
 editor/java/trans
 editor/", name, "-*.generated.esv
 syntax/", name, "*.generated.esv
@@ -35,5 +35,4 @@
 utils
 lib/*.generated.str
 lib-refactoring/*.generated.str
-"
-)
+")

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str	Thu Dec  6 19:05:52 2012	(r25757)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str	Thu Dec  6 19:19:36 2012	(r25758)
@@ -12,6 +12,7 @@
     package     := <BasePackage <+ default-package-name>;
     project		:= <ProjectName>;
     builder-xml := <conc-strings> ("&lt;project&gt;/.externalToolBuilders/", <builder-xml-name>);
+    cleaner-xml := <conc-strings> ("&lt;project&gt;/.externalToolBuilders/", <cleaner-xml-name>);
     
     <output-xml-file(|[], ".project")>
     %>
@@ -36,6 +37,16 @@
             </arguments>
         </buildCommand>
         <buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>clean,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value><%= cleaner-xml::cdata %></value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+        <buildCommand>
           <name>org.eclipse.pde.ManifestBuilder</name>
           <arguments>
           </arguments>

From gabrielkonat at gmail.com  Thu Dec  6 20:22:48 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Thu, 06 Dec 2012 19:22:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25759 -
	spoofax-contrib/index-examples/index-libraries/lib
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20121206192248.27DF6108C004@mx3.tudelft.nl>

Author: gkonat
Date: Thu Dec  6 19:22:47 2012
New Revision: 25759
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25759&sc=1

Log:
Generate new index libraries.
Fixed incremental analysis in default project.

Modified:
   spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-index-libraries.str

Modified: spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str
==============================================================================
--- spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str	Thu Dec  6 19:19:36 2012	(r25758)
+++ spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str	Thu Dec  6 19:22:47 2012	(r25759)
@@ -624,9 +624,19 @@
 
 rules // Definition retrieval
   
+  /**
+   * Gets all definitions from the index with given name, namespace and path.
+   * 
+   * @internal 
+   */   
   index-get-defs(name-compare|namespace, name):
     [ns|path] -> <index-get-all> Def([ns, name|path])
   
+  /**
+   * Gets all definitions from the index with given prefix, namespace, path and name-comparison strategy.
+   * 
+   * @internal 
+   */   
   index-get-defs-prefix(name-compare|namespace, prefix) = 
     index-get-children(\uri -> Def(uri)\, name-compare|namespace, prefix)
       

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	Thu Dec  6 19:19:36 2012	(r25758)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	Thu Dec  6 19:22:47 2012	(r25759)
@@ -174,15 +174,21 @@
     
 rules // Utility
   
-  // Queue parallel analysis for given list of files.
+  // Queue analysis for given list of files.
   editor-queue-analysis = 
-    not(?[]); queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+    not(?[]); queue-strategy(|"editor-sequential-analyze", "Analyzing files")
       
   // Executes parallel analysis using the index library.
   editor-parallel-analyze:
     files -> None()
     with
       index-parallel-analyze-files(analyze)
+      
+  // Executes sequential analysis using the index library.
+  editor-sequential-analyze:
+    files -> None()
+    with
+      index-sequential-analyze-files(analyze)
 };
 
 if not(<file-exists> "trans/generate.str") then
@@ -232,6 +238,9 @@
 
   to-java:
     [_] -> <concat-strings> <map(to-java)>
+    
+  to-java:
+    () -> ""
 
   to-java:
     Module(x, d*) ->

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-index-libraries.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-index-libraries.str	Thu Dec  6 19:19:36 2012	(r25758)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-index-libraries.str	Thu Dec  6 19:22:47 2012	(r25759)
@@ -942,6 +942,9 @@
   
 rules // Parallel analysis
   
+  index-parallel-analyze-files(analyze) = index-analyze-files(index-parallel-analyze(analyze))
+  index-sequential-analyze-files(analyze) = index-analyze-files(index-sequential-analyze(analyze))
+  
   /**
    * Does a parallel analysis of given files using the specified analysis strategy. Automatically does parallel
    * analysis of dependent files that have changed during the analysis.
@@ -954,13 +957,13 @@
    *                a (ast', errors, warnings, notes, filesToAnalyze) tuple as output.
    * @type List((file, subfile) or file) -> None()
    */
-  index-parallel-analyze-files(analyze):
+  index-analyze-files(internal-analyze):
     files -> None()
     with
       length; 
       set-total-work-units
     with
-      index-parallel-analyze(analyze);
+      internal-analyze;
       filter(not(?ParallelResults((), (), _, _, _, _) <+ ?ParallelResults((), [()], _, _, _, _)); index-set-markers)
       
 rules // Splitter
@@ -1064,10 +1067,10 @@
   index-get-all:
     template -> <indexlib-get-all> template
       with
-       if set := <Index-ReadSet> then
-         uri := <index-uri>;
-         <iset-add(|Read(uri))> set
-       end
+        if set := <Index-ReadSet> then
+          uri := <index-uri>;
+          <iset-add(|Read(uri))> set
+        end
        
   /**
    * Get all values of index entries that match the given template.
@@ -1213,7 +1216,7 @@
    * @type \"name\"{uri} -> ?Def(uri')
    */
   index-lookup:
-    x{[namespace|path]} -> <index-lookup-internal(index-compare-name-equal(|name)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-name-equal(|name)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -1225,7 +1228,7 @@
    * @type \"name\"{uri} -> List(Def(uri'))
    */
   index-lookup-all:
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-name-equal(|name)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs, index-compare-name-equal(|name)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -1239,7 +1242,7 @@
    * @type \"name\"{uri} -> List(Def(uri'))
    */
   index-lookup-all(|prefix):
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-name-substring(|prefix)|ns, path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|ns, path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace
       
@@ -1250,7 +1253,7 @@
    * @type \"name\"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped:
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-compare-name-equal(|name)|ns, parent-path, name)> x
+    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs, index-compare-name-equal(|name)|ns, parent-path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x;
@@ -1263,7 +1266,7 @@
    * @type \"name\"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped-noimports:
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(fail, id, index-compare-name-equal(|name)|ns, parent-path, name)> x
+    x{[namespace|path]} -> <index-lookup-all-scoped-internal(fail, id, index-get-defs, index-compare-name-equal(|name)|ns, parent-path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x;
@@ -1278,7 +1281,7 @@
    * @type \"name\"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped(|prefix):
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-compare-name-substring(|prefix)|ns, parent-path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|ns, parent-path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace;
       (<?[_|<id>]> path <+ !path) => parent-path
@@ -1303,7 +1306,7 @@
    * @type \"name\"{uri} -> List(Def(uri'))
    */    
   index-lookup-children(|namespace, prefix):
-    x{[_|path]} -> <index-lookup-all-scoped-internal(index-compare-name-substring(|prefix, namespace)|namespace, path, prefix)> x
+    x{[_|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix, namespace)|namespace, path, prefix)> x
       
 rules // Index utilities
   
@@ -1463,8 +1466,8 @@
         (added, removed) := ([], []);
         filesToAnalyze := []
       end
-    with
-      <list-loop(analyze-top-store-ast(|full-path))> astFilePairs4
+    //with
+    //  <list-loop(analyze-top-store-ast(|full-path))> astFilePairs4
       
   /**
    * Add URI annotations to each definition and unresolved URI annotations to each use site.
@@ -1496,10 +1499,10 @@
         ast2 := <prim(\"SSL_EXT_clone_and_set_parents\", <id>)> ast; // Parent pointers needed.
         data := <origin-track-forced(analyze-tree-data)> ast2;
         
-				// Resolve all references in gathered data.
-				(data2, _) := <analyze-uses> data;
-				<index-add-all(|file)> data2;
-				
+        // Resolve all references in gathered data.
+        (data2, _) := <analyze-uses> data;
+        <index-add-all(|file)> data2;
+        
         // Store reads into the index (if not testing language)
         if not(is-test-input(|language, full-path)) then
           <index-add-all(|file)> <iset-elements> readSet
@@ -1550,7 +1553,7 @@
     (ast, file) -> <id>
     where
       <is-string> file;
-      <index-add(|full-path)> AST([], ast)
+      <index-add(|full-path)> AST([AST()], ast)
       
   /**
    * Identifies all definitions in the tree and annotates them with their URI.
@@ -1559,10 +1562,10 @@
    * @internal
    */
   analyze-defs:
-  	ast -> (<analyze-defs(|[], set, Anon(), Anon())> ast, <iset-elements> set)
-  	where
-  		set := <new-iset>
-  		 
+    ast -> (<analyze-defs(|[], set, Anon(), Anon())> ast, <iset-elements> set)
+    where
+      set := <new-iset>
+       
   /** @internal */
   analyze-defs(|paths, defs, head-scope, head-scope-ns):
     ast{Scope([namespace, name | path])} -> ast'
@@ -1575,11 +1578,11 @@
   analyze-defs(|paths, defs, head-scope, head-scope-ns):
     ast -> ast'
     where
-    	<not(has-annos)> ast    	
+      <not(has-annos)> ast      
     with
       if (namespace, path) := <nam-get-definition> ast then
-      	definition     := <nam-get-def(|paths, namespace)> path;
-      	Def(def-path)  := definition; 
+        definition     := <nam-get-def(|paths, namespace)> path;
+        Def(def-path)  := definition; 
         head-scope-ns' := namespace;
         head-scope'    := <Hd> path;
         f#(children)   := <try(nam-annotate-scopes(|def-path))> ast;
@@ -1591,14 +1594,14 @@
         f#(children)   := ast
       end;
       if scope-types := <nam-get-scope-types> ast then
-      	unique          := Anon(<new>);
+        unique          := Anon(<new>);
         updates         := <map(construct-index-path(|paths, head-scope', head-scope-ns', unique, ast))> scope-types;
         paths'          := <update-index-paths(|updates)> paths;
         head-scope-ns'' := Anon();
         head-scope''    := Anon()
       else
-      	paths'          := paths;
-      	head-scope-ns'' := head-scope-ns';
+        paths'          := paths;
+        head-scope-ns'' := head-scope-ns';
         head-scope''    := head-scope'
       end;
       children' := <origin-track-forced(analyze-child-defs(|paths', defs, head-scope'', head-scope-ns''))> children;
@@ -1606,20 +1609,20 @@
        
   /** @internal */
   analyze-child-defs(|paths, defs, head-scope, head-scope-ns):
-  	[] -> []
-  	
+    [] -> []
+    
   /** @internal */
   analyze-child-defs(|paths, defs, head-scope, head-scope-ns):
-  	[d|ds] -> [d'|ds']
-  	where
-  	  d'  := <analyze-defs(|paths, defs, head-scope, head-scope-ns)> d ;
-  	  if <nam-ordered-def> d then
-  	  	[namespace, name | path] := <nam-get-definition-key ; index-uri> d' ;
+    [d|ds] -> [d'|ds']
+    where
+      d'  := <analyze-defs(|paths, defs, head-scope, head-scope-ns)> d ;
+      if <nam-ordered-def> d then
+        [namespace, name | path] := <nam-get-definition-key ; index-uri> d' ;
         paths'                   := <update-index-paths(|[(namespace, path)])> paths ;
-  	  	ds'                      := <analyze-child-defs(|paths', defs, Anon(), Anon())> ds
-  	  else
-  	    ds' := <analyze-child-defs(|paths, defs, head-scope, head-scope-ns)> ds
-  	  end
+        ds'                      := <analyze-child-defs(|paths', defs, Anon(), Anon())> ds
+      else
+        ds' := <analyze-child-defs(|paths, defs, head-scope, head-scope-ns)> ds
+      end
   
   /** @internal */
   construct-index-path(|paths, head-scope, head-scope-ns, unique, ast):
@@ -1634,9 +1637,9 @@
       end;
       // HACK: Disable generation of anonymous namespaces for unique definitions to let FieldAccess-like constructs work.
       if /*<nam-unique> ast*/ fail then
-      	path'' := <index-do-adjust-path(|scope-type, path', unique)> ast
+        path'' := <index-do-adjust-path(|scope-type, path', unique)> ast
       else
-      	path'' := path'
+        path'' := path'
       end
       
   /** @internal */
@@ -1711,36 +1714,37 @@
       
 rules // Parallel analysis
   
+  index-parallel-analyze(analyze) = index-analyze(parallel-unordered(all(index-do-analysis(analyze))))
+  index-sequential-analyze(analyze) = index-analyze(all(index-do-analysis(analyze)))
+  
   /** @internal */
-  index-parallel-analyze(analyze):
+  index-analyze(do-analysis):
     files -> allResults
     with
-      map(index-parse-file); // Parsing cannot be done in parallel.
-      map(\\(ast, file) -> (ast, file, <project-path>)\\);
-      parallel-unordered(all(index-analyze(analyze)));
-      ?results;
-      with(<eq> (<length> results, <length> files) | \"Input size not equal to output size\");
-      filesToAnalyze := <make-set> <mapconcat(?ParallelResults(_, _, _, _, _, <id>))> results;
-      if not([] := filesToAnalyze) then
-        allResults := <concat> [results, <index-parallel-analyze(analyze)> filesToAnalyze]
+      asts      := <map(index-parse-file)> files; 
+      data      := <map(\\(ast, file) -> (ast, file, <project-path>)\\)> asts;
+      results   := <do-analysis> data;
+      reanalyze := <make-set> <mapconcat(?ParallelResults(_, _, _, _, _, <id>))> results;
+      if not([] := reanalyze) then
+        allResults := <conc> (results, <index-analyze(do-analysis)> reanalyze)
       else
         allResults := results
       end
   
-  /** @internal */   
+  /** @internal */
   index-parse-file:
     file -> (ast', file)
     with
-	    if <file-exists> file then
-	    	if ast := <parse-file> file then
-	    		ast' := ast
-	      else
-	      	ast' := ()
-      	end
-	    else
-	      ast' := ()
-	    end
-   
+      if <file-exists> file then
+        if ast := <parse-file> file then
+          ast' := ast
+        else
+          ast' := ()
+        end
+      else
+        ast' := ()
+      end
+      
   /** @internal */   
   index-set-markers:
     ParallelResults(ast, ast', errors, warnings, notes, diffs) -> <id>
@@ -1748,11 +1752,11 @@
       <set-markers(|ast)> (ast', errors, warnings, notes)
       
   /** @internal */
-  index-analyze(analyze):
-    (ast, path, project-path) -> ParallelResults(ast, ast', errors, warnings, notes, filesToAnalyze)
+  index-do-analysis(analyze):
+    (ast, path, project-path) -> ParallelResults(ast, ast', errors, warnings, notes, reanalyze)
     with
-      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
-      if [] := filesToAnalyze then
+      (ast', errors, warnings, notes, reanalyze) := <analyze>;
+      if [] := reanalyze then
         complete-work-unit
       end
       
@@ -1881,10 +1885,10 @@
    *
    * @internal
    */
-  index-lookup-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix):
+  index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
     x -> definition
     where
-      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix)> x;
+      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
       
       if StopLookup() := defs then
         fail
@@ -1892,12 +1896,12 @@
       
       if not(definition := <Hd> defs) then
         [_|path']  := path;
-        definition := <index-lookup-internal(adjust-import, adjust-lookup, name-compare|namespace, path', prefix)> x
+        definition := <index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path', prefix)> x
       end
       
   /** @internal */
-  index-lookup-internal(name-compare|namespace, path, prefix) = 
-    index-lookup-internal(id, id, name-compare|namespace, path, prefix)
+  index-lookup-internal(get-defs, name-compare|namespace, path, prefix) = 
+    index-lookup-internal(id, id, get-defs, name-compare|namespace, path, prefix)
 
   /**
    * Given a term x, namespace n, path s and prefix p, looks for definitions in the scope of s 
@@ -1910,21 +1914,21 @@
    *
    * @internal
    */
-  index-lookup-all-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix):
+  index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
     x -> defs'
     where
-      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix)> x;
+      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
       
       if [_|path'] := path then
-        defs2 := <index-lookup-all-internal(adjust-import, adjust-lookup, name-compare|namespace, path', prefix)> x;
+        defs2 := <index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path', prefix)> x;
         defs' := <conc> (defs, defs2)
       else
         defs' := defs
       end
 
   /** @internal */
-  index-lookup-all-internal(name-compare|namespace, path, prefix) = 
-    index-lookup-all-internal(id, id, name-compare|namespace, path, prefix)
+  index-lookup-all-internal(get-defs, name-compare|namespace, path, prefix) = 
+    index-lookup-all-internal(id, id, get-defs, name-compare|namespace, path, prefix)
       
   /**
    * Given a term x, namespace n, path s and prefix p, looks for a definition in the 
@@ -1937,52 +1941,52 @@
    *
    * @internal
    */
-  index-lookup-all-scoped-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix):
+  index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
     x -> defs
     with
       adjust-lookup;
       adjusted := <index-do-adjust-lookup(|namespace, path, x, prefix)> x;
-      defs     := <index-get-adjust-lookup-results(adjust-import, name-compare|adjusted, prefix)> x
+      defs     := <index-get-adjust-lookup-results(adjust-import, get-defs, name-compare|adjusted, prefix)> x
     <+
       adjust-import;
       adjusted := <index-do-adjust-import(|namespace, path)> x;
-      defs     := <index-get-adjust-import-results(adjust-lookup, name-compare|adjusted, prefix)> x
+      defs     := <index-get-adjust-import-results(adjust-lookup, get-defs, name-compare|adjusted, prefix)> x
     <+
-      defs     := <index-get-children(\\uri -> Def(uri)\\, name-compare|namespace, prefix)> [namespace | path]
+      defs     := <get-defs(name-compare|namespace, prefix)> [namespace | path]
       
   /** @internal */
-  index-lookup-all-scoped-internal(name-compare|namespace, path, prefix) = 
-    index-lookup-all-scoped-internal(id, id, name-compare|namespace, path, prefix)
+  index-lookup-all-scoped-internal(get-defs, name-compare|namespace, path, prefix) = 
+    index-lookup-all-scoped-internal(id, id, get-defs, name-compare|namespace, path, prefix)
   
   /** @internal */
   index-do-adjust-import(|namespace, path) =
     adjust-index-import(|namespace, path)
     
   /** @internal */
-  index-get-adjust-import-results(adjust-lookup, name-compare|adjusted, prefix):
+  index-get-adjust-import-results(adjust-lookup, get-defs, name-compare|adjusted, prefix):
     x -> defs'
     with
       defs := 
         <mapconcat(
-             index-adjust-import-recurse(adjust-lookup, name-compare|x, prefix)
+             index-adjust-import-recurse(adjust-lookup, get-defs, name-compare|x, prefix)
           <+ fatal-err(|\"Unexpected result from adjust-index-import, should be a list of [namespace | path].\")
         )> adjusted;
         if not(<elem> (StopLookup(), defs)) then
-        	defs' := <filter(name-compare)> defs
+          defs' := <filter(name-compare)> defs
         else
-        	defs' := StopLookup()
-      	end
-      	
-  /** @internal */
-  index-adjust-import-recurse(adjust-lookup, name-compare|x, prefix):
-  	[namespace|path] -> results'
-  	with
-  		results := <index-lookup-all-scoped-internal(fail, adjust-lookup, name-compare|namespace, path, prefix)> x;
-  		if not(<is-list> results) then
-  			results' := [results]
-  		else
-  			results' := results
-			end
+          defs' := StopLookup()
+        end
+        
+  /** @internal */
+  index-adjust-import-recurse(adjust-lookup, get-defs, name-compare|x, prefix):
+    [namespace|path] -> results'
+    with
+      results := <index-lookup-all-scoped-internal(fail, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
+      if not(<is-list> results) then
+        results' := [results]
+      else
+        results' := results
+      end
         
   /** @internal */
   index-do-adjust-lookup(|namespace, path, use, prefix) =
@@ -1992,7 +1996,7 @@
     )
     
   /** @internal */  
-  index-get-adjust-lookup-results(adjust-import, name-compare|adjusted, prefix):
+  index-get-adjust-lookup-results(adjust-import, get-defs, name-compare|adjusted, prefix):
     x -> defs'
     with
       if StopLookup() := adjusted then
@@ -2001,11 +2005,29 @@
         defs := 
           <mapconcat(
                \\d at Def(p) -> [d]\\
-            <+ \\[namespace'|path'] -> <index-lookup-all-scoped-internal(adjust-import, fail, name-compare|namespace', path', prefix)> x\\
+            <+ \\[namespace'|path'] -> <index-lookup-all-scoped-internal(adjust-import, fail, get-defs, name-compare|namespace', path', prefix)> x\\
             <+ fatal-err(|\"Unexpected result from adjust-index-lookup, should be a list of Def(uri) or [namespace | path], or StopLookup() to stop the lookup.\")
           )> adjusted;
           defs' := <filter(name-compare)> defs
       end
+
+rules // Definition retrieval
+  
+  /**
+   * Gets all definitions from the index with given name, namespace and path.
+   * 
+   * @internal 
+   */   
+  index-get-defs(name-compare|namespace, name):
+    [ns|path] -> <index-get-all> Def([ns, name|path])
+  
+  /**
+   * Gets all definitions from the index with given prefix, namespace, path and name-comparison strategy.
+   * 
+   * @internal 
+   */   
+  index-get-defs-prefix(name-compare|namespace, prefix) = 
+    index-get-children(\\uri -> Def(uri)\\, name-compare|namespace, prefix)
       
 rules // Name comparisons
 
@@ -2181,7 +2203,7 @@
   nam-annotate-def(|path):
     t -> result
     with
-    	result := t{path}
+      result := t{path}
   
   /** @internal */ 
   nam-annotate-use(|paths, namespace):
@@ -2189,8 +2211,8 @@
   
   /** @internal */ 
   nam-annotate-use(|paths, namespace, namespace2, name):
-  	t -> t{[Unresolved(namespace), t | <lookup-index-path> (namespace, paths)]}
-  	
+    t -> t{[Unresolved(namespace), t | <lookup-index-path> (namespace, paths)]}
+    
   /** @internal */ 
   nam-annotate-scope(|path):
     t -> t{Scope(path)}
@@ -2328,7 +2350,7 @@
   index-compilation-file:
     (path, subfile) -> None()
     with
-    	asts := <index-get-all-values> AST(subfile, ());
+      asts := <index-get-all-values> AST(subfile, ());
       <map(index-compilation-ast(|path, subfile))> asts
       
   /** @internal */    
@@ -2337,10 +2359,10 @@
     with
       asts := <index-get-all-values> AST(subfile, ());
       if 1 := <length> asts then
-      	ast := <?[<id>|_]> asts
-    	else
-    		ast := <try(index-combine-asts)> asts
-  		end;
+        ast := <?[<id>|_]> asts
+      else
+        ast := <try(index-combine-asts)> asts
+      end;
       <index-compilation-ast(|path, subfile)> ast
       
   /** @internal */
@@ -2467,8 +2489,8 @@
 
   /** @internal */
   index-file-is-partial:
-  	file -> file
-  	where 
+    file -> file
+    where 
       Snd; index-uri; index-is-partial-ast
 "
 
@@ -2559,16 +2581,16 @@
       <gt> (<length> defs, 1)
       
 rules // Type dependant lookup
-	
-	/**
+  
+  /**
    * Given an annotated AST node and a type, resolves it and checks if type equals given type, returning its definition.
    * Uses precise matching for names.
    *
-   * @param type	Only definitions with this type are returned.
+   * @param type  Only definitions with this type are returned.
    * @type \"name\"{uri} -> ?Def(uri')
    */
   index-lookup-typed(|type):
-    x{[namespace|path]} -> <index-lookup-internal(index-compare-nametype-equal(|name, type)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-nametype-equal(|name, type)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -2579,11 +2601,11 @@
    * Uses substring matching for names.
    *
    * @param prefix    Only definitions with a name that starts with this string are returned.
-   * @param type			Only definitions with this type are returned.
+   * @param type      Only definitions with this type are returned.
    * @type \"name\"{uri} -> List(Def(uri'))
    */
   index-lookup-all-typed(|prefix, type):
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-nametype-substring(|prefix, type)|ns, path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-nametype-substring(|prefix, type)|ns, path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace
 
@@ -2613,10 +2635,10 @@
   
   /** @internal */
   nbl-get-type:
-  	uri -> <index-get-data(|Type())> Def(uri)
+    uri -> <index-get-data(|Type())> Def(uri)
   
   // TODO: Allow user defined type equality.
-  /** @internal */	
+  /** @internal */  
   nbl-type-eq(|type) = 
-  	<eq> (<id>, type)
+    <eq> (<id>, type)
 "
\ No newline at end of file

From gabrielkonat at gmail.com  Thu Dec  6 20:58:47 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Thu, 06 Dec 2012 19:58:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25760 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index
Message-ID: <20121206195847.3C05F2B8037@mx2.tudelft.nl>

Author: gkonat
Date: Thu Dec  6 19:58:46 2012
New Revision: 25760
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25760&sc=1

Log:
Create a clean index if index loaded from cache is corrupted.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Thu Dec  6 19:22:47 2012	(r25759)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Thu Dec  6 19:58:46 2012	(r25760)
@@ -150,7 +150,7 @@
         try {
             IStrategoTerm term = new TermReader(factory).parseFromFile(file.toString());
             return Index.fromTerm(term, factory, agent, true); // TODO: Move to other class
-        } catch(IOException e) {
+        } catch(Exception e) {
             return null;
         }
     }

From gabrielkonat at gmail.com  Thu Dec  6 21:18:15 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Thu, 06 Dec 2012 20:18:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25761 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/...
Message-ID: <20121206201815.34F6A2B8015@mx2.tudelft.nl>

Author: gkonat
Date: Thu Dec  6 20:18:13 2012
New Revision: 25761
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25761&sc=1

Log:
Don't call on-save handler when one file is changed.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java	Thu Dec  6 19:58:46 2012	(r25760)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java	Thu Dec  6 20:18:13 2012	(r25761)
@@ -79,7 +79,7 @@
 			});
 			
 			if(changedFiles.size() > 0)
-				NotificationCenter.notifyFileChanges(changedFiles.toArray(new FilePartition[0]));
+				NotificationCenter.notifyFileChanges(changedFiles.toArray(new FilePartition[0]), false);
 		} catch (CoreException e) {
 			Environment.logException("Exception when processing fileystem events", e);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Thu Dec  6 19:58:46 2012	(r25760)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Thu Dec  6 20:18:13 2012	(r25761)
@@ -20,68 +20,71 @@
 import org.strategoxt.imp.runtime.services.StrategoAnalysisQueueFactory;
 
 /**
- * A {@link INotificationService} that uses {@link StrategoAnalysisQueueFactory}.
+ * A {@link INotificationService} that uses {@link StrategoAnalysisQueueFactory}
+ * .
  * 
- * Receives notifications sent by {@link FileNotificationServer} to the {@link NotificationCenter}.
+ * Receives notifications sent by {@link FileNotificationServer} to the
+ * {@link NotificationCenter}.
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class QueueAnalysisService implements INotificationService {
 
-	public void notifyChanges(URI file, String subfile) {
+	public void notifyChanges(URI file, String subfile, boolean triggerOnSave) {
 		try {
 			IProject project = EditorIOAgent.getProject(new File(file));
 			IPath relPath = relativePath(file, subfile);
-			StrategoAnalysisQueueFactory.getInstance().queueAnalysis(relPath, project, true);
+			StrategoAnalysisQueueFactory.getInstance().queueAnalysis(relPath, project, triggerOnSave);
 		} catch (FileNotFoundException e) {
 			Environment.logException("Background language service failed", e);
 		} catch (RuntimeException e) {
 			Environment.logException("Background language service failed", e);
 		}
 	}
-	
-	public void notifyChanges(FilePartition[] files) {
-		if(files.length == 0)
+
+	public void notifyChanges(FilePartition[] files, boolean triggerOnSave) {
+		if (files.length == 0)
 			return;
-		
+
 		List<IPath> relativePaths = new ArrayList<IPath>(files.length);
-		for(FilePartition file : files) {
+		for (FilePartition file : files) {
 			try {
 				IPath path = relativePath(file.file, file.partition);
-				if(path != null)
+				if (path != null)
 					relativePaths.add(path);
 			} catch (FileNotFoundException e) {
 				// Ignore exception, path is not added.
 			}
 		}
-		
+
 		try {
 			// TODO: assuming all projects are the same, is that fine?
 			IProject project = EditorIOAgent.getProject(new File(files[0].file));
-			StrategoAnalysisQueueFactory.getInstance().queueAnalysis(relativePaths.toArray(new IPath[0]), project, false);
+			StrategoAnalysisQueueFactory.getInstance().queueAnalysis(
+					relativePaths.toArray(new IPath[0]), project, triggerOnSave);
 		} catch (FileNotFoundException e) {
 			Environment.logException("Background language service failed", e);
 		}
 	}
-	
+
 	private IPath relativePath(URI file, String subfile) throws FileNotFoundException {
 		assert file.isAbsolute();
-		
+
 		IProject project = EditorIOAgent.getProject(new File(file));
 		IPath path = new Path(file.getPath());
-		if(LanguageRegistry.findLanguage(path, null) != null)
-		{
-			IPath relPath = path.removeFirstSegments(path.matchingFirstSegments(project.getLocation()));
+		if (LanguageRegistry.findLanguage(path, null) != null) {
+			IPath relPath = path.removeFirstSegments(path.matchingFirstSegments(project
+					.getLocation()));
 			assert !relPath.isAbsolute();
 			return relPath;
 		}
-		
+
 		return null;
 	}
 
 	/**
-	 * Notify changes of all files in a project,
-	 * as long as they are known to have an index associated with them.
+	 * Notify changes of all files in a project, as long as they are known to
+	 * have an index associated with them.
 	 */
 	public void notifyNewProject(URI project) {
 		Debug.log("Loading uninitialized project ", project);
@@ -89,17 +92,17 @@
 	}
 
 	private void notifyNewProjectFiles(File file) {
-		notifyChanges(getProjectFileSubfiles(file).toArray(new FilePartition[0]));
+		notifyChanges(getProjectFileSubfiles(file).toArray(new FilePartition[0]), true);
 	}
-	
+
 	private List<FilePartition> getProjectFileSubfiles(File file) {
 		List<FilePartition> fileSubfiles = new ArrayList<FilePartition>();
-		if(file.isFile()) {
+		if (file.isFile()) {
 			if (isIndexedFile(new Path(file.getAbsolutePath()))) {
 				fileSubfiles.add(new FilePartition(file.toURI(), null));
 			}
 		} else {
-			for(File child : file.listFiles()) {
+			for (File child : file.listFiles()) {
 				fileSubfiles.addAll(getProjectFileSubfiles(child));
 			}
 		}
@@ -110,5 +113,5 @@
 		Language language = LanguageRegistry.findLanguage(path, null);
 		return language != null && IndexManager.isKnownIndexingLanguage(language.getName());
 	}
-	
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java	Thu Dec  6 19:58:46 2012	(r25760)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java	Thu Dec  6 20:18:13 2012	(r25761)
@@ -11,15 +11,17 @@
      * 
      * @param file The URI of the file
      * @param partition The partition, or null if not applicable.
+     * @param triggerOnSave If the on save handler of changed file should be called.
      */
-    void notifyChanges(URI file, String partition);
+    void notifyChanges(URI file, String partition, boolean triggerOnSave);
 
     /**
      * Notify listeners of multiple added/removed/changed files with optional partitions.
      * 
      * @param files The changed files.
+     * @param triggerOnSave If the on save handler of changed file should be called.
      */
-    void notifyChanges(FilePartition[] files);
+    void notifyChanges(FilePartition[] files, boolean triggerOnSave);
 
     /**
      * Notify listener of a new project.

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java	Thu Dec  6 19:58:46 2012	(r25760)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java	Thu Dec  6 20:18:13 2012	(r25761)
@@ -21,11 +21,12 @@
      * 
      * @param file The URI of the file
      * @param partition The partition, or null if not applicable.
+     * @param triggerOnSave If the on save handler of changed file should be called.
      */
-    public synchronized static void notifyFileChanges(URI file, String partition) {
+    public synchronized static void notifyFileChanges(URI file, String partition, boolean triggerOnSave) {
         assert file.isAbsolute();
         for(INotificationService observer : asyncObservers.values()) {
-            observer.notifyChanges(file, partition);
+            observer.notifyChanges(file, partition, triggerOnSave);
         }
     }
 
@@ -33,11 +34,12 @@
      * Notify listeners of multiple added/removed/moved/modified files with optional partitions.
      * 
      * @param files The changed files.
+     * @param triggerOnSave If the on save handler of changed file should be called.
      */
-    public synchronized static void notifyFileChanges(FilePartition[] files) {
+    public synchronized static void notifyFileChanges(FilePartition[] files, boolean triggerOnSave) {
         if(files.length == 1) {
             FilePartition file = files[0];
-            notifyFileChanges(file.file, file.partition);
+            notifyFileChanges(file.file, file.partition, triggerOnSave);
             return;
         }
 
@@ -46,7 +48,7 @@
         }
 
         for(INotificationService observer : asyncObservers.values()) {
-            observer.notifyChanges(files);
+            observer.notifyChanges(files, triggerOnSave);
         }
     }
 

From v.vergu+vc at gmail.com  Thu Dec  6 22:00:25 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Thu, 06 Dec 2012 21:00:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25762 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20121206210025.6991D2B800A@mx2.tudelft.nl>

Author: VladVergu
Date: Thu Dec  6 21:00:23 2012
New Revision: 25762
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25762&sc=1

Log:
argh

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 20:18:13 2012	(r25761)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  6 21:00:23 2012	(r25762)
@@ -145,7 +145,7 @@
         <mkdir dir="${lib}"/>
         <mkdir dir="${syntax}"/>
 
-        <!-- <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/> -->
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
             <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">

From v.vergu+vc at gmail.com  Thu Dec  6 23:11:53 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Thu, 06 Dec 2012 22:11:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25763 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20121206221153.8A8AA2B8015@mx2.tudelft.nl>

Author: VladVergu
Date: Thu Dec  6 22:11:51 2012
New Revision: 25763
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25763&sc=1

Log:
Minor fix

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str	Thu Dec  6 21:00:23 2012	(r25762)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str	Thu Dec  6 22:11:51 2012	(r25763)
@@ -22,7 +22,8 @@
 include/",name,".packed.esv
 include/",name,".pp.af
 include/",name,".rtg
-include/",name,".str"
+include/",name,".str
+"
 ), "include/",name,".tbl
 include/",name',".rtree
 include/",name',".ctree

From richard at vogelij.nl  Fri Dec  7 10:46:03 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Fri, 07 Dec 2012 09:46:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25764 -
	spoofax-ace/trunk/spoofax-ace/resources/javascript
Message-ID: <20121207094603.B55FA7F80CC@mx1.tudelft.nl>

Author: rvogelij
Date: Fri Dec  7 09:46:01 2012
New Revision: 25764
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25764&sc=1

Log:
Defaulting the server host to localhost in stead of my testing pc

Modified:
   spoofax-ace/trunk/spoofax-ace/resources/javascript/partitioner.js
   spoofax-ace/trunk/spoofax-ace/resources/javascript/s2aclient.js

Modified: spoofax-ace/trunk/spoofax-ace/resources/javascript/partitioner.js
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/resources/javascript/partitioner.js	Thu Dec  6 22:11:51 2012	(r25763)
+++ spoofax-ace/trunk/spoofax-ace/resources/javascript/partitioner.js	Fri Dec  7 09:46:01 2012	(r25764)
@@ -78,6 +78,8 @@
 
 Partitioner.handleDelegationOfWork = function(doc)
 {
+	//S2AClient.s2aclient(doc, true);
+	//return;
 	console.log("delegateWork");
 	if (Partitioner.partitionerIsRunningAJob)
 	{

Modified: spoofax-ace/trunk/spoofax-ace/resources/javascript/s2aclient.js
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/resources/javascript/s2aclient.js	Thu Dec  6 22:11:51 2012	(r25763)
+++ spoofax-ace/trunk/spoofax-ace/resources/javascript/s2aclient.js	Fri Dec  7 09:46:01 2012	(r25764)
@@ -1,6 +1,6 @@
 
 var S2AClient = {};
-S2AClient.SERVERURL = 'ws://richard.vogelij.nl:8080/s2aserver';
+S2AClient.SERVERURL = 'ws://localhost:8080/s2aserver';
 S2AClient.S2A_FULL_MESSAGE = "0";
 S2AClient.S2A_DIFF_PATCH_MESSAGE = "1";
 S2AClient.s2aclient_loading=false;

From gabrielkonat at gmail.com  Fri Dec  7 11:03:25 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Fri, 07 Dec 2012 10:03:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25765 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index
Message-ID: <20121207100325.98C2F108C007@mx3.tudelft.nl>

Author: gkonat
Date: Fri Dec  7 10:03:25 2012
New Revision: 25765
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25765&sc=1

Log:
Fixed http://yellowgrass.org/issue/Spoofax/585

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java	Fri Dec  7 09:46:01 2012	(r25764)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java	Fri Dec  7 10:03:25 2012	(r25765)
@@ -81,7 +81,7 @@
             return cachedString;
 
         cachedString =
-            "partition".equals(uri.getScheme()) ? new File(uri).getAbsolutePath().replace("\\", "/") : uri.toString();
+            "file".equals(uri.getScheme()) ? new File(uri).getAbsolutePath().replace("\\", "/") : uri.toString();
 
         return cachedString;
     }

From gabrielkonat at gmail.com  Fri Dec  7 11:29:21 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Fri, 07 Dec 2012 10:29:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25766 - in
	spoofax-imp/trunk/org.strategoxt.imp.names: . editor lib trans
Message-ID: <20121207102921.9BDED7F801C@mx1.tudelft.nl>

Author: gkonat
Date: Fri Dec  7 10:29:20 2012
New Revision: 25766
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25766&sc=1

Log:
Fixed duplicate definitions in NBL after rename

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.names/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.names/editor/NameDefinitionLanguage-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.names/lib/analysis-library-internal.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.names/lib/analysis-library.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.names/lib/compilation-library.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.names/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.names/lib/nbl-library.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.names/trans/namedefinitionlanguage.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.names/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.names/build.generated.xml	Fri Dec  7 10:03:25 2012	(r25765)
+++ spoofax-imp/trunk/org.strategoxt.imp.names/build.generated.xml	Fri Dec  7 10:29:20 2012	(r25766)
@@ -3,8 +3,34 @@
 <project name="build.generated">
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
-        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.ctree" depends="
+			check-classpath,
+			init,
+			sdf2table,
+			meta-sdf2table,
+			ppgen,
+			pppack,
+			sdf2imp.eclipse,
+			sdf2imp.standalone,
+			sdf2parenthesize,
+			stratego.aster,
+			java.jar,
+			stratego.ctree,
+			refresh"/>
+        <target name="spoofaximp.default.jar" depends="
+			check-classpath,
+			init,
+			sdf2table,
+			meta-sdf2table,
+			ppgen,
+			pppack,
+			sdf2imp.eclipse,
+			sdf2imp.standalone,
+			sdf2parenthesize,
+			stratego.aster,
+			java.jar,
+			stratego.jar.helper,
+			refresh"/>
     
         <!-- Initialization -->
         <available file="${src-gen}/org/strategoxt/imp/names/strategies/Main.java" property="java.jar.enabled"/>
@@ -629,12 +655,44 @@
             </apply>
         </target>
         
-        <target name="clean" description="Selective clean up">
-            <delete dir="${build}"/>
-            <delete file="${include}/${sdfmodule}.def"/>
-            <delete file="${include}/${strmodule}.rtree"/>
-            <delete file="${include}/${strmodule}.ctree"/>
-            <delete file="${include}/${strmodule}.jar"/>
-            <delete dir="${src-gen}/trans"/>
-        </target>
+	<target name="clean" description="Clean project">
+		<delete dir="${build}"/>
+		<delete dir=".cache"/>
+		<delete file="${include}/${sdfmodule}.def"/>
+		<delete file="${include}/${sdfmodule}-parenthesize.str"/>
+		<delete file="${include}/${sdfmodule}-Permissive.def"/>
+		<delete file="${include}/${sdfmodule}.generated.pp.af"/>
+		<delete file="${include}/${sdfmodule}.packed.esv"/>
+		<delete file="${include}/${sdfmodule}.pp.af"/>
+		<delete file="${include}/${sdfmodule}.rtg"/>
+		<delete file="${include}/${sdfmodule}.str"/>
+		<delete file="${include}/${sdfmodule}.tbl"/>
+		<delete file="${include}/${strmodule}.rtree"/>
+		<delete file="${include}/${strmodule}.ctree"/>
+		<delete file="${include}/${strmodule}.ctree.dep"/>
+		<delete file="${include}/${strmodule}.jar"/>
+		<delete>
+			<fileset dir="editor" includes="*.generated.esv"/>
+		</delete>
+		<delete dir="${src-gen}/trans"/>
+		<delete file="editor/${sdfmodule}.generated.esv"/>
+		<delete file="${syntax}/${sdfmodule}.generated.esv"/>
+		<delete file="${syntax}/${sdfmodule}.generated.pp"/>
+		<delete file="${include}/${metasdfmodule}-Permissive.def"/>
+		<delete file="${include}/${metasdfmodule}.def"/>
+		<delete file="${include}/${metasdfmodule}.tbl"/>
+		<delete file=".settings/org.eclipse.jdt.core.prefs"/>
+		<delete dir="utils"/>
+		<delete>
+			<fileset dir="lib-refactoring" includes="*.generated.str"/>
+			<fileset dir="${lib}" includes="*.generated.str"/>
+		</delete>
+		<antcall target="refresh-cleaned"/>
+	</target>
+	
+	<target name="refresh-cleaned" if="eclipse.running">
+        <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+        <eclipse.refreshLocal resource="${projectdir}" depth="infinite"/>
+    </target>
+	
     </project>
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.names/editor/NameDefinitionLanguage-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.names/editor/NameDefinitionLanguage-Builders.esv	Fri Dec  7 10:03:25 2012	(r25765)
+++ spoofax-imp/trunk/org.strategoxt.imp.names/editor/NameDefinitionLanguage-Builders.esv	Fri Dec  7 10:29:20 2012	(r25766)
@@ -21,7 +21,7 @@
   builder  : "Show analyzed syntax" = debug-generate-analyzed (openeditor) (realtime) (meta) (source)
   builder  : "Show index entries for current file" = debug-index-show-current-file (openeditor) (realtime) (meta) (source)
   builder  : "Show index entries for all files" = debug-index-show-all-files (openeditor) (realtime) (meta) (source)
-  builder  : "Clear index for current file" = debug-index-clear-current (meta) (source)
+  builder  : "Clear index for current file" = debug-index-clear-current (source)
   builder  : "Clear index" = debug-index-clear (meta) (source)
   builder  : "Reload index" = debug-index-reload (meta) (source)                                                                                           
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.names/lib/analysis-library-internal.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.names/lib/analysis-library-internal.generated.str	Fri Dec  7 10:03:25 2012	(r25765)
+++ spoofax-imp/trunk/org.strategoxt.imp.names/lib/analysis-library-internal.generated.str	Fri Dec  7 10:29:20 2012	(r25766)
@@ -76,8 +76,8 @@
         (added, removed) := ([], []);
         filesToAnalyze := []
       end
-    with
-      <list-loop(analyze-top-store-ast(|full-path))> astFilePairs4
+    //with
+    //  <list-loop(analyze-top-store-ast(|full-path))> astFilePairs4
       
   /**
    * Add URI annotations to each definition and unresolved URI annotations to each use site.
@@ -109,10 +109,10 @@
         ast2 := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast; // Parent pointers needed.
         data := <origin-track-forced(analyze-tree-data)> ast2;
         
-				// Resolve all references in gathered data.
-				(data2, _) := <analyze-uses> data;
-				<index-add-all(|file)> data2;
-				
+        // Resolve all references in gathered data.
+        (data2, _) := <analyze-uses> data;
+        <index-add-all(|file)> data2;
+        
         // Store reads into the index (if not testing language)
         if not(is-test-input(|language, full-path)) then
           <index-add-all(|file)> <iset-elements> readSet
@@ -163,7 +163,7 @@
     (ast, file) -> <id>
     where
       <is-string> file;
-      <index-add(|full-path)> AST([], ast)
+      <index-add(|full-path)> AST([AST()], ast)
       
   /**
    * Identifies all definitions in the tree and annotates them with their URI.
@@ -172,10 +172,10 @@
    * @internal
    */
   analyze-defs:
-  	ast -> (<analyze-defs(|[], set, Anon(), Anon())> ast, <iset-elements> set)
-  	where
-  		set := <new-iset>
-  		 
+    ast -> (<analyze-defs(|[], set, Anon(), Anon())> ast, <iset-elements> set)
+    where
+      set := <new-iset>
+       
   /** @internal */
   analyze-defs(|paths, defs, head-scope, head-scope-ns):
     ast{Scope([namespace, name | path])} -> ast'
@@ -188,11 +188,11 @@
   analyze-defs(|paths, defs, head-scope, head-scope-ns):
     ast -> ast'
     where
-    	<not(has-annos)> ast    	
+      <not(has-annos)> ast      
     with
       if (namespace, path) := <nam-get-definition> ast then
-      	definition     := <nam-get-def(|paths, namespace)> path;
-      	Def(def-path)  := definition; 
+        definition     := <nam-get-def(|paths, namespace)> path;
+        Def(def-path)  := definition; 
         head-scope-ns' := namespace;
         head-scope'    := <Hd> path;
         f#(children)   := <try(nam-annotate-scopes(|def-path))> ast;
@@ -204,14 +204,14 @@
         f#(children)   := ast
       end;
       if scope-types := <nam-get-scope-types> ast then
-      	unique          := Anon(<new>);
+        unique          := Anon(<new>);
         updates         := <map(construct-index-path(|paths, head-scope', head-scope-ns', unique, ast))> scope-types;
         paths'          := <update-index-paths(|updates)> paths;
         head-scope-ns'' := Anon();
         head-scope''    := Anon()
       else
-      	paths'          := paths;
-      	head-scope-ns'' := head-scope-ns';
+        paths'          := paths;
+        head-scope-ns'' := head-scope-ns';
         head-scope''    := head-scope'
       end;
       children' := <origin-track-forced(analyze-child-defs(|paths', defs, head-scope'', head-scope-ns''))> children;
@@ -219,20 +219,20 @@
        
   /** @internal */
   analyze-child-defs(|paths, defs, head-scope, head-scope-ns):
-  	[] -> []
-  	
+    [] -> []
+    
   /** @internal */
   analyze-child-defs(|paths, defs, head-scope, head-scope-ns):
-  	[d|ds] -> [d'|ds']
-  	where
-  	  d'  := <analyze-defs(|paths, defs, head-scope, head-scope-ns)> d ;
-  	  if <nam-ordered-def> d then
-  	  	[namespace, name | path] := <nam-get-definition-key ; index-uri> d' ;
+    [d|ds] -> [d'|ds']
+    where
+      d'  := <analyze-defs(|paths, defs, head-scope, head-scope-ns)> d ;
+      if <nam-ordered-def> d then
+        [namespace, name | path] := <nam-get-definition-key ; index-uri> d' ;
         paths'                   := <update-index-paths(|[(namespace, path)])> paths ;
-  	  	ds'                      := <analyze-child-defs(|paths', defs, Anon(), Anon())> ds
-  	  else
-  	    ds' := <analyze-child-defs(|paths, defs, head-scope, head-scope-ns)> ds
-  	  end
+        ds'                      := <analyze-child-defs(|paths', defs, Anon(), Anon())> ds
+      else
+        ds' := <analyze-child-defs(|paths, defs, head-scope, head-scope-ns)> ds
+      end
   
   /** @internal */
   construct-index-path(|paths, head-scope, head-scope-ns, unique, ast):
@@ -247,9 +247,9 @@
       end;
       // HACK: Disable generation of anonymous namespaces for unique definitions to let FieldAccess-like constructs work.
       if /*<nam-unique> ast*/ fail then
-      	path'' := <index-do-adjust-path(|scope-type, path', unique)> ast
+        path'' := <index-do-adjust-path(|scope-type, path', unique)> ast
       else
-      	path'' := path'
+        path'' := path'
       end
       
   /** @internal */
@@ -324,36 +324,37 @@
       
 rules // Parallel analysis
   
+  index-parallel-analyze(analyze) = index-analyze(parallel-unordered(all(index-do-analysis(analyze))))
+  index-sequential-analyze(analyze) = index-analyze(all(index-do-analysis(analyze)))
+  
   /** @internal */
-  index-parallel-analyze(analyze):
+  index-analyze(do-analysis):
     files -> allResults
     with
-      map(index-parse-file); // Parsing cannot be done in parallel.
-      map(\(ast, file) -> (ast, file, <project-path>)\);
-      parallel-unordered(all(index-analyze(analyze)));
-      ?results;
-      with(<eq> (<length> results, <length> files) | "Input size not equal to output size");
-      filesToAnalyze := <make-set> <mapconcat(?ParallelResults(_, _, _, _, _, <id>))> results;
-      if not([] := filesToAnalyze) then
-        allResults := <concat> [results, <index-parallel-analyze(analyze)> filesToAnalyze]
+      asts      := <map(index-parse-file)> files; 
+      data      := <map(\(ast, file) -> (ast, file, <project-path>)\)> asts;
+      results   := <do-analysis> data;
+      reanalyze := <make-set> <mapconcat(?ParallelResults(_, _, _, _, _, <id>))> results;
+      if not([] := reanalyze) then
+        allResults := <conc> (results, <index-analyze(do-analysis)> reanalyze)
       else
         allResults := results
       end
   
-  /** @internal */   
+  /** @internal */
   index-parse-file:
     file -> (ast', file)
     with
-	    if <file-exists> file then
-	    	if ast := <parse-file> file then
-	    		ast' := ast
-	      else
-	      	ast' := ()
-      	end
-	    else
-	      ast' := ()
-	    end
-   
+      if <file-exists> file then
+        if ast := <parse-file> file then
+          ast' := ast
+        else
+          ast' := ()
+        end
+      else
+        ast' := ()
+      end
+      
   /** @internal */   
   index-set-markers:
     ParallelResults(ast, ast', errors, warnings, notes, diffs) -> <id>
@@ -361,11 +362,11 @@
       <set-markers(|ast)> (ast', errors, warnings, notes)
       
   /** @internal */
-  index-analyze(analyze):
-    (ast, path, project-path) -> ParallelResults(ast, ast', errors, warnings, notes, filesToAnalyze)
+  index-do-analysis(analyze):
+    (ast, path, project-path) -> ParallelResults(ast, ast', errors, warnings, notes, reanalyze)
     with
-      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
-      if [] := filesToAnalyze then
+      (ast', errors, warnings, notes, reanalyze) := <analyze>;
+      if [] := reanalyze then
         complete-work-unit
       end
       
@@ -494,10 +495,10 @@
    *
    * @internal
    */
-  index-lookup-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix):
+  index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
     x -> definition
     where
-      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix)> x;
+      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
       
       if StopLookup() := defs then
         fail
@@ -505,12 +506,12 @@
       
       if not(definition := <Hd> defs) then
         [_|path']  := path;
-        definition := <index-lookup-internal(adjust-import, adjust-lookup, name-compare|namespace, path', prefix)> x
+        definition := <index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path', prefix)> x
       end
       
   /** @internal */
-  index-lookup-internal(name-compare|namespace, path, prefix) = 
-    index-lookup-internal(id, id, name-compare|namespace, path, prefix)
+  index-lookup-internal(get-defs, name-compare|namespace, path, prefix) = 
+    index-lookup-internal(id, id, get-defs, name-compare|namespace, path, prefix)
 
   /**
    * Given a term x, namespace n, path s and prefix p, looks for definitions in the scope of s 
@@ -523,21 +524,21 @@
    *
    * @internal
    */
-  index-lookup-all-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix):
+  index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
     x -> defs'
     where
-      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix)> x;
+      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
       
       if [_|path'] := path then
-        defs2 := <index-lookup-all-internal(adjust-import, adjust-lookup, name-compare|namespace, path', prefix)> x;
+        defs2 := <index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path', prefix)> x;
         defs' := <conc> (defs, defs2)
       else
         defs' := defs
       end
 
   /** @internal */
-  index-lookup-all-internal(name-compare|namespace, path, prefix) = 
-    index-lookup-all-internal(id, id, name-compare|namespace, path, prefix)
+  index-lookup-all-internal(get-defs, name-compare|namespace, path, prefix) = 
+    index-lookup-all-internal(id, id, get-defs, name-compare|namespace, path, prefix)
       
   /**
    * Given a term x, namespace n, path s and prefix p, looks for a definition in the 
@@ -550,52 +551,52 @@
    *
    * @internal
    */
-  index-lookup-all-scoped-internal(adjust-import, adjust-lookup, name-compare|namespace, path, prefix):
+  index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
     x -> defs
     with
       adjust-lookup;
       adjusted := <index-do-adjust-lookup(|namespace, path, x, prefix)> x;
-      defs     := <index-get-adjust-lookup-results(adjust-import, name-compare|adjusted, prefix)> x
+      defs     := <index-get-adjust-lookup-results(adjust-import, get-defs, name-compare|adjusted, prefix)> x
     <+
       adjust-import;
       adjusted := <index-do-adjust-import(|namespace, path)> x;
-      defs     := <index-get-adjust-import-results(adjust-lookup, name-compare|adjusted, prefix)> x
+      defs     := <index-get-adjust-import-results(adjust-lookup, get-defs, name-compare|adjusted, prefix)> x
     <+
-      defs     := <index-get-children(\uri -> Def(uri)\, name-compare|namespace, prefix)> [namespace | path]
+      defs     := <get-defs(name-compare|namespace, prefix)> [namespace | path]
       
   /** @internal */
-  index-lookup-all-scoped-internal(name-compare|namespace, path, prefix) = 
-    index-lookup-all-scoped-internal(id, id, name-compare|namespace, path, prefix)
+  index-lookup-all-scoped-internal(get-defs, name-compare|namespace, path, prefix) = 
+    index-lookup-all-scoped-internal(id, id, get-defs, name-compare|namespace, path, prefix)
   
   /** @internal */
   index-do-adjust-import(|namespace, path) =
     adjust-index-import(|namespace, path)
     
   /** @internal */
-  index-get-adjust-import-results(adjust-lookup, name-compare|adjusted, prefix):
+  index-get-adjust-import-results(adjust-lookup, get-defs, name-compare|adjusted, prefix):
     x -> defs'
     with
       defs := 
         <mapconcat(
-             index-adjust-import-recurse(adjust-lookup, name-compare|x, prefix)
+             index-adjust-import-recurse(adjust-lookup, get-defs, name-compare|x, prefix)
           <+ fatal-err(|"Unexpected result from adjust-index-import, should be a list of [namespace | path].")
         )> adjusted;
         if not(<elem> (StopLookup(), defs)) then
-        	defs' := <filter(name-compare)> defs
+          defs' := <filter(name-compare)> defs
         else
-        	defs' := StopLookup()
-      	end
-      	
-  /** @internal */
-  index-adjust-import-recurse(adjust-lookup, name-compare|x, prefix):
-  	[namespace|path] -> results'
-  	with
-  		results := <index-lookup-all-scoped-internal(fail, adjust-lookup, name-compare|namespace, path, prefix)> x;
-  		if not(<is-list> results) then
-  			results' := [results]
-  		else
-  			results' := results
-			end
+          defs' := StopLookup()
+        end
+        
+  /** @internal */
+  index-adjust-import-recurse(adjust-lookup, get-defs, name-compare|x, prefix):
+    [namespace|path] -> results'
+    with
+      results := <index-lookup-all-scoped-internal(fail, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
+      if not(<is-list> results) then
+        results' := [results]
+      else
+        results' := results
+      end
         
   /** @internal */
   index-do-adjust-lookup(|namespace, path, use, prefix) =
@@ -605,7 +606,7 @@
     )
     
   /** @internal */  
-  index-get-adjust-lookup-results(adjust-import, name-compare|adjusted, prefix):
+  index-get-adjust-lookup-results(adjust-import, get-defs, name-compare|adjusted, prefix):
     x -> defs'
     with
       if StopLookup() := adjusted then
@@ -614,11 +615,29 @@
         defs := 
           <mapconcat(
                \d at Def(p) -> [d]\
-            <+ \[namespace'|path'] -> <index-lookup-all-scoped-internal(adjust-import, fail, name-compare|namespace', path', prefix)> x\
+            <+ \[namespace'|path'] -> <index-lookup-all-scoped-internal(adjust-import, fail, get-defs, name-compare|namespace', path', prefix)> x\
             <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a list of Def(uri) or [namespace | path], or StopLookup() to stop the lookup.")
           )> adjusted;
           defs' := <filter(name-compare)> defs
       end
+
+rules // Definition retrieval
+  
+  /**
+   * Gets all definitions from the index with given name, namespace and path.
+   * 
+   * @internal 
+   */   
+  index-get-defs(name-compare|namespace, name):
+    [ns|path] -> <index-get-all> Def([ns, name|path])
+  
+  /**
+   * Gets all definitions from the index with given prefix, namespace, path and name-comparison strategy.
+   * 
+   * @internal 
+   */   
+  index-get-defs-prefix(name-compare|namespace, prefix) = 
+    index-get-children(\uri -> Def(uri)\, name-compare|namespace, prefix)
       
 rules // Name comparisons
 
@@ -794,7 +813,7 @@
   nam-annotate-def(|path):
     t -> result
     with
-    	result := t{path}
+      result := t{path}
   
   /** @internal */ 
   nam-annotate-use(|paths, namespace):
@@ -802,8 +821,8 @@
   
   /** @internal */ 
   nam-annotate-use(|paths, namespace, namespace2, name):
-  	t -> t{[Unresolved(namespace), t | <lookup-index-path> (namespace, paths)]}
-  	
+    t -> t{[Unresolved(namespace), t | <lookup-index-path> (namespace, paths)]}
+    
   /** @internal */ 
   nam-annotate-scope(|path):
     t -> t{Scope(path)}

Modified: spoofax-imp/trunk/org.strategoxt.imp.names/lib/analysis-library.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.names/lib/analysis-library.generated.str	Fri Dec  7 10:03:25 2012	(r25765)
+++ spoofax-imp/trunk/org.strategoxt.imp.names/lib/analysis-library.generated.str	Fri Dec  7 10:29:20 2012	(r25766)
@@ -194,6 +194,9 @@
   
 rules // Parallel analysis
   
+  index-parallel-analyze-files(analyze) = index-analyze-files(index-parallel-analyze(analyze))
+  index-sequential-analyze-files(analyze) = index-analyze-files(index-sequential-analyze(analyze))
+  
   /**
    * Does a parallel analysis of given files using the specified analysis strategy. Automatically does parallel
    * analysis of dependent files that have changed during the analysis.
@@ -206,13 +209,13 @@
    *                a (ast', errors, warnings, notes, filesToAnalyze) tuple as output.
    * @type List((file, subfile) or file) -> None()
    */
-  index-parallel-analyze-files(analyze):
+  index-analyze-files(internal-analyze):
     files -> None()
     with
       length; 
       set-total-work-units
     with
-      index-parallel-analyze(analyze);
+      internal-analyze;
       filter(not(?ParallelResults((), (), _, _, _, _) <+ ?ParallelResults((), [()], _, _, _, _)); index-set-markers)
       
 rules // Splitter
@@ -316,10 +319,10 @@
   index-get-all:
     template -> <indexlib-get-all> template
       with
-       if set := <Index-ReadSet> then
-         uri := <index-uri>;
-         <iset-add(|Read(uri))> set
-       end
+        if set := <Index-ReadSet> then
+          uri := <index-uri>;
+          <iset-add(|Read(uri))> set
+        end
        
   /**
    * Get all values of index entries that match the given template.
@@ -465,7 +468,7 @@
    * @type "name"{uri} -> ?Def(uri')
    */
   index-lookup:
-    x{[namespace|path]} -> <index-lookup-internal(index-compare-name-equal(|name)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-name-equal(|name)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -477,7 +480,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all:
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-name-equal(|name)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs, index-compare-name-equal(|name)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -491,7 +494,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all(|prefix):
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-name-substring(|prefix)|ns, path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|ns, path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace
       
@@ -502,7 +505,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped:
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-compare-name-equal(|name)|ns, parent-path, name)> x
+    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs, index-compare-name-equal(|name)|ns, parent-path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x;
@@ -515,7 +518,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped-noimports:
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(fail, id, index-compare-name-equal(|name)|ns, parent-path, name)> x
+    x{[namespace|path]} -> <index-lookup-all-scoped-internal(fail, id, index-get-defs, index-compare-name-equal(|name)|ns, parent-path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x;
@@ -530,7 +533,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped(|prefix):
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-compare-name-substring(|prefix)|ns, parent-path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|ns, parent-path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace;
       (<?[_|<id>]> path <+ !path) => parent-path
@@ -555,7 +558,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */    
   index-lookup-children(|namespace, prefix):
-    x{[_|path]} -> <index-lookup-all-scoped-internal(index-compare-name-substring(|prefix, namespace)|namespace, path, prefix)> x
+    x{[_|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix, namespace)|namespace, path, prefix)> x
       
 rules // Index utilities
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.names/lib/compilation-library.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.names/lib/compilation-library.generated.str	Fri Dec  7 10:03:25 2012	(r25765)
+++ spoofax-imp/trunk/org.strategoxt.imp.names/lib/compilation-library.generated.str	Fri Dec  7 10:29:20 2012	(r25766)
@@ -100,7 +100,7 @@
   index-compilation-file:
     (path, subfile) -> None()
     with
-    	asts := <index-get-all-values> AST(subfile, ());
+      asts := <index-get-all-values> AST(subfile, ());
       <map(index-compilation-ast(|path, subfile))> asts
       
   /** @internal */    
@@ -109,10 +109,10 @@
     with
       asts := <index-get-all-values> AST(subfile, ());
       if 1 := <length> asts then
-      	ast := <?[<id>|_]> asts
-    	else
-    		ast := <try(index-combine-asts)> asts
-  		end;
+        ast := <?[<id>|_]> asts
+      else
+        ast := <try(index-combine-asts)> asts
+      end;
       <index-compilation-ast(|path, subfile)> ast
       
   /** @internal */
@@ -239,6 +239,6 @@
 
   /** @internal */
   index-file-is-partial:
-  	file -> file
-  	where 
+    file -> file
+    where 
       Snd; index-uri; index-is-partial-ast

Modified: spoofax-imp/trunk/org.strategoxt.imp.names/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.names/lib/editor-common.generated.str	Fri Dec  7 10:03:25 2012	(r25765)
+++ spoofax-imp/trunk/org.strategoxt.imp.names/lib/editor-common.generated.str	Fri Dec  7 10:29:20 2012	(r25766)
@@ -135,8 +135,13 @@
   origin-strip     = prim("SSL_EXT_origin_strip", <id>)
   origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
 
+  origin-language-description =
+    prim("SSL_EXT_languagedescription", <id>)
+
   origin-language =
-    prim("SSL_EXT_origin_language", <id>)
+    origin-file; 
+    origin-language-description;
+    Fst
   
   origin-surrounding-comments =
     prim("SSL_EXT_origin_surrounding_comments", "NameDefinitionLanguage", <id>)
@@ -152,6 +157,13 @@
   origin-track-forced(s) =
     ![<id>]; all(s); ?[<id>]
 
+  origin-relative-path:
+    trm -> rel-path
+    where
+      full-path := <origin-file> trm;
+      len-project-prefix := <project-path; string-length; inc>;
+      rel-path := <string-as-chars(drop(|len-project-prefix))> full-path
+      
 strategies
 
   desugar-position(desugar|ast):

Modified: spoofax-imp/trunk/org.strategoxt.imp.names/lib/nbl-library.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.names/lib/nbl-library.generated.str	Fri Dec  7 10:03:25 2012	(r25765)
+++ spoofax-imp/trunk/org.strategoxt.imp.names/lib/nbl-library.generated.str	Fri Dec  7 10:29:20 2012	(r25766)
@@ -82,16 +82,16 @@
       <gt> (<length> defs, 1)
       
 rules // Type dependant lookup
-	
-	/**
+  
+  /**
    * Given an annotated AST node and a type, resolves it and checks if type equals given type, returning its definition.
    * Uses precise matching for names.
    *
-   * @param type	Only definitions with this type are returned.
+   * @param type  Only definitions with this type are returned.
    * @type "name"{uri} -> ?Def(uri')
    */
   index-lookup-typed(|type):
-    x{[namespace|path]} -> <index-lookup-internal(index-compare-nametype-equal(|name, type)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-nametype-equal(|name, type)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -102,11 +102,11 @@
    * Uses substring matching for names.
    *
    * @param prefix    Only definitions with a name that starts with this string are returned.
-   * @param type			Only definitions with this type are returned.
+   * @param type      Only definitions with this type are returned.
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-typed(|prefix, type):
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-nametype-substring(|prefix, type)|ns, path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-nametype-substring(|prefix, type)|ns, path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace
 
@@ -136,9 +136,9 @@
   
   /** @internal */
   nbl-get-type:
-  	uri -> <index-get-data(|Type())> Def(uri)
+    uri -> <index-get-data(|Type())> Def(uri)
   
   // TODO: Allow user defined type equality.
-  /** @internal */	
+  /** @internal */  
   nbl-type-eq(|type) = 
-  	<eq> (<id>, type)
+    <eq> (<id>, type)

Modified: spoofax-imp/trunk/org.strategoxt.imp.names/trans/namedefinitionlanguage.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.names/trans/namedefinitionlanguage.str	Fri Dec  7 10:03:25 2012	(r25765)
+++ spoofax-imp/trunk/org.strategoxt.imp.names/trans/namedefinitionlanguage.str	Fri Dec  7 10:29:20 2012	(r25766)
@@ -156,12 +156,18 @@
     
 rules // Utility
   
-  // Queue parallel analysis for given list of files.
+  // Queue analysis for given list of files.
   editor-queue-analysis = 
-    not(?[]); queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+    not(?[]); queue-strategy(|"editor-sequential-analyze", "Analyzing files")
       
   // Executes parallel analysis using the index library.
   editor-parallel-analyze:
     files -> None()
     with
-      index-parallel-analyze-files(analyze)
\ No newline at end of file
+      index-parallel-analyze-files(analyze)
+      
+  // Executes sequential analysis using the index library.
+  editor-sequential-analyze:
+    files -> None()
+    with
+      index-sequential-analyze-files(analyze)
\ No newline at end of file

From richard at vogelij.nl  Fri Dec  7 14:07:44 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Fri, 07 Dec 2012 13:07:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25767 - in
	spoofax/trunk/spoofax/org.spoofax.jssglr: .
	src/org/spoofax/jssglr/client src/org/spoofax/jssglr/client/services
Message-ID: <20121207130744.75EAB108C008@mx3.tudelft.nl>

Author: rvogelij
Date: Fri Dec  7 13:07:42 2012
New Revision: 25767
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25767&sc=1

Log:
Fix to make jssglr compatible with the newest jsglr terms

Modified:
   spoofax/trunk/spoofax/org.spoofax.jssglr/build.xml
   spoofax/trunk/spoofax/org.spoofax.jssglr/src/org/spoofax/jssglr/client/JSMain.java
   spoofax/trunk/spoofax/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java

Modified: spoofax/trunk/spoofax/org.spoofax.jssglr/build.xml
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jssglr/build.xml	Fri Dec  7 10:29:20 2012	(r25766)
+++ spoofax/trunk/spoofax/org.spoofax.jssglr/build.xml	Fri Dec  7 13:07:42 2012	(r25767)
@@ -23,7 +23,7 @@
                    </classpath>
                    <jvmarg value="-Xmx512M" />
 	           <arg value="-style" />
-			<arg value="PRETTY" />
+			<arg value="OBF" />
 		   <arg value="-XdisableClassMetadata" />
 		   <arg value="-XdisableCastChecking" />
 		   <arg value="-optimize" />

Modified: spoofax/trunk/spoofax/org.spoofax.jssglr/src/org/spoofax/jssglr/client/JSMain.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jssglr/src/org/spoofax/jssglr/client/JSMain.java	Fri Dec  7 10:29:20 2012	(r25766)
+++ spoofax/trunk/spoofax/org.spoofax.jssglr/src/org/spoofax/jssglr/client/JSMain.java	Fri Dec  7 13:07:42 2012	(r25767)
@@ -51,7 +51,7 @@
 			
 		
 		if(args.length < 4) {
-			JsPrintln("Usage: node thisfile.js -p <parsetable.tbl> -i <inputfile>");
+			JsPrintln("Usage: node thisfile.js -p <parsetable.tbl> -i <inputfile>\n\nOptional parameters: \n--timing\n--measure-memory\n--warmup");
 			return;
 		}
 		

Modified: spoofax/trunk/spoofax/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java	Fri Dec  7 10:29:20 2012	(r25766)
+++ spoofax/trunk/spoofax/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java	Fri Dec  7 13:07:42 2012	(r25767)
@@ -346,11 +346,11 @@
 			return makeParseResult(makeJsArray(attrs), jserrors);
 		}
 		final ITokenizer tok = t.getTokenizer();
-
+		
 		//log("Tokencount: "  + tok.getTokenCount());
 		for(int i = 0; i < tok.getTokenCount(); i++) {
 			final IToken x = tok.getTokenAt(i);
-			int line = x.getLine() - 1;
+			int line = x.getLine();// - 1;
 			
 			String tokentype = convertTokenType(x.getKind());
 			String tokenKey = getTokenCompareString(x);
@@ -520,10 +520,12 @@
 	private String convertTokenType(int kind) {
 		switch(kind) {
 		case IToken.TK_LAYOUT: return "comment";
-		case IToken.TK_NUMBER: return "constant.numeric";
+		case IToken.TK_NUMBER: return "constant";
 		case IToken.TK_OPERATOR: return "keyword.operator";
 		case IToken.TK_KEYWORD: return "keyword";
 		case IToken.TK_STRING: return "string";
+		case IToken.TK_IDENTIFIER: return "variable";
+		case IToken.TK_ERROR_KEYWORD: return "invalid.illegal";
 		default: return "plain";
 		}
 	}

From gabrielkonat at gmail.com  Fri Dec  7 18:59:00 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Fri, 07 Dec 2012 17:59:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25768 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index:
	. src/main/java/org/spoofax/interpreter/library/index
	src/test/java/org/spoofax/interpreter/library...
Message-ID: <20121207175900.A7A427F80E3@mx1.tudelft.nl>

Author: gkonat
Date: Fri Dec  7 17:58:58 2012
New Revision: 25768
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25768&sc=1

Log:
Index now accepts terms of arbitrary size.
More renaming to be consistent with thesis.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/FilePartition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/FilePartition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/FilePartition.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/FilePartition.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -13,4 +13,12 @@
         this.file = file;
         this.partition = partition;
     }
+
+    @Override
+    public String toString() {
+        String result = file.toString();
+        if(partition != null)
+            result += "," + partition;
+        return result + ")";
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -9,7 +9,7 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
- * @author Gabri?l Konat
+ * @author Gabri??l Konat
  */
 public interface IIndex {
     /**
@@ -139,6 +139,4 @@
      * @param includePositions
      */
     public abstract IStrategoTerm toTerm(boolean includePositions);
-
-    public abstract String toString();
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/INotificationService.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -4,6 +4,7 @@
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Gabri??l Konat
  */
 public interface INotificationService {
     /**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -28,7 +28,7 @@
 import com.google.common.collect.Multimap;
 
 /**
- * @author Gabri?l Konat
+ * @author Gabri??l Konat
  */
 public class Index implements IIndex {
     public static final boolean DEBUG_ENABLED = Index.class.desiredAssertionStatus();
@@ -44,8 +44,8 @@
         new ConcurrentHashMap<IndexURI, Multimap<IndexPartitionDescriptor, IndexEntry>>();
     private final Multimap<IndexPartitionDescriptor, IndexEntry> entriesPerPartitionDescriptor = LinkedHashMultimap
         .create();
-    private final Multimap<URI, IndexEntry> entriesPerURI = LinkedHashMultimap.create();
-    private final Multimap<IStrategoList, IndexEntry> entriesPerSubpartition = LinkedHashMultimap.create();
+    private final Multimap<URI, IndexEntry> entriesPerFile = LinkedHashMultimap.create();
+    private final Multimap<IStrategoList, IndexEntry> entriesPerPartition = LinkedHashMultimap.create();
     private final Map<IndexPartitionDescriptor, IndexPartition> partitions =
         new HashMap<IndexPartitionDescriptor, IndexPartition>();
 
@@ -59,7 +59,7 @@
         this.termFactory = factory;
     }
 
-    public void ensureInitialized() {
+    private void ensureInitialized() {
         if(factory == null)
             throw new IllegalStateException("Index not initialized");
     }
@@ -92,20 +92,20 @@
         ensureInitialized();
 
         IStrategoConstructor constructor = entry.getConstructor();
-        IStrategoTerm contentsType = factory.getEntryContentsType(entry);
-        IStrategoList id = factory.getEntryId(entry);
+        IStrategoTerm contentsType = factory.getEntryType(entry);
+        IStrategoList path = factory.getEntryPath(entry);
         IStrategoTerm namespace = factory.getEntryNamespace(entry);
-        IStrategoTerm contents = factory.getEntryContents(entry);
+        IStrategoTerm value = factory.getEntryValue(entry);
 
         IndexEntry newEntry =
-            factory.createEntry(constructor, namespace, id, contentsType, contents, partitionDescriptor);
+            factory.createEntry(constructor, namespace, path, contentsType, value, partitionDescriptor);
 
         add(newEntry);
     }
 
     public void add(IndexEntry entry) {
-        final IndexPartitionDescriptor partition = entry.getPartitionDescriptor();
-        final IndexURI uri = entry.getURI();
+        final IndexPartitionDescriptor partition = entry.getPartition();
+        final IndexURI uri = entry.getKey();
 
         addOrGetPartition(partition);
 
@@ -118,8 +118,8 @@
 
         // Add entry to partitions.
         entriesPerPartitionDescriptor.put(partition, entry);
-        entriesPerURI.put(partition.getURI(), entry);
-        entriesPerSubpartition.put(partition.getPartition(), entry);
+        entriesPerFile.put(partition.getURI(), entry);
+        entriesPerPartition.put(partition.getPartition(), entry);
     }
 
     public void addAll(IStrategoList entries, IndexPartitionDescriptor partitionDescriptor) {
@@ -138,8 +138,8 @@
         for(IndexEntry entry : removedEntries) {
             childValues.remove(partitionDescriptor, entry);
             entriesPerPartitionDescriptor.remove(partitionDescriptor, entry);
-            entriesPerURI.remove(partitionDescriptor.getURI(), entry);
-            entriesPerSubpartition.remove(partitionDescriptor.getPartition(), entry);
+            entriesPerFile.remove(partitionDescriptor.getURI(), entry);
+            entriesPerPartition.remove(partitionDescriptor.getPartition(), entry);
         }
     }
 
@@ -155,9 +155,9 @@
 
     public Collection<IndexEntry> getEntriesInPartition(IndexPartitionDescriptor partitionDescriptor) {
         if(partitionDescriptor.getPartition() == null)
-            return getCollection(entriesPerURI.get(partitionDescriptor.getURI()));
+            return getCollection(entriesPerFile.get(partitionDescriptor.getURI()));
         else if(partitionDescriptor.getURI() == null)
-            return getCollection(entriesPerSubpartition.get(partitionDescriptor.getPartition()));
+            return getCollection(entriesPerPartition.get(partitionDescriptor.getPartition()));
         else
             return getCollection(entriesPerPartitionDescriptor.get(partitionDescriptor));
     }
@@ -213,9 +213,9 @@
             map.removeAll(partitionDescriptor);
 
         if(partitionDescriptor.getPartition() == null)
-            entriesPerURI.removeAll(partitionDescriptor.getURI());
+            entriesPerFile.removeAll(partitionDescriptor.getURI());
         else if(partitionDescriptor.getURI() == null)
-            entriesPerSubpartition.removeAll(partitionDescriptor.getPartition());
+            entriesPerPartition.removeAll(partitionDescriptor.getPartition());
         else {
             entriesPerPartitionDescriptor.removeAll(partitionDescriptor);
             clearPartition(new IndexPartitionDescriptor(partitionDescriptor.getURI(), null));
@@ -237,8 +237,8 @@
         entries.clear();
         childs.clear();
         entriesPerPartitionDescriptor.clear();
-        entriesPerURI.clear();
-        entriesPerSubpartition.clear();
+        entriesPerFile.clear();
+        entriesPerPartition.clear();
         partitions.clear();
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -10,35 +10,38 @@
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 
 /**
- * @author Gabri?l Konat
+ * A key-value pair that can be stored in an {@link IIndex}, partitioned by a {@link IndexPartitionDescriptor}.
+ * 
+ * @author Gabri??l Konat
  */
 public class IndexEntry implements Serializable {
     private static final long serialVersionUID = -1073077973341978805L;
 
-    private IStrategoTerm contents;
-    private IndexURI uri;
-    private IndexPartitionDescriptor partitionDescriptor;
+    private final IndexURI key;
+    private final IStrategoTerm value;
+    private final IndexPartitionDescriptor partition;
 
     private transient IStrategoAppl cachedTerm;
 
-    protected IndexEntry(IStrategoTerm contents, IndexURI uri, IndexPartitionDescriptor partitionDescriptor) {
-        this.contents = contents;
-        this.uri = uri;
-        this.partitionDescriptor = partitionDescriptor;
-
-        assert contents != null || uri.getConstructor().getArity() < 2 : "Contents can't be null for Use/2 or DefData/3";
+    /**
+     * Use {@link IndexEntryFactory#createEntry}.
+     */
+    protected IndexEntry(IndexURI key, IStrategoTerm value, IndexPartitionDescriptor partition) {
+        this.key = key;
+        this.value = value;
+        this.partition = partition;
     }
 
-    public IStrategoTerm getContents() {
-        return contents;
+    public IndexURI getKey() {
+        return key;
     }
-
-    public IndexURI getURI() {
-        return uri;
+    
+    public IStrategoTerm getValue() {
+        return value;
     }
 
-    public IndexPartitionDescriptor getPartitionDescriptor() {
-        return partitionDescriptor;
+    public IndexPartitionDescriptor getPartition() {
+        return partition;
     }
 
     /**
@@ -48,7 +51,7 @@
         if(cachedTerm != null)
             return cachedTerm;
 
-        cachedTerm = uri.toTerm(factory, contents);
+        cachedTerm = key.toTerm(factory, value);
 
         return forceImploderAttachment(cachedTerm);
     }
@@ -69,12 +72,12 @@
      * sure that origin info is not added to the term. (The latter would be bad since we cache in {@link #cachedTerm}.)
      */
     private IStrategoAppl forceImploderAttachment(IStrategoAppl term) {
-        ImploderAttachment attach = ImploderAttachment.get(uri.getId());
+        ImploderAttachment attach = ImploderAttachment.get(key.getPath());
         if(attach != null) {
             ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(),
                 attach.getRightToken());
         } else {
-            String fn = partitionDescriptor == null ? null : partitionDescriptor.getURI().getPath();
+            String fn = partition == null ? null : partition.getURI().getPath();
             attach = ImploderAttachment.createCompactPositionAttachment(fn, 0, 0, 0, -1);
             term.putAttachment(attach);
         }
@@ -83,9 +86,9 @@
 
     @Override
     public String toString() {
-        String result = uri.toString();
-        if(contents != null)
-            result += "," + contents;
+        String result = key.toString();
+        if(value != null)
+            result += "," + value;
         return result + ")";
     }
 
@@ -93,10 +96,9 @@
     public int hashCode() {
         final int prime = 31;
         int result = 1;
-        result = prime * result + ((contents == null) ? 0 : contents.hashCode());
-        result = prime * result + ((partitionDescriptor == null) ? 0 : partitionDescriptor.hashCode());
-        result = prime * result + ((cachedTerm == null) ? 0 : cachedTerm.hashCode());
-        result = prime * result + ((uri == null) ? 0 : uri.hashCode());
+        result = prime * result + ((key == null) ? 0 : key.hashCode());
+        result = prime * result + ((value == null) ? 0 : value.hashCode());
+        result = prime * result + ((partition == null) ? 0 : partition.hashCode());
         return result;
     }
 
@@ -108,27 +110,27 @@
             return false;
         if(!(obj instanceof IndexEntry))
             return false;
+        
         IndexEntry other = (IndexEntry) obj;
-        if(contents == null) {
-            if(other.contents != null)
-                return false;
-        } else if(!contents.equals(other.contents))
-            return false;
-        if(partitionDescriptor == null) {
-            if(other.partitionDescriptor != null)
+        
+        if(key == null) {
+            if(other.key != null)
                 return false;
-        } else if(!partitionDescriptor.equals(other.partitionDescriptor))
+        } else if(!key.equals(other.key))
             return false;
-        if(cachedTerm == null) {
-            if(other.cachedTerm != null)
+        
+        if(value == null) {
+            if(other.value != null)
                 return false;
-        } else if(!cachedTerm.equals(other.cachedTerm))
+        } else if(!value.equals(other.value))
             return false;
-        if(uri == null) {
-            if(other.uri != null)
+        
+        if(partition == null) {
+            if(other.partition != null)
                 return false;
-        } else if(!uri.equals(other.uri))
+        } else if(!partition.equals(other.partition))
             return false;
+        
         return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -8,114 +8,115 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.TermAttachmentStripper;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Gabri??l Konat
  */
 public class IndexEntryFactory {
-    @SuppressWarnings("unused")
-    private static final int DEFDATA_URI = 0;
     private static final int DEFDATA_TYPE = 1;
-    private static final int DEFDATA_CONTENTS = 2;
+    private static final int DEFDATA_VALUE = 2;
+    private static final IStrategoConstructor DEFDATA_CONSTRUCTOR = new TermFactory().makeConstructor("DefData", 3);
 
     private final ITermFactory termFactory;
     private final TermAttachmentStripper stripper;
-    private final IStrategoConstructor defCon;
-    private final IStrategoConstructor defDataCon;
 
     public IndexEntryFactory(ITermFactory termFactory) {
         this.termFactory = termFactory;
         this.stripper = new TermAttachmentStripper(termFactory);
-        defCon = termFactory.makeConstructor("Def", 1);
-        defDataCon = termFactory.makeConstructor("DefData", 3);
     }
 
     public ITermFactory getTermFactory() {
         return termFactory;
     }
 
-    public IStrategoConstructor getDefDataCon() {
-        return defDataCon;
-    }
-
-    public IStrategoConstructor getDefCon() {
-        return defCon;
-    }
-
-    public IndexURI createURI(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList id,
-        IStrategoTerm contentsType) {
-        ImploderAttachment idAttachment = ImploderAttachment.getCompactPositionAttachment(id, true);
-        contentsType = stripper.strip(contentsType);
+    public IndexURI createURI(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList path,
+        IStrategoTerm type) {
+        ImploderAttachment idAttachment = ImploderAttachment.getCompactPositionAttachment(path, true);
+        type = stripper.strip(type);
         assert namespace == stripper.strip(namespace);
 
-        id.putAttachment(idAttachment);
+        path.putAttachment(idAttachment);
 
-        return new IndexURI(constructor, namespace, id, contentsType);
+        return new IndexURI(constructor, namespace, path, type);
     }
 
     public IndexURI createURIFromTemplate(IStrategoAppl template) {
-        return createURI(template.getConstructor(), getEntryNamespace(template), getEntryId(template),
-            getEntryContentsType(template));
+        return createURI(template.getConstructor(), getEntryNamespace(template), getEntryPath(template),
+            getEntryType(template));
     }
 
-    public IndexEntry createEntry(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList id,
-        IStrategoTerm contentsType, IStrategoTerm contents, IndexPartitionDescriptor partitionDescriptor) {
-        return createEntry(contents, createURI(constructor, namespace, id, contentsType), partitionDescriptor);
+    public IndexEntry createEntry(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList path,
+        IStrategoTerm type, IStrategoTerm value, IndexPartitionDescriptor partition) {
+        return createEntry(value, createURI(constructor, namespace, path, type), partition);
     }
 
-    public IndexEntry createEntry(IStrategoTerm contents, IndexURI uri, IndexPartitionDescriptor partitionDescriptor) {
-
+    public IndexEntry createEntry(IStrategoTerm value, IndexURI key, IndexPartitionDescriptor partition) {
         ImploderAttachment dataAttachment =
-            contents == null ? null : ImploderAttachment.getCompactPositionAttachment(contents, false);
-        contents = stripper.strip(contents);
-        if(contents != null)
-            contents.putAttachment(dataAttachment);
+            value == null ? null : ImploderAttachment.getCompactPositionAttachment(value, false);
+        value = stripper.strip(value);
+        if(value != null)
+            value.putAttachment(dataAttachment);
 
-        return new IndexEntry(contents, uri, partitionDescriptor);
+        return new IndexEntry(key, value, partition);
     }
 
-    /*
-     * private IStrategoList createSanitizedId(IStrategoList id) { return (IStrategoList) stripper.strip(id); }
-     */
+    public static boolean isURI(IStrategoTerm term) {
+        return isTermList(term);
+    }
 
-    public IStrategoTerm getEntryContentsType(IStrategoAppl entry) {
-        IStrategoConstructor type = entry.getConstructor();
-        if(type == defDataCon) {
+    public static boolean isDefData(IStrategoAppl term) {
+        return isDefData(term.getConstructor());
+    }
+    
+    public static boolean isDefData(IStrategoConstructor constructor) {
+        return constructor.equals(DEFDATA_CONSTRUCTOR);
+    }
+
+    public IStrategoTerm getEntryType(IStrategoAppl entry) {
+        if(isDefData(entry)) {
             return entry.getSubterm(DEFDATA_TYPE);
         } else {
             return null;
         }
     }
 
-    public IStrategoList getEntryId(IStrategoAppl entry) {
+    public IStrategoList getEntryPath(IStrategoAppl entry) {
         IStrategoTerm result = entry.getSubterm(0);
-        if(isTermList(result)) {
+        if(isURI(result)) {
             IStrategoList full = (IStrategoList) result;
             return full.isEmpty() ? full : full.tail();
         } else {
-            throw new IllegalArgumentException("Illegal index entry: " + entry);
+            throw new IllegalArgumentException("Illegal index entry: " + entry
+                + ". First subterm should be a list representing the key of the entry.");
         }
     }
 
     public IStrategoTerm getEntryNamespace(IStrategoAppl entry) {
         IStrategoTerm result = entry.getSubterm(0);
-        if(isTermList(result)) {
+        if(isURI(result)) {
             IStrategoList full = (IStrategoList) result;
             return stripper.strip(full.isEmpty() ? full : full.head());
         } else {
-            throw new IllegalArgumentException("Illegal index entry: " + entry);
+            throw new IllegalArgumentException("Illegal index entry: " + entry
+                + ". First subterm should be a list representing the key of the entry.");
         }
     }
 
-    public IStrategoTerm getEntryContents(IStrategoAppl entry) {
-        if(entry.getSubtermCount() == 3) {
-            return entry.getSubterm(DEFDATA_CONTENTS);
+    public IStrategoTerm getEntryValue(IStrategoAppl entry) {
+        if(isDefData(entry)) {
+            return entry.getSubterm(DEFDATA_VALUE);
         } else if(entry.getSubtermCount() == 2) {
             return entry.getSubterm(1);
-        } else {
-            assert entry.getSubtermCount() < 3;
+        } else if(entry.getSubtermCount() == 1) {
             return null;
+        } else {
+            int termsToCopy = entry.getSubtermCount() - 1;
+            IStrategoTerm[] terms = new IStrategoTerm[termsToCopy];
+            System.arraycopy(entry.getAllSubterms(), 1, terms, 0, termsToCopy);
+            return termFactory.makeTuple(terms);
         }
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexLibrary.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexLibrary.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -3,7 +3,7 @@
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
 
 /**
- * @author Gabri?l Konat
+ * @author Gabri??l Konat
  */
 public class IndexLibrary extends AbstractStrategoOperatorRegistry {
     public static final String REGISTRY_NAME = "INDEX";

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -21,7 +21,7 @@
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
- * @author Gabri?l Konat
+ * @author Gabri??l Konat
  */
 public class IndexManager {
     private final static AtomicLong revisionProvider = new AtomicLong();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartition.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartition.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -6,7 +6,10 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
- * @author Gabri?l Konat
+ * A partition in an {@link IIndex} that partitions {@link IndexEntry}.
+ * Contains a revision number representing a revision from a transaction, and the date it was last modified.
+ * 
+ * @author Gabri??l Konat
  */
 public class IndexPartition {
     private final IndexPartitionDescriptor descriptor;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -14,7 +14,9 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
- * @author Gabri?l Konat
+ * Describes a partition consisting of a file URI and an optional partition identifier.
+ * 
+ * @author Gabri??l Konat
  */
 public class IndexPartitionDescriptor implements Serializable {
     private static final long serialVersionUID = -5167366407344668956L;
@@ -25,14 +27,6 @@
     private transient IStrategoTerm cachedTerm;
     private transient String cachedString;
 
-    public URI getURI() {
-        return uri;
-    }
-
-    public IStrategoList getPartition() {
-        return partition;
-    }
-
     public IndexPartitionDescriptor(URI uri, IStrategoList subpartition) {
         this.uri = uri;
         if(subpartition == null || subpartition.isEmpty())
@@ -41,6 +35,14 @@
             this.partition = subpartition;
     }
 
+    public URI getURI() {
+        return uri;
+    }
+
+    public IStrategoList getPartition() {
+        return partition;
+    }
+
     public IStrategoTerm toTerm(ITermFactory factory) {
         if(cachedTerm != null)
             return cachedTerm;
@@ -52,12 +54,12 @@
     }
 
     /**
-     * Converts a term partition representation to a SemanticIndexPartition, using the {@link IOAgent} to create an
+     * Converts a term partition representation to a IndexPartitionDescriptor, using the {@link IOAgent} to create an
      * absolute path.
      * 
      * @param agent The agent that provides the current path and partition system access, or null if the path should be
      *            used as-is.
-     * @param term A string or (string, string) tuple with the partitionname or the partitionname and subpartitionname
+     * @param term A string or (string, string) tuple with the file name or the file name and partition identifier.
      */
     public static IndexPartitionDescriptor fromTerm(IOAgent agent, IStrategoTerm term) {
         String name;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -11,7 +11,9 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
- * @author Gabri?l Konat
+ * @author Gabri??l Konat
+ * 
+ * Collects and prints statistics about an {@link IIndex}.
  */
 public class IndexStatistics {
     private class Data {
@@ -49,7 +51,7 @@
         data.entriesPerConstructor = new HashMap<IStrategoConstructor, Integer>();
         data.entriesPerNamespace = new HashMap<IStrategoTerm, Integer>();
         for(IndexEntry entry : data.entries) {
-            IndexURI uri = entry.getURI();
+            IndexURI uri = entry.getKey();
             Integer constructorCount = data.entriesPerConstructor.get(uri.getConstructor());
             if(constructorCount == null)
                 data.entriesPerConstructor.put(uri.getConstructor(), 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -6,34 +6,36 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
- * @author Gabri?l Konat
+ * The key to used to map {@link IndexEntry}.
+ * Consists of a constructor, namespace, path and optional type.
+ *  
+ * @author Gabri??l Konat
  */
 public class IndexURI implements Serializable {
     private static final long serialVersionUID = 1619836759792533807L;
 
-    private IStrategoConstructor constructor;
-    private IStrategoTerm namespace;
-    private IStrategoList id;
-    private IStrategoTerm contentsType;
+    private final IStrategoConstructor constructor;
+    private final IStrategoTerm namespace;
+    private final IStrategoList path;
+    private final IStrategoTerm type;
 
-    private transient IStrategoAppl term;
+    private transient IStrategoAppl cachedTerm;
 
     /**
-     * @param namespace The namespace of the entry, e.g., 'Foo()'
-     * @param id The identifier of the entry, e.g., '["foo", Foo()]'
+     * Use {@link IndexEntryFactory#createURI}.
      */
-    protected IndexURI(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList id,
-        IStrategoTerm contentsType) {
+    protected IndexURI(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList path,
+        IStrategoTerm type) {
         this.constructor = constructor;
-        this.id = id;
+        this.path = path;
         this.namespace = namespace;
-        this.contentsType = contentsType;
+        this.type = type;
 
-        assert constructor != null && id != null && namespace != null;
-        assert contentsType == null || "DefData".equals(constructor.getName()) : "Contents type only expected for DefData";
+        assert constructor != null && path != null && namespace != null;
     }
 
     public IStrategoConstructor getConstructor() {
@@ -44,45 +46,55 @@
         return namespace;
     }
 
-    public IStrategoList getId() {
-        return id;
+    public IStrategoList getPath() {
+        return path;
     }
 
     public IStrategoTerm getType() {
-        return contentsType;
+        return type;
     }
 
+    /**
+     * Returns a parent URI by taking the tail of the path. If the path has no tail, null is returned.
+     */
     public IndexURI getParent() {
-        if(id.size() > 0)
-            return new IndexURI(constructor, namespace, id.tail(), contentsType);
+        if(path.size() > 0)
+            return new IndexURI(constructor, namespace, path.tail(), type);
         else
             return null;
     }
 
     /**
-     * Returns a term representation of this entry.
+     * Returns the term representation of this entry.
      */
-    public IStrategoAppl toTerm(ITermFactory factory, IStrategoTerm contents) {
-        if(term != null)
-            return term;
-
-        IStrategoList namespaceId = factory.makeListCons(namespace, id);
-        if(constructor.getArity() == 3) {
-            term = factory.makeAppl(constructor, namespaceId, contentsType, contents);
+    public IStrategoAppl toTerm(ITermFactory factory, IStrategoTerm value) {
+        if(cachedTerm != null)
+            return cachedTerm;
+
+        IStrategoList uri = factory.makeListCons(namespace, path);
+        
+        if(IndexEntryFactory.isDefData(constructor)) {
+            cachedTerm = factory.makeAppl(constructor, uri, type, value);
         } else if(constructor.getArity() == 2) {
-            term = factory.makeAppl(constructor, namespaceId, contents);
+            cachedTerm = factory.makeAppl(constructor, uri, value);
+        } else if(constructor.getArity() == 1) {
+            cachedTerm = factory.makeAppl(constructor, uri);
         } else {
-            term = factory.makeAppl(constructor, namespaceId);
+            IStrategoTerm[] terms = new IStrategoTerm[constructor.getArity()];
+            terms[0] = uri;
+            IStrategoTuple values = (IStrategoTuple) value;
+            System.arraycopy(values.getAllSubterms(), 0, terms, 1, values.getSubtermCount());
+            cachedTerm = factory.makeAppl(constructor, terms);
         }
 
-        return term;
+        return cachedTerm;
     }
 
     @Override
     public String toString() {
-        String result = constructor.getName() + "([" + namespace + "|" + id + "]";
-        if(contentsType != null)
-            result += "," + contentsType;
+        String result = constructor.getName() + "([" + namespace + "|" + path + "]";
+        if(type != null)
+            result += "," + type;
         return result;
     }
 
@@ -91,9 +103,9 @@
         final int prime = 31;
         int result = 1;
         result = prime * result + ((constructor == null) ? 0 : constructor.hashCode());
-        result = prime * result + ((contentsType == null) ? 0 : contentsType.hashCode());
-        result = prime * result + ((id == null) ? 0 : id.hashCode());
         result = prime * result + ((namespace == null) ? 0 : namespace.hashCode());
+        result = prime * result + ((path == null) ? 0 : path.hashCode());
+        result = prime * result + ((type == null) ? 0 : type.hashCode());
         return result;
     }
 
@@ -105,27 +117,33 @@
             return false;
         if(!(obj instanceof IndexURI))
             return false;
+
         IndexURI other = (IndexURI) obj;
+
         if(constructor == null) {
             if(other.constructor != null)
                 return false;
         } else if(!constructor.equals(other.constructor))
             return false;
-        if(contentsType == null) {
-            if(other.contentsType != null)
+
+        if(namespace == null) {
+            if(other.namespace != null)
                 return false;
-        } else if(!contentsType.equals(other.contentsType))
+        } else if(!namespace.equals(other.namespace))
             return false;
-        if(id == null) {
-            if(other.id != null)
+
+        if(path == null) {
+            if(other.path != null)
                 return false;
-        } else if(!id.equals(other.id))
+        } else if(!path.equals(other.path))
             return false;
-        if(namespace == null) {
-            if(other.namespace != null)
+
+        if(type == null) {
+            if(other.type != null)
                 return false;
-        } else if(!namespace.equals(other.namespace))
+        } else if(!type.equals(other.type))
             return false;
+
         return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -35,7 +35,7 @@
             Collection<IndexEntry> entries = ind.getEntries(template);
             IStrategoList partitions = env.getFactory().makeList();
             for(IndexEntry entry : entries) {
-                IStrategoTerm partition = entry.getPartitionDescriptor().toTerm(env.getFactory());
+                IStrategoTerm partition = entry.getPartition().toTerm(env.getFactory());
                 partitions = env.getFactory().makeListCons(partition, partitions);
             }
             env.setCurrent(partitions);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/NotificationCenter.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -6,7 +6,6 @@
 
 /**
  * A central, static go-to point for file system notifications.
- * 
  * Notifications are sent when files are added, deleted, renamed, or modified.
  * 
  * @author Lennart Kats <lennart add lclnet.nl>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -11,6 +11,9 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
+/**
+ * @author Gabri??l Konat
+ */
 public class TransactionIndex implements IIndex {
     private IIndex index;
     private IIndex transactionIndex;
@@ -209,7 +212,7 @@
      * @return True if given entry should be visible, false otherwise.
      */
     private boolean isEntryVisible(IndexEntry entry) {
-        return !(clearedCurrentPartition && isCurrentPartition(entry.getPartitionDescriptor()));
+        return !(clearedCurrentPartition && isCurrentPartition(entry.getPartition()));
     }
 
     /**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -62,46 +62,66 @@
     public void getEntries() {
         IStrategoAppl def = def("Class", "java", "lang", "String");
         IStrategoAppl type = type(constructor("Type", str("String")), "Class", "java", "lang", "String");
+        IStrategoAppl defData = defData(constructor("Type"), str("String"), "Class", "java", "lang", "String");
 
         assertEquals(index.getEntries(def).size(), 0);
         assertEquals(index.getEntries(type).size(), 0);
+        assertEquals(index.getEntries(defData).size(), 0);
 
         index.add(def, file);
         index.add(type, file);
+        index.add(defData, file);
 
         Collection<IndexEntry> ret1 = index.getEntries(def);
         Collection<IndexEntry> ret2 = index.getEntries(type);
+        Collection<IndexEntry> ret3 = index.getEntries(defData);
 
         assertTrue(matchAll(ret1, def));
         assertTrue(matchAll(ret2, type));
+        assertTrue(matchAll(ret3, defData));
         assertFalse(matchAll(ret1, type));
+        assertFalse(matchAll(ret1, defData));
         assertFalse(matchAll(ret2, def));
+        assertFalse(matchAll(ret2, defData));
+        assertFalse(matchAll(ret3, def));
+        assertFalse(matchAll(ret3, type));
     }
 
     @Test
     public void duplicateAddAndGetEntries() {
         IStrategoAppl def = def("Entity", "CRM", "Person");
         IStrategoAppl read = read("Function", "CRM", "Person", "GetName");
+        IStrategoAppl longTerm =
+            longTerm(str("Entity"), str("CRM"), str("Person"), "Function", "CRM", "Person", "GetName");
 
         assertEquals(index.getEntries(def).size(), 0);
         assertEquals(index.getEntries(read).size(), 0);
+        assertEquals(index.getEntries(longTerm).size(), 0);
 
         index.add(def, file);
         index.add(def, file);
         index.add(def, file);
         index.add(read, file);
         index.add(read, file);
+        index.add(longTerm, file);
 
         Collection<IndexEntry> ret1 = index.getEntries(def);
         Collection<IndexEntry> ret2 = index.getEntries(read);
+        Collection<IndexEntry> ret3 = index.getEntries(longTerm);
 
         assertEquals(ret1.size(), 3);
         assertEquals(ret2.size(), 2);
+        assertEquals(ret3.size(), 1);
 
         assertTrue(matchAll(ret1, def));
         assertTrue(matchAll(ret2, read));
+        assertTrue(matchAll(ret3, longTerm));
         assertFalse(matchAll(ret1, read));
+        assertFalse(matchAll(ret1, longTerm));
         assertFalse(matchAll(ret2, def));
+        assertFalse(matchAll(ret2, longTerm));
+        assertFalse(matchAll(ret3, def));
+        assertFalse(matchAll(ret3, read));
 
         // Add entries from ret2 again using the other add function.
         // Need to make a copy of ret2, because ret2 is a view over the index and
@@ -109,20 +129,23 @@
         for(IndexEntry entry : ret2.toArray(new IndexEntry[0]))
             index.add(entry);
 
-        Collection<IndexEntry> ret3 = index.getEntries(read);
+        Collection<IndexEntry> ret4 = index.getEntries(read);
         assertEquals(ret2.size(), 4);
-        assertTrue(matchAll(ret3, read));
-        assertFalse(matchAll(ret3, def));
+        assertTrue(matchAll(ret4, read));
+        assertFalse(matchAll(ret4, def));
+        assertFalse(matchAll(ret4, longTerm));
     }
 
     @Test
     public void addAllAndGetAllEntries() {
         IStrategoAppl def = def("Class", "java", "lang", "String");
         IStrategoAppl type = type(constructor("Type", str("String")), "Class", "java", "lang", "String");
-        IStrategoList all = factory.makeList(def, type);
+        IStrategoAppl defData = defData(constructor("Type"), str("String"), "Class", "java", "lang", "String");
+        IStrategoList all = factory.makeList(def, type, defData);
 
         assertEquals(index.getEntries(def).size(), 0);
         assertEquals(index.getEntries(type).size(), 0);
+        assertEquals(index.getEntries(defData).size(), 0);
 
         index.addAll(all, file);
 
@@ -130,6 +153,7 @@
 
         assertTrue(contains(ret, def));
         assertTrue(contains(ret, type));
+        assertTrue(contains(ret, defData));
         assertFalse(contains(ret, all));
     }
 
@@ -213,12 +237,12 @@
         assertTrue(contains(ret2, type));
 
         for(IndexEntry entry : ret1) {
-            assertSame(entry.getPartitionDescriptor(), file1);
-            assertNotSame(entry.getPartitionDescriptor(), file2);
+            assertSame(entry.getPartition(), file1);
+            assertNotSame(entry.getPartition(), file2);
         }
         for(IndexEntry entry : ret2) {
-            assertNotSame(entry.getPartitionDescriptor(), file1);
-            assertSame(entry.getPartitionDescriptor(), file2);
+            assertNotSame(entry.getPartition(), file1);
+            assertSame(entry.getPartition(), file2);
         }
 
         index.removePartition(fileTerm1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Fri Dec  7 13:07:42 2012	(r25767)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Fri Dec  7 17:58:58 2012	(r25768)
@@ -132,6 +132,15 @@
         return factory.makeAppl(factory.makeConstructor("Type", 2), uri(namespace, path), type);
     }
 
+    public static IStrategoAppl defData(IStrategoTerm type, IStrategoTerm value, String namespace, String... path) {
+        return factory.makeAppl(factory.makeConstructor("DefData", 3), uri(namespace, path), type, value);
+    }
+
+    public static IStrategoAppl longTerm(IStrategoTerm t1, IStrategoTerm t2, IStrategoTerm t3, String namespace,
+        String... path) {
+        return factory.makeAppl(factory.makeConstructor("LongTerm", 4), uri(namespace, path), t1, t2, t3);
+    }
+
     public static boolean contains(Collection<IndexEntry> entries, IStrategoTerm term) {
         boolean found = false;
         for(IndexEntry entry : entries)


From gabrielkonat at gmail.com  Fri Dec  7 19:22:28 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Fri, 07 Dec 2012 18:22:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25769 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src:
	main/java/org/spoofax/interpreter/library/index
	test/java/org/spoofax/interpreter/library/index...
Message-ID: <20121207182229.0347E2B8006@mx2.tudelft.nl>

Author: gkonat
Date: Fri Dec  7 18:22:28 2012
New Revision: 25769
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25769&sc=1

Log:
Use efficient getPartitionsOf in get_files_of primitive.
Added unit test for getPartitionsOf.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_in_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_children.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -59,26 +59,26 @@
      * 
      * @param template The template to match entries against.
      */
-    public abstract Collection<IndexEntry> getEntries(IStrategoAppl template);
+    public abstract Collection<IndexEntry> get(IStrategoAppl template);
 
     /**
      * Gets all entries.
      */
-    public abstract Collection<IndexEntry> getAllEntries();
+    public abstract Collection<IndexEntry> getAll();
 
     /**
      * Gets all child entries for URI in given template.
      * 
      * @param template The template to match entries against.
      */
-    public abstract Collection<IndexEntry> getEntryChildTerms(IStrategoAppl template);
+    public abstract Collection<IndexEntry> getChildren(IStrategoAppl template);
 
     /**
      * Gets all entries for given partition descriptor.
      * 
      * @param partitionDescriptor The partition descriptor to match entries against.
      */
-    public abstract Collection<IndexEntry> getEntriesInPartition(IndexPartitionDescriptor partitionDescriptor);
+    public abstract Collection<IndexEntry> getInPartition(IndexPartitionDescriptor partitionDescriptor);
 
     /**
      * Gets all partitions that contain entries that match given template. Returned collection is a set of partitions,

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -143,17 +143,17 @@
         }
     }
 
-    public Collection<IndexEntry> getEntries(IStrategoAppl template) {
+    public Collection<IndexEntry> get(IStrategoAppl template) {
         IndexURI uri = factory.createURIFromTemplate(template);
         return getCollection(innerEntries(uri).values());
     }
 
-    public Collection<IndexEntry> getEntryChildTerms(IStrategoAppl template) {
+    public Collection<IndexEntry> getChildren(IStrategoAppl template) {
         IndexURI uri = factory.createURIFromTemplate(template);
         return getCollection(innerChildEntries(uri).values());
     }
 
-    public Collection<IndexEntry> getEntriesInPartition(IndexPartitionDescriptor partitionDescriptor) {
+    public Collection<IndexEntry> getInPartition(IndexPartitionDescriptor partitionDescriptor) {
         if(partitionDescriptor.getPartition() == null)
             return getCollection(entriesPerFile.get(partitionDescriptor.getURI()));
         else if(partitionDescriptor.getURI() == null)
@@ -167,7 +167,7 @@
         return getCollection(innerEntries(uri).keySet());
     }
 
-    public Collection<IndexEntry> getAllEntries() {
+    public Collection<IndexEntry> getAll() {
         List<IndexEntry> allEntries = new LinkedList<IndexEntry>();
         Collection<Multimap<IndexPartitionDescriptor, IndexEntry>> values = entries.values();
         for(Multimap<IndexPartitionDescriptor, IndexEntry> map : values)
@@ -222,7 +222,7 @@
             clearPartition(new IndexPartitionDescriptor(null, partitionDescriptor.getPartition()));
         }
 
-        assert getEntriesInPartition(partitionDescriptor).isEmpty();
+        assert getInPartition(partitionDescriptor).isEmpty();
     }
 
     public Collection<IndexPartition> getAllPartitions() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -45,7 +45,7 @@
     }
 
     /**
-     * Returns a term representation of this entry.
+     * Returns the term representation.
      */
     public IStrategoAppl toTerm(ITermFactory factory) {
         if(cachedTerm != null)
@@ -57,7 +57,7 @@
     }
 
     /**
-     * Returns a list with representations of given entries.
+     * Returns a list with term representations of given entries.
      */
     public static IStrategoList toTerms(ITermFactory factory, Collection<IndexEntry> entries) {
         IStrategoList results = factory.makeList();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -98,7 +98,7 @@
             for(TemplateWithPartitionDescriptor entry : currentIndex.getRemovedEntries())
                 index.remove(entry.getTemplate(), entry.getPartitionDescriptor());
 
-            for(IndexEntry entry : transactionIndex.getAllEntries())
+            for(IndexEntry entry : transactionIndex.getAll())
                 index.add(entry);
         } finally {
             transactionLock.writeLock().unlock();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexPartitionDescriptor.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -6,6 +6,7 @@
 import java.io.File;
 import java.io.Serializable;
 import java.net.URI;
+import java.util.Collection;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -43,6 +44,9 @@
         return partition;
     }
 
+    /**
+     * Returns the term representation.
+     */
     public IStrategoTerm toTerm(ITermFactory factory) {
         if(cachedTerm != null)
             return cachedTerm;
@@ -54,6 +58,18 @@
     }
 
     /**
+     * Returns a list with term representations of given partition descriptors.
+     */
+    public static IStrategoList
+        toTerms(ITermFactory factory, Collection<IndexPartitionDescriptor> partitionDescriptors) {
+        IStrategoList results = factory.makeList();
+        for(IndexPartitionDescriptor entry : partitionDescriptors) {
+            results = factory.makeListCons(entry.toTerm(factory), results);
+        }
+        return results;
+    }
+
+    /**
      * Converts a term partition representation to a IndexPartitionDescriptor, using the {@link IOAgent} to create an
      * absolute path.
      * 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -36,7 +36,7 @@
     private Collection<IndexEntry> elements() {
         List<IndexEntry> entries = new ArrayList<IndexEntry>();
         for(IndexPartitionDescriptor partitionDescriptor : index.getAllPartitionDescriptors()) {
-            entries.addAll(index.getEntriesInPartition(partitionDescriptor));
+            entries.addAll(index.getInPartition(partitionDescriptor));
         }
 
         return entries;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -28,7 +28,7 @@
         if(isTermAppl(tvars[0])) {
             IStrategoAppl template = (IStrategoAppl) tvars[0];
             IIndex ind = index.getCurrent();
-            Collection<IndexEntry> entries = ind.getEntries(template);
+            Collection<IndexEntry> entries = ind.get(template);
             env.setCurrent(IndexEntry.toTerms(env.getFactory(), entries));
             return true;
         } else {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_in_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_in_file.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_all_in_file.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -28,7 +28,7 @@
         if(isTermTuple(tvars[0]) || isTermString(tvars[0])) {
             IIndex ind = index.getCurrent();
             IndexPartitionDescriptor partitionDescriptor = ind.getPartitionDescriptor(tvars[0]);
-            Collection<IndexEntry> results = ind.getEntriesInPartition(partitionDescriptor);
+            Collection<IndexEntry> results = ind.getInPartition(partitionDescriptor);
             env.setCurrent(IndexEntry.toTerms(env.getFactory(), results));
             return true;
         } else {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_children.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_children.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_children.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -28,7 +28,7 @@
         if(isTermAppl(tvars[0])) {
             IStrategoAppl template = (IStrategoAppl) tvars[0];
             IIndex ind = index.getCurrent();
-            Collection<IndexEntry> entries = ind.getEntryChildTerms(template);
+            Collection<IndexEntry> entries = ind.getChildren(template);
             env.setCurrent(IndexEntry.toTerms(env.getFactory(), entries));
             return true;
         } else {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_get_files_of.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -2,13 +2,10 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 
-import java.util.Collection;
-
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
@@ -17,11 +14,11 @@
 public class LANG_index_get_files_of extends AbstractPrimitive {
     private static String NAME = "LANG_index_get_files_of";
 
-    private final IndexManager index;
+    private final IndexManager manager;
 
     public LANG_index_get_files_of(IndexManager index) {
         super(NAME, 0, 1);
-        this.index = index;
+        this.manager = index;
     }
 
     /**
@@ -31,14 +28,8 @@
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
         if(isTermAppl(tvars[0])) {
             IStrategoAppl template = (IStrategoAppl) tvars[0];
-            IIndex ind = index.getCurrent();
-            Collection<IndexEntry> entries = ind.getEntries(template);
-            IStrategoList partitions = env.getFactory().makeList();
-            for(IndexEntry entry : entries) {
-                IStrategoTerm partition = entry.getPartition().toTerm(env.getFactory());
-                partitions = env.getFactory().makeListCons(partition, partitions);
-            }
-            env.setCurrent(partitions);
+            IIndex index = manager.getCurrent();
+            env.setCurrent(IndexPartitionDescriptor.toTerms(env.getFactory(), index.getPartitionsOf(template)));
             return true;
         } else {
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -73,48 +73,48 @@
         removedEntries.add(new TemplateWithPartitionDescriptor(template, partitionDescriptor));
     }
 
-    public Collection<IndexEntry> getEntries(IStrategoAppl template) {
-        Collection<IndexEntry> entries1 = transactionIndex.getEntries(template);
+    public Collection<IndexEntry> get(IStrategoAppl template) {
+        Collection<IndexEntry> entries1 = transactionIndex.get(template);
         getReadLock().lock();
         try {
-            Collection<IndexEntry> entries2 = filterInvisibleEntries(index.getEntries(template));
+            Collection<IndexEntry> entries2 = filterInvisibleEntries(index.get(template));
             return concat(entries1, entries2);
         } finally {
             getReadLock().unlock();
         }
     }
 
-    public Collection<IndexEntry> getAllEntries() {
-        Collection<IndexEntry> entries1 = transactionIndex.getAllEntries();
+    public Collection<IndexEntry> getAll() {
+        Collection<IndexEntry> entries1 = transactionIndex.getAll();
         getReadLock().lock();
         try {
-            Collection<IndexEntry> entries2 = filterInvisibleEntries(index.getAllEntries());
+            Collection<IndexEntry> entries2 = filterInvisibleEntries(index.getAll());
             return concat(entries1, entries2);
         } finally {
             getReadLock().unlock();
         }
     }
 
-    public Collection<IndexEntry> getEntryChildTerms(IStrategoAppl template) {
-        Collection<IndexEntry> entries1 = transactionIndex.getEntryChildTerms(template);
+    public Collection<IndexEntry> getChildren(IStrategoAppl template) {
+        Collection<IndexEntry> entries1 = transactionIndex.getChildren(template);
         getReadLock().lock();
         try {
-            Collection<IndexEntry> entries2 = filterInvisibleEntries(index.getEntryChildTerms(template));
+            Collection<IndexEntry> entries2 = filterInvisibleEntries(index.getChildren(template));
             return concat(entries1, entries2);
         } finally {
             getReadLock().unlock();
         }
     }
 
-    public Collection<IndexEntry> getEntriesInPartition(IndexPartitionDescriptor partitionDescriptor) {
-        Collection<IndexEntry> entries1 = transactionIndex.getEntriesInPartition(partitionDescriptor);
+    public Collection<IndexEntry> getInPartition(IndexPartitionDescriptor partitionDescriptor) {
+        Collection<IndexEntry> entries1 = transactionIndex.getInPartition(partitionDescriptor);
 
         if(isCurrentPartition(partitionDescriptor) && clearedCurrentPartition)
             return entries1; // Current partition has been cleared, entries from index should not be visible.
 
         getReadLock().lock();
         try {
-            Collection<IndexEntry> entries2 = index.getEntriesInPartition(partitionDescriptor);
+            Collection<IndexEntry> entries2 = index.getInPartition(partitionDescriptor);
             return concat(entries1, entries2);
         } finally {
             getReadLock().unlock();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -64,17 +64,17 @@
         IStrategoAppl type = type(constructor("Type", str("String")), "Class", "java", "lang", "String");
         IStrategoAppl defData = defData(constructor("Type"), str("String"), "Class", "java", "lang", "String");
 
-        assertEquals(index.getEntries(def).size(), 0);
-        assertEquals(index.getEntries(type).size(), 0);
-        assertEquals(index.getEntries(defData).size(), 0);
+        assertEquals(index.get(def).size(), 0);
+        assertEquals(index.get(type).size(), 0);
+        assertEquals(index.get(defData).size(), 0);
 
         index.add(def, file);
         index.add(type, file);
         index.add(defData, file);
 
-        Collection<IndexEntry> ret1 = index.getEntries(def);
-        Collection<IndexEntry> ret2 = index.getEntries(type);
-        Collection<IndexEntry> ret3 = index.getEntries(defData);
+        Collection<IndexEntry> ret1 = index.get(def);
+        Collection<IndexEntry> ret2 = index.get(type);
+        Collection<IndexEntry> ret3 = index.get(defData);
 
         assertTrue(matchAll(ret1, def));
         assertTrue(matchAll(ret2, type));
@@ -94,9 +94,9 @@
         IStrategoAppl longTerm =
             longTerm(str("Entity"), str("CRM"), str("Person"), "Function", "CRM", "Person", "GetName");
 
-        assertEquals(index.getEntries(def).size(), 0);
-        assertEquals(index.getEntries(read).size(), 0);
-        assertEquals(index.getEntries(longTerm).size(), 0);
+        assertEquals(index.get(def).size(), 0);
+        assertEquals(index.get(read).size(), 0);
+        assertEquals(index.get(longTerm).size(), 0);
 
         index.add(def, file);
         index.add(def, file);
@@ -105,9 +105,9 @@
         index.add(read, file);
         index.add(longTerm, file);
 
-        Collection<IndexEntry> ret1 = index.getEntries(def);
-        Collection<IndexEntry> ret2 = index.getEntries(read);
-        Collection<IndexEntry> ret3 = index.getEntries(longTerm);
+        Collection<IndexEntry> ret1 = index.get(def);
+        Collection<IndexEntry> ret2 = index.get(read);
+        Collection<IndexEntry> ret3 = index.get(longTerm);
 
         assertEquals(ret1.size(), 3);
         assertEquals(ret2.size(), 2);
@@ -129,7 +129,7 @@
         for(IndexEntry entry : ret2.toArray(new IndexEntry[0]))
             index.add(entry);
 
-        Collection<IndexEntry> ret4 = index.getEntries(read);
+        Collection<IndexEntry> ret4 = index.get(read);
         assertEquals(ret2.size(), 4);
         assertTrue(matchAll(ret4, read));
         assertFalse(matchAll(ret4, def));
@@ -143,22 +143,22 @@
         IStrategoAppl defData = defData(constructor("Type"), str("String"), "Class", "java", "lang", "String");
         IStrategoList all = factory.makeList(def, type, defData);
 
-        assertEquals(index.getEntries(def).size(), 0);
-        assertEquals(index.getEntries(type).size(), 0);
-        assertEquals(index.getEntries(defData).size(), 0);
+        assertEquals(index.get(def).size(), 0);
+        assertEquals(index.get(type).size(), 0);
+        assertEquals(index.get(defData).size(), 0);
 
         index.addAll(all, file);
 
-        Collection<IndexEntry> ret = index.getAllEntries();
+        Collection<IndexEntry> ret = index.getAll();
 
-        assertTrue(contains(ret, def));
-        assertTrue(contains(ret, type));
-        assertTrue(contains(ret, defData));
-        assertFalse(contains(ret, all));
+        assertTrue(containsEntry(ret, def));
+        assertTrue(containsEntry(ret, type));
+        assertTrue(containsEntry(ret, defData));
+        assertFalse(containsEntry(ret, all));
     }
 
     @Test
-    public void getChildEntries() {
+    public void getChildrenEntries() {
         IStrategoAppl classDef = def("Class", "java", "lang", "String");
         IStrategoAppl methodDef1 = def("Method", "java", "lang", "String", "charAt");
         IStrategoAppl methodDef2 = def("Method", "java", "lang", "String", "getBytes");
@@ -167,33 +167,33 @@
         IStrategoAppl methodsTemplate = def("Method", "java", "lang", "String");
         IStrategoAppl fieldsTemplate = def("Field", "java", "lang", "String");
 
-        assertEquals(index.getEntries(classDef).size(), 0);
-        assertEquals(index.getEntries(methodDef1).size(), 0);
-        assertEquals(index.getEntries(methodDef2).size(), 0);
-        assertEquals(index.getEntries(fieldDef).size(), 0);
-        assertEquals(index.getEntryChildTerms(methodsTemplate).size(), 0);
-        assertEquals(index.getEntryChildTerms(fieldsTemplate).size(), 0);
+        assertEquals(index.get(classDef).size(), 0);
+        assertEquals(index.get(methodDef1).size(), 0);
+        assertEquals(index.get(methodDef2).size(), 0);
+        assertEquals(index.get(fieldDef).size(), 0);
+        assertEquals(index.getChildren(methodsTemplate).size(), 0);
+        assertEquals(index.getChildren(fieldsTemplate).size(), 0);
 
         index.add(classDef, file);
         index.add(methodDef1, file);
         index.add(methodDef2, file);
         index.add(fieldDef, file);
 
-        Collection<IndexEntry> ret1 = index.getEntryChildTerms(methodsTemplate);
-        Collection<IndexEntry> ret2 = index.getEntryChildTerms(fieldsTemplate);
+        Collection<IndexEntry> ret1 = index.getChildren(methodsTemplate);
+        Collection<IndexEntry> ret2 = index.getChildren(fieldsTemplate);
 
         assertEquals(ret1.size(), 2);
         assertEquals(ret2.size(), 1);
 
-        assertTrue(contains(ret1, methodDef1));
-        assertTrue(contains(ret1, methodDef2));
-        assertFalse(contains(ret1, fieldDef));
-        assertFalse(contains(ret1, classDef));
-
-        assertFalse(contains(ret2, methodDef1));
-        assertFalse(contains(ret2, methodDef2));
-        assertTrue(contains(ret2, fieldDef));
-        assertFalse(contains(ret2, classDef));
+        assertTrue(containsEntry(ret1, methodDef1));
+        assertTrue(containsEntry(ret1, methodDef2));
+        assertFalse(containsEntry(ret1, fieldDef));
+        assertFalse(containsEntry(ret1, classDef));
+
+        assertFalse(containsEntry(ret2, methodDef1));
+        assertFalse(containsEntry(ret2, methodDef2));
+        assertTrue(containsEntry(ret2, fieldDef));
+        assertFalse(containsEntry(ret2, classDef));
     }
 
     @Test
@@ -208,33 +208,33 @@
         IStrategoAppl def2 = def("Class", "java", "lang", "String");
         IStrategoAppl type = type(constructor("Type", str("String")), "Class", "java", "lang", "String");
 
-        assertEquals(index.getEntries(def1).size(), 0);
-        assertEquals(index.getEntries(read).size(), 0);
-        assertEquals(index.getEntries(def2).size(), 0);
-        assertEquals(index.getEntries(type).size(), 0);
-        assertEquals(index.getEntriesInPartition(file1).size(), 0);
-        assertEquals(index.getEntriesInPartition(file2).size(), 0);
+        assertEquals(index.get(def1).size(), 0);
+        assertEquals(index.get(read).size(), 0);
+        assertEquals(index.get(def2).size(), 0);
+        assertEquals(index.get(type).size(), 0);
+        assertEquals(index.getInPartition(file1).size(), 0);
+        assertEquals(index.getInPartition(file2).size(), 0);
 
         index.add(def1, file1);
         index.add(read, file1);
         index.add(def2, file2);
         index.add(type, file2);
 
-        Collection<IndexEntry> ret1 = index.getEntriesInPartition(file1);
-        Collection<IndexEntry> ret2 = index.getEntriesInPartition(file2);
+        Collection<IndexEntry> ret1 = index.getInPartition(file1);
+        Collection<IndexEntry> ret2 = index.getInPartition(file2);
 
         assertEquals(ret1.size(), 2);
         assertEquals(ret2.size(), 2);
 
-        assertTrue(contains(ret1, def1));
-        assertTrue(contains(ret1, read));
-        assertFalse(contains(ret1, def2));
-        assertFalse(contains(ret1, type));
-
-        assertFalse(contains(ret2, def1));
-        assertFalse(contains(ret2, read));
-        assertTrue(contains(ret2, def2));
-        assertTrue(contains(ret2, type));
+        assertTrue(containsEntry(ret1, def1));
+        assertTrue(containsEntry(ret1, read));
+        assertFalse(containsEntry(ret1, def2));
+        assertFalse(containsEntry(ret1, type));
+
+        assertFalse(containsEntry(ret2, def1));
+        assertFalse(containsEntry(ret2, read));
+        assertTrue(containsEntry(ret2, def2));
+        assertTrue(containsEntry(ret2, type));
 
         for(IndexEntry entry : ret1) {
             assertSame(entry.getPartition(), file1);
@@ -246,11 +246,52 @@
         }
 
         index.removePartition(fileTerm1);
-        assertEquals(index.getEntriesInPartition(file1).size(), 0);
-        assertEquals(index.getEntriesInPartition(file2).size(), 2);
+        assertEquals(index.getInPartition(file1).size(), 0);
+        assertEquals(index.getInPartition(file2).size(), 2);
 
         index.removePartition(file2);
-        assertEquals(index.getEntriesInPartition(file2).size(), 0);
+        assertEquals(index.getInPartition(file2).size(), 0);
+    }
+    
+    @Test
+    public void getPartitionsOf() {
+        IStrategoTerm fileTerm1 = file("TestFile", "Partition", "1");
+        IndexPartitionDescriptor file1 = setupIndex(fileTerm1);
+        IndexPartitionDescriptor file2 = setupIndex(file("TestFile", "Partition", "2"));
+        
+        IStrategoAppl def = def("Entity", "CRM", "Person");
+        IStrategoAppl read = read("Function", "CRM", "Person", "GetName");
+        IStrategoAppl longTerm =
+            longTerm(str("Entity"), str("CRM"), str("Person"), "Function", "CRM", "Person", "GetName");
+        IStrategoAppl defData = defData(constructor("Type"), str("String"), "Class", "java", "lang", "String");
+
+        assertEquals(index.get(def).size(), 0);
+        assertEquals(index.get(read).size(), 0);
+        assertEquals(index.get(longTerm).size(), 0);
+        assertEquals(index.get(defData).size(), 0);
+        assertEquals(index.getInPartition(file1).size(), 0);
+        assertEquals(index.getInPartition(file2).size(), 0);
+        
+        index.add(def, file1);
+        index.add(def, file2);
+        index.add(def, file1);
+        index.add(read, file2);
+        index.add(read, file2);
+        index.add(longTerm, file1);
+        
+        Collection<IndexPartitionDescriptor> ret1 = index.getPartitionsOf(def);
+        Collection<IndexPartitionDescriptor> ret2 = index.getPartitionsOf(read);
+        Collection<IndexPartitionDescriptor> ret3 = index.getPartitionsOf(longTerm);
+        Collection<IndexPartitionDescriptor> ret4 = index.getPartitionsOf(defData);
+        
+        assertTrue(containsPartitionDescriptor(ret1, file1));
+        assertTrue(containsPartitionDescriptor(ret1, file2));
+        assertFalse(containsPartitionDescriptor(ret2, file1));
+        assertTrue(containsPartitionDescriptor(ret2, file2));
+        assertTrue(containsPartitionDescriptor(ret3, file1));
+        assertFalse(containsPartitionDescriptor(ret3, file2));
+        assertFalse(containsPartitionDescriptor(ret4, file1));
+        assertFalse(containsPartitionDescriptor(ret4, file2));
     }
 
     @Test
@@ -260,15 +301,15 @@
 
         IStrategoAppl readAll = readAll("Str", "Class", "java", "lang");
 
-        assertEquals(index.getAllEntries().size(), 0);
+        assertEquals(index.getAll().size(), 0);
 
         index.add(readAll, file1);
         index.add(readAll, file2);
 
-        assertEquals(index.getAllEntries().size(), 2);
+        assertEquals(index.getAll().size(), 2);
 
         index.clear();
 
-        assertEquals(index.getAllEntries().size(), 0);
+        assertEquals(index.getAll().size(), 0);
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -141,13 +141,21 @@
         return factory.makeAppl(factory.makeConstructor("LongTerm", 4), uri(namespace, path), t1, t2, t3);
     }
 
-    public static boolean contains(Collection<IndexEntry> entries, IStrategoTerm term) {
+    public static boolean containsEntry(Collection<IndexEntry> entries, IStrategoTerm term) {
         boolean found = false;
         for(IndexEntry entry : entries)
             found = found || entry.toTerm(factory).match(term);
         return found;
     }
 
+    public static boolean containsPartitionDescriptor(Collection<IndexPartitionDescriptor> partitionDescriptors,
+        IndexPartitionDescriptor partition) {
+        boolean found = false;
+        for(IndexPartitionDescriptor partitionDescriptor : partitionDescriptors)
+            found = found || partitionDescriptor.equals(partition);
+        return found;
+    }
+
     public static boolean matchAll(Collection<IndexEntry> entries, IStrategoTerm term) {
         if(entries.size() == 0)
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -54,11 +54,11 @@
         @SuppressWarnings("unused")
         Collection<IndexEntry> ret;
         for(int i = 0; i < NUM_GET; ++i) {
-            ret = index.getEntryChildTerms(def1Parent);
-            ret = index.getEntryChildTerms(def2Parent);
-            ret = index.getEntryChildTerms(def3Parent);
-            ret = index.getEntryChildTerms(use1Parent);
-            ret = index.getEntryChildTerms(typeTemplate1Parent);
+            ret = index.getChildren(def1Parent);
+            ret = index.getChildren(def2Parent);
+            ret = index.getChildren(def3Parent);
+            ret = index.getChildren(use1Parent);
+            ret = index.getChildren(typeTemplate1Parent);
         }
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -52,7 +52,7 @@
         @SuppressWarnings("unused")
         Collection<IndexEntry> ret;
         for(int i = 0; i < this.numFiles; ++i) {
-            ret = index.getEntriesInPartition(files[i]);
+            ret = index.getInPartition(files[i]);
         }
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -54,11 +54,11 @@
         @SuppressWarnings("unused")
         Collection<IndexEntry> ret;
         for(int i = 0; i < NUM_GET; ++i) {
-            ret = index.getEntries(def1);
-            ret = index.getEntries(def2);
-            ret = index.getEntries(def3);
-            ret = index.getEntries(use1);
-            ret = index.getEntries(typeTemplate1);
+            ret = index.get(def1);
+            ret = index.get(def2);
+            ret = index.get(def3);
+            ret = index.get(use1);
+            ret = index.get(typeTemplate1);
         }
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java	Fri Dec  7 17:58:58 2012	(r25768)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java	Fri Dec  7 18:22:28 2012	(r25769)
@@ -50,7 +50,7 @@
     @Test
     public void persist() throws IOException {
         ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("persist.dat", false));
-        outputStream.writeObject(index.getAllEntries().toArray());
+        outputStream.writeObject(index.getAll().toArray());
         outputStream.flush();
         outputStream.close();
     }


From gabrielkonat at gmail.com  Fri Dec  7 20:37:04 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Fri, 07 Dec 2012 19:37:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25770 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src:
	main/java/org/spoofax/interpreter/library/index
	test/java/org/spoofax/interpreter/library/index...
Message-ID: <20121207193704.D72ED7F800C@mx1.tudelft.nl>

Author: gkonat
Date: Fri Dec  7 19:37:04 2012
New Revision: 25770
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25770&sc=1

Log:
Added unit tests for TransactionIndex.
Allow clear operation on TransactionIndex.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec  7 18:22:28 2012	(r25769)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec  7 19:37:04 2012	(r25770)
@@ -183,8 +183,11 @@
     }
 
     public void clear() {
-        // Should not be called on transaction index, index cannot be cleared.
-        assert false;
+        transactionIndex.clear();
+
+        getWriteLock().lock();
+        index.clear();
+        getWriteLock().unlock();
     }
 
     public IStrategoTerm toTerm(boolean includePositions) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java	Fri Dec  7 18:22:28 2012	(r25769)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java	Fri Dec  7 19:37:04 2012	(r25770)
@@ -10,6 +10,8 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
 import org.spoofax.interpreter.library.index.IndexEntry;
 import org.spoofax.interpreter.library.index.IndexPartition;
 import org.spoofax.interpreter.library.index.IndexPartitionDescriptor;
@@ -17,7 +19,24 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
+ at RunWith(value = Parameterized.class)
 public class IndexSymbolTableTest extends IndexTest {
+    private boolean startTransaction;
+
+    public IndexSymbolTableTest(boolean startTransaction) {
+        this.startTransaction = startTransaction;
+    }
+
+    private void startTransaction() {
+        if(startTransaction)
+            doStartTransaction();
+    }
+
+    private void endTransaction() {
+        if(startTransaction)
+            doEndTransaction();
+    }
+
     @Before
     public void setUp() {
         index.clear();
@@ -28,6 +47,8 @@
         IStrategoTerm fileTerm1 = file("a/b/c");
         IStrategoTerm fileTerm2 = file("a/b/c", "some", "element");
 
+        startTransaction();
+
         IndexPartitionDescriptor file1 = setupIndex(fileTerm1);
         IndexPartitionDescriptor file2 = setupIndex(fileTerm2);
 
@@ -56,6 +77,8 @@
         Collection<IndexPartitionDescriptor> all2 = index.getAllPartitionDescriptors();
         assertTrue(all2.contains(ret1));
         assertTrue(all2.contains(ret2));
+
+        endTransaction();
     }
 
     @Test
@@ -64,6 +87,8 @@
         IStrategoAppl type = type(constructor("Type", str("String")), "Class", "java", "lang", "String");
         IStrategoAppl defData = defData(constructor("Type"), str("String"), "Class", "java", "lang", "String");
 
+        startTransaction();
+
         assertEquals(index.get(def).size(), 0);
         assertEquals(index.get(type).size(), 0);
         assertEquals(index.get(defData).size(), 0);
@@ -76,6 +101,8 @@
         Collection<IndexEntry> ret2 = index.get(type);
         Collection<IndexEntry> ret3 = index.get(defData);
 
+        endTransaction();
+
         assertTrue(matchAll(ret1, def));
         assertTrue(matchAll(ret2, type));
         assertTrue(matchAll(ret3, defData));
@@ -94,6 +121,8 @@
         IStrategoAppl longTerm =
             longTerm(str("Entity"), str("CRM"), str("Person"), "Function", "CRM", "Person", "GetName");
 
+        startTransaction();
+
         assertEquals(index.get(def).size(), 0);
         assertEquals(index.get(read).size(), 0);
         assertEquals(index.get(longTerm).size(), 0);
@@ -130,10 +159,12 @@
             index.add(entry);
 
         Collection<IndexEntry> ret4 = index.get(read);
-        assertEquals(ret2.size(), 4);
+        assertEquals(ret4.size(), 4);
         assertTrue(matchAll(ret4, read));
         assertFalse(matchAll(ret4, def));
         assertFalse(matchAll(ret4, longTerm));
+
+        endTransaction();
     }
 
     @Test
@@ -143,6 +174,8 @@
         IStrategoAppl defData = defData(constructor("Type"), str("String"), "Class", "java", "lang", "String");
         IStrategoList all = factory.makeList(def, type, defData);
 
+        startTransaction();
+
         assertEquals(index.get(def).size(), 0);
         assertEquals(index.get(type).size(), 0);
         assertEquals(index.get(defData).size(), 0);
@@ -151,6 +184,8 @@
 
         Collection<IndexEntry> ret = index.getAll();
 
+        endTransaction();
+
         assertTrue(containsEntry(ret, def));
         assertTrue(containsEntry(ret, type));
         assertTrue(containsEntry(ret, defData));
@@ -167,6 +202,8 @@
         IStrategoAppl methodsTemplate = def("Method", "java", "lang", "String");
         IStrategoAppl fieldsTemplate = def("Field", "java", "lang", "String");
 
+        startTransaction();
+
         assertEquals(index.get(classDef).size(), 0);
         assertEquals(index.get(methodDef1).size(), 0);
         assertEquals(index.get(methodDef2).size(), 0);
@@ -182,6 +219,8 @@
         Collection<IndexEntry> ret1 = index.getChildren(methodsTemplate);
         Collection<IndexEntry> ret2 = index.getChildren(fieldsTemplate);
 
+        endTransaction();
+
         assertEquals(ret1.size(), 2);
         assertEquals(ret2.size(), 1);
 
@@ -208,6 +247,8 @@
         IStrategoAppl def2 = def("Class", "java", "lang", "String");
         IStrategoAppl type = type(constructor("Type", str("String")), "Class", "java", "lang", "String");
 
+        startTransaction();
+
         assertEquals(index.get(def1).size(), 0);
         assertEquals(index.get(read).size(), 0);
         assertEquals(index.get(def2).size(), 0);
@@ -251,39 +292,45 @@
 
         index.removePartition(file2);
         assertEquals(index.getInPartition(file2).size(), 0);
+
+        endTransaction();
     }
-    
+
     @Test
     public void getPartitionsOf() {
         IStrategoTerm fileTerm1 = file("TestFile", "Partition", "1");
         IndexPartitionDescriptor file1 = setupIndex(fileTerm1);
         IndexPartitionDescriptor file2 = setupIndex(file("TestFile", "Partition", "2"));
-        
+
         IStrategoAppl def = def("Entity", "CRM", "Person");
         IStrategoAppl read = read("Function", "CRM", "Person", "GetName");
         IStrategoAppl longTerm =
             longTerm(str("Entity"), str("CRM"), str("Person"), "Function", "CRM", "Person", "GetName");
         IStrategoAppl defData = defData(constructor("Type"), str("String"), "Class", "java", "lang", "String");
 
+        startTransaction();
+
         assertEquals(index.get(def).size(), 0);
         assertEquals(index.get(read).size(), 0);
         assertEquals(index.get(longTerm).size(), 0);
         assertEquals(index.get(defData).size(), 0);
         assertEquals(index.getInPartition(file1).size(), 0);
         assertEquals(index.getInPartition(file2).size(), 0);
-        
+
         index.add(def, file1);
         index.add(def, file2);
         index.add(def, file1);
         index.add(read, file2);
         index.add(read, file2);
         index.add(longTerm, file1);
-        
+
         Collection<IndexPartitionDescriptor> ret1 = index.getPartitionsOf(def);
         Collection<IndexPartitionDescriptor> ret2 = index.getPartitionsOf(read);
         Collection<IndexPartitionDescriptor> ret3 = index.getPartitionsOf(longTerm);
         Collection<IndexPartitionDescriptor> ret4 = index.getPartitionsOf(defData);
-        
+
+        endTransaction();
+
         assertTrue(containsPartitionDescriptor(ret1, file1));
         assertTrue(containsPartitionDescriptor(ret1, file2));
         assertFalse(containsPartitionDescriptor(ret2, file1));
@@ -301,6 +348,8 @@
 
         IStrategoAppl readAll = readAll("Str", "Class", "java", "lang");
 
+        startTransaction();
+
         assertEquals(index.getAll().size(), 0);
 
         index.add(readAll, file1);
@@ -311,5 +360,7 @@
         index.clear();
 
         assertEquals(index.getAll().size(), 0);
+
+        endTransaction();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Fri Dec  7 18:22:28 2012	(r25769)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Fri Dec  7 19:37:04 2012	(r25770)
@@ -2,10 +2,13 @@
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 
+import java.util.Arrays;
 import java.util.Collection;
+import java.util.List;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.runners.Parameterized.Parameters;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.index.IIndex;
@@ -33,6 +36,12 @@
     protected static IndexPartitionDescriptor file;
     protected static IIndex index;
 
+    @Parameters
+    public static List<Object[]> data() {
+        Object[][] data = new Object[][] { { false }, { true } };
+        return Arrays.asList(data);
+    }
+
     @BeforeClass
     public static void setUpOnce() {
         interpreter = new Interpreter();
@@ -76,6 +85,16 @@
         indexManager.setCurrentPartition(file);
     }
 
+    public static void doStartTransaction() {
+        indexManager.startTransaction(factory, agent);
+        index = indexManager.getCurrent();
+    }
+
+    public static void doEndTransaction() {
+        indexManager.endTransaction();
+        index = indexManager.getCurrent();
+    }
+
     public static IndexPartitionDescriptor getFile(IStrategoTerm fileTerm) {
         return index.getPartitionDescriptor(fileTerm);
     }

From gabrielkonat at gmail.com  Fri Dec  7 20:53:28 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Fri, 07 Dec 2012 19:53:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25771 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src:
	main/java/org/spoofax/interpreter/library/index
	test/java/org/spoofax/interpreter/library/index...
Message-ID: <20121207195328.B01D8108C015@mx3.tudelft.nl>

Author: gkonat
Date: Fri Dec  7 19:53:28 2012
New Revision: 25771
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25771&sc=1

Log:
Fixed expected and actual argument in assertEquals being swapped.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_all.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_reload.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -104,34 +104,34 @@
     public abstract IndexPartitionDescriptor getPartitionDescriptor(IStrategoTerm partitionTerm);
 
     /**
+     * Gets all partitions that are in the index.
+     */
+    public abstract Collection<IndexPartition> getAllPartitions();
+
+    /**
+     * Gets all partition descriptors that are in the index.
+     */
+    public abstract Collection<IndexPartitionDescriptor> getAllPartitionDescriptors();
+    
+    /**
      * Removes all entries in given partition term and removes the partition itself.
      * 
      * @param partitionTerm A string or (string, string) tuple with a file name or the file name and partition
      *            identifier.
      */
-    public abstract void removePartition(IStrategoTerm partitionTerm);
+    public abstract void clearPartition(IStrategoTerm partitionTerm);
 
     /**
      * Removes all entries for given partition and removes the partition itself.
      * 
      * @param partitionDescriptor A partition descriptor.
      */
-    public abstract void removePartition(IndexPartitionDescriptor partitionDescriptor);
-
-    /**
-     * Gets all partitions that are in the index.
-     */
-    public abstract Collection<IndexPartition> getAllPartitions();
-
-    /**
-     * Gets all partition descriptors that are in the index.
-     */
-    public abstract Collection<IndexPartitionDescriptor> getAllPartitionDescriptors();
+    public abstract void clearPartition(IndexPartitionDescriptor partitionDescriptor);
 
     /**
      * Clears the entire index.
      */
-    public abstract void clear();
+    public abstract void clearAll();
 
     /**
      * Returns the index as a Stratego term.

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -193,15 +193,15 @@
         return IndexPartitionDescriptor.fromTerm(agent, partitionTerm);
     }
 
-    public void removePartition(IStrategoTerm partitionTerm) {
-        removePartition(getPartitionDescriptor(partitionTerm));
+    public void clearPartition(IStrategoTerm partitionTerm) {
+        clearPartitionInternal(getPartitionDescriptor(partitionTerm));
     }
 
-    public void removePartition(IndexPartitionDescriptor partitionDescriptor) {
-        clearPartition(partitionDescriptor);
+    public void clearPartition(IndexPartitionDescriptor partitionDescriptor) {
+        clearPartitionInternal(partitionDescriptor);
     }
 
-    private void clearPartition(IndexPartitionDescriptor partitionDescriptor) {
+    private void clearPartitionInternal(IndexPartitionDescriptor partitionDescriptor) {
         assert partitionDescriptor.getPartition() != null || partitionDescriptor.getURI() != null;
 
         Collection<Multimap<IndexPartitionDescriptor, IndexEntry>> entryValues = entries.values();
@@ -233,7 +233,7 @@
         return getCollection(partitions.keySet());
     }
 
-    public void clear() {
+    public void clearAll() {
         entries.clear();
         childs.clear();
         entriesPerPartitionDescriptor.clear();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -93,7 +93,7 @@
         transactionLock.writeLock().lock();
         try {
             if(currentIndex.hasClearedCurrentPartition())
-                index.removePartition(currentIndex.getCurrentPartition());
+                index.clearPartition(currentIndex.getCurrentPartition());
 
             for(TemplateWithPartitionDescriptor entry : currentIndex.getRemovedEntries())
                 index.remove(entry.getTemplate(), entry.getPartitionDescriptor());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_all.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_all.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_all.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -20,7 +20,7 @@
 
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-        index.getCurrent().clear();
+        index.getCurrent().clearAll();
         return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_file.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_clear_file.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -25,7 +25,7 @@
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
         if(isTermString(tvars[0]) || isTermTuple(tvars[0])) {
             IIndex ind = index.getCurrent();
-            ind.removePartition(tvars[0]);
+            ind.clearPartition(tvars[0]);
             return true;
         } else {
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_reload.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_reload.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_reload.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -17,7 +17,7 @@
 
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-        index.getCurrent().clear();
+        index.getCurrent().clearAll();
         NotificationCenter.notifyNewProject(index.getCurrentProject());
         return true;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -147,15 +147,15 @@
         return index.getPartitionDescriptor(partitionTerm);
     }
 
-    public void removePartition(IStrategoTerm partitionTerm) {
-        removePartition(transactionIndex.getPartitionDescriptor(partitionTerm));
+    public void clearPartition(IStrategoTerm partitionTerm) {
+        clearPartition(transactionIndex.getPartitionDescriptor(partitionTerm));
     }
 
-    public void removePartition(IndexPartitionDescriptor partitionDescriptor) {
+    public void clearPartition(IndexPartitionDescriptor partitionDescriptor) {
         assert isCurrentPartition(partitionDescriptor); // May only clear current partition.
 
         clearedCurrentPartition = true;
-        transactionIndex.removePartition(partitionDescriptor);
+        transactionIndex.clearPartition(partitionDescriptor);
     }
 
     public Collection<IndexPartition> getAllPartitions() {
@@ -182,11 +182,11 @@
         }
     }
 
-    public void clear() {
-        transactionIndex.clear();
+    public void clearAll() {
+        transactionIndex.clearAll();
 
         getWriteLock().lock();
-        index.clear();
+        index.clearAll();
         getWriteLock().unlock();
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexSymbolTableTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -39,7 +39,7 @@
 
     @Before
     public void setUp() {
-        index.clear();
+        index.clearAll();
     }
 
     @Test
@@ -60,18 +60,18 @@
         assertFalse(all1.contains(ret1));
         assertFalse(all1.contains(ret2));
 
-        assertEquals(file1, ret1);
-        assertEquals(file1.toTerm(factory), ret1.toTerm(factory));
-        assertEquals(file2, ret2);
-        assertEquals(file2.toTerm(factory), ret2.toTerm(factory));
+        assertEquals(ret1, file1);
+        assertEquals(ret1.toTerm(factory), file1.toTerm(factory));
+        assertEquals(ret2, file2);
+        assertEquals(ret2.toTerm(factory), file2.toTerm(factory));
 
         IndexPartition retf1 = index.getPartition(file1);
         IndexPartition retf2 = index.getPartition(file2);
 
-        assertEquals(retf1.getDescriptor(), ret1);
-        assertEquals(file1.toTerm(factory), retf1.toTerm(factory));
-        assertEquals(retf2.getDescriptor(), ret2);
-        assertEquals(file2.toTerm(factory), retf2.toTerm(factory));
+        assertEquals(ret1, retf1.getDescriptor());
+        assertEquals(retf1.toTerm(factory), file1.toTerm(factory));
+        assertEquals(ret2, retf2.getDescriptor());
+        assertEquals(retf2.toTerm(factory), file2.toTerm(factory));
 
         // Files have been added by calling getFile.
         Collection<IndexPartitionDescriptor> all2 = index.getAllPartitionDescriptors();
@@ -89,9 +89,9 @@
 
         startTransaction();
 
-        assertEquals(index.get(def).size(), 0);
-        assertEquals(index.get(type).size(), 0);
-        assertEquals(index.get(defData).size(), 0);
+        assertEquals(0, index.get(def).size());
+        assertEquals(0, index.get(type).size());
+        assertEquals(0, index.get(defData).size());
 
         index.add(def, file);
         index.add(type, file);
@@ -123,9 +123,9 @@
 
         startTransaction();
 
-        assertEquals(index.get(def).size(), 0);
-        assertEquals(index.get(read).size(), 0);
-        assertEquals(index.get(longTerm).size(), 0);
+        assertEquals(0, index.get(def).size());
+        assertEquals(0, index.get(read).size());
+        assertEquals(0, index.get(longTerm).size());
 
         index.add(def, file);
         index.add(def, file);
@@ -138,9 +138,9 @@
         Collection<IndexEntry> ret2 = index.get(read);
         Collection<IndexEntry> ret3 = index.get(longTerm);
 
-        assertEquals(ret1.size(), 3);
-        assertEquals(ret2.size(), 2);
-        assertEquals(ret3.size(), 1);
+        assertEquals(3, ret1.size());
+        assertEquals(2, ret2.size());
+        assertEquals(1, ret3.size());
 
         assertTrue(matchAll(ret1, def));
         assertTrue(matchAll(ret2, read));
@@ -159,12 +159,13 @@
             index.add(entry);
 
         Collection<IndexEntry> ret4 = index.get(read);
-        assertEquals(ret4.size(), 4);
+
+        endTransaction();
+
+        assertEquals(4, ret4.size());
         assertTrue(matchAll(ret4, read));
         assertFalse(matchAll(ret4, def));
         assertFalse(matchAll(ret4, longTerm));
-
-        endTransaction();
     }
 
     @Test
@@ -176,9 +177,9 @@
 
         startTransaction();
 
-        assertEquals(index.get(def).size(), 0);
-        assertEquals(index.get(type).size(), 0);
-        assertEquals(index.get(defData).size(), 0);
+        assertEquals(0, index.get(def).size());
+        assertEquals(0, index.get(type).size());
+        assertEquals(0, index.get(defData).size());
 
         index.addAll(all, file);
 
@@ -204,12 +205,12 @@
 
         startTransaction();
 
-        assertEquals(index.get(classDef).size(), 0);
-        assertEquals(index.get(methodDef1).size(), 0);
-        assertEquals(index.get(methodDef2).size(), 0);
-        assertEquals(index.get(fieldDef).size(), 0);
-        assertEquals(index.getChildren(methodsTemplate).size(), 0);
-        assertEquals(index.getChildren(fieldsTemplate).size(), 0);
+        assertEquals(0, index.get(classDef).size());
+        assertEquals(0, index.get(methodDef1).size());
+        assertEquals(0, index.get(methodDef2).size());
+        assertEquals(0, index.get(fieldDef).size());
+        assertEquals(0, index.getChildren(methodsTemplate).size());
+        assertEquals(0, index.getChildren(fieldsTemplate).size());
 
         index.add(classDef, file);
         index.add(methodDef1, file);
@@ -221,8 +222,8 @@
 
         endTransaction();
 
-        assertEquals(ret1.size(), 2);
-        assertEquals(ret2.size(), 1);
+        assertEquals(2, ret1.size());
+        assertEquals(1, ret2.size());
 
         assertTrue(containsEntry(ret1, methodDef1));
         assertTrue(containsEntry(ret1, methodDef2));
@@ -249,12 +250,12 @@
 
         startTransaction();
 
-        assertEquals(index.get(def1).size(), 0);
-        assertEquals(index.get(read).size(), 0);
-        assertEquals(index.get(def2).size(), 0);
-        assertEquals(index.get(type).size(), 0);
-        assertEquals(index.getInPartition(file1).size(), 0);
-        assertEquals(index.getInPartition(file2).size(), 0);
+        assertEquals(0, index.get(def1).size());
+        assertEquals(0, index.get(read).size());
+        assertEquals(0, index.get(def2).size());
+        assertEquals(0, index.get(type).size());
+        assertEquals(0, index.getInPartition(file1).size());
+        assertEquals(0, index.getInPartition(file2).size());
 
         index.add(def1, file1);
         index.add(read, file1);
@@ -264,8 +265,8 @@
         Collection<IndexEntry> ret1 = index.getInPartition(file1);
         Collection<IndexEntry> ret2 = index.getInPartition(file2);
 
-        assertEquals(ret1.size(), 2);
-        assertEquals(ret2.size(), 2);
+        assertEquals(2, ret1.size());
+        assertEquals(2, ret2.size());
 
         assertTrue(containsEntry(ret1, def1));
         assertTrue(containsEntry(ret1, read));
@@ -286,12 +287,12 @@
             assertSame(entry.getPartition(), file2);
         }
 
-        index.removePartition(fileTerm1);
-        assertEquals(index.getInPartition(file1).size(), 0);
-        assertEquals(index.getInPartition(file2).size(), 2);
+        index.clearPartition(fileTerm1);
+        assertEquals(0, index.getInPartition(file1).size());
+        assertEquals(2, index.getInPartition(file2).size());
 
-        index.removePartition(file2);
-        assertEquals(index.getInPartition(file2).size(), 0);
+        index.clearPartition(file2);
+        assertEquals(0, index.getInPartition(file2).size());
 
         endTransaction();
     }
@@ -310,12 +311,12 @@
 
         startTransaction();
 
-        assertEquals(index.get(def).size(), 0);
-        assertEquals(index.get(read).size(), 0);
-        assertEquals(index.get(longTerm).size(), 0);
-        assertEquals(index.get(defData).size(), 0);
-        assertEquals(index.getInPartition(file1).size(), 0);
-        assertEquals(index.getInPartition(file2).size(), 0);
+        assertEquals(0, index.get(def).size());
+        assertEquals(0, index.get(read).size());
+        assertEquals(0, index.get(longTerm).size());
+        assertEquals(0, index.get(defData).size());
+        assertEquals(0, index.getInPartition(file1).size());
+        assertEquals(0, index.getInPartition(file2).size());
 
         index.add(def, file1);
         index.add(def, file2);
@@ -350,16 +351,16 @@
 
         startTransaction();
 
-        assertEquals(index.getAll().size(), 0);
+        assertEquals(0, index.getAll().size());
 
         index.add(readAll, file1);
         index.add(readAll, file2);
 
-        assertEquals(index.getAll().size(), 2);
+        assertEquals(2, index.getAll().size());
 
-        index.clear();
+        index.clearAll();
 
-        assertEquals(index.getAll().size(), 0);
+        assertEquals(0, index.getAll().size());
 
         endTransaction();
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -62,7 +62,7 @@
 
     @AfterClass
     public static void tearDownOnce() {
-        index.clear();
+        index.clearAll();
         index = null;
         indexManager = null;
         project = null;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -34,7 +34,7 @@
             e.printStackTrace();
         }
 
-        index.clear();
+        index.clearAll();
     }
 
     @Test

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -41,7 +41,7 @@
     public void clear() {
         // Have to add items here, otherwise index will be empty after first round.
         // This results in the time taken to add entries being added.
-        index.clear();
+        index.clearAll();
         for(int i = 0; i < this.numItems; ++i) {
             index.add(def1, getFile(this.numFiles));
             index.add(def2, getFile(this.numFiles));
@@ -51,6 +51,6 @@
         }
 
         // Clear one file in the middle.
-        index.removePartition(files[fileIndexToClear]);
+        index.clearPartition(files[fileIndexToClear]);
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -38,7 +38,7 @@
             e.printStackTrace();
         }
 
-        index.clear();
+        index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
             index.add(def1, getFile(this.numFiles));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -36,7 +36,7 @@
             e.printStackTrace();
         }
 
-        index.clear();
+        index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
             index.add(def1, getFile(this.numFiles));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -36,7 +36,7 @@
             e.printStackTrace();
         }
 
-        index.clear();
+        index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
             index.add(def1, getFile(this.numFiles));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -38,7 +38,7 @@
             e.printStackTrace();
         }
 
-        index.clear();
+        index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
             index.add(def1, getFile(this.numFiles));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -38,7 +38,7 @@
             e.printStackTrace();
         }
 
-        index.clear();
+        index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
             index.add(def1, getFile(this.numFiles));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java	Fri Dec  7 19:37:04 2012	(r25770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
@@ -36,7 +36,7 @@
             e.printStackTrace();
         }
 
-        index.clear();
+        index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
             index.add(def1, getFile(this.numFiles));

From gabrielkonat at gmail.com  Fri Dec  7 21:20:31 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Fri, 07 Dec 2012 20:20:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25772 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance
Message-ID: <20121207202032.3DF092B8036@mx2.tudelft.nl>

Author: gkonat
Date: Fri Dec  7 20:20:30 2012
New Revision: 25772
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25772&sc=1

Log:
Added performance benchmarks for TransactionIndex.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexAddPerformanceTest.java	Fri Dec  7 20:20:30 2012	(r25772)
@@ -19,17 +19,13 @@
     @Rule
     public MethodRule benchmarkRun;
 
-    private int numItems;
-    private int numFiles;
-
-    public IndexAddPerformanceTest(int numItems, int numFiles) {
-        this.numItems = numItems;
-        this.numFiles = numFiles;
-
+    public IndexAddPerformanceTest(int numItems, int numFiles, boolean startTransaction) {
+        super(numItems, numFiles, startTransaction);
+        
         try {
             benchmarkRun =
                 new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
-                    "add_" + this.numFiles + ".csv", true)));
+                    "add_" + this.numFiles + "_" + indexTypeString() + ".csv", true)));
         } catch(IOException e) {
             e.printStackTrace();
         }
@@ -39,12 +35,16 @@
 
     @Test
     public void add() {
+        startTransaction();
+        
         for(int i = 0; i < numItems; ++i) {
-            index.add(def1, getFile(numFiles));
-            index.add(def2, getFile(numFiles));
-            index.add(def3, getFile(numFiles));
-            index.add(use1, getFile(numFiles));
-            index.add(type1, getFile(numFiles));
+            index.add(def1, getNextFile());
+            index.add(def2, getNextFile());
+            index.add(def3, getNextFile());
+            index.add(use1, getNextFile());
+            index.add(type1, getNextFile());
         }
+        
+        endTransaction();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexClearPerformanceTest.java	Fri Dec  7 20:20:30 2012	(r25772)
@@ -19,19 +19,17 @@
     @Rule
     public MethodRule benchmarkRun;
 
-    private int numItems;
-    private int numFiles;
     private int fileIndexToClear;
 
-    public IndexClearPerformanceTest(int numItemsPerFile, int numFiles) {
-        this.numItems = numItemsPerFile;
-        this.numFiles = numFiles;
+    public IndexClearPerformanceTest(int numItemsPerFile, int numFiles, boolean startTransaction) {
+        super(numItemsPerFile, numFiles, startTransaction);
+        
         this.fileIndexToClear = (int) Math.floor((double) this.numFiles / 2);
 
         try {
             benchmarkRun =
                 new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
-                    "clear_" + this.numFiles + ".csv", true)));
+                    "clear_" + this.numFiles + "_" + indexTypeString() + ".csv", true)));
         } catch(IOException e) {
             e.printStackTrace();
         }
@@ -39,18 +37,22 @@
 
     @Test
     public void clear() {
+        startTransaction();
+        
         // Have to add items here, otherwise index will be empty after first round.
         // This results in the time taken to add entries being added.
         index.clearAll();
         for(int i = 0; i < this.numItems; ++i) {
-            index.add(def1, getFile(this.numFiles));
-            index.add(def2, getFile(this.numFiles));
-            index.add(def3, getFile(this.numFiles));
-            index.add(use1, getFile(this.numFiles));
-            index.add(type1, getFile(this.numFiles));
+            index.add(def1, getNextFile());
+            index.add(def2, getNextFile());
+            index.add(def3, getNextFile());
+            index.add(use1, getNextFile());
+            index.add(type1, getNextFile());
         }
 
         // Clear one file in the middle.
         index.clearPartition(files[fileIndexToClear]);
+        
+        endTransaction();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetChildsPerformanceTest.java	Fri Dec  7 20:20:30 2012	(r25772)
@@ -23,17 +23,13 @@
 
     private static int NUM_GET = 200000;
 
-    private int numItems;
-    private int numFiles;
-
-    public IndexGetChildsPerformanceTest(int numItems, int numFiles) {
-        this.numItems = numItems;
-        this.numFiles = numFiles;
+    public IndexGetChildsPerformanceTest(int numItems, int numFiles, boolean startTransaction) {
+        super(numItems, numFiles, startTransaction);
 
         try {
             benchmarkRun =
                 new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
-                    "get-childs_" + this.numFiles + ".csv", true)));
+                    "get-childs_" + this.numFiles + "_" + indexTypeString() + ".csv", true)));
         } catch(IOException e) {
             e.printStackTrace();
         }
@@ -41,16 +37,18 @@
         index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
-            index.add(def1, getFile(this.numFiles));
-            index.add(def2, getFile(this.numFiles));
-            index.add(def3, getFile(this.numFiles));
-            index.add(use1, getFile(this.numFiles));
-            index.add(type1, getFile(this.numFiles));
+            index.add(def1, getNextFile());
+            index.add(def2, getNextFile());
+            index.add(def3, getNextFile());
+            index.add(use1, getNextFile());
+            index.add(type1, getNextFile());
         }
     }
 
     @Test
     public void getChilds() {
+        startTransaction();
+        
         @SuppressWarnings("unused")
         Collection<IndexEntry> ret;
         for(int i = 0; i < NUM_GET; ++i) {
@@ -60,5 +58,7 @@
             ret = index.getChildren(use1Parent);
             ret = index.getChildren(typeTemplate1Parent);
         }
+        
+        endTransaction();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetKeyPartitionsPerformanceTest.java	Fri Dec  7 20:20:30 2012	(r25772)
@@ -21,17 +21,13 @@
     @Rule
     public MethodRule benchmarkRun;
 
-    private int numItems;
-    private int numFiles;
-
-    public IndexGetKeyPartitionsPerformanceTest(int numItems, int numFiles) {
-        this.numItems = numItems;
-        this.numFiles = numFiles;
+    public IndexGetKeyPartitionsPerformanceTest(int numItems, int numFiles, boolean startTransaction) {
+        super(numItems, numFiles, startTransaction);
 
         try {
             benchmarkRun =
                 new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
-                    "get-key-partitions_" + this.numFiles + ".csv", true)));
+                    "get-key-partitions_" + this.numFiles + "_" + indexTypeString() + ".csv", true)));
         } catch(IOException e) {
             e.printStackTrace();
         }
@@ -39,21 +35,25 @@
         index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
-            index.add(def1, getFile(this.numFiles));
-            index.add(def2, getFile(this.numFiles));
-            index.add(def3, getFile(this.numFiles));
-            index.add(use1, getFile(this.numFiles));
-            index.add(type1, getFile(this.numFiles));
+            index.add(def1, getNextFile());
+            index.add(def2, getNextFile());
+            index.add(def3, getNextFile());
+            index.add(use1, getNextFile());
+            index.add(type1, getNextFile());
         }
     }
 
     @Test
     public void getKeyPartitions() {
+        startTransaction();
+        
         HashSet<IndexPartitionDescriptor> files = new HashSet<IndexPartitionDescriptor>();
         files.addAll(index.getPartitionsOf(def1));
         files.addAll(index.getPartitionsOf(def2));
         files.addAll(index.getPartitionsOf(def3));
         files.addAll(index.getPartitionsOf(use1));
         files.addAll(index.getPartitionsOf(typeTemplate1));
+        
+        endTransaction();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionElementsPerformanceTest.java	Fri Dec  7 20:20:30 2012	(r25772)
@@ -21,17 +21,13 @@
     @Rule
     public MethodRule benchmarkRun;
 
-    private int numItems;
-    private int numFiles;
-
-    public IndexGetPartitionElementsPerformanceTest(int numItems, int numFiles) {
-        this.numItems = numItems;
-        this.numFiles = numFiles;
+    public IndexGetPartitionElementsPerformanceTest(int numItems, int numFiles, boolean startTransaction) {
+        super(numItems, numFiles, startTransaction);
 
         try {
             benchmarkRun =
                 new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
-                    "get-partition-elems_" + this.numFiles + ".csv", true)));
+                    "get-partition-elems_" + this.numFiles + "_" + indexTypeString() + ".csv", true)));
         } catch(IOException e) {
             e.printStackTrace();
         }
@@ -39,20 +35,24 @@
         index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
-            index.add(def1, getFile(this.numFiles));
-            index.add(def2, getFile(this.numFiles));
-            index.add(def3, getFile(this.numFiles));
-            index.add(use1, getFile(this.numFiles));
-            index.add(type1, getFile(this.numFiles));
+            index.add(def1, getNextFile());
+            index.add(def2, getNextFile());
+            index.add(def3, getNextFile());
+            index.add(use1, getNextFile());
+            index.add(type1, getNextFile());
         }
     }
 
     @Test
     public void getPartitionElements() {
+        startTransaction();
+        
         @SuppressWarnings("unused")
         Collection<IndexEntry> ret;
         for(int i = 0; i < this.numFiles; ++i) {
             ret = index.getInPartition(files[i]);
         }
+        
+        endTransaction();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPartitionsPerformanceTest.java	Fri Dec  7 20:20:30 2012	(r25772)
@@ -23,17 +23,13 @@
 
     private static int NUM_GET = 200000;
 
-    private int numItems;
-    private int numFiles;
-
-    public IndexGetPartitionsPerformanceTest(int numItems, int numFiles) {
-        this.numItems = numItems;
-        this.numFiles = numFiles;
+    public IndexGetPartitionsPerformanceTest(int numItems, int numFiles, boolean startTransaction) {
+        super(numItems, numFiles, startTransaction);
 
         try {
             benchmarkRun =
                 new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
-                    "get-partitions_" + this.numFiles + ".csv", true)));
+                    "get-partitions_" + this.numFiles + "_" + indexTypeString() + ".csv", true)));
         } catch(IOException e) {
             e.printStackTrace();
         }
@@ -41,20 +37,24 @@
         index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
-            index.add(def1, getFile(this.numFiles));
-            index.add(def2, getFile(this.numFiles));
-            index.add(def3, getFile(this.numFiles));
-            index.add(use1, getFile(this.numFiles));
-            index.add(type1, getFile(this.numFiles));
+            index.add(def1, getNextFile());
+            index.add(def2, getNextFile());
+            index.add(def3, getNextFile());
+            index.add(use1, getNextFile());
+            index.add(type1, getNextFile());
         }
     }
 
     @Test
     public void getPartitions() {
+        startTransaction();
+        
         @SuppressWarnings("unused")
         Collection<IndexPartition> ret;
         for(int i = 0; i < NUM_GET; ++i) {
             ret = index.getAllPartitions();
         }
+        
+        endTransaction();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexGetPerformanceTest.java	Fri Dec  7 20:20:30 2012	(r25772)
@@ -23,17 +23,13 @@
 
     private static int NUM_GET = 200000;
 
-    private int numItems;
-    private int numFiles;
-
-    public IndexGetPerformanceTest(int numItems, int numFiles) {
-        this.numItems = numItems;
-        this.numFiles = numFiles;
+    public IndexGetPerformanceTest(int numItems, int numFiles, boolean startTransaction) {
+        super(numItems, numFiles, startTransaction);
 
         try {
             benchmarkRun =
                 new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
-                    "get_" + this.numFiles + ".csv", true)));
+                    "get_" + this.numFiles + "_" + indexTypeString() + ".csv", true)));
         } catch(IOException e) {
             e.printStackTrace();
         }
@@ -41,16 +37,18 @@
         index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
-            index.add(def1, getFile(this.numFiles));
-            index.add(def2, getFile(this.numFiles));
-            index.add(def3, getFile(this.numFiles));
-            index.add(use1, getFile(this.numFiles));
-            index.add(type1, getFile(this.numFiles));
+            index.add(def1, getNextFile());
+            index.add(def2, getNextFile());
+            index.add(def3, getNextFile());
+            index.add(use1, getNextFile());
+            index.add(type1, getNextFile());
         }
     }
 
     @Test
     public void get() {
+        startTransaction();
+        
         @SuppressWarnings("unused")
         Collection<IndexEntry> ret;
         for(int i = 0; i < NUM_GET; ++i) {
@@ -60,5 +58,7 @@
             ret = index.get(use1);
             ret = index.get(typeTemplate1);
         }
+        
+        endTransaction();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPerformanceTest.java	Fri Dec  7 20:20:30 2012	(r25772)
@@ -27,53 +27,103 @@
     public static IndexPartitionDescriptor[] files;
     public static int fileIndex;
     
+    protected int numItems;
+    protected int numFiles;
+    protected boolean startTransaction;
+    
     @Parameters
     public static List<Object[]> data() {
         Object[][] data = new Object[][] { 
-              { 100   , 1    }
-            , { 1000  , 1    }
-            , { 10000 , 1    }
-            , { 20000 , 1    }
-            , { 50000 , 1    }
-            , { 100000, 1    }
-            , { 150000, 1    }
-            , { 200000, 1    }
-            , { 100   , 10   }
-            , { 1000  , 10   }
-            , { 10000 , 10   }
-            , { 20000 , 10   }
-            , { 50000 , 10   }
-            , { 100000, 10   }
-            , { 150000, 10   }
-            , { 200000, 10   }
-            , { 100   , 100  }
-            , { 1000  , 100  }
-            , { 10000 , 100  }
-            , { 20000 , 100  }
-            , { 50000 , 100  }
-            , { 100000, 100  }
-            , { 150000, 100  }
-            , { 200000, 100  }
-            , { 100   , 500  }
-            , { 1000  , 500  }
-            , { 10000 , 500  }
-            , { 20000 , 500  }
-            , { 50000 , 500  }
-            , { 100000, 500  }
-            , { 150000, 500  }
-            , { 200000, 500  }
-            , { 100   , 1000 }
-            , { 1000  , 1000 }
-            , { 10000 , 1000 }
-            , { 20000 , 1000 }
-            , { 50000 , 1000 }
-            , { 100000, 1000 }
-            , { 150000, 1000 }
-            , { 200000, 1000 }
+            { 100   , 1   , false }
+          , { 100   , 10  , false }
+          , { 100   , 100 , false }
+          , { 100   , 500 , false }
+          , { 100   , 1000, false }
+          , { 100   , 1   ,  true }
+          , { 100   , 10  ,  true }
+          , { 100   , 100 ,  true }
+          , { 100   , 500 ,  true }
+          , { 100   , 1000,  true }
+          , { 1000  , 1   , false }
+          , { 1000  , 10  , false }
+          , { 1000  , 100 , false }
+          , { 1000  , 500 , false }
+          , { 1000  , 1000, false }
+          , { 1000  , 1   ,  true }
+          , { 1000  , 10  ,  true }
+          , { 1000  , 100 ,  true }
+          , { 1000  , 500 ,  true }
+          , { 1000  , 1000,  true }
+          , { 10000 , 1   , false }
+          , { 10000 , 10  , false }
+          , { 10000 , 100 , false }
+          , { 10000 , 500 , false }
+          , { 10000 , 1000, false }
+          , { 10000 , 1   ,  true }
+          , { 10000 , 10  ,  true }
+          , { 10000 , 100 ,  true }
+          , { 10000 , 500 ,  true }
+          , { 10000 , 1000,  true }
+          , { 20000 , 1   , false }
+          , { 20000 , 10  , false }
+          , { 20000 , 100 , false }
+          , { 20000 , 500 , false }
+          , { 20000 , 1000, false }
+          , { 20000 , 1   ,  true }
+          , { 20000 , 10  ,  true }
+          , { 20000 , 100 ,  true }
+          , { 20000 , 500 ,  true }
+          , { 20000 , 1000,  true }
+          , { 50000 , 1   , false }
+          , { 50000 , 10  , false }
+          , { 50000 , 100 , false }
+          , { 50000 , 500 , false }
+          , { 50000 , 1000, false }
+          , { 50000 , 1   ,  true }
+          , { 50000 , 10  ,  true }
+          , { 50000 , 100 ,  true }
+          , { 50000 , 500 ,  true }
+          , { 50000 , 1000,  true }
+        /*, { 100000, 1   , false }
+          , { 100000, 10  , false }
+          , { 100000, 100 , false }
+          , { 100000, 500 , false }
+          , { 100000, 1000, false }
+          , { 100000, 1   ,  true }
+          , { 100000, 10  ,  true }
+          , { 100000, 100 ,  true }
+          , { 100000, 500 ,  true }
+          , { 100000, 1000,  true }
+          , { 150000, 1   , false }
+          , { 150000, 10  , false }
+          , { 150000, 100 , false }
+          , { 150000, 500 , false }
+          , { 150000, 1000, false }
+          , { 150000, 1   ,  true }
+          , { 150000, 10  ,  true }
+          , { 150000, 100 ,  true }
+          , { 150000, 500 ,  true }
+          , { 150000, 1000,  true }
+          , { 200000, 1   , false }
+          , { 200000, 10  , false }
+          , { 200000, 100 , false }
+          , { 200000, 500 , false }
+          , { 200000, 1000, false }
+          , { 200000, 1   ,  true }
+          , { 200000, 10  ,  true }
+          , { 200000, 100 ,  true }
+          , { 200000, 500 ,  true }
+          , { 200000, 1000,  true }*/
         };
         return Arrays.asList(data);
     }
 
+    public IndexPerformanceTest(int numItems, int numFiles, boolean startTransaction) {
+        this.numItems = numItems;
+        this.numFiles = numFiles;
+        this.startTransaction = startTransaction;
+    }
+    
     @BeforeClass
     public static void setUpOnce() {
         IndexTest.setUpOnce();
@@ -103,9 +153,23 @@
         fileIndex = -1;
     }
 
-    public static IndexPartitionDescriptor getFile(int numFiles) {
+    protected void startTransaction() {
+        if(this.startTransaction)
+            doStartTransaction();
+    }
+
+    protected void endTransaction() {
+        if(this.startTransaction)
+            doEndTransaction();
+    }
+    
+    protected String indexTypeString() {
+        return this.startTransaction ? "TransactionIndex" : "Index";
+    }
+    
+    protected IndexPartitionDescriptor getNextFile() {
         IndexPartitionDescriptor file = files[++fileIndex];
-        if(fileIndex == numFiles - 1)
+        if(fileIndex == this.numFiles - 1)
             fileIndex = -1;
         return file;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java	Fri Dec  7 19:53:28 2012	(r25771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/performance/IndexPersistPerformanceTest.java	Fri Dec  7 20:20:30 2012	(r25772)
@@ -21,17 +21,13 @@
     @Rule
     public MethodRule benchmarkRun;
 
-    private int numItems;
-    private int numFiles;
-
-    public IndexPersistPerformanceTest(int numItems, int numFiles) {
-        this.numItems = numItems;
-        this.numFiles = numFiles;
+    public IndexPersistPerformanceTest(int numItems, int numFiles, boolean startTransaction) {
+        super(numItems, numFiles, startTransaction);
 
         try {
             benchmarkRun =
                 new BenchmarkRule(new CSVResultsConsumer((this.numItems * 5) + "," + this.numFiles, new FileWriter(
-                    "persist_" + this.numFiles + ".csv", true)));
+                    "persist_" + this.numFiles + "_" + indexTypeString() + ".csv", true)));
         } catch(IOException e) {
             e.printStackTrace();
         }
@@ -39,19 +35,23 @@
         index.clearAll();
 
         for(int i = 0; i < this.numItems; ++i) {
-            index.add(def1, getFile(this.numFiles));
-            index.add(def2, getFile(this.numFiles));
-            index.add(def3, getFile(this.numFiles));
-            index.add(use1, getFile(this.numFiles));
-            index.add(type1, getFile(this.numFiles));
+            index.add(def1, getNextFile());
+            index.add(def2, getNextFile());
+            index.add(def3, getNextFile());
+            index.add(use1, getNextFile());
+            index.add(type1, getNextFile());
         }
     }
 
     @Test
     public void persist() throws IOException {
+        startTransaction();
+        
         ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("persist.dat", false));
         outputStream.writeObject(index.getAll().toArray());
         outputStream.flush();
         outputStream.close();
+        
+        endTransaction();
     }
 }

From v.vergu+vc at gmail.com  Mon Dec 10 13:26:03 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Mon, 10 Dec 2012 12:26:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25773 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20121210122603.7527E7F805A@mx1.tudelft.nl>

Author: VladVergu
Date: Mon Dec 10 12:26:02 2012
New Revision: 25773
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25773&sc=1

Log:
hopefully fix for http://yellowgrass.org/issue/Spoofax/590

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Fri Dec  7 20:20:30 2012	(r25772)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Mon Dec 10 12:26:02 2012	(r25773)
@@ -88,8 +88,8 @@
 			sdf2parenthesize,
 			stratego.aster,
 			java.jar,
-			stratego.ctree,
-			refresh" />
+			refresh,
+			stratego.ctree" />
         <target name="spoofaximp.default.jar" depends="
 			check-classpath,
 			init,

From v.vergu+vc at gmail.com  Mon Dec 10 21:25:38 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Mon, 10 Dec 2012 20:25:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25774 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.im...
Message-ID: <20121210202538.7474A108C01C@mx3.tudelft.nl>

Author: VladVergu
Date: Mon Dec 10 20:25:36 2012
New Revision: 25774
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25774&sc=1

Log:
Separation of building from loading http://yellowgrass.org/issue/Spoofax/591

Added:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/AntDescriptorLoader.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/utils/
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/utils/ResourceUtil.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Mon Dec 10 12:26:02 2012	(r25773)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Mon Dec 10 20:25:36 2012	(r25774)
@@ -88,8 +88,9 @@
 			sdf2parenthesize,
 			stratego.aster,
 			java.jar,
+			stratego.ctree,
 			refresh,
-			stratego.ctree" />
+			sdf2imp.eclipse.load" />
         <target name="spoofaximp.default.jar" depends="
 			check-classpath,
 			init,
@@ -103,7 +104,8 @@
 			stratego.aster,
 			java.jar,
 			stratego.jar.helper,
-			refresh" />
+			refresh,
+			sdf2imp.eclipse.load" />
     
         <!-- Initialization -->
         <available file="${src-gen}/<%= pkgdir %>/strategies/Main.java" property="java.jar.enabled"/>
@@ -153,6 +155,12 @@
             </java>
         </target>
         
+        <target name="sdf2imp.eclipse.load" if="eclipse.running">
+		<java classname="org.strategoxt.imp.metatooling.loading.AntDescriptorLoader" failonerror="true">
+			<arg value="${include}/${esvmodule}.packed.esv" />
+		</java>
+	</target>
+        
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir" />
             <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir" />

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java	Mon Dec 10 12:26:02 2012	(r25773)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java	Mon Dec 10 20:25:36 2012	(r25774)
@@ -2,15 +2,11 @@
 
 import static org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader.getSourceDescriptor;
 
-import java.io.File;
 import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.URI;
 
 import org.eclipse.core.resources.IResource;
-import org.eclipse.core.resources.IWorkspace;
-import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.strategoxt.imp.metatooling.utils.ResourceUtil;
 import org.strategoxt.imp.runtime.Environment;
 
 /**
@@ -36,7 +32,7 @@
 			try {
 				String descriptor = args[0];
 				
-				IResource source = getResource(getSourceDescriptor(descriptor));
+				IResource source = ResourceUtil.getResource(getSourceDescriptor(descriptor));
 				if (!source.exists()) {
 					Environment.logException("Could not find source descriptor:" + source, new FileNotFoundException(source.getFullPath().toOSString()));
 					System.err.println("Build failed: could not find source descriptor " + source);
@@ -59,20 +55,5 @@
 		return active;
 	}
 
-	private static IResource getResource(String file) {
-		File fileRef = new File(file);
-		try {
-			fileRef = fileRef.getCanonicalFile();
-		} catch (IOException e) {
-			Environment.logException(e);
-		}
-		URI uri = fileRef.toURI();
-		IWorkspace workspace = ResourcesPlugin.getWorkspace();
-		IResource[] resources = workspace.getRoot().findFilesForLocationURI(uri);
-		if (resources.length == 0)
-			throw new IllegalArgumentException("File not in workspace: " + file);
-
-		IResource resource = resources[0];
-		return resource;
-	}
+	
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	Mon Dec 10 12:26:02 2012	(r25773)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	Mon Dec 10 20:25:36 2012	(r25774)
@@ -128,10 +128,6 @@
 				return false;
 			}
 			
-			monitor.setTaskName("Loading " + mainFile.getName());
-			if (AntDescriptorBuilder.isActive())
-				System.err.println("Loading new editor services");
-			DynamicDescriptorLoader.getInstance().loadPackedDescriptor(getTargetDescriptor(mainFile));
 			monitor.setTaskName(null);
 			return true;
 			
@@ -141,6 +137,7 @@
 			return false;
 		}
 	}
+	
 
 	/**
 	 * Invoke the Stratego-based descriptor builder.

Added: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/AntDescriptorLoader.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/AntDescriptorLoader.java	Mon Dec 10 20:25:36 2012	(r25774)
@@ -0,0 +1,50 @@
+/**
+ * 
+ */
+package org.strategoxt.imp.metatooling.loading;
+
+import static org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader.getSourceDescriptor;
+
+import java.io.FileNotFoundException;
+
+import org.eclipse.core.resources.IResource;
+import org.strategoxt.imp.metatooling.building.DynamicDescriptorBuilder;
+import org.strategoxt.imp.metatooling.utils.ResourceUtil;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * @author vladvergu
+ * 
+ */
+public class AntDescriptorLoader {
+
+	/**
+	 * (Re)load a descriptor
+	 * 
+	 * @param args
+	 */
+	public static void main(String[] args) {
+		if (args == null || args.length == 0)
+			throw new IllegalArgumentException("Descriptor file expected");
+
+		Environment.getStrategoLock().lock();
+
+		try {
+			final String descriptor = args[0];
+			final IResource source = ResourceUtil.getResource(getSourceDescriptor(descriptor));
+			final DynamicDescriptorBuilder builder = DynamicDescriptorBuilder.getInstance();
+
+			if (!source.exists()) {
+				Environment.logException("Could not find source descriptor:" + source, new FileNotFoundException(source
+						.getFullPath().toOSString()));
+				System.err.println("Build failed: could not find source descriptor " + source);
+				System.exit(1);
+			}
+
+			DynamicDescriptorLoader.getInstance().loadPackedDescriptor(builder.getTargetDescriptor(source));
+		} finally {
+			Environment.getStrategoLock().unlock();
+		}
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/utils/ResourceUtil.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/utils/ResourceUtil.java	Mon Dec 10 20:25:36 2012	(r25774)
@@ -0,0 +1,39 @@
+/**
+ * 
+ */
+package org.strategoxt.imp.metatooling.utils;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.URI;
+
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.IWorkspace;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * Simple utilities for locating IResources based on actual paths
+ * 
+ * @author vladvergu
+ * 
+ */
+public class ResourceUtil {
+	public static IResource getResource(String file) {
+		File fileRef = new File(file);
+		try {
+			fileRef = fileRef.getCanonicalFile();
+		} catch (IOException e) {
+			Environment.logException(e);
+		}
+		URI uri = fileRef.toURI();
+		IWorkspace workspace = ResourcesPlugin.getWorkspace();
+		IResource[] resources = workspace.getRoot()
+				.findFilesForLocationURI(uri);
+		if (resources.length == 0)
+			throw new IllegalArgumentException("File not in workspace: " + file);
+
+		IResource resource = resources[0];
+		return resource;
+	}
+}

From gabrielkonat at gmail.com  Tue Dec 11 16:51:33 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Tue, 11 Dec 2012 15:51:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25775 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index
Message-ID: <20121211155133.7B0692B8013@mx2.tudelft.nl>

Author: gkonat
Date: Tue Dec 11 15:51:33 2012
New Revision: 25775
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25775&sc=1

Log:
Support URI's without namespaces

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Mon Dec 10 20:25:36 2012	(r25774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Tue Dec 11 15:51:33 2012	(r25775)
@@ -92,13 +92,12 @@
         ensureInitialized();
 
         IStrategoConstructor constructor = entry.getConstructor();
-        IStrategoTerm contentsType = factory.getEntryType(entry);
+        IStrategoTerm type = factory.getEntryType(entry);
         IStrategoList path = factory.getEntryPath(entry);
-        IStrategoTerm namespace = factory.getEntryNamespace(entry);
         IStrategoTerm value = factory.getEntryValue(entry);
 
         IndexEntry newEntry =
-            factory.createEntry(constructor, namespace, path, contentsType, value, partitionDescriptor);
+            factory.createEntry(constructor, path, type, value, partitionDescriptor);
 
         add(newEntry);
     }
@@ -112,7 +111,7 @@
         innerEntries(uri).put(partition, entry);
 
         // Add entry to children.
-        IndexURI parent = uri.getParent();
+        IndexURI parent = uri.getParent(termFactory);
         if(parent != null)
             innerChildEntries(parent).put(partition, entry);
 
@@ -132,7 +131,7 @@
     public void remove(IStrategoAppl template, IndexPartitionDescriptor partitionDescriptor) {
         IndexURI uri = factory.createURIFromTemplate(template);
         Multimap<IndexPartitionDescriptor, IndexEntry> entryValues = entries.get(uri);
-        Multimap<IndexPartitionDescriptor, IndexEntry> childValues = childs.get(uri.getParent());
+        Multimap<IndexPartitionDescriptor, IndexEntry> childValues = childs.get(uri.getParent(termFactory));
         Collection<IndexEntry> removedEntries = entryValues.removeAll(partitionDescriptor);
 
         for(IndexEntry entry : removedEntries) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java	Mon Dec 10 20:25:36 2012	(r25774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java	Tue Dec 11 15:51:33 2012	(r25775)
@@ -32,25 +32,20 @@
         return termFactory;
     }
 
-    public IndexURI createURI(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList path,
-        IStrategoTerm type) {
+    public IndexURI createURI(IStrategoConstructor constructor, IStrategoList path, IStrategoTerm type) {
         ImploderAttachment idAttachment = ImploderAttachment.getCompactPositionAttachment(path, true);
         type = stripper.strip(type);
-        assert namespace == stripper.strip(namespace);
-
         path.putAttachment(idAttachment);
-
-        return new IndexURI(constructor, namespace, path, type);
+        return new IndexURI(constructor, path, type);
     }
 
     public IndexURI createURIFromTemplate(IStrategoAppl template) {
-        return createURI(template.getConstructor(), getEntryNamespace(template), getEntryPath(template),
-            getEntryType(template));
+        return createURI(template.getConstructor(), getEntryPath(template), getEntryType(template));
     }
 
-    public IndexEntry createEntry(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList path,
+    public IndexEntry createEntry(IStrategoConstructor constructor, IStrategoList path,
         IStrategoTerm type, IStrategoTerm value, IndexPartitionDescriptor partition) {
-        return createEntry(value, createURI(constructor, namespace, path, type), partition);
+        return createEntry(value, createURI(constructor, path, type), partition);
     }
 
     public IndexEntry createEntry(IStrategoTerm value, IndexURI key, IndexPartitionDescriptor partition) {
@@ -86,19 +81,8 @@
     public IStrategoList getEntryPath(IStrategoAppl entry) {
         IStrategoTerm result = entry.getSubterm(0);
         if(isURI(result)) {
-            IStrategoList full = (IStrategoList) result;
-            return full.isEmpty() ? full : full.tail();
-        } else {
-            throw new IllegalArgumentException("Illegal index entry: " + entry
-                + ". First subterm should be a list representing the key of the entry.");
-        }
-    }
-
-    public IStrategoTerm getEntryNamespace(IStrategoAppl entry) {
-        IStrategoTerm result = entry.getSubterm(0);
-        if(isURI(result)) {
-            IStrategoList full = (IStrategoList) result;
-            return stripper.strip(full.isEmpty() ? full : full.head());
+            IStrategoList list = (IStrategoList) result;
+            return list;
         } else {
             throw new IllegalArgumentException("Illegal index entry: " + entry
                 + ". First subterm should be a list representing the key of the entry.");

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java	Mon Dec 10 20:25:36 2012	(r25774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexStatistics.java	Tue Dec 11 15:51:33 2012	(r25775)
@@ -8,7 +8,6 @@
 import java.util.Map.Entry;
 
 import org.spoofax.interpreter.terms.IStrategoConstructor;
-import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Gabri?l Konat
@@ -20,7 +19,6 @@
         public Collection<IndexPartitionDescriptor> partitions;
         public Collection<IndexEntry> entries;
         public Map<IStrategoConstructor, Integer> entriesPerConstructor;
-        public Map<IStrategoTerm, Integer> entriesPerNamespace;
     }
 
     private IIndex index;
@@ -47,9 +45,8 @@
         data.partitions = partitions();
         data.entries = elements();
 
-        // Divide types by constructor and namespace
+        // Divide types by constructor
         data.entriesPerConstructor = new HashMap<IStrategoConstructor, Integer>();
-        data.entriesPerNamespace = new HashMap<IStrategoTerm, Integer>();
         for(IndexEntry entry : data.entries) {
             IndexURI uri = entry.getKey();
             Integer constructorCount = data.entriesPerConstructor.get(uri.getConstructor());
@@ -57,12 +54,6 @@
                 data.entriesPerConstructor.put(uri.getConstructor(), 1);
             else
                 data.entriesPerConstructor.put(uri.getConstructor(), constructorCount + 1);
-
-            Integer namespaceCount = data.entriesPerNamespace.get(uri.getNamespace());
-            if(namespaceCount == null)
-                data.entriesPerNamespace.put(uri.getNamespace(), 1);
-            else
-                data.entriesPerNamespace.put(uri.getNamespace(), namespaceCount + 1);
         }
 
         return data;
@@ -77,9 +68,6 @@
         b.append("* Elements per constructor: \n");
         for(Entry<IStrategoConstructor, Integer> pair : data.entriesPerConstructor.entrySet())
             b.append("  - " + pair.getKey() + ": " + pair.getValue() + "\n");
-        b.append("* Elements per namespace: \n");
-        for(Entry<IStrategoTerm, Integer> pair : data.entriesPerNamespace.entrySet())
-            b.append("  - " + pair.getKey() + ": " + pair.getValue() + "\n");
 
         return b.toString();
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Mon Dec 10 20:25:36 2012	(r25774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Tue Dec 11 15:51:33 2012	(r25775)
@@ -19,7 +19,6 @@
     private static final long serialVersionUID = 1619836759792533807L;
 
     private final IStrategoConstructor constructor;
-    private final IStrategoTerm namespace;
     private final IStrategoList path;
     private final IStrategoTerm type;
 
@@ -28,24 +27,18 @@
     /**
      * Use {@link IndexEntryFactory#createURI}.
      */
-    protected IndexURI(IStrategoConstructor constructor, IStrategoTerm namespace, IStrategoList path,
-        IStrategoTerm type) {
+    protected IndexURI(IStrategoConstructor constructor, IStrategoList path, IStrategoTerm type) {
         this.constructor = constructor;
         this.path = path;
-        this.namespace = namespace;
         this.type = type;
 
-        assert constructor != null && path != null && namespace != null;
+        assert constructor != null && path != null;
     }
 
     public IStrategoConstructor getConstructor() {
         return constructor;
     }
 
-    public IStrategoTerm getNamespace() {
-        return namespace;
-    }
-
     public IStrategoList getPath() {
         return path;
     }
@@ -57,9 +50,15 @@
     /**
      * Returns a parent URI by taking the tail of the path. If the path has no tail, null is returned.
      */
-    public IndexURI getParent() {
-        if(path.size() > 0)
-            return new IndexURI(constructor, namespace, path.tail(), type);
+    public IndexURI getParent(ITermFactory factory) {
+        if(path.size() > 1) {
+            IStrategoTerm head = path.head();
+            if(head.getTermType() == IStrategoTerm.APPL && head.getSubtermCount() == 0)
+                // Retain the head of the path if it is a namespace (APPL with 0 subterms).
+                return new IndexURI(constructor, factory.makeListCons(head, path.tail().tail()), type);
+            else
+                return new IndexURI(constructor, path.tail(), type);
+        }
         else
             return null;
     }
@@ -70,18 +69,16 @@
     public IStrategoAppl toTerm(ITermFactory factory, IStrategoTerm value) {
         if(cachedTerm != null)
             return cachedTerm;
-
-        IStrategoList uri = factory.makeListCons(namespace, path);
         
         if(IndexEntryFactory.isDefData(constructor)) {
-            cachedTerm = factory.makeAppl(constructor, uri, type, value);
+            cachedTerm = factory.makeAppl(constructor, path, type, value);
         } else if(constructor.getArity() == 2) {
-            cachedTerm = factory.makeAppl(constructor, uri, value);
+            cachedTerm = factory.makeAppl(constructor, path, value);
         } else if(constructor.getArity() == 1) {
-            cachedTerm = factory.makeAppl(constructor, uri);
+            cachedTerm = factory.makeAppl(constructor, path);
         } else {
             IStrategoTerm[] terms = new IStrategoTerm[constructor.getArity()];
-            terms[0] = uri;
+            terms[0] = path;
             IStrategoTuple values = (IStrategoTuple) value;
             System.arraycopy(values.getAllSubterms(), 0, terms, 1, values.getSubtermCount());
             cachedTerm = factory.makeAppl(constructor, terms);
@@ -92,7 +89,7 @@
 
     @Override
     public String toString() {
-        String result = constructor.getName() + "([" + namespace + "|" + path + "]";
+        String result = constructor.getName() + "(" + path + ")";
         if(type != null)
             result += "," + type;
         return result;
@@ -103,7 +100,6 @@
         final int prime = 31;
         int result = 1;
         result = prime * result + ((constructor == null) ? 0 : constructor.hashCode());
-        result = prime * result + ((namespace == null) ? 0 : namespace.hashCode());
         result = prime * result + ((path == null) ? 0 : path.hashCode());
         result = prime * result + ((type == null) ? 0 : type.hashCode());
         return result;
@@ -126,12 +122,6 @@
         } else if(!constructor.equals(other.constructor))
             return false;
 
-        if(namespace == null) {
-            if(other.namespace != null)
-                return false;
-        } else if(!namespace.equals(other.namespace))
-            return false;
-
         if(path == null) {
             if(other.path != null)
                 return false;

From v.vergu+vc at gmail.com  Wed Dec 12 23:56:06 2012
From: v.vergu+vc at gmail.com (Vlad Vergu)
Date: Wed, 12 Dec 2012 22:56:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25776 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20121212225606.BC129CC1A9@mx4.tudelft.nl>

Author: VladVergu
Date: Wed Dec 12 22:56:04 2012
New Revision: 25776
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25776&sc=1

Log:
minor fix

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str	Tue Dec 11 15:51:33 2012	(r25775)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-ignore-files.str	Wed Dec 12 22:56:04 2012	(r25776)
@@ -13,7 +13,7 @@
   	<output-text-file(|[], ".gitignore")>
     <conc-strings> (<conc-strings>
 (
-"bin,
+"bin
 .cache
 include/",name,".def
 include/",name,"-parenthesize.str

From richard at vogelij.nl  Thu Dec 13 23:36:09 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 22:36:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25777 - hydra/jobs
Message-ID: <20121213223609.764212B8009@mx2.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 22:36:07 2012
New Revision: 25777
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25777&sc=1

Log:
renamed build target to the correct name

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Wed Dec 12 22:56:04 2012	(r25776)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 22:36:07 2012	(r25777)
@@ -20,7 +20,7 @@
 
 in
 {
- jssglrbuild = pkgs.releaseTools.antBuild {
+ build = pkgs.releaseTools.antBuild {
     name   = "spoofax-ace";
     src    = spoofaxacesrc;
 

From richard at vogelij.nl  Thu Dec 13 23:51:20 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 22:51:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25778 -
	spoofax-ace/trunk/spoofax-ace
Message-ID: <20121213225120.681E27F804B@mx1.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 22:51:20 2012
New Revision: 25778
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25778&sc=1

Log:
added tar_all build target to package all dependencies which were there on compile time

Modified:
   spoofax-ace/trunk/spoofax-ace/build.xml

Modified: spoofax-ace/trunk/spoofax-ace/build.xml
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/build.xml	Thu Dec 13 22:36:07 2012	(r25777)
+++ spoofax-ace/trunk/spoofax-ace/build.xml	Thu Dec 13 22:51:20 2012	(r25778)
@@ -118,4 +118,12 @@
 			</manifest>
 		</jar>
 	</target>
+
+	<target name="tar_all" depends="jar">
+		<tar destfile="spoofax-ace.tar.gz" basedir="." compression="gzip">
+			<fileset dir="${resourcesDir}" />
+			
+		</tar>
+	</target>
+
 </project>

From richard at vogelij.nl  Thu Dec 13 23:52:52 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 22:52:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25779 - hydra/jobs
Message-ID: <20121213225252.B50DC2B8014@mx2.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 22:52:52 2012
New Revision: 25779
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25779&sc=1

Log:
nix job spoofax-ace ant target changed

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Thu Dec 13 22:51:20 2012	(r25778)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 22:52:52 2012	(r25779)
@@ -31,7 +31,7 @@
     ];
 
     buildInputs = [pkgs.apacheAntOpenJDK strcJava ];
-    antTargets = [ "jar" ];
+    antTargets = [ "tar_all" ];
     buildfile = "build.xml";
 
 

From richard at vogelij.nl  Thu Dec 13 23:58:31 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 22:58:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25780 - hydra/jobs
Message-ID: <20121213225831.45D68CC1C9@mx4.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 22:58:30 2012
New Revision: 25780
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25780&sc=1

Log:
test

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Thu Dec 13 22:52:52 2012	(r25779)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 22:58:30 2012	(r25780)
@@ -66,17 +66,17 @@
         <arg value=\"${antvartestsrc}\"/>
     </java>
   </target>
-</project>" >> $out/build.xml
+</project>" >> $out/bin/build.xml
 
 echo "spoofaxproj=
 testsrc=/path/to/sourcefile/to/embed.src
-wwwroot=/path/to/www/output/" >> $out/build.properties
+wwwroot=/path/to/www/output/" >> $out/bin/build.properties
 
-mkdir $out/resources/
-cp ${strategoxtJavaScriptBackend}/s2js.jar $out/resources/
-cp -R ${strategoxtJavaScriptBackend}/src $out/resources/
-cp ${jssglr}/bin/jssglr.generated.js $out/resources/
-cp ${strcJava}/share/strc-java/strategoxt.jar $out/resources/
+mkdir $out/bin/resources/
+cp ${strategoxtJavaScriptBackend}/s2js.jar $out/bin/resources/
+cp -R ${strategoxtJavaScriptBackend}/src $out/bin/resources/
+cp ${jssglr}/bin/jssglr.generated.js $out/bin/resources/
+cp ${strcJava}/share/strc-java/strategoxt.jar $out/bin/resources/
 '';
 
 

From richard at vogelij.nl  Fri Dec 14 00:11:28 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 23:11:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25781 - hydra/jobs
Message-ID: <20121213231128.98F587F8043@mx1.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 23:11:28 2012
New Revision: 25781
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25781&sc=1

Log:
test 2

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Thu Dec 13 22:58:30 2012	(r25780)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:11:28 2012	(r25781)
@@ -20,6 +20,23 @@
 
 in
 {
+  buildSpoofaxToAceZip = 
+      pkgs.stdenv.mkDerivation {
+        name = "spoofax-ace.zip"; 
+        buildInputs = [pkgs.zip]; 
+        buildCommand = ''
+          ensureDir $out 
+
+          mkdir spoofax-ace
+          cp -R ${build}/* spoofax-ace/
+ 
+          zip -r $out/spoofax-ace.zip spoofax-ace
+          echo "file zip $out/spoofax-ace.zip" > $out/nix-support/hydra-build-products
+        ''; 
+      } ;      
+
+
+
  build = pkgs.releaseTools.antBuild {
     name   = "spoofax-ace";
     src    = spoofaxacesrc;
@@ -31,7 +48,7 @@
     ];
 
     buildInputs = [pkgs.apacheAntOpenJDK strcJava ];
-    antTargets = [ "tar_all" ];
+    antTargets = [ "jar" ];
     buildfile = "build.xml";
 
 
@@ -66,17 +83,17 @@
         <arg value=\"${antvartestsrc}\"/>
     </java>
   </target>
-</project>" >> $out/bin/build.xml
+</project>" >> $out/build.xml
 
 echo "spoofaxproj=
 testsrc=/path/to/sourcefile/to/embed.src
-wwwroot=/path/to/www/output/" >> $out/bin/build.properties
+wwwroot=/path/to/www/output/" >> $out/build.properties
 
-mkdir $out/bin/resources/
-cp ${strategoxtJavaScriptBackend}/s2js.jar $out/bin/resources/
-cp -R ${strategoxtJavaScriptBackend}/src $out/bin/resources/
-cp ${jssglr}/bin/jssglr.generated.js $out/bin/resources/
-cp ${strcJava}/share/strc-java/strategoxt.jar $out/bin/resources/
+mkdir $out/resources/
+cp ${strategoxtJavaScriptBackend}/s2js.jar $out/resources/
+cp -R ${strategoxtJavaScriptBackend}/src $out/resources/
+cp ${jssglr}/jssglr.generated.js $out/resources/
+cp ${strcJava}/share/strc-java/strategoxt.jar $out/resources/
 '';
 
 

From richard at vogelij.nl  Fri Dec 14 00:24:35 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 23:24:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25782 - hydra/jobs
Message-ID: <20121213232435.E01B9CC1BD@mx4.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 23:24:35 2012
New Revision: 25782
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25782&sc=1

Log:
fix

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:11:28 2012	(r25781)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:24:35 2012	(r25782)
@@ -18,26 +18,24 @@
   antvartestsrc 	= "\\\${testsrc}";
   antvarwwwroot		= "\\\${wwwroot}";
 
-in
-{
+jobs = rec {
+
   buildSpoofaxToAceZip = 
       pkgs.stdenv.mkDerivation {
         name = "spoofax-ace.zip"; 
         buildInputs = [pkgs.zip]; 
         buildCommand = ''
           ensureDir $out 
-
           mkdir spoofax-ace
-          cp -R ${build}/* spoofax-ace/
- 
+          cp -R ${buildjar}/* spoofax-ace/
           zip -r $out/spoofax-ace.zip spoofax-ace
           echo "file zip $out/spoofax-ace.zip" > $out/nix-support/hydra-build-products
         ''; 
-      } ;      
+      } ;
 
 
 
- build = pkgs.releaseTools.antBuild {
+ buildjar = pkgs.releaseTools.antBuild {
     name   = "spoofax-ace";
     src    = spoofaxacesrc;
 
@@ -98,4 +96,5 @@
 
 
  };
-}
+};
+ in jobs

From richard at vogelij.nl  Fri Dec 14 00:28:16 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 23:28:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25783 - hydra/jobs
Message-ID: <20121213232816.33C677F8016@mx1.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 23:28:15 2012
New Revision: 25783
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25783&sc=1

Log:
test

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:24:35 2012	(r25782)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:28:15 2012	(r25783)
@@ -90,7 +90,7 @@
 mkdir $out/resources/
 cp ${strategoxtJavaScriptBackend}/s2js.jar $out/resources/
 cp -R ${strategoxtJavaScriptBackend}/src $out/resources/
-cp ${jssglr}/jssglr.generated.js $out/resources/
+cp ${jssglr}/bin/jssglr.generated.js $out/resources/
 cp ${strcJava}/share/strc-java/strategoxt.jar $out/resources/
 '';
 

From richard at vogelij.nl  Fri Dec 14 00:31:27 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 23:31:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25784 - hydra/jobs
Message-ID: <20121213233127.F1F587F8016@mx1.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 23:31:27 2012
New Revision: 25784
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25784&sc=1

Log:
test

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:28:15 2012	(r25783)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:31:27 2012	(r25784)
@@ -25,9 +25,10 @@
         name = "spoofax-ace.zip"; 
         buildInputs = [pkgs.zip]; 
         buildCommand = ''
-          ensureDir $out 
+          ensureDir $out/nix-support/hydra-build-products
           mkdir spoofax-ace
           cp -R ${buildjar}/* spoofax-ace/
+          rm -rf spoofax-ace/resources/src
           zip -r $out/spoofax-ace.zip spoofax-ace
           echo "file zip $out/spoofax-ace.zip" > $out/nix-support/hydra-build-products
         ''; 

From richard at vogelij.nl  Fri Dec 14 00:33:08 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 23:33:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25785 - hydra/jobs
Message-ID: <20121213233308.0E41FCC1BD@mx4.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 23:33:07 2012
New Revision: 25785
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25785&sc=1

Log:
...

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:31:27 2012	(r25784)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:33:07 2012	(r25785)
@@ -25,10 +25,9 @@
         name = "spoofax-ace.zip"; 
         buildInputs = [pkgs.zip]; 
         buildCommand = ''
-          ensureDir $out/nix-support/hydra-build-products
+          ensureDir $out/nix-support
           mkdir spoofax-ace
           cp -R ${buildjar}/* spoofax-ace/
-          rm -rf spoofax-ace/resources/src
           zip -r $out/spoofax-ace.zip spoofax-ace
           echo "file zip $out/spoofax-ace.zip" > $out/nix-support/hydra-build-products
         ''; 

From richard at vogelij.nl  Fri Dec 14 00:46:13 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 23:46:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25786 - hydra/jobs
Message-ID: <20121213234613.150507F8043@mx1.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 23:46:12 2012
New Revision: 25786
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25786&sc=1

Log:
getting there...

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:33:07 2012	(r25785)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:46:12 2012	(r25786)
@@ -20,14 +20,23 @@
 
 jobs = rec {
 
-  buildSpoofaxToAceZip = 
+  SpoofaxToAceZipFullyPacked = 
       pkgs.stdenv.mkDerivation {
         name = "spoofax-ace.zip"; 
         buildInputs = [pkgs.zip]; 
         buildCommand = ''
+          ensureDir $out
           ensureDir $out/nix-support
+
           mkdir spoofax-ace
           cp -R ${buildjar}/* spoofax-ace/
+          chmod -R 755 spoofax-ace/
+
+          #cleanup
+          rm -rf spoofax-ace/nix-support
+   
+
+          #zip
           zip -r $out/spoofax-ace.zip spoofax-ace
           echo "file zip $out/spoofax-ace.zip" > $out/nix-support/hydra-build-products
         ''; 
@@ -70,11 +79,11 @@
       <arg value=\"--jssglr\"/>
         <arg value=\"resources/jssglr.generated.js\"/>
       <arg value=\"--strlib\"/>
-        <arg value=\"${pkgs.strategoPackages.strategoxt}/share/stratego-lib\"/>
+        <arg value=\"resources/stratego-lib\"/>
       <arg value=\"--strctrees\"/>
-        <arg value=\"${pkgs.strategoPackages.strategoxt}/share\"/>
+        <arg value=\"resources/ctrees\"/>
       <arg value=\"--s2js\"/>
-        <arg value=\"$out/resources/\"/>
+        <arg value=\"resources/\"/>
       <arg value=\"--wwwout\"/>
         <arg value=\"${antvarwwwroot}\"/>
       <arg value=\"--testsrc\"/>
@@ -83,15 +92,18 @@
   </target>
 </project>" >> $out/build.xml
 
-echo "spoofaxproj=
+echo "spoofaxproj=/path/to/spoofax/project
 testsrc=/path/to/sourcefile/to/embed.src
 wwwroot=/path/to/www/output/" >> $out/build.properties
 
 mkdir $out/resources/
+mkdir $out/resources/ctrees/
+
 cp ${strategoxtJavaScriptBackend}/s2js.jar $out/resources/
-cp -R ${strategoxtJavaScriptBackend}/src $out/resources/
 cp ${jssglr}/bin/jssglr.generated.js $out/resources/
 cp ${strcJava}/share/strc-java/strategoxt.jar $out/resources/
+cp ${pkgs.strategoPackages.strategoxt}/share/*.ctree $out/resources/ctrees/
+cp -R ${pkgs.strategoPackages.strategoxt}/share/stratego-lib $out/resources/
 '';
 
 

From richard at vogelij.nl  Fri Dec 14 00:50:52 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 13 Dec 2012 23:50:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25787 - hydra/jobs
Message-ID: <20121213235052.C2162108C010@mx3.tudelft.nl>

Author: rvogelij
Date: Thu Dec 13 23:50:52 2012
New Revision: 25787
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25787&sc=1

Log:
it might work now :p

Modified:
   hydra/jobs/spoofax-ace.nix

Modified: hydra/jobs/spoofax-ace.nix
==============================================================================
--- hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:46:12 2012	(r25786)
+++ hydra/jobs/spoofax-ace.nix	Thu Dec 13 23:50:52 2012	(r25787)
@@ -104,6 +104,7 @@
 cp ${strcJava}/share/strc-java/strategoxt.jar $out/resources/
 cp ${pkgs.strategoPackages.strategoxt}/share/*.ctree $out/resources/ctrees/
 cp -R ${pkgs.strategoPackages.strategoxt}/share/stratego-lib $out/resources/
+cp -R ${strategoxtJavaScriptBackend}/src $out/resources
 '';
 
 

From richard at vogelij.nl  Fri Dec 14 17:04:45 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Fri, 14 Dec 2012 16:04:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25788 - in
	spoofax-ace/trunk/spoofax-ace: . resources/javascript
	src/spoofax/ace src/spoofax/ace/generate/javascript
Message-ID: <20121214160445.2F4067F8033@mx1.tudelft.nl>

Author: rvogelij
Date: Fri Dec 14 16:04:43 2012
New Revision: 25788
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25788&sc=1

Log:
if an s2aserver is not compiled with the editor, the editor wont attempt to connect to an s2aserver

Modified:
   spoofax-ace/trunk/spoofax-ace/build.xml
   spoofax-ace/trunk/spoofax-ace/resources/javascript/partitioner.js
   spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/S2ASettings.java
   spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/SpoofaxToAce.java
   spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/generate/javascript/S2AJSGenerator.java

Modified: spoofax-ace/trunk/spoofax-ace/build.xml
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/build.xml	Thu Dec 13 23:50:52 2012	(r25787)
+++ spoofax-ace/trunk/spoofax-ace/build.xml	Fri Dec 14 16:04:43 2012	(r25788)
@@ -120,7 +120,8 @@
 	</target>
 
 	<target name="tar_all" depends="jar">
-		<tar destfile="spoofax-ace.tar.gz" basedir="." compression="gzip">
+		<tar destfile="spoofax-ace.tar.gz" basedir="." compression="gzip"
+>
 			<fileset dir="${resourcesDir}" />
 			
 		</tar>

Modified: spoofax-ace/trunk/spoofax-ace/resources/javascript/partitioner.js
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/resources/javascript/partitioner.js	Thu Dec 13 23:50:52 2012	(r25787)
+++ spoofax-ace/trunk/spoofax-ace/resources/javascript/partitioner.js	Fri Dec 14 16:04:43 2012	(r25788)
@@ -47,7 +47,7 @@
 
 Partitioner.Vaporize = function()
 {
-	console.log(Partitioner.S2A_RUNTIME);
+	//console.log(Partitioner.S2A_RUNTIME);
 	for (mode in Partitioner.S2A_RUNTIME)
 	{
 		if (Partitioner.S2A_RUNTIME[mode] >= 1)
@@ -78,8 +78,12 @@
 
 Partitioner.handleDelegationOfWork = function(doc)
 {
-	//S2AClient.s2aclient(doc, true);
-	//return;
+	if (Partitioner.localOnly)
+	{
+		console.log("LOCAL ONLY MODE");
+		S2ALocal.s2alocal(doc);
+		return;
+	}
 	console.log("delegateWork");
 	if (Partitioner.partitionerIsRunningAJob)
 	{

Modified: spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/S2ASettings.java
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/S2ASettings.java	Thu Dec 13 23:50:52 2012	(r25787)
+++ spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/S2ASettings.java	Fri Dec 14 16:04:43 2012	(r25788)
@@ -9,15 +9,17 @@
 	public final String Str2JSPath; 
 	public final String StrategoLibPath;
 	public final String StrategoCtreePath;
+	public final boolean LocalOnly;
 	
 	public String SourceFilePath;
 	
-	public S2ASettings(String pSpoofaxProjDir, String pJssglrImplementation, String pStr2JSPath, String pStrategoLibPath, String pStrategoCtreePath)
+	public S2ASettings(String pSpoofaxProjDir, String pJssglrImplementation, String pStr2JSPath, String pStrategoLibPath, String pStrategoCtreePath, boolean pLocalOnly)
 	{
 		SpoofaxProjectDir = pSpoofaxProjDir;
 		JssglrImplementation = pJssglrImplementation;
 		Str2JSPath = pStr2JSPath;
 		StrategoLibPath = pStrategoLibPath;
 		StrategoCtreePath = pStrategoCtreePath;
+		LocalOnly = pLocalOnly;
 	}
 }

Modified: spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/SpoofaxToAce.java
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/SpoofaxToAce.java	Thu Dec 13 23:50:52 2012	(r25787)
+++ spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/SpoofaxToAce.java	Fri Dec 14 16:04:43 2012	(r25788)
@@ -25,7 +25,7 @@
  */
 public class SpoofaxToAce {
 
-	final static String _version 		= "0.24";
+	final static String _version 		= "0.25";
 	final static String P_SPOOFAXDIR 	= "--i";
 	final static String P_JSSGLRJSFILE 	= "--jssglr";
 	final static String P_STR2JSDIR 	= "--s2js";
@@ -71,7 +71,8 @@
 				params.get(P_JSSGLRJSFILE),
 				params.get(P_STR2JSDIR), 
 				params.get(P_STRLIB),
-				params.get(P_STRCTREE)
+				params.get(P_STRCTREE),
+				!params.containsKey(P_WITHSERVER)
 		);
 		settings.SourceFilePath = params.get(P_TESTSRC);
 		

Modified: spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/generate/javascript/S2AJSGenerator.java
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/generate/javascript/S2AJSGenerator.java	Thu Dec 13 23:50:52 2012	(r25787)
+++ spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/generate/javascript/S2AJSGenerator.java	Fri Dec 14 16:04:43 2012	(r25788)
@@ -162,6 +162,8 @@
 			wrappedAceWorkerStrm = new FileOutputStream(wrappedAceWorker, true);
 			S2AUtils.WriteResourceToStream(getClass(), "/javascript/aceworker/worker-spoofax2ace-prepend-new.js", wrappedAceWorkerStrm);
 			S2AUtils.WriteResourceToStream(getClass(), "/javascript/partitioner.js", wrappedAceWorkerStrm);
+			if (_settings.LocalOnly)
+				S2AUtils.WriteStringToStream("Partitioner.localOnly = true;", wrappedAceWorkerStrm);
 			S2AUtils.WriteResourceToStream(getClass(), "/javascript/s2aclient.js", wrappedAceWorkerStrm);
 			S2AUtils.WriteResourceToStream(getClass(), "/javascript/diff/diff_match_patch.js", wrappedAceWorkerStrm);			
 			S2AUtils.WriteResourceToStream(getClass(), "/javascript/s2alocal.js", wrappedAceWorkerStrm);
@@ -196,6 +198,7 @@
 			S2AUtils.WriteFileToStream(_settings.Str2JSPath + "/src/javascript/strategojs.js", wrappedStrProg);
 			S2AUtils.WriteFileToStream(_settings.Str2JSPath + "/src/javascript/terms.js", wrappedStrProg);
 			S2AUtils.WriteFileToStream(_settings.Str2JSPath + "/src/javascript/srts.js", wrappedStrProg);
+			S2AUtils.WriteFileToStream(_settings.Str2JSPath + "/src/javascript/index.js", wrappedStrProg);
 			S2AUtils.WriteFileToStream(_settings.Str2JSPath + "/src/javascript/ssl.js", wrappedStrProg);
 			if (!wrapForAce)
 				S2AUtils.WriteStringToStream("var navigator = { userAgent: \"node-js\" }; \n", wrappedStrProg);//Nodejs gwt'd jssglr workaround

From richard at vogelij.nl  Fri Dec 14 17:06:04 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Fri, 14 Dec 2012 16:06:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25789 - in
	strategoxt-javascript-backend/trunk: scripts src/javascript
Message-ID: <20121214160604.9492BCC203@mx4.tudelft.nl>

Author: rvogelij
Date: Fri Dec 14 16:06:04 2012
New Revision: 25789
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25789&sc=1

Log:
The new entitylanguage can now be bult again - Analysis in the new entlang is broken because the stratego index primitives are not yet fully implemented in javascript.

Did make a start in index.js, called from ssl.js

Added:
   strategoxt-javascript-backend/trunk/src/javascript/index.js
Modified:
   strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js

Modified: strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh
==============================================================================
--- strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh	Fri Dec 14 16:04:43 2012	(r25788)
+++ strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh	Fri Dec 14 16:06:04 2012	(r25789)
@@ -5,6 +5,7 @@
 	${bp}/../src/javascript/strategojs.js \
 	${bp}/../src/javascript/terms.js \
 	${bp}/../src/javascript/srts.js \
+	${bp}/../src/javascript/index.js \
 	${bp}/../src/javascript/ssl.js \
 	${bp}/../src/javascript/jssglr/jssglr_prepend.js \
 	${bp}/../src/javascript/jssglr/generated.jssglr.js \

Added: strategoxt-javascript-backend/trunk/src/javascript/index.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/index.js	Fri Dec 14 16:06:04 2012	(r25789)
@@ -0,0 +1,69 @@
+//@author Richard Vogelij
+//Basic implementation of the Stratego index
+StrategoJS.Index = {};
+
+StrategoJS.Index.CurrentFile = null;
+
+StrategoJS.Index.Files = [];
+
+StrategoJS.Index.loadIndex = function(langname, path)
+{
+	StrategoJS.Index.CurrentFile = path;
+	return true;
+}
+
+StrategoJS.Index.start_transaction = function()
+{
+	return true;
+}
+StrategoJS.Index.end_transaction = function()
+{
+	return true;
+}
+
+StrategoJS.Index.get_all_in_file = function(filepath)
+{
+	return [];
+}
+
+StrategoJS.Index.get_files_of = function(filepath)
+{
+	return [];
+}
+
+
+StrategoJS.Index.clear_file = function(filepath)
+{
+	StrategoJS.Index.Files[filepath] = [];
+	return true;
+}
+
+StrategoJS.Index.set_current_file = function(filepath)
+{
+	StrategoJS.Index.CurrentFile = filepath;
+	return true;
+}
+
+StrategoJS.Index.add = function(file, value)
+{
+	if (StrategoJS.Index.Files[file] === undefined)
+		StrategoJS.Index.Files[file] = [];
+	StrategoJS.Index.Files[file].push(value);
+	return true;
+}
+
+
+//should return a collection of index entries based on a APPL template
+StrategoJS.Index.get = function()
+{
+	return StrategoJS.Index.Files[StrategoJS.Index.CurrentFile];
+}
+
+StrategoJS.Index.remove = function(template, path)
+{
+	var table = StrategoJS.Index.Files[path];
+	if (table != null)
+		delete table[template];
+	return true;
+}
+

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Fri Dec 14 16:04:43 2012	(r25788)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Fri Dec 14 16:06:04 2012	(r25789)
@@ -26,22 +26,22 @@
 	}
 
 	StrategoJS.SSL.SSL_id = function(ctx, currentTerm) {
-		//trace("SSL_id");
+		trace("SSL_id");
 		return currentTerm;
 	}
 
 	StrategoJS.SSL.SSL_stdin_stream = function(ctx, currentTerm) {
-		//trace("SSL_stdin_stream");
+		trace("SSL_stdin_stream");
 		return ctx.factory.makeAppl(_stdin, []);
 	}
 
 	StrategoJS.SSL.SSL_stdout_stream = function(ctx, currentTerm) {
-		//trace("SSL_stdout_stream");
+		trace("SSL_stdout_stream");
 		return ctx.factory.makeAppl(_stdout, []);
 	}
 
 	StrategoJS.SSL.SSL_stderr_stream = function(ctx, currentTerm) {
-		//trace("SSL_stderr_stream");
+		trace("SSL_stderr_stream");
 		return ctx.factory.makeAppl(_stderr, []);
 	}
 
@@ -60,7 +60,7 @@
 	}
 	
 	var _mkTermMakeString = function(factory, ctorTerm) {
-		////trace("_mkTermMakeString"+"\n\tterm: " + ctorTerm +"\n\tstrval:" + factory.stringValue(ctorTerm));
+		//trace("_mkTermMakeString"+"\n\tterm: " + ctorTerm +"\n\tstrval:" + factory.stringValue(ctorTerm));
 		var test = factory.stringValue(ctorTerm);
 		if ((test === undefined))// || (test.charCodeAt(0) !== 34))
 			return false;
@@ -68,15 +68,15 @@
 	}
 
 	StrategoJS.SSL.SSL_mkterm = function(ctx, currentTerm, ctorTerm, args) {
-		//trace("SSL_mkterm " + ctorTerm + " - " + args);
-		debugger;
+		trace("SSL_mkterm " + ctorTerm + " - " + args);
+		//debugger;
 		var factory = ctx.factory;
 		var termType = factory.termType(ctorTerm);
 		
 		switch(termType) {
 			case factory.STRING:
 				var test = _mkTermMakeString(factory, ctorTerm);
-				//trace("test:" + test);
+				trace("test:" + test);
 				if (test)
 					return factory.makeString(factory.stringValue(ctorTerm));
 				else
@@ -99,7 +99,7 @@
 	}	
 
 	StrategoJS.SSL.SSL_addi = function(ctx, currentTerm, lhs, rhs) {
-		//trace("SSL_addi");
+		trace("SSL_addi");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.INT || f.termType(rhs) !== f.INT)
 			return null;
@@ -107,7 +107,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_subti = function(ctx, currentTerm, a, b) {
-		//trace("SSL_subti");
+		trace("SSL_subti");
 		var f = ctx.factory;
 		if(f.termType(a) !== f.INT || f.termType(b) !== f.INT) { 
 			return null;
@@ -116,7 +116,7 @@
 	}	
 	
 	StrategoJS.SSL.SSL_muli = function(ctx, currentTerm, lhs, rhs) {
-		//trace("SSL_muli");
+		trace("SSL_muli");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.INT || f.termType(rhs) !== f.INT)
 			return null;
@@ -124,7 +124,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_divi = function(ctx, currentTerm, lhs, rhs) {
-		//trace("SSL_divi");
+		trace("SSL_divi");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.INT || f.termType(rhs) !== f.INT)
 			return null;
@@ -132,7 +132,7 @@
 	}	
 	
 	StrategoJS.SSL.SSL_modi = function(ctx, currentTerm, lhs, rhs) {
-		//trace("SSL_modi");
+		trace("SSL_modi");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.INT || f.termType(rhs) !== f.INT)
 			return null;
@@ -140,7 +140,7 @@
 	}	
 	
 	StrategoJS.SSL.SSL_int = function(ctx, currentTerm, lhs) {
-		//trace("SSL_int");
+		trace("SSL_int");
 		var f = ctx.factory;
 		return f.makeInt(parseInt(lhs));
 	}	
@@ -148,7 +148,7 @@
 	
 	
 	StrategoJS.SSL.SSL_gti = function(ctx, currentTerm, a, b) {
-		//trace("SSL_gti");
+		trace("SSL_gti");
 		var f = ctx.factory;
 		if(f.termType(a) !== f.INT || f.termType(b) !== f.INT) { 
 			return null;
@@ -163,7 +163,7 @@
 	
 
 	StrategoJS.SSL.SSL_addr = function(ctx, currentTerm, lhs, rhs) {
-		//trace("SSL_addr");
+		trace("SSL_addr");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.REAL || f.termType(rhs) !== f.REAL)
 			return null;
@@ -171,7 +171,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_mulr = function(ctx, currentTerm, lhs, rhs) {
-		//trace("SSL_mulr");
+		trace("SSL_mulr");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.REAL || f.termType(rhs) !== f.REAL)
 			return null;
@@ -179,7 +179,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_modr = function(ctx, currentTerm, lhs, rhs) {
-		//trace("SSL_modr");
+		trace("SSL_modr");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.REAL || f.termType(rhs) !== f.REAL)
 			return null;
@@ -187,7 +187,7 @@
 	}	
 	
 	StrategoJS.SSL.SSL_gtr = function(ctx, currentTerm, a, b) {
-		//trace("SSL_gtr");
+		trace("SSL_gtr");
 		var f = ctx.factory;
 		if(f.termType(a) !== f.REAL || f.termType(b) !== f.REAL) { 
 			return null;
@@ -198,7 +198,7 @@
 	
 	
 	StrategoJS.SSL.SSL_write_term_to_stream_text = function(ctx, currentTerm, stream, outputTerm) {
-		//trace("SSL_write_term_to_stream_text A");
+		trace("SSL_write_term_to_stream_text A");
 		ctor = stream.getConstructor();
 		if(ctx.factory.ctorEquals(ctor, _stdout) || ctx.factory.ctorEquals(ctor, _stderr))
 			print(ctx.factory.prettify(outputTerm));
@@ -207,12 +207,12 @@
 			f.write(ctx.factory.prettify(outputTerm));
 			f.flush();
 		}
-		//trace("SSL_write_term_to_stream_text B");
+		trace("SSL_write_term_to_stream_text B");
 		return stream;
 	}
 
 	StrategoJS.SSL.SSL_read_term_from_stream = function(ctx, currentTerm, stream) {
-		//trace("SSL_read_term_from_stream");
+		trace("SSL_read_term_from_stream");
 		var ctor = ctx.factory.getConstructor(stream);
 		if(ctx.factory.ctorEquals(ctor, _stdin))
 			throw "SSL_read_term_from_stream does not support stdin"; 
@@ -231,21 +231,21 @@
 	}
 	
 	StrategoJS.SSL.SSL_write_term_to_string = function(ctx, currentTerm, lhs) {
-		//trace("SSL_write_term_to_string");
+		trace("SSL_write_term_to_string");
 		var f = ctx.factory;
 		return f.makeString(f.prettify(lhs));
 	}	
 	
 
 	StrategoJS.SSL.SSL_is_string = function(ctx, currentTerm, arg) {
-		//trace("SSL_is_string");
+		trace("SSL_is_string");
 		if(ctx.factory.termType(arg) === ctx.factory.STRING)
 			return arg;
 		return null;
 	}
 
 	StrategoJS.SSL.SSL_fputs = function(ctx, currentTerm, string, stream) {
-		//trace("SSL_fputs");
+		trace("SSL_fputs");
 		ctor = stream.getConstructor();
 		if (ctx.factory.termType(string) !== ctx.factory.STRING)
 		{
@@ -266,13 +266,13 @@
 	StrategoJS.SSL.SSL_fopen = function(ctx, currentTerm, fileName, modep) {
 		var mode = ctx.factory.stringValue(modep);
 		var fileCons = fileName;
-		//trace("SSL_fopen : " + fileName.name + " " + mode);
+		trace("SSL_fopen : " + fileName.name + " " + mode);
 		_openFiles.push(fileCons);
 		return ctx.factory.makeInt(_openFiles.length - 1);
 	}
 
 	StrategoJS.SSL.SSL_fclose = function(ctx, currentTerm, stream) {
-		//trace("SSL_fclose");
+		trace("SSL_fclose");
 		var f = _openFiles[stream];
 		if(f) {
 			f.close();
@@ -282,7 +282,7 @@
 	}
 
 	StrategoJS.SSL.SSL_fputc = function(ctx, currentTerm, ch, stream) {
-		//trace("SSL_fputc");
+		trace("SSL_fputc");
 		var ctor = ctx.factory.getConstructor(stream);
 		var char = ch;
 	
@@ -297,52 +297,54 @@
 	}
 
 	StrategoJS.SSL.SSL_get_constructor = function(ctx, currentTerm, term) {
-		//trace("SSL_get_constructor");
-		//trace("SSL_get_constructor term: " + ctx.factory.prettify(term) );
+		trace("SSL_get_constructor");
+		trace("SSL_get_constructor term: " + ctx.factory.prettify(term) );
 		var ctor = ctx.factory.getConstructor(term);
 		if (ctor.arity !== undefined)
+		{
 			ctor = ctor.name;
+		}
 		return ctor;
 	}
 
 	StrategoJS.SSL.SSL_get_arguments = function(ctx, currentTerm, term) {
-		//trace("SSL_get_arguments");
+		trace("SSL_get_arguments");
 		var tmp = [];
 		var factory = ctx.factory;
 		switch(factory.termType(term)) {
-		case factory.REAL:
-		case factory.INT:
-		case factory.STRING:
-			return factory.makeEmptyList();
-		case factory.LIST:
-			return term;
-		case factory.APPL:
-		case factory.TUPLE:
-			var r = factory.makeEmptyList();
-			for(var i = factory.getSubtermCount(term) - 1; i >= 0; i--) {
-				r = factory.makeListCons(factory.getSubterm(term, i), r);
-			}
-			return r;
+			case factory.REAL:
+			case factory.INT:
+			case factory.STRING:
+				return factory.makeEmptyList();
+			case factory.LIST:
+				return term;
+			case factory.APPL:
+			case factory.TUPLE:
+				var r = factory.makeEmptyList();
+				for(var i = factory.getSubtermCount(term) - 1; i >= 0; i--) {
+					r = factory.makeListCons(factory.getSubterm(term, i), r);
+				}
+				return r;
 		}
 		throw "not implemented SSL_get_arguments fully";
 	}
 
 	StrategoJS.SSL.SSL_get_list_length = function(ctx, currentTerm, term) {
-		//trace("SSL_get_list_length");
+		trace("SSL_get_list_length");
 		if(ctx.factory.termType(term) !== ctx.factory.LIST)
 			return null;
 		return ctx.factory.makeInt(ctx.factory.getSubtermCount(term));
 	}
 
 	StrategoJS.SSL.SSL_perror = function(ctx, currentTerm, term) {
-		//trace("SSL_perror");
+		trace("SSL_perror");
 		var msg = ctx.factory.termType(term) == ctx.factory.STRING ? term : "(no details on this error; perror not supported)";
 		print("ERROR: " + msg);
 		return currentTerm;
 	}
 
 	StrategoJS.SSL.SSL_is_real = function(ctx, currentTerm, term) {
-		//trace("SSL_is_real");
+		trace("SSL_is_real");
 		var ok = ctx.factory.termType(term) === ctx.factory.REAL;
 		if (!ok)
 			return null;
@@ -406,12 +408,12 @@
 	}
 
 	StrategoJS.SSL.SSL_dynamic_rules_hashtable = function(ctx, currentTerm) {
-		//trace("SSL_dynamic_rules_hashtable");
+		trace("SSL_dynamic_rules_hashtable");
 		return ctx.factory.makeInt(_DYN_TABLE);
 	}
 
 	StrategoJS.SSL.SSL_hashtable_get = function(ctx, currentTerm, tableReference, key) {
-		//trace("SSL_hashtable_get : " + tableReference);
+		trace("SSL_hashtable_get : " + tableReference);
 		if(ctx.factory.termType(tableReference) !== ctx.factory.INT)
 			return null;
 		var tbl = _hashtables[ctx.factory.intValue(tableReference)];
@@ -422,19 +424,19 @@
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_create = function(ctx, currentTerm, initialSize, maxLoad) {
-		//trace("SSL_indexedSet_create");
+		trace("SSL_indexedSet_create");
 		_indexedSets.push(new _IndexedSet());
 		return ctx.factory.makeInt(_indexedSets.length - 1);
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_destroy = function(ctx, currentTerm, setIndex) {
-		//trace("SSL_indexedSet_destroy");
+		trace("SSL_indexedSet_destroy");
 		delete _indexedSets[ctx.factory.intValue(setIndex)];
 		return currentTerm;
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_reset = function(ctx, currentTerm, setIndex) {
-		//trace("SSL_indexedSet_reset");
+		trace("SSL_indexedSet_reset");
 		if(ctx.factory.termType(setIndex) !== ctx.factory.INT)
 			return null;
 		_indexedSets[ctx.factory.intValue(setIndex)].reset();
@@ -442,7 +444,7 @@
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_put = function(ctx, currentTerm, strategy, setIndex, key) {
-		//trace("SSL_indexedSet_put : " + setIndex + " " + ctx.factory.prettify(key));
+		trace("SSL_indexedSet_put : " + setIndex + " " + ctx.factory.prettify(key));
 		if(ctx.factory.termType(setIndex) !== ctx.factory.INT)
 			return null;
 		var set = _indexedSets[ctx.factory.intValue(setIndex)];
@@ -459,7 +461,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_indexedSet_remove = function(ctx, currentTerm, strategy, args) {
-		//trace("SSL_indexedSet_remove");
+		trace("SSL_indexedSet_remove");
 		if(ctx.factory.termType(args[0]) !== ctx.factory.INT)
 			return null;
 		var set = _indexedSets[args[0]];
@@ -469,19 +471,19 @@
 	}	
 
 	StrategoJS.SSL.SSL_indexedSet_getIndex = function(ctx, currentTerm, setIndex, key) {
-		//trace("SSL_indexedSet_getIndex");
+		trace("SSL_indexedSet_getIndex");
 		if(ctx.factory.termType(setIndex) !== ctx.factory.INT)
 			return null;
 		var set = _indexedSets[ctx.factory.intValue(setIndex)];
 		var keyAsString = ctx.factory.prettify(key);
-		//trace("SSL_indexedSet_getIndex " + setIndex + " " + keyAsString);
+		trace("SSL_indexedSet_getIndex " + setIndex + " " + keyAsString);
 		var r = set.getIndex(keyAsString);
 		//print(r);
 		return r === undefined ? null : r;
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_elements = function(ctx, currentTerm, setIndex) {
-		//trace("SSL_indexedSet_elements " + setIndex);
+		trace("SSL_indexedSet_elements " + setIndex);
 		if(ctx.factory.termType(setIndex) !== ctx.factory.INT)
 			return null;
 		var set = _indexedSets[ctx.factory.intValue(setIndex)];
@@ -496,13 +498,13 @@
 	}
 
 	StrategoJS.SSL.SSL_hashtable_create = function(ctx, currentTerm, initialSize, maxLoad) {
-		//trace("SSL_hashtable_create");
+		trace("SSL_hashtable_create");
 		_hashtables.push(_makeHashtable());
 		return ctx.factory.makeInt(_hashtables.length - 1);
 	}
 
 	StrategoJS.SSL.SSL_hashtable_destroy = function(ctx, currentTerm, hashIndex) {
-		//trace("SSL_hashtable_destroy");
+		trace("SSL_hashtable_destroy");
 		if(ctx.factory.termType(hashIndex) !== ctx.factory.INT)
 			return null;
 		delete _hashtables[ctx.factory.intValue(hashIndex)];
@@ -510,12 +512,12 @@
 	}
 
 	StrategoJS.SSL.SSL_hashtable_put = function(ctx, currentTerm, hashIndexTerm, key, value) {
-		//trace("SSL_hashtable_put");
+		trace("SSL_hashtable_put");
 		if(ctx.factory.termType(hashIndexTerm) !== ctx.factory.INT)
 			return null;
 		var hash = _hashtables[ctx.factory.intValue(hashIndexTerm)];
 		var keyAsString = ctx.factory.prettify(key);
-		//trace("SSL_hashtable_put " + hashIndexTerm + " " + keyAsString);
+		trace("SSL_hashtable_put " + hashIndexTerm + " " + keyAsString);
 		if (keyAsString === "ModuleName")
 			debugger;
 
@@ -525,7 +527,7 @@
 	}
 
 	StrategoJS.SSL.SSL_hashtable_keys = function(ctx, currentTerm, hashIndex, key, value) {
-		//trace("SSL_hashtable_keys " + hashIndex);
+		trace("SSL_hashtable_keys " + hashIndex);
 		if(ctx.factory.termType(hashIndex) !== ctx.factory.INT)
 			return null;
 		var hash = _hashtables[ctx.factory.intValue(hashIndex)];
@@ -537,7 +539,7 @@
 	}
 
 	StrategoJS.SSL.SSL_hashtable_remove = function(ctx, currentTerm, hashIndex, key) {
-		//trace("SSL_hashtable_remove");
+		trace("SSL_hashtable_remove");
 		if(ctx.factory.termType(hashIndex) !== ctx.factory.INT)
 			return null;
 		var hash = _hashtables[ctx.factory.intValue(hashIndex)];
@@ -547,13 +549,13 @@
 	}
 
 	StrategoJS.SSL.SSL_table_hashtable = function(ctx, currentTerm) {
-		//trace("SSL_table_hashtable");
+		trace("SSL_table_hashtable");
 		return ctx.factory.makeInt(_TABLE_TABLE);
 	}
 	
 	StrategoJS.SSL.SSL_table_keys_fold = function(ctx, currentTerm, strategyToApply, first, hashIndex)
 	{
-		//trace("SSL_table_keys_fold");
+		trace("SSL_table_keys_fold");
 		var hash = _hashtables[hashIndex];
 		var result = first;
 		var nr = (typeof(first) === "number");
@@ -568,7 +570,7 @@
 	
 	StrategoJS.SSL.SSL_table_values_fold = function(ctx, currentTerm, strategyToApply, first, hashIndex)
 	{
-		//trace("SSL_table_values_fold");
+		trace("SSL_table_values_fold");
 		var hash = _hashtables[hashIndex];
 		var result = first;
 		for (var k in hash)
@@ -579,7 +581,7 @@
 	
 	StrategoJS.SSL.SSL_table_fold = function(ctx, currentTerm, strategyToApply, first, hashIndex)
 	{
-		//trace("SSL_table_fold");
+		trace("SSL_table_fold");
 		var hash = _hashtables[hashIndex];
 		var nr = (typeof(first) === "number");
 		var result = first;
@@ -596,7 +598,7 @@
 	
 	StrategoJS.SSL.SSL_list_loop = function(ctx, currentTerm, strategyToApply)
 	{
-		//trace("SSL_list_loop");
+		trace("SSL_list_loop");
 		if(ctx.factory.termType(currentTerm) !== ctx.factory.LIST)
 			return null;
 		var x = currentTerm;
@@ -612,7 +614,7 @@
 	}
 
 	StrategoJS.SSL.SSL_explode_string = function(ctx, currentTerm, string) {
-		//trace("SSL_explode_string");
+		trace("SSL_explode_string");
 		var f = ctx.factory;
 		if(f.termType(string) !== f.STRING)
 			return null;
@@ -626,7 +628,7 @@
 	}
 
 	StrategoJS.SSL.SSL_implode_string = function(ctx, currentTerm, list) {
-		//trace("SSL_implode_string");
+		trace("SSL_implode_string");
 		var f = ctx.factory;
 		if(f.termType(list) !== f.LIST)
 			return null;
@@ -640,7 +642,7 @@
 	}
 
 	StrategoJS.SSL.SSL_stacktrace_get_all_frame_names = function(ctx, currentTerm) {
-		//trace("SSL_stacktrace_get_all_frame_names");
+		trace("SSL_stacktrace_get_all_frame_names");
 		var frames = ctx.getStackFrames();
 		var f = ctx.factory;
 		var r = f.makeEmptyList();
@@ -652,7 +654,7 @@
 
 
 	StrategoJS.SSL.SSL_concat_strings = function(ctx, currentTerm, s1) {
-		//trace("SSL_concat_strings");
+		trace("SSL_concat_strings");
 		var f = ctx.factory;
 		if ((s1 !== null) && (f.termType(s1) === f.LIST))
 		{
@@ -664,7 +666,7 @@
 			{
 				if (f.getSubtermCount(f.tail(s1)) === 0)
 				{
-					//trace("SSL_concat_strings (recursive) end");
+					trace("SSL_concat_strings (recursive) end");
 					if (ctx.factory.termType(f.head(s1)) !== ctx.factory.STRING)
 					{
 						console.log("SSL_concat_strings prob - s1's head is not a string.");
@@ -684,7 +686,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_strcat = function(ctx, currentTerm, lhs, rhs) {
-		//trace("SSL_strcat");
+		trace("SSL_strcat");
 		var f = ctx.factory;
 		if ((f.termType(lhs) !== f.STRING) || (f.termType(rhs) !== f.STRING))
 			return null;
@@ -695,12 +697,12 @@
 
 
 	StrategoJS.SSL.SSL_getenv = function(ctx, currentTerm, name) {
-		//trace("SSL_getenv : " + ctx.factory.prettify(name));
+		trace("SSL_getenv : " + ctx.factory.prettify(name));
 		return null;
 	}
 
 	StrategoJS.SSL.SSL_strlen = function(ctx, currentTerm, string) {
-		//trace("SSL_strlen");
+		trace("SSL_strlen");
 		if(ctx.factory.termType(string) !== ctx.factory.STRING)
 			return null;
 		return ctx.factory.makeInt(ctx.factory.stringValue(string).length);
@@ -712,13 +714,13 @@
 	}	
 
 	StrategoJS.SSL.SSL_is_int = function(ctx, currentTerm) {
-		//trace("SSL_is_int");
+		trace("SSL_is_int");
 		return ctx.factory.termType(currentTerm) === ctx.factory.INT;
 	}
 	
 	StrategoJS.SSL.SSL_int_to_string = function(ctx, currentTerm, intValue)
 	{
-		//trace("SSL_int_to_string");
+		trace("SSL_int_to_string");
 		if(ctx.factory.termType(intValue) !== ctx.factory.INT)
 			return null;
 		return ctx.factory.makeString(intValue.toString(10));
@@ -726,7 +728,7 @@
 	
 	StrategoJS.SSL.SSL_string_to_int = function(ctx, currentTerm, strValue)
 	{
-		//trace("SSL_string_to_int")
+		trace("SSL_string_to_int")
 		if(ctx.factory.termType(strValue) !== ctx.factory.STRING)
 			return null;
 		strValue = strValue.replace(/^\s+/, '').replace(/\s+$/, '');
@@ -738,7 +740,7 @@
 	
 	StrategoJS.SSL.SSL_times = function(ctx, currentTerm)
 	{
-		//trace("SSL_times");
+		trace("SSL_times");
 		var utime = ctx.factory.makeInt(StrategoJS.DateInMiliseconds(new Date()) - _startTime);
 		var stime = ctx.factory.makeInt(0);
 		var ctime = ctx.factory.makeInt(0);
@@ -754,7 +756,7 @@
 	
 	StrategoJS.SSL.SSL_TicksToSeconds = function(ctx, currentTerm)
 	{
-		//trace("SSL_TicksToSeconds");
+		trace("SSL_TicksToSeconds");
 		if (ctx.factory.termType(currentTerm) !== ctx.factory.INT)
 			return null;
 		if (ctx.factory.intValue(currentTerm) === 0)
@@ -765,7 +767,7 @@
 
 	StrategoJS.SSL.SSL_real_to_string = function(ctx, currentTerm, realValue)
 	{
-		//trace("SSL_real_to_string");
+		trace("SSL_real_to_string");
 		if(ctx.factory.termType(realValue) !== ctx.factory.REAL)
 			return null;
 		return ctx.factory.makeString(realValue.toString());
@@ -773,7 +775,7 @@
 	
 	StrategoJS.SSL.SSL_real_to_string_precision = function(ctx, currentTerm, realValue)
 	{
-		//trace("SSL_real_to_string_precision");
+		trace("SSL_real_to_string_precision");
 		if(ctx.factory.termType(realValue) !== ctx.factory.REAL)
 			return null;
 		return ctx.factory.makeString(realValue.toString());
@@ -781,18 +783,51 @@
 	
 	StrategoJS.SSL.SSL_EXT_pluginpath = function(ctx, currentTerm)
 	{
-		//trace("SSL_EXT_pluginpath");
+		trace("SSL_EXT_pluginpath");
 		return ctx.factory.makeString("");
 	}
-
 	
+	StrategoJS.SSL.SSL_EXT_pluginpath = function(ctx, currentTerm)
+	{
+		trace("SSL_EXT_pluginpath");
+		return ctx.factory.makeString("");
+	}	
+	
+	
+	StrategoJS.SSL.SSL_EXT_clone_and_set_parents = function(ctx, currentTerm)
+	{
+		trace("SSL_EXT_clone_and_set_parents");
+		var clone = (function(){
+			return function(obj) { Clone.prototype=obj; return new Clone() };
+			function Clone() {}
+			
+		}());
+		
+		return clone(currentTerm);
+	}	
+
+	StrategoJS.SSL.SSL_get_appl_arguments_map = function(ctx, currentTerm, strategyToApply, input)
+	{
+		trace("SSL_get_appl_arguments_map");
+		var f = ctx.factory;
+		if (f.termType(input) !== f.APPL && f.termType(input) !== f.TUPLE)
+			return null;
+		
+		var r = f.makeEmptyList(); 
+		
+		for(var i = f.getSubtermCount(input) - 1; i >= 0; i--) {
+			r = f.makeListCons(strategyToApply(ctx, f.getSubterm(input, i)), r);
+			r.editortoken = input.editortoken;
+		}
+		return r;
+	}
 
 	
 	var testStoreParser = undefined;
 	
 	StrategoJS.SSL.JSSGLR_GET_PARSER = function(ctx, parsetable)
 	{
-		//trace("JSSGLR_GET_PARSER");
+		trace("JSSGLR_GET_PARSER");
 		if (testStoreParser === undefined)
 			testStoreParser = self.spoofax.createParserSync(parsetable); //TODO: actually fix this thourgh use of hash on parsetable or something. (caching the parser instance in a hashset)
 		return testStoreParser; 
@@ -800,14 +835,14 @@
 	
 	StrategoJS.SSL.JSSGLR_PARSE_STRING = function(ctx, sourcecodeparam, parser)
 	{
-		//trace("JSSGLR_Parse_String");
+		trace("JSSGLR_Parse_String");
 		var sourcecode = ctx.factory.stringValue(sourcecodeparam).replace(/^#!.*\n/, "\n");
 		var splitlines = sourcecode.split('\n');
 		//var result = parser.parseAndTokenize(splitlines.length, sourcecode);
 		var result = parser.parse(sourcecode);
 		if (result === null)
 		{
-			//trace("parse error");
+			trace("parse error");
 			return null;
 		}
 		result.getLineCount = function() { return splitlines.length; }
@@ -817,7 +852,7 @@
 	StrategoJS.SSL.JSSGLR_ACE_TOKENIZE = function(ctx, astpluserrors, parser)
 	{
 		
-		//trace("JSSGLR_ACE_TOKENIZE");
+		trace("JSSGLR_ACE_TOKENIZE");
 		if (astpluserrors.subtermCount !== 2)
 			return null;
 		var ast = astpluserrors.getSubterm(0); 
@@ -831,8 +866,8 @@
 		
 		var errorType = new Array(3);
 		errorType[0] = 'invalid.illegal';//error
-		errorType[1] = 'invalid.illegal';//warningerror
-		errorType[2] = 'invalid.illegal';//notice
+		errorType[1] = 'invalid.deprecated';//warningerror
+		errorType[2] = 'invalid.deprecated';//notice
 		parser.initTokenTable();
 		
 		while (curErrorTypeErrors.head !== null)
@@ -855,7 +890,8 @@
 								errterm = errterm.getSubterm(0);
 							else
 							{
-								//trace("tokenizer error: '" + error.head[1] + "' could not be bound to a term.");
+								debugger;
+								trace("tokenizer error: '" + error.head[1] + "' could not be bound to a term.");
 								break;
 							}
 						}
@@ -882,20 +918,20 @@
 	
 	StrategoJS.SSL.SSL_access = function(ctx, a, b, c, d, e)
 	{
-		//trace("SSL_access");
-		//trace("JS mode - no file acces. returning null.");
+		trace("SSL_access");
+		trace("JS mode - no file acces. returning null.");
 		return null;
 	}
 	StrategoJS.SSL.SSL_new = function(ctx, a, b, c, d, e)
 	{
-		//trace("SSL_new");
+		trace("SSL_new");
 		var uniquestr = Number(new Date())+""+_counter++;
 		return ctx.factory.makeString(uniquestr);
 	}
 	
 	StrategoJS.SSL.SSL_newname = function(ctx, a, b, c, d, e)
 	{
-		//trace("SSL_newname");
+		trace("SSL_newname");
 		var uniquestr = Number(new Date())+""+_counter++;
 		var res = new String(a+"."+uniquestr);
 		res.termType = a.termType;
@@ -911,11 +947,32 @@
 	
 	StrategoJS.SSL.SSL_eval_js = function(ctx, str)
 	{
-		//trace("SSL_eval_js");
+		trace("SSL_eval_js");
 		eval(ctx.factory.stringValue(str));
 		return str;
 	}
 	
+	StrategoJS.SSL.SSL_checksum = function(ctx, term)
+	{
+		return ctx.factory.makeString(ctx.factory.prettify(term));
+	}
+	
+	StrategoJS.SSL.SSL_EXT_get_parent = function(ctx, term)
+	{
+		trace("SSL_EXT_get_parent");
+		if (term.annoType === ctx.factory.ANNO)
+		{
+			if (term.annos.head.termType === ctx.factory.LIST)
+			{
+				if (term.annos.head.head.termType === ctx.factory.APPL)
+				{
+					return term.annos.head.head; 
+				}
+			}
+		}
+		return null;
+	}
+	
 	
 
 	//Call from stratego using <prim("NodeJSDebugger", AAA)>BBB
@@ -924,7 +981,154 @@
 		debugger;
 		return "debugger";
 	}
+	
+	//INDEX STUFF primitive calls to Index.js's index functions
+	
+	StrategoJS.SSL.LANG_index_setup = function(ctx, term, langname, path, partitionTerm)
+	{
+		trace("LANG_index_setup");
+		if (!StrategoJS.Index.loadIndex(ctx.factory.stringValue(langname), ctx.factory.stringValue(partitionTerm)))
+			return null;
+		return term;
+	}
+	
+	StrategoJS.SSL.LANG_index_start_transaction = function(ctx, term)
+	{
+		trace("LANG_index_start_transaction");
+		if (!StrategoJS.Index.start_transaction())
+			return null;
+		return term;
+	}
+	
+	StrategoJS.SSL.LANG_index_get_all_in_file = function(ctx, term, filepath)
+	{
+		trace("LANG_index_get_all_in_file");
+		var f = ctx.factory;
+		if(f.termType(filepath) !== f.STRING && f.termType(filepath) !== f.TUPLE)
+			return null;
+		
+		var all_in_file = StrategoJS.Index.get_all_in_file(ctx.factory.stringValue(filepath))
+		var r = f.makeEmptyList();
+		
+		
+		for(var i = 0; i < all_in_file.length; i++) {
+			r = f.makeListCons(f.makeString(all_in_file[i]), r);
+			r.editortoken = all_in_file.editortoken;
+		}
+		return r;
+	}
+	
+	StrategoJS.SSL.LANG_index_clear_file = function(ctx, term, filepath)
+	{
+		trace("LANG_index_clear_file");
+		var f = ctx.factory;
+		if(f.termType(filepath) !== f.STRING && f.termType(filepath) !== f.TUPLE)
+			return null;
+		if (StrategoJS.Index.clear_file(f.stringValue(filepath)))
+			return term;
+		
+		return null;
+	}
+	
+	StrategoJS.SSL.LANG_index_set_current_file = function(ctx, term, filepath)
+	{
+		trace("LANG_index_set_current_file");
+		var f = ctx.factory;
+		if(f.termType(filepath) !== f.STRING && f.termType(filepath) !== f.TUPLE)
+			return null;
+		if (StrategoJS.Index.clear_file(f.stringValue(filepath)))
+			return term;
+		return null;
+	}
+	
+	StrategoJS.SSL.LANG_index_add = function(ctx, term, entryappl, indexpartitiondescriptor)
+	{
+		trace("LANG_index_add");
+		var f = ctx.factory;
+		if (!  ((f.termType(entryappl) === f.APPL && ((f.termType(indexpartitiondescriptor) === f.TUPLE) || (f.termType(indexpartitiondescriptor) === f.STRING)))))
+			return null;
+		var obj = indexpartitiondescriptor;
+		if (f.termType(obj) === f.TUPLE)
+		{
+			obj = f.getSubterm(obj,0);
+		}
+		if (f.termType(obj) !== f.STRING)
+		{
+			debugger;
+			return null;			
+		}
+		var indexuri = ctx.factory.stringValue(obj);
+		
+		trace("LANG_index_add - added: " + indexuri);
+		if (!StrategoJS.Index.add(indexuri, entryappl))
+			return null;
+		
+		return term;		
+	}
+	
+	StrategoJS.SSL.LANG_index_get = function(ctx, term, entryappl)
+	{
+		//debugger;
+		trace("LANG_index_get");
+		var f = ctx.factory;
+		if (f.termType(entryappl) !== f.APPL)
+			return null;
+		
+		
+		entries = StrategoJS.Index.get();
 
+		
+		var r = f.makeEmptyList();
+		
+		for(var i = 0; i < entries.length; i++) {
+			r = f.makeListCons(entries[i], r);
+			r.editortoken = entries.editortoken;
+		}
+		
+		return r;		
+	}	
+	
+	StrategoJS.SSL.LANG_index_end_transaction = function(ctx, term)
+	{
+		trace("LANG_index_end_transaction");
+		if (!StrategoJS.Index.end_transaction())
+			return null;
+		return term;
+	}
+	
+	StrategoJS.SSL.LANG_index_get_files_of = function(ctx, term, template)
+	{
+		trace("LANG_index_get_files_of");
+		var f = ctx.factory;
+		if(f.termType(template) !== f.APPL)
+			return null;
+		
+		var all_in_file = StrategoJS.Index.get_files_of(ctx.factory.stringValue(template))
+		var r = f.makeEmptyList();
+		
+		
+		for(var i = 0; i < all_in_file.length; i++) {
+			r = f.makeListCons(f.makeString(all_in_file[i]), r);
+			r.editortoken = all_in_file.editortoken;
+		}
+		return r;
+	
+	}
+	
+	StrategoJS.SSL.LANG_index_remove = function(ctx, term, template, path)
+	{
+		trace("LANG_index_remove");
+		if (!StrategoJS.Index.remove(template, ctx.factory.stringValue(path)))
+			return null;
+		return term;
+	}
+
+	StrategoJS.SSL.LANG_index_get_children = function(ctx, term, a,b,c)
+	{
+		trace("LANG_index_get_children");
+		//todo
+		return ctx.factory.makeEmptyList();
+	}
 
 
 	return true;

Modified: strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Fri Dec 14 16:04:43 2012	(r25788)
+++ strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Fri Dec 14 16:06:04 2012	(r25789)
@@ -4,7 +4,7 @@
 
  // The global namespace for Stratego JavaScript backend
 
-DEBUGMODE = false;
+DEBUGMODE = true;
 
 StrategoJS = {};
 

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Fri Dec 14 16:04:43 2012	(r25788)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Fri Dec 14 16:06:04 2012	(r25789)
@@ -1,6 +1,7 @@
 /**
  * @author Karl Trygve Kalleberg
  * @author Lennart Kats
+ * @author Richard Vogelij
  */
 
 StrategoJS.Term = {}
@@ -31,7 +32,9 @@
 		
 		StrategoJS.error('\n\n');
 		
-		debugger;
+		
+		//debugger;
+		
 		var tp = typeof(term);
 		if(tp === 'number')
 			return Math.round(term) == term ? INT : REAL; // FIXME (karltk) too cheeky, might need to tag the values
@@ -695,6 +698,7 @@
 			LIST : LIST,
 			TUPLE : TUPLE,
 			APPL : APPL,
+			ANNO : ANNO,
 
 			parse : function(text) {
 				return parseFromStream(new PushbackStringIterator(text));

From gabrielkonat at gmail.com  Fri Dec 14 18:03:41 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Fri, 14 Dec 2012 17:03:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25790 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index
Message-ID: <20121214170341.1065B2B8005@mx2.tudelft.nl>

Author: gkonat
Date: Fri Dec 14 17:03:39 2012
New Revision: 25790
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25790&sc=1

Log:
Refactored index serialization into own class

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexFactory.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_commit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java	Fri Dec 14 16:06:04 2012	(r25789)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IIndex.java	Fri Dec 14 17:03:39 2012	(r25790)
@@ -132,11 +132,4 @@
      * Clears the entire index.
      */
     public abstract void clearAll();
-
-    /**
-     * Returns the index as a Stratego term.
-     * 
-     * @param includePositions
-     */
-    public abstract IStrategoTerm toTerm(boolean includePositions);
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Fri Dec 14 16:06:04 2012	(r25789)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Fri Dec 14 17:03:39 2012	(r25790)
@@ -1,10 +1,5 @@
 package org.spoofax.interpreter.library.index;
 
-import static org.spoofax.interpreter.core.Tools.isTermList;
-import static org.spoofax.terms.Term.termAt;
-import static org.spoofax.terms.Term.tryGetConstructor;
-
-import java.io.IOException;
 import java.net.URI;
 import java.util.Collection;
 import java.util.Collections;
@@ -20,8 +15,6 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.terms.TermFactory;
-import org.spoofax.terms.attachments.TermAttachmentSerializer;
 
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.LinkedHashMultimap;
@@ -35,8 +28,6 @@
 
     private static final int EXPECTED_DISTINCT_PARTITIONS = 100;
     private static final int EXPECTED_VALUES_PER_PARTITION = 1000;
-    private static final IStrategoConstructor FILE_ENTRIES_CON = new TermFactory().makeConstructor("PartitionEntries",
-        2);
 
     private final ConcurrentHashMap<IndexURI, Multimap<IndexPartitionDescriptor, IndexEntry>> entries =
         new ConcurrentHashMap<IndexURI, Multimap<IndexPartitionDescriptor, IndexEntry>>();
@@ -241,60 +232,6 @@
         partitions.clear();
     }
 
-    public IStrategoTerm toTerm(boolean includePositions) {
-        IStrategoList results = termFactory.makeList();
-        for(IndexPartitionDescriptor partitionDescriptor : partitions.keySet()) {
-            IStrategoList partitionResults =
-                IndexEntry.toTerms(termFactory, entriesPerPartitionDescriptor.get(partitionDescriptor));
-            // TODO: include time stamp for partition
-            IStrategoTerm result =
-                termFactory.makeAppl(FILE_ENTRIES_CON, partitionDescriptor.toTerm(termFactory), partitionResults);
-            results = termFactory.makeListCons(result, results);
-        }
-
-        if(includePositions) {
-            // TODO: optimize -- store more compact attachments for positions
-            TermFactory simpleFactory = new TermFactory();
-            TermAttachmentSerializer serializer = new TermAttachmentSerializer(simpleFactory);
-            results = (IStrategoList) serializer.toAnnotations(results);
-        }
-
-        return results;
-    }
-
-    public static Index fromTerm(IStrategoTerm term, ITermFactory factory, IOAgent agent, boolean extractPositions)
-        throws IOException {
-        if(extractPositions) {
-            TermAttachmentSerializer serializer = new TermAttachmentSerializer(factory);
-            term = (IStrategoList) serializer.fromAnnotations(term, false);
-        }
-
-        if(isTermList(term)) {
-            Index result = new Index();
-            result.initialize(factory, agent);
-            for(IStrategoList list = (IStrategoList) term; !list.isEmpty(); list = list.tail()) {
-                result.loadPartitionEntriesTerm(list.head());
-            }
-            return result;
-        } else {
-            throw new IOException("Expected list of " + FILE_ENTRIES_CON.getName());
-        }
-    }
-
-    private void loadPartitionEntriesTerm(IStrategoTerm partitionEntries) throws IOException {
-        if(tryGetConstructor(partitionEntries) == FILE_ENTRIES_CON) {
-            try {
-                addAll((IStrategoList) termAt(partitionEntries, 1), getPartitionDescriptor(termAt(partitionEntries, 0)));
-            } catch(IllegalStateException e) {
-                throw new IllegalStateException(e);
-            } catch(RuntimeException e) { // HACK: catch all runtime exceptions
-                throw new IOException("Unexpected exception reading index: " + e);
-            }
-        } else {
-            throw new IOException("Illegal index entry: " + partitionEntries);
-        }
-    }
-
     /**
      * Returns an unmodifiable collection if in debug mode, or the collection if not.
      */

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexFactory.java	Fri Dec 14 17:03:39 2012	(r25790)
@@ -0,0 +1,116 @@
+package org.spoofax.interpreter.library.index;
+
+import static org.spoofax.interpreter.core.Tools.isTermList;
+import static org.spoofax.terms.Term.termAt;
+import static org.spoofax.terms.Term.tryGetConstructor;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.TermAttachmentSerializer;
+
+public class IndexFactory {
+    private static final IStrategoConstructor PARTITION_ENTRIES_CONSTRUCTOR = new TermFactory().makeConstructor(
+        "PartitionEntries", 2);
+
+    /**
+     * Creates a term representation of given partition.
+     * 
+     * @param index The index that contains the partition.
+     * @param partition The partition to create a term representation of.
+     * @param factory A term factory.
+     * @param includePositions True to include position information.
+     * @return A term representing given partition.
+     */
+    public IStrategoTerm toTerm(IIndex index, IndexPartitionDescriptor partition, ITermFactory factory,
+        boolean includePositions) {
+        IStrategoList results = IndexEntry.toTerms(factory, index.getInPartition(partition));
+        // TODO: include time stamp & revision for partition
+        IStrategoTerm partitionResult =
+            factory.makeAppl(PARTITION_ENTRIES_CONSTRUCTOR, partition.toTerm(factory), results);
+
+        if (includePositions) {
+            TermAttachmentSerializer serializer = new TermAttachmentSerializer(factory);
+            partitionResult = serializer.toAnnotations(partitionResult);
+        }
+
+        return partitionResult;
+    }
+
+    /**
+     * Creates a term representation of given index.
+     * 
+     * @param index The index to create a term representation of.
+     * @param factory A term factory.
+     * @param includePositions True to include position information.
+     * @return A term representing given index.
+     */
+    public IStrategoTerm toTerm(IIndex index, ITermFactory factory, boolean includePositions) {
+        IStrategoList results = factory.makeList();
+        for (IndexPartitionDescriptor partition : index.getAllPartitionDescriptors()) {
+            IStrategoTerm result = toTerm(index, partition, factory, false);
+            results = factory.makeListCons(result, results);
+        }
+
+        if (includePositions) {
+            TermAttachmentSerializer serializer = new TermAttachmentSerializer(factory);
+            results = (IStrategoList) serializer.toAnnotations(results);
+        }
+
+        return results;
+    }
+
+    public IndexPartitionDescriptor partitionFromTerms(IIndex index, IStrategoTerm term, ITermFactory factory,
+        boolean extractPositions) throws IOException {
+        if (tryGetConstructor(term) == PARTITION_ENTRIES_CONSTRUCTOR) {
+            try {
+                if (extractPositions) {
+                    TermAttachmentSerializer serializer = new TermAttachmentSerializer(factory);
+                    term = serializer.fromAnnotations(term, false);
+                }
+
+                IndexPartitionDescriptor partition = index.getPartitionDescriptor(termAt(term, 0));
+                index.addAll((IStrategoList) termAt(term, 1), partition);
+                return partition;
+            } catch (IllegalStateException e) {
+                throw new IllegalStateException(e);
+            } catch (RuntimeException e) { // HACK: catch all runtime exceptions
+                throw new IOException("Unexpected exception reading index: " + e);
+            }
+        } else {
+            throw new IOException("Illegal index entry: " + term);
+        }
+    }
+
+    /**
+     * Populates an index from a term representation of an index created with
+     * {@link #toTerm(IIndex, ITermFactory, boolean)}.
+     * 
+     * @param index The index to populate.
+     * @param term A term representation of an index.
+     * @param factory A term factory.
+     * @param extractPositions True to also extract position information.
+     * @return
+     * @throws IOException
+     */
+    public IIndex indexFromTerms(IIndex index, IStrategoTerm term, ITermFactory factory, boolean extractPositions)
+        throws IOException {
+        if (extractPositions) {
+            TermAttachmentSerializer serializer = new TermAttachmentSerializer(factory);
+            term = serializer.fromAnnotations(term, false);
+        }
+
+        if (isTermList(term)) {
+            for (IStrategoList list = (IStrategoList) term; !list.isEmpty(); list = list.tail()) {
+                partitionFromTerms(index, list.head(), factory, false);
+            }
+            return index;
+        } else {
+            throw new IOException("Expected list of " + PARTITION_ENTRIES_CONSTRUCTOR.getName());
+        }
+    }
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Fri Dec 14 16:06:04 2012	(r25789)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Fri Dec 14 17:03:39 2012	(r25790)
@@ -26,7 +26,8 @@
 public class IndexManager {
     private final static AtomicLong revisionProvider = new AtomicLong();
     private final static ReadWriteLock transactionLock = new ReentrantReadWriteLock();
-
+    private final static IndexFactory indexFactory = new IndexFactory();
+    
     /**
      * Indices by language and project. Access requires a lock on {@link #getSyncRoot}
      */
@@ -147,17 +148,19 @@
     }
 
     public IIndex tryReadFromFile(File file, ITermFactory factory, IOAgent agent) {
+        IIndex index = new Index(); // TODO: Don't create concrete implementation here.
+        index.initialize(factory, agent);
         try {
             IStrategoTerm term = new TermReader(factory).parseFromFile(file.toString());
-            return Index.fromTerm(term, factory, agent, true); // TODO: Move to other class
+            return indexFactory.indexFromTerms(index, term, factory, true);
         } catch(Exception e) {
             return null;
         }
     }
 
-    public void storeCurrent() throws IOException {
+    public void storeCurrent(ITermFactory factory) throws IOException {
         File file = getIndexFile(currentProject.get(), currentLanguage.get());
-        IStrategoTerm stored = getCurrent().toTerm(true);
+        IStrategoTerm stored = indexFactory.toTerm(getCurrent(), factory, true);
         Writer writer = new BufferedWriter(new FileWriter(file));
         try {
             stored.writeAsString(writer, IStrategoTerm.INFINITE);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_commit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_commit.java	Fri Dec 14 16:06:04 2012	(r25789)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_commit.java	Fri Dec 14 17:03:39 2012	(r25790)
@@ -23,7 +23,7 @@
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
         try {
-            index.storeCurrent();
+            index.storeCurrent(env.getFactory());
         } catch(IOException e) {
             e.printStackTrace(); // ignore
         }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec 14 16:06:04 2012	(r25789)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/TransactionIndex.java	Fri Dec 14 17:03:39 2012	(r25790)
@@ -189,11 +189,7 @@
         index.clearAll();
         getWriteLock().unlock();
     }
-
-    public IStrategoTerm toTerm(boolean includePositions) {
-        return index.toTerm(includePositions);
-    }
-
+    
     /**
      * Queries if given partition descriptor equals the current partition; the partition this transaction index has been
      * created for.

From richard at vogelij.nl  Sun Dec 16 13:53:41 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Sun, 16 Dec 2012 12:53:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25791 - in
	spoofax/trunk/spoofax/org.spoofax.terms.convert: .
	src/org/spoofax/terms/convert
Message-ID: <20121216125341.E0727108C016@mx3.tudelft.nl>

Author: rvogelij
Date: Sun Dec 16 12:53:39 2012
New Revision: 25791
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25791&sc=1

Log:
Can now build tblconverter.jar using an ant script (this package can convert a BAF tbl to the SAF representation - required in CLI jssglr)

Added:
   spoofax/trunk/spoofax/org.spoofax.terms.convert/build.properties
   spoofax/trunk/spoofax/org.spoofax.terms.convert/build.xml
Modified:
   spoofax/trunk/spoofax/org.spoofax.terms.convert/src/org/spoofax/terms/convert/Main.java

Added: spoofax/trunk/spoofax/org.spoofax.terms.convert/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms.convert/build.properties	Sun Dec 16 12:53:39 2012	(r25791)
@@ -0,0 +1 @@
+org.spoofax.terms.src.dir=/home/richard/Thesis/workspace/spoofax/org.spoofax.terms

Added: spoofax/trunk/spoofax/org.spoofax.terms.convert/build.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms.convert/build.xml	Sun Dec 16 12:53:39 2012	(r25791)
@@ -0,0 +1,35 @@
+<project default="jar">
+        <property file="build.properties" />
+
+
+        <path id="classpath">
+            <fileset dir="${org.spoofax.terms.src.dir}">
+                 <include name="**" /> 
+            </fileset>
+	    <pathelement location="$src" />
+        </path>
+
+        <target name="clean">
+		<delete dir="bin"/>
+		<delete file="tblconverter.jar"/>
+	</target>
+	<target name="compile">
+		<mkdir dir="bin"/>
+		<javac srcdir="src" destdir="bin">
+			<classpath refid="classpath"/>
+		</javac>
+
+		<copy todir="bin">
+			<fileset dir="src">
+				<exclude name="**/*.java" />
+			</fileset>
+		</copy>
+	</target>
+	<target name="jar" depends="compile">
+		<jar destfile="tblconverter.jar" basedir="bin">
+			<manifest>
+				<attribute name="Main-Class" value="org.spoofax.terms.convert.Main"/>
+			</manifest>
+		</jar>
+	</target>
+</project>

Modified: spoofax/trunk/spoofax/org.spoofax.terms.convert/src/org/spoofax/terms/convert/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms.convert/src/org/spoofax/terms/convert/Main.java	Fri Dec 14 17:03:39 2012	(r25790)
+++ spoofax/trunk/spoofax/org.spoofax.terms.convert/src/org/spoofax/terms/convert/Main.java	Sun Dec 16 12:53:39 2012	(r25791)
@@ -1,3 +1,5 @@
+//@author Richard Vogelij
+
 package org.spoofax.terms.convert;
 
 import java.util.HashMap;

From dgroenewegen at gmail.com  Sun Dec 16 14:08:37 2012
From: dgroenewegen at gmail.com (Danny Groenewegen)
Date: Sun, 16 Dec 2012 13:08:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25792 -
	spoofax/trunk/spoofax/org.spoofax.terms.convert
Message-ID: <20121216130837.DFCF87F8009@mx1.tudelft.nl>

Author: dgroenewegen
Date: Sun Dec 16 13:08:37 2012
New Revision: 25792
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25792&sc=1

Log:
abs->relative path in default build properties

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms.convert/build.properties

Modified: spoofax/trunk/spoofax/org.spoofax.terms.convert/build.properties
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms.convert/build.properties	Sun Dec 16 12:53:39 2012	(r25791)
+++ spoofax/trunk/spoofax/org.spoofax.terms.convert/build.properties	Sun Dec 16 13:08:37 2012	(r25792)
@@ -1 +1 @@
-org.spoofax.terms.src.dir=/home/richard/Thesis/workspace/spoofax/org.spoofax.terms
+org.spoofax.terms.src.dir=../org.spoofax.terms

From richard at vogelij.nl  Sun Dec 16 15:57:12 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Sun, 16 Dec 2012 14:57:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25793 -
	strategoxt-javascript-backend/trunk/src/stratego
Message-ID: <20121216145712.BC7E37F8015@mx1.tudelft.nl>

Author: rvogelij
Date: Sun Dec 16 14:57:11 2012
New Revision: 25793
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25793&sc=1

Log:
added the definitions for the completion sglr constructor (was added this year for error recovery)

Modified:
   strategoxt-javascript-backend/trunk/src/stratego/tbl-to-jssglr.str

Modified: strategoxt-javascript-backend/trunk/src/stratego/tbl-to-jssglr.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/tbl-to-jssglr.str	Sun Dec 16 13:08:37 2012	(r25792)
+++ strategoxt-javascript-backend/trunk/src/stratego/tbl-to-jssglr.str	Sun Dec 16 14:57:11 2012	(r25793)
@@ -101,6 +101,8 @@
 				var table = function() { return _f.makeAppl(_f.makeConstructor('table', arguments.length), parseArgs(arguments), null); };
 				var term = function() { return _f.makeAppl(_f.makeConstructor('term', arguments.length), parseArgs(arguments), null); };
 				
+				var completion = function() { return _f.makeAppl(_f.makeConstructor('completion', arguments.length), parseArgs(arguments), null); };
+				
 				var <ctors>;
 				var <trees>;
 				
@@ -417,6 +419,7 @@
 	analyze-ctors: t at state-rec(a, b, c) ->  <count-name(|t)>"state_rec"
 	analyze-ctors: t at states(a) -> <count-name(|t)>"states"
 	analyze-ctors: t at term(a) -> <count-name(|t)>"term"
+	analyze-ctors: t at completion(a) -> <count-name(|t)>"completion"
 
 	escape-js: accept() -> <ctor>"accept"
 	escape-js: action() -> <ctor>"acti0n"
@@ -470,6 +473,7 @@
 	escape-js: state-rec(a, b, c) ->  <ctor(|a,b,c)>"state_rec"
 	escape-js: states(a) -> <ctor(|a)>"states"
 	escape-js: term(a) -> <ctor(|a)>"term"
+	escape-js: completion(a) -> <ctor(|a)>"completion"
 
 	escape-js:
 		[] -> ${[]}
@@ -483,7 +487,7 @@
 		with t' := <map(escape-js); separate; concat-strings>
 
 	unknown:
-		_ -> $[unknown]
+		x -> $["undefined[<write-to-string>x]"]
 		with debug(!"term: ")
 
 	wrap-string:
@@ -568,3 +572,5 @@
 	state-rec: Term * Term * Term -> Term
 	states: Term -> Term
 	term: Term -> Term
+	
+	completion: Term -> Term

From richard at vogelij.nl  Sun Dec 16 15:57:34 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Sun, 16 Dec 2012 14:57:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25794 - in
	spoofax-ace/trunk/spoofax-ace: . src/spoofax/ace/generate/javascript
Message-ID: <20121216145734.4C36BCC19B@mx4.tudelft.nl>

Author: rvogelij
Date: Sun Dec 16 14:57:33 2012
New Revision: 25794
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25794&sc=1

Log:
added cli build target in ant file

Modified:
   spoofax-ace/trunk/spoofax-ace/build.xml
   spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/generate/javascript/S2ANodeJSExecutableGenerator.java

Modified: spoofax-ace/trunk/spoofax-ace/build.xml
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/build.xml	Sun Dec 16 14:57:11 2012	(r25793)
+++ spoofax-ace/trunk/spoofax-ace/build.xml	Sun Dec 16 14:57:33 2012	(r25794)
@@ -81,6 +81,32 @@
                 </java>
         </target>
 
+        <target name="buildcli" depends="jar">
+                <java fork="true" classname="spoofax.ace.SpoofaxToAce" failonerror="true">
+                        <jvmarg line="-Xmx1536m -ss8m -XX:MaxPermSize=256m"/>
+                        <classpath>
+                                <pathelement location="s2a.jar"/>
+                                <pathelement location="${strxt}"/>
+                                <pathelement location="${s2js}/s2js.jar"/>
+                        </classpath>
+                        <arg value="--i"/>
+                                <arg value="${spoofaxproj}"/>
+                        <arg value="--jssglr"/>
+                                <arg value="${jssglr}"/>
+                        <arg value="--s2js"/>
+                                <arg value="${s2js}"/>
+                        <arg value="--strlib"/>
+                                <arg value="${strlib}"/>
+                        <arg value="--strctrees"/>
+                                <arg value="${strctrees}"/>
+                        <arg value="--testsrc"/>
+                                <arg value="${testsrc}"/>
+                        <arg value="--cliexecutable"/>
+                                <arg value="prog.js"/>
+                </java>
+        </target>
+
+
 	<target name="clean">
 		<delete dir="bin"/>
 		<delete dir="out"/>

Modified: spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/generate/javascript/S2ANodeJSExecutableGenerator.java
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/generate/javascript/S2ANodeJSExecutableGenerator.java	Sun Dec 16 14:57:11 2012	(r25793)
+++ spoofax-ace/trunk/spoofax-ace/src/spoofax/ace/generate/javascript/S2ANodeJSExecutableGenerator.java	Sun Dec 16 14:57:33 2012	(r25794)
@@ -12,9 +12,11 @@
 
 public class S2ANodeJSExecutableGenerator extends S2AJSGenerator 
 {
+	private S2ASettings _settings;
 
 	public S2ANodeJSExecutableGenerator(S2ASettings settings) throws IOException, S2ASpoofaxSetupException {
 		super(settings); 
+		_settings = settings;
 	}
 	
 	/*
@@ -30,7 +32,10 @@
 		System.err.println("S2A Successfully built NodeJS executable: " + new File(outputFile).getAbsolutePath());
 		System.err.println("Call using: node <executable.js> <language source code>");
 		System.err.println("example: ");
+		
 		String exSrc = "/path/to/source.file";
+		if (_settings.SourceFilePath.length() > 1)
+			exSrc = _settings.SourceFilePath;
 		System.err.println("  node debug " + new File(outputFile).getName() + " \"$(cat "+exSrc+")\"");
 		return true;
 	}	

From gabrielkonat at gmail.com  Mon Dec 17 13:24:36 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 17 Dec 2012 12:24:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25795 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index
Message-ID: <20121217122437.01BAE108C015@mx3.tudelft.nl>

Author: gkonat
Date: Mon Dec 17 12:24:35 2012
New Revision: 25795
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25795&sc=1

Log:
Put all languages in the same index.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_setup.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Sun Dec 16 14:57:33 2012	(r25794)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexManager.java	Mon Dec 17 12:24:35 2012	(r25795)
@@ -27,16 +27,14 @@
     private final static AtomicLong revisionProvider = new AtomicLong();
     private final static ReadWriteLock transactionLock = new ReentrantReadWriteLock();
     private final static IndexFactory indexFactory = new IndexFactory();
-    
+
     /**
      * Indices by language and project. Access requires a lock on {@link #getSyncRoot}
      */
-    private static Map<String, Map<URI, WeakReference<IIndex>>> asyncIndexCache =
-        new HashMap<String, Map<URI, WeakReference<IIndex>>>();
+    private static Map<URI, WeakReference<IIndex>> indexCache = new HashMap<URI, WeakReference<IIndex>>();
 
     private ThreadLocal<IIndex> current = new ThreadLocal<IIndex>();
     private ThreadLocal<URI> currentProject = new ThreadLocal<URI>();
-    private ThreadLocal<String> currentLanguage = new ThreadLocal<String>();
     private ThreadLocal<IndexPartitionDescriptor> currentPartition = new ThreadLocal<IndexPartitionDescriptor>();
 
     public static ReadWriteLock getTransactionLock() {
@@ -44,18 +42,17 @@
     }
 
     public IIndex getCurrent() {
-        if(!isInitialized())
-            throw new IllegalStateException(
-                "Index has not been set-up, use index-setup(|language, project-paths) to set up the index before use.");
-
+        ensureInitialized();
         return current.get();
     }
 
-    public IndexPartitionDescriptor getCurrentPartition() {
-        if(!isInitialized())
-            throw new IllegalStateException(
-                "Index has not been set-up, use index-setup(|language, project-paths) to set up the index before use.");
+    public URI getCurrentProject() {
+        ensureInitialized();
+        return currentProject.get();
+    }
 
+    public IndexPartitionDescriptor getCurrentPartition() {
+        ensureInitialized();
         return currentPartition.get();
     }
 
@@ -63,14 +60,6 @@
         this.currentPartition.set(currentPartition);
     }
 
-    public URI getCurrentProject() {
-        if(!isInitialized())
-            throw new IllegalStateException(
-                "Index has not been set-up, use index-setup(|language, project-paths) to set up the index before use.");
-
-        return currentProject.get();
-    }
-
     public long startTransaction(ITermFactory factory, IOAgent agent) {
         long rev = revisionProvider.getAndIncrement();
         IIndex currentIndex = current.get();
@@ -118,31 +107,31 @@
         return current.get() != null;
     }
 
+    private void ensureInitialized() {
+        if(!isInitialized())
+            throw new IllegalStateException(
+                "Index has not been set-up, use index-setup(|language, project-paths) to set up the index before use.");
+    }
+
     public static boolean isKnownIndexingLanguage(String language) {
         synchronized(getSyncRoot()) {
-            return asyncIndexCache.containsKey(language);
+            return indexCache.containsKey(language);
         }
     }
 
-    public void loadIndex(String language, URI project, ITermFactory factory, IOAgent agent) {
+    public void loadIndex(URI project, ITermFactory factory, IOAgent agent) {
         synchronized(getSyncRoot()) {
-            Map<URI, WeakReference<IIndex>> indicesByProject = asyncIndexCache.get(language);
-            if(indicesByProject == null) {
-                indicesByProject = new HashMap<URI, WeakReference<IIndex>>();
-                asyncIndexCache.put(language, indicesByProject);
-            }
-            WeakReference<IIndex> indexRef = indicesByProject.get(project);
+            WeakReference<IIndex> indexRef = indexCache.get(project);
             IIndex index = indexRef == null ? null : indexRef.get();
             if(index == null) {
-                index = tryReadFromFile(getIndexFile(project, language), factory, agent);
+                index = tryReadFromFile(getIndexFile(project), factory, agent);
             }
             if(index == null) {
                 index = new Index();
                 NotificationCenter.notifyNewProject(project);
             }
-            indicesByProject.put(project, new WeakReference<IIndex>(index));
+            indexCache.put(project, new WeakReference<IIndex>(index));
             current.set(index);
-            currentLanguage.set(language);
             currentProject.set(project);
         }
     }
@@ -159,7 +148,7 @@
     }
 
     public void storeCurrent(ITermFactory factory) throws IOException {
-        File file = getIndexFile(currentProject.get(), currentLanguage.get());
+        File file = getIndexFile(currentProject.get());
         IStrategoTerm stored = indexFactory.toTerm(getCurrent(), factory, true);
         Writer writer = new BufferedWriter(new FileWriter(file));
         try {
@@ -169,9 +158,9 @@
         }
     }
 
-    private File getIndexFile(URI project, String language) {
+    private File getIndexFile(URI project) {
         File container = new File(new File(project), ".cache");
         container.mkdirs();
-        return new File(container, language + ".idx");
+        return new File(container, "index.idx");
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_setup.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_setup.java	Sun Dec 16 14:57:33 2012	(r25794)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/LANG_index_setup.java	Mon Dec 17 12:24:35 2012	(r25795)
@@ -1,7 +1,5 @@
 package org.spoofax.interpreter.library.index;
 
-import static org.spoofax.interpreter.core.Tools.asJavaString;
-
 import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
@@ -9,7 +7,6 @@
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
@@ -27,7 +24,6 @@
 
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-        IStrategoString language = (IStrategoString) tvars[0];
         IStrategoList projectPaths = (IStrategoList) tvars[1];
         IStrategoTerm partitionTerm = tvars[2];
         if(projectPaths.size() != 1) {
@@ -36,7 +32,7 @@
         IOAgent agent = SSLLibrary.instance(env).getIOAgent();
         IndexPartitionDescriptor project = IndexPartitionDescriptor.fromTerm(agent, projectPaths.head());
         IndexPartitionDescriptor partition = IndexPartitionDescriptor.fromTerm(agent, partitionTerm);
-        index.loadIndex(asJavaString(language), project.getURI(), env.getFactory(), agent);
+        index.loadIndex(project.getURI(), env.getFactory(), agent);
         index.setCurrentPartition(partition);
         index.getCurrent().initialize(env.getFactory(), agent);
         return true;

From gabrielkonat at gmail.com  Mon Dec 17 13:45:30 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 17 Dec 2012 12:45:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25796 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests
Message-ID: <20121217124530.7D8132B8012@mx2.tudelft.nl>

Author: gkonat
Date: Mon Dec 17 12:45:30 2012
New Revision: 25796
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25796&sc=1

Log:
Put all languages in the same index.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Mon Dec 17 12:24:35 2012	(r25795)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/java/org/spoofax/interpreter/library/index/tests/IndexTest.java	Mon Dec 17 12:45:30 2012	(r25796)
@@ -1,7 +1,5 @@
 package org.spoofax.interpreter.library.index.tests;
 
-import static org.spoofax.interpreter.core.Tools.asJavaString;
-
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
@@ -54,7 +52,7 @@
 
         project = IndexPartitionDescriptor.fromTerm(agent, projectPath);
         indexManager = new IndexManager();
-        indexManager.loadIndex(asJavaString(language), project.getURI(), factory, agent);
+        indexManager.loadIndex(project.getURI(), factory, agent);
         index = indexManager.getCurrent();
         index.initialize(factory, agent);
         file = setupIndex(fileTerm);

From gabrielkonat at gmail.com  Mon Dec 17 14:14:30 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 17 Dec 2012 13:14:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25797 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index
Message-ID: <20121217131430.3AB8B2B800F@mx2.tudelft.nl>

Author: gkonat
Date: Mon Dec 17 13:14:29 2012
New Revision: 25797
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25797&sc=1

Log:
Do not require the first subterm of an entry to be a list.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Mon Dec 17 12:45:30 2012	(r25796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Mon Dec 17 13:14:29 2012	(r25797)
@@ -84,11 +84,11 @@
 
         IStrategoConstructor constructor = entry.getConstructor();
         IStrategoTerm type = factory.getEntryType(entry);
-        IStrategoList path = factory.getEntryPath(entry);
+        IStrategoTerm identifier = factory.getEntryIdentifier(entry);
         IStrategoTerm value = factory.getEntryValue(entry);
 
         IndexEntry newEntry =
-            factory.createEntry(constructor, path, type, value, partitionDescriptor);
+            factory.createEntry(constructor, identifier, type, value, partitionDescriptor);
 
         add(newEntry);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java	Mon Dec 17 12:45:30 2012	(r25796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntry.java	Mon Dec 17 13:14:29 2012	(r25797)
@@ -72,7 +72,7 @@
      * sure that origin info is not added to the term. (The latter would be bad since we cache in {@link #cachedTerm}.)
      */
     private IStrategoAppl forceImploderAttachment(IStrategoAppl term) {
-        ImploderAttachment attach = ImploderAttachment.get(key.getPath());
+        ImploderAttachment attach = ImploderAttachment.get(key.getIdentifier());
         if(attach != null) {
             ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(),
                 attach.getRightToken());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java	Mon Dec 17 12:45:30 2012	(r25796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java	Mon Dec 17 13:14:29 2012	(r25797)
@@ -1,10 +1,10 @@
 package org.spoofax.interpreter.library.index;
 
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
 import static org.spoofax.interpreter.core.Tools.isTermList;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
@@ -32,20 +32,20 @@
         return termFactory;
     }
 
-    public IndexURI createURI(IStrategoConstructor constructor, IStrategoList path, IStrategoTerm type) {
-        ImploderAttachment idAttachment = ImploderAttachment.getCompactPositionAttachment(path, true);
+    public IndexURI createURI(IStrategoConstructor constructor, IStrategoTerm identifier, IStrategoTerm type) {
+        ImploderAttachment idAttachment = ImploderAttachment.getCompactPositionAttachment(identifier, true);
         type = stripper.strip(type);
-        path.putAttachment(idAttachment);
-        return new IndexURI(constructor, path, type);
+        identifier.putAttachment(idAttachment);
+        return new IndexURI(constructor, identifier, type);
     }
 
     public IndexURI createURIFromTemplate(IStrategoAppl template) {
-        return createURI(template.getConstructor(), getEntryPath(template), getEntryType(template));
+        return createURI(template.getConstructor(), getEntryIdentifier(template), getEntryType(template));
     }
 
-    public IndexEntry createEntry(IStrategoConstructor constructor, IStrategoList path,
-        IStrategoTerm type, IStrategoTerm value, IndexPartitionDescriptor partition) {
-        return createEntry(value, createURI(constructor, path, type), partition);
+    public IndexEntry createEntry(IStrategoConstructor constructor, IStrategoTerm identifier, IStrategoTerm type,
+        IStrategoTerm value, IndexPartitionDescriptor partition) {
+        return createEntry(value, createURI(constructor, identifier, type), partition);
     }
 
     public IndexEntry createEntry(IStrategoTerm value, IndexURI key, IndexPartitionDescriptor partition) {
@@ -59,13 +59,21 @@
     }
 
     public static boolean isURI(IStrategoTerm term) {
-        return isTermList(term);
+        if(isTermList(term)) {
+            return true;
+        } else if(isTermAppl(term)) {
+            for(int i = 0; i < term.getSubtermCount(); ++i) {
+                if(isTermList(term.getSubterm(i)))
+                    return true;
+            }
+        }
+        return false;
     }
 
     public static boolean isDefData(IStrategoAppl term) {
         return isDefData(term.getConstructor());
     }
-    
+
     public static boolean isDefData(IStrategoConstructor constructor) {
         return constructor.equals(DEFDATA_CONSTRUCTOR);
     }
@@ -78,14 +86,14 @@
         }
     }
 
-    public IStrategoList getEntryPath(IStrategoAppl entry) {
+    public IStrategoTerm getEntryIdentifier(IStrategoAppl entry) {
         IStrategoTerm result = entry.getSubterm(0);
         if(isURI(result)) {
-            IStrategoList list = (IStrategoList) result;
-            return list;
+            return result;
         } else {
             throw new IllegalArgumentException("Illegal index entry: " + entry
-                + ". First subterm should be a list representing the key of the entry.");
+                + ". First subterm should be a list representing the key of the entry"
+                + ", or an application containing a list.");
         }
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Mon Dec 17 12:45:30 2012	(r25796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Mon Dec 17 13:14:29 2012	(r25797)
@@ -1,5 +1,8 @@
 package org.spoofax.interpreter.library.index;
 
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermList;
+
 import java.io.Serializable;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -10,16 +13,15 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
- * The key to used to map {@link IndexEntry}.
- * Consists of a constructor, namespace, path and optional type.
- *  
+ * The key to used to map {@link IndexEntry}. Consists of a constructor, namespace, path and optional type.
+ * 
  * @author Gabri?l Konat
  */
 public class IndexURI implements Serializable {
     private static final long serialVersionUID = 1619836759792533807L;
 
     private final IStrategoConstructor constructor;
-    private final IStrategoList path;
+    private final IStrategoTerm identifier;
     private final IStrategoTerm type;
 
     private transient IStrategoAppl cachedTerm;
@@ -27,20 +29,20 @@
     /**
      * Use {@link IndexEntryFactory#createURI}.
      */
-    protected IndexURI(IStrategoConstructor constructor, IStrategoList path, IStrategoTerm type) {
+    protected IndexURI(IStrategoConstructor constructor, IStrategoTerm identifier, IStrategoTerm type) {
         this.constructor = constructor;
-        this.path = path;
+        this.identifier = identifier;
         this.type = type;
 
-        assert constructor != null && path != null;
+        assert constructor != null && identifier != null;
     }
 
     public IStrategoConstructor getConstructor() {
         return constructor;
     }
 
-    public IStrategoList getPath() {
-        return path;
+    public IStrategoTerm getIdentifier() {
+        return identifier;
     }
 
     public IStrategoTerm getType() {
@@ -51,16 +53,36 @@
      * Returns a parent URI by taking the tail of the path. If the path has no tail, null is returned.
      */
     public IndexURI getParent(ITermFactory factory) {
+        // TODO: Maybe this should be performed by a user-defined strategy?
+        if(isTermList(identifier)) {
+            IStrategoList parentPath = getParentPath((IStrategoList) identifier, factory);
+            if(parentPath == null)
+                return null;
+            return new IndexURI(constructor, parentPath, type);
+        } else if(isTermAppl(identifier)) {
+            IStrategoAppl appl = (IStrategoAppl) identifier;
+            for(int i = 0; i < identifier.getSubtermCount(); ++i) {
+                if(isTermList(identifier.getSubterm(i))) {
+                    IStrategoList parentPath = getParentPath((IStrategoList) identifier.getSubterm(i), factory);
+                    IStrategoTerm[] subterms = identifier.getAllSubterms();
+                    subterms[i] = parentPath;
+                    return new IndexURI(constructor, factory.makeAppl(appl.getConstructor(), subterms), type);
+                }
+            }
+        }
+        return null;
+    }
+    
+    private IStrategoList getParentPath(IStrategoList path, ITermFactory factory) {
         if(path.size() > 1) {
             IStrategoTerm head = path.head();
             if(head.getTermType() == IStrategoTerm.APPL && head.getSubtermCount() == 0)
                 // Retain the head of the path if it is a namespace (APPL with 0 subterms).
-                return new IndexURI(constructor, factory.makeListCons(head, path.tail().tail()), type);
+                return factory.makeListCons(head, path.tail().tail());
             else
-                return new IndexURI(constructor, path.tail(), type);
+                return path.tail();
         }
-        else
-            return null;
+        return null;
     }
 
     /**
@@ -69,16 +91,16 @@
     public IStrategoAppl toTerm(ITermFactory factory, IStrategoTerm value) {
         if(cachedTerm != null)
             return cachedTerm;
-        
+
         if(IndexEntryFactory.isDefData(constructor)) {
-            cachedTerm = factory.makeAppl(constructor, path, type, value);
+            cachedTerm = factory.makeAppl(constructor, identifier, type, value);
         } else if(constructor.getArity() == 2) {
-            cachedTerm = factory.makeAppl(constructor, path, value);
+            cachedTerm = factory.makeAppl(constructor, identifier, value);
         } else if(constructor.getArity() == 1) {
-            cachedTerm = factory.makeAppl(constructor, path);
+            cachedTerm = factory.makeAppl(constructor, identifier);
         } else {
             IStrategoTerm[] terms = new IStrategoTerm[constructor.getArity()];
-            terms[0] = path;
+            terms[0] = identifier;
             IStrategoTuple values = (IStrategoTuple) value;
             System.arraycopy(values.getAllSubterms(), 0, terms, 1, values.getSubtermCount());
             cachedTerm = factory.makeAppl(constructor, terms);
@@ -89,7 +111,7 @@
 
     @Override
     public String toString() {
-        String result = constructor.getName() + "(" + path + ")";
+        String result = constructor.getName() + "(" + identifier + ")";
         if(type != null)
             result += "," + type;
         return result;
@@ -100,7 +122,7 @@
         final int prime = 31;
         int result = 1;
         result = prime * result + ((constructor == null) ? 0 : constructor.hashCode());
-        result = prime * result + ((path == null) ? 0 : path.hashCode());
+        result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());
         result = prime * result + ((type == null) ? 0 : type.hashCode());
         return result;
     }
@@ -122,10 +144,10 @@
         } else if(!constructor.equals(other.constructor))
             return false;
 
-        if(path == null) {
-            if(other.path != null)
+        if(identifier == null) {
+            if(other.identifier != null)
                 return false;
-        } else if(!path.equals(other.path))
+        } else if(!identifier.equals(other.identifier))
             return false;
 
         if(type == null) {

From gabrielkonat at gmail.com  Mon Dec 17 15:11:30 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Mon, 17 Dec 2012 14:11:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25798 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index
Message-ID: <20121217141130.1DD22CC12E@mx4.tudelft.nl>

Author: gkonat
Date: Mon Dec 17 14:11:29 2012
New Revision: 25798
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25798&sc=1

Log:
No requirements on URI term, but parent relations will not be stored for non-list terms and terms that do not contain a list.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Mon Dec 17 13:14:29 2012	(r25797)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/Index.java	Mon Dec 17 14:11:29 2012	(r25798)
@@ -121,12 +121,16 @@
 
     public void remove(IStrategoAppl template, IndexPartitionDescriptor partitionDescriptor) {
         IndexURI uri = factory.createURIFromTemplate(template);
+        IndexURI parentURI = uri.getParent(termFactory);
         Multimap<IndexPartitionDescriptor, IndexEntry> entryValues = entries.get(uri);
-        Multimap<IndexPartitionDescriptor, IndexEntry> childValues = childs.get(uri.getParent(termFactory));
+        Multimap<IndexPartitionDescriptor, IndexEntry> childValues = null;
+        if(parentURI != null)
+            childValues = childs.get(uri.getParent(termFactory));
         Collection<IndexEntry> removedEntries = entryValues.removeAll(partitionDescriptor);
 
         for(IndexEntry entry : removedEntries) {
-            childValues.remove(partitionDescriptor, entry);
+            if(parentURI != null)
+                childValues.remove(partitionDescriptor, entry);
             entriesPerPartitionDescriptor.remove(partitionDescriptor, entry);
             entriesPerFile.remove(partitionDescriptor.getURI(), entry);
             entriesPerPartition.remove(partitionDescriptor.getPartition(), entry);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java	Mon Dec 17 13:14:29 2012	(r25797)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexEntryFactory.java	Mon Dec 17 14:11:29 2012	(r25798)
@@ -1,8 +1,5 @@
 package org.spoofax.interpreter.library.index;
 
-import static org.spoofax.interpreter.core.Tools.isTermAppl;
-import static org.spoofax.interpreter.core.Tools.isTermList;
-
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -58,18 +55,6 @@
         return new IndexEntry(key, value, partition);
     }
 
-    public static boolean isURI(IStrategoTerm term) {
-        if(isTermList(term)) {
-            return true;
-        } else if(isTermAppl(term)) {
-            for(int i = 0; i < term.getSubtermCount(); ++i) {
-                if(isTermList(term.getSubterm(i)))
-                    return true;
-            }
-        }
-        return false;
-    }
-
     public static boolean isDefData(IStrategoAppl term) {
         return isDefData(term.getConstructor());
     }
@@ -87,13 +72,11 @@
     }
 
     public IStrategoTerm getEntryIdentifier(IStrategoAppl entry) {
-        IStrategoTerm result = entry.getSubterm(0);
-        if(isURI(result)) {
-            return result;
+        if(entry.getSubtermCount() > 0) {
+            return entry.getSubterm(0);
         } else {
             throw new IllegalArgumentException("Illegal index entry: " + entry
-                + ". First subterm should be a list representing the key of the entry"
-                + ", or an application containing a list.");
+                + ". Entry should contain at least one subterm that identifiers the entry.");
         }
     }
 

From gabrielkonat at gmail.com  Tue Dec 18 08:23:17 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Tue, 18 Dec 2012 07:23:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25799 - in
	spoofax-contrib/index-examples: entity-with-aspects
	entity-with-aspects/editor entity-with-aspects/lib
	index-libraries/lib
Message-ID: <20121218072317.29520108C01B@mx3.tudelft.nl>

Author: gkonat
Date: Tue Dec 18 07:23:15 2012
New Revision: 25799
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25799&sc=1

Log:
Changed index libraries to work with multiple languages.

Modified:
   spoofax-contrib/index-examples/entity-with-aspects/build.generated.xml
   spoofax-contrib/index-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv
   spoofax-contrib/index-examples/entity-with-aspects/lib/nbl-library.generated.str
   spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str
   spoofax-contrib/index-examples/index-libraries/lib/analysis-library.str
   spoofax-contrib/index-examples/index-libraries/lib/index-library.str
   spoofax-contrib/index-examples/index-libraries/lib/nbl-library.str

Modified: spoofax-contrib/index-examples/entity-with-aspects/build.generated.xml
==============================================================================
--- spoofax-contrib/index-examples/entity-with-aspects/build.generated.xml	Mon Dec 17 14:11:29 2012	(r25798)
+++ spoofax-contrib/index-examples/entity-with-aspects/build.generated.xml	Tue Dec 18 07:23:15 2012	(r25799)
@@ -3,8 +3,36 @@
 <project name="build.generated">
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
-        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.ctree" depends="
+			check-classpath,
+			init,
+			sdf2table,
+			meta-sdf2table,
+			ppgen,
+			pppack,
+			sdf2imp.eclipse,
+			sdf2imp.standalone,
+			sdf2parenthesize,
+			stratego.aster,
+			java.jar,
+			stratego.ctree,
+			refresh,
+			sdf2imp.eclipse.load"/>
+        <target name="spoofaximp.default.jar" depends="
+			check-classpath,
+			init,
+			sdf2table,
+			meta-sdf2table,
+			ppgen,
+			pppack,
+			sdf2imp.eclipse,
+			sdf2imp.standalone,
+			sdf2parenthesize,
+			stratego.aster,
+			java.jar,
+			stratego.jar.helper,
+			refresh,
+			sdf2imp.eclipse.load"/>
     
         <!-- Initialization -->
         <available file="${src-gen}/entitywithaspects/strategies/Main.java" property="java.jar.enabled"/>
@@ -54,6 +82,12 @@
             </java>
         </target>
         
+        <target name="sdf2imp.eclipse.load" if="eclipse.running">
+		<java classname="org.strategoxt.imp.metatooling.loading.AntDescriptorLoader" failonerror="true">
+			<arg value="${include}/${esvmodule}.packed.esv"/>
+		</java>
+	</target>
+        
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
             <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
@@ -629,12 +663,44 @@
             </apply>
         </target>
         
-        <target name="clean" description="Selective clean up">
-            <delete dir="${build}"/>
-            <delete file="${include}/${sdfmodule}.def"/>
-            <delete file="${include}/${strmodule}.rtree"/>
-            <delete file="${include}/${strmodule}.ctree"/>
-            <delete file="${include}/${strmodule}.jar"/>
-            <delete dir="${src-gen}/trans"/>
-        </target>
+	<target name="clean" description="Clean project">
+		<delete dir="${build}"/>
+		<delete dir=".cache"/>
+		<delete file="${include}/${sdfmodule}.def"/>
+		<delete file="${include}/${sdfmodule}-parenthesize.str"/>
+		<delete file="${include}/${sdfmodule}-Permissive.def"/>
+		<delete file="${include}/${sdfmodule}.generated.pp.af"/>
+		<delete file="${include}/${sdfmodule}.packed.esv"/>
+		<delete file="${include}/${sdfmodule}.pp.af"/>
+		<delete file="${include}/${sdfmodule}.rtg"/>
+		<delete file="${include}/${sdfmodule}.str"/>
+		<delete file="${include}/${sdfmodule}.tbl"/>
+		<delete file="${include}/${strmodule}.rtree"/>
+		<delete file="${include}/${strmodule}.ctree"/>
+		<delete file="${include}/${strmodule}.ctree.dep"/>
+		<delete file="${include}/${strmodule}.jar"/>
+		<delete>
+			<fileset dir="editor" includes="*.generated.esv"/>
+		</delete>
+		<delete dir="${src-gen}/trans"/>
+		<delete file="editor/${sdfmodule}.generated.esv"/>
+		<delete file="${syntax}/${sdfmodule}.generated.esv"/>
+		<delete file="${syntax}/${sdfmodule}.generated.pp"/>
+		<delete file="${include}/${metasdfmodule}-Permissive.def"/>
+		<delete file="${include}/${metasdfmodule}.def"/>
+		<delete file="${include}/${metasdfmodule}.tbl"/>
+		<delete file=".settings/org.eclipse.jdt.core.prefs"/>
+		<delete dir="utils"/>
+		<delete>
+			<fileset dir="lib-refactoring" includes="*.generated.str"/>
+			<fileset dir="${lib}" includes="*.generated.str"/>
+		</delete>
+		<antcall target="refresh-cleaned"/>
+	</target>
+	
+	<target name="refresh-cleaned" if="eclipse.running">
+        <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+        <eclipse.refreshLocal resource="${projectdir}" depth="infinite"/>
+    </target>
+	
     </project>
\ No newline at end of file

Modified: spoofax-contrib/index-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv
==============================================================================
--- spoofax-contrib/index-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv	Mon Dec 17 14:11:29 2012	(r25798)
+++ spoofax-contrib/index-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv	Tue Dec 18 07:23:15 2012	(r25799)
@@ -18,7 +18,7 @@
   builder  : "Clear index" = debug-index-clear (meta) (source)
   builder  : "Reload index" = debug-index-reload (meta) (source)
   
-  //builder  : "Generate test files" = generate-test-files (meta)
-  //builder  : "Create quoted libraries" = create-quoted-libraries (meta)
+  builder  : "Generate test files" = generate-test-files (meta)
+  builder  : "Create quoted libraries" = create-quoted-libraries (meta)
 
   on save: editor-save
\ No newline at end of file

Modified: spoofax-contrib/index-examples/entity-with-aspects/lib/nbl-library.generated.str
==============================================================================
--- spoofax-contrib/index-examples/entity-with-aspects/lib/nbl-library.generated.str	Mon Dec 17 14:11:29 2012	(r25798)
+++ spoofax-contrib/index-examples/entity-with-aspects/lib/nbl-library.generated.str	Tue Dec 18 07:23:15 2012	(r25799)
@@ -82,16 +82,16 @@
       <gt> (<length> defs, 1)
       
 rules // Type dependant lookup
-	
-	/**
+  
+  /**
    * Given an annotated AST node and a type, resolves it and checks if type equals given type, returning its definition.
    * Uses precise matching for names.
    *
-   * @param type	Only definitions with this type are returned.
+   * @param type  Only definitions with this type are returned.
    * @type "name"{uri} -> ?Def(uri')
    */
   index-lookup-typed(|type):
-    x{[namespace|path]} -> <index-lookup-internal(index-compare-nametype-equal(|name, type)|ns, path, name)> x
+    x{[namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-nametype-equal(|name, type)|ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -102,11 +102,11 @@
    * Uses substring matching for names.
    *
    * @param prefix    Only definitions with a name that starts with this string are returned.
-   * @param type			Only definitions with this type are returned.
+   * @param type      Only definitions with this type are returned.
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-typed(|prefix, type):
-    x{[namespace|path]} -> <index-lookup-all-internal(index-compare-nametype-substring(|prefix, type)|ns, path, prefix)> x
+    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-nametype-substring(|prefix, type)|ns, path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace
 
@@ -136,9 +136,9 @@
   
   /** @internal */
   nbl-get-type:
-  	uri -> <index-get-data(|Type())> Def(uri)
+    uri -> <index-get-data(|Type())> Def(uri)
   
   // TODO: Allow user defined type equality.
-  /** @internal */	
+  /** @internal */  
   nbl-type-eq(|type) = 
-  	<eq> (<id>, type)
+    <eq> (<id>, type)

Modified: spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str
==============================================================================
--- spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str	Mon Dec 17 14:11:29 2012	(r25798)
+++ spoofax-contrib/index-examples/index-libraries/lib/analysis-library-internal.str	Tue Dec 18 07:23:15 2012	(r25799)
@@ -7,22 +7,27 @@
   lib/analysis-library
   lib/index-library
   
-signature constructors
+signature 
+
+  constructors // Analysis
+    
+	  Results         : AST * List(Def) * List(Use) * List(DefData) * List(Def) * List(Def) * List(File) -> Results
+	  ParallelResults : AST * AST * List(Error) * List(Warning) * List(Note) * List(File) -> ParallelResults
+	  INTERNAL_ERROR  : Error
   
-  // Analysis
-  Results         : AST * List(Def) * List(Use) * List(DefData) * List(Def) * List(Def) * List(File) -> Results
-  ParallelResults : AST * AST * List(Error) * List(Warning) * List(Note) * List(File) -> ParallelResults
-  
-  // Namespaces
-  Diff            : Namespace
-  ASTDiff         : Namespace
-  AST             : Namespace
+  constructors // Namespaces
+    
+	  Diff            : Namespace
+	  ASTDiff         : Namespace
+	  AST             : Namespace
   
-  // Data
-  AST             : List(UriPart) * AST -> AST
+  constructors // Data
+    
+    AST             : List(UriPart) * AST -> AST
   
-  // Annotations 
-  Scope: Term -> Anno
+  constructors // Annotations
+     
+    Scope           : Term -> Anno
   
 rules // Analysis traversals
   
@@ -76,8 +81,8 @@
         (added, removed) := ([], []);
         filesToAnalyze := []
       end
-    //with
-    //  <list-loop(analyze-top-store-ast(|full-path))> astFilePairs4
+    with
+      <list-loop(analyze-top-store-ast(|full-path))> astFilePairs4
       
   /**
    * Add URI annotations to each definition and unresolved URI annotations to each use site.
@@ -178,7 +183,7 @@
   		 
   /** @internal */
   analyze-defs(|paths, defs, head-scope, head-scope-ns):
-    ast{Scope([namespace, name | path])} -> ast'
+    ast{Scope([_, namespace, name | path])} -> ast'
     where
       paths' := <update-index-paths(|[(namespace, path)])> paths ;
       ast'   := <rm-annotations; analyze-defs(|paths', defs, Anon(), Anon())> ast
@@ -276,13 +281,13 @@
     with
       analyzed     := <all(analyze-uses)> ast;
       (ast', uses) := <unzip-analyzed> analyzed;
-      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
-        if Def(def-uri) := <index-lookup> ast' then
+      if !ast' => _{unresolved@[language, Unresolved(namespace), x | path]} then
+        if Def(def-uri) := <index-lookup> <debug(!"looking up: ")> ast' then
           ast'' := ast{def-uri};
           uses' := [Use(def-uri) | uses]
         else
           ast'' := ast';
-          uses' := [BadUse([namespace, x]) | uses]
+          uses' := [BadUse([language, namespace, x]) | uses]
         end
       else
         ast'' := ast';
@@ -414,6 +419,27 @@
     (elem, subfileName) -> (qualifier, subfileName)
     with
       qualifier := <index-create-qualifier(|node)> elem
+      
+  /**
+   * Merges a top level definition back into an AST using splitter rules.
+   *
+   * @param toplevel  The top level definition to merge back into the given AST.
+   * @type ast -> ast'
+   */
+  index-merge-ast(|toplevel):
+    term -> merged
+    with
+      if <is-list> term then
+        [first-ast|_] := term;
+        merged        := <index-merge-ast(|toplevel)> first-ast
+      else
+        if <index-is-qualifier> term then
+          [elem|_]    := <index-qualifier-subelements> term;
+          merged      := <index-create-qualifier(|term)> <index-merge-ast(|toplevel)> elem
+        else
+          merged      := toplevel
+        end
+      end
 
 /** @internal */
 rules // Diffs
@@ -496,10 +522,11 @@
    *
    * @internal
    */
-  index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
+  index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|language, namespace, path, prefix):
     x -> definition
     where
-      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
+      <debug(!"index-lookup-internal: ")> (language, namespace, path, prefix);
+      defs := <debug(!"defs: ")> <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|language, namespace, path, prefix)> x;
       
       if StopLookup() := defs then
         fail
@@ -507,12 +534,13 @@
       
       if not(definition := <Hd> defs) then
         [_|path']  := path;
-        definition := <index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path', prefix)> x
+        <debug(!"recurse on: ")> path'; 
+        definition := <index-lookup-internal(adjust-import, adjust-lookup, get-defs, name-compare|language, namespace, path', prefix)> x
       end
       
   /** @internal */
-  index-lookup-internal(get-defs, name-compare|namespace, path, prefix) = 
-    index-lookup-internal(id, id, get-defs, name-compare|namespace, path, prefix)
+  index-lookup-internal(get-defs, name-compare|language, namespace, path, prefix) = 
+    index-lookup-internal(id, id, get-defs, name-compare|language, namespace, path, prefix)
 
   /**
    * Given a term x, namespace n, path s and prefix p, looks for definitions in the scope of s 
@@ -525,21 +553,21 @@
    *
    * @internal
    */
-  index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
+  index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|language, namespace, path, prefix):
     x -> defs'
     where
-      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
+      defs := <index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|language, namespace, path, prefix)> x;
       
       if [_|path'] := path then
-        defs2 := <index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path', prefix)> x;
+        defs2 := <index-lookup-all-internal(adjust-import, adjust-lookup, get-defs, name-compare|language, namespace, path', prefix)> x;
         defs' := <conc> (defs, defs2)
       else
         defs' := defs
       end
 
   /** @internal */
-  index-lookup-all-internal(get-defs, name-compare|namespace, path, prefix) = 
-    index-lookup-all-internal(id, id, get-defs, name-compare|namespace, path, prefix)
+  index-lookup-all-internal(get-defs, name-compare|language, namespace, path, prefix) = 
+    index-lookup-all-internal(id, id, get-defs, name-compare|language, namespace, path, prefix)
       
   /**
    * Given a term x, namespace n, path s and prefix p, looks for a definition in the 
@@ -552,26 +580,27 @@
    *
    * @internal
    */
-  index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|namespace, path, prefix):
+  index-lookup-all-scoped-internal(adjust-import, adjust-lookup, get-defs, name-compare|language, namespace, path, prefix):
     x -> defs
     with
       adjust-lookup;
-      adjusted := <index-do-adjust-lookup(|namespace, path, x, prefix)> x;
+      adjusted := <index-do-adjust-lookup(|language, namespace, path, x, prefix)> x;
       defs     := <index-get-adjust-lookup-results(adjust-import, get-defs, name-compare|adjusted, prefix)> x
-    <+
+    /*<+
       adjust-import;
-      adjusted := <index-do-adjust-import(|namespace, path)> x;
-      defs     := <index-get-adjust-import-results(adjust-lookup, get-defs, name-compare|adjusted, prefix)> x
+      adjusted := <index-do-adjust-import(|language, namespace, path)> x;
+      defs     := <index-get-adjust-import-results(adjust-lookup, get-defs, name-compare|adjusted, prefix)> x*/
     <+
-      defs     := <get-defs(name-compare|namespace, prefix)> [namespace | path]
+      <debug(!"language: ")> language;
+      defs     := <debug(!"found: ")> <get-defs(name-compare|language, namespace, prefix)> <debug(!"searching for: ")> [language, namespace | path]
       
   /** @internal */
-  index-lookup-all-scoped-internal(get-defs, name-compare|namespace, path, prefix) = 
-    index-lookup-all-scoped-internal(id, id, get-defs, name-compare|namespace, path, prefix)
+  index-lookup-all-scoped-internal(get-defs, name-compare|language, namespace, path, prefix) = 
+    index-lookup-all-scoped-internal(id, id, get-defs, name-compare|language, namespace, path, prefix)
   
   /** @internal */
-  index-do-adjust-import(|namespace, path) =
-    adjust-index-import(|namespace, path)
+  index-do-adjust-import(|language, namespace, path) =
+    adjust-index-import(|language, namespace, path)
     
   /** @internal */
   index-get-adjust-import-results(adjust-lookup, get-defs, name-compare|adjusted, prefix):
@@ -580,7 +609,7 @@
       defs := 
         <mapconcat(
              index-adjust-import-recurse(adjust-lookup, get-defs, name-compare|x, prefix)
-          <+ fatal-err(|"Unexpected result from adjust-index-import, should be a list of [namespace | path].")
+          <+ fatal-err(|"Unexpected result from adjust-index-import, should be a list of [language, namespace | path].")
         )> adjusted;
         if not(<elem> (StopLookup(), defs)) then
         	defs' := <filter(name-compare)> defs
@@ -590,9 +619,9 @@
       	
   /** @internal */
   index-adjust-import-recurse(adjust-lookup, get-defs, name-compare|x, prefix):
-  	[namespace|path] -> results'
+  	[language, namespace|path] -> results'
   	with
-  		results := <index-lookup-all-scoped-internal(fail, adjust-lookup, get-defs, name-compare|namespace, path, prefix)> x;
+  		results := <index-lookup-all-scoped-internal(fail, adjust-lookup, get-defs, name-compare|language, namespace, path, prefix)> x;
   		if not(<is-list> results) then
   			results' := [results]
   		else
@@ -600,7 +629,7 @@
 			end
         
   /** @internal */
-  index-do-adjust-lookup(|namespace, path, use, prefix) =
+  index-do-adjust-lookup(|language, namespace, path, use, prefix) =
     repeat-until(
       prim("SSL_EXT_get_parent", <id>)
     , adjust-index-lookup(origin-equal(|use)|namespace, path, prefix) 
@@ -616,7 +645,7 @@
         defs := 
           <mapconcat(
                \d at Def(p) -> [d]\
-            <+ \[namespace'|path'] -> <index-lookup-all-scoped-internal(adjust-import, fail, get-defs, name-compare|namespace', path', prefix)> x\
+            <+ \[namespace'|path'] -> <index-lookup-all-scoped-internal(adjust-import, fail, get-defs, name-compare|<language>#([]), namespace', path', prefix)> x\
             <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a list of Def(uri) or [namespace | path], or StopLookup() to stop the lookup.")
           )> adjusted;
           defs' := <filter(name-compare)> defs
@@ -629,15 +658,15 @@
    * 
    * @internal 
    */   
-  index-get-defs(name-compare|namespace, name):
-    [ns|path] -> <index-get-all> Def([ns, name|path])
+  index-get-defs(name-compare|language, namespace, name):
+    [lang, ns|path] -> <index-get-all> <debug(!"index-get-defs: ")> Def([lang, ns, name|path])
   
   /**
    * Gets all definitions from the index with given prefix, namespace, path and name-comparison strategy.
    * 
    * @internal 
    */   
-  index-get-defs-prefix(name-compare|namespace, prefix) = 
+  index-get-defs-prefix(name-compare|language, namespace, prefix) = 
     index-get-children(\uri -> Def(uri)\, name-compare|namespace, prefix)
       
 rules // Name comparisons
@@ -692,15 +721,41 @@
     
   /** @internal */  
   index-uri-impl:
-    x{[namespace | path]} -> [<index-namespace-unwrap> namespace | path]
+    _{[language, namespace | path]} -> [language, <index-namespace-unwrap> namespace | path]
  
-  /**
-   * TODO: Should second part of ReadWildcard be included in the URI, between namespace and path?
-   * 
-   * @internal 
-   */
+  /** @internal */ 
   index-uri-impl:
     ReadWildcard(uri, _) -> uri
+    
+  /** @internal */
+  index-uri-impl:
+    DefData(uri, _, _) -> uri
+
+
+  /** @internal */
+  index-update-uri-impl(s):
+    Def(uri) -> Def(<s> uri)
+    
+  /** @internal */  
+  index-update-uri-impl(s):
+    Use(uri) -> Use(<s> uri)
+    
+  /** @internal */  
+  index-update-uri-impl(s):
+    Read(uri) -> Read(<s> uri)
+    
+  /** @internal */  
+  index-update-uri-impl(s):
+    x{[language, namespace | path]} -> x{<s> [language, <index-namespace-unwrap> namespace | path]}
+ 
+  /** @internal */ 
+  index-update-uri-impl(s):
+    ReadWildcard(uri, x1) -> ReadWildcard(<s> uri, x1)
+    
+  /** @internal */
+  index-update-uri-impl(s):
+    DefData(uri, x1, x2) -> DefData(<s> uri, x1, x2)
+
 
   /** @internal */
   index-value-impl:
@@ -718,6 +773,10 @@
   index-value-impl:
     ReadWildcard(_, value) -> value
     
+ /** @internal */
+  index-value-impl:
+    DefData(_, _, value) -> value
+    
 rules // Internal helpers
 
   /**
@@ -759,16 +818,16 @@
     where <is-substring(!prefix)> name
   
   /** @internal */  
-  store-wildcard-read(|namespace, path, prefix):
+  store-wildcard-read(|language, namespace, path, prefix):
     children -> <id>
     with
       if set := <Index-ReadSet> then
         if 1 := <length> children then
           // HACK: This solves the problem of ReadWildcards making too many files re-analyze, but this should
           // be handled in the index primitives instead.
-          <iset-add(|Read([namespace, prefix|path]))> set
+          <iset-add(|Read([language, namespace, prefix|path]))> set
         else
-          <iset-add(|ReadWildcard([namespace|path], prefix))> set
+          <iset-add(|ReadWildcard([language, namespace|path], prefix))> set
         end
       end
   
@@ -804,11 +863,19 @@
   index-key-unwrap = 
     \key{uri} -> key{<index-uri-unwrap> uri}\ <+ id
     
+  /** @internal */
+  index-namespace-unwrap =
+    \Unresolved(n) -> n\ <+ id
+    
+  /** @internal */
+  index-uri-unwrap =
+    \[ns|xs] -> [<index-namespace-unwrap> ns|xs]\ <+ id
+    
 rules // Interface for generated code
  
   /** @internal */
   nam-get-def(|paths, namespace):
-    part* -> Def([namespace, part* | <lookup-index-path> (namespace, paths)])
+    part* -> Def([<language>#([]), namespace, part* | <lookup-index-path> (namespace, paths)])
   
   /** @internal */ 
   nam-annotate-def(|path):
@@ -818,11 +885,11 @@
   
   /** @internal */ 
   nam-annotate-use(|paths, namespace):
-    t -> t{[Unresolved(namespace), t | <lookup-index-path> (namespace, paths)]}
+    t -> t{[<language>#([]), Unresolved(namespace), t | <lookup-index-path> (namespace, paths)]}
   
   /** @internal */ 
   nam-annotate-use(|paths, namespace, namespace2, name):
-  	t -> t{[Unresolved(namespace), t | <lookup-index-path> (namespace, paths)]}
+  	t -> t{[<language>#([]), Unresolved(namespace), t | <lookup-index-path> (namespace, paths)]}
   	
   /** @internal */ 
   nam-annotate-scope(|path):

Modified: spoofax-contrib/index-examples/index-libraries/lib/analysis-library.str
==============================================================================
--- spoofax-contrib/index-examples/index-libraries/lib/analysis-library.str	Mon Dec 17 14:11:29 2012	(r25798)
+++ spoofax-contrib/index-examples/index-libraries/lib/analysis-library.str	Tue Dec 18 07:23:15 2012	(r25799)
@@ -1,28 +1,41 @@
 module lib/analysis-library
  
 imports
+	
   libstratego-lib
   libstratego-parallel
   lib/editor-common.generated
   lib/analysis-library-internal
   lib/index-library
  
-signature constructors
- 
-  // Analyze constructors
-  Editor      : AnalysisPhase
-  Compile     : AnalysisPhase
- 
-  // Index elements
-  Def          : List(UriPart) -> Summary
-  Use          : List(UriPart) -> Summary
-  BadUse       : List(UriPart) -> Summary
-  Read         : List(UriPart) -> Summary
-  ReadWildcard : List(UriPart) * String -> Summary
-  Diff         : List(UriPart) * List(Summary) -> Summary
+signature 
+
+  constructors // URI
+    
+    Namespace     : UriPart
+    Unresolved    : Namespace -> UriPart
+    String        : UriPart
+    Anon          : UriPart
+    Anon          : String    -> UriPart
+  
+  constructors // Index entries
+    
+	  Def          : List(UriPart)                 -> Entry
+	  Use          : List(UriPart)                 -> Entry
+	  BadUse       : List(UriPart)                 -> Entry
+	  Read         : List(UriPart)                 -> Entry
+	  ReadWildcard : List(UriPart) * Prefix        -> Entry
+	  DefData      : List(UriPart) * Type * Value  -> Entry
+	  Diff         : List(UriPart) * List(Entry)   -> Entry
+  
+  constructors // Adjust lookup actions
   
-  // Adjust lookup actions
-  StopLookup   : LookupAction
+    StopLookup   : LookupAction
+  
+  constructors // Adjust lookup actions
+    
+	  Editor       : AnalysisPhase
+	  Compile      : AnalysisPhase
   
 rules // Index analysis extension points
  
@@ -73,7 +86,7 @@
   /**
    * Extension point.
    */
-  adjust-index-import(|namespace, path) = fail
+  adjust-index-import(|language, namespace, path) = fail
   
   /** 
    * Extension point. Override this rule to store data about definitions in the index. Should call <store-results> on 
@@ -192,7 +205,7 @@
         ast' := <Hd> asts // Always returns a list of 1 AST if there is no splitter, so take the head.
       end
   
-rules // Parallel analysis
+rules // Scheduling analyses
   
   index-parallel-analyze-files(analyze) = index-analyze-files(index-parallel-analyze(analyze))
   index-sequential-analyze-files(analyze) = index-analyze-files(index-sequential-analyze(analyze))
@@ -218,29 +231,26 @@
       internal-analyze;
       filter(not(?ParallelResults((), (), _, _, _, _) <+ ?ParallelResults((), [()], _, _, _, _)); index-set-markers)
       
-rules // Splitter
+rules // Index management
   
-  /**
-   * Merges a top level definition back into an AST using splitter rules.
-   *
-   * @param toplevel  The top level definition to merge back into the given AST.
-   * @type ast -> ast'
-   */
-  index-merge-ast(|toplevel):
-    term -> merged
+  /*index-prepend-current-language:
+    uri -> [language|uri]
     with
-      if <is-list> term then
-        [first-ast|_] := term;
-        merged        := <index-merge-ast(|toplevel)> first-ast
-      else
-        if <index-is-qualifier> term then
-          [elem|_]    := <index-qualifier-subelements> term;
-          merged      := <index-create-qualifier(|term)> <index-merge-ast(|toplevel)> elem
-        else
-          merged      := toplevel
-        end
-      end
- 
+      language := <language>#([])
+  
+  index-update-uri-current-language = 
+  	index-update-uri(index-prepend-current-language)
+  
+  index-add(|file):
+    entry -> entry
+    with
+      prim("LANG_index_add", <index-update-uri-current-language> entry, file)
+
+  index-add-all(|file):
+  	entries -> entries
+  	with
+      list-loop(with(index-add(|file)))*/
+      
 rules // Query primitives
  
   /**
@@ -386,11 +396,11 @@
    * @type Def(uri) or "name"{uri} or uri@[namespace|path] -> List(Def(uri))
    */
   index-get-children(construct-template, name-compare|namespace):
-    <with([parent-ns | path] := <index-uri> | "Def, key or URI expected")> -> children
+    <with([language, parent-ns | path] := <index-uri> | "Def, key or URI expected")> -> children
     with
-      template  := <construct-template> [namespace | path];
+      template  := <construct-template> [language, namespace | path];
       children  := <prim("LANG_index_get_children", template)>;
-      <store-wildcard-read(|namespace, path, "")> children
+      <store-wildcard-read(|language, namespace, path, "")> children
 
   /**
    * Gets all Def children elements of an URI in a certain namespace where the name starts with a prefix.
@@ -420,12 +430,12 @@
    * @type Def(uri) or "name"{uri} or [namespace|path] -> List(Def(uri))
    */
   index-get-children(construct-template, name-compare|namespace, prefix):
-    <with([parent-ns | path] := <index-uri> | "Def, key or URI expected")> -> children'
+    <with([language, parent-ns | path] := <index-uri> | "Def, key or URI expected")> -> children'
     with
-      template  := <construct-template> [namespace | path];
+      template  := <construct-template> [language, namespace | path];
       children  := <prim("LANG_index_get_children", template)>;
       children' := <filter(name-compare)> children;
-      <store-wildcard-read(|namespace, path, prefix)> children'
+      <store-wildcard-read(|language, namespace, path, prefix)> children'
 
   /**
    * Gets a set of all files that have a reference to the given index entries.
@@ -468,7 +478,7 @@
    * @type "name"{uri} -> ?Def(uri')
    */
   index-lookup:
-    x{[namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-name-equal(|name)|ns, path, name)> x
+    x{[language, namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-name-equal(|name)|language, ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -480,7 +490,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all:
-    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs, index-compare-name-equal(|name)|ns, path, name)> x
+    x{[language, namespace|path]} -> <index-lookup-all-internal(index-get-defs, index-compare-name-equal(|name)|language, ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -494,7 +504,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all(|prefix):
-    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|ns, path, prefix)> x
+    x{[language, namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|language, ns, path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace
       
@@ -505,11 +515,11 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped:
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs, index-compare-name-equal(|name)|ns, parent-path, name)> x
+    x{[language, namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs, index-compare-name-equal(|name)|language, ns, parent-path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x;
-      (<?[_|<id>]> path <+ !path) => parent-path
+      (<?[_, _|<id>]> path <+ !path) => parent-path
       
   /**
    * Given an annotated AST node, resolves it in only the parent scope of the given node, returning all its definitions.
@@ -518,11 +528,11 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped-noimports:
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(fail, id, index-get-defs, index-compare-name-equal(|name)|ns, parent-path, name)> x
+    x{[language, namespace|path]} -> <index-lookup-all-scoped-internal(fail, id, index-get-defs, index-compare-name-equal(|name)|language, ns, parent-path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x;
-      (<?[_|<id>]> path <+ !path) => parent-path
+      (<?[_, _|<id>]> path <+ !path) => parent-path
   
   /**
    * Given an annotated AST node and a prefix, looks for all definitions with given prefix in only the parent scope of 
@@ -533,10 +543,10 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-scoped(|prefix):
-    x{[namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|ns, parent-path, prefix)> x
+    x{[language, namespace|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix)|language, ns, parent-path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace;
-      (<?[_|<id>]> path <+ !path) => parent-path
+      (<?[_, _|<id>]> path <+ !path) => parent-path
 
   /**
    * Given an annotated AST node and a namespace, returns all definitions inside given node with given namespace.
@@ -558,9 +568,26 @@
    * @type "name"{uri} -> List(Def(uri'))
    */    
   index-lookup-children(|namespace, prefix):
-    x{[_|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix, namespace)|namespace, path, prefix)> x
+    x{[language, _|path]} -> <index-lookup-all-scoped-internal(index-get-defs-prefix, index-compare-name-substring(|prefix, namespace)|language, namespace, path, prefix)> x
       
-rules // Index utilities
+rules // Index URI utilities
+  
+  index-uri-language =
+    ?[<id>|_]
+  
+  index-uri-language:
+    x{uri} -> <index-uri-language> uri
+  
+  /**
+   * Gets the namespace part of the given URI.
+   *
+   * Example:
+   *   <index-uri-path> [Entity(), "Bar", "Baz"] => Entity()
+   *
+   * @type uri@[namespace|path] -> namespace
+   */ 
+  index-uri-namespace =
+    ?[_, <id>|_]
   
   /**
    * Gets the namespace part of the URI for given key (term{uri} element).
@@ -571,7 +598,19 @@
    * @type "name"{uri@[namespace|path]} -> namespace
    */
   index-uri-namespace:
-    x{[namespace|path]} -> <index-namespace-unwrap> namespace
+    x{uri} -> <index-namespace-unwrap> <index-uri-namespace> uri
+
+  /**
+   * Gets the path part of the given URI.
+   *
+   * Example:
+   *   <index-uri-path> [Entity(), "Bar", "Baz"] => ["Bar", "Baz"]
+   *   <index-uri-path> [Entity()] => []
+   *
+   * @type uri@[namespace|path] -> path
+   */ 
+  index-uri-path =
+    ?[_, _|<id>]
 
   /**
    * Gets the path part of the URI for given key (term{uri} element). Resolves it if unresolved.
@@ -582,15 +621,28 @@
    * @type "name"{uri@[namespace|path]} -> path'
    */
   index-uri-path:
-    x{[namespace|path]} -> path'
+    x{uri} -> path'
     where
-      if !namespace => Unresolved(namespace) then
-        Def(path') := <index-lookup>
+    	path := <index-uri-path> uri;
+      if Unresolved(namespace) := <index-uri-namespace> uri then
+        Def(path') := <index-lookup> path
       else
         path' := path
       end
       
   /**
+   * Gets the name part of the given URI or fail if there is no name.
+   *
+   * Example:
+   *   <index-uri-name> [Entity(), "Bar", "Baz"] => "Bar"
+   *   <index-uri-name> [Entity()] => fail
+   *
+   * @type uri@[namespace|[name|restPath]] -> ?name
+   */ 
+  index-uri-name =
+    ?[_, _|[<id>|_]]
+      
+  /**
    * Gets the name part of the URI for given key (term{uri} element).
    *
    * Example:
@@ -599,17 +651,47 @@
    * @type "name"{uri@[namespace|[name|restPath]]} -> name
    */ 
   index-uri-name:
-    x{[_|[name|_]]} -> name
+    x{uri} -> <index-uri-name> uri
     
   /**
-   * Determines if a given AST node is a definition site, according to the syntax.
+   * Gets the parent of given URI or fail if the URI doesn't have a parent.
+   *
+   * Example:
+   *   <index-uri-parent> [Entity(), "Bar", "Baz"] => [Entity(), "Baz"]
+   *   <index-uri-parent> [Entity(), "Baz"] => [Entity()]
+   *   <index-uri-parent> [Entity()] => fail
    *
-   * FIXME: Also succeeds on use sites.
+   * @type uri@[namespace|[name|restPath]] -> ?name
+   */     
+  index-uri-parent =
+    ?[language, namespace|[_|<id>]]; ![language, namespace|<id>]
+    
+  /**
+   * Checks if given URI's are equal. Discards anonymous scopes if necessary.
+   *
+   * Example:
+   *   <index-uri-eq> ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"]) => 
+   *     ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"])
+   *   <index-uri-eq> ([Entity(), "Foo"], [Entity(), "Bar"]) => fail
    *
-   * @type def -> ?def
+   * @type (u1, u2) -> ?(u1, u2)
    */
-  index-is-definition =
-    where(nam-get-definition-key)
+  index-uri-eq:
+    (u1, u2) -> <id>
+    where
+      u1' := <index-uri-unwrap> u1;
+      u2' := <index-uri-unwrap> u2;
+      (<eq> (u1', u2') <+ <eq> (<remove-all(?Anon(_))> u1', <remove-all(?Anon(_))> u2'))
+      
+  /**
+   * Finds the first key (term{uri} element) for given term, or fail. 
+   *
+   * @type x -> ?name{uri}
+   */
+  index-find-key:
+    x -> key
+    where
+      key := <collect-one(?_{_})> x
     
   /**
    * Checks if given keys (term{uri} elements) are equal. Discards unresolved URI's.
@@ -634,4 +716,4 @@
   index-filepairs-to-files:
     filePairs -> files
     with
-      files := <make-set> <map(Fst; string-replace(|<conc-strings> (<project-path>, "/"), ""))> filePairs
\ No newline at end of file
+      files := <make-set> <map(Fst; string-replace(|<conc-strings> (<project-path>, "/"), ""))> filePairs

Modified: spoofax-contrib/index-examples/index-libraries/lib/index-library.str
==============================================================================
--- spoofax-contrib/index-examples/index-libraries/lib/index-library.str	Mon Dec 17 14:11:29 2012	(r25798)
+++ spoofax-contrib/index-examples/index-libraries/lib/index-library.str	Tue Dec 18 07:23:15 2012	(r25799)
@@ -1,34 +1,13 @@
 module lib/index-library
 
 imports
-  libstratego-lib
-  lib/editor-common.generated
   
-signature constructors
-  
-  // Index elements
-  DefData      : List(UriPart) * DefDataType * Term -> Summary
+signature 
+
+  constructors // Globals
     
-  // URI header
-  Namespace      : UriPart
-  Unresolved     : Namespace -> UriPart
-  INTERNAL_ERROR : UriPart
-  Timestamp      : UriPart
- 
-  // Remainder of URI
-  String : UriPart
-  Anon   : Int -> UriPart
-  Anon   : UriPart
-  
-  FileEntries : Term * Term -> Term
-  
-  // Globals
-  Global : Namespace
-  Global : List(UriPart) -> Summary
-  Global : List(UriPart) * List(Summary) -> Summary
-  
-  // None namespace
-  None   : Namespace
+	  Global : List(UriPart)               -> Entry
+	  Global : List(UriPart) * List(Entry) -> Entry
   
 rules // Index management
    
@@ -192,7 +171,9 @@
    * @see index-end-transaction
    */
   index-transaction(s) = 
-    prim("LANG_index_start_transaction"); try(s); prim("LANG_index_end_transaction")
+	    prim("LANG_index_start_transaction")
+	  ; try(s)
+	  ; prim("LANG_index_end_transaction")
   
 rules // Index querying
   
@@ -340,9 +321,9 @@
     names -> uri
     with
       if is-list then
-        uri := <concat> [[Global()], names, ["globals", ".internal"]]
+        uri := <concat> [names, ["globals", ".internal"]]
       else
-        uri := [Global(), names, "global", ".internal"]
+        uri := [names, "global", ".internal"]
       end
     
   /**
@@ -430,9 +411,9 @@
     names -> uri
     with
       if is-list then
-        uri := <concat> [[Global()], names, ["boolean", "globals", ".internal"]]
+        uri := <concat> [names, ["boolean", "globals", ".internal"]]
       else
-        uri := [Global(), names, "boolean", "global", ".internal"]
+        uri := [names, "boolean", "global", ".internal"]
       end
       
   /**
@@ -497,56 +478,11 @@
    */ 
   index-uri = 
     index-uri-impl <+ index-uri-generic
-  
-  /**
-   * Gets the namespace part of the given URI.
-   *
-   * Example:
-   *   <index-uri-path> [Entity(), "Bar", "Baz"] => Entity()
-   *
-   * @type uri@[namespace|path] -> namespace
-   */ 
-  index-uri-namespace =
-    ?[<id>|_]
-  
-  /**
-   * Gets the path part of the given URI.
-   *
-   * Example:
-   *   <index-uri-path> [Entity(), "Bar", "Baz"] => ["Bar", "Baz"]
-   *   <index-uri-path> [Entity()] => []
-   *
-   * @type uri@[namespace|path] -> path
-   */ 
-  index-uri-path =
-    ?[_|<id>]
     
-  /**
-   * Gets the name part of the given URI or fail if there is no name.
-   *
-   * Example:
-   *   <index-uri-name> [Entity(), "Bar", "Baz"] => "Bar"
-   *   <index-uri-name> [Entity()] => fail
-   *
-   * @type uri@[namespace|[name|restPath]] -> ?name
-   */ 
-  index-uri-name =
-    ?[_|[<id>|_]]
+  index-update-uri(s) = 
+    index-update-uri-impl(s) <+ index-update-uri-generic(s)
     
   /**
-   * Gets the parent of given URI or fail if the URI doesn't have a parent.
-   *
-   * Example:
-   *   <index-uri-parent> [Entity(), "Bar", "Baz"] => [Entity(), "Baz"]
-   *   <index-uri-parent> [Entity(), "Baz"] => [Entity()]
-   *   <index-uri-parent> [Entity()] => fail
-   *
-   * @type uri@[namespace|[name|restPath]] -> ?name
-   */     
-  index-uri-parent =
-    ?[ns|[_|<id>]]; ![ns|<id>]
-  
-  /**
    * Gets the value part for given term. Can be extended by defining a index-value-impl rule. If no index-value-impl 
    * rule is defined for the given term the second subterm is used as the value. Fails if no value can be retrieved
    * from the given term.
@@ -569,33 +505,6 @@
    */
   index-is-fake-file = 
     string-starts-with(|"/.internal")
-  
-  /**
-   * Checks if given URI's are equal. Discards anonymous scopes if necessary.
-   *
-   * Example:
-   *   <index-uri-eq> ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"]) => 
-   *     ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"])
-   *   <index-uri-eq> ([Entity(), "Foo"], [Entity(), "Bar"]) => fail
-   *
-   * @type (u1, u2) -> ?(u1, u2)
-   */
-  index-uri-eq:
-    (u1, u2) -> <id>
-    where
-      u1' := <index-uri-unwrap> u1;
-      u2' := <index-uri-unwrap> u2;
-      (<eq> (u1', u2') <+ <eq> (<remove-all(?Anon(_))> u1', <remove-all(?Anon(_))> u2'))
-  
-  /**
-   * Finds the first key (term{uri} element) for given term, or fail. 
-   *
-   * @type x -> ?name{uri}
-   */
-  index-find-key:
-    x -> key
-    where
-      key := <collect-one(?_{_})> x
 
   /**
    * Converts a path from an URI to a string.
@@ -608,7 +517,7 @@
   index-path-to-string:
     path -> str
     with
-      str := <take-until(?Anon(_)); reverse; separate-by(|"."); concat-strings> path
+      str := <reverse; separate-by(|"."); concat-strings> path
       
   /**
    * Converts a URI to a string.
@@ -704,30 +613,23 @@
   /** @internal */
   index-uri-impl:
     [_|_] -> <id>
-  
+    
   /** @internal */
-  index-uri-impl:
-    DefData(uri, _, _) -> uri
+  index-update-uri-impl(s):
+    [_|_] -> <s>
+    
+  /** @internal */
+  index-value-impl:
+    [_|_] -> <id>
 
   /** @internal */
   index-uri-generic:
     term -> <?_#(<?[<id>|_]>)> term
-  
+    
   /** @internal */
-  index-value-impl:
-    DefData(_, _, value) -> value
+  index-update-uri-generic(s) = 
+    id#([s|id])
     
   /** @internal */
   index-value-generic:
     term -> <?_#(<?[_, <id>|_]> )> term
-     
-/** @internal */ 
-rules // Internal helpers
-  
-  /** @internal */
-  index-namespace-unwrap =
-    \Unresolved(n) -> n\ <+ id
-    
-  /** @internal */
-  index-uri-unwrap =
-    \[ns|xs] -> [<index-namespace-unwrap> ns|xs]\ <+ id

Modified: spoofax-contrib/index-examples/index-libraries/lib/nbl-library.str
==============================================================================
--- spoofax-contrib/index-examples/index-libraries/lib/nbl-library.str	Mon Dec 17 14:11:29 2012	(r25798)
+++ spoofax-contrib/index-examples/index-libraries/lib/nbl-library.str	Tue Dec 18 07:23:15 2012	(r25799)
@@ -21,37 +21,37 @@
   import-standard =
     not(import-transitive)
     
-  import-values(|namespace, path) =
-    <index-get-all-values> DefData([namespace| path], Import(), ())
+  import-values(|language, namespace, path) =
+    <index-get-all-values> DefData([language, namespace| path], Import(), ())
     
-  import-currentfile-values(|namespace) =
-    <index-get-all-values> DefData([namespace|[<index-file-to-string> <index-get-current-file>]], Import(), ())  
+  import-currentfile-values(|language, namespace) =
+    <index-get-all-values> DefData([language, namespace|[<index-file-to-string> <index-get-current-file>]], Import(), ())  
     
-  adjust-index-import(|namespace, path):
-    _ -> <concat> [[[namespace | path]], currentFileImportDefs, importDefs]
+  adjust-index-import(|language, namespace, path):
+    _ -> <concat> [[[language, namespace | path]], currentFileImportDefs, importDefs]
     with
-      uri := [namespace | path]
+      uri := [language, namespace | path]
     where
-      allImports := <import-values(|namespace, path)> ;
-      importDefs := <mapconcat(import-defs(|namespace, [uri]))> allImports
+      allImports := <import-values(|language, namespace, path)> ;
+      importDefs := <mapconcat(import-defs(|language, namespace, [uri]))> allImports
     where
-      currentfileImports := <import-currentfile-values(|namespace)> ;
-      currentFileImportDefs := <mapconcat(import-defs(|namespace, [uri]))> currentfileImports
+      currentfileImports := <import-currentfile-values(|language, namespace)> ;
+      currentFileImportDefs := <mapconcat(import-defs(|language, namespace, [uri]))> currentfileImports
     
-  import-defs(|namespace, seen):
+  import-defs(|language, namespace, seen):
     (key, <import-standard>) -> [uri]
     with
-      uri := [namespace | <index-uri-path> key]
+      uri := [language, namespace | <index-uri-path> key]
       
-  import-defs(|namespace, seen):
+  import-defs(|language, namespace, seen):
     (key, <import-transitive>) -> <conc> ([uri], transitiveUris)
     with
       path := <index-uri-path> key ;
-      uri := [namespace | path] ;
+      uri := [language, namespace | path] ;
       
       if not(<elem> (uri, seen)) then
-        allImports := <import-values(|namespace, path)> ;
-        transitiveUris := <mapconcat(import-defs(|namespace, [uri|seen]))> allImports
+        allImports := <import-values(|language, namespace, path)> ;
+        transitiveUris := <mapconcat(import-defs(|language, namespace, [uri|seen]))> allImports
       else
         transitiveUris := []
       end
@@ -71,7 +71,7 @@
 rules // Error checks
   
   constraint-error:
-    x{[Unresolved(t) | _]} -> (x, $[Unable to resolve.])
+    x{[_, Unresolved(t) | _]} -> (x, $[Unable to resolve.])
     
   constraint-error:
     definition -> (key, $[Duplicate definition])
@@ -91,7 +91,7 @@
    * @type "name"{uri} -> ?Def(uri')
    */
   index-lookup-typed(|type):
-    x{[namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-nametype-equal(|name, type)|ns, path, name)> x
+    x{[language, namespace|path]} -> <index-lookup-internal(index-get-defs, index-compare-nametype-equal(|name, type)|language, ns, path, name)> x
     where
       ns := <index-namespace-unwrap> namespace;
       name := <strip-annos> x
@@ -106,7 +106,7 @@
    * @type "name"{uri} -> List(Def(uri'))
    */
   index-lookup-all-typed(|prefix, type):
-    x{[namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-nametype-substring(|prefix, type)|ns, path, prefix)> x
+    x{[language, namespace|path]} -> <index-lookup-all-internal(index-get-defs-prefix, index-compare-nametype-substring(|prefix, type)|language, ns, path, prefix)> x
     where
       ns := <index-namespace-unwrap> namespace
 

From gabrielkonat at gmail.com  Wed Dec 19 15:24:56 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Wed, 19 Dec 2012 14:24:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25800 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index
Message-ID: <20121219142456.45BBA108C027@mx3.tudelft.nl>

Author: gkonat
Date: Wed Dec 19 14:24:54 2012
New Revision: 25800
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25800&sc=1

Log:
Return null when inner parent path cannot be created.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Tue Dec 18 07:23:15 2012	(r25799)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Wed Dec 19 14:24:54 2012	(r25800)
@@ -64,6 +64,8 @@
             for(int i = 0; i < identifier.getSubtermCount(); ++i) {
                 if(isTermList(identifier.getSubterm(i))) {
                     IStrategoList parentPath = getParentPath((IStrategoList) identifier.getSubterm(i), factory);
+                    if(parentPath == null)
+                        return null;
                     IStrategoTerm[] subterms = identifier.getAllSubterms();
                     subterms[i] = parentPath;
                     return new IndexURI(constructor, factory.makeAppl(appl.getConstructor(), subterms), type);

From gabrielkonat at gmail.com  Wed Dec 19 16:39:19 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Wed, 19 Dec 2012 15:39:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25801 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index
Message-ID: <20121219153919.BE157CC21D@mx4.tudelft.nl>

Author: gkonat
Date: Wed Dec 19 15:39:18 2012
New Revision: 25801
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25801&sc=1

Log:
Clone term array to prevent mutation of old terms.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Wed Dec 19 14:24:54 2012	(r25800)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/main/java/org/spoofax/interpreter/library/index/IndexURI.java	Wed Dec 19 15:39:18 2012	(r25801)
@@ -66,7 +66,7 @@
                     IStrategoList parentPath = getParentPath((IStrategoList) identifier.getSubterm(i), factory);
                     if(parentPath == null)
                         return null;
-                    IStrategoTerm[] subterms = identifier.getAllSubterms();
+                    IStrategoTerm[] subterms = identifier.getAllSubterms().clone();
                     subterms[i] = parentPath;
                     return new IndexURI(constructor, factory.makeAppl(appl.getConstructor(), subterms), type);
                 }

From gabrielkonat at gmail.com  Thu Dec 20 15:09:08 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Thu, 20 Dec 2012 14:09:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25802 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test
Message-ID: <20121220140908.CDEE2108C037@mx3.tudelft.nl>

Author: gkonat
Date: Thu Dec 20 14:09:06 2012
New Revision: 25802
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25802&sc=1

Log:
Added tests for the index in Stratego

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/tests.str

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/tests.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/tests.str	Thu Dec 20 14:09:06 2012	(r25802)
@@ -0,0 +1,207 @@
+module tests
+
+imports
+  
+  lib/index-library
+  lib/analysis-library
+  lib/analysis-library-internal
+  
+signature
+
+  constructors
+    
+    Class    : Namespace
+    Method   : Namespace
+    Field    : Namespace
+    
+    Entity   : Namespace
+    Function : Namespace
+    
+    Type     : DefDataType
+    
+    Type     : URI * Type         -> Entry
+    Long     : URI * T1 * T2 * T3 -> Entry
+    
+strategies
+  
+  test-project-path = !"tests"
+  test-path =         !"path.test"
+  test-partition =    !$[[<test-project-path>]/[<test-path>]]
+  test-language =     !"TestLang"
+  
+  test-setup-index = 
+      index-setup(|<test-language>, [<test-project-path>], <test-partition>)
+    ; <index-clear-file> <test-partition>
+ 
+strategies
+  
+  test-assert-true(s|i) =
+    with(s|$[[i]: Expected success.])
+    
+  test-assert-false(s|i) =
+    with(not(s)|$[[i]: Expected failure.])
+  
+  test-assert-equals(|i) =
+      ?(x, y)
+    ; with(eq|$[[i]: Expected [x], found [y].])
+  
+rules
+      
+  test-index = 
+      <debug> "Testing test-index-get"
+    ; test-index-get
+    ; <debug> "Testing test-index-get-duplicates"
+    ; test-index-get-duplicates
+    ; <debug> "Testing test-index-get-children"
+    ; test-index-get-children
+    ; <debug> "Testing test-index-clear"
+    ; test-index-clear
+    ; <debug> "All tests completed! ????"
+    ; !None()
+      
+  test-index-get:
+    x -> x
+    with
+        test-setup-index
+      ; deff := Def([Class(), "String", "lang", "java"])
+      ; type := Type([Class(), "String", "lang", "java"], "String")
+      ; data := DefData([Class(), "String", "lang", "java"], Type(), "String")
+        
+      ; <test-assert-equals(|1)> (0, <length> <index-get-all> deff)
+      ; <test-assert-equals(|2)> (0, <length> <index-get-all> type)
+      ; <test-assert-equals(|3)> (0, <length> <index-get-all> data)
+        
+      ; <index-add(|<test-partition>)> deff
+      ; <index-add(|<test-partition>)> type
+      ; <index-add(|<test-partition>)> data
+        
+      ; ret1 := <index-get-all> deff
+      ; ret2 := <index-get-all> type
+      ; ret3 := <index-get-all> data
+        
+      ; <test-assert-equals(|4)> (1, <length> ret1)
+      ; <test-assert-equals(|5)> (1, <length> ret2)
+      ; <test-assert-equals(|6)> (1, <length> ret3)
+        
+      ; <test-assert-true (all(?deff)|7)> ret1
+      ; <test-assert-true (all(?type)|8)> ret2
+      ; <test-assert-true (all(?data)|9)> ret3
+        
+      ; <test-assert-false(all(?deff)|10)> ret2
+      ; <test-assert-false(all(?deff)|11)> ret3
+        
+      ; <test-assert-false(all(?type)|12)> ret1
+      ; <test-assert-false(all(?type)|13)> ret3
+        
+      ; <test-assert-false(all(?data)|14)> ret1
+      ; <test-assert-false(all(?data)|15)> ret2
+        
+        
+  test-index-get-duplicates:
+    x -> x
+    with
+        test-setup-index
+      ; deff := Def([Entity(), "Person", "CRM"])
+      ; read := Read([Function(), "GetName", "Person", "CRM"])
+      ; long := Long([Function(), "GetName", "Person", "CRM"], "Data1", 2, None())
+        
+      ; <test-assert-equals(|1)> (0, <length> <index-get-all> deff)
+      ; <test-assert-equals(|2)> (0, <length> <index-get-all> read)
+      ; <test-assert-equals(|3)> (0, <length> <index-get-all> long)
+        
+      ; <index-add(|<test-partition>)> deff
+      ; <index-add(|<test-partition>)> deff
+      ; <index-add(|<test-partition>)> deff
+      ; <index-add(|<test-partition>)> read
+      ; <index-add(|<test-partition>)> read
+      ; <index-add(|<test-partition>)> long
+        
+      ; ret1 := <index-get-all> deff
+      ; ret2 := <index-get-all> read
+      ; ret3 := <index-get-all> long
+        
+      ; <test-assert-equals(|4)> (3, <length> ret1)
+      ; <test-assert-equals(|5)> (2, <length> ret2)
+      ; <test-assert-equals(|6)> (1, <length> ret3)
+        
+      ; <test-assert-true (all(?deff)|7)> ret1
+      ; <test-assert-true (all(?read)|8)> ret2
+      ; <test-assert-true (all(?long)|9)> ret3
+        
+      ; <test-assert-false(all(?deff)|10)> ret2
+      ; <test-assert-false(all(?deff)|11)> ret3
+        
+      ; <test-assert-false(all(?read)|12)> ret1
+      ; <test-assert-false(all(?read)|13)> ret3
+        
+      ; <test-assert-false(all(?long)|14)> ret1
+      ; <test-assert-false(all(?long)|15)> ret2
+      
+        
+      ; <index-add-all(|<test-partition>)> ret2
+        
+      ; ret4 := <index-get-all> read
+        
+      ; <test-assert-equals(|16)> (4, <length> ret4)
+      ; <test-assert-true (all(?read)|17)> ret4
+      ; <test-assert-false(all(?deff)|18)> ret4
+      ; <test-assert-false(all(?long)|19)> ret4
+        
+        
+  test-index-get-children:
+    x -> x
+    with
+        test-setup-index
+      ; cldef := Def([Class(), "String", "lang", "java"])
+      ; mdef1 := Def([Method(), "charAt", "String", "lang", "java"])
+      ; mdef2 := Def([Method(), "getBytes", "String", "lang", "java"])
+      ; fldef := Def([Field(), "length", "String", "lang", "java"])
+      
+      ; mtemplate := Def([Method(), "String", "lang", "java"]) 
+      ; ftemplate := Def([Field(), "String", "lang", "java"])
+        
+      ; <test-assert-equals(|1)> (0, <length> <index-get-all> cldef)
+      ; <test-assert-equals(|2)> (0, <length> <index-get-all> mdef1)
+      ; <test-assert-equals(|3)> (0, <length> <index-get-all> mdef2)
+      ; <test-assert-equals(|4)> (0, <length> <index-get-all> fldef)
+      ; <test-assert-equals(|5)> (0, <length> <index-get-children(|Method())> mtemplate)
+      ; <test-assert-equals(|6)> (0, <length> <index-get-children(|Field())> ftemplate)
+        
+      ; <index-add(|<test-partition>)> cldef
+      ; <index-add(|<test-partition>)> mdef1
+      ; <index-add(|<test-partition>)> mdef2
+      ; <index-add(|<test-partition>)> fldef
+        
+      ; ret1 := <index-get-children(|Method())> mtemplate
+      ; ret2 := <index-get-children(|Field())> ftemplate
+        
+      ; <test-assert-equals(|7)> (2, <length> ret1)
+      ; <test-assert-equals(|8)> (1, <length> ret2)   
+        
+      ; <test-assert-true (one(?mdef1)|9)> ret1
+      ; <test-assert-true (one(?mdef2)|10)> ret1
+      ; <test-assert-false(one(?cldef)|11)> ret1
+      ; <test-assert-false(one(?fldef)|12)> ret1
+        
+      ; <test-assert-false(one(?mdef1)|13)> ret2
+      ; <test-assert-false(one(?mdef2)|14)> ret2
+      ; <test-assert-true (one(?fldef)|15)> ret2
+      ; <test-assert-false(one(?cldef)|16)> ret2
+        
+  test-index-clear:
+  	x -> x
+  	with
+  		  test-setup-index
+  		; deff := Def([Class(), "String", "lang", "java"])
+  		  
+  		; <test-assert-equals(|1)> (0, <length> <index-get-all> deff)
+  		  
+  		; <index-add-all(|<test-partition>)> [deff, deff, deff]
+  		
+  		; ret1 := <index-get-all> deff
+  		; <test-assert-equals(|2)> (3, <length> ret1)
+  		  
+  		; index-clear
+  		  
+  		; ret2 := <index-get-all> deff
+  		; <test-assert-equals(|3)> (0, <length> ret2)
\ No newline at end of file

From gabrielkonat at gmail.com  Thu Dec 20 15:10:08 2012
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Thu, 20 Dec 2012 14:10:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25803 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test
Message-ID: <20121220141008.CB2C4CC203@mx4.tudelft.nl>

Author: gkonat
Date: Thu Dec 20 14:10:08 2012
New Revision: 25803
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25803&sc=1

Log:
Tabs

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/tests.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/tests.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/tests.str	Thu Dec 20 14:09:06 2012	(r25802)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.index/src/test/tests.str	Thu Dec 20 14:10:08 2012	(r25803)
@@ -189,19 +189,19 @@
       ; <test-assert-false(one(?cldef)|16)> ret2
         
   test-index-clear:
-  	x -> x
-  	with
-  		  test-setup-index
-  		; deff := Def([Class(), "String", "lang", "java"])
-  		  
-  		; <test-assert-equals(|1)> (0, <length> <index-get-all> deff)
-  		  
-  		; <index-add-all(|<test-partition>)> [deff, deff, deff]
-  		
-  		; ret1 := <index-get-all> deff
-  		; <test-assert-equals(|2)> (3, <length> ret1)
-  		  
-  		; index-clear
-  		  
-  		; ret2 := <index-get-all> deff
-  		; <test-assert-equals(|3)> (0, <length> ret2)
\ No newline at end of file
+    x -> x
+    with
+        test-setup-index
+      ; deff := Def([Class(), "String", "lang", "java"])
+        
+      ; <test-assert-equals(|1)> (0, <length> <index-get-all> deff)
+        
+      ; <index-add-all(|<test-partition>)> [deff, deff, deff]
+      
+      ; ret1 := <index-get-all> deff
+      ; <test-assert-equals(|2)> (3, <length> ret1)
+        
+      ; index-clear
+        
+      ; ret2 := <index-get-all> deff
+      ; <test-assert-equals(|3)> (0, <length> ret2)
\ No newline at end of file

From richard at vogelij.nl  Fri Dec 21 01:06:44 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Fri, 21 Dec 2012 00:06:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25804 -
	strategoxt-javascript-backend/trunk/src/javascript
Message-ID: <20121221000644.CA5E67F8015@mx1.tudelft.nl>

Author: rvogelij
Date: Fri Dec 21 00:06:42 2012
New Revision: 25804
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25804&sc=1

Log:
improved index implementation

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/ace-wrapper-end.js
   strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
   strategoxt-javascript-backend/trunk/src/javascript/index.js
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js

Modified: strategoxt-javascript-backend/trunk/src/javascript/ace-wrapper-end.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ace-wrapper-end.js	Thu Dec 20 14:10:08 2012	(r25803)
+++ strategoxt-javascript-backend/trunk/src/javascript/ace-wrapper-end.js	Fri Dec 21 00:06:42 2012	(r25804)
@@ -2,3 +2,4 @@
 StrategoJS.registerLibrary(StrategoJS.SRTS);
 StrategoJS.registerLibrary(StrategoJS.StrategoLib);
 StrategoJS.registerLibrary(StrategoJS.JSSGLR);
+StrategoJS.registerLibrary(StrategoJS.Index);

Modified: strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Thu Dec 20 14:10:08 2012	(r25803)
+++ strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Fri Dec 21 00:06:42 2012	(r25804)
@@ -2,13 +2,24 @@
 StrategoJS.registerLibrary(StrategoJS.SRTS);
 StrategoJS.registerLibrary(StrategoJS.StrategoLib);
 StrategoJS.registerLibrary(StrategoJS.JSSGLR);
+StrategoJS.registerLibrary(StrategoJS.Index);
 try
 {
-	debugger;
-	var fs = require('fs');
-	var fn = process.argv.slice(2)[0];
-	var data = fs.readFileSync(fn, 'ascii');
-	StrategoJS.init().main(["./program"].concat( data ));
+	var navigator = { userAgent: "node-js" };
+	var data;
+	try
+	{
+		var fs = require('fs');
+		var fn = process.argv.slice(2)[0];
+		data = fs.readFileSync(fn, 'ascii');
+	} catch (err) {}
+
+	var result = StrategoJS.init().main(["./program"].concat( data ));
+	if (result != null)
+	{
+		console.log("INFO: Stratego program produced output");
+	}
+		
 } catch (err)
 {
 	debugger;

Modified: strategoxt-javascript-backend/trunk/src/javascript/index.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/index.js	Thu Dec 20 14:10:08 2012	(r25803)
+++ strategoxt-javascript-backend/trunk/src/javascript/index.js	Fri Dec 21 00:06:42 2012	(r25804)
@@ -2,68 +2,87 @@
 //Basic implementation of the Stratego index
 StrategoJS.Index = {};
 
-StrategoJS.Index.CurrentFile = null;
-
-StrategoJS.Index.Files = [];
-
-StrategoJS.Index.loadIndex = function(langname, path)
-{
-	StrategoJS.Index.CurrentFile = path;
-	return true;
-}
-
-StrategoJS.Index.start_transaction = function()
-{
-	return true;
-}
-StrategoJS.Index.end_transaction = function()
-{
-	return true;
-}
-
-StrategoJS.Index.get_all_in_file = function(filepath)
-{
-	return [];
-}
-
-StrategoJS.Index.get_files_of = function(filepath)
-{
-	return [];
-}
-
-
-StrategoJS.Index.clear_file = function(filepath)
-{
-	StrategoJS.Index.Files[filepath] = [];
-	return true;
-}
-
-StrategoJS.Index.set_current_file = function(filepath)
-{
-	StrategoJS.Index.CurrentFile = filepath;
-	return true;
-}
-
-StrategoJS.Index.add = function(file, value)
-{
-	if (StrategoJS.Index.Files[file] === undefined)
-		StrategoJS.Index.Files[file] = [];
-	StrategoJS.Index.Files[file].push(value);
-	return true;
-}
-
-
-//should return a collection of index entries based on a APPL template
-StrategoJS.Index.get = function()
-{
-	return StrategoJS.Index.Files[StrategoJS.Index.CurrentFile];
-}
-
-StrategoJS.Index.remove = function(template, path)
-{
-	var table = StrategoJS.Index.Files[path];
-	if (table != null)
-		delete table[template];
-	return true;
-}
+StrategoJS.Index._loaded = function() {
+	
+	StrategoJS.Index.CurrentFile = null;
+	
+	StrategoJS.Index.Files = [];
+	
+	StrategoJS.Index.loadIndex = function(langname, path)
+	{
+		StrategoJS.Index.CurrentFile = path;
+		if (StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] === undefined)
+			StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] = [];
+		return true;
+	}
+	
+	StrategoJS.Index.start_transaction = function()
+	{
+		return true;
+	}
+	StrategoJS.Index.end_transaction = function()
+	{
+		return true;
+	}
+	
+	StrategoJS.Index.get_all_in_file = function(filepath)
+	{
+		return [];
+	}
+	
+	StrategoJS.Index.get_files_of = function(filepath)
+	{
+		return [];
+	}
+	
+	
+	StrategoJS.Index.clear_file = function(filepath)
+	{
+		StrategoJS.Index.Files[filepath] = [];
+		return true;
+	}
+	
+	StrategoJS.Index.set_current_file = function(filepath)
+	{
+		StrategoJS.Index.CurrentFile = filepath;
+		return true;
+	}
+	
+	StrategoJS.Index.add = function(url, value)
+	{
+		if (StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] === undefined)
+			StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] = [];
+		var element = { key: url, val: value };
+		StrategoJS.Index.Files[StrategoJS.Index.CurrentFile].push(element);
+		return true;
+	}
+	
+	//should return a collection of index entries based on a APPL template
+	StrategoJS.Index.get = function(url)
+	{
+		var r = [];
+		for (var i = 0; i < StrategoJS.Index.Files[StrategoJS.Index.CurrentFile].length; i++)
+		{
+			if (StrategoJS.Index.Files[StrategoJS.Index.CurrentFile][i].key === url)
+			{
+				debugger;
+				r.push(StrategoJS.Index.Files[StrategoJS.Index.CurrentFile][i].val);
+			}
+		}
+		
+		return r;
+	}
+	
+	StrategoJS.Index.remove = function(template, path)
+	{
+		var table = StrategoJS.Index.Files[path];
+		if (table != null)
+			delete table[template];
+		return true;
+	}
+	
+	
+	
+	
+}();
 

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Thu Dec 20 14:10:08 2012	(r25803)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Fri Dec 21 00:06:42 2012	(r25804)
@@ -26,22 +26,22 @@
 	}
 
 	StrategoJS.SSL.SSL_id = function(ctx, currentTerm) {
-		trace("SSL_id");
+		//trace("SSL_id");
 		return currentTerm;
 	}
 
 	StrategoJS.SSL.SSL_stdin_stream = function(ctx, currentTerm) {
-		trace("SSL_stdin_stream");
+		//trace("SSL_stdin_stream");
 		return ctx.factory.makeAppl(_stdin, []);
 	}
 
 	StrategoJS.SSL.SSL_stdout_stream = function(ctx, currentTerm) {
-		trace("SSL_stdout_stream");
+		//trace("SSL_stdout_stream");
 		return ctx.factory.makeAppl(_stdout, []);
 	}
 
 	StrategoJS.SSL.SSL_stderr_stream = function(ctx, currentTerm) {
-		trace("SSL_stderr_stream");
+		//trace("SSL_stderr_stream");
 		return ctx.factory.makeAppl(_stderr, []);
 	}
 
@@ -60,7 +60,7 @@
 	}
 	
 	var _mkTermMakeString = function(factory, ctorTerm) {
-		//trace("_mkTermMakeString"+"\n\tterm: " + ctorTerm +"\n\tstrval:" + factory.stringValue(ctorTerm));
+		////trace("_mkTermMakeString"+"\n\tterm: " + ctorTerm +"\n\tstrval:" + factory.stringValue(ctorTerm));
 		var test = factory.stringValue(ctorTerm);
 		if ((test === undefined))// || (test.charCodeAt(0) !== 34))
 			return false;
@@ -68,7 +68,7 @@
 	}
 
 	StrategoJS.SSL.SSL_mkterm = function(ctx, currentTerm, ctorTerm, args) {
-		trace("SSL_mkterm " + ctorTerm + " - " + args);
+		//trace("SSL_mkterm " + ctorTerm + " - " + args);
 		//debugger;
 		var factory = ctx.factory;
 		var termType = factory.termType(ctorTerm);
@@ -76,7 +76,7 @@
 		switch(termType) {
 			case factory.STRING:
 				var test = _mkTermMakeString(factory, ctorTerm);
-				trace("test:" + test);
+				//trace("test:" + test);
 				if (test)
 					return factory.makeString(factory.stringValue(ctorTerm));
 				else
@@ -99,7 +99,7 @@
 	}	
 
 	StrategoJS.SSL.SSL_addi = function(ctx, currentTerm, lhs, rhs) {
-		trace("SSL_addi");
+		//trace("SSL_addi");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.INT || f.termType(rhs) !== f.INT)
 			return null;
@@ -107,7 +107,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_subti = function(ctx, currentTerm, a, b) {
-		trace("SSL_subti");
+		//trace("SSL_subti");
 		var f = ctx.factory;
 		if(f.termType(a) !== f.INT || f.termType(b) !== f.INT) { 
 			return null;
@@ -116,7 +116,7 @@
 	}	
 	
 	StrategoJS.SSL.SSL_muli = function(ctx, currentTerm, lhs, rhs) {
-		trace("SSL_muli");
+		//trace("SSL_muli");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.INT || f.termType(rhs) !== f.INT)
 			return null;
@@ -124,7 +124,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_divi = function(ctx, currentTerm, lhs, rhs) {
-		trace("SSL_divi");
+		//trace("SSL_divi");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.INT || f.termType(rhs) !== f.INT)
 			return null;
@@ -132,7 +132,7 @@
 	}	
 	
 	StrategoJS.SSL.SSL_modi = function(ctx, currentTerm, lhs, rhs) {
-		trace("SSL_modi");
+		//trace("SSL_modi");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.INT || f.termType(rhs) !== f.INT)
 			return null;
@@ -140,7 +140,7 @@
 	}	
 	
 	StrategoJS.SSL.SSL_int = function(ctx, currentTerm, lhs) {
-		trace("SSL_int");
+		//trace("SSL_int");
 		var f = ctx.factory;
 		return f.makeInt(parseInt(lhs));
 	}	
@@ -148,7 +148,7 @@
 	
 	
 	StrategoJS.SSL.SSL_gti = function(ctx, currentTerm, a, b) {
-		trace("SSL_gti");
+		//trace("SSL_gti");
 		var f = ctx.factory;
 		if(f.termType(a) !== f.INT || f.termType(b) !== f.INT) { 
 			return null;
@@ -163,7 +163,7 @@
 	
 
 	StrategoJS.SSL.SSL_addr = function(ctx, currentTerm, lhs, rhs) {
-		trace("SSL_addr");
+		//trace("SSL_addr");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.REAL || f.termType(rhs) !== f.REAL)
 			return null;
@@ -171,7 +171,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_mulr = function(ctx, currentTerm, lhs, rhs) {
-		trace("SSL_mulr");
+		//trace("SSL_mulr");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.REAL || f.termType(rhs) !== f.REAL)
 			return null;
@@ -179,7 +179,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_modr = function(ctx, currentTerm, lhs, rhs) {
-		trace("SSL_modr");
+		//trace("SSL_modr");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.REAL || f.termType(rhs) !== f.REAL)
 			return null;
@@ -187,7 +187,7 @@
 	}	
 	
 	StrategoJS.SSL.SSL_gtr = function(ctx, currentTerm, a, b) {
-		trace("SSL_gtr");
+		//trace("SSL_gtr");
 		var f = ctx.factory;
 		if(f.termType(a) !== f.REAL || f.termType(b) !== f.REAL) { 
 			return null;
@@ -198,7 +198,7 @@
 	
 	
 	StrategoJS.SSL.SSL_write_term_to_stream_text = function(ctx, currentTerm, stream, outputTerm) {
-		trace("SSL_write_term_to_stream_text A");
+		//trace("SSL_write_term_to_stream_text A");
 		ctor = stream.getConstructor();
 		if(ctx.factory.ctorEquals(ctor, _stdout) || ctx.factory.ctorEquals(ctor, _stderr))
 			print(ctx.factory.prettify(outputTerm));
@@ -207,12 +207,12 @@
 			f.write(ctx.factory.prettify(outputTerm));
 			f.flush();
 		}
-		trace("SSL_write_term_to_stream_text B");
+		//trace("SSL_write_term_to_stream_text B");
 		return stream;
 	}
 
 	StrategoJS.SSL.SSL_read_term_from_stream = function(ctx, currentTerm, stream) {
-		trace("SSL_read_term_from_stream");
+		//trace("SSL_read_term_from_stream");
 		var ctor = ctx.factory.getConstructor(stream);
 		if(ctx.factory.ctorEquals(ctor, _stdin))
 			throw "SSL_read_term_from_stream does not support stdin"; 
@@ -231,21 +231,21 @@
 	}
 	
 	StrategoJS.SSL.SSL_write_term_to_string = function(ctx, currentTerm, lhs) {
-		trace("SSL_write_term_to_string");
+		//trace("SSL_write_term_to_string");
 		var f = ctx.factory;
 		return f.makeString(f.prettify(lhs));
 	}	
 	
 
 	StrategoJS.SSL.SSL_is_string = function(ctx, currentTerm, arg) {
-		trace("SSL_is_string");
+		//trace("SSL_is_string");
 		if(ctx.factory.termType(arg) === ctx.factory.STRING)
 			return arg;
 		return null;
 	}
 
 	StrategoJS.SSL.SSL_fputs = function(ctx, currentTerm, string, stream) {
-		trace("SSL_fputs");
+		//trace("SSL_fputs");
 		ctor = stream.getConstructor();
 		if (ctx.factory.termType(string) !== ctx.factory.STRING)
 		{
@@ -266,13 +266,13 @@
 	StrategoJS.SSL.SSL_fopen = function(ctx, currentTerm, fileName, modep) {
 		var mode = ctx.factory.stringValue(modep);
 		var fileCons = fileName;
-		trace("SSL_fopen : " + fileName.name + " " + mode);
+		//trace("SSL_fopen : " + fileName.name + " " + mode);
 		_openFiles.push(fileCons);
 		return ctx.factory.makeInt(_openFiles.length - 1);
 	}
 
 	StrategoJS.SSL.SSL_fclose = function(ctx, currentTerm, stream) {
-		trace("SSL_fclose");
+		//trace("SSL_fclose");
 		var f = _openFiles[stream];
 		if(f) {
 			f.close();
@@ -282,7 +282,7 @@
 	}
 
 	StrategoJS.SSL.SSL_fputc = function(ctx, currentTerm, ch, stream) {
-		trace("SSL_fputc");
+		//trace("SSL_fputc");
 		var ctor = ctx.factory.getConstructor(stream);
 		var char = ch;
 	
@@ -297,8 +297,8 @@
 	}
 
 	StrategoJS.SSL.SSL_get_constructor = function(ctx, currentTerm, term) {
-		trace("SSL_get_constructor");
-		trace("SSL_get_constructor term: " + ctx.factory.prettify(term) );
+		//trace("SSL_get_constructor");
+		//trace("SSL_get_constructor term: " + ctx.factory.prettify(term) );
 		var ctor = ctx.factory.getConstructor(term);
 		if (ctor.arity !== undefined)
 		{
@@ -308,7 +308,7 @@
 	}
 
 	StrategoJS.SSL.SSL_get_arguments = function(ctx, currentTerm, term) {
-		trace("SSL_get_arguments");
+		//trace("SSL_get_arguments");
 		var tmp = [];
 		var factory = ctx.factory;
 		switch(factory.termType(term)) {
@@ -330,21 +330,21 @@
 	}
 
 	StrategoJS.SSL.SSL_get_list_length = function(ctx, currentTerm, term) {
-		trace("SSL_get_list_length");
+		//trace("SSL_get_list_length");
 		if(ctx.factory.termType(term) !== ctx.factory.LIST)
 			return null;
 		return ctx.factory.makeInt(ctx.factory.getSubtermCount(term));
 	}
 
 	StrategoJS.SSL.SSL_perror = function(ctx, currentTerm, term) {
-		trace("SSL_perror");
+		//trace("SSL_perror");
 		var msg = ctx.factory.termType(term) == ctx.factory.STRING ? term : "(no details on this error; perror not supported)";
 		print("ERROR: " + msg);
 		return currentTerm;
 	}
 
 	StrategoJS.SSL.SSL_is_real = function(ctx, currentTerm, term) {
-		trace("SSL_is_real");
+		//trace("SSL_is_real");
 		var ok = ctx.factory.termType(term) === ctx.factory.REAL;
 		if (!ok)
 			return null;
@@ -408,12 +408,12 @@
 	}
 
 	StrategoJS.SSL.SSL_dynamic_rules_hashtable = function(ctx, currentTerm) {
-		trace("SSL_dynamic_rules_hashtable");
+		//trace("SSL_dynamic_rules_hashtable");
 		return ctx.factory.makeInt(_DYN_TABLE);
 	}
 
 	StrategoJS.SSL.SSL_hashtable_get = function(ctx, currentTerm, tableReference, key) {
-		trace("SSL_hashtable_get : " + tableReference);
+		//trace("SSL_hashtable_get : " + tableReference);
 		if(ctx.factory.termType(tableReference) !== ctx.factory.INT)
 			return null;
 		var tbl = _hashtables[ctx.factory.intValue(tableReference)];
@@ -424,19 +424,19 @@
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_create = function(ctx, currentTerm, initialSize, maxLoad) {
-		trace("SSL_indexedSet_create");
+		//trace("SSL_indexedSet_create");
 		_indexedSets.push(new _IndexedSet());
 		return ctx.factory.makeInt(_indexedSets.length - 1);
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_destroy = function(ctx, currentTerm, setIndex) {
-		trace("SSL_indexedSet_destroy");
+		//trace("SSL_indexedSet_destroy");
 		delete _indexedSets[ctx.factory.intValue(setIndex)];
 		return currentTerm;
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_reset = function(ctx, currentTerm, setIndex) {
-		trace("SSL_indexedSet_reset");
+		//trace("SSL_indexedSet_reset");
 		if(ctx.factory.termType(setIndex) !== ctx.factory.INT)
 			return null;
 		_indexedSets[ctx.factory.intValue(setIndex)].reset();
@@ -444,7 +444,7 @@
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_put = function(ctx, currentTerm, strategy, setIndex, key) {
-		trace("SSL_indexedSet_put : " + setIndex + " " + ctx.factory.prettify(key));
+		//trace("SSL_indexedSet_put : " + setIndex + " " + ctx.factory.prettify(key));
 		if(ctx.factory.termType(setIndex) !== ctx.factory.INT)
 			return null;
 		var set = _indexedSets[ctx.factory.intValue(setIndex)];
@@ -461,7 +461,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_indexedSet_remove = function(ctx, currentTerm, strategy, args) {
-		trace("SSL_indexedSet_remove");
+		//trace("SSL_indexedSet_remove");
 		if(ctx.factory.termType(args[0]) !== ctx.factory.INT)
 			return null;
 		var set = _indexedSets[args[0]];
@@ -471,19 +471,19 @@
 	}	
 
 	StrategoJS.SSL.SSL_indexedSet_getIndex = function(ctx, currentTerm, setIndex, key) {
-		trace("SSL_indexedSet_getIndex");
+		//trace("SSL_indexedSet_getIndex");
 		if(ctx.factory.termType(setIndex) !== ctx.factory.INT)
 			return null;
 		var set = _indexedSets[ctx.factory.intValue(setIndex)];
 		var keyAsString = ctx.factory.prettify(key);
-		trace("SSL_indexedSet_getIndex " + setIndex + " " + keyAsString);
+		//trace("SSL_indexedSet_getIndex " + setIndex + " " + keyAsString);
 		var r = set.getIndex(keyAsString);
 		//print(r);
 		return r === undefined ? null : r;
 	}
 
 	StrategoJS.SSL.SSL_indexedSet_elements = function(ctx, currentTerm, setIndex) {
-		trace("SSL_indexedSet_elements " + setIndex);
+		//trace("SSL_indexedSet_elements " + setIndex);
 		if(ctx.factory.termType(setIndex) !== ctx.factory.INT)
 			return null;
 		var set = _indexedSets[ctx.factory.intValue(setIndex)];
@@ -498,13 +498,13 @@
 	}
 
 	StrategoJS.SSL.SSL_hashtable_create = function(ctx, currentTerm, initialSize, maxLoad) {
-		trace("SSL_hashtable_create");
+		//trace("SSL_hashtable_create");
 		_hashtables.push(_makeHashtable());
 		return ctx.factory.makeInt(_hashtables.length - 1);
 	}
 
 	StrategoJS.SSL.SSL_hashtable_destroy = function(ctx, currentTerm, hashIndex) {
-		trace("SSL_hashtable_destroy");
+		//trace("SSL_hashtable_destroy");
 		if(ctx.factory.termType(hashIndex) !== ctx.factory.INT)
 			return null;
 		delete _hashtables[ctx.factory.intValue(hashIndex)];
@@ -512,12 +512,12 @@
 	}
 
 	StrategoJS.SSL.SSL_hashtable_put = function(ctx, currentTerm, hashIndexTerm, key, value) {
-		trace("SSL_hashtable_put");
+		//trace("SSL_hashtable_put");
 		if(ctx.factory.termType(hashIndexTerm) !== ctx.factory.INT)
 			return null;
 		var hash = _hashtables[ctx.factory.intValue(hashIndexTerm)];
 		var keyAsString = ctx.factory.prettify(key);
-		trace("SSL_hashtable_put " + hashIndexTerm + " " + keyAsString);
+		//trace("SSL_hashtable_put " + hashIndexTerm + " " + keyAsString);
 		if (keyAsString === "ModuleName")
 			debugger;
 
@@ -527,7 +527,7 @@
 	}
 
 	StrategoJS.SSL.SSL_hashtable_keys = function(ctx, currentTerm, hashIndex, key, value) {
-		trace("SSL_hashtable_keys " + hashIndex);
+		//trace("SSL_hashtable_keys " + hashIndex);
 		if(ctx.factory.termType(hashIndex) !== ctx.factory.INT)
 			return null;
 		var hash = _hashtables[ctx.factory.intValue(hashIndex)];
@@ -539,7 +539,7 @@
 	}
 
 	StrategoJS.SSL.SSL_hashtable_remove = function(ctx, currentTerm, hashIndex, key) {
-		trace("SSL_hashtable_remove");
+		//trace("SSL_hashtable_remove");
 		if(ctx.factory.termType(hashIndex) !== ctx.factory.INT)
 			return null;
 		var hash = _hashtables[ctx.factory.intValue(hashIndex)];
@@ -549,13 +549,13 @@
 	}
 
 	StrategoJS.SSL.SSL_table_hashtable = function(ctx, currentTerm) {
-		trace("SSL_table_hashtable");
+		//trace("SSL_table_hashtable");
 		return ctx.factory.makeInt(_TABLE_TABLE);
 	}
 	
 	StrategoJS.SSL.SSL_table_keys_fold = function(ctx, currentTerm, strategyToApply, first, hashIndex)
 	{
-		trace("SSL_table_keys_fold");
+		//trace("SSL_table_keys_fold");
 		var hash = _hashtables[hashIndex];
 		var result = first;
 		var nr = (typeof(first) === "number");
@@ -570,7 +570,7 @@
 	
 	StrategoJS.SSL.SSL_table_values_fold = function(ctx, currentTerm, strategyToApply, first, hashIndex)
 	{
-		trace("SSL_table_values_fold");
+		//trace("SSL_table_values_fold");
 		var hash = _hashtables[hashIndex];
 		var result = first;
 		for (var k in hash)
@@ -581,7 +581,7 @@
 	
 	StrategoJS.SSL.SSL_table_fold = function(ctx, currentTerm, strategyToApply, first, hashIndex)
 	{
-		trace("SSL_table_fold");
+		//trace("SSL_table_fold");
 		var hash = _hashtables[hashIndex];
 		var nr = (typeof(first) === "number");
 		var result = first;
@@ -598,7 +598,7 @@
 	
 	StrategoJS.SSL.SSL_list_loop = function(ctx, currentTerm, strategyToApply)
 	{
-		trace("SSL_list_loop");
+		//trace("SSL_list_loop");
 		if(ctx.factory.termType(currentTerm) !== ctx.factory.LIST)
 			return null;
 		var x = currentTerm;
@@ -614,7 +614,7 @@
 	}
 
 	StrategoJS.SSL.SSL_explode_string = function(ctx, currentTerm, string) {
-		trace("SSL_explode_string");
+		//trace("SSL_explode_string");
 		var f = ctx.factory;
 		if(f.termType(string) !== f.STRING)
 			return null;
@@ -628,7 +628,7 @@
 	}
 
 	StrategoJS.SSL.SSL_implode_string = function(ctx, currentTerm, list) {
-		trace("SSL_implode_string");
+		//trace("SSL_implode_string");
 		var f = ctx.factory;
 		if(f.termType(list) !== f.LIST)
 			return null;
@@ -642,7 +642,7 @@
 	}
 
 	StrategoJS.SSL.SSL_stacktrace_get_all_frame_names = function(ctx, currentTerm) {
-		trace("SSL_stacktrace_get_all_frame_names");
+		//trace("SSL_stacktrace_get_all_frame_names");
 		var frames = ctx.getStackFrames();
 		var f = ctx.factory;
 		var r = f.makeEmptyList();
@@ -654,7 +654,7 @@
 
 
 	StrategoJS.SSL.SSL_concat_strings = function(ctx, currentTerm, s1) {
-		trace("SSL_concat_strings");
+		//trace("SSL_concat_strings");
 		var f = ctx.factory;
 		if ((s1 !== null) && (f.termType(s1) === f.LIST))
 		{
@@ -666,7 +666,7 @@
 			{
 				if (f.getSubtermCount(f.tail(s1)) === 0)
 				{
-					trace("SSL_concat_strings (recursive) end");
+					//trace("SSL_concat_strings (recursive) end");
 					if (ctx.factory.termType(f.head(s1)) !== ctx.factory.STRING)
 					{
 						console.log("SSL_concat_strings prob - s1's head is not a string.");
@@ -686,7 +686,7 @@
 	}
 	
 	StrategoJS.SSL.SSL_strcat = function(ctx, currentTerm, lhs, rhs) {
-		trace("SSL_strcat");
+		//trace("SSL_strcat");
 		var f = ctx.factory;
 		if ((f.termType(lhs) !== f.STRING) || (f.termType(rhs) !== f.STRING))
 			return null;
@@ -697,12 +697,12 @@
 
 
 	StrategoJS.SSL.SSL_getenv = function(ctx, currentTerm, name) {
-		trace("SSL_getenv : " + ctx.factory.prettify(name));
+		//trace("SSL_getenv : " + ctx.factory.prettify(name));
 		return null;
 	}
 
 	StrategoJS.SSL.SSL_strlen = function(ctx, currentTerm, string) {
-		trace("SSL_strlen");
+		//trace("SSL_strlen");
 		if(ctx.factory.termType(string) !== ctx.factory.STRING)
 			return null;
 		return ctx.factory.makeInt(ctx.factory.stringValue(string).length);
@@ -714,13 +714,13 @@
 	}	
 
 	StrategoJS.SSL.SSL_is_int = function(ctx, currentTerm) {
-		trace("SSL_is_int");
+		//trace("SSL_is_int");
 		return ctx.factory.termType(currentTerm) === ctx.factory.INT;
 	}
 	
 	StrategoJS.SSL.SSL_int_to_string = function(ctx, currentTerm, intValue)
 	{
-		trace("SSL_int_to_string");
+		//trace("SSL_int_to_string");
 		if(ctx.factory.termType(intValue) !== ctx.factory.INT)
 			return null;
 		return ctx.factory.makeString(intValue.toString(10));
@@ -728,7 +728,7 @@
 	
 	StrategoJS.SSL.SSL_string_to_int = function(ctx, currentTerm, strValue)
 	{
-		trace("SSL_string_to_int")
+		//trace("SSL_string_to_int")
 		if(ctx.factory.termType(strValue) !== ctx.factory.STRING)
 			return null;
 		strValue = strValue.replace(/^\s+/, '').replace(/\s+$/, '');
@@ -740,7 +740,7 @@
 	
 	StrategoJS.SSL.SSL_times = function(ctx, currentTerm)
 	{
-		trace("SSL_times");
+		//trace("SSL_times");
 		var utime = ctx.factory.makeInt(StrategoJS.DateInMiliseconds(new Date()) - _startTime);
 		var stime = ctx.factory.makeInt(0);
 		var ctime = ctx.factory.makeInt(0);
@@ -756,7 +756,7 @@
 	
 	StrategoJS.SSL.SSL_TicksToSeconds = function(ctx, currentTerm)
 	{
-		trace("SSL_TicksToSeconds");
+		//trace("SSL_TicksToSeconds");
 		if (ctx.factory.termType(currentTerm) !== ctx.factory.INT)
 			return null;
 		if (ctx.factory.intValue(currentTerm) === 0)
@@ -767,7 +767,7 @@
 
 	StrategoJS.SSL.SSL_real_to_string = function(ctx, currentTerm, realValue)
 	{
-		trace("SSL_real_to_string");
+		//trace("SSL_real_to_string");
 		if(ctx.factory.termType(realValue) !== ctx.factory.REAL)
 			return null;
 		return ctx.factory.makeString(realValue.toString());
@@ -775,7 +775,7 @@
 	
 	StrategoJS.SSL.SSL_real_to_string_precision = function(ctx, currentTerm, realValue)
 	{
-		trace("SSL_real_to_string_precision");
+		//trace("SSL_real_to_string_precision");
 		if(ctx.factory.termType(realValue) !== ctx.factory.REAL)
 			return null;
 		return ctx.factory.makeString(realValue.toString());
@@ -783,20 +783,20 @@
 	
 	StrategoJS.SSL.SSL_EXT_pluginpath = function(ctx, currentTerm)
 	{
-		trace("SSL_EXT_pluginpath");
+		//trace("SSL_EXT_pluginpath");
 		return ctx.factory.makeString("");
 	}
 	
 	StrategoJS.SSL.SSL_EXT_pluginpath = function(ctx, currentTerm)
 	{
-		trace("SSL_EXT_pluginpath");
+		//trace("SSL_EXT_pluginpath");
 		return ctx.factory.makeString("");
 	}	
 	
 	
 	StrategoJS.SSL.SSL_EXT_clone_and_set_parents = function(ctx, currentTerm)
 	{
-		trace("SSL_EXT_clone_and_set_parents");
+		//trace("SSL_EXT_clone_and_set_parents");
 		var clone = (function(){
 			return function(obj) { Clone.prototype=obj; return new Clone() };
 			function Clone() {}
@@ -808,7 +808,7 @@
 
 	StrategoJS.SSL.SSL_get_appl_arguments_map = function(ctx, currentTerm, strategyToApply, input)
 	{
-		trace("SSL_get_appl_arguments_map");
+		//trace("SSL_get_appl_arguments_map");
 		var f = ctx.factory;
 		if (f.termType(input) !== f.APPL && f.termType(input) !== f.TUPLE)
 			return null;
@@ -827,7 +827,7 @@
 	
 	StrategoJS.SSL.JSSGLR_GET_PARSER = function(ctx, parsetable)
 	{
-		trace("JSSGLR_GET_PARSER");
+		//trace("JSSGLR_GET_PARSER");
 		if (testStoreParser === undefined)
 			testStoreParser = self.spoofax.createParserSync(parsetable); //TODO: actually fix this thourgh use of hash on parsetable or something. (caching the parser instance in a hashset)
 		return testStoreParser; 
@@ -835,14 +835,14 @@
 	
 	StrategoJS.SSL.JSSGLR_PARSE_STRING = function(ctx, sourcecodeparam, parser)
 	{
-		trace("JSSGLR_Parse_String");
+		//trace("JSSGLR_Parse_String");
 		var sourcecode = ctx.factory.stringValue(sourcecodeparam).replace(/^#!.*\n/, "\n");
 		var splitlines = sourcecode.split('\n');
 		//var result = parser.parseAndTokenize(splitlines.length, sourcecode);
 		var result = parser.parse(sourcecode);
 		if (result === null)
 		{
-			trace("parse error");
+			//trace("parse error");
 			return null;
 		}
 		result.getLineCount = function() { return splitlines.length; }
@@ -852,7 +852,7 @@
 	StrategoJS.SSL.JSSGLR_ACE_TOKENIZE = function(ctx, astpluserrors, parser)
 	{
 		
-		trace("JSSGLR_ACE_TOKENIZE");
+		//trace("JSSGLR_ACE_TOKENIZE");
 		if (astpluserrors.subtermCount !== 2)
 			return null;
 		var ast = astpluserrors.getSubterm(0); 
@@ -891,7 +891,7 @@
 							else
 							{
 								debugger;
-								trace("tokenizer error: '" + error.head[1] + "' could not be bound to a term.");
+								//trace("tokenizer error: '" + error.head[1] + "' could not be bound to a term.");
 								break;
 							}
 						}
@@ -918,20 +918,20 @@
 	
 	StrategoJS.SSL.SSL_access = function(ctx, a, b, c, d, e)
 	{
-		trace("SSL_access");
-		trace("JS mode - no file acces. returning null.");
+		//trace("SSL_access");
+		//trace("JS mode - no file acces. returning null.");
 		return null;
 	}
 	StrategoJS.SSL.SSL_new = function(ctx, a, b, c, d, e)
 	{
-		trace("SSL_new");
+		//trace("SSL_new");
 		var uniquestr = Number(new Date())+""+_counter++;
 		return ctx.factory.makeString(uniquestr);
 	}
 	
 	StrategoJS.SSL.SSL_newname = function(ctx, a, b, c, d, e)
 	{
-		trace("SSL_newname");
+		//trace("SSL_newname");
 		var uniquestr = Number(new Date())+""+_counter++;
 		var res = new String(a+"."+uniquestr);
 		res.termType = a.termType;
@@ -947,7 +947,7 @@
 	
 	StrategoJS.SSL.SSL_eval_js = function(ctx, str)
 	{
-		trace("SSL_eval_js");
+		//trace("SSL_eval_js");
 		eval(ctx.factory.stringValue(str));
 		return str;
 	}
@@ -959,7 +959,7 @@
 	
 	StrategoJS.SSL.SSL_EXT_get_parent = function(ctx, term)
 	{
-		trace("SSL_EXT_get_parent");
+		//trace("SSL_EXT_get_parent");
 		if (term.annoType === ctx.factory.ANNO)
 		{
 			if (term.annos.head.termType === ctx.factory.LIST)
@@ -986,7 +986,7 @@
 	
 	StrategoJS.SSL.LANG_index_setup = function(ctx, term, langname, path, partitionTerm)
 	{
-		trace("LANG_index_setup");
+		//trace("LANG_index_setup");
 		if (!StrategoJS.Index.loadIndex(ctx.factory.stringValue(langname), ctx.factory.stringValue(partitionTerm)))
 			return null;
 		return term;
@@ -994,7 +994,7 @@
 	
 	StrategoJS.SSL.LANG_index_start_transaction = function(ctx, term)
 	{
-		trace("LANG_index_start_transaction");
+		//trace("LANG_index_start_transaction");
 		if (!StrategoJS.Index.start_transaction())
 			return null;
 		return term;
@@ -1002,7 +1002,7 @@
 	
 	StrategoJS.SSL.LANG_index_get_all_in_file = function(ctx, term, filepath)
 	{
-		trace("LANG_index_get_all_in_file");
+		//trace("LANG_index_get_all_in_file");
 		var f = ctx.factory;
 		if(f.termType(filepath) !== f.STRING && f.termType(filepath) !== f.TUPLE)
 			return null;
@@ -1020,7 +1020,7 @@
 	
 	StrategoJS.SSL.LANG_index_clear_file = function(ctx, term, filepath)
 	{
-		trace("LANG_index_clear_file");
+		//trace("LANG_index_clear_file");
 		var f = ctx.factory;
 		if(f.termType(filepath) !== f.STRING && f.termType(filepath) !== f.TUPLE)
 			return null;
@@ -1032,7 +1032,7 @@
 	
 	StrategoJS.SSL.LANG_index_set_current_file = function(ctx, term, filepath)
 	{
-		trace("LANG_index_set_current_file");
+		//trace("LANG_index_set_current_file");
 		var f = ctx.factory;
 		if(f.termType(filepath) !== f.STRING && f.termType(filepath) !== f.TUPLE)
 			return null;
@@ -1047,19 +1047,13 @@
 		var f = ctx.factory;
 		if (!  ((f.termType(entryappl) === f.APPL && ((f.termType(indexpartitiondescriptor) === f.TUPLE) || (f.termType(indexpartitiondescriptor) === f.STRING)))))
 			return null;
-		var obj = indexpartitiondescriptor;
-		if (f.termType(obj) === f.TUPLE)
-		{
-			obj = f.getSubterm(obj,0);
-		}
-		if (f.termType(obj) !== f.STRING)
-		{
-			debugger;
-			return null;			
-		}
-		var indexuri = ctx.factory.stringValue(obj);
+
+		var indexuri = StrategoJS.SSL.INTERNAL_term_to_index_url(ctx, term);
 		
-		trace("LANG_index_add - added: " + indexuri);
+		if (indexuri === null)
+			return null;
+		debugger;
+		//trace("LANG_index_add - added: " + indexuri);
 		if (!StrategoJS.Index.add(indexuri, entryappl))
 			return null;
 		
@@ -1068,21 +1062,27 @@
 	
 	StrategoJS.SSL.LANG_index_get = function(ctx, term, entryappl)
 	{
-		//debugger;
 		trace("LANG_index_get");
 		var f = ctx.factory;
 		if (f.termType(entryappl) !== f.APPL)
 			return null;
 		
+		var indexuri = StrategoJS.SSL.INTERNAL_term_to_index_url(ctx, term);
+		
+		entries = StrategoJS.Index.get(indexuri);
 		
-		entries = StrategoJS.Index.get();
 
 		
 		var r = f.makeEmptyList();
 		
-		for(var i = 0; i < entries.length; i++) {
-			r = f.makeListCons(entries[i], r);
-			r.editortoken = entries.editortoken;
+		if (entries !== undefined)
+		{
+			for(var i = 0; i < entries.length; i++) {
+				if (entries[i].name !== entryappl.name)
+					continue;
+				r = f.makeListCons(entries[i], r);
+				r.editortoken = entries.editortoken;
+			}
 		}
 		
 		return r;		
@@ -1090,7 +1090,7 @@
 	
 	StrategoJS.SSL.LANG_index_end_transaction = function(ctx, term)
 	{
-		trace("LANG_index_end_transaction");
+		//trace("LANG_index_end_transaction");
 		if (!StrategoJS.Index.end_transaction())
 			return null;
 		return term;
@@ -1098,7 +1098,7 @@
 	
 	StrategoJS.SSL.LANG_index_get_files_of = function(ctx, term, template)
 	{
-		trace("LANG_index_get_files_of");
+		//trace("LANG_index_get_files_of");
 		var f = ctx.factory;
 		if(f.termType(template) !== f.APPL)
 			return null;
@@ -1117,7 +1117,7 @@
 	
 	StrategoJS.SSL.LANG_index_remove = function(ctx, term, template, path)
 	{
-		trace("LANG_index_remove");
+		//trace("LANG_index_remove");
 		if (!StrategoJS.Index.remove(template, ctx.factory.stringValue(path)))
 			return null;
 		return term;
@@ -1125,10 +1125,33 @@
 
 	StrategoJS.SSL.LANG_index_get_children = function(ctx, term, a,b,c)
 	{
-		trace("LANG_index_get_children");
+		//trace("LANG_index_get_children");
 		//todo
 		return ctx.factory.makeEmptyList();
 	}
+	
+	StrategoJS.SSL.INTERNAL_term_to_index_url = function(ctx, term)
+	{
+		if (ctx.factory.termType(term) !== ctx.factory.APPL)
+			return null;
+		if (term.subtermCount < 1)
+			return null;
+		var subterm = term.getSubterm(0);
+		if (ctx.factory.termType(subterm) !== ctx.factory.LIST)
+			return null;
+		var url = "";
+		var count = 0;
+		while(!ctx.factory.isEmptyList(subterm)) {
+			url += ctx.factory.prettify(subterm.head);
+			if (count === 0)
+				url += "://";
+			else
+				url += "/";
+			subterm = ctx.factory.tail(subterm);	
+			count++;
+		}
+		return url;
+	}
 
 
 	return true;

Modified: strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Thu Dec 20 14:10:08 2012	(r25803)
+++ strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Fri Dec 21 00:06:42 2012	(r25804)
@@ -4,7 +4,7 @@
 
  // The global namespace for Stratego JavaScript backend
 
-DEBUGMODE = true;
+DEBUGMODE = false;
 
 StrategoJS = {};
 

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Thu Dec 20 14:10:08 2012	(r25803)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Fri Dec 21 00:06:42 2012	(r25804)
@@ -7,7 +7,6 @@
 StrategoJS.Term = {}
 
 StrategoJS.Term._loaded = function() {
-
 	//
 	//  private term implementation
 	//

From richard at vogelij.nl  Fri Dec 21 16:05:58 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Fri, 21 Dec 2012 15:05:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25805 -
	strategoxt-javascript-backend/trunk/src/javascript
Message-ID: <20121221150558.67AF6CC1E2@mx4.tudelft.nl>

Author: rvogelij
Date: Fri Dec 21 15:05:54 2012
New Revision: 25805
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25805&sc=1

Log:
now does not fail the tests written for the stratego index

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/index.js
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js

Modified: strategoxt-javascript-backend/trunk/src/javascript/index.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/index.js	Fri Dec 21 00:06:42 2012	(r25804)
+++ strategoxt-javascript-backend/trunk/src/javascript/index.js	Fri Dec 21 15:05:54 2012	(r25805)
@@ -7,12 +7,15 @@
 	StrategoJS.Index.CurrentFile = null;
 	
 	StrategoJS.Index.Files = [];
+	StrategoJS.Index.FilesParents = [];
 	
 	StrategoJS.Index.loadIndex = function(langname, path)
 	{
 		StrategoJS.Index.CurrentFile = path;
-		if (StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] === undefined)
+		//if (StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] === undefined)
 			StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] = [];
+		//if (StrategoJS.Index.Files[StrategoJS.Index.FilesParents] === undefined)
+			StrategoJS.Index.Files[StrategoJS.Index.FilesParents] = [];
 		return true;
 	}
 	
@@ -48,36 +51,57 @@
 		return true;
 	}
 	
-	StrategoJS.Index.add = function(url, value)
+	StrategoJS.Index.add = function(uri, parenturi, value)
 	{
+
 		if (StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] === undefined)
 			StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] = [];
-		var element = { key: url, val: value };
+		if (StrategoJS.Index.FilesParents[StrategoJS.Index.CurrentFile] === undefined)
+			StrategoJS.Index.FilesParents[StrategoJS.Index.CurrentFile] = [];
+		
+		var element = { key: uri, val: value };
+		var parentelement = { key: parenturi, val: value };
 		StrategoJS.Index.Files[StrategoJS.Index.CurrentFile].push(element);
+		StrategoJS.Index.FilesParents[StrategoJS.Index.CurrentFile].push(parentelement);
 		return true;
 	}
 	
-	//should return a collection of index entries based on a APPL template
-	StrategoJS.Index.get = function(url)
+	StrategoJS.Index.get = function(uri)
 	{
 		var r = [];
 		for (var i = 0; i < StrategoJS.Index.Files[StrategoJS.Index.CurrentFile].length; i++)
-		{
-			if (StrategoJS.Index.Files[StrategoJS.Index.CurrentFile][i].key === url)
-			{
-				debugger;
+			if (StrategoJS.Index.Files[StrategoJS.Index.CurrentFile][i].key === uri)
 				r.push(StrategoJS.Index.Files[StrategoJS.Index.CurrentFile][i].val);
-			}
-		}
-		
 		return r;
 	}
 	
+	StrategoJS.Index.get_children = function(parenturi)
+	{
+		var r = [];
+		for (var i = 0; i < StrategoJS.Index.FilesParents[StrategoJS.Index.CurrentFile].length; i++)
+			if (StrategoJS.Index.FilesParents[StrategoJS.Index.CurrentFile][i].key === parenturi)
+				r.push(StrategoJS.Index.FilesParents[StrategoJS.Index.CurrentFile][i].val);
+		return r;
+	}
+	
+	
 	StrategoJS.Index.remove = function(template, path)
 	{
-		var table = StrategoJS.Index.Files[path];
-		if (table != null)
-			delete table[template];
+		//console.log("index remove: " + path);
+		//debugger;
+		StrategoJS.Index.Files[path] = [];
+		StrategoJS.Index.FilesParents[path] = [];
+		return true;
+	}
+	
+	StrategoJS.Index.clear_all = function(template, path)
+	{
+		StrategoJS.Index.Files = [];
+		StrategoJS.Index.FilesParents = [];
+		if (StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] === undefined)
+			StrategoJS.Index.Files[StrategoJS.Index.CurrentFile] = [];
+		if (StrategoJS.Index.FilesParents[StrategoJS.Index.CurrentFile] === undefined)
+			StrategoJS.Index.FilesParents[StrategoJS.Index.CurrentFile] = [];
 		return true;
 	}
 	

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Dec 21 00:06:42 2012	(r25804)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Dec 21 15:05:54 2012	(r25805)
@@ -56,7 +56,7 @@
 
 	StrategoJS.SRTS.SRTS_one = function(ctx, term, fun) {
 		trace("SRTS_one : " + (term ? ctx.factory.prettify(term) : "undefined term"));
-		debugger;
+		//debugger;
 		var factory = ctx.factory;
 		var termType = factory.termType(term)
 		switch(termType) {
@@ -237,6 +237,29 @@
 			throw "invalid list tail, " + StrategoJS.Term.termType(term);
 		return term;
 	}
+	
+	StrategoJS.SRTS.SRTS_EXT_eq_ignore_annos_0_1 = function(ctx, lhs, rhs)
+	{
+		var factory = ctx.factory;
+		debugger;
+		console.log("SRTS_EXT_eq_ignore_annos_0_1:\n\t" + factory.prettify(lhs) + "\n\t" + factory.prettify(rhs));
+		if(lhs === undefined || rhs === undefined) throw "equals on undefined";
+		var lt = factory.termType(lhs);
+		var rt = factory.termType(rhs);
+		if(lt !== rt)
+			return false;
+		if(lt === factory.REAL)
+			if (factory.realValue(lhs) === factory.realValue(rhs))
+				return lhs;
+		if(lt === factory.INT)
+			if (factory.intValue(lhs) === factory.intValue(rhs))
+				return lhs;
+		if(lt === factory.STRING)
+			if (factory.stringValue(lhs) === factory.stringValue(rhs))
+				return lhs;
+		return null;
+	}	
+
 
 	return true;
 }();

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Fri Dec 21 00:06:42 2012	(r25804)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Fri Dec 21 15:05:54 2012	(r25805)
@@ -68,7 +68,13 @@
 	}
 
 	StrategoJS.SSL.SSL_mkterm = function(ctx, currentTerm, ctorTerm, args) {
-		//trace("SSL_mkterm " + ctorTerm + " - " + args);
+		try
+		{
+		//console.log("SSL_mkterm " + ctx.factory.prettify(ctorTerm) + " - " + ctx.factory.prettify(args));
+		} catch (err)
+		{
+			debugger;
+		}
 		//debugger;
 		var factory = ctx.factory;
 		var termType = factory.termType(ctorTerm);
@@ -302,7 +308,8 @@
 		var ctor = ctx.factory.getConstructor(term);
 		if (ctor.arity !== undefined)
 		{
-			ctor = ctor.name;
+			//debugger;
+			//ctor = ctor.name;
 		}
 		return ctor;
 	}
@@ -822,100 +829,7 @@
 		return r;
 	}
 
-	
-	var testStoreParser = undefined;
-	
-	StrategoJS.SSL.JSSGLR_GET_PARSER = function(ctx, parsetable)
-	{
-		//trace("JSSGLR_GET_PARSER");
-		if (testStoreParser === undefined)
-			testStoreParser = self.spoofax.createParserSync(parsetable); //TODO: actually fix this thourgh use of hash on parsetable or something. (caching the parser instance in a hashset)
-		return testStoreParser; 
-	}
-	
-	StrategoJS.SSL.JSSGLR_PARSE_STRING = function(ctx, sourcecodeparam, parser)
-	{
-		//trace("JSSGLR_Parse_String");
-		var sourcecode = ctx.factory.stringValue(sourcecodeparam).replace(/^#!.*\n/, "\n");
-		var splitlines = sourcecode.split('\n');
-		//var result = parser.parseAndTokenize(splitlines.length, sourcecode);
-		var result = parser.parse(sourcecode);
-		if (result === null)
-		{
-			//trace("parse error");
-			return null;
-		}
-		result.getLineCount = function() { return splitlines.length; }
-		return result;
-	}
-	
-	StrategoJS.SSL.JSSGLR_ACE_TOKENIZE = function(ctx, astpluserrors, parser)
-	{
-		
-		//trace("JSSGLR_ACE_TOKENIZE");
-		if (astpluserrors.subtermCount !== 2)
-			return null;
-		var ast = astpluserrors.getSubterm(0); 
-		var errors = astpluserrors.getSubterm(1);
-		if (errors.subtermCount !== 3)
-			return null;
-		var lineCount = ast.getLineCount();
-		//var errorArr = new Array(errors.subtermCount);		
-		var i = 0;
-		var curErrorTypeErrors = errors;
-		
-		var errorType = new Array(3);
-		errorType[0] = 'invalid.illegal';//error
-		errorType[1] = 'invalid.deprecated';//warningerror
-		errorType[2] = 'invalid.deprecated';//notice
-		parser.initTokenTable();
-		
-		while (curErrorTypeErrors.head !== null)
-		{
-			var error = curErrorTypeErrors.head;
-			while (error.head !== null)
-			{
-				if (error.head[0] !== undefined)
-				{
-					var errterm = error.head[0];
-					var editortoken = errterm.editortoken;
-					while ((editortoken === undefined) && (errterm !== undefined)) //go through the term until a token is found.
-					{
-						editortoken = errterm.editortoken;
-						if (editortoken === undefined)
-						{
-							if (errterm.annoType)
-								errterm = errterm.term;
-							else if (errterm.getSubterm !== undefined)
-								errterm = errterm.getSubterm(0);
-							else
-							{
-								debugger;
-								//trace("tokenizer error: '" + error.head[1] + "' could not be bound to a term.");
-								break;
-							}
-						}
-					}
-					
-					
-					if (editortoken !== undefined)
-					{
-						parser.addTokenToTable(editortoken.tokenLeft, errorType[i], ctx.factory.stringValue(error.head[1]), errterm);
-						parser.addTokenToTable(editortoken.tokenRight, errorType[i], ctx.factory.stringValue(error.head[1]), errterm);
-					} else
-					{
-						//error without a token:( 
-					}
-				}
-				error = error.tail;				
-			}
-			curErrorTypeErrors = curErrorTypeErrors.tail;
-			i++;
-		}
-		var jssglrparsed = parser.Tokenize(ast, lineCount);
-		return jssglrparsed;
-	}
-	
+
 	StrategoJS.SSL.SSL_access = function(ctx, a, b, c, d, e)
 	{
 		//trace("SSL_access");
@@ -1044,49 +958,66 @@
 	StrategoJS.SSL.LANG_index_add = function(ctx, term, entryappl, indexpartitiondescriptor)
 	{
 		trace("LANG_index_add");
+		//console.log("INDEX_add: " + ctx.factory.prettify(indexpartitiondescriptor));
 		var f = ctx.factory;
 		if (!  ((f.termType(entryappl) === f.APPL && ((f.termType(indexpartitiondescriptor) === f.TUPLE) || (f.termType(indexpartitiondescriptor) === f.STRING)))))
 			return null;
-
-		var indexuri = StrategoJS.SSL.INTERNAL_term_to_index_url(ctx, term);
-		
-		if (indexuri === null)
+		var uris = StrategoJS.SSL.INTERNAL_term_to_index_url(ctx, entryappl);
+		if (uris === null)
 			return null;
-		debugger;
-		//trace("LANG_index_add - added: " + indexuri);
-		if (!StrategoJS.Index.add(indexuri, entryappl))
+		
+		//trace("LANG_index_add - added: " + uris.uri + " Parent: " + uris.parenturi);
+		if (!StrategoJS.Index.add(uris.uri, uris.parenturi, entryappl))
 			return null;
 		
 		return term;		
 	}
 	
-	StrategoJS.SSL.LANG_index_get = function(ctx, term, entryappl)
+	StrategoJS.SSL.LANG_index_get = function(ctx, term, template)
 	{
-		trace("LANG_index_get");
-		var f = ctx.factory;
-		if (f.termType(entryappl) !== f.APPL)
+		//trace("LANG_index_get");
+		if (ctx.factory.termType(template) !== ctx.factory.APPL)
 			return null;
+		var uris = StrategoJS.SSL.INTERNAL_term_to_index_url(ctx, template);
+		if (uris === null)
+			return null;
+		entries = StrategoJS.Index.get(uris.uri);
+		var template_cons = template.getConstructor();
+		return StrategoJS.SSL.INTERNAL_index_get_array_to_strts(ctx.factory, template_cons, entries);
+	}
+	
+	
+	StrategoJS.SSL.LANG_index_get_children = function(ctx, term, template, a, b)
+	{
+		//trace("LANG_index_get_children");
+		if (ctx.factory.termType(template) !== ctx.factory.APPL)
+			return null;
+		var uris = StrategoJS.SSL.INTERNAL_term_to_index_url(ctx, template);
+		if (uris === null)
+			return null;
+		entries = StrategoJS.Index.get_children(uris.uri);
+		var template_cons = template.getConstructor();
+		return StrategoJS.SSL.INTERNAL_index_get_array_to_strts(ctx.factory, template_cons, entries);
+	}	
+	
+	StrategoJS.SSL.INTERNAL_index_get_array_to_strts = function(factory, constructor, arr)
+	{
+		var r = factory.makeEmptyList();
 		
-		var indexuri = StrategoJS.SSL.INTERNAL_term_to_index_url(ctx, term);
-		
-		entries = StrategoJS.Index.get(indexuri);
-		
-
-		
-		var r = f.makeEmptyList();
-		
-		if (entries !== undefined)
+		if (arr !== undefined)
 		{
-			for(var i = 0; i < entries.length; i++) {
-				if (entries[i].name !== entryappl.name)
+			for(var i = 0; i < arr.length; i++) {
+				var indexentry_cons = arr[i].getConstructor(); 
+				if ((indexentry_cons.name !== constructor.name) || (indexentry_cons.arity !== constructor.arity))
 					continue;
-				r = f.makeListCons(entries[i], r);
-				r.editortoken = entries.editortoken;
+				r = factory.makeListCons(arr[i], r);
+				r.editortoken = arr.editortoken;
 			}
-		}
-		
-		return r;		
-	}	
+		} 
+		return r;				
+	}
+	
+	
 	
 	StrategoJS.SSL.LANG_index_end_transaction = function(ctx, term)
 	{
@@ -1122,14 +1053,18 @@
 			return null;
 		return term;
 	}
-
-	StrategoJS.SSL.LANG_index_get_children = function(ctx, term, a,b,c)
+	StrategoJS.SSL.LANG_index_clear_all = function(ctx, term, a, b)
 	{
-		//trace("LANG_index_get_children");
-		//todo
-		return ctx.factory.makeEmptyList();
+		//trace("LANG_index_clear_all");
+		debugger;
+		if (!StrategoJS.Index.clear_all())
+			return null;
+		
+		return term;
 	}
+		
 	
+
 	StrategoJS.SSL.INTERNAL_term_to_index_url = function(ctx, term)
 	{
 		if (ctx.factory.termType(term) !== ctx.factory.APPL)
@@ -1139,20 +1074,128 @@
 		var subterm = term.getSubterm(0);
 		if (ctx.factory.termType(subterm) !== ctx.factory.LIST)
 			return null;
-		var url = "";
+		uri = "";
+		parenturi = "";
+		
 		var count = 0;
 		while(!ctx.factory.isEmptyList(subterm)) {
-			url += ctx.factory.prettify(subterm.head);
+			uri += ctx.factory.prettify(subterm.head);
+			if (count !== 1)
+				parenturi += ctx.factory.prettify(subterm.head);
+			
 			if (count === 0)
-				url += "://";
-			else
-				url += "/";
+			{
+				uri += "://";
+				parenturi += "://";
+			} else
+			{
+				uri += "/";
+				if (count !== 1)
+					parenturi += "/";
+			}
+			
 			subterm = ctx.factory.tail(subterm);	
 			count++;
 		}
-		return url;
+		return { uri: uri, parenturi:parenturi };
 	}
 
+	
+	
+	var testStoreParser = undefined;
+	
+	StrategoJS.SSL.JSSGLR_GET_PARSER = function(ctx, parsetable)
+	{
+		//trace("JSSGLR_GET_PARSER");
+		if (testStoreParser === undefined)
+			testStoreParser = self.spoofax.createParserSync(parsetable); //TODO: actually fix this thourgh use of hash on parsetable or something. (caching the parser instance in a hashset)
+		return testStoreParser; 
+	}
+	
+	StrategoJS.SSL.JSSGLR_PARSE_STRING = function(ctx, sourcecodeparam, parser)
+	{
+		//trace("JSSGLR_Parse_String");
+		var sourcecode = ctx.factory.stringValue(sourcecodeparam).replace(/^#!.*\n/, "\n");
+		var splitlines = sourcecode.split('\n');
+		//var result = parser.parseAndTokenize(splitlines.length, sourcecode);
+		var result = parser.parse(sourcecode);
+		if (result === null)
+		{
+			//trace("parse error");
+			return null;
+		}
+		result.getLineCount = function() { return splitlines.length; }
+		return result;
+	}
+	
+	StrategoJS.SSL.JSSGLR_ACE_TOKENIZE = function(ctx, astpluserrors, parser)
+	{
+		//trace("JSSGLR_ACE_TOKENIZE");
+		if (astpluserrors.subtermCount !== 2)
+			return null;
+		var ast = astpluserrors.getSubterm(0); 
+		var errors = astpluserrors.getSubterm(1);
+		if (errors.subtermCount !== 3)
+			return null;
+		var lineCount = ast.getLineCount();
+		//var errorArr = new Array(errors.subtermCount);		
+		var i = 0;
+		var curErrorTypeErrors = errors;
+		var errorType = new Array(3);
+		errorType[0] = 'invalid.illegal';//error
+		errorType[1] = 'invalid.deprecated';//warningerror
+		errorType[2] = 'invalid.deprecated';//notice
+		parser.initTokenTable();
+		
+		while (curErrorTypeErrors.head !== null)
+		{
+			var error = curErrorTypeErrors.head;
+			
+			while (error.head !== null)
+			{
+				if (error.head[0] !== undefined)
+				{
+					var errterm = error.head[0];
+					var editortoken = errterm.editortoken;
+					while ((editortoken === undefined) && (errterm !== undefined)) //go through the term until a token is found.
+					{
+						editortoken = errterm.editortoken;
+						if (editortoken === undefined)
+						{
+							if (errterm.annoType)
+								errterm = errterm.term;
+							else if (errterm.getSubterm !== undefined)
+								errterm = errterm.getSubterm(0);
+							else
+							{
+								debugger;
+								//trace("tokenizer error: '" + error.head[1] + "' could not be bound to a term.");
+								break;
+							}
+						}
+					}
+					
+					
+					if (editortoken !== undefined)
+					{
+						parser.addTokenToTable(editortoken.tokenLeft, errorType[i], ctx.factory.stringValue(error.head[1]), errterm);
+						parser.addTokenToTable(editortoken.tokenRight, errorType[i], ctx.factory.stringValue(error.head[1]), errterm);
+					} else
+					{
+						//error without a token:( 
+						console.log("tokenless error!:(");
+						debugger;
+					}
+				}
+				error = error.tail;				
+			}
+			curErrorTypeErrors = curErrorTypeErrors.tail;
+			i++;
+		}
+		var jssglrparsed = parser.Tokenize(ast, lineCount);
+		return jssglrparsed;
+	}
+		
 
 	return true;
 }();

Modified: strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Fri Dec 21 00:06:42 2012	(r25804)
+++ strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Fri Dec 21 15:05:54 2012	(r25805)
@@ -24,7 +24,10 @@
 				return lib[funName];
 			}
 		}
-		return function () { debugger; }
+		
+		return function () {
+			console.log("Function name: " + funName + "cannot be resolved");
+			debugger; }
 		//throw "function " + funName + " could not be resolved"; 
 	}
 	

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Fri Dec 21 00:06:42 2012	(r25804)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Fri Dec 21 15:05:54 2012	(r25805)
@@ -32,7 +32,7 @@
 		StrategoJS.error('\n\n');
 		
 		
-		//debugger;
+		debugger;
 		
 		var tp = typeof(term);
 		if(tp === 'number')
@@ -597,7 +597,8 @@
 					getConstructor : function() {
 						return { 
 							name : r.name, 
-							arity : r.subtermCount 
+							arity : r.subtermCount,
+							termType : APPL
 						};
 					}, 
 					equals : function(other) {
@@ -704,6 +705,7 @@
 			},
 
 			annotateTerm : function(term, annos) {
+				//console.log("annotateTerm: " + factory.prettify(term) + " - " + factory.prettify(annos));
 				if(factory.isEmptyList(annos))
 					return term.term ? term.term : term;
 				if(term.annoType)
@@ -733,7 +735,6 @@
 				return term;
 			}
 	};
-	 
 	StrategoJS.Term = factory;
 	return true;
 	

From richard at vogelij.nl  Sun Dec 30 12:02:08 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Sun, 30 Dec 2012 11:02:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25806 - in
	strategoxt-javascript-backend/trunk: src/javascript tests
Message-ID: <20121230110208.402932B801C@mx2.tudelft.nl>

Author: rvogelij
Date: Sun Dec 30 11:02:06 2012
New Revision: 25806
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25806&sc=1

Log:
stopped debug mode builds 
added some missing stratego lib functions

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/tests/Makefile

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Dec 21 15:05:54 2012	(r25805)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Dec 30 11:02:06 2012	(r25806)
@@ -259,6 +259,21 @@
 				return lhs;
 		return null;
 	}	
+	
+	StrategoJS.SRTS.pp_aterm_box_0_0 = function(ctx, term, p,p2)
+	{
+		return term;
+	}
+	
+	StrategoJS.SRTS.box2text_string_0_1 = function(ctx, term, p,p2)
+	{
+		return ctx.factory.makeString(ctx.factory.prettify(p));
+	}
+	
+	StrategoJS.SRTS.parse_file_2_1 = function(ctx, term, p, p2, p3)
+	{
+		return ctx.factory.makeString("");
+	}
 
 
 	return true;

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Fri Dec 21 15:05:54 2012	(r25805)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Sun Dec 30 11:02:06 2012	(r25806)
@@ -957,7 +957,7 @@
 	
 	StrategoJS.SSL.LANG_index_add = function(ctx, term, entryappl, indexpartitiondescriptor)
 	{
-		trace("LANG_index_add");
+		//trace("LANG_index_add");
 		//console.log("INDEX_add: " + ctx.factory.prettify(indexpartitiondescriptor));
 		var f = ctx.factory;
 		if (!  ((f.termType(entryappl) === f.APPL && ((f.termType(indexpartitiondescriptor) === f.TUPLE) || (f.termType(indexpartitiondescriptor) === f.STRING)))))
@@ -969,12 +969,14 @@
 		//trace("LANG_index_add - added: " + uris.uri + " Parent: " + uris.parenturi);
 		if (!StrategoJS.Index.add(uris.uri, uris.parenturi, entryappl))
 			return null;
-		
+		console.log("LANG_index_add("+uris.uri+")  --> " + ctx.factory.prettify(entryappl));
+		console.log("LANG_index_add2("+uris.parenturi+")  --> " + ctx.factory.prettify(entryappl));
 		return term;		
 	}
 	
 	StrategoJS.SSL.LANG_index_get = function(ctx, term, template)
 	{
+		debugger;
 		//trace("LANG_index_get");
 		if (ctx.factory.termType(template) !== ctx.factory.APPL)
 			return null;
@@ -983,7 +985,9 @@
 			return null;
 		entries = StrategoJS.Index.get(uris.uri);
 		var template_cons = template.getConstructor();
-		return StrategoJS.SSL.INTERNAL_index_get_array_to_strts(ctx.factory, template_cons, entries);
+		var result = StrategoJS.SSL.INTERNAL_index_get_array_to_strts(ctx.factory, template_cons, entries);
+		console.log("LANG_index_get("+ctx.factory.prettify(template)+" -> "+uris.uri+")  --> " + ctx.factory.prettify(result));
+		return result;
 	}
 	
 	
@@ -997,7 +1001,9 @@
 			return null;
 		entries = StrategoJS.Index.get_children(uris.uri);
 		var template_cons = template.getConstructor();
-		return StrategoJS.SSL.INTERNAL_index_get_array_to_strts(ctx.factory, template_cons, entries);
+		var result = StrategoJS.SSL.INTERNAL_index_get_array_to_strts(ctx.factory, template_cons, entries);
+		console.log("LANG_index_get_children("+ctx.factory.prettify(template)+" -> "+uris.uri+")  --> " + ctx.factory.prettify(result));
+		return result;
 	}	
 	
 	StrategoJS.SSL.INTERNAL_index_get_array_to_strts = function(factory, constructor, arr)

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Fri Dec 21 15:05:54 2012	(r25805)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Sun Dec 30 11:02:06 2012	(r25806)
@@ -2,11 +2,16 @@
 BASICFILES := $(wildcard basic/*.str)
 MISCFILES  := $(wildcard misc/*.str)
 TOFIXFILES := $(wildcard fixthese/*.str)
+
+INDEXTESTS := $(wildcard index/*.str)
+
 TESTFILES  := $(COREFILES) $(BASICFILES) $(MISCFILES)
 JSFILES    := $(subst .str,*.js,$(TESTFILES))
 TESTRUNS   := $(subst .str,.run,$(TESTFILES))
 TOFIXRUNS  := $(subst .str,.run,$(TOFIXFILES))
 
+INDEXRUNS   := $(subst .str,.run,$(INDEXTESTS))
+
 RUN=node
 
 ifndef V
@@ -14,7 +19,7 @@
 	QUIET_JS        = @echo '   ' JS $@;
 	QUIET_RUN       = @echo '   ' RUN $@;
 	QUIET_S2JS      = @echo '   ' S2JS $@;
-	QUIET_RM        = @
+#	QUIET_RM        = @
 endif
 
 
@@ -23,13 +28,20 @@
 
 tofixtest: $(TOFIXRUNS)
 
+indexruns: $(INDEXRUNS)
+	@echo 'done'
+
 %.wrapped.js : %.str
 	$(QUIET_S2JS) $(MAKE) -s -C .. tests/$*.js tests/$*.wrapped.js
 
+
 %.run : %.wrapped.js
 	$(QUIET_RUN) 
 	echo "$(RUN) $<" | ../scripts/exec-test.sh
 	@echo '*** $< ***'
+	@echo 'done run'
+	cp $< testrun.js
+
 
 all_js: $(JSFILES)
 
@@ -39,7 +51,7 @@
 	$(QUIET_RM) rm -f $(JSFILES)
 
 clean_testruns:
-	$(QUIET_RM) rm -f $(TESTRUNS)
+#	$(QUIET_RM) rm -f $(TESTRUNS)
 #	rm -f *.output
 
 .PRECIOUS: $(JSFILES)

From richard at vogelij.nl  Sun Dec 30 12:03:03 2012
From: richard at vogelij.nl (Richard Vogelij)
Date: Sun, 30 Dec 2012 11:03:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r25807 -
	spoofax-ace/trunk/spoofax-ace
Message-ID: <20121230110303.7364C7F8042@mx1.tudelft.nl>

Author: rvogelij
Date: Sun Dec 30 11:03:03 2012
New Revision: 25807
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=25807&sc=1

Log:
added ant build target which can generate an ace editor with accompanying server

Modified:
   spoofax-ace/trunk/spoofax-ace/build.xml

Modified: spoofax-ace/trunk/spoofax-ace/build.xml
==============================================================================
--- spoofax-ace/trunk/spoofax-ace/build.xml	Sun Dec 30 11:02:06 2012	(r25806)
+++ spoofax-ace/trunk/spoofax-ace/build.xml	Sun Dec 30 11:03:03 2012	(r25807)
@@ -53,6 +53,33 @@
 		</java>
 	</target>
 
+        <target name="buildaceditorwithserver" depends="jar">
+                <java fork="true" classname="spoofax.ace.SpoofaxToAce" failonerror="true">
+                        <jvmarg line="-Xmx1536m -ss8m -XX:MaxPermSize=256m"/>
+                        <classpath>
+                                <pathelement location="s2a.jar"/>
+                                <pathelement location="${strxt}"/>
+                                <pathelement location="${s2js}/s2js.jar"/>
+                        </classpath>
+                        <arg value="--i"/>
+                                <arg value="${spoofaxproj}"/>
+                        <arg value="--jssglr"/>
+                                <arg value="${jssglr}"/>
+                        <arg value="--s2js"/>
+                                <arg value="${s2js}"/>
+                        <arg value="--strlib"/>
+                                <arg value="${strlib}"/>
+                        <arg value="--strctrees"/>
+                                <arg value="${strctrees}"/>
+                        <arg value="--wwwout"/>
+                                <arg value="${wwwroot}"/>
+                        <arg value="--testsrc"/>
+                                <arg value="${testsrc}"/>
+                        <arg value="--withserver"/>
+                                <arg value="./s2aserver/"/>
+                </java>
+        </target>
+
 
         <target name="build" depends="jar">
                 <java fork="true" classname="spoofax.ace.SpoofaxToAce" failonerror="true">

