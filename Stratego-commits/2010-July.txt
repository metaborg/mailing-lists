From L.C.L.Kats at tudelft.nl  Thu Jul  1 11:16:47 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Jul 2010 09:16:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21058 - LennartKats -
	strc-java/trunk/trans
Message-ID: <201007010916.o619Glw3006882@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-01 09:16:47 +0000 (Thu, 01 Jul 2010)
New Revision: 21058

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21058&view=rev

Modified:
   strc-java/trunk/trans/s2j.str

Log:
Avoid retaining a reference to the last used Context.

Changes:

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2010-06-28 16:19:07 UTC (rev 21057)
+++ strc-java/trunk/trans/s2j.str	2010-07-01 09:16:47 UTC (rev 21058)
@@ -123,13 +123,14 @@
      import static org.strategoxt.lang.Term.*;
      import org.spoofax.interpreter.library.AbstractPrimitive;
      import java.util.ArrayList;
+     import java.lang.ref.WeakReference;
          
      @SuppressWarnings("all")
      public class x_name {
 
      protected static final boolean TRACES_ENABLED = e_traces;
      protected static ITermFactory constantFactory;
-     private static Context initedContext;
+     private static WeakReference<Context> initedContext;
      private static boolean isIniting;
 
      ~*cnst-decls
@@ -144,12 +145,12 @@
            initConstructors(termFactory);
            initConstants(termFactory);
          }
-         if (context != initedContext) {
+         if (initedContext == null || initedContext.get() != context) {
            ~*import-inits
            ~*def-inits
            context.registerComponent("~x_name'");
          }
-         initedContext = context;
+         initedContext = new WeakReference<Context>(context);
          constantFactory = termFactory;
          isIniting = false;
          return context;


From L.C.L.Kats at tudelft.nl  Thu Jul  1 14:46:49 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Jul 2010 12:46:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21060 - LennartKats -
	in experimental/meta-amb-suggestions: editor trans
Message-ID: <201007011246.o61Cknuk001858@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-01 12:46:48 +0000 (Thu, 01 Jul 2010)
New Revision: 21060

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21060&view=rev

Modified:
   experimental/meta-amb-suggestions/editor/Stratego-Sugar-Completions.esv
   experimental/meta-amb-suggestions/trans/meta_amb_suggestions.str

Log:
- anti-quotation handling fix
- disabled hover/reference resolve services

Changes:

Modified: experimental/meta-amb-suggestions/editor/Stratego-Sugar-Completions.esv
===================================================================
--- experimental/meta-amb-suggestions/editor/Stratego-Sugar-Completions.esv	2010-07-01 10:49:11 UTC (rev 21059)
+++ experimental/meta-amb-suggestions/editor/Stratego-Sugar-Completions.esv	2010-07-01 12:46:48 UTC (rev 21060)
@@ -24,9 +24,9 @@
   completion trigger : ":= [A-Za-z]"
 */
                                                                                  
-  reference _ : editor-resolve
+  // reference _ : editor-resolve
 
-  hover _ : editor-hover
+  // hover _ : editor-hover
   
   completion template:
     "if" " " <e> " then\n\t" <s> "\nend"

Modified: experimental/meta-amb-suggestions/trans/meta_amb_suggestions.str
===================================================================
--- experimental/meta-amb-suggestions/trans/meta_amb_suggestions.str	2010-07-01 10:49:11 UTC (rev 21059)
+++ experimental/meta-amb-suggestions/trans/meta_amb_suggestions.str	2010-07-01 12:46:48 UTC (rev 21060)
@@ -184,13 +184,18 @@
   is-meta-expr-taggable-prod:
     prod(_, _, attrs(a*)) -> <id>
     where
-      <fetch-cons> a* => <TO_META + TO_META_LIST + TO_META_TAGGED1 + FROM_META + FROM_META_LIST>
+      <fetch-cons> a* => <TO_META + TO_META_LIST + FROM_META + FROM_META_LIST>
 
   is-meta-expr-tagged-prod:
     prod(_, _, attrs(a*)) -> <id>
     where
       <fetch-cons> a* => <TO_META_TAGGED1 + TO_META_TAGGED2 + FROM_META_TAGGED>
 
+  is-cons(c):
+    prod(_, _, attrs(a*)) -> <id>
+    where
+      <fetch-cons> a* => <c>
+
   amb-suggestions:
     amb(a*) -> suggestion''*
     with
@@ -202,10 +207,10 @@
   amb-suggestions-branch:
   	branch @ appl(prod, _) -> suggestion*
   	with
-  	  if <is-meta-expr-taggable-prod> prod then
+  	  if <is-cons(TO_META_TAGGED1)> prod then
   	    suggestion* := <amb-suggestions-expr> branch
   	  else
-  	    expr*       := <collect-all(appl(is-meta-expr-taggable-prod, id))>;
+  	    expr*       := <collect(appl(is-meta-expr-taggable-prod, id))>;
   	    suggestion* := <concat> <filter(amb-suggestions-expr)> expr*
   	  end
   
@@ -213,7 +218,7 @@
     expr -> suggestion''*
     with
     	!expr => appl(prod @ prod(_, rsort, attrs(a*)), _);
-      body  := <fetch-meta-expr-body> expr;
+      // body  := <fetch-meta-expr-body> expr;
     	lsort := <fetch-meta-expr-sort> expr;
     	switch <fetch-cons> a*
     	  case TO_META + TO_META_LIST + TO_META_TAGGED1:


From L.C.L.Kats at tudelft.nl  Thu Jul  1 12:49:12 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Jul 2010 10:49:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21059 - LennartKats -
	in spoofax-imp/trunk: org.eclipse.imp
	org.strategoxt.imp.editors.stratego/trans
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201007011050.o61AnqVw008858@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-01 10:49:11 +0000 (Thu, 01 Jul 2010)
New Revision: 21059

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21059&view=rev

Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/SidePaneEditorHelper.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueStrategyPrimitive.java

Log:
- Spoofax/186: Not removing markers
- Stop old ParserScheduler from running after an editor is closed
- Remember the location of the last Builder editor for opening new Builder editors
- Made queued StrategoJobs cancellable again
- Minor tweaks


Changes:

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-07-01 10:49:11 UTC (rev 21059)
@@ -93,16 +93,26 @@
  import org.eclipse.ui.texteditor.IDocumentProvider;
  
  /**
-@@ -64,7 +65,7 @@
+@@ -37,7 +38,7 @@
+  */
+ // TODO Perhaps this should be driven off of the "IReconcilingStrategy" mechanism?
+ public class ParserScheduler extends Job {
+-    private final IParseController fParseController;
++    private IParseController fParseController;
+ 
+     private final IEditorPart fEditorPart;
+ 
+@@ -64,7 +65,8 @@
      }
  
      public IStatus run(IProgressMonitor monitor) {
 -        if (fParseController == null || fDocumentProvider == null) {
-+        if (fParseController == null || ((AbstractTextEditor) fEditorPart).getDocumentProvider() == null) { // LK: test if document provider is null to find out if editor was closed
++    	 // LK: test if document provider is null to find out if editor was closed
++        if (fParseController == null || ((AbstractTextEditor) fEditorPart).getDocumentProvider() == null) {
              /* Editor was closed, or no parse controller */
              return Status.OK_STATUS;
          }
-@@ -82,8 +83,9 @@
+@@ -82,10 +84,12 @@
              // Just make sure the document contents gets parsed once (and only once).
              fMsgHandler.clearMessages();
              fParseController.parse(document.get(), monitor);
@@ -111,8 +121,21 @@
                  notifyModelListeners(monitor);
 +            }
          } catch (Exception e) {
-             ErrorHandler.reportError("Error running parser for language " + fParseController.getLanguage().getName() + " and input " + editorInput.getName() + ":", e);
+-            ErrorHandler.reportError("Error running parser for language " + fParseController.getLanguage().getName() + " and input " + editorInput.getName() + ":", e);
++        	// LK: null check
++            ErrorHandler.reportError("Error running parser for language " + (fParseController == null ? "null" : fParseController.getLanguage().getName()) + " and input " + editorInput.getName() + ":", e);
              // RMF 8/2/2006 - Notify the AST listeners even on an exception - the compiler front end
+             // may have failed at some phase, but there may be enough info to drive IDE services.
+             notifyModelListeners(monitor);
+@@ -146,4 +150,8 @@
+             RuntimePlugin.getInstance().writeInfoMsg("No AST; bypassing listener notification.");
+         }
+     }
++
++	public void dispose() { // LK
++		fParseController = null;
++	}
+ }
 Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/internal/FormattingController.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/internal/FormattingController.java	(revision 22255)
@@ -336,7 +359,18 @@
  
              fLanguageServiceManager.getParseController().initialize(filePath, srcProject, fAnnotationCreator);
          } catch (ModelException e) {
-@@ -1470,7 +1517,13 @@
+@@ -1099,6 +1146,10 @@
+           fActionBars = null;
+         }
+         
++        if (fParserScheduler != null) { // LK
++        	fParserScheduler.dispose();
++        }
++        
+         super.dispose();
+     }
+ 
+@@ -1470,7 +1521,13 @@
          public int getTabWidth(ISourceViewer sourceViewer) {
              boolean langSpecificSetting= fLangSpecificPrefs != null && fLangSpecificPrefs.isDefined(PreferenceConstants.P_TAB_WIDTH);
  
@@ -351,7 +385,7 @@
          }
  
          public IPresentationReconciler getPresentationReconciler(ISourceViewer sourceViewer) {
-@@ -1491,6 +1544,7 @@
+@@ -1491,6 +1548,7 @@
              ContentAssistant ca= new ContentAssistant();
              ca.setContentAssistProcessor(fServiceControllerManager.getCompletionProcessor(), IDocument.DEFAULT_CONTENT_TYPE);
              ca.setInformationControlCreator(getInformationControlCreator(sourceViewer));
@@ -359,7 +393,7 @@
              return ca;
          }
  
-@@ -1771,7 +1825,8 @@
+@@ -1771,7 +1829,8 @@
                  if (fServiceControllerManager.getPresentationController() != null) {
  //                  System.out.println("Scheduling repair for damage to region " + damage.getOffset() + ":" + damage.getLength() + " in doc of length " + fDocument.getLength());
                      fServiceControllerManager.getPresentationController().damage(damage);
@@ -369,7 +403,7 @@
  //                      System.out.println("** Forcing repair for hyperlink damage to region " + damage.getOffset() + ":" + damage.getLength() + " in doc of length " + fDocument.getLength());
                          fServiceControllerManager.getPresentationController().update(fLanguageServiceManager.getParseController(), fProgressMonitor);
                      }
-@@ -1845,6 +1900,7 @@
+@@ -1845,6 +1904,7 @@
      }
  
      public IParseController getParseController() {
@@ -377,7 +411,7 @@
          return fLanguageServiceManager.getParseController();
      }
      
-@@ -1861,7 +1917,23 @@
+@@ -1861,7 +1921,23 @@
  		// SMS 25 Apr 2007:  Removing parser annotations here
  		// may not hurt but also doesn't seem to be necessary
  		//removeParserAnnotations();

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-07-01 10:49:11 UTC (rev 21059)
@@ -549,7 +549,7 @@
     where
       <gt> (n, 0)
     with
-      t* := <separate-by(|", ")> <copy> (n, "t")
+      t* := <separate-by(|", ")> <copy> (n, "t") // TODO: number
 
   signature-to-proposal:
     (x, 0, 0) -> [x, ""]

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -352,7 +352,10 @@
 			sdf2imp.init(asyncAmbReportingContext);
 		}
 
-		assert !Thread.holdsLock(Environment.getSyncRoot()) : "Potential deadlock";
+		if (Thread.holdsLock(Environment.getSyncRoot())) {
+			// Potential deadlock (occurs when parsing a file for the first time, when it's probably safe)
+			return amb.toString();
+		}
 		
 		synchronized (asyncAmbReportingContext) {
 			ITermFactory factory = asyncAmbReportingContext.getFactory();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -342,7 +342,7 @@
 				// try again without the standard start symbol
 			} else {
 				// Be forgiving: user probably specified an inconsistent strat symbol in the ESV
-				Environment.logWarning("Incorrect start symbol specified in editor descriptor", e);
+				Environment.logWarning("Incorrect start symbol specified in editor descriptor:" + parser.getStartSymbol(), e);
 			}
 			parser.setStartSymbol(null);
 			return parser.parseNoImplode(inputChars, filename);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -85,8 +85,6 @@
 	
 	private final List<MarkerSignature> markersToAdd = new ArrayList<MarkerSignature>();
 	
-	private boolean initMarkersToReuse = false;
-	
 	public AstMessageHandler(String markerType) {
 		this.markerType = markerType;
 	}
@@ -269,14 +267,11 @@
 	 */
 	public void clearMarkers(IResource file) {
 		try {
-			if (initMarkersToReuse) {
-				IMarker[] markers = file.findMarkers(markerType, true, 0);
-				for (IMarker marker : markers) {
-					IMarker dupe = markersToReuse.put(new MarkerSignature(marker), marker);
-					if (dupe != null) markersToDelete.add(dupe);
-				}
+			IMarker[] markers = file.findMarkers(markerType, true, 0);
+			for (IMarker marker : markers) {
+				IMarker dupe = markersToReuse.put(new MarkerSignature(marker), marker);
+				if (dupe != null) markersToDelete.add(dupe);
 			}
-			initMarkersToReuse = true; // redraw markers the first time, then reuse them
 			Iterator<MarkerSignature> markersToAdd = this.markersToAdd.iterator();
 			while (markersToAdd.hasNext()) {
 				MarkerSignature marker = markersToAdd.next();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -271,7 +271,7 @@
 				newTextParts = (IStrategoList) proposal;
 				String head = newTextParts.size() == 0 ? "" : asJavaString(newTextParts.head());
 				if (head.length() >= prefix.length()) {
-					if (head.startsWith(prefix)) confirmed = true;
+					if (startsWithCaseInsensitive(head, prefix)) confirmed = true;
 					else continue;
 				}
 				newText = proposalPartsToDisplayString(newTextParts);
@@ -286,7 +286,7 @@
 					newTextParts = (IStrategoList) newTextTerm;
 					String head = newTextParts.size() == 0 ? "" : asJavaString(newTextParts.head());
 					if (head.length() >= prefix.length()) {
-						if (head.startsWith(prefix)) confirmed = true;
+						if (startsWithCaseInsensitive(head, prefix)) confirmed = true;
 						else continue;
 					}
 					newText = proposalPartsToDisplayString(newTextParts);
@@ -296,7 +296,7 @@
 				}
 				description = termAt(proposal, 1);
 			}
-			if (!confirmed && (newTextParts.isEmpty() || !newText.startsWith(prefix)))
+			if (!confirmed && (newTextParts.isEmpty() || !startsWithCaseInsensitive(newText,prefix)))
 				continue;
 			results.add(new ContentProposal(this, newText, newText, prefix, offsetRegion, newTextParts, description.stringValue()));
 		}
@@ -304,6 +304,10 @@
 		return toSortedArray(results);
 	}
 	
+	private static boolean startsWithCaseInsensitive(String s, String prefix) {
+		return s.length() >= prefix.length() && s.regionMatches(true, 0, prefix, 0, prefix.length());
+	}
+	
 	private String proposalPartsToDisplayString(IStrategoList proposalParts) {
 		proposalBuilder.setLength(0);
 		for (IStrategoList cons = proposalParts; !cons.isEmpty(); cons = cons.tail()) {
@@ -539,10 +543,14 @@
 	
 	private String getPrefix(int offset, String document) {
 		int prefixStart = offset;
+		int lastGoodPrefixStart = offset + 1;
 		while (--prefixStart >= 0) {
 			String prefix = document.substring(prefixStart, offset);
-			if (!identifierLexical.matcher(prefix).matches())
-				return document.substring(prefixStart + 1, offset);
+			if (identifierLexical.matcher(prefix).matches()) {
+				lastGoodPrefixStart = prefixStart;
+			} else if (prefix.charAt(0) == '\n') {
+				return document.substring(lastGoodPrefixStart, offset);
+			}
 		}
 		return document.substring(0, offset);
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/FoldingUpdater.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -72,6 +72,7 @@
 	public void makeCompleteAnnotation(IToken firstToken, IToken lastToken) {
 		final int start = firstToken.getEndOffset();
 		int end = -1;
+		if (start == -1) return; // empty starting token
 
 		if (firstToken.getLine() != lastToken.getLine()) {
 			// Consume any layout tokens at the end of our AST node until the

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/SidePaneEditorHelper.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/SidePaneEditorHelper.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/SidePaneEditorHelper.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -1,8 +1,13 @@
 package org.strategoxt.imp.runtime.services;
 
+import java.lang.ref.WeakReference;
+
+import org.eclipse.ui.IEditorPart;
+import org.eclipse.ui.IEditorReference;
 import org.eclipse.ui.IWorkbenchPage;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.internal.EditorAreaHelper;
+import org.eclipse.ui.internal.EditorPane;
 import org.eclipse.ui.internal.EditorSashContainer;
 import org.eclipse.ui.internal.EditorStack;
 import org.eclipse.ui.internal.WorkbenchPage;
@@ -19,6 +24,10 @@
 @SuppressWarnings("restriction")
 public class SidePaneEditorHelper {
 	
+	private static EditorStack previousNewStack;
+	
+	private static WeakReference<IEditorPart> previousNewEditor;
+	
 	private EditorStack oldStack;
 	
 	private EditorStack newStack;
@@ -48,14 +57,7 @@
 		
 		// Find an existing stack next to the active editor
 		oldStack = editorArea.getActiveWorkbook();
-		newStack = null;
-		for (Object stack : editorArea.getWorkbooks()) {
-			if (stack != oldStack) { // good, other stack
-				newStack = (EditorStack) stack;
-				if (newStack.getParent() == oldStack.getParent())
-					break; // just perfect!
-			}
-		}
+		newStack = findReusableStack(editorArea);
 		
 		if (newStack == null) {
 			// Create a new stack
@@ -69,16 +71,60 @@
 		}
 		
 		newStack.setFocus();
+		previousNewEditor = null;
 	}
+
+	private EditorStack findReusableStack(EditorAreaHelper editorArea) {
+		EditorStack result = null;
+		boolean foundGoodMatch = false;
+		IEditorPart previousNewEditor =
+			SidePaneEditorHelper.previousNewEditor == null
+					? null
+					: SidePaneEditorHelper.previousNewEditor.get();
+		
+		for (Object stackObject : editorArea.getWorkbooks()) {
+			if (!(stackObject instanceof EditorStack))
+				continue;
+			EditorStack stack = (EditorStack) stackObject;
+			if (stack != oldStack) { // good, other stack
+				if (previousNewEditor != null && contains(stack.getEditors(), previousNewEditor)) {
+					return stack;
+				} else if (stack == previousNewStack) {
+					result = stack;
+					foundGoodMatch = true;
+				} else if (!foundGoodMatch && stack.getParent() == oldStack.getParent()) {
+					result = stack;
+					foundGoodMatch = true;
+				} else if (!foundGoodMatch) {
+					result = stack;
+				}
+			}
+		}
+		
+		return result;
+	}
 	
+	private static boolean contains(EditorPane[] array, IEditorPart member) {
+		for (int i = 0; i < array.length; i++) {
+			IEditorReference ref = array[i].getEditorReference();
+			if (ref.getEditor(false) == member) return true;
+		}
+		return false;
+	}
+	
 	public void restoreFocus() {
 		try {
+			previousNewStack = newStack;
 			oldStack.setFocus();
 		} catch (Throwable t) {
 			Environment.logException("Could not restore focus from side pane", t);			
 		}
 	}
 	
+	public void setOpenedEditor(IEditorPart editor) {
+		previousNewEditor = editor == null ? null : new WeakReference<IEditorPart>(editor);
+	}
+	
 	public void undoOpenSidePane() {
 		try {
 			if (isEmptyPane)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -11,6 +11,7 @@
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
 
 /**
  * A workbench-global queue of Stratego operations.
@@ -38,29 +39,27 @@
 	 */
 	private volatile boolean running = false;
 
-	public class UpdateJob extends Job {
+	private class UpdateJob extends Job {
 
-		StrategoAnalysisJob job;
+		private static final int BACKGROUND = LONG;
 
-		int priority;
+		private final StrategoAnalysisJob job;
 
-		long delay;
+		private final long delay;
+		
+		private boolean cancelled;
 
-		static final int INTERACTIVE = 0;
-
-		static final int BACKGROUND = 100;
-
 		protected UpdateJob(StrategoAnalysisJob job, IPath path, int priority, boolean isSystem,
 				long delay) {
 			super("");
 			this.job = job;
-			this.priority = priority;
 			this.delay = delay;
 
 			// Should be set before scheduling the job
 			this.setName(JOB_DESCRIPTION + path);
 
 			setSystem(isSystem);
+			setPriority(priority);
 		}
 
 		final static String JOB_DESCRIPTION = "Analyzing updates to ";
@@ -75,7 +74,7 @@
 			try {
 				status = runInternal(monitor);
 			} catch (Throwable t) {
-				t.printStackTrace(); // TODO: show
+				Environment.logException("Error running scheduled analysis", t);
 				status = Status.CANCEL_STATUS;
 			}
 
@@ -96,6 +95,15 @@
 		public void scheduleWithDelay() {
 			super.schedule(this.delay);
 		}
+		
+		@Override
+		protected void canceling() {
+			cancelled = true;
+		}
+		
+		public boolean isCancelled() {
+			return cancelled;
+		}
 
 	}
 
@@ -158,16 +166,14 @@
 
 		UpdateJob job = queue.poll();
 		if (job != null) {
-			run(job);
+			if (job.isCancelled()) {
+				wake();
+			} else {
+				job.scheduleWithDelay(); // calls wake()
+			}
 		}
 	}
 
-	private void run(UpdateJob job) {
-
-		job.scheduleWithDelay();
-
-	}
-
 	protected static IPath fullPathToWorkspaceLocal(IPath fullPath) {
 
 		IPath workspace = ResourcesPlugin.getWorkspace().getRoot().getLocation();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -317,6 +317,7 @@
 		IEditorPart result = null;
 		try {
 			result = IDE.openEditor(page, file, !realTime);
+			if (sidePane != null) sidePane.setOpenedEditor(result);
 		} finally {
 			if (result == null && sidePane != null) sidePane.undoOpenSidePane();
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -22,6 +22,7 @@
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
@@ -40,7 +41,6 @@
 import org.strategoxt.imp.generator.postprocess_feedback_results_0_0;
 import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.runtime.Debug;
-import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.SWTSafeLock;
 import org.strategoxt.imp.runtime.WeakWeakMap;
@@ -49,7 +49,6 @@
 import org.strategoxt.imp.runtime.dynamicloading.IDynamicLanguageService;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
-import org.strategoxt.imp.runtime.services.StrategoAnalysisQueue.UpdateJob;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.IMPJSGLRLibrary;
 import org.strategoxt.imp.runtime.stratego.StrategoConsole;
@@ -96,7 +95,7 @@
 	
 	private volatile boolean rushNextUpdate;
 	
-	private UpdateJob updateJob;
+	private Job updateJob;
 	
 	private boolean wasExceptionLogged;
 	
@@ -297,13 +296,14 @@
 					messages.addMarkerFirstLine(ast.getResource(), "Analysis failed (see error log)", IMarker.SEVERITY_ERROR);
 					messages.commitAllChanges();
 				} else if (!monitor.isCanceled()) {
-					// TODO: figure out how this was supposed to be synchronized
+					// TODO: figure out how this was supposed to be synchronized??
 					presentToUser(ast.getResource(), feedback);
 				}
 			}
 		} finally {
 			// System.out.println("OBSERVED " + System.currentTimeMillis()); // DEBUG
 			// processEditorRecolorEvents(parseController);
+            // AstMessageHandler.processAllEditorRecolorEvents();
 		}
 	}
 
@@ -312,17 +312,6 @@
 				&& ((SGLRParseController) parseController).getErrorHandler().isRecoveryFailed();
 	}
 
-	@Deprecated
-	@SuppressWarnings("unused")
-	private void processEditorRecolorEvents(IParseController parseController) {
-		if (parseController instanceof SGLRParseController) {
-			EditorState editor = ((SGLRParseController) parseController).getEditor();
-			if (editor != null)
-				AstMessageHandler.processEditorRecolorEvents(editor.getEditor());
-		}
-		AstMessageHandler.processAllEditorRecolorEvents();
-	}
-
 	public void reportRewritingFailed() {
 		assert Thread.holdsLock(getSyncRoot());
 		StackTracer trace = runtime.getContext().getStackTracer();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueStrategyPrimitive.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueStrategyPrimitive.java	2010-07-01 09:16:47 UTC (rev 21058)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueStrategyPrimitive.java	2010-07-01 10:49:11 UTC (rev 21059)
@@ -7,6 +7,7 @@
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.jobs.Job;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractPrimitive;
@@ -14,10 +15,10 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.services.StrategoAnalysisQueueFactory;
 import org.strategoxt.imp.runtime.services.StrategoObserverBackgroundJob;
-import org.strategoxt.imp.runtime.services.StrategoAnalysisQueue.UpdateJob;
 
 /**
  * @author Nathan Bruning
@@ -25,8 +26,10 @@
  */
 public class QueueStrategyPrimitive extends AbstractPrimitive {
 
+	private static final String NAME = "SSL_EXT_queue_strategy";
+	
 	QueueStrategyPrimitive() {
-		super("SSL_EXT_queue_strategy", 0, 2);
+		super(NAME, 0, 2);
 	}
 	
 	/**
@@ -54,13 +57,13 @@
 			StrategoObserverBackgroundJob job = new StrategoObserverBackgroundJob(strategyName, term, descriptor);
 			job.setup(project);
 			
-			UpdateJob updateJob = StrategoAnalysisQueueFactory.getInstance().queue(job, project);
+			Job updateJob = StrategoAnalysisQueueFactory.getInstance().queue(job, project);
 			updateJob.setName(jobDescription);
 			
 			return true;
 			
 		} catch (ClassCastException e) {
-			// Wrong term input.
+			Environment.logException(NAME + ": invalid arguments", e);
 		}
 		return false;
 		



From L.C.L.Kats at tudelft.nl  Thu Jul  1 15:26:36 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Jul 2010 13:26:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21061 - LennartKats -
	in spoofax-imp/trunk/org.strategoxt.imp.runtime: .
	src/org/strategoxt/imp/runtime/parser
	src/org/strategoxt/imp/runtime/parser/ast
	src/org/strategoxt/imp/runtime/services
Message-ID: <201007011326.o61DQaac002568@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-01 13:26:36 +0000 (Thu, 01 Jul 2010)
New Revision: 21061

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21061&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AmbSuggestionGenerator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java

Log:
Fixed the problem with the markers extension point in plugin.xml. Addresses Spoofax/173: Problems / syntax errors in spoofax/IMP files dont show up in the problems view

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-07-01 12:46:48 UTC (rev 21060)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-07-01 13:26:36 UTC (rev 21061)
@@ -77,8 +77,8 @@
    </extension>
    
    <extension
-         id="org.strategoxt.imp.runtime.parsemarker"
-         name="Parse error"
+         id="parsemarker"
+         name="org.strategoxt.imp.runtime.parsemarker"
          point="org.eclipse.core.resources.markers">
     		<persistent value="true" />
         <super type="org.eclipse.core.resources.problemmarker"/>
@@ -86,8 +86,8 @@
    </extension>
    
    <extension
-         id="org.strategoxt.imp.runtime.analysismarker"
-         name="Parse error"
+         id="analysismarker"
+         name="org.strategoxt.imp.runtime.analysismarker"
          point="org.eclipse.core.resources.markers">
     		<persistent value="true" />
             <super type="org.eclipse.core.resources.problemmarker"/>
@@ -96,7 +96,6 @@
    
    <extension
       point="org.eclipse.ui.editors.annotationTypes">
-   <!-- (ignore any reference warnings here *sigh*) -->
    <type
       name="org.strategoxt.imp.runtime.parseerror"
       super="org.eclipse.ui.workbench.texteditor.error"
@@ -110,11 +109,17 @@
       markerSeverity="1">
    </type>
    <type
-      name="org.strategoxt.imp.runtime.analysisannotation"
+      name="org.strategoxt.imp.runtime.analysiserror"
       super="org.eclipse.ui.workbench.texteditor.error"
       markerType="org.strategoxt.imp.runtime.analysismarker"
       markerSeverity="2">
    </type>
+   <type
+      name="org.strategoxt.imp.runtime.analysiswarning"
+      super="org.eclipse.ui.workbench.texteditor.warning"
+      markerType="org.strategoxt.imp.runtime.analysismarker"
+      markerSeverity="2">
+   </type>
    </extension>
    
    <extension point="org.eclipse.ui.ide.markerResolution">
@@ -124,7 +129,7 @@
    </extension>
 
    <extension
-         id="org.strategoxt.imp.runtime.parsemarkerspec"
+         id="org.strategoxt.imp.runtime.parseerrormarkerspec"
          point="org.eclipse.ui.editors.markerAnnotationSpecification">
       <specification
             annotationType="org.strategoxt.imp.runtime.parseerror"
@@ -151,10 +156,9 @@
             colorPreferenceValue="255,128,147"/>
    </extension>
 
-   <!-- TODO: proper red and orange colors for errors and warnings?   -->
    <!-- Note that post-deployment colors may differ from debug colors -->
    <extension
-         id="org.strategoxt.imp.runtime.parsemarkerspec"
+         id="org.strategoxt.imp.runtime.parsewarningmarkerspec"
          point="org.eclipse.ui.editors.markerAnnotationSpecification">
       <specification
             annotationType="org.strategoxt.imp.runtime.parsewarning"
@@ -182,10 +186,10 @@
    </extension>
 
    <extension
-         id="org.strategoxt.imp.runtime.analysismarkerspec"
+         id="org.strategoxt.imp.runtime.analysiserrormarkerspec"
          point="org.eclipse.ui.editors.markerAnnotationSpecification">
       <specification
-            annotationType="org.strategoxt.imp.runtime.analysisannotation"
+            annotationType="org.strategoxt.imp.runtime.analysiserror"
             colorPreferenceKey="spiAnalysisAnnotationColor"
             colorPreferenceValue="255,128,147"
             contributesToHeader="true"
@@ -209,6 +213,35 @@
             verticalRulerPreferenceKey="analysisAnnotationVerticalKey"
             verticalRulerPreferenceValue="true"/>
    </extension>
+
+   <extension
+         id="org.strategoxt.imp.runtime.analysiswarningmarkerspec"
+         point="org.eclipse.ui.editors.markerAnnotationSpecification">
+      <specification
+            annotationType="org.strategoxt.imp.runtime.analysiserror"
+            colorPreferenceKey="spiAnalysisAnnotationColor"
+            colorPreferenceValue="255,148,127"
+            contributesToHeader="true"
+            highlightPreferenceKey="analysisAnnotationHighlightKey"
+            highlightPreferenceValue="false"
+            includeOnPreferencePage="false"
+            isGoToNextNavigationTarget="true"
+            isGoToNextNavigationTargetKey="analysisAnnotationIsGotoNextKey"
+            isGoToPreviousNavigationTarget="true"
+            isGoToPreviousNavigationTargetKey="analysisAnnotationIsGotoPrevKey"
+            label="Spoofax/IMP Analysis Annotation"
+            overviewRulerPreferenceKey="analysisAnnotationOverviewKey"
+            overviewRulerPreferenceValue="true"
+            presentationLayer="5"
+            showInNextPrevDropdownToolbarAction="true"
+            symbolicIcon="error"
+            textPreferenceKey="analysisAnnotationTextKey"
+            textPreferenceValue="true"
+            textStylePreferenceKey="analysisAnnotationTextStyleKey"
+            textStylePreferenceValue="SQUIGGLES"
+            verticalRulerPreferenceKey="analysisAnnotationVerticalKey"
+            verticalRulerPreferenceValue="true"/>
+   </extension>
    
    <extension
          point="org.eclipse.imp.runtime.annotationHover">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AmbSuggestionGenerator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AmbSuggestionGenerator.java	2010-07-01 12:46:48 UTC (rev 21060)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AmbSuggestionGenerator.java	2010-07-01 13:26:36 UTC (rev 21061)
@@ -1,11 +1,9 @@
 package org.strategoxt.imp.runtime.parser;
 
-import static org.eclipse.core.resources.IMarker.SEVERITY;
-import static org.eclipse.core.resources.IMarker.SEVERITY_ERROR;
-import static org.eclipse.core.resources.IMarker.SEVERITY_WARNING;
-
 import org.eclipse.core.resources.IMarker;
+import org.eclipse.swt.graphics.Image;
 import org.eclipse.ui.IMarkerResolution;
+import org.eclipse.ui.IMarkerResolution2;
 import org.eclipse.ui.IMarkerResolutionGenerator2;
 
 /**
@@ -14,14 +12,41 @@
 public class AmbSuggestionGenerator implements IMarkerResolutionGenerator2 {
 
 	public boolean hasResolutions(IMarker marker) {
-		if (marker.getAttribute(SEVERITY, SEVERITY_ERROR) != SEVERITY_WARNING)
-			return false;
 		return false;
 	}
 
 	public IMarkerResolution[] getResolutions(IMarker marker) {
-		// TODO Auto-generated method stub
-		return null;
+		return new IMarkerResolution[] {
+			new DemoResolution("label", "description")
+		};
 	}
 
+	private static class DemoResolution implements IMarkerResolution2 {
+		String label;
+		String description;
+		
+		public DemoResolution(String label, String description) {
+			this.label = label;
+			this.description = description;
+		}
+		
+		public String getDescription() {
+			return description;
+		}
+		
+		public String getLabel() {
+			return label;
+		}
+		
+		public Image getImage() {
+			// TODO: Quick fix image
+			return null;
+		}
+
+		public void run(IMarker marker) {
+			// TODO: run quick fix?
+		}
+		
+	}
+	
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-01 12:46:48 UTC (rev 21060)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-01 13:26:36 UTC (rev 21061)
@@ -62,10 +62,7 @@
 	
 	public static final String PARSE_MARKER_TYPE = new String("org.strategoxt.imp.runtime.parsemarker"); 
 
-	// TODO: ANALYSIS_MARKER_TYPE should be new String("org.strategoxt.imp.runtime.analysismarker");
-	//       as soon as we can get org.strategoxt.imp.runtime.analysismarker to show up in the
-	//       package explorer...
-	public static final String ANALYSIS_MARKER_TYPE = GENERIC_PROBLEM;
+	public static final String ANALYSIS_MARKER_TYPE = new String("org.strategoxt.imp.runtime.analysismarker");
 	
 	private final String markerType;
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	2010-07-01 12:46:48 UTC (rev 21060)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	2010-07-01 13:26:36 UTC (rev 21061)
@@ -73,9 +73,12 @@
 			IStatus status;
 			try {
 				status = runInternal(monitor);
-			} catch (Throwable t) {
-				Environment.logException("Error running scheduled analysis", t);
+			} catch (Exception e) {
+				Environment.logException("Error running scheduled analysis", e);
 				status = Status.CANCEL_STATUS;
+			} catch (Error e) {
+				Environment.logException("Error running scheduled analysis", e);
+				status = Status.CANCEL_STATUS;
 			}
 
 			// Run next task


From L.C.L.Kats at tudelft.nl  Thu Jul  1 15:31:49 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Jul 2010 13:31:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21062 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime
Message-ID: <201007011331.o61DVnL9002609@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-01 13:31:49 +0000 (Thu, 01 Jul 2010)
New Revision: 21062

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21062&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-07-01 13:26:36 UTC (rev 21061)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-07-01 13:31:49 UTC (rev 21062)
@@ -218,7 +218,7 @@
          id="org.strategoxt.imp.runtime.analysiswarningmarkerspec"
          point="org.eclipse.ui.editors.markerAnnotationSpecification">
       <specification
-            annotationType="org.strategoxt.imp.runtime.analysiserror"
+            annotationType="org.strategoxt.imp.runtime.analysiswarning"
             colorPreferenceKey="spiAnalysisAnnotationColor"
             colorPreferenceValue="255,148,127"
             contributesToHeader="true"


From L.C.L.Kats at tudelft.nl  Thu Jul  1 19:23:51 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Jul 2010 17:23:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21063 - LennartKats -
	in experimental/meta-amb-suggestions/test: . dryad
Message-ID: <201007011723.o61HNpoj006107@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-01 17:23:51 +0000 (Thu, 01 Jul 2010)
New Revision: 21063

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21063&view=rev

Added:
   experimental/meta-amb-suggestions/test/dryad/
   experimental/meta-amb-suggestions/test/dryad/AdditiveOperators.met
   experimental/meta-amb-suggestions/test/dryad/ArrayAccessExpressions.met
   experimental/meta-amb-suggestions/test/dryad/ArrayCreationExpressions.met
   experimental/meta-amb-suggestions/test/dryad/ArrayInitializers.met
   experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met
   experimental/meta-amb-suggestions/test/dryad/BitwiseAndLogicalOperators.met
   experimental/meta-amb-suggestions/test/dryad/CastExpressions.met
   experimental/meta-amb-suggestions/test/dryad/ClassInstanceCreationExpressions.met
   experimental/meta-amb-suggestions/test/dryad/ConditionalAndOperator.met
   experimental/meta-amb-suggestions/test/dryad/ConditionalOperator.met
   experimental/meta-amb-suggestions/test/dryad/ConditionalOrOperator.met
   experimental/meta-amb-suggestions/test/dryad/ConstantExpression.met
   experimental/meta-amb-suggestions/test/dryad/EqualityOperators.met
   experimental/meta-amb-suggestions/test/dryad/FieldAccessExpressions.met
   experimental/meta-amb-suggestions/test/dryad/MeaningOfExpressionNames.met
   experimental/meta-amb-suggestions/test/dryad/MethodInvocationExpressions.met
   experimental/meta-amb-suggestions/test/dryad/MultiplicativeOperators.met
   experimental/meta-amb-suggestions/test/dryad/PostfixExpressions.met
   experimental/meta-amb-suggestions/test/dryad/RelationalOperators.met
   experimental/meta-amb-suggestions/test/dryad/ShiftOperators.met
   experimental/meta-amb-suggestions/test/dryad/UnaryOperators.met
   experimental/meta-amb-suggestions/test/dryad/test-emit-arrays.met
   experimental/meta-amb-suggestions/test/dryad/test-java-traits.met

Log:
dryad test files

Changes (first 1000 lines of the diffs):

Added: experimental/meta-amb-suggestions/test/dryad/AdditiveOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/AdditiveOperators.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/AdditiveOperators.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,34 @@
+/**
+ * 15.18: Additive Operators
+ */
+module dryad/type-check/AdditiveOperators
+strategies
+
+  /**
+   * 15.18.1: String Concatenation Operator +
+   *
+   * Check of the other operand is not necessary, since any type may
+   * be converted to type String by String conversion.
+   *
+   * @todo  Still apply string coversion?
+   */
+  dryad-type-of :
+    Plus(<type-attr; ?t1>, <type-attr; ?t2>) -> RefTypeString()
+    where
+        <?RefTypeString()> t1
+      + <?RefTypeString()> t2
+
+  /**
+   * 15.18.2: Additive Operators (+ and -) for Numeric Types
+   */
+  dryad-type-of :
+    |[ e1 + e2 ]| -> <dryad-type-of-num-add-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 - e2 ]| -> <dryad-type-of-num-add-op> (e1, e2)
+
+  /**
+   * @type (Expr, Expr) -> Type
+   */
+  dryad-type-of-num-add-op =
+    dryad-type-of-num-bin-op

Added: experimental/meta-amb-suggestions/test/dryad/ArrayAccessExpressions.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/ArrayAccessExpressions.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/ArrayAccessExpressions.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,17 @@
+/**
+ * 15.13: Array Access Expressions
+ */
+module dryad/type-check/ArrayAccessExpressions
+strategies
+
+  /**
+   * @todo  Result is a variable.
+   */
+  dryad-type-of :
+    |[ e1[e2] ]| -> <capture-conversion> t
+    where
+        <type-attr> e1 => t1
+      ; <type-attr> e2 => t2
+
+      ; !t1 => ArrayType(t)
+      ; <unary-numeric-promotion-of-type> t2 => Int()

Added: experimental/meta-amb-suggestions/test/dryad/ArrayCreationExpressions.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/ArrayCreationExpressions.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/ArrayCreationExpressions.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,54 @@
+/**
+ * 15.10: Array Creation Expressions
+ */
+module dryad/type-check/ArrayCreationExpressions
+imports
+  dryad/jls/names/Main
+
+strategies
+
+  /**
+   * Array Creation without initializer
+   */
+  dryad-type-of :
+    e at NewArray(t, dimse, dims) -> type
+    where
+      <is-list> dims
+      ; <map(check-type-of-array-dimension)> dimse
+      ; let foo(|t) = !ArrayType(<id>)
+         in <dryad-type-of-array-component> t
+          ; foldl(foo | dimse)
+          ; foldl(foo | dims)
+        end
+      ; ?type
+
+  /**
+   * Array Creation with initializer
+   */
+  dryad-type-of :
+    e at NewArray(t, dims, ai at ArrayInit(_)) -> type
+    where
+        let foo(|t) = !ArrayType(<id>)
+         in <dryad-type-of-array-component> t
+          ; foldl(foo | dims)
+        end
+      ; ?type
+      ; <check-type-of-array-init(|type)> ai
+
+  /**
+   * @type PrimType or TypeName -> Type
+   */
+  dryad-type-of-array-component =
+    if is-primitive-type then
+      id
+    else
+      type-name-to-type
+      ; is-reifiable-type
+    end
+
+  check-type-of-array-dimension =
+   ?Dim(<id>)
+   ; type-attr
+   ; is-convertible-to-integral-type
+   ; unary-numeric-promotion-of-type
+   ; ?Int()

Added: experimental/meta-amb-suggestions/test/dryad/ArrayInitializers.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/ArrayInitializers.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/ArrayInitializers.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,35 @@
+/**
+ * 10.6: Array Initializers
+ *
+ * @todo Array initializers in variable declarations.
+ * @todo Array initializers with boxing conversions.
+ */
+module dryad/type-check/ArrayInitializers
+strategies
+
+  /**
+   * @todo  It would be nice if we could type ArrayInit with a plain dryad-type-of rule.
+   * @param Type of the array (complete type, not just component type).
+   */
+  check-type-of-array-init(|t) =
+    ?ArrayInit(es);
+
+    where(
+      <?ArrayType(<id>)> t => ct;
+
+      let check-expr-type =
+            type-attr; is-assignment-convertable(|ct)
+
+       in /**
+           * If the component type is itself an array type, then the
+           * expression specifying a component may itself be an array
+           * initializer.
+           */
+          if !ct => ArrayType(ct') then
+            <map(check-expr-type <+ check-type-of-array-init(|ct'))> es
+          else
+            <map(check-expr-type)> es
+          end
+      end
+    )
+

Added: experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,46 @@
+/**
+ * 15.26: Assignment Operators
+ */
+module dryad/type-check/AssignmentOperators
+strategies
+
+  /**
+   * @todo  Check if the LHS is a variable. Options are listed in 15.26 intro.
+   *
+   * @note  Specific rules are much more attractive to see (the rewrite
+   *        of assignments with an operator is clear. But, this leads to lot
+   *        of code duplication.
+   */
+  dryad-attributes-of(rec) =
+      where(assignment-lhs-value => e1)
+    ; where(attributed-assignment-rhs-value(rec) => e2)
+
+    ; <type-attr> e1 => lhs-type
+    ; <type-attr> e2 => rhs-type
+
+    ; <assignment-conversion(|lhs-type)> rhs-type => conversion
+    
+    ; ![Type(<capture-conversion> lhs-type), conversion]
+
+rules
+
+  /**
+   * Given an assignment, returns the rhs value.
+   */
+  attributed-assignment-rhs-value(rec) :
+    |[ e1 = e2 ]| -> e2
+
+  /**
+   * Assignment with an operator
+   */
+  attributed-assignment-rhs-value(rec) =
+      where(assignment-op-rhs-value; dryad-attribute(rec) => e2)
+    ; where(assignment-lhs-value => e1)
+
+    ; <type-attr> e1
+    ; if is-reference-type then
+        \ reft -> |[ (reft) e2 ]| \
+      else
+        \ primt -> |[ (primt) e2 ]| \
+      end
+    ; dryad-attribute(rec)

Added: experimental/meta-amb-suggestions/test/dryad/BitwiseAndLogicalOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/BitwiseAndLogicalOperators.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/BitwiseAndLogicalOperators.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,33 @@
+/**
+ * 15.22: Bitwise and Logical Operators
+ */
+module dryad/type-check/BitwiseAndLogicalOperators
+strategies
+
+  dryad-type-of :
+    |[ e1 & e2 ]| -> <dryad-type-of-bit-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 ^ e2 ]| -> <dryad-type-of-bit-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 | e2 ]| -> <dryad-type-of-bit-op> (e1, e2)
+
+  dryad-type-of-bit-op =
+    ?(e1, e2)
+
+    ; <type-attr> e1 => t1
+    ; <type-attr> e2 => t2
+
+    ; let option-integral =
+            <is-convertible-to-integral-type> t1
+          ; <is-convertible-to-integral-type> t2
+          ; <binary-numeric-promotion-of-types> (t1, t2)
+
+          option-bool =
+            <is-convertible-to-boolean-type> t1
+          ; <is-convertible-to-boolean-type> t2
+          ; !Boolean()
+
+       in option-integral <+ option-bool
+      end

Added: experimental/meta-amb-suggestions/test/dryad/CastExpressions.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/CastExpressions.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/CastExpressions.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,20 @@
+/**
+ * 15.16: Cast Expressions
+ */
+module dryad/type-check/CastExpressions
+imports
+  dryad/jls/conversions/CastingConversion
+
+strategies
+
+  dryad-type-of :
+    |[ (primt) e ]| -> primt
+    where
+        <type-attr> e => t
+      ; <is-casting-convertable(|primt)> t
+
+  dryad-type-of :
+    |[ (reft) e ]| -> <capture-conversion> reft
+    where
+        <type-attr> e => t
+      ; <is-casting-convertable(|reft)> t

Added: experimental/meta-amb-suggestions/test/dryad/ClassInstanceCreationExpressions.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/ClassInstanceCreationExpressions.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/ClassInstanceCreationExpressions.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,122 @@
+/**
+ * 15.9: Class Instance Creation Expressions
+ *
+ * @todo Implement qualifed class instance creation expressions.
+ * @todo Implement anonymous class declarations.
+ */
+module dryad/type-check/ClassInstanceCreationExpressions
+strategies
+
+  /**
+   * @todo ClassType cannot be enum
+   * @todo ClassType cannot be abstract.
+   * @todo TypeArgs may not be a wildcard type argument.
+   * @todo Constructor selection uses the same rules as for method invocations.
+   * @todo Pass type arguments to the determine-method-signature strategy.
+   * @todo ClassBody
+   */
+  dryad-attributes-of :
+    e at NewInstance(None(), type at ClassType(_, _), args, None())
+      ->
+    [ Type(type), Declaration(<get-canonical-name> constructor) | attrs]
+    where
+        log(|Debug(), "Constructor invocation", <id>)
+      ; <log-lookup-class> type => class
+      ; log(|Debug(), "Class being instantiated:", <id>)
+
+        // dirty hook into the implementation of method invocations
+      ; <determine-method-signature(|type, class, <ThisClass>)> e => (constructor, attrs)
+      ; log(|Debug(), "Constructor", <id>)
+
+  /**
+   * @todo Type attribute?  
+   * @todo Support for type arguments in first parameter of determine-method-signature.
+   */
+  dryad-attributes-of :
+    e at AltConstrInv(_, args)
+      ->
+    [ Declaration(<get-canonical-name> constructor) | attrs ]
+    where
+      ThisClass => class
+      ; <get-canonical-name> class => name
+      ; <determine-method-signature(|ClassType(name, None()), class, <ThisClass>)> e => (constructor, attrs)
+    
+
+  /**
+   * @todo Type attribute?
+   * @todo Support for type arguments in first parameter of determine-method-signature.   
+   */
+  dryad-attributes-of :    
+    e at SuperConstrInv(_, args)
+      ->
+    [ Declaration(<get-canonical-name> constructor) | attrs]
+    where
+      ThisClass; get-superclass => class
+      ; <get-canonical-name> class => name
+      ; <determine-method-signature(|ClassType(name, None()), class, <ThisClass>)> e => (constructor, attrs)
+
+  /*
+  dryad-attributes-of :    
+    e at QSuperConstrInv(_, _, args)
+      ->    
+    [ Type(type), Declaration(<get-canonical-name> constructor) | attrs]
+    */
+
+strategies
+
+  /**
+   * @todo This is a dirty hook into the code for type checking method invocations.
+   */
+  identify-potentially-applicable-methods(|class, fromclass) =
+    get-arguments-of-constructor-invocation => args
+    ; where(<length> args => arity)
+    ; <get-declared-constructors> class
+
+      /**
+       * If no constructors are found and the artiy is 0, then the
+       * default constructor might be applicable.
+       */
+    ; if ?[]; !arity => 0 then
+       try(![<get-default-constructor> class])
+      end
+
+    ; filter(id
+        // - constructor is accessible
+      ; is-accessible-from(|fromclass)        
+
+        // - arity of member is less or equal (todo: duplicate check?)
+      ; id
+
+        // - variable arity
+        // - same fixed arity
+      ; where(
+          if is-fixed-arity-constructor then
+            get-arity => arity
+          else
+            <geq> (arity, <subt> (<get-arity>, 1))
+          end
+        )
+
+        // - same number of explicit type parameters
+      ; id
+      )
+
+strategies
+
+  /**
+   * @todo This is a dirty hook into the code for type checking method invocations.
+   */
+  get-arguments-of-invocation =
+    get-arguments-of-constructor-invocation
+
+  get-arguments-of-constructor-invocation =
+    ?NewInstance(_, _, <id>, _)
+    
+  get-arguments-of-constructor-invocation =
+    ?AltConstrInv(_, <id>)
+    
+  get-arguments-of-constructor-invocation =
+    ?SuperConstrInv(_, <id>)
+    
+  get-arguments-of-constructor-invocation =
+    ?QSuperConstrInv(_, _, <id>)

Added: experimental/meta-amb-suggestions/test/dryad/ConditionalAndOperator.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/ConditionalAndOperator.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/ConditionalAndOperator.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,8 @@
+/**
+ * 15.23: Conditional-And Operator &&
+ */
+module dryad/type-check/ConditionalAndOperator
+strategies
+
+  dryad-type-of :
+    |[ e1 && e2 ]| -> <dryad-type-of-cond-bin-op> (e1, e2)

Added: experimental/meta-amb-suggestions/test/dryad/ConditionalOperator.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/ConditionalOperator.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/ConditionalOperator.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,90 @@
+/**
+ * 15.25: Conditional Operator ?:
+ *
+ * @author Martin Bravenboer <martin at cs.uu.nl>
+ */
+module dryad/type-check/ConditionalOperator
+imports
+  dryad/jls/types/Lub
+
+strategies
+
+  dryad-type-of :
+    |[ e1 ? e2 : e3 ]| -> <dryad-type-of-cond> (e2, e3)
+    where
+        <type-attr> e1 => t1
+      ; <is-convertible-to-boolean-type> t1
+
+  dryad-type-of-cond =
+    ?(e1, e2)
+
+    ; <type-attr> e1 => s1
+    ; <type-attr> e2 => s2
+
+    ; !(s1, s2)
+
+    ; let option-eq = 
+            ?(t, t); !t
+
+          vice-versa(s1, s2) =
+            (s1, s2) + (s2, s1)
+
+          option-bool =
+              vice-versa(?Boolean(), RefTypeBoolean())
+            ; !Boolean()
+
+          option-refnull =
+              ?(<is-reference-type>, Null())
+            + ?(Null(), <is-reference-type>)
+            
+          option-num-condition =
+            (is-convertible-to-numeric-type, is-convertible-to-numeric-type)
+            
+          option-num =
+            /**
+             * The numbers (1, 2345, 6) refer to the list of typing
+             * rules for numeric types in the JLS.
+             */
+            let option-num-1 =
+                    vice-versa(
+                      ?Short() + ?RefTypeShort()
+                    , ?Byte()  + ?RefTypeByte()
+                    )
+                  ; !Short()
+
+                option-num-2345 =
+                  let check = {e1, t1, e2, t2, t1':
+                        ?((e1, t1), (e2, t2))
+                      ; <?Int()> t2
+                      ; <try(unboxing-conversion-of-type)> t1 => t1'
+                      ; <?Byte() + ?Short() + ?Char()> t1'
+                      ; <is-constant-expression> e2
+                      ; <is-representable-in(|t1')> e2
+                      ; !t1' 
+                      }
+                   in <check> ((e1, s1), (e2, s2))
+                    + <check> ((e2, s2), (e1, s1))
+                  end
+
+                option-num-6 =
+                  <binary-numeric-promotion-of-types> (s1, s2)
+                  
+
+             in    option-num-1
+                <+ option-num-2345
+                <+ option-num-6
+            end
+
+          option-lub =
+              <try(boxing-conversion-of-type)> s1 => t1
+            ; <try(boxing-conversion-of-type)> s2 => t2
+            ; debug(!"Invoking lub")
+            ; <lub> [t1, t2]
+            ; capture-conversion
+
+       in    option-eq
+          <+ option-bool
+          <+ option-refnull
+          <+ (option-num-condition < option-num + option-lub)
+      end
+

Added: experimental/meta-amb-suggestions/test/dryad/ConditionalOrOperator.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/ConditionalOrOperator.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/ConditionalOrOperator.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,19 @@
+/**
+ * 15.24: Conditional-Or Operator ||
+ */
+module dryad/type-check/ConditionalOrOperator
+strategies
+
+  dryad-type-of :
+    |[ e1 || e2 ]| -> <dryad-type-of-cond-bin-op> (e1, e2)
+
+  dryad-type-of-cond-bin-op =
+    ?(e1, e2)
+
+    ; <type-attr> e1 => t1
+    ; <type-attr> e2 => t2
+
+    ; <is-convertible-to-boolean-type> t1
+    ; <is-convertible-to-boolean-type> t2
+
+    ; !Boolean()

Added: experimental/meta-amb-suggestions/test/dryad/ConstantExpression.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/ConstantExpression.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/ConstantExpression.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,21 @@
+/**
+ * 15.28: Constant Expression
+ */
+module dryad/type-check/ConstantExpression
+strategies
+
+  /**
+   * @todo Implement the check for constant expressions.
+   */
+  is-constant-expression =
+    ?Lit(_)
+
+  /**
+   * @todo What are the representable values of a type?
+   */
+  is-representable-in(|t) =
+    ?Lit(Deci(s))
+    ; where(
+        <string-to-int> s
+      ; <lt-lt> (0, <id>, 255)
+      )

Added: experimental/meta-amb-suggestions/test/dryad/EqualityOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/EqualityOperators.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/EqualityOperators.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,39 @@
+/**
+ * 15.21: Equality Operators
+ *
+ * @todo  Annotate promoted type?
+ * @todo  Reference quality: check if the types of the operands are convertible.
+ */
+module dryad/type-check/EqualityOperators
+strategies
+
+  dryad-type-of :
+    |[ e1 == e2 ]| -> <dryad-type-of-num-eq-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 != e2 ]| -> <dryad-type-of-num-eq-op> (e1, e2)
+
+  dryad-type-of-num-eq-op =
+    ?(e1, e2)
+
+    ; <type-attr> e1 => t1
+    ; <type-attr> e2 => t2
+
+    ; let option-num =
+            <is-convertible-to-numeric-type> t1
+          ; <is-convertible-to-numeric-type> t2
+
+          option-bool =
+            <is-convertible-to-boolean-type> t1
+          ; <is-convertible-to-boolean-type> t2
+
+          option-ref =
+            <is-reference-type + ?Null()> t1
+          ; <is-reference-type + ?Null()> t2
+
+       in    option-num
+          <+ option-bool
+          <+ option-ref
+      end
+
+    ; !Boolean()

Added: experimental/meta-amb-suggestions/test/dryad/FieldAccessExpressions.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/FieldAccessExpressions.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/FieldAccessExpressions.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,98 @@
+/**
+ * 15.11: Field Access Expressions
+ *
+ * @author Martin Bravenboer
+ */
+module dryad/type-check/FieldAccessExpressions
+strategies
+
+  /**
+   * Note: member fields are always accessible in the class itself, so access control is not necessary.
+   * @todo Instance access not allowed from static context.
+   */
+   dryad-attributes-of :
+    Field(Id(x)) -> [Type(<capture-conversion> t), DeclaringClass(cname)]
+    where
+      bigbagof-ThisClass
+      ; fetch-elem(get-field(|x))
+      ; where(get-declaring-class; get-canonical-name => cname)
+      ; get-type => t
+
+  /**
+   * @todo Handle final fields. Final fields are not variable.
+   */
+  dryad-attributes-of :
+    Field(e, Id(x)) -> [Type(<capture-conversion> type), DeclaringClass(cname)]
+    where
+      <type-attr> e => dec
+      ; is-reference-type
+      ; log-lookup-class => subjectclass
+      ; get-field(|x)
+      ; where(get-declaring-class; get-canonical-name => cname)
+      ; is-accessible-from(|subjectclass, <ThisClass>)
+      ; get-type => type
+
+  /**
+   * 6.5.6.2: Qualified Expression Names
+   *
+   * Case: Q is as type name that names a class type.
+   *
+   * @todo  Not a variable if member is final. Variable if it is.
+   * @todo  Different behaviour for class and interface.
+   */
+  dryad-attributes-of :
+    Field(tn at TypeName(_, _), Id(x)) -> [Type(<get-type> f), DeclaringClass(cname)]
+    where
+      <log-lookup-class> tn
+      ; get-field(|x) => f
+      ; where(get-declaring-class; get-canonical-name => cname)
+      ; is-accessible-from(|<ThisClass>)      
+      ; is-static
+
+  /**
+   * Super field access.
+   *
+   * @todo Can only be applied in instance code, but the underlying This() already guarantees that.
+   * @todo The old forwarding implementation reveals a bug in the JLS. Submit later.
+   * @todo This ignores the type parameters of this class.
+   *
+  dryad-attributes-of(rec) :
+    |[ super.x ]| -> [Type(<type-attr> e'), DeclaringClass(<declaring-class-attr> e')]
+    where
+      <ThisType> ()
+      ; log-lookup-class
+      ; get-superclass-as-type => reft
+      ; <rec> |[ ((reft) this).x ]| => e'
+   */      
+  dryad-attributes-of :
+    |[ super.x ]| -> [Type(<capture-conversion> type), DeclaringClass(cname)]
+    where
+      <ThisType> ()
+      ; log-lookup-class
+      ; get-superclass
+      ; get-field(|x)
+      ; where(get-declaring-class; get-canonical-name => cname)      
+      ; is-accessible-from(|<ThisClass>)
+      ; get-type => type
+
+  /**
+   * Qualified super field access.
+   *
+   * @todo This ignores type variables
+   * @todo Current class must be cname or an inner class of cname.
+  dryad-attributes-of(rec) :
+    |[ cname.super.x ]| -> [Type(<type-attr> e'), DeclaringClass(<declaring-class-attr> e')]
+    where
+      <log-lookup-class> cname
+      ; get-superclass-as-type => reft
+      ; <rec> |[ ((reft) cname.this).x ]| => e'
+   */
+  dryad-attributes-of(rec) :
+    |[ tname.super.x ]| -> [Type(<capture-conversion> type), DeclaringClass(tname')]
+    where
+      <log-lookup-class> tname
+      ; get-superclass
+      ; get-field(|x)
+      ; where(get-declaring-class; get-canonical-name => tname')      
+      ; is-accessible-from(|<ThisClass>)
+      ; get-type => type

Added: experimental/meta-amb-suggestions/test/dryad/MeaningOfExpressionNames.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/MeaningOfExpressionNames.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/MeaningOfExpressionNames.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,24 @@
+/**
+ * 6.5.6 Meaning of Expression Names
+ *
+ * Fields are handled in FieldAccessExpressions.
+ *
+ * @author Martin Bravenboer
+ */
+module dryad/type-check/MeaningOfExpressionNames
+strategies
+
+  /**
+   * 6.5.6.1: Simple Expression Names.
+   *
+   * The type of the expression name is the declared type of the
+   * field, local variable or parameter after capture conversion.
+   *
+   * This rule only considers simple expression names that are
+   * declared in this current source file.
+   */
+  dryad-type-of :
+    ExprName(Id(x)) -> <capture-conversion> t
+    where
+      <TypeOf> Id(x) => t
+

Added: experimental/meta-amb-suggestions/test/dryad/MethodInvocationExpressions.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/MethodInvocationExpressions.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/MethodInvocationExpressions.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,42 @@
+/**
+ * 15.12: Method Invocation Expressions
+ *
+ * @author Martin Bravenboer
+ */
+module dryad/type-check/MethodInvocationExpressions
+imports
+  dryad/jls/types/Subtyping
+  dryad/type-check/invoke/StepSearch
+  dryad/type-check/invoke/StepSignature
+  dryad/type-check/invoke/StepAppropriate  
+  
+strategies
+
+  /**
+   * Returns the type of a method invocation.
+   *
+   * @todo Store information about the application of type erasure?
+   */
+  dryad-attributes-of :
+    e at Invoke(methodid, args)
+      ->
+    [ Type(type)
+    , DeclaringClass(invtype)
+    , CompileTimeDeclaration(<get-canonical-name> method)
+    | attrs
+    ]
+    where
+        log(|Debug(), "Method invocation", <id>)
+        
+      ; <dryad-tc-search-class-of-method> methodid => invtype
+      ; log(|Debug(), "Search type of method", <id>)
+      
+      ; <log-lookup-class> invtype => class
+      ; log(|Debug(), "Search class object of method", <id>)
+
+      ; <determine-method-signature(|invtype, class, <ThisClass>)> e => (method, attrs)
+      ; log(|Debug(), "Method", <id>)
+      
+      ; <determine-result-type(|invtype, attrs)> method => type
+      
+      ; log(|Debug(), "Type", type)

Added: experimental/meta-amb-suggestions/test/dryad/MultiplicativeOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/MultiplicativeOperators.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/MultiplicativeOperators.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,22 @@
+/**
+ * 15.17: Multiplicative Operators
+ *
+ * @author Martin Bravenboer
+ */
+module dryad/type-check/MultiplicativeOperators
+strategies
+
+  dryad-type-of :
+    |[ e1 * e2 ]| -> <dryad-type-of-mul-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 / e2 ]| -> <dryad-type-of-mul-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 % e2 ]| -> <dryad-type-of-mul-op> (e1, e2)
+
+  /**
+   * @type (Expr, Expr) -> Type
+   */
+  dryad-type-of-mul-op =
+    dryad-type-of-num-bin-op

Added: experimental/meta-amb-suggestions/test/dryad/PostfixExpressions.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/PostfixExpressions.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/PostfixExpressions.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,41 @@
+/**
+ * 15.14: Postfix Expressions
+ *
+ * @author Martin Bravenboer
+ */
+module dryad/type-check/PostfixExpressions
+imports
+  dryad/jls/conversions/Kinds
+strategies
+
+  /**
+   * 15.14.1: Expression Names
+   *   See 6.5.6
+   */
+
+  /**
+   * 15.14.2: Postfix Increment Operator ++
+   */
+  dryad-type-of :
+    |[ e++ ]| ->  <dryad-type-of-incr-decr-op> e
+
+  /**
+   * 15.14.2: Postfix Increment Operator ++
+   */
+  dryad-type-of :
+    |[ e-- ]| ->  <dryad-type-of-incr-decr-op> e
+
+  /**
+   * @todo Expression must be a variable.
+   */
+  dryad-type-of-incr-decr-op =
+    is-expr-variable
+    ; type-attr
+    ; is-convertible-to-numeric-type
+
+  /**
+   * @todo Implement the variable check
+   */
+  is-expr-variable =
+    id
+

Added: experimental/meta-amb-suggestions/test/dryad/RelationalOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/RelationalOperators.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/RelationalOperators.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,40 @@
+/**
+ * 15.20: Relational Operators
+ *
+ * @todo Annotate the promoted type? (int/long or float/double)
+ * @author Martin Bravenboer
+ */
+module dryad/type-check/RelationalOperators
+strategies
+
+  dryad-type-of :
+    |[ e1 < e2 ]| -> <dryad-type-of-num-comp-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 > e2 ]| -> <dryad-type-of-num-comp-op> (e1, e2)
+  
+  dryad-type-of :
+    |[ e1 <= e2 ]| -> <dryad-type-of-num-comp-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 >= e2 ]| -> <dryad-type-of-num-comp-op> (e1, e2)
+
+  dryad-type-of-num-comp-op =
+    ?(e1, e2);
+
+    where(
+      <type-attr> e1 => t1
+    ; <type-attr> e2 => t2
+    ; <is-convertible-to-numeric-type> t1
+    ; <is-convertible-to-numeric-type> t2
+    );
+
+    !Boolean()
+
+  dryad-type-of :
+    |[ e instanceof reft ]| -> Boolean()
+    where
+        <type-attr> e => t
+      ; <is-reference-type + ?Null()> t
+      ; <is-reifiable-type> reft
+

Added: experimental/meta-amb-suggestions/test/dryad/ShiftOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/ShiftOperators.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/ShiftOperators.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,32 @@
+/**
+ * 15.19: Shift Operators
+ *
+ * @author Martin Bravenboer
+ */
+module dryad/type-check/ShiftOperators
+strategies
+
+  dryad-type-of :
+    |[ e1 << e2 ]| -> <dryad-type-of-shift-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 >> e2 ]| ->  <dryad-type-of-shift-op> (e1, e2)
+
+  dryad-type-of :
+    |[ e1 >>> e2 ]| ->  <dryad-type-of-shift-op> (e1, e2)
+
+  /**
+   * @type (Expr, Expr) -> Type
+   */
+  dryad-type-of-shift-op =
+    ?(e1, e2);
+
+    where(
+      <type-attr> e1 => t1
+    ; <type-attr> e2 => t2
+    ; <is-convertible-to-integral-type> t1
+    ; <is-convertible-to-integral-type> t2
+    )
+
+    ; <unary-numeric-promotion-of-type> t1
+

Added: experimental/meta-amb-suggestions/test/dryad/UnaryOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/UnaryOperators.met	                        (rev 0)
+++ experimental/meta-amb-suggestions/test/dryad/UnaryOperators.met	2010-07-01 17:23:51 UTC (rev 21063)
@@ -0,0 +1,56 @@
+/**
+ * 15.15: Unary Operators
+ *
+ * @author Martin Bravenboer
+ */
+module dryad/type-check/UnaryOperators
+strategies
+
+  /**
+   * 15.15.1: Prefix Increment Operator
+   */
+  dryad-type-of :
+    |[ ++e ]| -> <dryad-type-of-incr-decr-op> e
+ 
+  /**
+   * 15.15.2: Prefix Decrement Operator
+   */
+  dryad-type-of :
+    |[ --e ]| ->  <dryad-type-of-incr-decr-op> e
+
+  /**
+   * 15.15.3: Unary Plus Operator +
+   */
+  dryad-type-of :
+    |[ +e ]| -> <unary-numeric-promotion-of-type> t
+    where
+      <type-attr> e => t
+      ; is-convertible-to-numeric-type
+
+  /**
+   * 15.15.4: Unary Minus Operator -
+   */
+  dryad-type-of :
+    |[ -e ]| -> <unary-numeric-promotion-of-type> t
+    where
+      <type-attr> e => t
+      ; is-convertible-to-numeric-type
+

(213 diff lines omitted)

From L.C.L.Kats at tudelft.nl  Thu Jul  1 22:28:18 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Jul 2010 20:28:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21064 - LennartKats -
	in experimental/meta-amb-suggestions: . include trans/cli
Message-ID: <201007012028.o61KSIKQ008074@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-01 20:28:18 +0000 (Thu, 01 Jul 2010)
New Revision: 21064

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21064&view=rev

Added:
   experimental/meta-amb-suggestions/include/
   experimental/meta-amb-suggestions/include/Meta-amb-suggestions.def
Modified:
   experimental/meta-amb-suggestions/trans/cli/compose-grammars.str

Log:
Clean build kludge

Changes (first 1000 lines of the diffs):

Added: experimental/meta-amb-suggestions/include/Meta-amb-suggestions.def
===================================================================
--- experimental/meta-amb-suggestions/include/Meta-amb-suggestions.def	                        (rev 0)
+++ experimental/meta-amb-suggestions/include/Meta-amb-suggestions.def	2010-07-01 20:28:18 UTC (rev 21064)
@@ -0,0 +1,3366 @@
+definition
+module languages/java-15/expressions/Priorities
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/expressions/Main
+
+exports
+  context-free priorities
+      Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr
+    > {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      } 
+
+  context-free priorities
+      {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      }
+    > { "(" PrimType ")" Expr -> Expr    
+        "(" RefType  ")" Expr -> Expr
+      }
+
+  context-free priorities
+      "(" PrimType ")" Expr -> Expr
+    > {left:
+        Expr "*" Expr -> Expr
+        Expr "/" Expr -> Expr
+        Expr "%" Expr -> Expr
+      } 
+
+  context-free priorities
+      "(" RefType ")" Expr -> Expr 
+    > {
+        "++" Expr -> Expr
+        "--" Expr -> Expr
+        "+"  Expr -> Expr
+        "-"  Expr -> Expr
+      }
+
+  context-free priorities
+    {
+      Expr ArraySubscript -> ArrayAccess
+      Expr "." Id -> FieldAccess
+      Expr "." TypeArgs? Id -> MethodSpec
+    }
+  > {right:
+      Expr "++" -> Expr
+      Expr "--" -> Expr
+    }
+  > {
+      "++" Expr -> Expr
+      "--" Expr -> Expr
+      "+"  Expr -> Expr
+      "-"  Expr -> Expr
+      "~"  Expr -> Expr
+      "!"  Expr -> Expr
+    }
+  > {left:
+      Expr "*" Expr -> Expr
+      Expr "/" Expr -> Expr
+      Expr "%" Expr -> Expr
+    } 
+  > {left:
+      Expr "+" Expr -> Expr
+      Expr "-" Expr -> Expr
+    }
+  > {left:
+      Expr "<<"  Expr -> Expr
+      Expr ">>"  Expr -> Expr
+      Expr ">>>" Expr -> Expr
+    }
+  > {left:
+      Expr "instanceof" RefType -> Expr
+      Expr "<"   Expr -> Expr
+      Expr ">"   Expr -> Expr
+      Expr "<="  Expr -> Expr
+      Expr ">="  Expr -> Expr
+    }
+  > {left:
+      Expr "=="  Expr -> Expr
+      Expr "!="  Expr -> Expr
+    }
+  >   Expr "&"   Expr -> Expr
+  >   Expr "^"   Expr -> Expr
+  >   Expr "|"   Expr -> Expr
+  >   Expr "&&"  Expr -> Expr
+  >   Expr "||"  Expr -> Expr
+  >   Expr CondMid Expr -> Expr
+  > {right:
+      LHS "="    Expr -> Expr
+      LHS "*="   Expr -> Expr
+      LHS "/="   Expr -> Expr
+      LHS "%="   Expr -> Expr
+      LHS "+="   Expr -> Expr
+      LHS "-="   Expr -> Expr
+      LHS "<<="  Expr -> Expr
+      LHS ">>="  Expr -> Expr
+      LHS ">>>=" Expr -> Expr
+      LHS "&="   Expr -> Expr
+      LHS "^="   Expr -> Expr
+      LHS "|="   Expr -> Expr
+    }
+
+module languages/java-15/expressions/Restrictions
+exports
+  lexical restrictions
+    "+" -/- [\+]
+    "-" -/- [\-]
+    "/" -/- [\/]
+
+module languages/java-15/expressions/AssignmentOperators
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts LHS
+  context-free syntax
+    LHS "="    Expr -> Expr {cons("Assign")}
+    LHS "*="   Expr -> Expr {cons("AssignMul")}
+    LHS "/="   Expr -> Expr {cons("AssignDiv")}
+    LHS "%="   Expr -> Expr {cons("AssignRemain")}
+    LHS "+="   Expr -> Expr {cons("AssignPlus")}
+    LHS "-="   Expr -> Expr {cons("AssignMinus")}
+    LHS "<<="  Expr -> Expr {cons("AssignLeftShift")}
+    LHS ">>="  Expr -> Expr {cons("AssignRightShift")}
+    LHS ">>>=" Expr -> Expr {cons("AssignURightShift")}
+    LHS "&="   Expr -> Expr {cons("AssignAnd")}
+    LHS "^="   Expr -> Expr {cons("AssignExcOr")}
+    LHS "|="   Expr -> Expr {cons("AssignOr")}
+
+    ExprName    -> LHS
+    FieldAccess -> LHS
+    ArrayAccess -> LHS
+
+
+
+
+
+
+module languages/java-15/expressions/BinaryOperators
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/types/Main
+
+exports
+  sorts CondMid
+  context-free syntax
+    Expr "instanceof" RefType -> Expr {cons("InstanceOf")}
+
+    Expr "*"   Expr -> Expr  {left, cons("Mul")}
+    Expr "/"   Expr -> Expr  {left, cons("Div")}
+    Expr "%"   Expr -> Expr  {left, cons("Remain")}
+
+    Expr "+"   Expr -> Expr  {left, cons("Plus")}
+    Expr "-"   Expr -> Expr  {left, cons("Minus")}
+
+    Expr "<<"  Expr -> Expr  {left, cons("LeftShift")}
+    Expr ">>"  Expr -> Expr  {left, cons("RightShift")}
+    Expr ">>>" Expr -> Expr  {left, cons("URightShift")}
+
+    Expr "<"   Expr -> Expr  {left, cons("Lt")}
+    Expr ">"   Expr -> Expr  {left, cons("Gt")}
+    Expr "<="  Expr -> Expr  {left, cons("LtEq")}
+    Expr ">="  Expr -> Expr  {left, cons("GtEq")}
+    Expr "=="  Expr -> Expr  {left, cons("Eq")}
+    Expr "!="  Expr -> Expr  {left, cons("NotEq")}
+
+    Expr "&&"  Expr -> Expr  {left, cons("LazyAnd")}
+    Expr "||"  Expr -> Expr  {left, cons("LazyOr")}
+
+    Expr "&" Expr -> Expr {left, cons("And")}
+    Expr "^" Expr -> Expr {left, cons("ExcOr")}
+    Expr "|" Expr -> Expr {left, cons("Or")}
+
+    %% todo JFR-30
+    Expr CondMid Expr -> Expr {right, cons("Cond")}
+    "?" Expr ":" -> CondMid {bracket}
+
+module languages/java-15/expressions/UnaryOperators
+imports 
+  languages/java-15/expressions/Main
+exports
+  context-free syntax
+    "+" Expr -> Expr {cons("Plus")}
+    "-" Expr -> Expr {cons("Minus")}
+
+    "++" Expr -> Expr {cons("PreIncr")}
+    "--" Expr -> Expr {cons("PreDecr")}
+
+    "~" Expr -> Expr {cons("Complement")}
+    "!" Expr -> Expr {cons("Not")}
+
+    "(" PrimType ")" Expr -> Expr {cons("CastPrim")}
+    "(" RefType  ")" Expr -> Expr {cons("CastRef")}
+
+module languages/java-15/expressions/Postfix
+imports 
+  languages/java-15/expressions/Main
+
+exports
+  context-free syntax
+    ExprName  -> Expr
+    Expr "++" -> Expr {cons("PostIncr")}
+    Expr "--" -> Expr {cons("PostDecr")}
+
+module languages/java-15/expressions/MethodInvocation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts MethodSpec
+  context-free syntax
+    MethodSpec "(" {Expr ","}* ")" -> Expr {cons("Invoke")}
+
+                               MethodName -> MethodSpec {cons("Method")}
+                    Expr "." TypeArgs? Id -> MethodSpec {cons("Method")}
+                 "super" "." TypeArgs? Id -> MethodSpec {cons("SuperMethod")}
+    TypeName "." "super" "." TypeArgs? Id -> MethodSpec {cons("QSuperMethod")}
+                 AmbName "." TypeArgs  Id -> MethodSpec {cons("GenericMethod")}
+
+  %% This priority forbids a Expr "." MethodSpec if the expression is a plain ExprName.
+  %% This solves an ambiguity with the MethodName and AmbName . TypeArgs MethodSpecs.
+  %% foo.bar.fred() results in a MethodName MethodSpec.
+  %% (foo.bar).fred() results in the Expr. MethodSpec
+  %% foo.bar.<T>fred() results in a GenericMethod
+  context-free priorities
+      Expr "." TypeArgs? Id -> MethodSpec
+    > ExprName  -> Expr
+
+
+
+
+
+
+module languages/java-15/expressions/ArrayAccess
+imports
+  languages/java-15/expressions/Main
+exports
+  sorts
+    ArrayAccess
+    ArraySubscript
+
+  context-free syntax
+    ArrayAccess -> Expr
+
+    %% todo: JFR-29
+    Expr ArraySubscript -> ArrayAccess {cons("ArrayAccess")}
+    "[" Expr "]" -> ArraySubscript {bracket}
+
+    ArrayCreationExpr ArraySubscript -> ArrayAccess {reject}
+
+module languages/java-15/expressions/FieldAccess
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts FieldAccess
+  context-free syntax
+    FieldAccess -> Expr
+
+  context-free syntax
+
+                    Expr "." Id -> FieldAccess {cons("Field")}
+                ExprName "." Id -> FieldAccess {reject}
+                 "super" "." Id -> FieldAccess {cons("SuperField")}
+    TypeName "." "super" "." Id -> FieldAccess {cons("QSuperField")}
+
+module languages/java-15/expressions/ArrayCreation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ArrayCreationExpr
+    ArrayBaseType
+    Dim
+    DimExpr
+
+  context-free syntax
+    ArrayCreationExpr     -> Expr
+
+    "new" ArrayBaseType DimExpr+ Dim*  -> ArrayCreationExpr {cons("NewArray")}
+    "new" ArrayBaseType Dim+ ArrayInit -> ArrayCreationExpr {cons("NewArray")}
+
+    PrimType -> ArrayBaseType
+    TypeName -> ArrayBaseType
+    TypeName "<" "?" ">" -> ArrayBaseType {cons("UnboundWld")}
+
+    "[" Expr "]" -> DimExpr {cons("Dim")}
+    "[" "]"      -> Dim     {cons("Dim")}
+
+module languages/java-15/expressions/ClassInstanceCreation
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  context-free syntax
+
+             "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody? -> Expr {cons("NewInstance")}
+    Expr "." "new" TypeArgs? Id         TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("QNewInstance")}
+
+module languages/java-15/expressions/Primary
+imports
+  languages/java-15/lexical/literals/Main
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  %%%
+   %% Section 15.8.1: Lexical Literals
+   %%%
+  sorts Literal
+  context-free syntax
+    Literal -> Expr {cons("Lit")}
+
+    IntLiteral    -> Literal
+    FloatLiteral  -> Literal
+    BoolLiteral   -> Literal 
+    CharLiteral   -> Literal
+    StringLiteral -> Literal
+    NullLiteral   -> Literal
+
+  %%%
+   %% Section 15.8.2: Class Literals
+   %%%
+  sorts ClassLiteral
+  context-free syntax
+    ClassLiteral -> Literal
+    Type   "." "class" -> ClassLiteral {cons("Class")}
+    "void" "." "class" -> ClassLiteral {cons("VoidClass")}
+
+  %%%
+   %% Section 15.8.3/4: (Qualified this)
+   %%%
+  context-free syntax
+                 "this" -> Expr {cons("This")}
+    TypeName "." "this" -> Expr {cons("QThis")}
+
+  %%%
+   %% Section 15.8.5: Parenthesized Expression
+   %%%
+  context-free syntax
+    "(" Expr ")"          -> Expr {bracket}
+
+module languages/java-15/expressions/Main
+imports
+  languages/java-15/expressions/Primary
+  languages/java-15/expressions/ClassInstanceCreation
+  languages/java-15/expressions/ArrayCreation
+  languages/java-15/expressions/FieldAccess
+  languages/java-15/expressions/ArrayAccess
+  languages/java-15/expressions/MethodInvocation
+  languages/java-15/expressions/Postfix
+  languages/java-15/expressions/UnaryOperators
+  languages/java-15/expressions/BinaryOperators
+  languages/java-15/expressions/AssignmentOperators
+  languages/java-15/expressions/Restrictions
+  languages/java-15/expressions/Priorities
+
+exports
+  sorts
+    Expr
+
+module languages/java-15/statements/Main
+imports
+  languages/java-15/statements/Blocks
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+
+
+
+
+
+module languages/java-15/arrays/Main
+imports
+  languages/java-15/arrays/ArrayInitializers
+
+
+
+
+
+
+module languages/java-15/interfaces/Main
+imports
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+
+
+
+
+
+module languages/java-15/classes/Main
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+
+
+
+
+
+
+module languages/java-15/packages/PackageDeclarations
+imports
+  languages/java-15/names/Main
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    PackageDec
+
+  context-free syntax
+    Anno* "package" PackageName ";" -> PackageDec {cons("PackageDec")}
+
+module languages/java-15/packages/ImportDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+
+exports
+  sorts
+    ImportDec
+
+  context-free syntax
+    "import" TypeName                  ";"  -> ImportDec {cons("TypeImportDec")}
+    "import" PackageName       "." "*" ";"  -> ImportDec {cons("TypeImportOnDemandDec")}
+    "import" "static" TypeName "." Id  ";"  -> ImportDec {cons("StaticImportDec")}
+    "import" "static" TypeName "." "*" ";"  -> ImportDec {cons("StaticImportOnDemandDec")}
+
+module languages/java-15/interfaces/AnnotationTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    AnnoDec
+    AnnoDecHead
+
+  context-free syntax
+    AnnoDecHead "{" AnnoElemDec* "}" -> AnnoDec {cons("AnnoDec")}
+    (Anno | InterfaceMod)* "@" "interface" Id -> AnnoDecHead {cons("AnnoDecHead")}
+
+  sorts
+    AnnoElemDec
+    DefaultVal
+
+  context-free syntax
+    AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" -> AnnoElemDec {cons("AnnoMethodDec")}
+
+    ConstantDec  -> AnnoElemDec
+    ClassDec     -> AnnoElemDec
+    InterfaceDec -> AnnoElemDec
+    EnumDec      -> AnnoElemDec
+    AnnoDec      -> AnnoElemDec
+    ";"          -> AnnoElemDec {cons("Semicolon")}
+
+    "default" ElemVal -> DefaultVal {cons("DefaultVal")}
+
+module languages/java-15/interfaces/AbstractMethodDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+
+exports
+  sorts
+    AbstractMethodDec
+    AbstractMethodMod
+
+  context-free syntax
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Throws? ";" -> AbstractMethodDec {cons("AbstractMethodDec")}
+
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" -> AbstractMethodDec {cons("DeprAbstractMethodDec")}
+
+    Public   -> AbstractMethodMod
+    Abstract -> AbstractMethodMod
+
+
+
+
+
+
+
+module languages/java-15/interfaces/ConstantDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    ConstantDec
+    ConstantMod
+
+  context-free syntax
+    (Anno | ConstantMod)* Type {VarDec ","}+ ";" -> ConstantDec {cons("ConstantDec")}
+
+    Public -> ConstantMod
+    Static -> ConstantMod
+    Final  -> ConstantMod
+
+
+
+
+
+
+module languages/java-15/interfaces/InterfaceDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    InterfaceDec
+    InterfaceDecHead
+    ExtendsInterfaces
+    InterfaceMemberDec
+    InterfaceMod
+
+  context-free syntax
+    AnnoDec -> InterfaceDec
+
+    InterfaceDecHead "{" InterfaceMemberDec* "}" -> InterfaceDec {cons("InterfaceDec")}
+
+    (Anno | InterfaceMod)* "interface" Id TypeParams? ExtendsInterfaces? -> InterfaceDecHead {cons("InterfaceDecHead")}
+    "extends" {InterfaceType ","}+ -> ExtendsInterfaces {cons("ExtendsInterfaces")}
+
+  context-free syntax
+    ConstantDec       -> InterfaceMemberDec
+    AbstractMethodDec -> InterfaceMemberDec
+    ClassDec          -> InterfaceMemberDec
+    InterfaceDec      -> InterfaceMemberDec
+    ";"               -> InterfaceMemberDec {cons("Semicolon")}
+
+  context-free syntax
+    Public         -> InterfaceMod
+    Protected      -> InterfaceMod
+    Private        -> InterfaceMod
+    Abstract       -> InterfaceMod
+    Static         -> InterfaceMod
+    StrictFP       -> InterfaceMod
+
+
+
+
+
+
+module languages/java-15/classes/EnumDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  sorts
+    EnumDec
+    EnumDecHead
+    EnumBody
+    EnumConst
+    EnumConstArgs
+    EnumBodyDecs
+
+  context-free syntax
+    EnumDecHead EnumBody -> EnumDec {cons("EnumDec")}
+
+    (Anno | ClassMod)* "enum" Id Interfaces? -> EnumDecHead {cons("EnumDecHead")}
+
+    "{" {EnumConst ","}*     EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+    "{" {EnumConst ","}* "," EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+
+    Id EnumConstArgs? ClassBody?  -> EnumConst {cons("EnumConst")}
+    "(" {Expr ","}* ")"  -> EnumConstArgs {bracket}
+
+    ";" ClassBodyDec* -> EnumBodyDecs {cons("EnumBodyDecs")}
+
+module languages/java-15/classes/ConstructorDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ConstrDec
+    ConstrBody
+    ConstrHead
+    ConstrInv
+
+  context-free syntax
+    ConstrHead ConstrBody ->  ConstrDec {cons("ConstrDec")}
+    (Anno | ConstrMod)* TypeParams? Id "(" {FormalParam ","}* ")" Throws? -> ConstrHead {cons("ConstrDecHead")}
+
+
+    "{" ConstrInv? BlockStm* "}" -> ConstrBody {cons("ConstrBody")}
+
+             TypeArgs? "this"  "(" {Expr ","}* ")" ";" -> ConstrInv {cons("AltConstrInv")}
+             TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("SuperConstrInv")}
+    Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("QSuperConstrInv")}
+
+  sorts ConstrMod
+  context-free syntax  
+    Public    -> ConstrMod
+    Protected -> ConstrMod
+    Private   -> ConstrMod
+
+
+
+
+
+
+module languages/java-15/classes/StaticInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    StaticInit
+
+  context-free syntax
+    "static" Block -> StaticInit   {cons("StaticInit")}
+
+module languages/java-15/classes/InstanceInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    InstanceInit
+
+  context-free syntax
+    Block -> InstanceInit {cons("InstanceInit")}
+
+module languages/java-15/statements/Statements
+imports
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Blocks
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Stm
+
+  context-free syntax
+    Block      -> Stm
+
+  %%%
+   %% Section 14.6: The Empty Statement
+   %%%
+  context-free syntax
+    ";"        -> Stm {cons("Empty")}
+
+  %%%
+   %% Section 14.7: Labeled Statements
+   %%%
+  context-free syntax
+    Id ":" Stm -> Stm {cons("Labeled")}
+
+  %%%
+   %% Section 14.8: Expressions Statements
+   %%%
+  context-free syntax
+    Expr ";"   -> Stm {cons("ExprStm")}
+
+  %%%
+   %% Section 14.9: The If Statement
+   %%%
+  context-free syntax
+    "if" "(" Expr ")" Stm             -> Stm {prefer, cons("If")}
+    "if" "(" Expr ")" Stm  "else" Stm -> Stm {cons("If")}
+
+  %%%
+   %% Section 14.10: The Assert Statement
+   %%%
+  context-free syntax
+    "assert" Expr          ";" -> Stm  {cons("AssertStm")}
+    "assert" Expr ":" Expr ";" -> Stm  {cons("AssertStm")}
+
+
+  %%%
+   %% Section 14.11: The Switch Statement
+   %%%
+  sorts SwitchBlock SwitchGroup SwitchLabel
+  context-free syntax
+    "switch" "(" Expr ")" SwitchBlock -> Stm {cons("Switch")}
+    "{" SwitchGroup* SwitchLabel* "}" -> SwitchBlock {cons("SwitchBlock")}
+    SwitchLabel+ BlockStm+ -> SwitchGroup  {cons("SwitchGroup")}
+
+    "case" Expr ":" -> SwitchLabel {cons("Case")}
+    "default"   ":" -> SwitchLabel {cons("Default")}
+
+  %%%
+   %% Section 14.12: The While Statement
+   %%%
+  context-free syntax
+    "while" "(" Expr ")" Stm -> Stm {cons("While")}
+
+  %%%
+   %% Section 14.13: The Do Statement
+   %%%
+  context-free syntax
+  "do" Stm "while" "(" Expr ")" ";" -> Stm {cons("DoWhile")}
+
+
+  %%%
+   %% Section 14.14: The For Statement
+   %%%
+  context-free syntax
+    "for" "(" LocalVarDec ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+    "for" "(" {Expr ","}* ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+
+    "for" "(" FormalParam ":" Expr ")" Stm -> Stm {cons("ForEach")}
+
+  %%%
+   %% Section 14.15: The Break Statement
+   %%%
+  context-free syntax
+    "break"    Id? ";"   -> Stm {cons("Break")}
+
+  %%%
+   %% Section 14.16: The Continue Statement
+   %%%
+  context-free syntax
+    "continue" Id? ";"   -> Stm {cons("Continue")}
+
+  %%%
+   %% Section 14.17: The Return Statement
+   %%%
+  context-free syntax
+    "return"   Expr? ";" -> Stm {cons("Return")}
+
+  %%%
+   %% Section 14.18: The Throw Statement
+   %%%
+  context-free syntax
+    "throw"    Expr  ";" -> Stm {cons("Throw")}
+
+  %%%
+   %% Section 14.19: The Synchronized Statement
+   %%%
+  context-free syntax
+    "synchronized" "(" Expr ")" Block -> Stm {cons("Synchronized")}
+
+  %%%
+   %% Section 14.20: The Try Statement
+   %%%
+  sorts CatchClause
+  context-free syntax
+    "try" Block CatchClause+ -> Stm {cons("Try")}
+    "try" Block CatchClause* "finally" Block -> Stm {cons("Try")}
+    "catch" "(" FormalParam ")" Block -> CatchClause {cons("Catch")}
+
+module languages/java-15/statements/LocalVariableDeclarations
+imports
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts
+    LocalVarDecStm
+    LocalVarDec
+
+  context-free syntax
+    LocalVarDec ";" -> LocalVarDecStm {prefer, cons("LocalVarDecStm")}
+    (Anno | VarMod)* Type {VarDec ","}+ -> LocalVarDec {prefer, cons("LocalVarDec")}
+
+module languages/java-15/statements/Blocks
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+exports
+  sorts
+    BlockStm
+    Block
+
+  context-free syntax
+    "{" BlockStm* "}" -> Block {cons("Block")}
+
+    LocalVarDecStm  -> BlockStm 
+    ClassDec        -> BlockStm {cons("ClassDecStm")}
+    Stm             -> BlockStm
+
+
+
+
+
+
+module languages/java-15/classes/MethodDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    MethodDec
+    MethodDecHead
+    ResultType
+
+  context-free syntax
+    MethodDecHead MethodBody -> MethodDec {cons("MethodDec")}
+
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws?      -> MethodDecHead {cons("MethodDecHead")}
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? -> MethodDecHead {cons("DeprMethodDecHead")}
+
+    Type   -> ResultType
+    "void" -> ResultType {cons("Void")}
+
+  sorts FormalParam
+  context-free syntax
+    (Anno | VarMod)* Type       VarDecId -> FormalParam {cons("Param")}
+    (Anno | VarMod)* Type "..." VarDecId -> FormalParam {cons("VarArityParam")}
+
+  sorts VarMod
+  context-free syntax
+    Final -> VarMod
+
+  sorts MethodMod
+  context-free syntax
+    Public         -> MethodMod
+    Protected      -> MethodMod
+    Private        -> MethodMod
+
+    Abstract       -> MethodMod
+    Static         -> MethodMod
+    Final          -> MethodMod
+    Synchronized   -> MethodMod
+    Native         -> MethodMod
+    StrictFP       -> MethodMod
+
+  %%%
+   %% Section 8.4.6: Method Throws
+   %%%
+  sorts
+    Throws
+    ExceptionType
+
+  context-free syntax
+    "throws" {ExceptionType ","}+ -> Throws {cons("ThrowsDec")}
+    ClassType -> ExceptionType
+    %% TypeVar -> ExceptionType
+
+  %%%
+   %% Section 8.4.7: Method Body
+   %%% 
+  sorts MethodBody
+  context-free syntax
+    Block -> MethodBody
+    ";"   -> MethodBody {cons("NoMethodBody")}
+
+module languages/java-15/arrays/ArrayInitializers
+imports
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts ArrayInit
+  context-free syntax
+    "{" {VarInit ","}*     "}" -> ArrayInit {cons("ArrayInit")}
+    "{" {VarInit ","}* "," "}" -> ArrayInit {cons("ArrayInit")}
+
+module languages/java-15/interfaces/Annotations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Anno
+    ElemVal
+    ElemValPair
+
+  context-free syntax
+    "@" TypeName "(" {ElemValPair ","}* ")" -> Anno {cons("Anno")}
+    "@" TypeName "(" ElemVal ")"            -> Anno {cons("SingleElemAnno")}
+    "@" TypeName                            -> Anno {cons("MarkerAnno")}
+
+  context-free syntax  
+    Id "=" ElemVal -> ElemValPair {cons("ElemValPair")}
+
+    Expr -> ElemVal
+    Anno -> ElemVal
+
+    "{" {ElemVal ","}*     "}" -> ElemVal {cons("ElemValArrayInit")}
+    "{" {ElemVal ","}* "," "}" -> ElemVal {cons("ElemValArrayInit")}
+
+    %% Assignments are not allowed as element values.
+    LHS "=" Expr -> ElemVal {reject}
+
+module languages/java-15/classes/FieldDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/interfaces/Annotations
+  languages/java-15/arrays/ArrayInitializers
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    FieldDec
+    VarDec
+    VarDecId
+    Dim
+    VarInit
+
+  context-free syntax
+    (Anno | FieldMod)* Type { VarDec ","}+ ";" -> FieldDec {cons("FieldDec")}
+
+    VarDecId             -> VarDec {cons("VarDec")}
+    VarDecId "=" VarInit -> VarDec {cons("VarDec")}
+
+    Id      -> VarDecId
+    Id Dim+ -> VarDecId {cons("ArrayVarDecId")}
+
+    "[" "]" -> Dim {cons("Dim")}
+
+    Expr      -> VarInit
+    ArrayInit -> VarInit
+
+  sorts FieldMod
+  context-free syntax
+    Public    -> FieldMod
+    Protected -> FieldMod
+    Private   -> FieldMod
+
+    Static    -> FieldMod
+    Final     -> FieldMod
+    Transient -> FieldMod
+    Volatile  -> FieldMod
+
+
+
+
+
+
+module languages/java-15/classes/ClassDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/InstanceInitializers
+  languages/java-15/classes/StaticInitializers
+  languages/java-15/classes/ConstructorDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    ClassDec
+    ClassBody
+    ClassDecHead
+
+  context-free syntax
+    EnumDec -> ClassDec
+
+    ClassDecHead ClassBody -> ClassDec {cons("ClassDec")}
+    "{" ClassBodyDec* "}" -> ClassBody {cons("ClassBody")}
+
+    (Anno | ClassMod)* "class" Id  TypeParams? Super? Interfaces? -> ClassDecHead {cons("ClassDecHead")}
+
+  %% 8.1.1: Class Modifiers
+  sorts ClassMod
+  context-free syntax

(2401 diff lines omitted)

From L.C.L.Kats at tudelft.nl  Fri Jul  2 10:01:21 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 02 Jul 2010 08:01:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21065 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.runtime org.strategoxt.imp.updatesite
Message-ID: <201007020801.o6281LE8018608@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-02 08:01:21 +0000 (Fri, 02 Jul 2010)
New Revision: 21065

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21065&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Release 0.5.2

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-01 20:28:18 UTC (rev 21064)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-02 08:01:21 UTC (rev 21065)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.1.93"
+      version="0.5.2"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-07-01 20:28:18 UTC (rev 21064)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-07-02 08:01:21 UTC (rev 21065)
@@ -164,7 +164,7 @@
             annotationType="org.strategoxt.imp.runtime.parsewarning"
             textPreferenceKey="spiParseErrorAnnotationColor"
             textPreferenceValue="true"
-            presentationLayer="6"
+            presentationLayer="5"
             showInNextPrevDropdownToolbarAction="true"
             label="Spoofax/IMP Parser Warning Annotation"
             colorPreferenceKey="warningIndicationColor"
@@ -203,14 +203,14 @@
             label="Spoofax/IMP Analysis Annotation"
             overviewRulerPreferenceKey="analysisAnnotationOverviewKey"
             overviewRulerPreferenceValue="true"
-            presentationLayer="5"
+            presentationLayer="7"
             showInNextPrevDropdownToolbarAction="true"
             symbolicIcon="error"
-            textPreferenceKey="analysisAnnotationTextKey"
+            textPreferenceKey="analysisErrorTextKey"
             textPreferenceValue="true"
-            textStylePreferenceKey="analysisAnnotationTextStyleKey"
+            textStylePreferenceKey="analysisErrorTextStyleKey"
             textStylePreferenceValue="SQUIGGLES"
-            verticalRulerPreferenceKey="analysisAnnotationVerticalKey"
+            verticalRulerPreferenceKey="analysisErrorVerticalKey"
             verticalRulerPreferenceValue="true"/>
    </extension>
 
@@ -230,16 +230,16 @@
             isGoToPreviousNavigationTarget="true"
             isGoToPreviousNavigationTargetKey="analysisAnnotationIsGotoPrevKey"
             label="Spoofax/IMP Analysis Annotation"
-            overviewRulerPreferenceKey="analysisAnnotationOverviewKey"
+            overviewRulerPreferenceKey="analysisWarningOverviewKey"
             overviewRulerPreferenceValue="true"
             presentationLayer="5"
             showInNextPrevDropdownToolbarAction="true"
-            symbolicIcon="error"
-            textPreferenceKey="analysisAnnotationTextKey"
+            symbolicIcon="warning"
+            textPreferenceKey="analysisWarningTextKey"
             textPreferenceValue="true"
-            textStylePreferenceKey="analysisAnnotationTextStyleKey"
+            textStylePreferenceKey="analysisWarningTextStyleKey"
             textStylePreferenceValue="SQUIGGLES"
-            verticalRulerPreferenceKey="analysisAnnotationVerticalKey"
+            verticalRulerPreferenceKey="analysisWarningVerticalKey"
             verticalRulerPreferenceValue="true"/>
    </extension>
    

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-01 20:28:18 UTC (rev 21064)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-02 08:01:21 UTC (rev 21065)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.1.93.jar" id="org.strategoxt.imp" version="0.5.1.93">
+   <feature url="features/org.strategoxt.imp_0.5.2.jar" id="org.strategoxt.imp" version="0.5.2">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">


From L.C.L.Kats at tudelft.nl  Fri Jul  2 11:09:30 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 02 Jul 2010 09:09:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21066 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.stratego
	org.strategoxt.imp.editors.stratego/lib
	org.strategoxt.imp.feature org.strategoxt.imp.runtime
	org.strategoxt.imp.updatesite
Message-ID: <201007020909.o6299Up0019362@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-02 09:09:30 +0000 (Fri, 02 Jul 2010)
New Revision: 21066

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21066&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Release 0.5.2.1: errors marked as errors again (not as warnings)

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	2010-07-02 08:01:21 UTC (rev 21065)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	2010-07-02 09:09:30 UTC (rev 21066)
@@ -55,7 +55,9 @@
             <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
             <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
             <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
         </target>
         
         <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	2010-07-02 08:01:21 UTC (rev 21065)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	2010-07-02 09:09:30 UTC (rev 21066)
@@ -55,7 +55,9 @@
             <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
             <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
             <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
         </target>
         
         <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str	2010-07-02 08:01:21 UTC (rev 21065)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str	2010-07-02 09:09:30 UTC (rev 21066)
@@ -113,6 +113,9 @@
   
   refresh-workspace-file:
     path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
 
 strategies
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-02 08:01:21 UTC (rev 21065)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-02 09:09:30 UTC (rev 21066)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2"
+      version="0.5.2.1"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-07-02 08:01:21 UTC (rev 21065)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-07-02 09:09:30 UTC (rev 21066)
@@ -118,7 +118,7 @@
       name="org.strategoxt.imp.runtime.analysiswarning"
       super="org.eclipse.ui.workbench.texteditor.warning"
       markerType="org.strategoxt.imp.runtime.analysismarker"
-      markerSeverity="2">
+      markerSeverity="1">
    </type>
    </extension>
    

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-02 08:01:21 UTC (rev 21065)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-02 09:09:30 UTC (rev 21066)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.jar" id="org.strategoxt.imp" version="0.5.2">
+   <feature url="features/org.strategoxt.imp_0.5.2.1.jar" id="org.strategoxt.imp" version="0.5.2.1">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">


From L.C.L.Kats at tudelft.nl  Fri Jul  2 13:54:48 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 02 Jul 2010 11:54:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21067 - LennartKats -
	in experimental/meta-amb-suggestions: syntax/generated trans/cli
Message-ID: <201007021154.o62Bsmh2021506@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-02 11:54:48 +0000 (Fri, 02 Jul 2010)
New Revision: 21067

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21067&view=rev

Modified:
   experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def
   experimental/meta-amb-suggestions/trans/cli/compose-grammars.str

Log:
Tweaked compose-grammars to generate fewer quotation productions by handling injections differently. These aren't always intuitive: since every Expr is also a VarInit, you now have to quote expressions as VarInit |[ a = b ]|

Changes (first 1000 lines of the diffs):

Modified: experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def
===================================================================
--- experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def	2010-07-02 09:09:30 UTC (rev 21066)
+++ experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def	2010-07-02 11:54:48 UTC (rev 21067)
@@ -1708,7 +1708,7 @@
 module languages/java-15/EmbeddedJava15[E]
 imports languages/java-15/Main
 exports
-  context-free syntax
+  context-free syntax %% Quotations
 
 %% java-15 : ArrayAccess
                  "|[" ArrayAccess "]|" -> E {cons("ToMetaExpr")}
@@ -1719,9 +1719,6 @@
    "ArrayAccess*"        "|[" ArrayAccess* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArrayAccess*" "|[" ArrayAccess* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ArrayAccess {cons("FromMetaExpr")}
-   "~ArrayAccess:" E                       -> ArrayAccess {cons("FromMetaExprTagged")}
-
 %% java-15 : FieldAccess
                  "|[" FieldAccess "]|" -> E {cons("ToMetaExpr")}
 "FieldAccess"         "|[" FieldAccess "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1731,9 +1728,6 @@
    "FieldAccess*"        "|[" FieldAccess* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:FieldAccess*" "|[" FieldAccess* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> FieldAccess {cons("FromMetaExpr")}
-   "~FieldAccess:" E                       -> FieldAccess {cons("FromMetaExprTagged")}
-
 %% java-15 : ClassLiteral
                  "|[" ClassLiteral "]|" -> E {cons("ToMetaExpr")}
 "ClassLiteral"         "|[" ClassLiteral "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1743,9 +1737,6 @@
    "ClassLiteral*"        "|[" ClassLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ClassLiteral*" "|[" ClassLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ClassLiteral {cons("FromMetaExpr")}
-   "~ClassLiteral:" E                       -> ClassLiteral {cons("FromMetaExprTagged")}
-
 %% java-15 : AnnoDec
                  "|[" AnnoDec "]|" -> E {cons("ToMetaExpr")}
 "AnnoDec"         "|[" AnnoDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1755,9 +1746,6 @@
    "AnnoDec*"        "|[" AnnoDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:AnnoDec*" "|[" AnnoDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> AnnoDec {cons("FromMetaExpr")}
-   "~AnnoDec:" E                       -> AnnoDec {cons("FromMetaExprTagged")}
-
 %% java-15 : AbstractMethodDec
                  "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExpr")}
 "AbstractMethodDec"         "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1767,9 +1755,6 @@
    "AbstractMethodDec*"        "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:AbstractMethodDec*" "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> AbstractMethodDec {cons("FromMetaExpr")}
-   "~AbstractMethodDec:" E                       -> AbstractMethodDec {cons("FromMetaExprTagged")}
-
 %% java-15 : ConstantDec
                  "|[" ConstantDec "]|" -> E {cons("ToMetaExpr")}
 "ConstantDec"         "|[" ConstantDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1779,9 +1764,6 @@
    "ConstantDec*"        "|[" ConstantDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ConstantDec*" "|[" ConstantDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ConstantDec {cons("FromMetaExpr")}
-   "~ConstantDec:" E                       -> ConstantDec {cons("FromMetaExprTagged")}
-
 %% java-15 : EnumDec
                  "|[" EnumDec "]|" -> E {cons("ToMetaExpr")}
 "EnumDec"         "|[" EnumDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1791,9 +1773,6 @@
    "EnumDec*"        "|[" EnumDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:EnumDec*" "|[" EnumDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> EnumDec {cons("FromMetaExpr")}
-   "~EnumDec:" E                       -> EnumDec {cons("FromMetaExprTagged")}
-
 %% java-15 : ConstrDec
                  "|[" ConstrDec "]|" -> E {cons("ToMetaExpr")}
 "ConstrDec"         "|[" ConstrDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1803,9 +1782,6 @@
    "ConstrDec*"        "|[" ConstrDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ConstrDec*" "|[" ConstrDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ConstrDec {cons("FromMetaExpr")}
-   "~ConstrDec:" E                       -> ConstrDec {cons("FromMetaExprTagged")}
-
 %% java-15 : StaticInit
                  "|[" StaticInit "]|" -> E {cons("ToMetaExpr")}
 "StaticInit"         "|[" StaticInit "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1815,9 +1791,15 @@
    "StaticInit*"        "|[" StaticInit* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:StaticInit*" "|[" StaticInit* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> StaticInit {cons("FromMetaExpr")}
-   "~StaticInit:" E                       -> StaticInit {cons("FromMetaExprTagged")}
+%% java-15 : InstanceInit
+                 "|[" InstanceInit "]|" -> E {cons("ToMetaExpr")}
+"InstanceInit"         "|[" InstanceInit "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:InstanceInit"  "|[" InstanceInit "]|" -> E {cons("ToMetaExprTagged2")}
 
+   "*"              "|[" InstanceInit* "]|" -> E {cons("ToMetaExpr")}
+   "InstanceInit*"        "|[" InstanceInit* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:InstanceInit*" "|[" InstanceInit* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : LocalVarDecStm
                  "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExpr")}
 "LocalVarDecStm"         "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1827,9 +1809,6 @@
    "LocalVarDecStm*"        "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:LocalVarDecStm*" "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> LocalVarDecStm {cons("FromMetaExpr")}
-   "~LocalVarDecStm:" E                       -> LocalVarDecStm {cons("FromMetaExprTagged")}
-
 %% java-15 : MethodDec
                  "|[" MethodDec "]|" -> E {cons("ToMetaExpr")}
 "MethodDec"         "|[" MethodDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1839,9 +1818,6 @@
    "MethodDec*"        "|[" MethodDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:MethodDec*" "|[" MethodDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> MethodDec {cons("FromMetaExpr")}
-   "~MethodDec:" E                       -> MethodDec {cons("FromMetaExprTagged")}
-
 %% java-15 : FieldDec
                  "|[" FieldDec "]|" -> E {cons("ToMetaExpr")}
 "FieldDec"         "|[" FieldDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1851,9 +1827,6 @@
    "FieldDec*"        "|[" FieldDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:FieldDec*" "|[" FieldDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> FieldDec {cons("FromMetaExpr")}
-   "~FieldDec:" E                       -> FieldDec {cons("FromMetaExprTagged")}
-
 %% java-15 : CompilationUnit
                  "|[" CompilationUnit "]|" -> E {cons("ToMetaExpr")}
 "CompilationUnit"         "|[" CompilationUnit "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1863,9 +1836,24 @@
    "CompilationUnit*"        "|[" CompilationUnit* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:CompilationUnit*" "|[" CompilationUnit* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> CompilationUnit {cons("FromMetaExpr")}
-   "~CompilationUnit:" E                       -> CompilationUnit {cons("FromMetaExprTagged")}
+%% java-15 : MethodName
+                 "|[" MethodName "]|" -> E {cons("ToMetaExpr")}
+"MethodName"         "|[" MethodName "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:MethodName"  "|[" MethodName "]|" -> E {cons("ToMetaExprTagged2")}
 
+   "*"              "|[" MethodName* "]|" -> E {cons("ToMetaExpr")}
+   "MethodName*"        "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:MethodName*" "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : TypeVar
+                 "|[" TypeVar "]|" -> E {cons("ToMetaExpr")}
+"TypeVar"         "|[" TypeVar "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:TypeVar"  "|[" TypeVar "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" TypeVar* "]|" -> E {cons("ToMetaExpr")}
+   "TypeVar*"        "|[" TypeVar* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:TypeVar*" "|[" TypeVar* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ArrayType
                  "|[" ArrayType "]|" -> E {cons("ToMetaExpr")}
 "ArrayType"         "|[" ArrayType "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1875,9 +1863,6 @@
    "ArrayType*"        "|[" ArrayType* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArrayType*" "|[" ArrayType* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ArrayType {cons("FromMetaExpr")}
-   "~ArrayType:" E                       -> ArrayType {cons("FromMetaExprTagged")}
-
 %% java-15 : IntType
                  "|[" IntType "]|" -> E {cons("ToMetaExpr")}
 "IntType"         "|[" IntType "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1887,9 +1872,6 @@
    "IntType*"        "|[" IntType* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:IntType*" "|[" IntType* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> IntType {cons("FromMetaExpr")}
-   "~IntType:" E                       -> IntType {cons("FromMetaExprTagged")}
-
 %% java-15 : FloatType
                  "|[" FloatType "]|" -> E {cons("ToMetaExpr")}
 "FloatType"         "|[" FloatType "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1899,9 +1881,6 @@
    "FloatType*"        "|[" FloatType* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:FloatType*" "|[" FloatType* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> FloatType {cons("FromMetaExpr")}
-   "~FloatType:" E                       -> FloatType {cons("FromMetaExprTagged")}
-
 %% java-15 : NullLiteral
                  "|[" NullLiteral "]|" -> E {cons("ToMetaExpr")}
 "NullLiteral"         "|[" NullLiteral "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1911,9 +1890,15 @@
    "NullLiteral*"        "|[" NullLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:NullLiteral*" "|[" NullLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> NullLiteral {cons("FromMetaExpr")}
-   "~NullLiteral:" E                       -> NullLiteral {cons("FromMetaExprTagged")}
+%% java-15 : BoolLiteral
+                 "|[" BoolLiteral "]|" -> E {cons("ToMetaExpr")}
+"BoolLiteral"         "|[" BoolLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:BoolLiteral"  "|[" BoolLiteral "]|" -> E {cons("ToMetaExprTagged2")}
 
+   "*"              "|[" BoolLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "BoolLiteral*"        "|[" BoolLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:BoolLiteral*" "|[" BoolLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : Bool
                  "|[" Bool "]|" -> E {cons("ToMetaExpr")}
 "Bool"         "|[" Bool "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1923,9 +1908,24 @@
    "Bool*"        "|[" Bool* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Bool*" "|[" Bool* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Bool {cons("FromMetaExpr")}
-   "~Bool:" E                       -> Bool {cons("FromMetaExprTagged")}
+%% java-15 : FloatLiteral
+                 "|[" FloatLiteral "]|" -> E {cons("ToMetaExpr")}
+"FloatLiteral"         "|[" FloatLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:FloatLiteral"  "|[" FloatLiteral "]|" -> E {cons("ToMetaExprTagged2")}
 
+   "*"              "|[" FloatLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "FloatLiteral*"        "|[" FloatLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:FloatLiteral*" "|[" FloatLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : IntLiteral
+                 "|[" IntLiteral "]|" -> E {cons("ToMetaExpr")}
+"IntLiteral"         "|[" IntLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:IntLiteral"  "|[" IntLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" IntLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "IntLiteral*"        "|[" IntLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:IntLiteral*" "|[" IntLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : Public
                  "|[" Public "]|" -> E {cons("ToMetaExpr")}
 "Public"         "|[" Public "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1935,9 +1935,6 @@
    "Public*"        "|[" Public* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Public*" "|[" Public* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Public {cons("FromMetaExpr")}
-   "~Public:" E                       -> Public {cons("FromMetaExprTagged")}
-
 %% java-15 : Private
                  "|[" Private "]|" -> E {cons("ToMetaExpr")}
 "Private"         "|[" Private "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1947,9 +1944,6 @@
    "Private*"        "|[" Private* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Private*" "|[" Private* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Private {cons("FromMetaExpr")}
-   "~Private:" E                       -> Private {cons("FromMetaExprTagged")}
-
 %% java-15 : Protected
                  "|[" Protected "]|" -> E {cons("ToMetaExpr")}
 "Protected"         "|[" Protected "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1959,9 +1953,6 @@
    "Protected*"        "|[" Protected* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Protected*" "|[" Protected* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Protected {cons("FromMetaExpr")}
-   "~Protected:" E                       -> Protected {cons("FromMetaExprTagged")}
-
 %% java-15 : Abstract
                  "|[" Abstract "]|" -> E {cons("ToMetaExpr")}
 "Abstract"         "|[" Abstract "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1971,9 +1962,6 @@
    "Abstract*"        "|[" Abstract* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Abstract*" "|[" Abstract* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Abstract {cons("FromMetaExpr")}
-   "~Abstract:" E                       -> Abstract {cons("FromMetaExprTagged")}
-
 %% java-15 : Final
                  "|[" Final "]|" -> E {cons("ToMetaExpr")}
 "Final"         "|[" Final "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1983,9 +1971,6 @@
    "Final*"        "|[" Final* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Final*" "|[" Final* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Final {cons("FromMetaExpr")}
-   "~Final:" E                       -> Final {cons("FromMetaExprTagged")}
-
 %% java-15 : Static
                  "|[" Static "]|" -> E {cons("ToMetaExpr")}
 "Static"         "|[" Static "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1995,9 +1980,6 @@
    "Static*"        "|[" Static* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Static*" "|[" Static* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Static {cons("FromMetaExpr")}
-   "~Static:" E                       -> Static {cons("FromMetaExprTagged")}
-
 %% java-15 : Native
                  "|[" Native "]|" -> E {cons("ToMetaExpr")}
 "Native"         "|[" Native "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2007,9 +1989,6 @@
    "Native*"        "|[" Native* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Native*" "|[" Native* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Native {cons("FromMetaExpr")}
-   "~Native:" E                       -> Native {cons("FromMetaExprTagged")}
-
 %% java-15 : Transient
                  "|[" Transient "]|" -> E {cons("ToMetaExpr")}
 "Transient"         "|[" Transient "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2019,9 +1998,6 @@
    "Transient*"        "|[" Transient* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Transient*" "|[" Transient* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Transient {cons("FromMetaExpr")}
-   "~Transient:" E                       -> Transient {cons("FromMetaExprTagged")}
-
 %% java-15 : Volatile
                  "|[" Volatile "]|" -> E {cons("ToMetaExpr")}
 "Volatile"         "|[" Volatile "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2031,9 +2007,6 @@
    "Volatile*"        "|[" Volatile* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Volatile*" "|[" Volatile* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Volatile {cons("FromMetaExpr")}
-   "~Volatile:" E                       -> Volatile {cons("FromMetaExprTagged")}
-
 %% java-15 : Synchronized
                  "|[" Synchronized "]|" -> E {cons("ToMetaExpr")}
 "Synchronized"         "|[" Synchronized "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2043,9 +2016,6 @@
    "Synchronized*"        "|[" Synchronized* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Synchronized*" "|[" Synchronized* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Synchronized {cons("FromMetaExpr")}
-   "~Synchronized:" E                       -> Synchronized {cons("FromMetaExprTagged")}
-
 %% java-15 : StrictFP
                  "|[" StrictFP "]|" -> E {cons("ToMetaExpr")}
 "StrictFP"         "|[" StrictFP "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2055,9 +2025,6 @@
    "StrictFP*"        "|[" StrictFP* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:StrictFP*" "|[" StrictFP* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> StrictFP {cons("FromMetaExpr")}
-   "~StrictFP:" E                       -> StrictFP {cons("FromMetaExprTagged")}
-
 %% java-15 : CondMid
                  "|[" CondMid "]|" -> E {cons("ToMetaExpr")}
 "CondMid"         "|[" CondMid "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2067,21 +2034,6 @@
    "CondMid*"        "|[" CondMid* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:CondMid*" "|[" CondMid* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> CondMid {cons("FromMetaExpr")}
-   "~CondMid:" E                       -> CondMid {cons("FromMetaExprTagged")}
-
-%% java-15 : PrimType
-                 "|[" PrimType "]|" -> E {cons("ToMetaExpr")}
-"PrimType"         "|[" PrimType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:PrimType"  "|[" PrimType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" PrimType* "]|" -> E {cons("ToMetaExpr")}
-   "PrimType*"        "|[" PrimType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:PrimType*" "|[" PrimType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> PrimType {cons("FromMetaExpr")}
-   "~PrimType:" E                       -> PrimType {cons("FromMetaExprTagged")}
-
 %% java-15 : MethodSpec
                  "|[" MethodSpec "]|" -> E {cons("ToMetaExpr")}
 "MethodSpec"         "|[" MethodSpec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2091,9 +2043,6 @@
    "MethodSpec*"        "|[" MethodSpec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:MethodSpec*" "|[" MethodSpec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> MethodSpec {cons("FromMetaExpr")}
-   "~MethodSpec:" E                       -> MethodSpec {cons("FromMetaExprTagged")}
-
 %% java-15 : ArrayCreationExpr
                  "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExpr")}
 "ArrayCreationExpr"         "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2103,9 +2052,6 @@
    "ArrayCreationExpr*"        "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArrayCreationExpr*" "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ArrayCreationExpr {cons("FromMetaExpr")}
-   "~ArrayCreationExpr:" E                       -> ArrayCreationExpr {cons("FromMetaExprTagged")}
-
 %% java-15 : ArraySubscript
                  "|[" ArraySubscript "]|" -> E {cons("ToMetaExpr")}
 "ArraySubscript"         "|[" ArraySubscript "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2115,9 +2061,6 @@
    "ArraySubscript*"        "|[" ArraySubscript* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArraySubscript*" "|[" ArraySubscript* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ArraySubscript {cons("FromMetaExpr")}
-   "~ArraySubscript:" E                       -> ArraySubscript {cons("FromMetaExprTagged")}
-
 %% java-15 : ExprName
                  "|[" ExprName "]|" -> E {cons("ToMetaExpr")}
 "ExprName"         "|[" ExprName "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2127,9 +2070,6 @@
    "ExprName*"        "|[" ExprName* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ExprName*" "|[" ExprName* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ExprName {cons("FromMetaExpr")}
-   "~ExprName:" E                       -> ExprName {cons("FromMetaExprTagged")}
-
 %% java-15 : DimExpr
                  "|[" DimExpr "]|" -> E {cons("ToMetaExpr")}
 "DimExpr"         "|[" DimExpr "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2139,21 +2079,6 @@
    "DimExpr*"        "|[" DimExpr* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:DimExpr*" "|[" DimExpr* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> DimExpr {cons("FromMetaExpr")}
-   "~DimExpr:" E                       -> DimExpr {cons("FromMetaExprTagged")}
-
-%% java-15 : ArrayBaseType
-                 "|[" ArrayBaseType "]|" -> E {cons("ToMetaExpr")}
-"ArrayBaseType"         "|[" ArrayBaseType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ArrayBaseType"  "|[" ArrayBaseType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExpr")}
-   "ArrayBaseType*"        "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ArrayBaseType*" "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> ArrayBaseType {cons("FromMetaExpr")}
-   "~ArrayBaseType:" E                       -> ArrayBaseType {cons("FromMetaExprTagged")}
-
 %% java-15 : ArrayInit
                  "|[" ArrayInit "]|" -> E {cons("ToMetaExpr")}
 "ArrayInit"         "|[" ArrayInit "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2163,9 +2088,6 @@
    "ArrayInit*"        "|[" ArrayInit* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArrayInit*" "|[" ArrayInit* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ArrayInit {cons("FromMetaExpr")}
-   "~ArrayInit:" E                       -> ArrayInit {cons("FromMetaExprTagged")}
-
 %% java-15 : PackageName
                  "|[" PackageName "]|" -> E {cons("ToMetaExpr")}
 "PackageName"         "|[" PackageName "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2175,9 +2097,6 @@
    "PackageName*"        "|[" PackageName* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:PackageName*" "|[" PackageName* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> PackageName {cons("FromMetaExpr")}
-   "~PackageName:" E                       -> PackageName {cons("FromMetaExprTagged")}
-
 %% java-15 : AnnoDecHead
                  "|[" AnnoDecHead "]|" -> E {cons("ToMetaExpr")}
 "AnnoDecHead"         "|[" AnnoDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2187,21 +2106,6 @@
    "AnnoDecHead*"        "|[" AnnoDecHead* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:AnnoDecHead*" "|[" AnnoDecHead* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> AnnoDecHead {cons("FromMetaExpr")}
-   "~AnnoDecHead:" E                       -> AnnoDecHead {cons("FromMetaExprTagged")}
-
-%% java-15 : AnnoElemDec
-                 "|[" AnnoElemDec "]|" -> E {cons("ToMetaExpr")}
-"AnnoElemDec"         "|[" AnnoElemDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:AnnoElemDec"  "|[" AnnoElemDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" AnnoElemDec* "]|" -> E {cons("ToMetaExpr")}
-   "AnnoElemDec*"        "|[" AnnoElemDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:AnnoElemDec*" "|[" AnnoElemDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> AnnoElemDec {cons("FromMetaExpr")}
-   "~AnnoElemDec:" E                       -> AnnoElemDec {cons("FromMetaExprTagged")}
-
 %% java-15 : DefaultVal
                  "|[" DefaultVal "]|" -> E {cons("ToMetaExpr")}
 "DefaultVal"         "|[" DefaultVal "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2211,33 +2115,6 @@
    "DefaultVal*"        "|[" DefaultVal* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:DefaultVal*" "|[" DefaultVal* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> DefaultVal {cons("FromMetaExpr")}
-   "~DefaultVal:" E                       -> DefaultVal {cons("FromMetaExprTagged")}
-
-%% java-15 : AbstractMethodMod
-                 "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExpr")}
-"AbstractMethodMod"         "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:AbstractMethodMod"  "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExpr")}
-   "AbstractMethodMod*"        "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:AbstractMethodMod*" "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> AbstractMethodMod {cons("FromMetaExpr")}
-   "~AbstractMethodMod:" E                       -> AbstractMethodMod {cons("FromMetaExprTagged")}
-
-%% java-15 : ConstantMod
-                 "|[" ConstantMod "]|" -> E {cons("ToMetaExpr")}
-"ConstantMod"         "|[" ConstantMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ConstantMod"  "|[" ConstantMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ConstantMod* "]|" -> E {cons("ToMetaExpr")}
-   "ConstantMod*"        "|[" ConstantMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ConstantMod*" "|[" ConstantMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> ConstantMod {cons("FromMetaExpr")}
-   "~ConstantMod:" E                       -> ConstantMod {cons("FromMetaExprTagged")}
-
 %% java-15 : InterfaceDecHead
                  "|[" InterfaceDecHead "]|" -> E {cons("ToMetaExpr")}
 "InterfaceDecHead"         "|[" InterfaceDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2247,33 +2124,6 @@
    "InterfaceDecHead*"        "|[" InterfaceDecHead* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:InterfaceDecHead*" "|[" InterfaceDecHead* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> InterfaceDecHead {cons("FromMetaExpr")}
-   "~InterfaceDecHead:" E                       -> InterfaceDecHead {cons("FromMetaExprTagged")}
-
-%% java-15 : InterfaceMemberDec
-                 "|[" InterfaceMemberDec "]|" -> E {cons("ToMetaExpr")}
-"InterfaceMemberDec"         "|[" InterfaceMemberDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:InterfaceMemberDec"  "|[" InterfaceMemberDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExpr")}
-   "InterfaceMemberDec*"        "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:InterfaceMemberDec*" "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> InterfaceMemberDec {cons("FromMetaExpr")}
-   "~InterfaceMemberDec:" E                       -> InterfaceMemberDec {cons("FromMetaExprTagged")}
-
-%% java-15 : InterfaceMod
-                 "|[" InterfaceMod "]|" -> E {cons("ToMetaExpr")}
-"InterfaceMod"         "|[" InterfaceMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:InterfaceMod"  "|[" InterfaceMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" InterfaceMod* "]|" -> E {cons("ToMetaExpr")}
-   "InterfaceMod*"        "|[" InterfaceMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:InterfaceMod*" "|[" InterfaceMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> InterfaceMod {cons("FromMetaExpr")}
-   "~InterfaceMod:" E                       -> InterfaceMod {cons("FromMetaExprTagged")}
-
 %% java-15 : ExtendsInterfaces
                  "|[" ExtendsInterfaces "]|" -> E {cons("ToMetaExpr")}
 "ExtendsInterfaces"         "|[" ExtendsInterfaces "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2283,9 +2133,6 @@
    "ExtendsInterfaces*"        "|[" ExtendsInterfaces* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ExtendsInterfaces*" "|[" ExtendsInterfaces* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ExtendsInterfaces {cons("FromMetaExpr")}
-   "~ExtendsInterfaces:" E                       -> ExtendsInterfaces {cons("FromMetaExprTagged")}
-
 %% java-15 : EnumDecHead
                  "|[" EnumDecHead "]|" -> E {cons("ToMetaExpr")}
 "EnumDecHead"         "|[" EnumDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2295,9 +2142,6 @@
    "EnumDecHead*"        "|[" EnumDecHead* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:EnumDecHead*" "|[" EnumDecHead* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> EnumDecHead {cons("FromMetaExpr")}
-   "~EnumDecHead:" E                       -> EnumDecHead {cons("FromMetaExprTagged")}
-
 %% java-15 : EnumBody
                  "|[" EnumBody "]|" -> E {cons("ToMetaExpr")}
 "EnumBody"         "|[" EnumBody "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2307,9 +2151,6 @@
    "EnumBody*"        "|[" EnumBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:EnumBody*" "|[" EnumBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> EnumBody {cons("FromMetaExpr")}
-   "~EnumBody:" E                       -> EnumBody {cons("FromMetaExprTagged")}
-
 %% java-15 : EnumConst
                  "|[" EnumConst "]|" -> E {cons("ToMetaExpr")}
 "EnumConst"         "|[" EnumConst "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2319,9 +2160,6 @@
    "EnumConst*"        "|[" EnumConst* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:EnumConst*" "|[" EnumConst* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> EnumConst {cons("FromMetaExpr")}
-   "~EnumConst:" E                       -> EnumConst {cons("FromMetaExprTagged")}
-
 %% java-15 : EnumBodyDecs
                  "|[" EnumBodyDecs "]|" -> E {cons("ToMetaExpr")}
 "EnumBodyDecs"         "|[" EnumBodyDecs "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2331,9 +2169,6 @@
    "EnumBodyDecs*"        "|[" EnumBodyDecs* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:EnumBodyDecs*" "|[" EnumBodyDecs* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> EnumBodyDecs {cons("FromMetaExpr")}
-   "~EnumBodyDecs:" E                       -> EnumBodyDecs {cons("FromMetaExprTagged")}
-
 %% java-15 : EnumConstArgs
                  "|[" EnumConstArgs "]|" -> E {cons("ToMetaExpr")}
 "EnumConstArgs"         "|[" EnumConstArgs "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2343,9 +2178,6 @@
    "EnumConstArgs*"        "|[" EnumConstArgs* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:EnumConstArgs*" "|[" EnumConstArgs* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> EnumConstArgs {cons("FromMetaExpr")}
-   "~EnumConstArgs:" E                       -> EnumConstArgs {cons("FromMetaExprTagged")}
-
 %% java-15 : ConstrHead
                  "|[" ConstrHead "]|" -> E {cons("ToMetaExpr")}
 "ConstrHead"         "|[" ConstrHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2355,9 +2187,6 @@
    "ConstrHead*"        "|[" ConstrHead* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ConstrHead*" "|[" ConstrHead* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ConstrHead {cons("FromMetaExpr")}
-   "~ConstrHead:" E                       -> ConstrHead {cons("FromMetaExprTagged")}
-
 %% java-15 : ConstrBody
                  "|[" ConstrBody "]|" -> E {cons("ToMetaExpr")}
 "ConstrBody"         "|[" ConstrBody "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2367,21 +2196,6 @@
    "ConstrBody*"        "|[" ConstrBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ConstrBody*" "|[" ConstrBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ConstrBody {cons("FromMetaExpr")}
-   "~ConstrBody:" E                       -> ConstrBody {cons("FromMetaExprTagged")}
-
-%% java-15 : ConstrMod
-                 "|[" ConstrMod "]|" -> E {cons("ToMetaExpr")}
-"ConstrMod"         "|[" ConstrMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ConstrMod"  "|[" ConstrMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ConstrMod* "]|" -> E {cons("ToMetaExpr")}
-   "ConstrMod*"        "|[" ConstrMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ConstrMod*" "|[" ConstrMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> ConstrMod {cons("FromMetaExpr")}
-   "~ConstrMod:" E                       -> ConstrMod {cons("FromMetaExprTagged")}
-
 %% java-15 : ConstrInv
                  "|[" ConstrInv "]|" -> E {cons("ToMetaExpr")}
 "ConstrInv"         "|[" ConstrInv "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2391,9 +2205,6 @@
    "ConstrInv*"        "|[" ConstrInv* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ConstrInv*" "|[" ConstrInv* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ConstrInv {cons("FromMetaExpr")}
-   "~ConstrInv:" E                       -> ConstrInv {cons("FromMetaExprTagged")}
-
 %% java-15 : SwitchBlock
                  "|[" SwitchBlock "]|" -> E {cons("ToMetaExpr")}
 "SwitchBlock"         "|[" SwitchBlock "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2403,9 +2214,6 @@
    "SwitchBlock*"        "|[" SwitchBlock* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:SwitchBlock*" "|[" SwitchBlock* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> SwitchBlock {cons("FromMetaExpr")}
-   "~SwitchBlock:" E                       -> SwitchBlock {cons("FromMetaExprTagged")}
-
 %% java-15 : SwitchGroup
                  "|[" SwitchGroup "]|" -> E {cons("ToMetaExpr")}
 "SwitchGroup"         "|[" SwitchGroup "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2415,9 +2223,6 @@
    "SwitchGroup*"        "|[" SwitchGroup* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:SwitchGroup*" "|[" SwitchGroup* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> SwitchGroup {cons("FromMetaExpr")}
-   "~SwitchGroup:" E                       -> SwitchGroup {cons("FromMetaExprTagged")}
-
 %% java-15 : SwitchLabel
                  "|[" SwitchLabel "]|" -> E {cons("ToMetaExpr")}
 "SwitchLabel"         "|[" SwitchLabel "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2427,21 +2232,6 @@
    "SwitchLabel*"        "|[" SwitchLabel* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:SwitchLabel*" "|[" SwitchLabel* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> SwitchLabel {cons("FromMetaExpr")}
-   "~SwitchLabel:" E                       -> SwitchLabel {cons("FromMetaExprTagged")}
-
-%% java-15 : Stm
-                 "|[" Stm "]|" -> E {cons("ToMetaExpr")}
-"Stm"         "|[" Stm "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Stm"  "|[" Stm "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Stm* "]|" -> E {cons("ToMetaExpr")}
-   "Stm*"        "|[" Stm* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Stm*" "|[" Stm* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> Stm {cons("FromMetaExpr")}
-   "~Stm:" E                       -> Stm {cons("FromMetaExprTagged")}
-
 %% java-15 : CatchClause
                  "|[" CatchClause "]|" -> E {cons("ToMetaExpr")}
 "CatchClause"         "|[" CatchClause "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2451,9 +2241,6 @@
    "CatchClause*"        "|[" CatchClause* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:CatchClause*" "|[" CatchClause* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> CatchClause {cons("FromMetaExpr")}
-   "~CatchClause:" E                       -> CatchClause {cons("FromMetaExprTagged")}
-
 %% java-15 : Block
                  "|[" Block "]|" -> E {cons("ToMetaExpr")}
 "Block"         "|[" Block "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2463,9 +2250,6 @@
    "Block*"        "|[" Block* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Block*" "|[" Block* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Block {cons("FromMetaExpr")}
-   "~Block:" E                       -> Block {cons("FromMetaExprTagged")}
-
 %% java-15 : LocalVarDec
                  "|[" LocalVarDec "]|" -> E {cons("ToMetaExpr")}
 "LocalVarDec"         "|[" LocalVarDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2475,21 +2259,6 @@
    "LocalVarDec*"        "|[" LocalVarDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:LocalVarDec*" "|[" LocalVarDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> LocalVarDec {cons("FromMetaExpr")}
-   "~LocalVarDec:" E                       -> LocalVarDec {cons("FromMetaExprTagged")}
-
-%% java-15 : BlockStm
-                 "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
-"BlockStm"         "|[" BlockStm "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:BlockStm"  "|[" BlockStm "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" BlockStm* "]|" -> E {cons("ToMetaExpr")}
-   "BlockStm*"        "|[" BlockStm* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:BlockStm*" "|[" BlockStm* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> BlockStm {cons("FromMetaExpr")}
-   "~BlockStm:" E                       -> BlockStm {cons("FromMetaExprTagged")}
-
 %% java-15 : MethodDecHead
                  "|[" MethodDecHead "]|" -> E {cons("ToMetaExpr")}
 "MethodDecHead"         "|[" MethodDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2499,45 +2268,6 @@
    "MethodDecHead*"        "|[" MethodDecHead* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:MethodDecHead*" "|[" MethodDecHead* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> MethodDecHead {cons("FromMetaExpr")}
-   "~MethodDecHead:" E                       -> MethodDecHead {cons("FromMetaExprTagged")}
-
-%% java-15 : MethodBody
-                 "|[" MethodBody "]|" -> E {cons("ToMetaExpr")}
-"MethodBody"         "|[" MethodBody "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:MethodBody"  "|[" MethodBody "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" MethodBody* "]|" -> E {cons("ToMetaExpr")}
-   "MethodBody*"        "|[" MethodBody* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:MethodBody*" "|[" MethodBody* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> MethodBody {cons("FromMetaExpr")}
-   "~MethodBody:" E                       -> MethodBody {cons("FromMetaExprTagged")}
-
-%% java-15 : MethodMod
-                 "|[" MethodMod "]|" -> E {cons("ToMetaExpr")}
-"MethodMod"         "|[" MethodMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:MethodMod"  "|[" MethodMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" MethodMod* "]|" -> E {cons("ToMetaExpr")}
-   "MethodMod*"        "|[" MethodMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:MethodMod*" "|[" MethodMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> MethodMod {cons("FromMetaExpr")}
-   "~MethodMod:" E                       -> MethodMod {cons("FromMetaExprTagged")}
-
-%% java-15 : ResultType
-                 "|[" ResultType "]|" -> E {cons("ToMetaExpr")}
-"ResultType"         "|[" ResultType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ResultType"  "|[" ResultType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ResultType* "]|" -> E {cons("ToMetaExpr")}
-   "ResultType*"        "|[" ResultType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ResultType*" "|[" ResultType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> ResultType {cons("FromMetaExpr")}
-   "~ResultType:" E                       -> ResultType {cons("FromMetaExprTagged")}
-
 %% java-15 : FormalParam
                  "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
 "FormalParam"         "|[" FormalParam "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2547,9 +2277,6 @@
    "FormalParam*"        "|[" FormalParam* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:FormalParam*" "|[" FormalParam* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> FormalParam {cons("FromMetaExpr")}
-   "~FormalParam:" E                       -> FormalParam {cons("FromMetaExprTagged")}
-
 %% java-15 : Throws
                  "|[" Throws "]|" -> E {cons("ToMetaExpr")}
 "Throws"         "|[" Throws "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2559,33 +2286,6 @@
    "Throws*"        "|[" Throws* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Throws*" "|[" Throws* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Throws {cons("FromMetaExpr")}
-   "~Throws:" E                       -> Throws {cons("FromMetaExprTagged")}
-
-%% java-15 : VarMod
-                 "|[" VarMod "]|" -> E {cons("ToMetaExpr")}
-"VarMod"         "|[" VarMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:VarMod"  "|[" VarMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" VarMod* "]|" -> E {cons("ToMetaExpr")}
-   "VarMod*"        "|[" VarMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:VarMod*" "|[" VarMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> VarMod {cons("FromMetaExpr")}
-   "~VarMod:" E                       -> VarMod {cons("FromMetaExprTagged")}
-
-%% java-15 : ExceptionType
-                 "|[" ExceptionType "]|" -> E {cons("ToMetaExpr")}
-"ExceptionType"         "|[" ExceptionType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ExceptionType"  "|[" ExceptionType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ExceptionType* "]|" -> E {cons("ToMetaExpr")}
-   "ExceptionType*"        "|[" ExceptionType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ExceptionType*" "|[" ExceptionType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> ExceptionType {cons("FromMetaExpr")}
-   "~ExceptionType:" E                       -> ExceptionType {cons("FromMetaExprTagged")}
-
 %% java-15 : ElemValPair
                  "|[" ElemValPair "]|" -> E {cons("ToMetaExpr")}
 "ElemValPair"         "|[" ElemValPair "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2595,9 +2295,6 @@
    "ElemValPair*"        "|[" ElemValPair* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ElemValPair*" "|[" ElemValPair* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ElemValPair {cons("FromMetaExpr")}
-   "~ElemValPair:" E                       -> ElemValPair {cons("FromMetaExprTagged")}
-
 %% java-15 : TypeName
                  "|[" TypeName "]|" -> E {cons("ToMetaExpr")}
 "TypeName"         "|[" TypeName "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2607,9 +2304,6 @@
    "TypeName*"        "|[" TypeName* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeName*" "|[" TypeName* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> TypeName {cons("FromMetaExpr")}
-   "~TypeName:" E                       -> TypeName {cons("FromMetaExprTagged")}
-
 %% java-15 : ElemVal
                  "|[" ElemVal "]|" -> E {cons("ToMetaExpr")}
 "ElemVal"         "|[" ElemVal "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2619,45 +2313,6 @@
    "ElemVal*"        "|[" ElemVal* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ElemVal*" "|[" ElemVal* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ElemVal {cons("FromMetaExpr")}
-   "~ElemVal:" E                       -> ElemVal {cons("FromMetaExprTagged")}
-
-%% java-15 : LHS
-                 "|[" LHS "]|" -> E {cons("ToMetaExpr")}
-"LHS"         "|[" LHS "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:LHS"  "|[" LHS "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" LHS* "]|" -> E {cons("ToMetaExpr")}
-   "LHS*"        "|[" LHS* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:LHS*" "|[" LHS* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> LHS {cons("FromMetaExpr")}
-   "~LHS:" E                       -> LHS {cons("FromMetaExprTagged")}
-
-%% java-15 : Expr
-                 "|[" Expr "]|" -> E {cons("ToMetaExpr")}
-"Expr"         "|[" Expr "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Expr"  "|[" Expr "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Expr* "]|" -> E {cons("ToMetaExpr")}
-   "Expr*"        "|[" Expr* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Expr*" "|[" Expr* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> Expr {cons("FromMetaExpr")}
-   "~Expr:" E                       -> Expr {cons("FromMetaExprTagged")}
-
-%% java-15 : FieldMod
-                 "|[" FieldMod "]|" -> E {cons("ToMetaExpr")}
-"FieldMod"         "|[" FieldMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FieldMod"  "|[" FieldMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FieldMod* "]|" -> E {cons("ToMetaExpr")}
-   "FieldMod*"        "|[" FieldMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FieldMod*" "|[" FieldMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> FieldMod {cons("FromMetaExpr")}
-   "~FieldMod:" E                       -> FieldMod {cons("FromMetaExprTagged")}
-
 %% java-15 : VarDec
                  "|[" VarDec "]|" -> E {cons("ToMetaExpr")}
 "VarDec"         "|[" VarDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2667,33 +2322,6 @@
    "VarDec*"        "|[" VarDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:VarDec*" "|[" VarDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> VarDec {cons("FromMetaExpr")}
-   "~VarDec:" E                       -> VarDec {cons("FromMetaExprTagged")}
-
-%% java-15 : VarDecId
-                 "|[" VarDecId "]|" -> E {cons("ToMetaExpr")}
-"VarDecId"         "|[" VarDecId "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:VarDecId"  "|[" VarDecId "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" VarDecId* "]|" -> E {cons("ToMetaExpr")}
-   "VarDecId*"        "|[" VarDecId* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:VarDecId*" "|[" VarDecId* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> VarDecId {cons("FromMetaExpr")}
-   "~VarDecId:" E                       -> VarDecId {cons("FromMetaExprTagged")}
-
-%% java-15 : VarInit
-                 "|[" VarInit "]|" -> E {cons("ToMetaExpr")}
-"VarInit"         "|[" VarInit "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:VarInit"  "|[" VarInit "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" VarInit* "]|" -> E {cons("ToMetaExpr")}
-   "VarInit*"        "|[" VarInit* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:VarInit*" "|[" VarInit* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> VarInit {cons("FromMetaExpr")}
-   "~VarInit:" E                       -> VarInit {cons("FromMetaExprTagged")}
-
 %% java-15 : Dim
                  "|[" Dim "]|" -> E {cons("ToMetaExpr")}
 "Dim"         "|[" Dim "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2703,9 +2331,6 @@
    "Dim*"        "|[" Dim* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Dim*" "|[" Dim* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Dim {cons("FromMetaExpr")}
-   "~Dim:" E                       -> Dim {cons("FromMetaExprTagged")}
-
 %% java-15 : ClassDecHead
                  "|[" ClassDecHead "]|" -> E {cons("ToMetaExpr")}
 "ClassDecHead"         "|[" ClassDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2715,9 +2340,6 @@
    "ClassDecHead*"        "|[" ClassDecHead* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ClassDecHead*" "|[" ClassDecHead* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ClassDecHead {cons("FromMetaExpr")}
-   "~ClassDecHead:" E                       -> ClassDecHead {cons("FromMetaExprTagged")}
-
 %% java-15 : ClassBody
                  "|[" ClassBody "]|" -> E {cons("ToMetaExpr")}
 "ClassBody"         "|[" ClassBody "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2727,21 +2349,6 @@
    "ClassBody*"        "|[" ClassBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ClassBody*" "|[" ClassBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> ClassBody {cons("FromMetaExpr")}
-   "~ClassBody:" E                       -> ClassBody {cons("FromMetaExprTagged")}
-
-%% java-15 : ClassBodyDec
-                 "|[" ClassBodyDec "]|" -> E {cons("ToMetaExpr")}
-"ClassBodyDec"         "|[" ClassBodyDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassBodyDec"  "|[" ClassBodyDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
-   "ClassBodyDec*"        "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassBodyDec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> ClassBodyDec {cons("FromMetaExpr")}
-   "~ClassBodyDec:" E                       -> ClassBodyDec {cons("FromMetaExprTagged")}
-
 %% java-15 : Anno
                  "|[" Anno "]|" -> E {cons("ToMetaExpr")}
 "Anno"         "|[" Anno "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2751,21 +2358,6 @@
    "Anno*"        "|[" Anno* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Anno*" "|[" Anno* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> Anno {cons("FromMetaExpr")}
-   "~Anno:" E                       -> Anno {cons("FromMetaExprTagged")}
-
-%% java-15 : ClassMod
-                 "|[" ClassMod "]|" -> E {cons("ToMetaExpr")}
-"ClassMod"         "|[" ClassMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassMod"  "|[" ClassMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassMod* "]|" -> E {cons("ToMetaExpr")}
-   "ClassMod*"        "|[" ClassMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassMod*" "|[" ClassMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "~"        E                       -> ClassMod {cons("FromMetaExpr")}
-   "~ClassMod:" E                       -> ClassMod {cons("FromMetaExprTagged")}
-
 %% java-15 : TypeParams
                  "|[" TypeParams "]|" -> E {cons("ToMetaExpr")}
 "TypeParams"         "|[" TypeParams "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2775,9 +2367,6 @@
    "TypeParams*"        "|[" TypeParams* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeParams*" "|[" TypeParams* "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "~"        E                       -> TypeParams {cons("FromMetaExpr")}
-   "~TypeParams:" E                       -> TypeParams {cons("FromMetaExprTagged")}
-
 %% java-15 : Super
                  "|[" Super "]|" -> E {cons("ToMetaExpr")}
 "Super"         "|[" Super "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2787,9 +2376,6 @@
    "Super*"        "|[" Super* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Super*" "|[" Super* "]|" -> E {cons("ToMetaExprTagged2")}

(657 diff lines omitted)

From L.C.L.Kats at tudelft.nl  Fri Jul  2 14:19:55 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 02 Jul 2010 12:19:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21068 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201007021219.o62CJtFD021977@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-02 12:19:55 +0000 (Fri, 02 Jul 2010)
New Revision: 21068

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21068&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java

Log:
Don't retain unnecessary memory

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-07-02 11:54:48 UTC (rev 21067)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-07-02 12:19:55 UTC (rev 21068)
@@ -205,13 +205,21 @@
             return result;
         } catch (RuntimeException e) {
             throw new FilterException(parser, "Runtime exception when applying filters", e);
+        } finally {
+            initializeFromParser(null);
         }
     }
 
     private void initializeFromParser(SGLR parser) {
-        this.parser = parser;
-        parseTable = parser.getParseTable();
-        ambiguityManager = parser.getAmbiguityManager();
+        if (parser == null) {
+            this.parser = null;
+            parseTable = null;
+            ambiguityManager = null;
+        } else {
+            this.parser = parser;
+            parseTable = parser.getParseTable();
+            ambiguityManager = parser.getAmbiguityManager();
+        }
     }
 
     private void logStatus() {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2010-07-02 11:54:48 UTC (rev 21067)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2010-07-02 12:19:55 UTC (rev 21068)
@@ -123,6 +123,7 @@
         gotoCache = null;
         shiftCache = null;
         reduceCache = null;
+        rangesCache = null;
         
         return true;
     }
@@ -204,8 +205,8 @@
         return ret;
     }
 
-    @SuppressWarnings("unchecked")
-	private boolean isInjection(ATermAppl prod) {
+    @SuppressWarnings("rawtypes")
+    private boolean isInjection(ATermAppl prod) {
 
         List r = prod.match(injection1Appl);
         if (r != null && r.size() >= 1) {
@@ -586,8 +587,8 @@
     }
 
     public List<Priority> getPriorities(Label prodLabel) {
-        if (priorityCache == null) priorityCache =
-            Collections.synchronizedMap(new HashMap<Label, List<Priority>>());        
+        if (priorityCache == null)
+            priorityCache = new HashMap<Label, List<Priority>>();        
         List<Priority> results = priorityCache.get(prodLabel);
         if (results != null) return results;
         


From L.C.L.Kats at tudelft.nl  Fri Jul  2 14:20:50 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 02 Jul 2010 12:20:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21069 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
Message-ID: <201007021220.o62CKok3021999@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-02 12:20:50 +0000 (Fri, 02 Jul 2010)
New Revision: 21069

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21069&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_new.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_newname.java

Log:
- Use a static counter for SSL_new to improve IDE performance
- Use a weakhashmap for SSL_newname counters

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_new.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_new.java	2010-07-02 12:19:55 UTC (rev 21068)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_new.java	2010-07-02 12:20:50 UTC (rev 21069)
@@ -16,32 +16,33 @@
 
 public class SSL_new extends AbstractPrimitive {
 
-    private int alphaCounter;
-    private int counter;
-    private int letterA = 'a';
+    // static, like TermFactory.asyncStringPool
+    private static int alphaCounter;
+    private static int counter;
+    private static int letterA = 'a';
 
     protected SSL_new() {
         super("SSL_new", 0, 0);
-
-        alphaCounter = 0;
-        counter = 0;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         ITermFactory factory = env.getFactory();
 
-        String s = (char)(letterA + alphaCounter) + "_" + counter;
-        while(factory.hasConstructor(s, 0)) {
-            alphaCounter++;
-            if(alphaCounter > 25) {
-                alphaCounter = 0;
-                counter++;
+        synchronized (SSL_new.class) { 
+            String s = (char)(letterA + alphaCounter) + "_" + counter;
+            while(factory.hasConstructor(s, 0)) {
+                alphaCounter++;
+                if(alphaCounter > 25) {
+                    alphaCounter = 0;
+                    counter++;
+                    if (counter < 0) counter = 0;
+                }
+                s = (char)(letterA + alphaCounter) + "_" + counter;
             }
-            s = (char)(letterA + alphaCounter) + "_" + counter;
+            env.setCurrent(env.getFactory().makeString(s));
         }
 
-        env.setCurrent(env.getFactory().makeString(s));
         return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_newname.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_newname.java	2010-07-02 12:19:55 UTC (rev 21068)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_newname.java	2010-07-02 12:20:50 UTC (rev 21069)
@@ -2,7 +2,7 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 
-import java.util.HashMap;
+import java.util.WeakHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.spoofax.interpreter.core.IContext;
@@ -17,8 +17,8 @@
 public class SSL_newname extends AbstractPrimitive {
 	
     // static, like TermFactory.asyncStringPool
-    private static HashMap<String, AtomicInteger> asyncCounters =
-        new HashMap<String, AtomicInteger>();
+    private static WeakHashMap<String, AtomicInteger> asyncCounters =
+        new WeakHashMap<String, AtomicInteger>();
 	
 	SSL_newname () {
 		super("SSL_newname", 0, 1);
@@ -54,7 +54,8 @@
 	    
         String result;
         do {
-        	result = prefix + counter.getAndIncrement();
+            int counterValue = getNextValue(counter);
+        	result = prefix + counterValue;
         } while (factory.hasConstructor(result, 0));
 
         env.setCurrent(factory.makeString(result));
@@ -62,4 +63,14 @@
 		return true;
 	}
 
+    private int getNextValue(AtomicInteger counter) {
+        int result;
+        for (;;) {
+            result = counter.getAndIncrement();
+            if (result > 0) break;
+            else counter.compareAndSet(result, 0);
+        }
+        return result;
+    }
+
 }


From L.C.L.Kats at tudelft.nl  Fri Jul  2 14:21:16 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 02 Jul 2010 12:21:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21070 - LennartKats -
	strc-java/trunk/java
Message-ID: <201007021221.o62CLGaN022001@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-02 12:21:16 +0000 (Fri, 02 Jul 2010)
New Revision: 21070

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21070&view=rev

Modified:
   strc-java/trunk/java/spoofax-libs.jar

Log:


Changes:

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)


From L.C.L.Kats at tudelft.nl  Fri Jul  2 15:42:58 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 02 Jul 2010 13:42:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21071 - LennartKats -
	in experimental/meta-amb-suggestions: syntax/generated
	test/dryad trans/cli
Message-ID: <201007021342.o62DgwFx022977@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-02 13:42:58 +0000 (Fri, 02 Jul 2010)
New Revision: 21071

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21071&view=rev

Modified:
   experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def
   experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met
   experimental/meta-amb-suggestions/trans/cli/compose-grammars.str

Log:
fixed regressions(?) -- needs more work

Changes (first 1000 lines of the diffs):

Modified: experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def
===================================================================
--- experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def	2010-07-02 12:21:16 UTC (rev 21070)
+++ experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def	2010-07-02 13:42:58 UTC (rev 21071)
@@ -1710,123 +1710,6 @@
 exports
   context-free syntax %% Quotations
 
-%% java-15 : ArrayAccess
-                 "|[" ArrayAccess "]|" -> E {cons("ToMetaExpr")}
-"ArrayAccess"         "|[" ArrayAccess "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ArrayAccess"  "|[" ArrayAccess "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ArrayAccess* "]|" -> E {cons("ToMetaExpr")}
-   "ArrayAccess*"        "|[" ArrayAccess* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ArrayAccess*" "|[" ArrayAccess* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : FieldAccess
-                 "|[" FieldAccess "]|" -> E {cons("ToMetaExpr")}
-"FieldAccess"         "|[" FieldAccess "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FieldAccess"  "|[" FieldAccess "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FieldAccess* "]|" -> E {cons("ToMetaExpr")}
-   "FieldAccess*"        "|[" FieldAccess* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FieldAccess*" "|[" FieldAccess* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ClassLiteral
-                 "|[" ClassLiteral "]|" -> E {cons("ToMetaExpr")}
-"ClassLiteral"         "|[" ClassLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassLiteral"  "|[" ClassLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "ClassLiteral*"        "|[" ClassLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassLiteral*" "|[" ClassLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : AnnoDec
-                 "|[" AnnoDec "]|" -> E {cons("ToMetaExpr")}
-"AnnoDec"         "|[" AnnoDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:AnnoDec"  "|[" AnnoDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" AnnoDec* "]|" -> E {cons("ToMetaExpr")}
-   "AnnoDec*"        "|[" AnnoDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:AnnoDec*" "|[" AnnoDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : AbstractMethodDec
-                 "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExpr")}
-"AbstractMethodDec"         "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:AbstractMethodDec"  "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExpr")}
-   "AbstractMethodDec*"        "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:AbstractMethodDec*" "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ConstantDec
-                 "|[" ConstantDec "]|" -> E {cons("ToMetaExpr")}
-"ConstantDec"         "|[" ConstantDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ConstantDec"  "|[" ConstantDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ConstantDec* "]|" -> E {cons("ToMetaExpr")}
-   "ConstantDec*"        "|[" ConstantDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ConstantDec*" "|[" ConstantDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : EnumDec
-                 "|[" EnumDec "]|" -> E {cons("ToMetaExpr")}
-"EnumDec"         "|[" EnumDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:EnumDec"  "|[" EnumDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" EnumDec* "]|" -> E {cons("ToMetaExpr")}
-   "EnumDec*"        "|[" EnumDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:EnumDec*" "|[" EnumDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ConstrDec
-                 "|[" ConstrDec "]|" -> E {cons("ToMetaExpr")}
-"ConstrDec"         "|[" ConstrDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ConstrDec"  "|[" ConstrDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ConstrDec* "]|" -> E {cons("ToMetaExpr")}
-   "ConstrDec*"        "|[" ConstrDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ConstrDec*" "|[" ConstrDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : StaticInit
-                 "|[" StaticInit "]|" -> E {cons("ToMetaExpr")}
-"StaticInit"         "|[" StaticInit "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:StaticInit"  "|[" StaticInit "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" StaticInit* "]|" -> E {cons("ToMetaExpr")}
-   "StaticInit*"        "|[" StaticInit* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:StaticInit*" "|[" StaticInit* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : InstanceInit
-                 "|[" InstanceInit "]|" -> E {cons("ToMetaExpr")}
-"InstanceInit"         "|[" InstanceInit "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:InstanceInit"  "|[" InstanceInit "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" InstanceInit* "]|" -> E {cons("ToMetaExpr")}
-   "InstanceInit*"        "|[" InstanceInit* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:InstanceInit*" "|[" InstanceInit* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : LocalVarDecStm
-                 "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExpr")}
-"LocalVarDecStm"         "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:LocalVarDecStm"  "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExpr")}
-   "LocalVarDecStm*"        "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:LocalVarDecStm*" "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : MethodDec
-                 "|[" MethodDec "]|" -> E {cons("ToMetaExpr")}
-"MethodDec"         "|[" MethodDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:MethodDec"  "|[" MethodDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" MethodDec* "]|" -> E {cons("ToMetaExpr")}
-   "MethodDec*"        "|[" MethodDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:MethodDec*" "|[" MethodDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : FieldDec
-                 "|[" FieldDec "]|" -> E {cons("ToMetaExpr")}
-"FieldDec"         "|[" FieldDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FieldDec"  "|[" FieldDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FieldDec* "]|" -> E {cons("ToMetaExpr")}
-   "FieldDec*"        "|[" FieldDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FieldDec*" "|[" FieldDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : CompilationUnit
                  "|[" CompilationUnit "]|" -> E {cons("ToMetaExpr")}
 "CompilationUnit"         "|[" CompilationUnit "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1836,15 +1719,6 @@
    "CompilationUnit*"        "|[" CompilationUnit* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:CompilationUnit*" "|[" CompilationUnit* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : MethodName
-                 "|[" MethodName "]|" -> E {cons("ToMetaExpr")}
-"MethodName"         "|[" MethodName "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:MethodName"  "|[" MethodName "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" MethodName* "]|" -> E {cons("ToMetaExpr")}
-   "MethodName*"        "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:MethodName*" "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : TypeVar
                  "|[" TypeVar "]|" -> E {cons("ToMetaExpr")}
 "TypeVar"         "|[" TypeVar "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1854,177 +1728,15 @@
    "TypeVar*"        "|[" TypeVar* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeVar*" "|[" TypeVar* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ArrayType
-                 "|[" ArrayType "]|" -> E {cons("ToMetaExpr")}
-"ArrayType"         "|[" ArrayType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ArrayType"  "|[" ArrayType "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : Modifier
+                 "|[" Modifier "]|" -> E {cons("ToMetaExpr")}
+"Modifier"         "|[" Modifier "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Modifier"  "|[" Modifier "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" ArrayType* "]|" -> E {cons("ToMetaExpr")}
-   "ArrayType*"        "|[" ArrayType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ArrayType*" "|[" ArrayType* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" Modifier* "]|" -> E {cons("ToMetaExpr")}
+   "Modifier*"        "|[" Modifier* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Modifier*" "|[" Modifier* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : IntType
-                 "|[" IntType "]|" -> E {cons("ToMetaExpr")}
-"IntType"         "|[" IntType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:IntType"  "|[" IntType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" IntType* "]|" -> E {cons("ToMetaExpr")}
-   "IntType*"        "|[" IntType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:IntType*" "|[" IntType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : FloatType
-                 "|[" FloatType "]|" -> E {cons("ToMetaExpr")}
-"FloatType"         "|[" FloatType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FloatType"  "|[" FloatType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FloatType* "]|" -> E {cons("ToMetaExpr")}
-   "FloatType*"        "|[" FloatType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FloatType*" "|[" FloatType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : NullLiteral
-                 "|[" NullLiteral "]|" -> E {cons("ToMetaExpr")}
-"NullLiteral"         "|[" NullLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:NullLiteral"  "|[" NullLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" NullLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "NullLiteral*"        "|[" NullLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:NullLiteral*" "|[" NullLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : BoolLiteral
-                 "|[" BoolLiteral "]|" -> E {cons("ToMetaExpr")}
-"BoolLiteral"         "|[" BoolLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:BoolLiteral"  "|[" BoolLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" BoolLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "BoolLiteral*"        "|[" BoolLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:BoolLiteral*" "|[" BoolLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Bool
-                 "|[" Bool "]|" -> E {cons("ToMetaExpr")}
-"Bool"         "|[" Bool "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Bool"  "|[" Bool "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Bool* "]|" -> E {cons("ToMetaExpr")}
-   "Bool*"        "|[" Bool* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Bool*" "|[" Bool* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : FloatLiteral
-                 "|[" FloatLiteral "]|" -> E {cons("ToMetaExpr")}
-"FloatLiteral"         "|[" FloatLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FloatLiteral"  "|[" FloatLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FloatLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "FloatLiteral*"        "|[" FloatLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FloatLiteral*" "|[" FloatLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : IntLiteral
-                 "|[" IntLiteral "]|" -> E {cons("ToMetaExpr")}
-"IntLiteral"         "|[" IntLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:IntLiteral"  "|[" IntLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" IntLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "IntLiteral*"        "|[" IntLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:IntLiteral*" "|[" IntLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Public
-                 "|[" Public "]|" -> E {cons("ToMetaExpr")}
-"Public"         "|[" Public "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Public"  "|[" Public "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Public* "]|" -> E {cons("ToMetaExpr")}
-   "Public*"        "|[" Public* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Public*" "|[" Public* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Private
-                 "|[" Private "]|" -> E {cons("ToMetaExpr")}
-"Private"         "|[" Private "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Private"  "|[" Private "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Private* "]|" -> E {cons("ToMetaExpr")}
-   "Private*"        "|[" Private* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Private*" "|[" Private* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Protected
-                 "|[" Protected "]|" -> E {cons("ToMetaExpr")}
-"Protected"         "|[" Protected "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Protected"  "|[" Protected "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Protected* "]|" -> E {cons("ToMetaExpr")}
-   "Protected*"        "|[" Protected* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Protected*" "|[" Protected* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Abstract
-                 "|[" Abstract "]|" -> E {cons("ToMetaExpr")}
-"Abstract"         "|[" Abstract "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Abstract"  "|[" Abstract "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Abstract* "]|" -> E {cons("ToMetaExpr")}
-   "Abstract*"        "|[" Abstract* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Abstract*" "|[" Abstract* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Final
-                 "|[" Final "]|" -> E {cons("ToMetaExpr")}
-"Final"         "|[" Final "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Final"  "|[" Final "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Final* "]|" -> E {cons("ToMetaExpr")}
-   "Final*"        "|[" Final* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Final*" "|[" Final* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Static
-                 "|[" Static "]|" -> E {cons("ToMetaExpr")}
-"Static"         "|[" Static "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Static"  "|[" Static "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Static* "]|" -> E {cons("ToMetaExpr")}
-   "Static*"        "|[" Static* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Static*" "|[" Static* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Native
-                 "|[" Native "]|" -> E {cons("ToMetaExpr")}
-"Native"         "|[" Native "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Native"  "|[" Native "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Native* "]|" -> E {cons("ToMetaExpr")}
-   "Native*"        "|[" Native* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Native*" "|[" Native* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Transient
-                 "|[" Transient "]|" -> E {cons("ToMetaExpr")}
-"Transient"         "|[" Transient "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Transient"  "|[" Transient "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Transient* "]|" -> E {cons("ToMetaExpr")}
-   "Transient*"        "|[" Transient* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Transient*" "|[" Transient* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Volatile
-                 "|[" Volatile "]|" -> E {cons("ToMetaExpr")}
-"Volatile"         "|[" Volatile "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Volatile"  "|[" Volatile "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Volatile* "]|" -> E {cons("ToMetaExpr")}
-   "Volatile*"        "|[" Volatile* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Volatile*" "|[" Volatile* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Synchronized
-                 "|[" Synchronized "]|" -> E {cons("ToMetaExpr")}
-"Synchronized"         "|[" Synchronized "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Synchronized"  "|[" Synchronized "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Synchronized* "]|" -> E {cons("ToMetaExpr")}
-   "Synchronized*"        "|[" Synchronized* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Synchronized*" "|[" Synchronized* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : StrictFP
-                 "|[" StrictFP "]|" -> E {cons("ToMetaExpr")}
-"StrictFP"         "|[" StrictFP "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:StrictFP"  "|[" StrictFP "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" StrictFP* "]|" -> E {cons("ToMetaExpr")}
-   "StrictFP*"        "|[" StrictFP* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:StrictFP*" "|[" StrictFP* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : CondMid
                  "|[" CondMid "]|" -> E {cons("ToMetaExpr")}
 "CondMid"         "|[" CondMid "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2043,14 +1755,14 @@
    "MethodSpec*"        "|[" MethodSpec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:MethodSpec*" "|[" MethodSpec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ArrayCreationExpr
-                 "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExpr")}
-"ArrayCreationExpr"         "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ArrayCreationExpr"  "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : MethodName
+                 "|[" MethodName "]|" -> E {cons("ToMetaExpr")}
+"MethodName"         "|[" MethodName "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:MethodName"  "|[" MethodName "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExpr")}
-   "ArrayCreationExpr*"        "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ArrayCreationExpr*" "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" MethodName* "]|" -> E {cons("ToMetaExpr")}
+   "MethodName*"        "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:MethodName*" "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged2")}
 
 %% java-15 : ArraySubscript
                  "|[" ArraySubscript "]|" -> E {cons("ToMetaExpr")}
@@ -2061,15 +1773,6 @@
    "ArraySubscript*"        "|[" ArraySubscript* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArraySubscript*" "|[" ArraySubscript* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ExprName
-                 "|[" ExprName "]|" -> E {cons("ToMetaExpr")}
-"ExprName"         "|[" ExprName "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ExprName"  "|[" ExprName "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ExprName* "]|" -> E {cons("ToMetaExpr")}
-   "ExprName*"        "|[" ExprName* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ExprName*" "|[" ExprName* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : DimExpr
                  "|[" DimExpr "]|" -> E {cons("ToMetaExpr")}
 "DimExpr"         "|[" DimExpr "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2079,15 +1782,24 @@
    "DimExpr*"        "|[" DimExpr* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:DimExpr*" "|[" DimExpr* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ArrayInit
-                 "|[" ArrayInit "]|" -> E {cons("ToMetaExpr")}
-"ArrayInit"         "|[" ArrayInit "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ArrayInit"  "|[" ArrayInit "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : ArrayBaseType
+                 "|[" ArrayBaseType "]|" -> E {cons("ToMetaExpr")}
+"ArrayBaseType"         "|[" ArrayBaseType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ArrayBaseType"  "|[" ArrayBaseType "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" ArrayInit* "]|" -> E {cons("ToMetaExpr")}
-   "ArrayInit*"        "|[" ArrayInit* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ArrayInit*" "|[" ArrayInit* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExpr")}
+   "ArrayBaseType*"        "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ArrayBaseType*" "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : Literal
+                 "|[" Literal "]|" -> E {cons("ToMetaExpr")}
+"Literal"         "|[" Literal "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Literal"  "|[" Literal "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Literal* "]|" -> E {cons("ToMetaExpr")}
+   "Literal*"        "|[" Literal* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Literal*" "|[" Literal* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : PackageName
                  "|[" PackageName "]|" -> E {cons("ToMetaExpr")}
 "PackageName"         "|[" PackageName "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2106,6 +1818,15 @@
    "AnnoDecHead*"        "|[" AnnoDecHead* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:AnnoDecHead*" "|[" AnnoDecHead* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : AnnoElemDec
+                 "|[" AnnoElemDec "]|" -> E {cons("ToMetaExpr")}
+"AnnoElemDec"         "|[" AnnoElemDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:AnnoElemDec"  "|[" AnnoElemDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" AnnoElemDec* "]|" -> E {cons("ToMetaExpr")}
+   "AnnoElemDec*"        "|[" AnnoElemDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:AnnoElemDec*" "|[" AnnoElemDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : DefaultVal
                  "|[" DefaultVal "]|" -> E {cons("ToMetaExpr")}
 "DefaultVal"         "|[" DefaultVal "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2115,6 +1836,24 @@
    "DefaultVal*"        "|[" DefaultVal* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:DefaultVal*" "|[" DefaultVal* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : AbstractMethodMod
+                 "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExpr")}
+"AbstractMethodMod"         "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:AbstractMethodMod"  "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExpr")}
+   "AbstractMethodMod*"        "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:AbstractMethodMod*" "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ConstantMod
+                 "|[" ConstantMod "]|" -> E {cons("ToMetaExpr")}
+"ConstantMod"         "|[" ConstantMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ConstantMod"  "|[" ConstantMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ConstantMod* "]|" -> E {cons("ToMetaExpr")}
+   "ConstantMod*"        "|[" ConstantMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ConstantMod*" "|[" ConstantMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : InterfaceDecHead
                  "|[" InterfaceDecHead "]|" -> E {cons("ToMetaExpr")}
 "InterfaceDecHead"         "|[" InterfaceDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2124,6 +1863,24 @@
    "InterfaceDecHead*"        "|[" InterfaceDecHead* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:InterfaceDecHead*" "|[" InterfaceDecHead* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : InterfaceMemberDec
+                 "|[" InterfaceMemberDec "]|" -> E {cons("ToMetaExpr")}
+"InterfaceMemberDec"         "|[" InterfaceMemberDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:InterfaceMemberDec"  "|[" InterfaceMemberDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExpr")}
+   "InterfaceMemberDec*"        "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:InterfaceMemberDec*" "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : InterfaceMod
+                 "|[" InterfaceMod "]|" -> E {cons("ToMetaExpr")}
+"InterfaceMod"         "|[" InterfaceMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:InterfaceMod"  "|[" InterfaceMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" InterfaceMod* "]|" -> E {cons("ToMetaExpr")}
+   "InterfaceMod*"        "|[" InterfaceMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:InterfaceMod*" "|[" InterfaceMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ExtendsInterfaces
                  "|[" ExtendsInterfaces "]|" -> E {cons("ToMetaExpr")}
 "ExtendsInterfaces"         "|[" ExtendsInterfaces "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2196,6 +1953,15 @@
    "ConstrBody*"        "|[" ConstrBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ConstrBody*" "|[" ConstrBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ConstrMod
+                 "|[" ConstrMod "]|" -> E {cons("ToMetaExpr")}
+"ConstrMod"         "|[" ConstrMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ConstrMod"  "|[" ConstrMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ConstrMod* "]|" -> E {cons("ToMetaExpr")}
+   "ConstrMod*"        "|[" ConstrMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ConstrMod*" "|[" ConstrMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ConstrInv
                  "|[" ConstrInv "]|" -> E {cons("ToMetaExpr")}
 "ConstrInv"         "|[" ConstrInv "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2241,15 +2007,6 @@
    "CatchClause*"        "|[" CatchClause* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:CatchClause*" "|[" CatchClause* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : Block
-                 "|[" Block "]|" -> E {cons("ToMetaExpr")}
-"Block"         "|[" Block "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Block"  "|[" Block "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Block* "]|" -> E {cons("ToMetaExpr")}
-   "Block*"        "|[" Block* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Block*" "|[" Block* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : LocalVarDec
                  "|[" LocalVarDec "]|" -> E {cons("ToMetaExpr")}
 "LocalVarDec"         "|[" LocalVarDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2259,6 +2016,15 @@
    "LocalVarDec*"        "|[" LocalVarDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:LocalVarDec*" "|[" LocalVarDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : BlockStm
+                 "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+"BlockStm"         "|[" BlockStm "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:BlockStm"  "|[" BlockStm "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" BlockStm* "]|" -> E {cons("ToMetaExpr")}
+   "BlockStm*"        "|[" BlockStm* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:BlockStm*" "|[" BlockStm* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : MethodDecHead
                  "|[" MethodDecHead "]|" -> E {cons("ToMetaExpr")}
 "MethodDecHead"         "|[" MethodDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2268,6 +2034,33 @@
    "MethodDecHead*"        "|[" MethodDecHead* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:MethodDecHead*" "|[" MethodDecHead* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : MethodBody
+                 "|[" MethodBody "]|" -> E {cons("ToMetaExpr")}
+"MethodBody"         "|[" MethodBody "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:MethodBody"  "|[" MethodBody "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" MethodBody* "]|" -> E {cons("ToMetaExpr")}
+   "MethodBody*"        "|[" MethodBody* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:MethodBody*" "|[" MethodBody* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : MethodMod
+                 "|[" MethodMod "]|" -> E {cons("ToMetaExpr")}
+"MethodMod"         "|[" MethodMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:MethodMod"  "|[" MethodMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" MethodMod* "]|" -> E {cons("ToMetaExpr")}
+   "MethodMod*"        "|[" MethodMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:MethodMod*" "|[" MethodMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ResultType
+                 "|[" ResultType "]|" -> E {cons("ToMetaExpr")}
+"ResultType"         "|[" ResultType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ResultType"  "|[" ResultType "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ResultType* "]|" -> E {cons("ToMetaExpr")}
+   "ResultType*"        "|[" ResultType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ResultType*" "|[" ResultType* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : FormalParam
                  "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
 "FormalParam"         "|[" FormalParam "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2286,6 +2079,24 @@
    "Throws*"        "|[" Throws* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Throws*" "|[" Throws* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : VarMod
+                 "|[" VarMod "]|" -> E {cons("ToMetaExpr")}
+"VarMod"         "|[" VarMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:VarMod"  "|[" VarMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" VarMod* "]|" -> E {cons("ToMetaExpr")}
+   "VarMod*"        "|[" VarMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:VarMod*" "|[" VarMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ExceptionType
+                 "|[" ExceptionType "]|" -> E {cons("ToMetaExpr")}
+"ExceptionType"         "|[" ExceptionType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ExceptionType"  "|[" ExceptionType "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ExceptionType* "]|" -> E {cons("ToMetaExpr")}
+   "ExceptionType*"        "|[" ExceptionType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ExceptionType*" "|[" ExceptionType* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ElemValPair
                  "|[" ElemValPair "]|" -> E {cons("ToMetaExpr")}
 "ElemValPair"         "|[" ElemValPair "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2295,15 +2106,6 @@
    "ElemValPair*"        "|[" ElemValPair* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ElemValPair*" "|[" ElemValPair* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : TypeName
-                 "|[" TypeName "]|" -> E {cons("ToMetaExpr")}
-"TypeName"         "|[" TypeName "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:TypeName"  "|[" TypeName "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" TypeName* "]|" -> E {cons("ToMetaExpr")}
-   "TypeName*"        "|[" TypeName* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:TypeName*" "|[" TypeName* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : ElemVal
                  "|[" ElemVal "]|" -> E {cons("ToMetaExpr")}
 "ElemVal"         "|[" ElemVal "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2313,6 +2115,24 @@
    "ElemVal*"        "|[" ElemVal* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ElemVal*" "|[" ElemVal* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : LHS
+                 "|[" LHS "]|" -> E {cons("ToMetaExpr")}
+"LHS"         "|[" LHS "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:LHS"  "|[" LHS "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" LHS* "]|" -> E {cons("ToMetaExpr")}
+   "LHS*"        "|[" LHS* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:LHS*" "|[" LHS* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : FieldMod
+                 "|[" FieldMod "]|" -> E {cons("ToMetaExpr")}
+"FieldMod"         "|[" FieldMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:FieldMod"  "|[" FieldMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" FieldMod* "]|" -> E {cons("ToMetaExpr")}
+   "FieldMod*"        "|[" FieldMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:FieldMod*" "|[" FieldMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : VarDec
                  "|[" VarDec "]|" -> E {cons("ToMetaExpr")}
 "VarDec"         "|[" VarDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2322,6 +2142,24 @@
    "VarDec*"        "|[" VarDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:VarDec*" "|[" VarDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : VarDecId
+                 "|[" VarDecId "]|" -> E {cons("ToMetaExpr")}
+"VarDecId"         "|[" VarDecId "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:VarDecId"  "|[" VarDecId "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" VarDecId* "]|" -> E {cons("ToMetaExpr")}
+   "VarDecId*"        "|[" VarDecId* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:VarDecId*" "|[" VarDecId* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : VarInit
+                 "|[" VarInit "]|" -> E {cons("ToMetaExpr")}
+"VarInit"         "|[" VarInit "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:VarInit"  "|[" VarInit "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" VarInit* "]|" -> E {cons("ToMetaExpr")}
+   "VarInit*"        "|[" VarInit* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:VarInit*" "|[" VarInit* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : Dim
                  "|[" Dim "]|" -> E {cons("ToMetaExpr")}
 "Dim"         "|[" Dim "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2349,6 +2187,15 @@
    "ClassBody*"        "|[" ClassBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ClassBody*" "|[" ClassBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ClassBodyDec
+                 "|[" ClassBodyDec "]|" -> E {cons("ToMetaExpr")}
+"ClassBodyDec"         "|[" ClassBodyDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ClassBodyDec"  "|[" ClassBodyDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
+   "ClassBodyDec*"        "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ClassBodyDec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : Anno
                  "|[" Anno "]|" -> E {cons("ToMetaExpr")}
 "Anno"         "|[" Anno "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2358,6 +2205,15 @@
    "Anno*"        "|[" Anno* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Anno*" "|[" Anno* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ClassMod
+                 "|[" ClassMod "]|" -> E {cons("ToMetaExpr")}
+"ClassMod"         "|[" ClassMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ClassMod"  "|[" ClassMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ClassMod* "]|" -> E {cons("ToMetaExpr")}
+   "ClassMod*"        "|[" ClassMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ClassMod*" "|[" ClassMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : TypeParams
                  "|[" TypeParams "]|" -> E {cons("ToMetaExpr")}
 "TypeParams"         "|[" TypeParams "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2385,15 +2241,6 @@
    "Interfaces*"        "|[" Interfaces* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Interfaces*" "|[" Interfaces* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ClassType
-                 "|[" ClassType "]|" -> E {cons("ToMetaExpr")}
-"ClassType"         "|[" ClassType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassType"  "|[" ClassType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassType* "]|" -> E {cons("ToMetaExpr")}
-   "ClassType*"        "|[" ClassType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassType*" "|[" ClassType* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : InterfaceType
                  "|[" InterfaceType "]|" -> E {cons("ToMetaExpr")}
 "InterfaceType"         "|[" InterfaceType "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2421,6 +2268,15 @@
    "ImportDec*"        "|[" ImportDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ImportDec*" "|[" ImportDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : TypeDec
+                 "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
+"TypeDec"         "|[" TypeDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:TypeDec"  "|[" TypeDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" TypeDec* "]|" -> E {cons("ToMetaExpr")}
+   "TypeDec*"        "|[" TypeDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:TypeDec*" "|[" TypeDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : AmbName
                  "|[" AmbName "]|" -> E {cons("ToMetaExpr")}
 "AmbName"         "|[" AmbName "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2439,6 +2295,15 @@
    "PackageOrTypeName*"        "|[" PackageOrTypeName* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:PackageOrTypeName*" "|[" PackageOrTypeName* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ActualTypeArg
+                 "|[" ActualTypeArg "]|" -> E {cons("ToMetaExpr")}
+"ActualTypeArg"         "|[" ActualTypeArg "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ActualTypeArg"  "|[" ActualTypeArg "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ActualTypeArg* "]|" -> E {cons("ToMetaExpr")}
+   "ActualTypeArg*"        "|[" ActualTypeArg* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ActualTypeArg*" "|[" ActualTypeArg* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : WildcardBound
                  "|[" WildcardBound "]|" -> E {cons("ToMetaExpr")}
 "WildcardBound"         "|[" WildcardBound "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2457,15 +2322,6 @@
    "TypeBound*"        "|[" TypeBound* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeBound*" "|[" TypeBound* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ClassOrInterfaceType
-                 "|[" ClassOrInterfaceType "]|" -> E {cons("ToMetaExpr")}
-"ClassOrInterfaceType"         "|[" ClassOrInterfaceType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassOrInterfaceType"  "|[" ClassOrInterfaceType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassOrInterfaceType* "]|" -> E {cons("ToMetaExpr")}
-   "ClassOrInterfaceType*"        "|[" ClassOrInterfaceType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassOrInterfaceType*" "|[" ClassOrInterfaceType* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : TypeParam
                  "|[" TypeParam "]|" -> E {cons("ToMetaExpr")}
 "TypeParam"         "|[" TypeParam "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2475,6 +2331,15 @@
    "TypeParam*"        "|[" TypeParam* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeParam*" "|[" TypeParam* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : TypeDecSpec
+                 "|[" TypeDecSpec "]|" -> E {cons("ToMetaExpr")}
+"TypeDecSpec"         "|[" TypeDecSpec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:TypeDecSpec"  "|[" TypeDecSpec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" TypeDecSpec* "]|" -> E {cons("ToMetaExpr")}
+   "TypeDecSpec*"        "|[" TypeDecSpec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:TypeDecSpec*" "|[" TypeDecSpec* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : TypeArgs
                  "|[" TypeArgs "]|" -> E {cons("ToMetaExpr")}
 "TypeArgs"         "|[" TypeArgs "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2484,362 +2349,467 @@
    "TypeArgs*"        "|[" TypeArgs* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeArgs*" "|[" TypeArgs* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : Id
-                 "|[" Id "]|" -> E {cons("ToMetaExpr")}
-"Id"         "|[" Id "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Id"  "|[" Id "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : TypeVarId
+                 "|[" TypeVarId "]|" -> E {cons("ToMetaExpr")}
+"TypeVarId"         "|[" TypeVarId "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:TypeVarId"  "|[" TypeVarId "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" Id* "]|" -> E {cons("ToMetaExpr")}
-   "Id*"        "|[" Id* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Id*" "|[" Id* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" TypeVarId* "]|" -> E {cons("ToMetaExpr")}
+   "TypeVarId*"        "|[" TypeVarId* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:TypeVarId*" "|[" TypeVarId* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : Bool
+                 "|[" Bool "]|" -> E {cons("ToMetaExpr")}
+"Bool"         "|[" Bool "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Bool"  "|[" Bool "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Bool* "]|" -> E {cons("ToMetaExpr")}
+   "Bool*"        "|[" Bool* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Bool*" "|[" Bool* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : DeciFloatLiteral
+                 "|[" DeciFloatLiteral "]|" -> E {cons("ToMetaExpr")}
+"DeciFloatLiteral"         "|[" DeciFloatLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:DeciFloatLiteral"  "|[" DeciFloatLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" DeciFloatLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "DeciFloatLiteral*"        "|[" DeciFloatLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:DeciFloatLiteral*" "|[" DeciFloatLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : HexaFloatLiteral
+                 "|[" HexaFloatLiteral "]|" -> E {cons("ToMetaExpr")}
+"HexaFloatLiteral"         "|[" HexaFloatLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:HexaFloatLiteral"  "|[" HexaFloatLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" HexaFloatLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "HexaFloatLiteral*"        "|[" HexaFloatLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:HexaFloatLiteral*" "|[" HexaFloatLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : DeciLiteral
+                 "|[" DeciLiteral "]|" -> E {cons("ToMetaExpr")}
+"DeciLiteral"         "|[" DeciLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:DeciLiteral"  "|[" DeciLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" DeciLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "DeciLiteral*"        "|[" DeciLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:DeciLiteral*" "|[" DeciLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : HexaLiteral
+                 "|[" HexaLiteral "]|" -> E {cons("ToMetaExpr")}
+"HexaLiteral"         "|[" HexaLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:HexaLiteral"  "|[" HexaLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" HexaLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "HexaLiteral*"        "|[" HexaLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:HexaLiteral*" "|[" HexaLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : OctaLiteral
+                 "|[" OctaLiteral "]|" -> E {cons("ToMetaExpr")}
+"OctaLiteral"         "|[" OctaLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:OctaLiteral"  "|[" OctaLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" OctaLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "OctaLiteral*"        "|[" OctaLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:OctaLiteral*" "|[" OctaLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ID
+                 "|[" ID "]|" -> E {cons("ToMetaExpr")}
+"ID"         "|[" ID "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ID"  "|[" ID "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ID* "]|" -> E {cons("ToMetaExpr")}
+   "ID*"        "|[" ID* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ID*" "|[" ID* "]|" -> E {cons("ToMetaExprTagged2")}
+
   context-free syntax %% Anti-quotations
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~ArrayAccess:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> CompilationUnit {cons("FromMetaExpr")}
+"~CompilationUnit:" E                       -> CompilationUnit {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~FieldAccess:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> TypeVar {cons("FromMetaExpr")}
+"~TypeVar:" E                       -> TypeVar {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~ClassLiteral:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> Modifier {cons("FromMetaExpr")}
+"~Modifier:" E                       -> Modifier {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~AnnoDec:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> CondMid {cons("FromMetaExpr")}
+"~CondMid:" E                       -> CondMid {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~AbstractMethodDec:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> MethodSpec {cons("FromMetaExpr")}
+"~MethodSpec:" E                       -> MethodSpec {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~ConstantDec:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> MethodName {cons("FromMetaExpr")}
+"~MethodName:" E                       -> MethodName {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~EnumDec:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> ArrayAccess {cons("FromMetaExpr")}
+"~ArrayAccess:" E                       -> ArrayAccess {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~ConstrDec:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> ArraySubscript {cons("FromMetaExpr")}
+"~ArraySubscript:" E                       -> ArraySubscript {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~StaticInit:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> FieldAccess {cons("FromMetaExpr")}
+"~FieldAccess:" E                       -> FieldAccess {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~InstanceInit:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> ExprName {cons("FromMetaExpr")}
+"~ExprName:" E                       -> ExprName {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~LocalVarDecStm:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> ArrayCreationExpr {cons("FromMetaExpr")}
+"~ArrayCreationExpr:" E                       -> ArrayCreationExpr {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~MethodDec:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> DimExpr {cons("FromMetaExpr")}
+"~DimExpr:" E                       -> DimExpr {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~FieldDec:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> ArrayBaseType {cons("FromMetaExpr")}
+"~ArrayBaseType:" E                       -> ArrayBaseType {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~CompilationUnit:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> Literal {cons("FromMetaExpr")}
+"~Literal:" E                       -> Literal {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~MethodName:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> IntLiteral {cons("FromMetaExpr")}
+"~IntLiteral:" E                       -> IntLiteral {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~TypeVar:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> FloatLiteral {cons("FromMetaExpr")}
+"~FloatLiteral:" E                       -> FloatLiteral {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~ArrayType:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> BoolLiteral {cons("FromMetaExpr")}
+"~BoolLiteral:" E                       -> BoolLiteral {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~IntType:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> CharLiteral {cons("FromMetaExpr")}
+"~CharLiteral:" E                       -> CharLiteral {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~FloatType:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> StringLiteral {cons("FromMetaExpr")}
+"~StringLiteral:" E                       -> StringLiteral {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~NullLiteral:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> NullLiteral {cons("FromMetaExpr")}
+"~NullLiteral:" E                       -> NullLiteral {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~BoolLiteral:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> ClassLiteral {cons("FromMetaExpr")}
+"~ClassLiteral:" E                       -> ClassLiteral {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Bool:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> PackageName {cons("FromMetaExpr")}
+"~PackageName:" E                       -> PackageName {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~FloatLiteral:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> AnnoDecHead {cons("FromMetaExpr")}
+"~AnnoDecHead:" E                       -> AnnoDecHead {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~IntLiteral:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> AnnoElemDec {cons("FromMetaExpr")}
+"~AnnoElemDec:" E                       -> AnnoElemDec {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Public:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> DefaultVal {cons("FromMetaExpr")}
+"~DefaultVal:" E                       -> DefaultVal {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Private:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> AbstractMethodMod {cons("FromMetaExpr")}
+"~AbstractMethodMod:" E                       -> AbstractMethodMod {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Protected:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> ConstantMod {cons("FromMetaExpr")}
+"~ConstantMod:" E                       -> ConstantMod {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Abstract:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> AnnoDec {cons("FromMetaExpr")}
+"~AnnoDec:" E                       -> AnnoDec {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Final:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> InterfaceDecHead {cons("FromMetaExpr")}
+"~InterfaceDecHead:" E                       -> InterfaceDecHead {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Static:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> InterfaceMemberDec {cons("FromMetaExpr")}
+"~InterfaceMemberDec:" E                       -> InterfaceMemberDec {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Native:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> InterfaceMod {cons("FromMetaExpr")}
+"~InterfaceMod:" E                       -> InterfaceMod {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Transient:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> ExtendsInterfaces {cons("FromMetaExpr")}
+"~ExtendsInterfaces:" E                       -> ExtendsInterfaces {cons("FromMetaExprTagged")}
 
-"~"        E                       -> Expr {cons("FromMetaExpr")}
-"~Volatile:" E                       -> Expr {cons("FromMetaExprTagged")}
+"~"        E                       -> ConstantDec {cons("FromMetaExpr")}
+"~ConstantDec:" E                       -> ConstantDec {cons("FromMetaExprTagged")}
 

(548 diff lines omitted)

From L.C.L.Kats at tudelft.nl  Sun Jul  4 01:18:24 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 03 Jul 2010 23:18:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21072 - LennartKats -
	in experimental/meta-amb-suggestions: syntax/generated
	test/dryad trans/cli
Message-ID: <201007032318.o63NIOjC012781@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-03 23:18:24 +0000 (Sat, 03 Jul 2010)
New Revision: 21072

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21072&view=rev

Modified:
   experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def
   experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met
   experimental/meta-amb-suggestions/trans/cli/compose-grammars.str

Log:


Changes:

Modified: experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def
===================================================================
--- experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def	2010-07-02 13:42:58 UTC (rev 21071)
+++ experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def	2010-07-03 23:18:24 UTC (rev 21072)
@@ -1728,15 +1728,6 @@
    "TypeVar*"        "|[" TypeVar* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeVar*" "|[" TypeVar* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : Modifier
-                 "|[" Modifier "]|" -> E {cons("ToMetaExpr")}
-"Modifier"         "|[" Modifier "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Modifier"  "|[" Modifier "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Modifier* "]|" -> E {cons("ToMetaExpr")}
-   "Modifier*"        "|[" Modifier* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Modifier*" "|[" Modifier* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : CondMid
                  "|[" CondMid "]|" -> E {cons("ToMetaExpr")}
 "CondMid"         "|[" CondMid "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1764,6 +1755,15 @@
    "MethodName*"        "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:MethodName*" "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ArrayAccess
+                 "|[" ArrayAccess "]|" -> E {cons("ToMetaExpr")}
+"ArrayAccess"         "|[" ArrayAccess "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ArrayAccess"  "|[" ArrayAccess "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ArrayAccess* "]|" -> E {cons("ToMetaExpr")}
+   "ArrayAccess*"        "|[" ArrayAccess* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ArrayAccess*" "|[" ArrayAccess* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ArraySubscript
                  "|[" ArraySubscript "]|" -> E {cons("ToMetaExpr")}
 "ArraySubscript"         "|[" ArraySubscript "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1773,6 +1773,33 @@
    "ArraySubscript*"        "|[" ArraySubscript* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArraySubscript*" "|[" ArraySubscript* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : FieldAccess
+                 "|[" FieldAccess "]|" -> E {cons("ToMetaExpr")}
+"FieldAccess"         "|[" FieldAccess "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:FieldAccess"  "|[" FieldAccess "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" FieldAccess* "]|" -> E {cons("ToMetaExpr")}
+   "FieldAccess*"        "|[" FieldAccess* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:FieldAccess*" "|[" FieldAccess* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ExprName
+                 "|[" ExprName "]|" -> E {cons("ToMetaExpr")}
+"ExprName"         "|[" ExprName "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ExprName"  "|[" ExprName "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ExprName* "]|" -> E {cons("ToMetaExpr")}
+   "ExprName*"        "|[" ExprName* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ExprName*" "|[" ExprName* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ArrayCreationExpr
+                 "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExpr")}
+"ArrayCreationExpr"         "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ArrayCreationExpr"  "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExpr")}
+   "ArrayCreationExpr*"        "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ArrayCreationExpr*" "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : DimExpr
                  "|[" DimExpr "]|" -> E {cons("ToMetaExpr")}
 "DimExpr"         "|[" DimExpr "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1791,15 +1818,69 @@
    "ArrayBaseType*"        "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArrayBaseType*" "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : Literal
-                 "|[" Literal "]|" -> E {cons("ToMetaExpr")}
-"Literal"         "|[" Literal "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Literal"  "|[" Literal "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : IntLiteral
+                 "|[" IntLiteral "]|" -> E {cons("ToMetaExpr")}
+"IntLiteral"         "|[" IntLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:IntLiteral"  "|[" IntLiteral "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" Literal* "]|" -> E {cons("ToMetaExpr")}
-   "Literal*"        "|[" Literal* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Literal*" "|[" Literal* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" IntLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "IntLiteral*"        "|[" IntLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:IntLiteral*" "|[" IntLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : FloatLiteral
+                 "|[" FloatLiteral "]|" -> E {cons("ToMetaExpr")}
+"FloatLiteral"         "|[" FloatLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:FloatLiteral"  "|[" FloatLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" FloatLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "FloatLiteral*"        "|[" FloatLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:FloatLiteral*" "|[" FloatLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : BoolLiteral
+                 "|[" BoolLiteral "]|" -> E {cons("ToMetaExpr")}
+"BoolLiteral"         "|[" BoolLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:BoolLiteral"  "|[" BoolLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" BoolLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "BoolLiteral*"        "|[" BoolLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:BoolLiteral*" "|[" BoolLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : CharLiteral
+                 "|[" CharLiteral "]|" -> E {cons("ToMetaExpr")}
+"CharLiteral"         "|[" CharLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:CharLiteral"  "|[" CharLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" CharLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "CharLiteral*"        "|[" CharLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:CharLiteral*" "|[" CharLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : StringLiteral
+                 "|[" StringLiteral "]|" -> E {cons("ToMetaExpr")}
+"StringLiteral"         "|[" StringLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:StringLiteral"  "|[" StringLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" StringLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "StringLiteral*"        "|[" StringLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:StringLiteral*" "|[" StringLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : NullLiteral
+                 "|[" NullLiteral "]|" -> E {cons("ToMetaExpr")}
+"NullLiteral"         "|[" NullLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:NullLiteral"  "|[" NullLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" NullLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "NullLiteral*"        "|[" NullLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:NullLiteral*" "|[" NullLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ClassLiteral
+                 "|[" ClassLiteral "]|" -> E {cons("ToMetaExpr")}
+"ClassLiteral"         "|[" ClassLiteral "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ClassLiteral"  "|[" ClassLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ClassLiteral* "]|" -> E {cons("ToMetaExpr")}
+   "ClassLiteral*"        "|[" ClassLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ClassLiteral*" "|[" ClassLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : PackageName
                  "|[" PackageName "]|" -> E {cons("ToMetaExpr")}
 "PackageName"         "|[" PackageName "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1836,24 +1917,15 @@
    "DefaultVal*"        "|[" DefaultVal* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:DefaultVal*" "|[" DefaultVal* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : AbstractMethodMod
-                 "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExpr")}
-"AbstractMethodMod"         "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:AbstractMethodMod"  "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : AnnoDec
+                 "|[" AnnoDec "]|" -> E {cons("ToMetaExpr")}
+"AnnoDec"         "|[" AnnoDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:AnnoDec"  "|[" AnnoDec "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExpr")}
-   "AbstractMethodMod*"        "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:AbstractMethodMod*" "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" AnnoDec* "]|" -> E {cons("ToMetaExpr")}
+   "AnnoDec*"        "|[" AnnoDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:AnnoDec*" "|[" AnnoDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ConstantMod
-                 "|[" ConstantMod "]|" -> E {cons("ToMetaExpr")}
-"ConstantMod"         "|[" ConstantMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ConstantMod"  "|[" ConstantMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ConstantMod* "]|" -> E {cons("ToMetaExpr")}
-   "ConstantMod*"        "|[" ConstantMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ConstantMod*" "|[" ConstantMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : InterfaceDecHead
                  "|[" InterfaceDecHead "]|" -> E {cons("ToMetaExpr")}
 "InterfaceDecHead"         "|[" InterfaceDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1872,15 +1944,6 @@
    "InterfaceMemberDec*"        "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:InterfaceMemberDec*" "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : InterfaceMod
-                 "|[" InterfaceMod "]|" -> E {cons("ToMetaExpr")}
-"InterfaceMod"         "|[" InterfaceMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:InterfaceMod"  "|[" InterfaceMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" InterfaceMod* "]|" -> E {cons("ToMetaExpr")}
-   "InterfaceMod*"        "|[" InterfaceMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:InterfaceMod*" "|[" InterfaceMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : ExtendsInterfaces
                  "|[" ExtendsInterfaces "]|" -> E {cons("ToMetaExpr")}
 "ExtendsInterfaces"         "|[" ExtendsInterfaces "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1890,6 +1953,24 @@
    "ExtendsInterfaces*"        "|[" ExtendsInterfaces* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ExtendsInterfaces*" "|[" ExtendsInterfaces* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ConstantDec
+                 "|[" ConstantDec "]|" -> E {cons("ToMetaExpr")}
+"ConstantDec"         "|[" ConstantDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ConstantDec"  "|[" ConstantDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ConstantDec* "]|" -> E {cons("ToMetaExpr")}
+   "ConstantDec*"        "|[" ConstantDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ConstantDec*" "|[" ConstantDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : AbstractMethodDec
+                 "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExpr")}
+"AbstractMethodDec"         "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:AbstractMethodDec"  "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExpr")}
+   "AbstractMethodDec*"        "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:AbstractMethodDec*" "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : EnumDecHead
                  "|[" EnumDecHead "]|" -> E {cons("ToMetaExpr")}
 "EnumDecHead"         "|[" EnumDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1953,15 +2034,6 @@
    "ConstrBody*"        "|[" ConstrBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ConstrBody*" "|[" ConstrBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ConstrMod
-                 "|[" ConstrMod "]|" -> E {cons("ToMetaExpr")}
-"ConstrMod"         "|[" ConstrMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ConstrMod"  "|[" ConstrMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ConstrMod* "]|" -> E {cons("ToMetaExpr")}
-   "ConstrMod*"        "|[" ConstrMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ConstrMod*" "|[" ConstrMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : ConstrInv
                  "|[" ConstrInv "]|" -> E {cons("ToMetaExpr")}
 "ConstrInv"         "|[" ConstrInv "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2025,6 +2097,24 @@
    "BlockStm*"        "|[" BlockStm* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:BlockStm*" "|[" BlockStm* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : LocalVarDecStm
+                 "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExpr")}
+"LocalVarDecStm"         "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:LocalVarDecStm"  "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExpr")}
+   "LocalVarDecStm*"        "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:LocalVarDecStm*" "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Stm
+                 "|[" Stm "]|" -> E {cons("ToMetaExpr")}
+"Stm"         "|[" Stm "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Stm"  "|[" Stm "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Stm* "]|" -> E {cons("ToMetaExpr")}
+   "Stm*"        "|[" Stm* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Stm*" "|[" Stm* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : MethodDecHead
                  "|[" MethodDecHead "]|" -> E {cons("ToMetaExpr")}
 "MethodDecHead"         "|[" MethodDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2043,15 +2133,6 @@
    "MethodBody*"        "|[" MethodBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:MethodBody*" "|[" MethodBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : MethodMod
-                 "|[" MethodMod "]|" -> E {cons("ToMetaExpr")}
-"MethodMod"         "|[" MethodMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:MethodMod"  "|[" MethodMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" MethodMod* "]|" -> E {cons("ToMetaExpr")}
-   "MethodMod*"        "|[" MethodMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:MethodMod*" "|[" MethodMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : ResultType
                  "|[" ResultType "]|" -> E {cons("ToMetaExpr")}
 "ResultType"         "|[" ResultType "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2079,24 +2160,15 @@
    "Throws*"        "|[" Throws* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Throws*" "|[" Throws* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : VarMod
-                 "|[" VarMod "]|" -> E {cons("ToMetaExpr")}
-"VarMod"         "|[" VarMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:VarMod"  "|[" VarMod "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : Block
+                 "|[" Block "]|" -> E {cons("ToMetaExpr")}
+"Block"         "|[" Block "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Block"  "|[" Block "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" VarMod* "]|" -> E {cons("ToMetaExpr")}
-   "VarMod*"        "|[" VarMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:VarMod*" "|[" VarMod* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" Block* "]|" -> E {cons("ToMetaExpr")}
+   "Block*"        "|[" Block* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Block*" "|[" Block* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ExceptionType
-                 "|[" ExceptionType "]|" -> E {cons("ToMetaExpr")}
-"ExceptionType"         "|[" ExceptionType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ExceptionType"  "|[" ExceptionType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ExceptionType* "]|" -> E {cons("ToMetaExpr")}
-   "ExceptionType*"        "|[" ExceptionType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ExceptionType*" "|[" ExceptionType* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : ElemValPair
                  "|[" ElemValPair "]|" -> E {cons("ToMetaExpr")}
 "ElemValPair"         "|[" ElemValPair "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2115,24 +2187,6 @@
    "ElemVal*"        "|[" ElemVal* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ElemVal*" "|[" ElemVal* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : LHS
-                 "|[" LHS "]|" -> E {cons("ToMetaExpr")}
-"LHS"         "|[" LHS "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:LHS"  "|[" LHS "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" LHS* "]|" -> E {cons("ToMetaExpr")}
-   "LHS*"        "|[" LHS* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:LHS*" "|[" LHS* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : FieldMod
-                 "|[" FieldMod "]|" -> E {cons("ToMetaExpr")}
-"FieldMod"         "|[" FieldMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FieldMod"  "|[" FieldMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FieldMod* "]|" -> E {cons("ToMetaExpr")}
-   "FieldMod*"        "|[" FieldMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FieldMod*" "|[" FieldMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : VarDec
                  "|[" VarDec "]|" -> E {cons("ToMetaExpr")}
 "VarDec"         "|[" VarDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2151,15 +2205,6 @@
    "VarDecId*"        "|[" VarDecId* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:VarDecId*" "|[" VarDecId* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : VarInit
-                 "|[" VarInit "]|" -> E {cons("ToMetaExpr")}
-"VarInit"         "|[" VarInit "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:VarInit"  "|[" VarInit "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" VarInit* "]|" -> E {cons("ToMetaExpr")}
-   "VarInit*"        "|[" VarInit* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:VarInit*" "|[" VarInit* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : Dim
                  "|[" Dim "]|" -> E {cons("ToMetaExpr")}
 "Dim"         "|[" Dim "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2169,6 +2214,33 @@
    "Dim*"        "|[" Dim* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Dim*" "|[" Dim* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : Expr
+                 "|[" Expr "]|" -> E {cons("ToMetaExpr")}
+"Expr"         "|[" Expr "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Expr"  "|[" Expr "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Expr* "]|" -> E {cons("ToMetaExpr")}
+   "Expr*"        "|[" Expr* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Expr*" "|[" Expr* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ArrayInit
+                 "|[" ArrayInit "]|" -> E {cons("ToMetaExpr")}
+"ArrayInit"         "|[" ArrayInit "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ArrayInit"  "|[" ArrayInit "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ArrayInit* "]|" -> E {cons("ToMetaExpr")}
+   "ArrayInit*"        "|[" ArrayInit* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ArrayInit*" "|[" ArrayInit* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : EnumDec
+                 "|[" EnumDec "]|" -> E {cons("ToMetaExpr")}
+"EnumDec"         "|[" EnumDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:EnumDec"  "|[" EnumDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" EnumDec* "]|" -> E {cons("ToMetaExpr")}
+   "EnumDec*"        "|[" EnumDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:EnumDec*" "|[" EnumDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ClassDecHead
                  "|[" ClassDecHead "]|" -> E {cons("ToMetaExpr")}
 "ClassDecHead"         "|[" ClassDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2187,15 +2259,6 @@
    "ClassBody*"        "|[" ClassBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ClassBody*" "|[" ClassBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ClassBodyDec
-                 "|[" ClassBodyDec "]|" -> E {cons("ToMetaExpr")}
-"ClassBodyDec"         "|[" ClassBodyDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassBodyDec"  "|[" ClassBodyDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
-   "ClassBodyDec*"        "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassBodyDec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : Anno
                  "|[" Anno "]|" -> E {cons("ToMetaExpr")}
 "Anno"         "|[" Anno "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2205,15 +2268,6 @@
    "Anno*"        "|[" Anno* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Anno*" "|[" Anno* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ClassMod
-                 "|[" ClassMod "]|" -> E {cons("ToMetaExpr")}
-"ClassMod"         "|[" ClassMod "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassMod"  "|[" ClassMod "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassMod* "]|" -> E {cons("ToMetaExpr")}
-   "ClassMod*"        "|[" ClassMod* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassMod*" "|[" ClassMod* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : TypeParams
                  "|[" TypeParams "]|" -> E {cons("ToMetaExpr")}
 "TypeParams"         "|[" TypeParams "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2241,6 +2295,15 @@
    "Interfaces*"        "|[" Interfaces* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Interfaces*" "|[" Interfaces* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ClassType
+                 "|[" ClassType "]|" -> E {cons("ToMetaExpr")}
+"ClassType"         "|[" ClassType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ClassType"  "|[" ClassType "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ClassType* "]|" -> E {cons("ToMetaExpr")}
+   "ClassType*"        "|[" ClassType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ClassType*" "|[" ClassType* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : InterfaceType
                  "|[" InterfaceType "]|" -> E {cons("ToMetaExpr")}
 "InterfaceType"         "|[" InterfaceType "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2250,6 +2313,78 @@
    "InterfaceType*"        "|[" InterfaceType* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:InterfaceType*" "|[" InterfaceType* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ClassMemberDec
+                 "|[" ClassMemberDec "]|" -> E {cons("ToMetaExpr")}
+"ClassMemberDec"         "|[" ClassMemberDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ClassMemberDec"  "|[" ClassMemberDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ClassMemberDec* "]|" -> E {cons("ToMetaExpr")}
+   "ClassMemberDec*"        "|[" ClassMemberDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ClassMemberDec*" "|[" ClassMemberDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : InstanceInit
+                 "|[" InstanceInit "]|" -> E {cons("ToMetaExpr")}
+"InstanceInit"         "|[" InstanceInit "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:InstanceInit"  "|[" InstanceInit "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" InstanceInit* "]|" -> E {cons("ToMetaExpr")}
+   "InstanceInit*"        "|[" InstanceInit* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:InstanceInit*" "|[" InstanceInit* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : StaticInit
+                 "|[" StaticInit "]|" -> E {cons("ToMetaExpr")}
+"StaticInit"         "|[" StaticInit "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:StaticInit"  "|[" StaticInit "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" StaticInit* "]|" -> E {cons("ToMetaExpr")}
+   "StaticInit*"        "|[" StaticInit* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:StaticInit*" "|[" StaticInit* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ConstrDec
+                 "|[" ConstrDec "]|" -> E {cons("ToMetaExpr")}
+"ConstrDec"         "|[" ConstrDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ConstrDec"  "|[" ConstrDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ConstrDec* "]|" -> E {cons("ToMetaExpr")}
+   "ConstrDec*"        "|[" ConstrDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ConstrDec*" "|[" ConstrDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : FieldDec
+                 "|[" FieldDec "]|" -> E {cons("ToMetaExpr")}
+"FieldDec"         "|[" FieldDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:FieldDec"  "|[" FieldDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" FieldDec* "]|" -> E {cons("ToMetaExpr")}
+   "FieldDec*"        "|[" FieldDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:FieldDec*" "|[" FieldDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : MethodDec
+                 "|[" MethodDec "]|" -> E {cons("ToMetaExpr")}
+"MethodDec"         "|[" MethodDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:MethodDec"  "|[" MethodDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" MethodDec* "]|" -> E {cons("ToMetaExpr")}
+   "MethodDec*"        "|[" MethodDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:MethodDec*" "|[" MethodDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ClassDec
+                 "|[" ClassDec "]|" -> E {cons("ToMetaExpr")}
+"ClassDec"         "|[" ClassDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ClassDec"  "|[" ClassDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ClassDec* "]|" -> E {cons("ToMetaExpr")}
+   "ClassDec*"        "|[" ClassDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ClassDec*" "|[" ClassDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : InterfaceDec
+                 "|[" InterfaceDec "]|" -> E {cons("ToMetaExpr")}
+"InterfaceDec"         "|[" InterfaceDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:InterfaceDec"  "|[" InterfaceDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" InterfaceDec* "]|" -> E {cons("ToMetaExpr")}
+   "InterfaceDec*"        "|[" InterfaceDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:InterfaceDec*" "|[" InterfaceDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : PackageDec
                  "|[" PackageDec "]|" -> E {cons("ToMetaExpr")}
 "PackageDec"         "|[" PackageDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2331,6 +2466,33 @@
    "TypeParam*"        "|[" TypeParam* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeParam*" "|[" TypeParam* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ClassOrInterfaceType
+                 "|[" ClassOrInterfaceType "]|" -> E {cons("ToMetaExpr")}
+"ClassOrInterfaceType"         "|[" ClassOrInterfaceType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ClassOrInterfaceType"  "|[" ClassOrInterfaceType "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ClassOrInterfaceType* "]|" -> E {cons("ToMetaExpr")}
+   "ClassOrInterfaceType*"        "|[" ClassOrInterfaceType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ClassOrInterfaceType*" "|[" ClassOrInterfaceType* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : ArrayType
+                 "|[" ArrayType "]|" -> E {cons("ToMetaExpr")}
+"ArrayType"         "|[" ArrayType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ArrayType"  "|[" ArrayType "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ArrayType* "]|" -> E {cons("ToMetaExpr")}
+   "ArrayType*"        "|[" ArrayType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ArrayType*" "|[" ArrayType* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : TypeName
+                 "|[" TypeName "]|" -> E {cons("ToMetaExpr")}
+"TypeName"         "|[" TypeName "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:TypeName"  "|[" TypeName "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" TypeName* "]|" -> E {cons("ToMetaExpr")}
+   "TypeName*"        "|[" TypeName* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:TypeName*" "|[" TypeName* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : TypeDecSpec
                  "|[" TypeDecSpec "]|" -> E {cons("ToMetaExpr")}
 "TypeDecSpec"         "|[" TypeDecSpec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2349,15 +2511,42 @@
    "TypeArgs*"        "|[" TypeArgs* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeArgs*" "|[" TypeArgs* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : TypeVarId
-                 "|[" TypeVarId "]|" -> E {cons("ToMetaExpr")}
-"TypeVarId"         "|[" TypeVarId "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:TypeVarId"  "|[" TypeVarId "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : Id
+                 "|[" Id "]|" -> E {cons("ToMetaExpr")}
+"Id"         "|[" Id "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Id"  "|[" Id "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" TypeVarId* "]|" -> E {cons("ToMetaExpr")}
-   "TypeVarId*"        "|[" TypeVarId* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:TypeVarId*" "|[" TypeVarId* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" Id* "]|" -> E {cons("ToMetaExpr")}
+   "Id*"        "|[" Id* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Id*" "|[" Id* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : IntType
+                 "|[" IntType "]|" -> E {cons("ToMetaExpr")}
+"IntType"         "|[" IntType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:IntType"  "|[" IntType "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" IntType* "]|" -> E {cons("ToMetaExpr")}
+   "IntType*"        "|[" IntType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:IntType*" "|[" IntType* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : FloatType
+                 "|[" FloatType "]|" -> E {cons("ToMetaExpr")}
+"FloatType"         "|[" FloatType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:FloatType"  "|[" FloatType "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" FloatType* "]|" -> E {cons("ToMetaExpr")}
+   "FloatType*"        "|[" FloatType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:FloatType*" "|[" FloatType* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : PrimType
+                 "|[" PrimType "]|" -> E {cons("ToMetaExpr")}
+"PrimType"         "|[" PrimType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:PrimType"  "|[" PrimType "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" PrimType* "]|" -> E {cons("ToMetaExpr")}
+   "PrimType*"        "|[" PrimType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:PrimType*" "|[" PrimType* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : Bool
                  "|[" Bool "]|" -> E {cons("ToMetaExpr")}
 "Bool"         "|[" Bool "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2412,6 +2601,105 @@
    "OctaLiteral*"        "|[" OctaLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:OctaLiteral*" "|[" OctaLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : Public
+                 "|[" Public "]|" -> E {cons("ToMetaExpr")}
+"Public"         "|[" Public "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Public"  "|[" Public "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Public* "]|" -> E {cons("ToMetaExpr")}
+   "Public*"        "|[" Public* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Public*" "|[" Public* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Private
+                 "|[" Private "]|" -> E {cons("ToMetaExpr")}
+"Private"         "|[" Private "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Private"  "|[" Private "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Private* "]|" -> E {cons("ToMetaExpr")}
+   "Private*"        "|[" Private* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Private*" "|[" Private* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Protected
+                 "|[" Protected "]|" -> E {cons("ToMetaExpr")}
+"Protected"         "|[" Protected "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Protected"  "|[" Protected "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Protected* "]|" -> E {cons("ToMetaExpr")}
+   "Protected*"        "|[" Protected* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Protected*" "|[" Protected* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Abstract
+                 "|[" Abstract "]|" -> E {cons("ToMetaExpr")}
+"Abstract"         "|[" Abstract "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Abstract"  "|[" Abstract "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Abstract* "]|" -> E {cons("ToMetaExpr")}
+   "Abstract*"        "|[" Abstract* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Abstract*" "|[" Abstract* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Final
+                 "|[" Final "]|" -> E {cons("ToMetaExpr")}
+"Final"         "|[" Final "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Final"  "|[" Final "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Final* "]|" -> E {cons("ToMetaExpr")}
+   "Final*"        "|[" Final* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Final*" "|[" Final* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Static
+                 "|[" Static "]|" -> E {cons("ToMetaExpr")}
+"Static"         "|[" Static "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Static"  "|[" Static "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Static* "]|" -> E {cons("ToMetaExpr")}
+   "Static*"        "|[" Static* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Static*" "|[" Static* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Native
+                 "|[" Native "]|" -> E {cons("ToMetaExpr")}
+"Native"         "|[" Native "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Native"  "|[" Native "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Native* "]|" -> E {cons("ToMetaExpr")}
+   "Native*"        "|[" Native* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Native*" "|[" Native* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Transient
+                 "|[" Transient "]|" -> E {cons("ToMetaExpr")}
+"Transient"         "|[" Transient "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Transient"  "|[" Transient "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Transient* "]|" -> E {cons("ToMetaExpr")}
+   "Transient*"        "|[" Transient* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Transient*" "|[" Transient* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Volatile
+                 "|[" Volatile "]|" -> E {cons("ToMetaExpr")}
+"Volatile"         "|[" Volatile "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Volatile"  "|[" Volatile "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Volatile* "]|" -> E {cons("ToMetaExpr")}
+   "Volatile*"        "|[" Volatile* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Volatile*" "|[" Volatile* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : Synchronized
+                 "|[" Synchronized "]|" -> E {cons("ToMetaExpr")}
+"Synchronized"         "|[" Synchronized "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Synchronized"  "|[" Synchronized "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Synchronized* "]|" -> E {cons("ToMetaExpr")}
+   "Synchronized*"        "|[" Synchronized* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Synchronized*" "|[" Synchronized* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : StrictFP
+                 "|[" StrictFP "]|" -> E {cons("ToMetaExpr")}
+"StrictFP"         "|[" StrictFP "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:StrictFP"  "|[" StrictFP "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" StrictFP* "]|" -> E {cons("ToMetaExpr")}
+   "StrictFP*"        "|[" StrictFP* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:StrictFP*" "|[" StrictFP* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ID
                  "|[" ID "]|" -> E {cons("ToMetaExpr")}
 "ID"         "|[" ID "]|" -> E {cons("ToMetaExprTagged1")}

Modified: experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met	2010-07-02 13:42:58 UTC (rev 21071)
+++ experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met	2010-07-03 23:18:24 UTC (rev 21072)
@@ -28,7 +28,7 @@
    * Given an assignment, returns the rhs value.
    */
   attributed-assignment-rhs-value(rec) :
-    |[ y == z ]| -> e2
+    |[ y == ~Id:z ]| -> e2
 
   /**
    * Assignment with an operator
@@ -39,8 +39,8 @@
 
     ; <type-attr> e1
     ; if is-reference-type then
-        \ reft -> |[ (reft) ~e2 ]| \
+        \ reft -> |[ (reft) e2 ]| \
       else
-        \ primt -> |[ (primt) ~e2 ]| \
+        \ primt -> |[ (primt) e2 ]| \
       end
     ; dryad-attribute(rec)

Modified: experimental/meta-amb-suggestions/trans/cli/compose-grammars.str
===================================================================
--- experimental/meta-amb-suggestions/trans/cli/compose-grammars.str	2010-07-02 13:42:58 UTC (rev 21071)
+++ experimental/meta-amb-suggestions/trans/cli/compose-grammars.str	2010-07-03 23:18:24 UTC (rev 21072)
@@ -316,13 +316,14 @@
 		  cfs* := <collect(?context-free-syntax(_))>
 		; defined := <collect-defined-cf-sorts> cfs*
 		; superceded := <collect-superceded-cf-sorts> cfs*
+    ; anti-superceded := <collect-anti-superceded-cf-sorts> cfs*
 		; referenced := <collect-referenced-cf-sorts> cfs*
 		; <echo> $[context-free sorts defined: [<length> defined] ]
 		; <echo> $[superceded through injections: [<length> superceded]]
 		; <echo> $[sorts referenced on the lhs of cf prods: [<length> referenced]]
     ; quoted      := <diff> (<union> (defined, referenced), superceded) // include lexicals, but not superceded
     ; // anti-quoted := <diff> (<union> (defined, referenced), anti-superceded)
-      anti-quoted := <union> (<diff> (defined, superceded), referenced) // include all lhs sorts, even if superceded
+      anti-quoted := <union> (<diff> (defined, anti-superceded), referenced) // include all lhs sorts, even if superceded
 	
 	collect-referenced-cf-sorts =
 		  map(collect-all(?sort(_), 
@@ -337,7 +338,7 @@
 		; concat
 		; make-set
     
-  collect-superceded-cf-sorts:
+  collect-anti-superceded-cf-sorts:
     grammar -> superceded'
     with
       superceded := <make-set> <mapconcat(collect(?prod([sort(_)], sort(_), no-attrs())))>
@@ -349,6 +350,22 @@
         ; !x
         }
       )>
+    
+  collect-superceded-cf-sorts:
+    grammar -> superceded'
+    with
+      superceded := <make-set> <mapconcat(collect(?prod([sort(_)], sort(_), no-attrs())))>
+      // FIXME: inefficient
+      // Ignore injections with rejects like Expr "=" Expr -> ElemVal {reject}
+    ; superceded' := <make-set> <filter(
+        {x, y: ?prod([x], y, _);
+          not(<oncetd(
+                 ?prod(_, y, _);
+                 (?prod([_, _ | _], _, _) + ?prod(_, y, attrs(_)))
+               )> grammar)
+        ; !y
+        }
+      )>
 
 	collect-all-sorts =
 		collect-all(?sort(_)) 


From L.C.L.Kats at tudelft.nl  Sun Jul  4 01:19:46 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 03 Jul 2010 23:19:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21073 - LennartKats -
	in experimental/meta-amb-suggestions: syntax/generated
	test/dryad trans/cli
Message-ID: <201007032319.o63NJkHN012794@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-03 23:19:46 +0000 (Sat, 03 Jul 2010)
New Revision: 21073

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21073&view=rev

Modified:
   experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def
   experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met
   experimental/meta-amb-suggestions/trans/cli/compose-grammars.str

Log:
reverted last (experimental) changes

Changes:

Modified: experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def
===================================================================
--- experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def	2010-07-03 23:18:24 UTC (rev 21072)
+++ experimental/meta-amb-suggestions/syntax/generated/Stratego-Java15.def	2010-07-03 23:19:46 UTC (rev 21073)
@@ -1728,6 +1728,15 @@
    "TypeVar*"        "|[" TypeVar* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeVar*" "|[" TypeVar* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : Modifier
+                 "|[" Modifier "]|" -> E {cons("ToMetaExpr")}
+"Modifier"         "|[" Modifier "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Modifier"  "|[" Modifier "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" Modifier* "]|" -> E {cons("ToMetaExpr")}
+   "Modifier*"        "|[" Modifier* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Modifier*" "|[" Modifier* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : CondMid
                  "|[" CondMid "]|" -> E {cons("ToMetaExpr")}
 "CondMid"         "|[" CondMid "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1755,15 +1764,6 @@
    "MethodName*"        "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:MethodName*" "|[" MethodName* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ArrayAccess
-                 "|[" ArrayAccess "]|" -> E {cons("ToMetaExpr")}
-"ArrayAccess"         "|[" ArrayAccess "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ArrayAccess"  "|[" ArrayAccess "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ArrayAccess* "]|" -> E {cons("ToMetaExpr")}
-   "ArrayAccess*"        "|[" ArrayAccess* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ArrayAccess*" "|[" ArrayAccess* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : ArraySubscript
                  "|[" ArraySubscript "]|" -> E {cons("ToMetaExpr")}
 "ArraySubscript"         "|[" ArraySubscript "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1773,33 +1773,6 @@
    "ArraySubscript*"        "|[" ArraySubscript* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArraySubscript*" "|[" ArraySubscript* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : FieldAccess
-                 "|[" FieldAccess "]|" -> E {cons("ToMetaExpr")}
-"FieldAccess"         "|[" FieldAccess "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FieldAccess"  "|[" FieldAccess "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FieldAccess* "]|" -> E {cons("ToMetaExpr")}
-   "FieldAccess*"        "|[" FieldAccess* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FieldAccess*" "|[" FieldAccess* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ExprName
-                 "|[" ExprName "]|" -> E {cons("ToMetaExpr")}
-"ExprName"         "|[" ExprName "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ExprName"  "|[" ExprName "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ExprName* "]|" -> E {cons("ToMetaExpr")}
-   "ExprName*"        "|[" ExprName* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ExprName*" "|[" ExprName* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ArrayCreationExpr
-                 "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExpr")}
-"ArrayCreationExpr"         "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ArrayCreationExpr"  "|[" ArrayCreationExpr "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExpr")}
-   "ArrayCreationExpr*"        "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ArrayCreationExpr*" "|[" ArrayCreationExpr* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : DimExpr
                  "|[" DimExpr "]|" -> E {cons("ToMetaExpr")}
 "DimExpr"         "|[" DimExpr "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1818,69 +1791,15 @@
    "ArrayBaseType*"        "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ArrayBaseType*" "|[" ArrayBaseType* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : IntLiteral
-                 "|[" IntLiteral "]|" -> E {cons("ToMetaExpr")}
-"IntLiteral"         "|[" IntLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:IntLiteral"  "|[" IntLiteral "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : Literal
+                 "|[" Literal "]|" -> E {cons("ToMetaExpr")}
+"Literal"         "|[" Literal "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:Literal"  "|[" Literal "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" IntLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "IntLiteral*"        "|[" IntLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:IntLiteral*" "|[" IntLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" Literal* "]|" -> E {cons("ToMetaExpr")}
+   "Literal*"        "|[" Literal* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:Literal*" "|[" Literal* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : FloatLiteral
-                 "|[" FloatLiteral "]|" -> E {cons("ToMetaExpr")}
-"FloatLiteral"         "|[" FloatLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FloatLiteral"  "|[" FloatLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FloatLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "FloatLiteral*"        "|[" FloatLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FloatLiteral*" "|[" FloatLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : BoolLiteral
-                 "|[" BoolLiteral "]|" -> E {cons("ToMetaExpr")}
-"BoolLiteral"         "|[" BoolLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:BoolLiteral"  "|[" BoolLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" BoolLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "BoolLiteral*"        "|[" BoolLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:BoolLiteral*" "|[" BoolLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : CharLiteral
-                 "|[" CharLiteral "]|" -> E {cons("ToMetaExpr")}
-"CharLiteral"         "|[" CharLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:CharLiteral"  "|[" CharLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" CharLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "CharLiteral*"        "|[" CharLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:CharLiteral*" "|[" CharLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : StringLiteral
-                 "|[" StringLiteral "]|" -> E {cons("ToMetaExpr")}
-"StringLiteral"         "|[" StringLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:StringLiteral"  "|[" StringLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" StringLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "StringLiteral*"        "|[" StringLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:StringLiteral*" "|[" StringLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : NullLiteral
-                 "|[" NullLiteral "]|" -> E {cons("ToMetaExpr")}
-"NullLiteral"         "|[" NullLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:NullLiteral"  "|[" NullLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" NullLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "NullLiteral*"        "|[" NullLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:NullLiteral*" "|[" NullLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ClassLiteral
-                 "|[" ClassLiteral "]|" -> E {cons("ToMetaExpr")}
-"ClassLiteral"         "|[" ClassLiteral "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassLiteral"  "|[" ClassLiteral "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassLiteral* "]|" -> E {cons("ToMetaExpr")}
-   "ClassLiteral*"        "|[" ClassLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassLiteral*" "|[" ClassLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : PackageName
                  "|[" PackageName "]|" -> E {cons("ToMetaExpr")}
 "PackageName"         "|[" PackageName "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1917,15 +1836,24 @@
    "DefaultVal*"        "|[" DefaultVal* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:DefaultVal*" "|[" DefaultVal* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : AnnoDec
-                 "|[" AnnoDec "]|" -> E {cons("ToMetaExpr")}
-"AnnoDec"         "|[" AnnoDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:AnnoDec"  "|[" AnnoDec "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : AbstractMethodMod
+                 "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExpr")}
+"AbstractMethodMod"         "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:AbstractMethodMod"  "|[" AbstractMethodMod "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" AnnoDec* "]|" -> E {cons("ToMetaExpr")}
-   "AnnoDec*"        "|[" AnnoDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:AnnoDec*" "|[" AnnoDec* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExpr")}
+   "AbstractMethodMod*"        "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:AbstractMethodMod*" "|[" AbstractMethodMod* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ConstantMod
+                 "|[" ConstantMod "]|" -> E {cons("ToMetaExpr")}
+"ConstantMod"         "|[" ConstantMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ConstantMod"  "|[" ConstantMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ConstantMod* "]|" -> E {cons("ToMetaExpr")}
+   "ConstantMod*"        "|[" ConstantMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ConstantMod*" "|[" ConstantMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : InterfaceDecHead
                  "|[" InterfaceDecHead "]|" -> E {cons("ToMetaExpr")}
 "InterfaceDecHead"         "|[" InterfaceDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1944,6 +1872,15 @@
    "InterfaceMemberDec*"        "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:InterfaceMemberDec*" "|[" InterfaceMemberDec* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : InterfaceMod
+                 "|[" InterfaceMod "]|" -> E {cons("ToMetaExpr")}
+"InterfaceMod"         "|[" InterfaceMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:InterfaceMod"  "|[" InterfaceMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" InterfaceMod* "]|" -> E {cons("ToMetaExpr")}
+   "InterfaceMod*"        "|[" InterfaceMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:InterfaceMod*" "|[" InterfaceMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ExtendsInterfaces
                  "|[" ExtendsInterfaces "]|" -> E {cons("ToMetaExpr")}
 "ExtendsInterfaces"         "|[" ExtendsInterfaces "]|" -> E {cons("ToMetaExprTagged1")}
@@ -1953,24 +1890,6 @@
    "ExtendsInterfaces*"        "|[" ExtendsInterfaces* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ExtendsInterfaces*" "|[" ExtendsInterfaces* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ConstantDec
-                 "|[" ConstantDec "]|" -> E {cons("ToMetaExpr")}
-"ConstantDec"         "|[" ConstantDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ConstantDec"  "|[" ConstantDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ConstantDec* "]|" -> E {cons("ToMetaExpr")}
-   "ConstantDec*"        "|[" ConstantDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ConstantDec*" "|[" ConstantDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : AbstractMethodDec
-                 "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExpr")}
-"AbstractMethodDec"         "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:AbstractMethodDec"  "|[" AbstractMethodDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExpr")}
-   "AbstractMethodDec*"        "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:AbstractMethodDec*" "|[" AbstractMethodDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : EnumDecHead
                  "|[" EnumDecHead "]|" -> E {cons("ToMetaExpr")}
 "EnumDecHead"         "|[" EnumDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2034,6 +1953,15 @@
    "ConstrBody*"        "|[" ConstrBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ConstrBody*" "|[" ConstrBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ConstrMod
+                 "|[" ConstrMod "]|" -> E {cons("ToMetaExpr")}
+"ConstrMod"         "|[" ConstrMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ConstrMod"  "|[" ConstrMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ConstrMod* "]|" -> E {cons("ToMetaExpr")}
+   "ConstrMod*"        "|[" ConstrMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ConstrMod*" "|[" ConstrMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ConstrInv
                  "|[" ConstrInv "]|" -> E {cons("ToMetaExpr")}
 "ConstrInv"         "|[" ConstrInv "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2097,24 +2025,6 @@
    "BlockStm*"        "|[" BlockStm* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:BlockStm*" "|[" BlockStm* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : LocalVarDecStm
-                 "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExpr")}
-"LocalVarDecStm"         "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:LocalVarDecStm"  "|[" LocalVarDecStm "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExpr")}
-   "LocalVarDecStm*"        "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:LocalVarDecStm*" "|[" LocalVarDecStm* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Stm
-                 "|[" Stm "]|" -> E {cons("ToMetaExpr")}
-"Stm"         "|[" Stm "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Stm"  "|[" Stm "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Stm* "]|" -> E {cons("ToMetaExpr")}
-   "Stm*"        "|[" Stm* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Stm*" "|[" Stm* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : MethodDecHead
                  "|[" MethodDecHead "]|" -> E {cons("ToMetaExpr")}
 "MethodDecHead"         "|[" MethodDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2133,6 +2043,15 @@
    "MethodBody*"        "|[" MethodBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:MethodBody*" "|[" MethodBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : MethodMod
+                 "|[" MethodMod "]|" -> E {cons("ToMetaExpr")}
+"MethodMod"         "|[" MethodMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:MethodMod"  "|[" MethodMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" MethodMod* "]|" -> E {cons("ToMetaExpr")}
+   "MethodMod*"        "|[" MethodMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:MethodMod*" "|[" MethodMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ResultType
                  "|[" ResultType "]|" -> E {cons("ToMetaExpr")}
 "ResultType"         "|[" ResultType "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2160,15 +2079,24 @@
    "Throws*"        "|[" Throws* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Throws*" "|[" Throws* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : Block
-                 "|[" Block "]|" -> E {cons("ToMetaExpr")}
-"Block"         "|[" Block "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Block"  "|[" Block "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : VarMod
+                 "|[" VarMod "]|" -> E {cons("ToMetaExpr")}
+"VarMod"         "|[" VarMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:VarMod"  "|[" VarMod "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" Block* "]|" -> E {cons("ToMetaExpr")}
-   "Block*"        "|[" Block* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Block*" "|[" Block* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" VarMod* "]|" -> E {cons("ToMetaExpr")}
+   "VarMod*"        "|[" VarMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:VarMod*" "|[" VarMod* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ExceptionType
+                 "|[" ExceptionType "]|" -> E {cons("ToMetaExpr")}
+"ExceptionType"         "|[" ExceptionType "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ExceptionType"  "|[" ExceptionType "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ExceptionType* "]|" -> E {cons("ToMetaExpr")}
+   "ExceptionType*"        "|[" ExceptionType* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ExceptionType*" "|[" ExceptionType* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : ElemValPair
                  "|[" ElemValPair "]|" -> E {cons("ToMetaExpr")}
 "ElemValPair"         "|[" ElemValPair "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2187,6 +2115,24 @@
    "ElemVal*"        "|[" ElemVal* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ElemVal*" "|[" ElemVal* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : LHS
+                 "|[" LHS "]|" -> E {cons("ToMetaExpr")}
+"LHS"         "|[" LHS "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:LHS"  "|[" LHS "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" LHS* "]|" -> E {cons("ToMetaExpr")}
+   "LHS*"        "|[" LHS* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:LHS*" "|[" LHS* "]|" -> E {cons("ToMetaExprTagged2")}
+
+%% java-15 : FieldMod
+                 "|[" FieldMod "]|" -> E {cons("ToMetaExpr")}
+"FieldMod"         "|[" FieldMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:FieldMod"  "|[" FieldMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" FieldMod* "]|" -> E {cons("ToMetaExpr")}
+   "FieldMod*"        "|[" FieldMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:FieldMod*" "|[" FieldMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : VarDec
                  "|[" VarDec "]|" -> E {cons("ToMetaExpr")}
 "VarDec"         "|[" VarDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2205,6 +2151,15 @@
    "VarDecId*"        "|[" VarDecId* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:VarDecId*" "|[" VarDecId* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : VarInit
+                 "|[" VarInit "]|" -> E {cons("ToMetaExpr")}
+"VarInit"         "|[" VarInit "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:VarInit"  "|[" VarInit "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" VarInit* "]|" -> E {cons("ToMetaExpr")}
+   "VarInit*"        "|[" VarInit* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:VarInit*" "|[" VarInit* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : Dim
                  "|[" Dim "]|" -> E {cons("ToMetaExpr")}
 "Dim"         "|[" Dim "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2214,33 +2169,6 @@
    "Dim*"        "|[" Dim* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Dim*" "|[" Dim* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : Expr
-                 "|[" Expr "]|" -> E {cons("ToMetaExpr")}
-"Expr"         "|[" Expr "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Expr"  "|[" Expr "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Expr* "]|" -> E {cons("ToMetaExpr")}
-   "Expr*"        "|[" Expr* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Expr*" "|[" Expr* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ArrayInit
-                 "|[" ArrayInit "]|" -> E {cons("ToMetaExpr")}
-"ArrayInit"         "|[" ArrayInit "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ArrayInit"  "|[" ArrayInit "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ArrayInit* "]|" -> E {cons("ToMetaExpr")}
-   "ArrayInit*"        "|[" ArrayInit* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ArrayInit*" "|[" ArrayInit* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : EnumDec
-                 "|[" EnumDec "]|" -> E {cons("ToMetaExpr")}
-"EnumDec"         "|[" EnumDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:EnumDec"  "|[" EnumDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" EnumDec* "]|" -> E {cons("ToMetaExpr")}
-   "EnumDec*"        "|[" EnumDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:EnumDec*" "|[" EnumDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : ClassDecHead
                  "|[" ClassDecHead "]|" -> E {cons("ToMetaExpr")}
 "ClassDecHead"         "|[" ClassDecHead "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2259,6 +2187,15 @@
    "ClassBody*"        "|[" ClassBody* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:ClassBody*" "|[" ClassBody* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ClassBodyDec
+                 "|[" ClassBodyDec "]|" -> E {cons("ToMetaExpr")}
+"ClassBodyDec"         "|[" ClassBodyDec "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ClassBodyDec"  "|[" ClassBodyDec "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
+   "ClassBodyDec*"        "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ClassBodyDec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : Anno
                  "|[" Anno "]|" -> E {cons("ToMetaExpr")}
 "Anno"         "|[" Anno "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2268,6 +2205,15 @@
    "Anno*"        "|[" Anno* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Anno*" "|[" Anno* "]|" -> E {cons("ToMetaExprTagged2")}
 
+%% java-15 : ClassMod
+                 "|[" ClassMod "]|" -> E {cons("ToMetaExpr")}
+"ClassMod"         "|[" ClassMod "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:ClassMod"  "|[" ClassMod "]|" -> E {cons("ToMetaExprTagged2")}
+
+   "*"              "|[" ClassMod* "]|" -> E {cons("ToMetaExpr")}
+   "ClassMod*"        "|[" ClassMod* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:ClassMod*" "|[" ClassMod* "]|" -> E {cons("ToMetaExprTagged2")}
+
 %% java-15 : TypeParams
                  "|[" TypeParams "]|" -> E {cons("ToMetaExpr")}
 "TypeParams"         "|[" TypeParams "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2295,15 +2241,6 @@
    "Interfaces*"        "|[" Interfaces* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:Interfaces*" "|[" Interfaces* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ClassType
-                 "|[" ClassType "]|" -> E {cons("ToMetaExpr")}
-"ClassType"         "|[" ClassType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassType"  "|[" ClassType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassType* "]|" -> E {cons("ToMetaExpr")}
-   "ClassType*"        "|[" ClassType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassType*" "|[" ClassType* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : InterfaceType
                  "|[" InterfaceType "]|" -> E {cons("ToMetaExpr")}
 "InterfaceType"         "|[" InterfaceType "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2313,78 +2250,6 @@
    "InterfaceType*"        "|[" InterfaceType* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:InterfaceType*" "|[" InterfaceType* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ClassMemberDec
-                 "|[" ClassMemberDec "]|" -> E {cons("ToMetaExpr")}
-"ClassMemberDec"         "|[" ClassMemberDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassMemberDec"  "|[" ClassMemberDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassMemberDec* "]|" -> E {cons("ToMetaExpr")}
-   "ClassMemberDec*"        "|[" ClassMemberDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassMemberDec*" "|[" ClassMemberDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : InstanceInit
-                 "|[" InstanceInit "]|" -> E {cons("ToMetaExpr")}
-"InstanceInit"         "|[" InstanceInit "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:InstanceInit"  "|[" InstanceInit "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" InstanceInit* "]|" -> E {cons("ToMetaExpr")}
-   "InstanceInit*"        "|[" InstanceInit* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:InstanceInit*" "|[" InstanceInit* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : StaticInit
-                 "|[" StaticInit "]|" -> E {cons("ToMetaExpr")}
-"StaticInit"         "|[" StaticInit "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:StaticInit"  "|[" StaticInit "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" StaticInit* "]|" -> E {cons("ToMetaExpr")}
-   "StaticInit*"        "|[" StaticInit* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:StaticInit*" "|[" StaticInit* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ConstrDec
-                 "|[" ConstrDec "]|" -> E {cons("ToMetaExpr")}
-"ConstrDec"         "|[" ConstrDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ConstrDec"  "|[" ConstrDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ConstrDec* "]|" -> E {cons("ToMetaExpr")}
-   "ConstrDec*"        "|[" ConstrDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ConstrDec*" "|[" ConstrDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : FieldDec
-                 "|[" FieldDec "]|" -> E {cons("ToMetaExpr")}
-"FieldDec"         "|[" FieldDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FieldDec"  "|[" FieldDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FieldDec* "]|" -> E {cons("ToMetaExpr")}
-   "FieldDec*"        "|[" FieldDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FieldDec*" "|[" FieldDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : MethodDec
-                 "|[" MethodDec "]|" -> E {cons("ToMetaExpr")}
-"MethodDec"         "|[" MethodDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:MethodDec"  "|[" MethodDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" MethodDec* "]|" -> E {cons("ToMetaExpr")}
-   "MethodDec*"        "|[" MethodDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:MethodDec*" "|[" MethodDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ClassDec
-                 "|[" ClassDec "]|" -> E {cons("ToMetaExpr")}
-"ClassDec"         "|[" ClassDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassDec"  "|[" ClassDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassDec* "]|" -> E {cons("ToMetaExpr")}
-   "ClassDec*"        "|[" ClassDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassDec*" "|[" ClassDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : InterfaceDec
-                 "|[" InterfaceDec "]|" -> E {cons("ToMetaExpr")}
-"InterfaceDec"         "|[" InterfaceDec "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:InterfaceDec"  "|[" InterfaceDec "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" InterfaceDec* "]|" -> E {cons("ToMetaExpr")}
-   "InterfaceDec*"        "|[" InterfaceDec* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:InterfaceDec*" "|[" InterfaceDec* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : PackageDec
                  "|[" PackageDec "]|" -> E {cons("ToMetaExpr")}
 "PackageDec"         "|[" PackageDec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2466,33 +2331,6 @@
    "TypeParam*"        "|[" TypeParam* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeParam*" "|[" TypeParam* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : ClassOrInterfaceType
-                 "|[" ClassOrInterfaceType "]|" -> E {cons("ToMetaExpr")}
-"ClassOrInterfaceType"         "|[" ClassOrInterfaceType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ClassOrInterfaceType"  "|[" ClassOrInterfaceType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ClassOrInterfaceType* "]|" -> E {cons("ToMetaExpr")}
-   "ClassOrInterfaceType*"        "|[" ClassOrInterfaceType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ClassOrInterfaceType*" "|[" ClassOrInterfaceType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : ArrayType
-                 "|[" ArrayType "]|" -> E {cons("ToMetaExpr")}
-"ArrayType"         "|[" ArrayType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:ArrayType"  "|[" ArrayType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" ArrayType* "]|" -> E {cons("ToMetaExpr")}
-   "ArrayType*"        "|[" ArrayType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:ArrayType*" "|[" ArrayType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : TypeName
-                 "|[" TypeName "]|" -> E {cons("ToMetaExpr")}
-"TypeName"         "|[" TypeName "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:TypeName"  "|[" TypeName "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" TypeName* "]|" -> E {cons("ToMetaExpr")}
-   "TypeName*"        "|[" TypeName* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:TypeName*" "|[" TypeName* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : TypeDecSpec
                  "|[" TypeDecSpec "]|" -> E {cons("ToMetaExpr")}
 "TypeDecSpec"         "|[" TypeDecSpec "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2511,42 +2349,15 @@
    "TypeArgs*"        "|[" TypeArgs* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:TypeArgs*" "|[" TypeArgs* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : Id
-                 "|[" Id "]|" -> E {cons("ToMetaExpr")}
-"Id"         "|[" Id "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Id"  "|[" Id "]|" -> E {cons("ToMetaExprTagged2")}
+%% java-15 : TypeVarId
+                 "|[" TypeVarId "]|" -> E {cons("ToMetaExpr")}
+"TypeVarId"         "|[" TypeVarId "]|" -> E {cons("ToMetaExprTagged1")}
+"java-15:TypeVarId"  "|[" TypeVarId "]|" -> E {cons("ToMetaExprTagged2")}
 
-   "*"              "|[" Id* "]|" -> E {cons("ToMetaExpr")}
-   "Id*"        "|[" Id* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Id*" "|[" Id* "]|" -> E {cons("ToMetaExprTagged2")}
+   "*"              "|[" TypeVarId* "]|" -> E {cons("ToMetaExpr")}
+   "TypeVarId*"        "|[" TypeVarId* "]|" -> E {cons("ToMetaExprTagged1")}
+   "java-15:TypeVarId*" "|[" TypeVarId* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : IntType
-                 "|[" IntType "]|" -> E {cons("ToMetaExpr")}
-"IntType"         "|[" IntType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:IntType"  "|[" IntType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" IntType* "]|" -> E {cons("ToMetaExpr")}
-   "IntType*"        "|[" IntType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:IntType*" "|[" IntType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : FloatType
-                 "|[" FloatType "]|" -> E {cons("ToMetaExpr")}
-"FloatType"         "|[" FloatType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:FloatType"  "|[" FloatType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" FloatType* "]|" -> E {cons("ToMetaExpr")}
-   "FloatType*"        "|[" FloatType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:FloatType*" "|[" FloatType* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : PrimType
-                 "|[" PrimType "]|" -> E {cons("ToMetaExpr")}
-"PrimType"         "|[" PrimType "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:PrimType"  "|[" PrimType "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" PrimType* "]|" -> E {cons("ToMetaExpr")}
-   "PrimType*"        "|[" PrimType* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:PrimType*" "|[" PrimType* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : Bool
                  "|[" Bool "]|" -> E {cons("ToMetaExpr")}
 "Bool"         "|[" Bool "]|" -> E {cons("ToMetaExprTagged1")}
@@ -2601,105 +2412,6 @@
    "OctaLiteral*"        "|[" OctaLiteral* "]|" -> E {cons("ToMetaExprTagged1")}
    "java-15:OctaLiteral*" "|[" OctaLiteral* "]|" -> E {cons("ToMetaExprTagged2")}
 
-%% java-15 : Public
-                 "|[" Public "]|" -> E {cons("ToMetaExpr")}
-"Public"         "|[" Public "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Public"  "|[" Public "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Public* "]|" -> E {cons("ToMetaExpr")}
-   "Public*"        "|[" Public* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Public*" "|[" Public* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Private
-                 "|[" Private "]|" -> E {cons("ToMetaExpr")}
-"Private"         "|[" Private "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Private"  "|[" Private "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Private* "]|" -> E {cons("ToMetaExpr")}
-   "Private*"        "|[" Private* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Private*" "|[" Private* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Protected
-                 "|[" Protected "]|" -> E {cons("ToMetaExpr")}
-"Protected"         "|[" Protected "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Protected"  "|[" Protected "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Protected* "]|" -> E {cons("ToMetaExpr")}
-   "Protected*"        "|[" Protected* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Protected*" "|[" Protected* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Abstract
-                 "|[" Abstract "]|" -> E {cons("ToMetaExpr")}
-"Abstract"         "|[" Abstract "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Abstract"  "|[" Abstract "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Abstract* "]|" -> E {cons("ToMetaExpr")}
-   "Abstract*"        "|[" Abstract* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Abstract*" "|[" Abstract* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Final
-                 "|[" Final "]|" -> E {cons("ToMetaExpr")}
-"Final"         "|[" Final "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Final"  "|[" Final "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Final* "]|" -> E {cons("ToMetaExpr")}
-   "Final*"        "|[" Final* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Final*" "|[" Final* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Static
-                 "|[" Static "]|" -> E {cons("ToMetaExpr")}
-"Static"         "|[" Static "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Static"  "|[" Static "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Static* "]|" -> E {cons("ToMetaExpr")}
-   "Static*"        "|[" Static* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Static*" "|[" Static* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Native
-                 "|[" Native "]|" -> E {cons("ToMetaExpr")}
-"Native"         "|[" Native "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Native"  "|[" Native "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Native* "]|" -> E {cons("ToMetaExpr")}
-   "Native*"        "|[" Native* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Native*" "|[" Native* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Transient
-                 "|[" Transient "]|" -> E {cons("ToMetaExpr")}
-"Transient"         "|[" Transient "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Transient"  "|[" Transient "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Transient* "]|" -> E {cons("ToMetaExpr")}
-   "Transient*"        "|[" Transient* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Transient*" "|[" Transient* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Volatile
-                 "|[" Volatile "]|" -> E {cons("ToMetaExpr")}
-"Volatile"         "|[" Volatile "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Volatile"  "|[" Volatile "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Volatile* "]|" -> E {cons("ToMetaExpr")}
-   "Volatile*"        "|[" Volatile* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Volatile*" "|[" Volatile* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : Synchronized
-                 "|[" Synchronized "]|" -> E {cons("ToMetaExpr")}
-"Synchronized"         "|[" Synchronized "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:Synchronized"  "|[" Synchronized "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" Synchronized* "]|" -> E {cons("ToMetaExpr")}
-   "Synchronized*"        "|[" Synchronized* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:Synchronized*" "|[" Synchronized* "]|" -> E {cons("ToMetaExprTagged2")}
-
-%% java-15 : StrictFP
-                 "|[" StrictFP "]|" -> E {cons("ToMetaExpr")}
-"StrictFP"         "|[" StrictFP "]|" -> E {cons("ToMetaExprTagged1")}
-"java-15:StrictFP"  "|[" StrictFP "]|" -> E {cons("ToMetaExprTagged2")}
-
-   "*"              "|[" StrictFP* "]|" -> E {cons("ToMetaExpr")}
-   "StrictFP*"        "|[" StrictFP* "]|" -> E {cons("ToMetaExprTagged1")}
-   "java-15:StrictFP*" "|[" StrictFP* "]|" -> E {cons("ToMetaExprTagged2")}
-
 %% java-15 : ID
                  "|[" ID "]|" -> E {cons("ToMetaExpr")}
 "ID"         "|[" ID "]|" -> E {cons("ToMetaExprTagged1")}

Modified: experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met
===================================================================
--- experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met	2010-07-03 23:18:24 UTC (rev 21072)
+++ experimental/meta-amb-suggestions/test/dryad/AssignmentOperators.met	2010-07-03 23:19:46 UTC (rev 21073)
@@ -28,7 +28,7 @@
    * Given an assignment, returns the rhs value.
    */
   attributed-assignment-rhs-value(rec) :
-    |[ y == ~Id:z ]| -> e2
+    |[ y == z ]| -> e2
 
   /**
    * Assignment with an operator
@@ -39,8 +39,8 @@
 
     ; <type-attr> e1
     ; if is-reference-type then
-        \ reft -> |[ (reft) e2 ]| \
+        \ reft -> |[ (reft) ~e2 ]| \
       else
-        \ primt -> |[ (primt) e2 ]| \
+        \ primt -> |[ (primt) ~e2 ]| \
       end
     ; dryad-attribute(rec)

Modified: experimental/meta-amb-suggestions/trans/cli/compose-grammars.str
===================================================================
--- experimental/meta-amb-suggestions/trans/cli/compose-grammars.str	2010-07-03 23:18:24 UTC (rev 21072)
+++ experimental/meta-amb-suggestions/trans/cli/compose-grammars.str	2010-07-03 23:19:46 UTC (rev 21073)
@@ -316,14 +316,13 @@
 		  cfs* := <collect(?context-free-syntax(_))>
 		; defined := <collect-defined-cf-sorts> cfs*
 		; superceded := <collect-superceded-cf-sorts> cfs*
-    ; anti-superceded := <collect-anti-superceded-cf-sorts> cfs*
 		; referenced := <collect-referenced-cf-sorts> cfs*
 		; <echo> $[context-free sorts defined: [<length> defined] ]
 		; <echo> $[superceded through injections: [<length> superceded]]
 		; <echo> $[sorts referenced on the lhs of cf prods: [<length> referenced]]
     ; quoted      := <diff> (<union> (defined, referenced), superceded) // include lexicals, but not superceded
     ; // anti-quoted := <diff> (<union> (defined, referenced), anti-superceded)
-      anti-quoted := <union> (<diff> (defined, anti-superceded), referenced) // include all lhs sorts, even if superceded
+      anti-quoted := <union> (<diff> (defined, superceded), referenced) // include all lhs sorts, even if superceded
 	
 	collect-referenced-cf-sorts =
 		  map(collect-all(?sort(_), 
@@ -338,7 +337,7 @@
 		; concat
 		; make-set
     
-  collect-anti-superceded-cf-sorts:
+  collect-superceded-cf-sorts:
     grammar -> superceded'
     with
       superceded := <make-set> <mapconcat(collect(?prod([sort(_)], sort(_), no-attrs())))>
@@ -350,22 +349,6 @@
         ; !x
         }
       )>
-    
-  collect-superceded-cf-sorts:
-    grammar -> superceded'
-    with
-      superceded := <make-set> <mapconcat(collect(?prod([sort(_)], sort(_), no-attrs())))>
-      // FIXME: inefficient
-      // Ignore injections with rejects like Expr "=" Expr -> ElemVal {reject}
-    ; superceded' := <make-set> <filter(
-        {x, y: ?prod([x], y, _);
-          not(<oncetd(
-                 ?prod(_, y, _);
-                 (?prod([_, _ | _], _, _) + ?prod(_, y, attrs(_)))
-               )> grammar)
-        ; !y
-        }
-      )>
 
 	collect-all-sorts =
 		collect-all(?sort(_)) 


From karltk at strategoxt.org  Sun Jul  4 18:28:31 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 04 Jul 2010 16:28:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21074 - karltk -
	experimental/meta-amb-suggestions/trans/cli
Message-ID: <201007041628.o64GSVOH005323@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: 2010-07-04 16:28:31 +0000 (Sun, 04 Jul 2010)
New Revision: 21074

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21074&view=rev

Modified:
   experimental/meta-amb-suggestions/trans/cli/compose-grammars.str

Log:
Notes for refining the sort selector.

Changes:

Modified: experimental/meta-amb-suggestions/trans/cli/compose-grammars.str
===================================================================
--- experimental/meta-amb-suggestions/trans/cli/compose-grammars.str	2010-07-03 23:19:46 UTC (rev 21073)
+++ experimental/meta-amb-suggestions/trans/cli/compose-grammars.str	2010-07-04 16:28:31 UTC (rev 21074)
@@ -24,6 +24,9 @@
  *  - host language must:
  *    - be Stratego:)
  *
+ * Compile:
+ * # strc -i trans/cli/compose-grammars.str -la stratego-lib -la stratego-sdf
+ *
  * Example usage:
  * # pack-sdf -I ~/.nix-profile/share/java-front-syntax/ -i ~/.nix-profile/share/java-front-syntax/languages/java-15/Main.sdf -of ast -o Java.sdf-ast
  * # parse-sdf-definition -i ~/.nix-profile/share/sdf/webdsl/WebDSL.def -o WebDSL.sdf-ast


From L.C.L.Kats at tudelft.nl  Mon Jul  5 10:23:11 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 05 Jul 2010 08:23:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21075 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	org.strategoxt.imp.updatesite
Message-ID: <201007050823.o658NBN4016966@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-05 08:23:11 +0000 (Mon, 05 Jul 2010)
New Revision: 21075

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21075&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/PluginPathPrimitive.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Release 0.5.2.2: Spoofax/194: Add a new primitive to get the plugin path

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-04 16:28:31 UTC (rev 21074)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-05 08:23:11 UTC (rev 21075)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2.1"
+      version="0.5.2.2"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str	2010-07-04 16:28:31 UTC (rev 21074)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str	2010-07-05 08:23:11 UTC (rev 21075)
@@ -111,6 +111,8 @@
       cache-path   := $[[cache-dir]/[full-path'].sig]
 
   project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
 
   is-newer:
     (file1, file2) -> <id>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2010-07-04 16:28:31 UTC (rev 21074)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2010-07-05 08:23:11 UTC (rev 21075)
@@ -218,6 +218,9 @@
 		this.basePath = basePath;
 	}
 	
+	/**
+	 * Gets the directory location of the editor plugin.
+	 */
 	public IPath getBasePath() {
 		if (basePath == null) {
 			Class attachmentProvider = getAttachmentProvider();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	2010-07-04 16:28:31 UTC (rev 21074)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	2010-07-05 08:23:11 UTC (rev 21075)
@@ -13,6 +13,7 @@
 		add(new DialogPrimitive());
 		add(new SubtermPrimitive());
 		add(new ProjectPathPrimitive());
+		add(new PluginPathPrimitive());
 		add(new RefreshResourcePrimitive());
 		add(new OriginLocationPrimitive());
 		add(new OriginOffsetPrimitive());

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/PluginPathPrimitive.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/PluginPathPrimitive.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/PluginPathPrimitive.java	2010-07-05 08:23:11 UTC (rev 21075)
@@ -0,0 +1,35 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+
+/**
+ * Returns the directory of the current Eclipse plugin.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class PluginPathPrimitive extends AbstractPrimitive {
+
+	public PluginPathPrimitive() {
+		super("SSL_EXT_pluginpath", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		
+		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
+		if (!(agent instanceof EditorIOAgent))
+			return false;
+		Descriptor descriptor = ((EditorIOAgent) agent).getDescriptor();
+		env.setCurrent(env.getFactory().makeString(descriptor.getBasePath().toPortableString()));
+		return true;
+	}
+	
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-04 16:28:31 UTC (rev 21074)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-05 08:23:11 UTC (rev 21075)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.1.jar" id="org.strategoxt.imp" version="0.5.2.1">
+   <feature url="features/org.strategoxt.imp_0.5.2.2.jar" id="org.strategoxt.imp" version="0.5.2.2">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">


From L.C.L.Kats at tudelft.nl  Mon Jul  5 11:23:53 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 05 Jul 2010 09:23:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21076 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	org.strategoxt.imp.updatesite
Message-ID: <201007050923.o659Nrp8017613@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-05 09:23:53 +0000 (Mon, 05 Jul 2010)
New Revision: 21076

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21076&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Spoofax/195: remove pre-0.5.2 error markers

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-05 08:23:11 UTC (rev 21075)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-05 09:23:53 UTC (rev 21076)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2.2"
+      version="0.5.2.3"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-05 08:23:11 UTC (rev 21075)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-05 09:23:53 UTC (rev 21076)
@@ -264,11 +264,14 @@
 	 */
 	public void clearMarkers(IResource file) {
 		try {
-			IMarker[] markers = file.findMarkers(markerType, true, 0);
-			for (IMarker marker : markers) {
+			for (IMarker marker : file.findMarkers(markerType, true, 0)) {
 				IMarker dupe = markersToReuse.put(new MarkerSignature(marker), marker);
 				if (dupe != null) markersToDelete.add(dupe);
 			}
+			for (IMarker marker : file.findMarkers(GENERIC_PROBLEM, true, 0)) {
+				// Remove legacy markers (Spoofax/195)
+				markersToDelete.add(marker);
+			}
 			Iterator<MarkerSignature> markersToAdd = this.markersToAdd.iterator();
 			while (markersToAdd.hasNext()) {
 				MarkerSignature marker = markersToAdd.next();

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-05 08:23:11 UTC (rev 21075)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-05 09:23:53 UTC (rev 21076)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.2.jar" id="org.strategoxt.imp" version="0.5.2.2">
+   <feature url="features/org.strategoxt.imp_0.5.2.3.jar" id="org.strategoxt.imp" version="0.5.2.3">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">


From L.C.L.Kats at tudelft.nl  Mon Jul  5 12:24:34 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 05 Jul 2010 10:24:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21077 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt/lang
Message-ID: <201007051024.o65AOYna018560@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-05 10:24:33 +0000 (Mon, 05 Jul 2010)
New Revision: 21077

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21077&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/JavaInteropRegisterer.java
Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java

Log:
Added a JavaInteropRegister class to make it a bit easier to write Java-based Stratego library components

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2010-07-05 09:23:53 UTC (rev 21076)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2010-07-05 10:24:33 UTC (rev 21077)
@@ -15,6 +15,8 @@
  * Adapts an {@link SDefT} definition to a {@link Strategy},
  * making interpreter strategy arguments accessible to the compiled strategies.
  * 
+ * @see JavaInteropRegisterer  A base class for registering Java libraries.
+ * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class InteropStrategy extends DynamicStrategy {

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/JavaInteropRegisterer.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/JavaInteropRegisterer.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/JavaInteropRegisterer.java	2010-07-05 10:24:33 UTC (rev 21077)
@@ -0,0 +1,43 @@
+package org.strategoxt.lang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.VarScope;
+import org.strategoxt.HybridInterpreter;
+
+/**
+ * A base class for Java-based libraries of dynamically loaded strategies.
+ * 
+ * When included in JAR files, the strategies it lists can be dynamically
+ * loaded by a {@link HybridInterpreter}. For this to work, 
+ * the JAR file class *must* be named <code>InteropRegister<code>.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class JavaInteropRegisterer extends InteropRegisterer {
+	
+	private final Strategy[] strategies;
+	
+	public JavaInteropRegisterer(Strategy[] strategies) {
+		if (strategies == null)
+			throw new IllegalArgumentException("strategies");
+		if (!this.getClass().getName().equals("InteropRegister"))
+			throw new IllegalStateException("Class must be named InteropRegisterer");
+		this.strategies = strategies;
+	}
+
+	@Override
+	public void register(IContext context, Context compiledContext) {
+		VarScope registered = context.getVarScope();
+		for (Strategy strategy : strategies) {
+			// Note that strategy.getName() may use getClass().getName(),
+			// but for small Java libraries the performance penalty is acceptable
+			registered.addSVar(strategy.getName(), new InteropSDefT(strategy, context));
+		}
+	}
+	
+	@Override
+	public void registerLazy(IContext context, Context compiledContext, ClassLoader classLoader) {
+		// Just eagerly load strategies; we already have them
+		register(context, compiledContext);
+	}
+}
\ No newline at end of file


From E.Visser at tudelft.nl  Mon Jul  5 12:50:07 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 05 Jul 2010 10:50:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21078 - visser - /
Message-ID: <201007051050.o65Ao7wM018816@proliant.st.ewi.tudelft.nl>

Author: visser
Date: 2010-07-05 10:50:06 +0000 (Mon, 05 Jul 2010)
New Revision: 21078

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21078&view=rev

Added:
   spoofax-contrib/

Log:
directory for sample spoofax projects

Changes:


From E.Visser at tudelft.nl  Mon Jul  5 12:50:40 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 05 Jul 2010 10:50:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21079 - visser -
	spoofax-contrib
Message-ID: <201007051050.o65AoeJx018818@proliant.st.ewi.tudelft.nl>

Author: visser
Date: 2010-07-05 10:50:40 +0000 (Mon, 05 Jul 2010)
New Revision: 21079

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21079&view=rev

Added:
   spoofax-contrib/lambda/

Log:
basic lambda calculus environment

Changes:


From E.Visser at tudelft.nl  Mon Jul  5 12:50:50 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 05 Jul 2010 10:50:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21080 - visser -
	spoofax-contrib/lambda
Message-ID: <201007051050.o65AooSf018820@proliant.st.ewi.tudelft.nl>

Author: visser
Date: 2010-07-05 10:50:50 +0000 (Mon, 05 Jul 2010)
New Revision: 21080

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21080&view=rev

Added:
   spoofax-contrib/lambda/trunk/

Log:
basic lambda calculus environment

Changes:


From E.Visser at tudelft.nl  Mon Jul  5 12:52:50 2010
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 05 Jul 2010 10:52:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21081 - visser - in
	spoofax-contrib/lambda/trunk: . .externalToolBuilders
	META-INF editor editor/java editor/java/lambda include lib
	syntax test trans
Message-ID: <201007051052.o65AqotI018832@proliant.st.ewi.tudelft.nl>

Author: visser
Date: 2010-07-05 10:52:50 +0000 (Mon, 05 Jul 2010)
New Revision: 21081

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21081&view=rev

Added:
   spoofax-contrib/lambda/trunk/.classpath
   spoofax-contrib/lambda/trunk/.externalToolBuilders/
   spoofax-contrib/lambda/trunk/.externalToolBuilders/Lambda build.main.xml.launch
   spoofax-contrib/lambda/trunk/.project
   spoofax-contrib/lambda/trunk/META-INF/
   spoofax-contrib/lambda/trunk/META-INF/MANIFEST.MF
   spoofax-contrib/lambda/trunk/build.generated.xml
   spoofax-contrib/lambda/trunk/build.main.xml
   spoofax-contrib/lambda/trunk/build.properties
   spoofax-contrib/lambda/trunk/editor/
   spoofax-contrib/lambda/trunk/editor/Lambda-Builders.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Builders.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Completions.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Completions.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Folding.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Folding.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-References.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-References.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda.main.esv
   spoofax-contrib/lambda/trunk/editor/java/
   spoofax-contrib/lambda/trunk/editor/java/lambda/
   spoofax-contrib/lambda/trunk/editor/java/lambda/Activator.java
   spoofax-contrib/lambda/trunk/editor/java/lambda/LambdaParseController.java
   spoofax-contrib/lambda/trunk/editor/java/lambda/LambdaValidator.java
   spoofax-contrib/lambda/trunk/include/
   spoofax-contrib/lambda/trunk/include/Lambda-Permissive.def
   spoofax-contrib/lambda/trunk/include/Lambda.def
   spoofax-contrib/lambda/trunk/include/Lambda.generated.pp.af
   spoofax-contrib/lambda/trunk/include/Lambda.packed.esv
   spoofax-contrib/lambda/trunk/include/Lambda.pp.af
   spoofax-contrib/lambda/trunk/include/Lambda.rtg
   spoofax-contrib/lambda/trunk/include/Lambda.str
   spoofax-contrib/lambda/trunk/include/Lambda.tbl
   spoofax-contrib/lambda/trunk/include/lambda.ctree
   spoofax-contrib/lambda/trunk/include/lambda.ctree.dep
   spoofax-contrib/lambda/trunk/lib/
   spoofax-contrib/lambda/trunk/lib/editor-common.generated.str
   spoofax-contrib/lambda/trunk/plugin.xml
   spoofax-contrib/lambda/trunk/syntax/
   spoofax-contrib/lambda/trunk/syntax/Common.sdf
   spoofax-contrib/lambda/trunk/syntax/Lambda.generated.pp
   spoofax-contrib/lambda/trunk/syntax/Lambda.pp
   spoofax-contrib/lambda/trunk/syntax/Lambda.sdf
   spoofax-contrib/lambda/trunk/test/
   spoofax-contrib/lambda/trunk/test/example.aterm
   spoofax-contrib/lambda/trunk/test/example.lam
   spoofax-contrib/lambda/trunk/test/example.nf.aterm
   spoofax-contrib/lambda/trunk/test/example.nf.lam
   spoofax-contrib/lambda/trunk/trans/
   spoofax-contrib/lambda/trunk/trans/check.str
   spoofax-contrib/lambda/trunk/trans/generate.str
   spoofax-contrib/lambda/trunk/trans/lambda.str

Log:
lambda calculus in spoofax; first built at TTC 2010 in Malaga

Changes (first 1000 lines of the diffs):

Added: spoofax-contrib/lambda/trunk/.classpath
===================================================================
--- spoofax-contrib/lambda/trunk/.classpath	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/.classpath	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/.externalToolBuilders/Lambda build.main.xml.launch
===================================================================
--- spoofax-contrib/lambda/trunk/.externalToolBuilders/Lambda build.main.xml.launch	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/.externalToolBuilders/Lambda build.main.xml.launch	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; id=&quot;1260698330169_15&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/lambda/editor/Lambda-Builders.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/lambda/editor/Lambda-Colorer.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/lambda/editor/Lambda-Folding.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot;!
  path=&quot;/lambda/editor/Lambda-Outliner.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/lambda/editor/Lambda-References.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/lambda/editor/Lambda-Syntax.generated.esv&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/lambda/lib/editor-common.str&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/lambda/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/lambda/build.generated.xml&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/lambda/utils&quot; type=&quot;!
 2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/lambda/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="lambda"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/lambda/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/lambda}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-contrib/lambda/trunk/.project
===================================================================
--- spoofax-contrib/lambda/trunk/.project	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/.project	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>lambda</name>
+      <comment></comment>
+      <buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/Lambda build.main.xml.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/META-INF/MANIFEST.MF
===================================================================
--- spoofax-contrib/lambda/trunk/META-INF/MANIFEST.MF	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/META-INF/MANIFEST.MF	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Lambda Plug-in
+Bundle-SymbolicName: lambda; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: lambda.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: lambda

Added: spoofax-contrib/lambda/trunk/build.generated.xml
===================================================================
--- spoofax-contrib/lambda/trunk/build.generated.xml	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/build.generated.xml	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,380 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+    
+        <target name="spoofaximp.default" depends="sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+                <path><fileset dir="${basedir}" includes="*.astr"/></path>
+            </pathconvert>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <fileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </fileset>
+            </java>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${include}"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+                <param name="build.stratego.extension" value="ctree"/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
+                <param name="build.stratego.extraargs" value="-la java-front"/>
+                <param name="build.stratego.extension" value="java"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/build.main.xml
===================================================================
--- spoofax-contrib/lambda/trunk/build.main.xml	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/build.main.xml	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="Lambda" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="Lambda"/>
+        <property name="esvmodule" value="Lambda"/>
+        <property name="strmodule" value="lambda"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="--library
+                        -I &quot;${trans}&quot; -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- External .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/build.properties
===================================================================
--- spoofax-contrib/lambda/trunk/build.properties	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/build.properties	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,7 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               .

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Builders.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Builders.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Builders.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,25 @@
+
+module Lambda-Builders
+
+imports Lambda-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                               
+  provider : include/lambda.ctree                                                             
+                                                                                                               
+  observer : editor-analyze                                                                   
+                                                                                                               
+  builder  : "Prety-print"          = to-text-builder (openeditor) (realtime)                   
+  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                            
+  builder  : "Beta" = eval-pp-builder (openeditor) (realtime)  
+  
+  builder  : "Beta AST" = eval-builder (openeditor) (realtime) (meta)
+                                                                                                          
+  // on save: generate-java                                                                                    
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Builders.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Builders.generated.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Builders.generated.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,40 @@
+
+module Lambda-Builders.generated
+
+builders
+                                                                                                      
+  // Building and analysis is defined in Stratego program or programs:                                
+  //                                                                                                  
+  //   provider : stratego-program.ctree                                                              
+  //   provider : stratego-library.jar                                                                
+  //                                                                                                  
+  // Analysis is carried out by a Stratego rule that can be selected as follows:                      
+  //                                                                                                  
+  //   observer : analysis-rule                                                                       
+  //                                                                                                  
+  // Any dynamic rules set in the analysis may be used by other semantic services,                    
+  // such as reference resolving or the builders.                                                     
+  //                                                                                                  
+  // Builders may carry out custom transformations on a file or selection.                            
+  // (At run-time, they can be accessed using the toolbar button with the star icon.)                 
+  // Builders can be specified as follows:                                                            
+  //                                                                                                  
+  //   builder : "Generate Java code" = generate-java (openeditor) (persistent) (realtime)            
+  //                                                                                                  
+  // In this example, the caption "Generate Java code" is used in the build button dropdown menu,     
+  // and the generate-java rule is used to carry out the tranformation.                               
+  // Builder definitions can also specify any combination of the following annotations:               
+  //                                                                                                  
+  //   (cursor)      The builder should always transform the tree node at the cursor.                 
+  //   (meta)        Indicates the builder should only be available to meta-programmers               
+  //                 (i.e., not when the plugin is deployed to end-users).                            
+  //   (openeditor)  Indicates an editor should be opened with the result.                            
+  //   (persistent)  Indicates that the resulting file should be saved to disk.                       
+  //   (realtime)    Indicates that the resulting editor should be updated in real-time               
+  //                 as the source file is edited.                                                    
+  //   (source)      Always apply this builder to the source AST, not to the AST                      
+  //                 after it has been analyzed/desugared by the observer.                            
+  //                                                                                                  
+  // The 'on save' handler can be used  to generate code as files are saved:                          
+  //                                                                                                  
+  //   on save : generate-java                                                                        
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,9 @@
+module Lambda-Colorer
+
+imports Lambda-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.generated.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.generated.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,46 @@
+module Lambda-Colorer.generated
+
+colorer
+                                                                                             
+  // Sort-based highlighting with background color                                           
+  //   Id: yellow green                                                                      
+  //                                                                                         
+  // Sort- and constructor-based highlighting                                                
+  //   ClassBodyDec.MethodDec: yellow                                                        
+  //                                                                                         
+  // Constructor-based highlighting                                                          
+  //   _.MethodDec: 255 0 0                                                                  
+  //                                                                                         
+  // Example: background colors for ToMetaExpr/FromMetaExpr, if supported by the grammar     
+  //   environment _.ToMetaExpr:   _ 220 230 200                                             
+  //   environment _.FromMetaExpr: _ white                                                   
+
+colorer Default, token-based highlighting
+                                  
+  keyword    : 127 0 85 bold      
+  identifier : default            
+  string     : blue               
+  number     : darkgreen          
+  var        : 255 0 100 italic   
+  operator   : 0 0 128            
+  layout     : 100 100 0 italic   
+
+colorer System colors
+                            
+  darkred   = 128 0 0       
+  red       = 255 0 0       
+  darkgreen = 0 128 0       
+  green     = 0 255 0       
+  darkblue  = 0 0 128       
+  blue      = 0 0 255       
+  cyan      = 0 255 255     
+  magenta   = 255 0 255     
+  yellow    = 255 255 0     
+  white     = 255 255 255   
+  black     = 0 0 0         
+  gray      = 128 128 128   
+  grey      = gray          
+  orange    = 255 165 0     
+  pink      = 255 105 180   
+  brown     = 139 69 19     
+  default   = _             
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Completions.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Completions.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Completions.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,20 @@
+module Lambda-Completions
+
+imports Lambda-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                         
+  // Syntax completion:                  
+  completion template                  : "module " <m> (blank)
+  completion template                  : "entity " <e> " {}" (blank)
+                                         
+  // Semantic (identifier) completion:   
+  completion proposer                  : editor-complete
+  completion trigger                   : ": "
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Completions.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Completions.generated.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Completions.generated.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,40 @@
+module Lambda-Completions.generated
+
+completions
+                                                                                          
+  // Syntactic content completion can be defined as follows:                              
+  //                                                                                      
+  //   completion keyword  : "keyword"                                                    
+  //   completion template : "if " <e> " then\n\t" <s> "\nend"                            
+  //                                                                                      
+  // This defines keyword completion for "keyword" and                                    
+  // a template completion for the "if" keyword (note the use of \n, \t, and spaces).     
+  // In this template, the text selection expands to the "e" placeholder identifier       
+  // enclosed in <> brackets.                                                             
+  //                                                                                      
+  // Use the (blank) annotation if you want a template completion only to                 
+  // appear on blank lines:                                                               
+  //                                                                                      
+  //   completion template: "section" <title> "\n\t" (blank)                              
+  //                                                                                      
+  // Semantic content completion can be defined as follows:                               
+  //                                                                                      
+  //   completion proposer : completion-function-call                                     
+  //   completion trigger  : "\."                                                         
+  //                                                                                      
+  // This sets completion-function-call as the completion strategy,                       
+  // and declares that [A-Za-z0-9_]+ may be used as a lexical pattern                     
+  // to parse identifiers (used to set the text selection with suggestions).              
+  // The completion trigger uses a regular expression to specify that                     
+  // completions should be proposed as the user types ".".                                
+  //                                                                                      
+  // Completions make use of the identifier lexical defined in YourLanguage-Syntax.esv    
+  // to select identifiers in completion suggestions.                                     
+  //                                                                                      
+  // Semantic completion uses the semantic provider defined in YourLanguage-Builders.esv  
+  // All semantic services may make use of the dynamic rules created by the observer.     
+
+completions
+                                     
+  // Derived completions may follow  
+                                     
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Folding.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Folding.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Folding.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,9 @@
+module Lambda-Folding
+
+imports Lambda-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Folding.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Folding.generated.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Folding.generated.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,23 @@
+module Lambda-Folding.generated
+
+folding Default folding definitions
+  
+  // Folding rules indicate which syntactic constructs can be folded,
+  // and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  //
+  // To indicate that an element should always be folded, add
+  // a (folded) annotation:
+  //
+  //   _.Imports (folded)
+  //
+  // To disable a folding rule defined elsewhere, add a (disabled) annotation:
+  //
+  //   Definition._ (disabled)
+  
+  Module.Module
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,9 @@
+module Lambda-Outliner
+
+imports Lambda-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.generated.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.generated.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,15 @@
+module Lambda-Outliner.generated
+
+outliner Default outliner        
+  
+  
+  // Outliner rules indicate which syntactic constructs should be shown in the outline
+  // and quick outline views, and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  
+  Module.Module
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-References.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-References.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-References.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,15 @@
+module Lambda-References
+
+imports Lambda-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-References.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-References.generated.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-References.generated.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,19 @@
+
+module Lambda-References.generated
+
+references
+                                                                                          
+  // Reference resolving rules can specify the syntax constructors for which              
+  // a reference resolving function is available:                                         
+  //                                                                                      
+  //   reference FunctionCall : resolve-function-call                                     
+  //                                                                                      
+  // This defines that for each FunctionCall, resolve-function-call                       
+  // will retrieve the AST node that declares it.                                         
+  //                                                                                      
+  // Likewise, hover help can be specified as follows:                                    
+  //                                                                                      
+  //   hover FunctionCall : hover-help-function-call                                      
+  //                                                                                      
+  // Reference resolving uses the semantic provider defined in YourLanguage-Builders.esv  
+  // All semantic services may make use of the dynamic rules created by the observer.     
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,9 @@
+module Lambda-Syntax
+
+imports Lambda-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.generated.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.generated.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,21 @@
+module Lambda-Syntax.generated
+
+language Syntax properties (static defaults)
+                                           
+  // Comment constructs:                   
+  line comment                           : "//"
+  block comment                          : "/*" * "*/"
+                                           
+  // Fences (used for matching,            
+  // inserting, indenting brackets):       
+  fences                                 : [ ]
+                                           ( )
+                                           { }
+                                           
+  // Automatic indent hints                
+  // (indent after these tokens):          
+  indent after                           : "="
+                                           ":"
+                                           
+  // Regular expression for identifiers:   
+  identifier lexical                     : "[A-Za-z0-9_]+"
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/Lambda.main.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda.main.esv	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/Lambda.main.esv	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,16 @@
+module Lambda.main
+
+imports Lambda-Builders Lambda-Colorer Lambda-Completions Lambda-Folding Lambda-Outliner Lambda-References Lambda-Syntax
+
+language General properties
+                  
+  name          : Lambda
+  id            : lambda
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the Lambda language"
+  url           : http://strategoxt.org
+                  
+  extensions    : lam
+  table         : include/Lambda.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/lambda/trunk/editor/java/lambda/Activator.java
===================================================================
--- spoofax-contrib/lambda/trunk/editor/java/lambda/Activator.java	                        (rev 0)
+++ spoofax-contrib/lambda/trunk/editor/java/lambda/Activator.java	2010-07-05 10:52:50 UTC (rev 21081)
@@ -0,0 +1,44 @@
+package lambda;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+

(1149 diff lines omitted)

From L.C.L.Kats at tudelft.nl  Mon Jul  5 13:26:17 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 05 Jul 2010 11:26:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21082 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
Message-ID: <201007051126.o65BQHbW019371@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-05 11:26:17 +0000 (Mon, 05 Jul 2010)
New Revision: 21082

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21082&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java

Log:
Avoid a deadlock/lockup situation where the descriptor loader adds error markers when Eclipse is starting.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-05 10:52:50 UTC (rev 21081)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-05 11:26:17 UTC (rev 21082)
@@ -470,11 +470,17 @@
 	
 	private static void runInWorkspace(final Runnable action) {
 		try {
-			ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() {
-				public void run(IProgressMonitor monitor) throws CoreException {
-					action.run();
-				}
-			}, null, IWorkspace.AVOID_UPDATE, new NullProgressMonitor());
+			if (Environment.isMainThread()) {
+				// When Eclipse is starting, just run it as it is to avoid a lockup
+				action.run();
+			} else {
+				ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() {
+						public void run(IProgressMonitor monitor) {
+							action.run();
+						}
+					}, null, IWorkspace.AVOID_UPDATE, new NullProgressMonitor()
+					);
+			}
 		} catch (CoreException e) {
 			Environment.logException("Exception in message handler", e);
 		}


From L.C.L.Kats at tudelft.nl  Mon Jul  5 14:43:30 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 05 Jul 2010 12:43:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21083 - LennartKats -
	in spoofax-contrib/lambda/trunk: . editor lib test trans
Message-ID: <201007051243.o65ChUvN020266@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-05 12:43:30 +0000 (Mon, 05 Jul 2010)
New Revision: 21083

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21083&view=rev

Removed:
   spoofax-contrib/lambda/trunk/editor/Lambda-Builders.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Completions.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Folding.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-References.generated.esv
   spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.generated.esv
   spoofax-contrib/lambda/trunk/include/
   spoofax-contrib/lambda/trunk/test/example.aterm
   spoofax-contrib/lambda/trunk/test/example.nf.aterm
   spoofax-contrib/lambda/trunk/test/example.nf.lam
Modified:
   spoofax-contrib/lambda/trunk/build.generated.xml
   spoofax-contrib/lambda/trunk/lib/editor-common.generated.str
   spoofax-contrib/lambda/trunk/trans/generate.str

Log:
Added pretty printing rule for definitions

Changes:

Modified: spoofax-contrib/lambda/trunk/build.generated.xml
===================================================================
--- spoofax-contrib/lambda/trunk/build.generated.xml	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/build.generated.xml	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,9 +1,11 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  sdf2imp,refresh"/>
     
-        <target name="spoofaximp.default" depends="sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,sdf2imp,refresh"/>
-    
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
@@ -19,6 +21,9 @@
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
         <mkdir dir="${build}"/>
         <mkdir dir="${src-gen}"/>
         <mkdir dir="${dist}"/>
@@ -29,14 +34,14 @@
         <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
-            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
                 <arg value="${include}/${esvmodule}.packed.esv"/>
             </java>
         </target>
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
@@ -50,6 +55,9 @@
             <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
             <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
             <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
         </target>
         
         <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
@@ -75,6 +83,14 @@
             </apply>
         </target>
         
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+        </target>
+        
         <target name="make-permissive" depends="pack-sdf,copy-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
@@ -114,6 +130,9 @@
         </target>
     
         <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
             <java classname="run" failonerror="true">
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
@@ -124,6 +143,7 @@
                 <arg value="${syntax}"/>
                 <arg value="-I"/>
                 <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
                 <arg line="${build.sdf.imports}"/>
             </java>
         </target>
@@ -294,7 +314,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig">
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -316,7 +336,8 @@
             <copy todir="${build}/trans">
                 <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
             </copy>
-            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
             <delete><fileset dir="${build}" includes="trans/**"/></delete>
         </target>
         
@@ -342,6 +363,7 @@
                 <arg line="${build.stratego.extraargs}"/>
                 <arg line="${externaljarflags}"/>
                 <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
             </java>
             <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
             <mkdir dir="${build}/trans"/>
@@ -367,6 +389,7 @@
                 <arg line="${build.stratego.args}"/>
                 <arg line="${build.stratego.extraargs}"/>
                 <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
                 
                 <fileset file="${trans}/${strmodule}.str"/>
                 <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>

Deleted: spoofax-contrib/lambda/trunk/editor/Lambda-Builders.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Builders.generated.esv	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Builders.generated.esv	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,40 +0,0 @@
-
-module Lambda-Builders.generated
-
-builders
-                                                                                                      
-  // Building and analysis is defined in Stratego program or programs:                                
-  //                                                                                                  
-  //   provider : stratego-program.ctree                                                              
-  //   provider : stratego-library.jar                                                                
-  //                                                                                                  
-  // Analysis is carried out by a Stratego rule that can be selected as follows:                      
-  //                                                                                                  
-  //   observer : analysis-rule                                                                       
-  //                                                                                                  
-  // Any dynamic rules set in the analysis may be used by other semantic services,                    
-  // such as reference resolving or the builders.                                                     
-  //                                                                                                  
-  // Builders may carry out custom transformations on a file or selection.                            
-  // (At run-time, they can be accessed using the toolbar button with the star icon.)                 
-  // Builders can be specified as follows:                                                            
-  //                                                                                                  
-  //   builder : "Generate Java code" = generate-java (openeditor) (persistent) (realtime)            
-  //                                                                                                  
-  // In this example, the caption "Generate Java code" is used in the build button dropdown menu,     
-  // and the generate-java rule is used to carry out the tranformation.                               
-  // Builder definitions can also specify any combination of the following annotations:               
-  //                                                                                                  
-  //   (cursor)      The builder should always transform the tree node at the cursor.                 
-  //   (meta)        Indicates the builder should only be available to meta-programmers               
-  //                 (i.e., not when the plugin is deployed to end-users).                            
-  //   (openeditor)  Indicates an editor should be opened with the result.                            
-  //   (persistent)  Indicates that the resulting file should be saved to disk.                       
-  //   (realtime)    Indicates that the resulting editor should be updated in real-time               
-  //                 as the source file is edited.                                                    
-  //   (source)      Always apply this builder to the source AST, not to the AST                      
-  //                 after it has been analyzed/desugared by the observer.                            
-  //                                                                                                  
-  // The 'on save' handler can be used  to generate code as files are saved:                          
-  //                                                                                                  
-  //   on save : generate-java                                                                        
\ No newline at end of file

Deleted: spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.generated.esv	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Colorer.generated.esv	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,46 +0,0 @@
-module Lambda-Colorer.generated
-
-colorer
-                                                                                             
-  // Sort-based highlighting with background color                                           
-  //   Id: yellow green                                                                      
-  //                                                                                         
-  // Sort- and constructor-based highlighting                                                
-  //   ClassBodyDec.MethodDec: yellow                                                        
-  //                                                                                         
-  // Constructor-based highlighting                                                          
-  //   _.MethodDec: 255 0 0                                                                  
-  //                                                                                         
-  // Example: background colors for ToMetaExpr/FromMetaExpr, if supported by the grammar     
-  //   environment _.ToMetaExpr:   _ 220 230 200                                             
-  //   environment _.FromMetaExpr: _ white                                                   
-
-colorer Default, token-based highlighting
-                                  
-  keyword    : 127 0 85 bold      
-  identifier : default            
-  string     : blue               
-  number     : darkgreen          
-  var        : 255 0 100 italic   
-  operator   : 0 0 128            
-  layout     : 100 100 0 italic   
-
-colorer System colors
-                            
-  darkred   = 128 0 0       
-  red       = 255 0 0       
-  darkgreen = 0 128 0       
-  green     = 0 255 0       
-  darkblue  = 0 0 128       
-  blue      = 0 0 255       
-  cyan      = 0 255 255     
-  magenta   = 255 0 255     
-  yellow    = 255 255 0     
-  white     = 255 255 255   
-  black     = 0 0 0         
-  gray      = 128 128 128   
-  grey      = gray          
-  orange    = 255 165 0     
-  pink      = 255 105 180   
-  brown     = 139 69 19     
-  default   = _             
\ No newline at end of file

Deleted: spoofax-contrib/lambda/trunk/editor/Lambda-Completions.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Completions.generated.esv	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Completions.generated.esv	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,40 +0,0 @@
-module Lambda-Completions.generated
-
-completions
-                                                                                          
-  // Syntactic content completion can be defined as follows:                              
-  //                                                                                      
-  //   completion keyword  : "keyword"                                                    
-  //   completion template : "if " <e> " then\n\t" <s> "\nend"                            
-  //                                                                                      
-  // This defines keyword completion for "keyword" and                                    
-  // a template completion for the "if" keyword (note the use of \n, \t, and spaces).     
-  // In this template, the text selection expands to the "e" placeholder identifier       
-  // enclosed in <> brackets.                                                             
-  //                                                                                      
-  // Use the (blank) annotation if you want a template completion only to                 
-  // appear on blank lines:                                                               
-  //                                                                                      
-  //   completion template: "section" <title> "\n\t" (blank)                              
-  //                                                                                      
-  // Semantic content completion can be defined as follows:                               
-  //                                                                                      
-  //   completion proposer : completion-function-call                                     
-  //   completion trigger  : "\."                                                         
-  //                                                                                      
-  // This sets completion-function-call as the completion strategy,                       
-  // and declares that [A-Za-z0-9_]+ may be used as a lexical pattern                     
-  // to parse identifiers (used to set the text selection with suggestions).              
-  // The completion trigger uses a regular expression to specify that                     
-  // completions should be proposed as the user types ".".                                
-  //                                                                                      
-  // Completions make use of the identifier lexical defined in YourLanguage-Syntax.esv    
-  // to select identifiers in completion suggestions.                                     
-  //                                                                                      
-  // Semantic completion uses the semantic provider defined in YourLanguage-Builders.esv  
-  // All semantic services may make use of the dynamic rules created by the observer.     
-
-completions
-                                     
-  // Derived completions may follow  
-                                     
\ No newline at end of file

Deleted: spoofax-contrib/lambda/trunk/editor/Lambda-Folding.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Folding.generated.esv	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Folding.generated.esv	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,23 +0,0 @@
-module Lambda-Folding.generated
-
-folding Default folding definitions
-  
-  // Folding rules indicate which syntactic constructs can be folded,
-  // and take one of the following forms:
-  //
-  //   <sort>.<constructor>
-  //
-  //   <sort>._
-  //
-  //   _.<constructor>
-  //
-  // To indicate that an element should always be folded, add
-  // a (folded) annotation:
-  //
-  //   _.Imports (folded)
-  //
-  // To disable a folding rule defined elsewhere, add a (disabled) annotation:
-  //
-  //   Definition._ (disabled)
-  
-  Module.Module
\ No newline at end of file

Deleted: spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.generated.esv	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Outliner.generated.esv	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,15 +0,0 @@
-module Lambda-Outliner.generated
-
-outliner Default outliner        
-  
-  
-  // Outliner rules indicate which syntactic constructs should be shown in the outline
-  // and quick outline views, and take one of the following forms:
-  //
-  //   <sort>.<constructor>
-  //
-  //   <sort>._
-  //
-  //   _.<constructor>
-  
-  Module.Module
\ No newline at end of file

Deleted: spoofax-contrib/lambda/trunk/editor/Lambda-References.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-References.generated.esv	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-References.generated.esv	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,19 +0,0 @@
-
-module Lambda-References.generated
-
-references
-                                                                                          
-  // Reference resolving rules can specify the syntax constructors for which              
-  // a reference resolving function is available:                                         
-  //                                                                                      
-  //   reference FunctionCall : resolve-function-call                                     
-  //                                                                                      
-  // This defines that for each FunctionCall, resolve-function-call                       
-  // will retrieve the AST node that declares it.                                         
-  //                                                                                      
-  // Likewise, hover help can be specified as follows:                                    
-  //                                                                                      
-  //   hover FunctionCall : hover-help-function-call                                      
-  //                                                                                      
-  // Reference resolving uses the semantic provider defined in YourLanguage-Builders.esv  
-  // All semantic services may make use of the dynamic rules created by the observer.     
\ No newline at end of file

Deleted: spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.generated.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.generated.esv	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Syntax.generated.esv	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,21 +0,0 @@
-module Lambda-Syntax.generated
-
-language Syntax properties (static defaults)
-                                           
-  // Comment constructs:                   
-  line comment                           : "//"
-  block comment                          : "/*" * "*/"
-                                           
-  // Fences (used for matching,            
-  // inserting, indenting brackets):       
-  fences                                 : [ ]
-                                           ( )
-                                           { }
-                                           
-  // Automatic indent hints                
-  // (indent after these tokens):          
-  indent after                           : "="
-                                           ":"
-                                           
-  // Regular expression for identifiers:   
-  identifier lexical                     : "[A-Za-z0-9_]+"
\ No newline at end of file

Modified: spoofax-contrib/lambda/trunk/lib/editor-common.generated.str
===================================================================
--- spoofax-contrib/lambda/trunk/lib/editor-common.generated.str	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/lib/editor-common.generated.str	2010-07-05 12:43:30 UTC (rev 21083)
@@ -56,15 +56,15 @@
           rules(
             IsImported: path
           );
-          if <is-newer> (cache-path, path) then
+          ( <is-newer> (cache-path, path);
             file := <ReadFromFile> cache-path
-          else
+          <+
             file := <parse-file> path;
             if <file-exists> path then
               // Only cache if on filesystem (e.g., ignore libstratego-lib)
               <WriteToBinaryFile> (cache-path, file)
             end        
-          end;
+          );
           {| CurrentFile:
             rules(CurrentFile := path);
             <record-declarations> file
@@ -98,6 +98,8 @@
       cache-path   := $[[cache-dir]/[full-path'].sig]
 
   project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
 
   is-newer:
     (file1, file2) -> <id>
@@ -113,6 +115,9 @@
   
   refresh-workspace-file:
     path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
 
 strategies
   

Deleted: spoofax-contrib/lambda/trunk/test/example.aterm
===================================================================
--- spoofax-contrib/lambda/trunk/test/example.aterm	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/test/example.aterm	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,33 +0,0 @@
-Module(
-  [ Def("zero", Lam("s", Lam("z", Var("z"))))
-  , Def(
-      "succ"
-    , Lam(
-        "w"
-      , Lam(
-          "y"
-        , Lam(
-            "x"
-          , App(
-              Var("y")
-            , App(App(Var("w"), Var("y")), Var("x"))
-            )
-          )
-        )
-      )
-    )
-  , Def(
-      "add"
-    , Lam(
-        "x"
-      , Lam(
-          "y"
-        , App(App(Var("x"), Var("succ")), Var("y"))
-        )
-      )
-    )
-  , Def("one", App(Var("succ"), Var("zero")))
-  , Def("two", App(Var("succ"), Var("one")))
-  ]
-, App(App(Var("add"), Var("two")), Var("two"))
-)
\ No newline at end of file

Deleted: spoofax-contrib/lambda/trunk/test/example.nf.aterm
===================================================================
--- spoofax-contrib/lambda/trunk/test/example.nf.aterm	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/test/example.nf.aterm	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,16 +0,0 @@
-Module(
-  []
-, Lam(
-    "c_207"
-  , Lam(
-      "e_207"
-    , App(
-        Var("c_207")
-      , App(
-          Var("c_207")
-        , App(Var("c_207"), App(Var("c_207"), Var("e_207")))
-        )
-      )
-    )
-  )
-)
\ No newline at end of file

Deleted: spoofax-contrib/lambda/trunk/test/example.nf.lam
===================================================================
--- spoofax-contrib/lambda/trunk/test/example.nf.lam	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/test/example.nf.lam	2010-07-05 12:43:30 UTC (rev 21083)
@@ -1,3 +0,0 @@
-module
-  
-  eval \t_204.\x_204.(t_204 (t_204 (t_204 (t_204 x_204))))

Modified: spoofax-contrib/lambda/trunk/trans/generate.str
===================================================================
--- spoofax-contrib/lambda/trunk/trans/generate.str	2010-07-05 11:26:17 UTC (rev 21082)
+++ spoofax-contrib/lambda/trunk/trans/generate.str	2010-07-05 12:43:30 UTC (rev 21083)
@@ -17,6 +17,10 @@
     
   to-text :
     App(e1, e2) -> $[([<to-text>e1] [<to-text>e2])]
+  
+  to-text :
+  	Def(x, e) -> $[def [x] = [<to-text>e]
+  	              ]
     
   to-text : 
     Module(def*, e) -> 


From L.C.L.Kats at tudelft.nl  Mon Jul  5 15:19:18 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 05 Jul 2010 13:19:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21084 - LennartKats -
	in spoofax-contrib/lambda/trunk: editor syntax trans
Message-ID: <201007051319.o65DJIU6020754@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-05 13:19:18 +0000 (Mon, 05 Jul 2010)
New Revision: 21084

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21084&view=rev

Modified:
   spoofax-contrib/lambda/trunk/editor/Lambda-Builders.esv
   spoofax-contrib/lambda/trunk/syntax/Lambda.pp
   spoofax-contrib/lambda/trunk/trans/generate.str
   spoofax-contrib/lambda/trunk/trans/lambda.str

Log:
Replaced manual to-text rules by pp-lambda-string

Changes:

Modified: spoofax-contrib/lambda/trunk/editor/Lambda-Builders.esv
===================================================================
--- spoofax-contrib/lambda/trunk/editor/Lambda-Builders.esv	2010-07-05 12:43:30 UTC (rev 21083)
+++ spoofax-contrib/lambda/trunk/editor/Lambda-Builders.esv	2010-07-05 13:19:18 UTC (rev 21084)
@@ -15,7 +15,7 @@
                                                                                                                
   observer : editor-analyze                                                                   
                                                                                                                
-  builder  : "Prety-print"          = to-text-builder (openeditor) (realtime)                   
+  builder  : "Pretty-print"          = to-text-builder (openeditor) (realtime)                   
   builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
                             
   builder  : "Beta" = eval-pp-builder (openeditor) (realtime)  

Modified: spoofax-contrib/lambda/trunk/syntax/Lambda.pp
===================================================================
--- spoofax-contrib/lambda/trunk/syntax/Lambda.pp	2010-07-05 12:43:30 UTC (rev 21083)
+++ spoofax-contrib/lambda/trunk/syntax/Lambda.pp	2010-07-05 13:19:18 UTC (rev 21084)
@@ -1,2 +1,5 @@
 %% Pretty printing table (see also Lambda.generated.pp)
-[]
+[
+    Module -- V [ KW["module"] _1 H [ KW["eval"]  _2 ] ],
+    Def    -- H [ KW["def"] _1 KW["="] _2 ]
+]

Modified: spoofax-contrib/lambda/trunk/trans/generate.str
===================================================================
--- spoofax-contrib/lambda/trunk/trans/generate.str	2010-07-05 12:43:30 UTC (rev 21083)
+++ spoofax-contrib/lambda/trunk/trans/generate.str	2010-07-05 13:19:18 UTC (rev 21084)
@@ -6,29 +6,7 @@
   libstratego-aterm
   include/Lambda 
   lib/editor-common.generated
-
-rules // pretty-printing
-
-  to-text :
-    Lam(x, e) -> $[\[x].[<to-text>e]]
     
-  to-text :
-    Var(x) -> $[[x]]
-    
-  to-text :
-    App(e1, e2) -> $[([<to-text>e1] [<to-text>e2])]
-  
-  to-text :
-  	Def(x, e) -> $[def [x] = [<to-text>e]
-  	              ]
-    
-  to-text : 
-    Module(def*, e) -> 
-    $[module
-        [<map(to-text)>def*]
-        eval [<to-text>e]
-     ]
-    
 rules // beta reduction
   
   beta : 
@@ -42,14 +20,14 @@
     innermost(beta <+ inline)
     
   beta-red-pp =
-    beta-red; to-text
+    beta-red; pp-lambda-string
     
   eval :
     mod at Module(def*, e) -> Module([],<beta-red> e)
     where <rename>mod
     
   eval-pp =
-    eval; to-text
+    eval; pp-lambda-string
       
 rules // substitution
   

Modified: spoofax-contrib/lambda/trunk/trans/lambda.str
===================================================================
--- spoofax-contrib/lambda/trunk/trans/lambda.str	2010-07-05 12:43:30 UTC (rev 21083)
+++ spoofax-contrib/lambda/trunk/trans/lambda.str	2010-07-05 13:19:18 UTC (rev 21084)
@@ -27,7 +27,7 @@
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"pp.lam")> path;
-      result   := <to-text> selected
+      result   := <pp-lambda-string> selected
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:


From L.C.L.Kats at tudelft.nl  Mon Jul  5 15:34:12 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 05 Jul 2010 13:34:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21085 - LennartKats -
	in spoofax-contrib/lambda/trunk: . lib
Message-ID: <201007051334.o65DYC5I020879@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-05 13:34:12 +0000 (Mon, 05 Jul 2010)
New Revision: 21085

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21085&view=rev

Modified:
   spoofax-contrib/lambda/trunk/build.generated.xml
   spoofax-contrib/lambda/trunk/lib/editor-common.generated.str

Log:
Reverted some changes to ensure compatibility

Changes:

Modified: spoofax-contrib/lambda/trunk/build.generated.xml
===================================================================
--- spoofax-contrib/lambda/trunk/build.generated.xml	2010-07-05 13:19:18 UTC (rev 21084)
+++ spoofax-contrib/lambda/trunk/build.generated.xml	2010-07-05 13:34:12 UTC (rev 21085)
@@ -1,11 +1,9 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <project name="build.generated">
-
-        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
-        <target name="spoofaximp.default.ctree" depends="sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  sdf2imp,refresh"/>
     
+        <target name="spoofaximp.default" depends="sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,sdf2imp,refresh"/>
+    
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
@@ -21,9 +19,6 @@
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
-        <condition property="metasdfmodule.available" value="1">
-            <available file="${syntax}/${metasdfmodule}.sdf"/>
-        </condition>
         <mkdir dir="${build}"/>
         <mkdir dir="${src-gen}"/>
         <mkdir dir="${dist}"/>
@@ -34,14 +29,14 @@
         <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
-            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
                 <arg value="${include}/${esvmodule}.packed.esv"/>
             </java>
         </target>
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
@@ -55,9 +50,6 @@
             <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
             <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
             <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
-            <!-- Might cause the editor to be reloaded?
-            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
-            -->
         </target>
         
         <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
@@ -83,14 +75,6 @@
             </apply>
         </target>
         
-        <target name="meta-sdf2table" if="metasdfmodule.available">
-            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
-            <antcall target="sdf2table">
-                <param name="sdfmodule" value="${metasdfmodule}"/>
-                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
-            </antcall>
-        </target>
-        
         <target name="make-permissive" depends="pack-sdf,copy-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
@@ -130,9 +114,6 @@
         </target>
     
         <target name="pack-sdf.helper" unless="pack-sdf.available">
-            <condition property="utils-include" value="-I ${utils}" else="">
-                <available file="${utils}"/>
-            </condition>
             <java classname="run" failonerror="true">
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
@@ -143,7 +124,6 @@
                 <arg value="${syntax}"/>
                 <arg value="-I"/>
                 <arg value="${lib}"/>
-                <arg line="${utils-include}"/>
                 <arg line="${build.sdf.imports}"/>
             </java>
         </target>
@@ -314,7 +294,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig,utils-files">
+        <target name="stratego.jar" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -336,8 +316,7 @@
             <copy todir="${build}/trans">
                 <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
             </copy>
-            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
-            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
             <delete><fileset dir="${build}" includes="trans/**"/></delete>
         </target>
         
@@ -363,7 +342,6 @@
                 <arg line="${build.stratego.extraargs}"/>
                 <arg line="${externaljarflags}"/>
                 <arg line="${externaldefimport}"/>
-                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
             </java>
             <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
             <mkdir dir="${build}/trans"/>
@@ -389,7 +367,6 @@
                 <arg line="${build.stratego.args}"/>
                 <arg line="${build.stratego.extraargs}"/>
                 <arg line="${externaldefimport}"/>
-                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
                 
                 <fileset file="${trans}/${strmodule}.str"/>
                 <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>

Modified: spoofax-contrib/lambda/trunk/lib/editor-common.generated.str
===================================================================
--- spoofax-contrib/lambda/trunk/lib/editor-common.generated.str	2010-07-05 13:19:18 UTC (rev 21084)
+++ spoofax-contrib/lambda/trunk/lib/editor-common.generated.str	2010-07-05 13:34:12 UTC (rev 21085)
@@ -56,15 +56,15 @@
           rules(
             IsImported: path
           );
-          ( <is-newer> (cache-path, path);
+          if <is-newer> (cache-path, path) then
             file := <ReadFromFile> cache-path
-          <+
+          else
             file := <parse-file> path;
             if <file-exists> path then
               // Only cache if on filesystem (e.g., ignore libstratego-lib)
               <WriteToBinaryFile> (cache-path, file)
             end        
-          );
+          end;
           {| CurrentFile:
             rules(CurrentFile := path);
             <record-declarations> file
@@ -98,8 +98,6 @@
       cache-path   := $[[cache-dir]/[full-path'].sig]
 
   project-path = prim("SSL_EXT_projectpath")
-  
-  plugin-path = prim("SSL_EXT_pluginpath")
 
   is-newer:
     (file1, file2) -> <id>
@@ -115,9 +113,6 @@
   
   refresh-workspace-file:
     path -> <prim("SSL_EXT_refreshresource", path)>
-  
-  string-starts-with-capital =
-    explode-string; Hd; is-upper
 
 strategies
   


From L.C.L.Kats at tudelft.nl  Tue Jul  6 15:15:56 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 06 Jul 2010 13:15:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21086 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
Message-ID: <201007061315.o66DFulj006779@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-06 13:15:56 +0000 (Tue, 06 Jul 2010)
New Revision: 21086

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21086&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java

Log:
Properly remove legacy errors (don't remove new-style errors!)

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-05 13:34:12 UTC (rev 21085)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2010-07-06 13:15:56 UTC (rev 21086)
@@ -1,8 +1,8 @@
 package org.strategoxt.imp.runtime.parser.ast;
 
-import static org.eclipse.core.resources.IMarker.*;
-import static org.spoofax.interpreter.core.Tools.*;
-import static org.strategoxt.imp.runtime.parser.tokens.TokenKind.*;
+import static org.eclipse.core.resources.IMarker.PRIORITY_HIGH;
+import static org.spoofax.interpreter.core.Tools.termAt;
+import static org.strategoxt.imp.runtime.parser.tokens.TokenKind.TK_ERROR;
 
 import java.io.BufferedReader;
 import java.io.FileNotFoundException;
@@ -268,7 +268,7 @@
 				IMarker dupe = markersToReuse.put(new MarkerSignature(marker), marker);
 				if (dupe != null) markersToDelete.add(dupe);
 			}
-			for (IMarker marker : file.findMarkers(GENERIC_PROBLEM, true, 0)) {
+			for (IMarker marker : file.findMarkers(GENERIC_PROBLEM, false, 0)) {
 				// Remove legacy markers (Spoofax/195)
 				markersToDelete.add(marker);
 			}
@@ -464,23 +464,38 @@
 		return asyncActiveMarkers;
 	}
 	
+	public final String getMarkerType() {
+		return markerType;
+	}
+	
+	/**
+	 * Returns a copy of the list of markers scheduled to be added.
+	 */
 	public List<MarkerSignature> getAdditions() {
-		return markersToAdd;
+		return new ArrayList<MarkerSignature>(markersToAdd);
 	}
 	
+	/*
+	 * Returns a copy of the list of markers scheduled to be deleted.
+	 * 
+	 * @param includeReuseCandidates  Whether or not to include markers potentially reusable for addition.
+	 *
+	public List<IMarker> getDeletions(boolean includeReuseCandidates) {
+		ArrayList<IMarker> results = new ArrayList<IMarker>(markersToDelete);
+		if (includeReuseCandidates)
+			results.addAll(markersToReuse.values());
+		return results;
+	}
+	 */
+	
 	private static void runInWorkspace(final Runnable action) {
 		try {
-			if (Environment.isMainThread()) {
-				// When Eclipse is starting, just run it as it is to avoid a lockup
-				action.run();
-			} else {
-				ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() {
-						public void run(IProgressMonitor monitor) {
-							action.run();
-						}
-					}, null, IWorkspace.AVOID_UPDATE, new NullProgressMonitor()
-					);
-			}
+			ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() {
+					public void run(IProgressMonitor monitor) {
+						action.run();
+					}
+				}, null, IWorkspace.AVOID_UPDATE, new NullProgressMonitor()
+				);
 		} catch (CoreException e) {
 			Environment.logException("Exception in message handler", e);
 		}


From L.C.L.Kats at tudelft.nl  Tue Jul  6 17:06:51 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 06 Jul 2010 15:06:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21087 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201007061506.o66F6pVd008309@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-06 15:06:51 +0000 (Tue, 06 Jul 2010)
New Revision: 21087

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21087&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java

Log:
Fixed (or at least avoided) some ClassCastedExceptions

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-07-06 13:15:56 UTC (rev 21086)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-07-06 15:06:51 UTC (rev 21087)
@@ -445,6 +445,8 @@
                     if(Tools.debugging) {
                         Tools.debug(" - found");
                     }
+                    if (r instanceof Amb) // FIXME is this correct?
+                        return r;
                     return applyPriorityFilter((ParseNode) r, prodLabel);
                 }
                 if(Tools.debugging) {
@@ -649,8 +651,8 @@
 
             List<IParseNode> ambs = ((Amb) last).getAlternatives();
             for (IParseNode amb : ambs) {
-                Label other = parseTable.getLabel(((ParseNode) amb).getLabel());
-                if (!prodLabel.equals(other)) {
+                if (amb instanceof Amb
+                        || !parseTable.getLabel(((ParseNode) amb).getLabel()).equals(prodLabel)) {
                     newAmbiguities.add(amb);
                 }
             }


From L.C.L.Kats at tudelft.nl  Tue Jul  6 17:08:05 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 06 Jul 2010 15:08:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21088 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	strc-java/trunk/java strc-java/trunk/java/runtime/org/strategoxt
	strc-java/trunk/java/runtime/org/strategoxt/lang
Message-ID: <201007061508.o66F85A0008314@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-06 15:08:05 +0000 (Tue, 06 Jul 2010)
New Revision: 21088

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21088&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/IAsyncCancellable.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Label.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropContext.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Added and implemented new IAsyncCancellable interface for asynchronously cancelling Stratego programs

Changes:

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/IAsyncCancellable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/IAsyncCancellable.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/IAsyncCancellable.java	2010-07-06 15:08:05 UTC (rev 21088)
@@ -0,0 +1,23 @@
+package org.spoofax;
+
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public interface IAsyncCancellable {
+    /**
+     * Aborts an asynchronously running job, causing it to throw
+     * a {@link CancellationException}.
+     * 
+     * Call {@link #asyncCancel()} after the job complets to reset the
+     * cancellation state for the next job.
+     *  
+     * (Provides no guarantee that the job is actually cancelled.)
+     */
+    void asyncCancel();
+    
+    /**
+     * Resets the cancellation state of the current job.
+     */
+    void asyncCancelReset();
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	2010-07-06 15:06:51 UTC (rev 21087)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	2010-07-06 15:08:05 UTC (rev 21088)
@@ -12,6 +12,7 @@
 import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.concurrent.CancellationException;
 
 import org.spoofax.DebugUtil;
 import org.spoofax.interpreter.library.AbstractPrimitive;
@@ -19,10 +20,10 @@
 import org.spoofax.interpreter.library.IOperatorRegistry;
 import org.spoofax.interpreter.library.java.JFFLibrary;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.stratego.Match.Binding;
+import org.spoofax.interpreter.stratego.Match.Results;
 import org.spoofax.interpreter.stratego.OpDecl;
 import org.spoofax.interpreter.stratego.SDefT;
-import org.spoofax.interpreter.stratego.Match.Binding;
-import org.spoofax.interpreter.stratego.Match.Results;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
@@ -47,6 +48,8 @@
 
     private VarScope varScope;
 
+    private transient volatile boolean asyncCancelled;
+
     public Context(ITermFactory factory, ITermFactory programFactory) {
         this(factory, programFactory, false);
     }
@@ -107,6 +110,7 @@
     }
 
     public ITermFactory getFactory() {
+        if (asyncCancelled) cancel();
         return factory;
     }
 
@@ -173,6 +177,7 @@
     }
 
     public AbstractPrimitive lookupOperator(String name) {        
+        if (asyncCancelled) cancel();
         for(IOperatorRegistry or : operatorRegistries.values()) {
             AbstractPrimitive t = or.get(name);
             if(t != null)
@@ -200,4 +205,18 @@
             r.add(s.getName());
         return r;
     }
+
+    public void asyncCancel() {
+        asyncCancelled = true;
+    }
+
+    public void asyncCancelReset() {
+        asyncCancelled = false;
+    }
+
+    private void cancel() {
+        asyncCancelled = false;
+        getIOAgent().closeAllFiles();
+        throw new CancellationException("Stratego interpreter cancelled");
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java	2010-07-06 15:06:51 UTC (rev 21087)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java	2010-07-06 15:08:05 UTC (rev 21088)
@@ -9,14 +9,15 @@
 
 import java.util.Collection;
 
+import org.spoofax.IAsyncCancellable;
+import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.IOperatorRegistry;
-import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Match.Results;
 import org.spoofax.interpreter.stratego.SDefT;
-import org.spoofax.interpreter.stratego.Match.Results;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-public interface IContext {
+public interface IContext extends IAsyncCancellable {
 
     public IStrategoTerm current();
     public void setCurrent(IStrategoTerm newCurrent);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Label.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Label.java	2010-07-06 15:06:51 UTC (rev 21087)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Label.java	2010-07-06 15:08:05 UTC (rev 21088)
@@ -60,7 +60,7 @@
     
     @Override
     public boolean equals(Object obj) {
-        return obj instanceof Label && ((Label) obj).labelNumber == labelNumber;
+        return obj == this || (obj instanceof Label && ((Label) obj).labelNumber == labelNumber);
     }
     
     @Override

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-07-06 15:06:51 UTC (rev 21087)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-07-06 15:08:05 UTC (rev 21088)
@@ -168,12 +168,25 @@
     }
     
     /**
-     * Aborts an asynchronously running parse job, causing it to throw an exception.     * 
+     * @deprecated Use {@link #asyncCancel()} instead.
+     */
+    @Deprecated
+    public void asyncAbort() {
+        asyncCancel();
+    }
+    
+    /**
+     * Aborts an asynchronously running parse job, causing it to throw an exception.
+     *  
      * (Provides no guarantee that the parser is actually cancelled.)
      */
-    public void asyncAbort() {
+    public void asyncCancel() {
         asyncAborted = true;
     }
+    
+    public void asyncCancelReset() {
+        asyncAborted = false;
+    }
 
     private void basicInit(ATermFactory factory) {
         this.factory = factory;

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2010-07-06 15:06:51 UTC (rev 21087)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2010-07-06 15:08:05 UTC (rev 21088)
@@ -11,6 +11,7 @@
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
+import org.spoofax.IAsyncCancellable;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
@@ -48,7 +49,7 @@
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class HybridInterpreter extends Interpreter {
+public class HybridInterpreter extends Interpreter implements IAsyncCancellable {
 	
 	private static final String USAGE = "Uses: run [FILE.ctree | FILE.jar]... MAINCLASS [ARGUMENT]...\n" +
 	                                    "      run                    PACKAGE.MAINCLASS [ARGUMENT]...";
@@ -418,4 +419,14 @@
 			super.addOperatorRegistry(or);
 		}
 	}
+
+	public void asyncCancel() {
+		getCompiledContext().asyncCancel();
+		getContext().asyncCancel();
+	}
+
+	public void asyncCancelReset() {
+		getCompiledContext().asyncCancelReset();
+		getContext().asyncCancelReset();
+	}
 }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2010-07-06 15:06:51 UTC (rev 21087)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2010-07-06 15:08:05 UTC (rev 21088)
@@ -1,10 +1,15 @@
 package org.strategoxt.lang;
 
+import static org.strategoxt.lang.Term.NO_STRATEGIES;
+import static org.strategoxt.lang.Term.NO_TERMS;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.CancellationException;
 
+import org.spoofax.IAsyncCancellable;
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
@@ -20,7 +25,6 @@
 import org.strategoxt.lang.compat.CompatManager;
 import org.strategoxt.lang.compat.SSL_EXT_java_call;
 import org.strategoxt.lang.terms.TermFactory;
-import static org.strategoxt.lang.Term.*;
 
 /**
  * The runtime context of a compiled Stratego strategy.
@@ -28,7 +32,7 @@
  * @author Lennart Kats
  * @author Karl Trygve Kalleberg
  */
-public class Context extends StackTracer {
+public class Context extends StackTracer implements IAsyncCancellable {
 	
 	private final InteropContext interopContext = new InteropContext(this);
 
@@ -50,6 +54,8 @@
     private transient String lastPrimitiveName1, lastPrimitiveName2;
     
     private transient AbstractPrimitive lastPrimitive1, lastPrimitive2;
+
+	private transient volatile boolean asyncCancelled;
     
     public Context() {
     	this(new TermFactory());
@@ -83,6 +89,7 @@
     }
 	
 	public final ITermFactory getFactory() {
+        if (asyncCancelled) cancel();
 		return factory;
 	}
 	
@@ -198,6 +205,8 @@
 	public IStrategoTerm invokePrimitive(AbstractPrimitive primitive, IStrategoTerm term, Strategy[] sargs, IStrategoTerm[] targs) {
     	if (primitive == null)
     		throw new StrategoException("Calling undefined primitive");
+        if (asyncCancelled)
+            cancel();
 		
     	interopContext.setCurrent(term);
 		try {
@@ -236,4 +245,18 @@
 	        return null;
 		}
 	}
+
+    public void asyncCancel() {
+        asyncCancelled = true;
+    }
+
+    public void asyncCancelReset() {
+        asyncCancelled = false;
+    }
+
+	private void cancel() {
+		asyncCancelled = false;
+		getIOAgent().closeAllFiles();
+		throw new CancellationException("Stratego interpreter cancelled");
+	}
 }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropContext.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropContext.java	2010-07-06 15:06:51 UTC (rev 21087)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropContext.java	2010-07-06 15:08:05 UTC (rev 21088)
@@ -98,4 +98,12 @@
 	public void setVarScope(VarScope newVarScope) {
 		throw new UnsupportedOperationException();
 	}
+
+	public void asyncCancel() {
+		context.asyncCancel();
+	}
+
+	public void asyncCancelReset() {
+		context.asyncCancelReset();
+	}
 }

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)


From L.C.L.Kats at tudelft.nl  Tue Jul  6 17:11:15 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 06 Jul 2010 15:11:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21089 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201007061511.o66FBFhT008364@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-06 15:11:15 +0000 (Tue, 06 Jul 2010)
New Revision: 21089

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21089&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/MonitorStateWatchDog.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorRegistry.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceMappings.java

Log:
- Spoofax/53: infinite loop kills Eclipse
- Revised the approach to avoid a potential deadlock in DynamicDescriptorLoaded
- Changed the startup directory for Stratego jobs to the project path instead of the path of the current file


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -11,15 +11,16 @@
 import java.io.IOException;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Queue;
 import java.util.Set;
 
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IMarker;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IResourceChangeEvent;
 import org.eclipse.core.resources.IResourceChangeListener;
 import org.eclipse.core.resources.IResourceDelta;
-import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.resources.WorkspaceJob;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IProgressMonitor;
@@ -34,6 +35,7 @@
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
+import org.strategoxt.imp.runtime.parser.ast.MarkerSignature;
 
 /**
  * This class updates any editors in the environment,
@@ -217,9 +219,32 @@
 			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
 			throw e;
 		} finally {
-			asyncMessageHandler.commitAllChanges();
+			scheduleReplaceMessages(source, descriptor);
 		}
 	}
+
+	/**
+	 * Deletes all old messages on the descriptor resources, and adds the new messages.
+	 */
+	private void scheduleReplaceMessages(final IResource file1, final IResource file2) {
+		final List<MarkerSignature> additions = asyncMessageHandler.getAdditions();
+		Job job = new WorkspaceJob("Message handler for dynamic descriptor loader") {
+			@Override
+			public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
+				String markerType = asyncMessageHandler.getMarkerType();
+				for (IMarker marker : file1.findMarkers(markerType, true, 0))
+					marker.delete();
+				for (IMarker marker : file2.findMarkers(markerType, true, 0))
+					marker.delete();
+				synchronized (asyncMessageHandler.getSyncRoot()) {
+					asyncMessageHandler.asyncCommitAdditions(additions);
+				}
+				return Status.OK_STATUS;
+			}
+		};
+		job.setSystem(false);
+		job.schedule();
+	}
 	
 	public static IResource getSourceDescriptor(IResource packedDescriptor) {
 		String name = packedDescriptor.getName();
@@ -248,20 +273,7 @@
 		if (exception != null)
 			Environment.asynOpenErrorDialog("Dynamic editor descriptor loading", message, exception);
 		
-		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
-			Job job = new WorkspaceJob("Add error marker") {
-				{ setSystem(true); } // don't show to user
-				@Override
-				public IStatus runInWorkspace(IProgressMonitor monitor) {
-					asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
-					return Status.OK_STATUS;
-				}
-			};
-			job.setRule(descriptor);
-			job.schedule();
-		} else {
-			asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
-		}
+		asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
 	}
 	
 	private void reportError(final IResource descriptor, final IStrategoTerm offendingTerm, final String message, final Throwable exception) {
@@ -270,19 +282,6 @@
 		if (exception != null)
 			Environment.asynOpenErrorDialog("Dynamic editor descriptor loading", message, exception);
 
-		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
-			Job job = new WorkspaceJob("Add error marker") {
-				{ setSystem(true); } // don't show to user
-				@Override
-				public IStatus runInWorkspace(IProgressMonitor monitor) {
-					asyncMessageHandler.addMarker(descriptor, offendingTerm, message, SEVERITY_ERROR);
-					return Status.OK_STATUS;
-				}
-			};
-			job.setRule(descriptor);
-			job.schedule();
-		} else {
-			asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
-		}
+		asyncMessageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -21,6 +21,7 @@
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.ide.IDE;
+import org.eclipse.ui.texteditor.AbstractTextEditor;
 import org.eclipse.ui.texteditor.IDocumentProvider;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
@@ -191,6 +192,13 @@
 		return StrategoTermPath.findCommonAncestor(startNode, endNode);
 	}
 
+	public static boolean isEditorOpen(IEditorPart editor) {
+		return !((editor.getTitleImage() != null && editor.getTitleImage().isDisposed())
+			|| editor.getEditorInput() == null
+			|| editor.getSite() == null
+			|| (editor instanceof AbstractTextEditor && ((AbstractTextEditor) editor).getDocumentProvider() == null));
+	}
+
 	/**
 	 * Asynchronously opens or activates an editor.
 	 * 

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/MonitorStateWatchDog.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/MonitorStateWatchDog.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/MonitorStateWatchDog.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -0,0 +1,72 @@
+package org.strategoxt.imp.runtime;
+
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
+import org.spoofax.IAsyncCancellable;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class MonitorStateWatchDog {
+
+	private static final int RUNNING_CHECK_INTERVAL = 500;
+
+	private static final int CANCELLED_CHECK_INTERVAL = 20;
+
+	private final Job runningJob;
+	
+	private final IProgressMonitor progressMonitor;
+
+	private final IAsyncCancellable canceller;
+
+	private MonitorStateWatchDog(Job runningJob, IProgressMonitor progressMonitor, IAsyncCancellable canceller) {
+		this.runningJob = runningJob;
+		this.progressMonitor = progressMonitor;
+		this.canceller = canceller;
+	}
+	
+	public static void protect(Job runningJob, IProgressMonitor progressMonitor, IAsyncCancellable canceller) {
+		MonitorStateWatchDog watchDog = new MonitorStateWatchDog(runningJob, progressMonitor, canceller);
+		Job job = watchDog.new WatchDogJob();
+		job.setSystem(true);
+		job.schedule(RUNNING_CHECK_INTERVAL);
+	}
+	
+	private class WatchDogJob extends Job {
+		
+		public WatchDogJob() {
+			super("MonitorStateWatchDog for " + runningJob.getName());
+		}
+
+		@Override
+		protected IStatus run(IProgressMonitor monitor) {
+			while (runningJob.getState() != Job.NONE) {
+				if (progressMonitor.isCanceled()) {
+					asyncCancel();
+					break;
+				}
+				try {
+					Thread.sleep(RUNNING_CHECK_INTERVAL);
+				} catch (InterruptedException e) {
+					break;
+				}
+			}
+			return Status.OK_STATUS;
+		}
+	}
+
+	private void asyncCancel() {
+		canceller.asyncCancel();
+		while (runningJob.getState() != Job.NONE) {
+			try {
+				Thread.sleep(CANCELLED_CHECK_INTERVAL);
+			} catch (InterruptedException e) {
+				break;
+			}
+		}
+		canceller.asyncCancelReset();
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorRegistry.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorRegistry.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorRegistry.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.ConcurrentModificationException;
 import java.util.List;
 
 import org.eclipse.imp.editor.UniversalEditor;
@@ -56,7 +57,7 @@
 		//       there should be some accessor in Descriptor that gives me this info
 		
 		Language language = descriptor.getLanguage();
-		LanguageRegistry.registerLanguage(language);
+		registerWithImp(language);
 		
 		// After IMP modifies the Eclipse editor registry, we queue another job
 		// to make sure it's all okay.
@@ -66,6 +67,25 @@
 		Display.getDefault().asyncExec(new AsyncEditorRegisterer());
 	}
 
+	private void registerWithImp(Language language) {
+		final int TRIES = 10;
+		final int SLEEP = 500;
+		
+		for (int i = 0; i < TRIES; i++) {
+			try {
+				LanguageRegistry.registerLanguage(language);
+				return;
+			} catch (ConcurrentModificationException e) {
+				// Loop
+				try {
+					Thread.sleep(SLEEP);
+				} catch (InterruptedException e2) {
+					throw new RuntimeException(e2);
+				}
+			}
+		}
+	}
+
 	/**
 	 * Binds a UniversalEditor to each extension of a given language.
 	 * 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -59,10 +59,6 @@
 		this(new ParseTableProvider(parseTable), startSymbol);
 	}
 	
-	public void asyncAbort() {
-		parser.asyncAbort();
-	}
-	
 	protected SGLR getParser() {
 		return parser;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -203,10 +203,8 @@
 
 		final int expectedVersion = ++additionsVersionId;
 
-		List<MarkerSignature> markers = handler.getAdditions();
+		final List<MarkerSignature> markers = handler.getAdditions();
 		if (markers.isEmpty()) return;
-
-		final List<MarkerSignature> safeMarkers = new ArrayList<MarkerSignature>(markers);
 		
 		Job job = new Job("Report parse errors") {
 			@Override
@@ -219,10 +217,10 @@
 					synchronized (handler.getSyncRoot()) {
 						if (additionsVersionId != expectedVersion) return Status.OK_STATUS;
 	
-						List<IMarker> markers = handler.asyncCommitAdditions(safeMarkers);
+						List<IMarker> addedMarkers = handler.asyncCommitAdditions(markers);
 						
 						if (additionsVersionId != expectedVersion)
-							handler.asyncDeleteMarkers(markers); // rollback
+							handler.asyncDeleteMarkers(addedMarkers); // rollback
 					}
 					//source.forceRecolor(); // Adding markers corrupts coloring sometimes
 					//EditorState editor = source.getEditor();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -387,10 +387,11 @@
 			forceRecolor(wasStartupParsed);
 		
 		// Threading concerns:
-		// must never block the main thread with a lock here since
-		// it must be available to draw error markers
+		// - must never block the main thread with a lock here since
+		//   it must be available to draw error markers
+		// - must not acquire resource locks when Eclipse is starting
 		
-		if (!Environment.isMainThread() || !wasStartupParsed) {
+		if (!Environment.isMainThread()) {
 			if (!monitor.isCanceled() && !Thread.holdsLock(Environment.getSyncRoot())) {
 				// Note that a resource lock is acquired here
 				errorHandler.commitMultiErrorLineAdditions();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -70,7 +70,7 @@
 		if (builder == null) {
 			openError("No builders defined for this editor");
 		} else {
-			builder.execute(editor, null, null, false);
+			builder.scheduleExecute(editor, null, null, false);
 		}
 	}
 
@@ -98,7 +98,7 @@
 				@Override
 				public void run() {
 					lastAction = builder.getCaption();
-					builder.execute(editor, null, null, false);
+					builder.scheduleExecute(editor, null, null, false);
 				}
 			};
 			ActionContributionItem item = new ActionContributionItem(action);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -39,13 +39,13 @@
 	}
 	
 	@Override
-	public void execute(EditorState editor, IStrategoAstNode node, IFile errorReportFile,
+	public void scheduleExecute(EditorState editor, IStrategoAstNode node, IFile errorReportFile,
 			boolean isRebuild) {
 		
 		String builderRule = inputBuilderRule(editor);
 		if (builderRule != null) {
 			setBuilderRule(builderRule);
-			super.execute(editor, node, errorReportFile, isRebuild);
+			super.scheduleExecute(editor, node, errorReportFile, isRebuild);
 		}
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -11,5 +11,5 @@
 
 	String getCaption();
 	
-	void execute(EditorState editor, IStrategoAstNode ast, IFile errorReportFile, boolean isRebuild);
+	void scheduleExecute(EditorState editor, IStrategoAstNode ast, IFile errorReportFile, boolean isRebuild);
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoAnalysisQueue.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime.services;
 
+import java.util.concurrent.CancellationException;
 import java.util.concurrent.PriorityBlockingQueue;
 
 import org.eclipse.core.resources.IProject;
@@ -12,6 +13,7 @@
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.parser.IParseController;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.MonitorStateWatchDog;
 
 /**
  * A workbench-global queue of Stratego operations.
@@ -67,13 +69,16 @@
 		@Override
 		protected IStatus run(IProgressMonitor monitor) {
 
-			running = true; // atomic
+			running = true;
+			if (!isSystem())
+				MonitorStateWatchDog.protect(this, monitor, job.getObserver());
 
-			// Set name
 			IStatus status;
 			try {
-				status = runInternal(monitor);
-			} catch (Exception e) {
+				status = job.analyze(monitor);
+			} catch (CancellationException e) {
+				status = Status.CANCEL_STATUS;
+			} catch (RuntimeException e) {
 				Environment.logException("Error running scheduled analysis", e);
 				status = Status.CANCEL_STATUS;
 			} catch (Error e) {
@@ -88,13 +93,6 @@
 			return status;
 		}
 
-		private IStatus runInternal(IProgressMonitor monitor) {
-
-			IStatus status = job.analyze(monitor);
-			return status;
-
-		}
-
 		public void scheduleWithDelay() {
 			super.schedule(this.delay);
 		}
@@ -132,10 +130,10 @@
 		StrategoObserverUpdateJob job = new StrategoObserverUpdateJob(observer);
 		job.setup(parseController);
 
-		// UNDONE: observer job is no longer a WorkspaceJob
-		// thus avoiding analysis delays and progress view spamming
-		// setRule(parseController.getProject().getResource());
-		UpdateJob updateJob = new UpdateJob(job, path, UpdateJob.INTERACTIVE, true, delay);
+		// To avoid progress view spamming, we only show jobs in the progress view if they have been
+		// dynamically loaded
+		boolean isSystemJob = !Environment.getDescriptor(parseController.getLanguage()).isDynamicallyLoaded();
+		UpdateJob updateJob = new UpdateJob(job, path, UpdateJob.INTERACTIVE, isSystemJob, delay);
 		add(updateJob);
 		return updateJob;
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -9,17 +9,23 @@
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.InputStream;
+import java.util.Map;
+import java.util.WeakHashMap;
+import java.util.concurrent.CancellationException;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.ui.IEditorPart;
 import org.eclipse.ui.IWorkbenchPage;
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.ide.IDE;
+import org.eclipse.ui.progress.UIJob;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
@@ -28,6 +34,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.MonitorStateWatchDog;
 import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.dynamicloading.TermReader;
 import org.strategoxt.imp.runtime.stratego.StrategoConsole;
@@ -63,6 +70,10 @@
 	
 	private final EditorState derivedFromEditor;
 	
+	// Since StrategoBuilders are not persistent (per constructor of BuilderFactory)
+	// we maintain a map with running jobs in a static field
+	private static Map<String, Job> activeJobs = new WeakHashMap<String, Job>();
+	
 	/**
 	 * Creates a new Stratego builder.
 	 * 
@@ -103,7 +114,39 @@
 		this.builderRule = builderRule;
 	}
 	
-	public void execute(EditorState editor, IStrategoAstNode node, IFile errorReportFile, boolean isRebuild) {
+	public void scheduleExecute(final EditorState editor, IStrategoAstNode node,
+			final IFile errorReportFile, final boolean isRebuild) {
+
+		String displayCaption = caption.endsWith("...")
+			? caption.substring(caption.length() - 3)
+			: caption;
+		
+		Job lastJob = activeJobs.get(caption);
+		if (lastJob != null && lastJob.getState() != Job.NONE) {
+			openError(editor, "Already running: " + displayCaption);
+			return;
+		}
+		
+		if (node == null) {
+			node = editor.getSelectionAst(!cursor);
+			if (node == null) node = editor.getParseController().getCurrentAst();
+		}
+		
+		final IStrategoAstNode node2 = node;
+			
+		Job job = new Job("Executing " + displayCaption) {
+			@Override
+			protected IStatus run(IProgressMonitor monitor) {
+				MonitorStateWatchDog.protect(this, monitor, observer);
+				execute(editor, node2, errorReportFile, isRebuild);
+				return monitor.isCanceled() ? Status.CANCEL_STATUS : Status.OK_STATUS;
+			}
+		};
+		job.schedule();
+		activeJobs.put(caption, job);
+	}
+	
+	private void execute(EditorState editor, IStrategoAstNode node, IFile errorReportFile, boolean isRebuild) {
 		// TODO: refactor
 		assert derivedFromEditor == null || editor.getDescriptor().isATermEditor();
 		String filename = null;
@@ -113,10 +156,6 @@
 		synchronized (observer.getSyncRoot()) {
 			try {
 				if (node == null) {
-					node = editor.getSelectionAst(!cursor);
-					if (node == null) node = editor.getParseController().getCurrentAst();
-				}
-				if (node == null) {
 					openError(editor, "Editor is still analyzing");
 					return;
 				}
@@ -168,6 +207,8 @@
 				reportGenericException(editor, e);
 			} catch (InterpreterException e) {
 				reportGenericException(editor, e);
+			} catch (CancellationException e) {
+				return;
 			} catch (RuntimeException e) {
 				reportGenericException(editor, e);
 			} catch (Error e) {
@@ -189,7 +230,24 @@
 				setFileContents(editor, file, result);
 				// TODO: if not persistent, create IEditorInput from result String
 				if (openEditor && !isRebuild) {
+					scheduleOpenEditorAndListener(editor, node, file);
+				}
+			}
+		} catch (CoreException e) {
+			Environment.logException("Builder failed", e);
+			openError(editor, "Builder failed (" + e.getClass().getName() + "; see error log): " + e.getMessage());
+		}
+	}
+
+	private void scheduleOpenEditorAndListener(final EditorState editor, final IStrategoAstNode node, final IFile file)
+			throws PartInitException {
+		
+		Job job = new UIJob("Opening editor") {
+			@Override
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				try {
 					IEditorPart target = openEditor(file, realTime);
+				
 					// UNDONE: don't delete non-persistent files for now since it causes problem with workspace auto-refresh
 					// if (!persistent) new File(file.getLocationURI()).delete();
 					// Create a listene *and* editor-derived editor relation
@@ -199,12 +257,15 @@
 						listener.setEnabled(false);
 					if (derivedFromEditor != null) // ensure we get builders from the source
 						listener.setSourceEditor(derivedFromEditor.getEditor());
+				} catch (PartInitException e) {
+					Environment.logException("Builder failed", e);
+					openError(editor, "Builder failed (" + e.getClass().getName() + "; see error log): " + e.getMessage());
 				}
+				return Status.OK_STATUS;
 			}
-		} catch (CoreException e) {
-			Environment.logException("Builder failed", e);
-			openError(editor, "Builder failed (" + e.getClass().getName() + "; see error log): " + e.getMessage());
-		}
+		};
+		job.setSystem(true);
+		job.schedule();
 	}
 
 	protected IStrategoTerm invokeObserver(IStrategoAstNode node) throws UndefinedStrategyException,
@@ -243,9 +304,13 @@
 	}
 	
 	private void openError(EditorState editor, String message) {
-		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
-		ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-				caption, null, status);
+		try {
+			Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
+			ErrorDialog.openError(editor.getEditor().getSite().getShell(),
+					caption, null, status);
+		} catch (RuntimeException e) {
+			Environment.logException("Problem reporting error: " + message);
+		}
 	}
 
 	private void setFileContents(final EditorState editor, IFile file, final String contents) throws CoreException {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -8,7 +8,6 @@
 import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.ui.IEditorPart;
-import org.eclipse.ui.texteditor.AbstractTextEditor;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.WeakWeakMap;
@@ -100,7 +99,7 @@
 		IEditorPart targetEditor = this.targetEditor.get();
 		
 		if (!enabled || editor == null || targetEditor == null || targetEditor.isDirty()
-				|| isEditorClosed(targetEditor) 
+				|| !EditorState.isEditorOpen(targetEditor) 
 				|| targetFile.getLocalTimeStamp() > lastChanged) {
 			enabled = false;
 			selection = null;
@@ -111,13 +110,6 @@
 		}
 	}
 
-	private static boolean isEditorClosed(IEditorPart editor) {
-		return (editor.getTitleImage() != null && editor.getTitleImage().isDisposed())
-			|| editor.getEditorInput() == null
-			|| editor.getSite() == null
-			|| (editor instanceof AbstractTextEditor && ((AbstractTextEditor) editor).getDocumentProvider() == null);
-	}
-
 	public void update(IParseController parseController, IProgressMonitor monitor) {
 		update(monitor);
 	}
@@ -135,9 +127,9 @@
 			
 			IStrategoAstNode newSelection = findNewSelection(editor);
 			if (newSelection != null) {
-				builder.execute(editor, selection = newSelection, targetFile, true);
+				builder.scheduleExecute(editor, selection = newSelection, targetFile, true);
 			} else {
-				builder.execute(editor, editor.getParseController().getCurrentAst(), targetFile, true);
+				builder.scheduleExecute(editor, editor.getParseController().getCurrentAst(), targetFile, true);
 			}
 
 		} catch (BadDescriptorException e) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -25,6 +25,7 @@
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
+import org.spoofax.IAsyncCancellable;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
@@ -68,7 +69,7 @@
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class StrategoObserver implements IDynamicLanguageService, IModelListener {
+public class StrategoObserver implements IDynamicLanguageService, IModelListener, IAsyncCancellable {
 	
 	// TODO: separate delay for error markers?
 	public static final int OBSERVER_DELAY = 600;
@@ -660,7 +661,7 @@
 		
 		try {
 			EditorIOAgent io = (EditorIOAgent) runtime.getIOAgent();
-			io.setWorkingDir(resource.getLocation().removeLastSegments(1).toOSString());
+			io.setWorkingDir(resource.getProject().getLocation().toOSString());
 			io.setProjectPath(resource.getProject().getLocation().toOSString());
 			io.setDescriptor(descriptor);
 		} catch (IOException e) {
@@ -694,4 +695,15 @@
 		}
 	}
 
+	public void asyncCancel() {
+		IAsyncCancellable canceller = this.runtime;
+		if (canceller != null) canceller.asyncCancel();
+	}
+
+	public void asyncCancelReset() {
+		IAsyncCancellable canceller = this.runtime;
+		if (canceller != null) canceller.asyncCancelReset();
+		
+	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceMappings.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceMappings.java	2010-07-06 15:08:05 UTC (rev 21088)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceMappings.java	2010-07-06 15:11:15 UTC (rev 21089)
@@ -69,7 +69,6 @@
 	}
 	
 	public File getInputFile(IStrategoAppl asfix) {
-		// assert isTermAppl(asfix);
 		return getValue(asfixInputFileMap, asfix);
 	}
 	


From L.C.L.Kats at tudelft.nl  Wed Jul  7 09:49:54 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Jul 2010 07:49:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21090 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
Message-ID: <201007070749.o677ns5R019758@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-07 07:49:54 +0000 (Wed, 07 Jul 2010)
New Revision: 21090

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21090&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2010-07-06 15:11:15 UTC (rev 21089)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2010-07-07 07:49:54 UTC (rev 21090)
@@ -242,7 +242,7 @@
 				return Status.OK_STATUS;
 			}
 		};
-		job.setSystem(false);
+		job.setSystem(true);
 		job.schedule();
 	}
 	


From L.C.L.Kats at tudelft.nl  Wed Jul  7 13:28:11 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Jul 2010 11:28:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21091 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.sdf/lib
	org.strategoxt.imp.editors.sdf/trans org.strategoxt.imp.feature
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.updatesite
Message-ID: <201007071128.o67BSBRg022501@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-07 11:28:11 +0000 (Wed, 07 Jul 2010)
New Revision: 21091

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21091&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Release 0.5.2.4:
- Spoofax/133: Check for missing symbols in SDF grammar
- Fixed regression in realtime builders

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/lib/editor-common.generated.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/lib/editor-common.generated.str	2010-07-07 07:49:54 UTC (rev 21090)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/lib/editor-common.generated.str	2010-07-07 11:28:11 UTC (rev 21091)
@@ -98,6 +98,8 @@
       cache-path   := $[[cache-dir]/[full-path'].sig]
 
   project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
 
   is-newer:
     (file1, file2) -> <id>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	2010-07-07 07:49:54 UTC (rev 21090)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	2010-07-07 11:28:11 UTC (rev 21091)
@@ -35,11 +35,14 @@
       , parse-file // TODO: parse-sdf-file
       , declare-globals-top
       )> x
+    <+
+      rules(IsImportFailed: _)
 
   declare-globals:
     parameterized(x, y) -> parameterized(x, y)
     where
-      <declare-globals> unparameterized(x)
+      <declare-globals> unparameterized(x);
+      <alltd(declare-simple-global)> y
   
   resolve-import =
     // TODO: better import handling
@@ -50,7 +53,7 @@
     \x -> $[[<ProjectDir>]/lib/[x].def]\; file-exists
   
   declare-globals:
-    prod @ prod(_, sort, _) -> <id>
+    prod @ prod(lhs, sort, _) -> <id>
     where
       !sort => sort(x) <+ !sort => parametrized-sort(x, _)
     with
@@ -61,9 +64,40 @@
         Declaration: x -> prod
         DeclarationFile: x -> file
       )
+    with
+      <alltd(declare-use)> lhs
   
+  declare-globals:
+    'sorts(_) -> <id>
+    with
+      alltd(declare-use)
+  
+  declare-simple-global:
+    sort(x) -> <id>
+    with
+      rules(Declaration: x -> x)
+  
+  declare-use:
+    sort(x) -> <id>
+    with
+      rules(Usage: x -> x)
+  
+  declare-use:
+    parameterized-sort(x, y) -> <id>
+    where
+      if !y => [sort(y')]; <is-string> x; <is-string> y' then
+        text := ${{x}[[{y'}]]};
+        rules(Usage: text -> text)
+      end
+  
   propose-completion:
-    sort(COMPLETION(x)) -> <all-keys-Declaration> x
+    sort(COMPLETION(x)) -> [decl*, use*]
+    with
+      decl* := <all-keys-Declaration> x;
+      use*  := <all-keys-Usage> x
   
   propose-completion:
-    NOCONTEXT(COMPLETION(x)) -> <all-keys-Declaration> x
+    NOCONTEXT(COMPLETION(x)) -> [decl*, use*]
+    with
+      decl* := <all-keys-Declaration> x;
+      use*  := <all-keys-Usage> x

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2010-07-07 07:49:54 UTC (rev 21090)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2010-07-07 11:28:11 UTC (rev 21091)
@@ -6,22 +6,30 @@
   libstratego-sglr
   libstrc
   analysis
+  lib/editor-common.generated
 
 rules
 
-  // TODO: Report proper SDF errors  
-
   editor-analyze:
-    (ast, path, project-path) -> (errors, warnings, [])
+    (ast, path, project-path) -> (error'*, warning'*, [])
     with
-      // Ensure all dynamic rules are properly scoped
-      try(dr-scope-all-end);
-      dr-scope-all-start
-    with
+      editor-init;
       analyze-ast;
-      errors   := <collect(?context-free-syntax(<collect-om(context-free-syntax-error)>))> ast;
       // We only collect-om since we don't want inner warning dupes
-      warnings := <collect(?context-free-syntax(<collect-om(context-free-syntax-warning)>))> ast
+      error*   := <collect(?context-free-syntax(<collect-om(context-free-syntax-error)>))> ast;
+      warning* := <collect(?context-free-syntax(<collect-om(context-free-syntax-warning)>))> ast;
+      if <file-exists> $[[project-path]/.disable-global-analysis] then
+        serror* := []
+      else
+        serror* := <collect-om(context-free-syntax-sort-error)> ast
+      end;
+      if IsImportFailed then
+        error'*   := error*;
+        warning'* := <conc> (serror*, warning*)
+      else
+        error'*   := <conc> (serror*, warning*);
+        warning'* := error*
+      end 
 
   editor-complete:
     (node, position, ast, path, project-path) -> proposals
@@ -35,8 +43,21 @@
 
   override pp-sdf-string = fail // ensure compiler doesn't blow up
 
-rules
+rules // Limited exisiting sort checking
+    
+  context-free-syntax-sort-error:
+    sort(x) -> (x, $[No definition for [x]])
+    where
+      not(<Declaration> x)
   
+  context-free-syntax-sort-error:
+    parameterized-sort(_, _) -> [] // not supported
+  
+  context-free-syntax-sort-error:
+    'sorts(_) -> [] // ignored
+
+rules // Local checks
+  
   context-free-syntax-warning:
     prod(p, s, a*) -> (target, $[Missing {cons("Label")} attribute to label the abstract syntax])
     where

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-07 07:49:54 UTC (rev 21090)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-07-07 11:28:11 UTC (rev 21091)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2.3"
+      version="0.5.2.4"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java	2010-07-07 07:49:54 UTC (rev 21090)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java	2010-07-07 11:28:11 UTC (rev 21091)
@@ -11,6 +11,7 @@
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.jface.dialogs.IInputValidator;
 import org.eclipse.jface.dialogs.InputDialog;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
@@ -39,13 +40,15 @@
 	}
 	
 	@Override
-	public void scheduleExecute(EditorState editor, IStrategoAstNode node, IFile errorReportFile,
+	public Job scheduleExecute(EditorState editor, IStrategoAstNode node, IFile errorReportFile,
 			boolean isRebuild) {
 		
 		String builderRule = inputBuilderRule(editor);
 		if (builderRule != null) {
 			setBuilderRule(builderRule);
-			super.scheduleExecute(editor, node, errorReportFile, isRebuild);
+			return super.scheduleExecute(editor, node, errorReportFile, isRebuild);
+		} else {
+			return null;
 		}
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java	2010-07-07 07:49:54 UTC (rev 21090)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java	2010-07-07 11:28:11 UTC (rev 21091)
@@ -1,6 +1,7 @@
 package org.strategoxt.imp.runtime.services;
 
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.runtime.jobs.Job;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
@@ -11,5 +12,5 @@
 
 	String getCaption();
 	
-	void scheduleExecute(EditorState editor, IStrategoAstNode ast, IFile errorReportFile, boolean isRebuild);
+	Job scheduleExecute(EditorState editor, IStrategoAstNode ast, IFile errorReportFile, boolean isRebuild);
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-07-07 07:49:54 UTC (rev 21090)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-07-07 11:28:11 UTC (rev 21091)
@@ -114,7 +114,7 @@
 		this.builderRule = builderRule;
 	}
 	
-	public void scheduleExecute(final EditorState editor, IStrategoAstNode node,
+	public Job scheduleExecute(final EditorState editor, IStrategoAstNode node,
 			final IFile errorReportFile, final boolean isRebuild) {
 
 		String displayCaption = caption.endsWith("...")
@@ -123,8 +123,9 @@
 		
 		Job lastJob = activeJobs.get(caption);
 		if (lastJob != null && lastJob.getState() != Job.NONE) {
-			openError(editor, "Already running: " + displayCaption);
-			return;
+			if (!isRebuild)
+				openError(editor, "Already running: " + displayCaption);
+			return null;
 		}
 		
 		if (node == null) {
@@ -142,8 +143,10 @@
 				return monitor.isCanceled() ? Status.CANCEL_STATUS : Status.OK_STATUS;
 			}
 		};
+		job.setUser(true);
 		job.schedule();
 		activeJobs.put(caption, job);
+		return job;
 	}
 	
 	private void execute(EditorState editor, IStrategoAstNode node, IFile errorReportFile, boolean isRebuild) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2010-07-07 07:49:54 UTC (rev 21090)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2010-07-07 11:28:11 UTC (rev 21091)
@@ -4,6 +4,7 @@
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
@@ -126,16 +127,20 @@
 			    throw new RuntimeException("No builder exists with this name: " + this.builder);
 			
 			IStrategoAstNode newSelection = findNewSelection(editor);
+			Job job;
 			if (newSelection != null) {
-				builder.scheduleExecute(editor, selection = newSelection, targetFile, true);
+				job = builder.scheduleExecute(editor, selection = newSelection, targetFile, true);
 			} else {
-				builder.scheduleExecute(editor, editor.getParseController().getCurrentAst(), targetFile, true);
+				job = builder.scheduleExecute(editor, editor.getParseController().getCurrentAst(), targetFile, true);
 			}
+			job.join(); // wait to get new time stamp
 
 		} catch (BadDescriptorException e) {
 			Environment.logException("Could not update derived editor for " + editor.getResource(), e);
 		} catch (RuntimeException e) {
 			Environment.logException("Could not update derived editor for " + editor.getResource(), e);
+		} catch (InterruptedException e) {
+			Environment.logException("Could not update derived editor for " + editor.getResource(), e);
 		} finally {
 			if (targetFile.exists()) lastChanged = targetFile.getLocalTimeStamp();
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-07 07:49:54 UTC (rev 21090)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-07-07 11:28:11 UTC (rev 21091)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.3.jar" id="org.strategoxt.imp" version="0.5.2.3">
+   <feature url="features/org.strategoxt.imp_0.5.2.4.jar" id="org.strategoxt.imp" version="0.5.2.4">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">


From L.C.L.Kats at tudelft.nl  Wed Jul  7 14:16:38 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Jul 2010 12:16:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21092 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans
Message-ID: <201007071216.o67CGcwO023406@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-07 12:16:38 +0000 (Wed, 07 Jul 2010)
New Revision: 21092

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21092&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str

Log:
Fixed missing missing constructor warning

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2010-07-07 11:28:11 UTC (rev 21091)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2010-07-07 12:16:38 UTC (rev 21092)
@@ -61,12 +61,12 @@
   context-free-syntax-warning:
     prod(p, s, a*) -> (target, $[Missing {cons("Label")} attribute to label the abstract syntax])
     where
-      not(<collect(?sort(_))> p => [_])
-    ; if !a* => attrs(a'*) then
-        not(<one(term(default(appl(unquoted("cons"), [id]))))> a'*)
-      ; not(<one(bracket() + reject())> a'*)
-      ; not(!s; (sort("Keyword") + sort("\"Keyword\""))) 
-      ; target := a*
+      not(<occurrences(?sort(_))> p => 1);
+      if !a* => attrs(a'*) then
+        not(<one(term(default(appl(unquoted("cons"), [id]))))> a'*);
+        not(<one(bracket() + reject())> a'*);
+        not(!s; (sort("Keyword") + sort("\"Keyword\""))); 
+        target := a*
       else
         target := s
       end


From L.C.L.Kats at tudelft.nl  Wed Jul  7 15:06:45 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Jul 2010 13:06:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21093 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans
Message-ID: <201007071306.o67D6jQ4024182@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-07 13:06:45 +0000 (Wed, 07 Jul 2010)
New Revision: 21093

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21093&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str

Log:
Report multiply occurring SDF errors

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2010-07-07 12:16:38 UTC (rev 21092)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2010-07-07 13:06:45 UTC (rev 21093)
@@ -16,12 +16,12 @@
       editor-init;
       analyze-ast;
       // We only collect-om since we don't want inner warning dupes
-      error*   := <collect(?context-free-syntax(<collect-om(context-free-syntax-error)>))> ast;
-      warning* := <collect(?context-free-syntax(<collect-om(context-free-syntax-warning)>))> ast;
+      error*   := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-error)>), conc)> ast;
+      warning* := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-warning)>), conc)> ast;
       if <file-exists> $[[project-path]/.disable-global-analysis] then
         serror* := []
       else
-        serror* := <collect-om(context-free-syntax-sort-error)> ast
+        serror* := <collect-om(context-free-syntax-sort-error, conc)> ast
       end;
       if IsImportFailed then
         error'*   := error*;


From L.C.L.Kats at tudelft.nl  Thu Jul  8 12:25:52 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 08 Jul 2010 10:25:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 21094 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt/lang/terms
Message-ID: <201007081025.o68APqOM007918@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-07-08 10:25:51 +0000 (Thu, 08 Jul 2010)
New Revision: 21094

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=21094&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java

Log:
Removed unused support for checking if non-nullary constructors exist with hasConstructor() -- would just allocate needless WeakReferences

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	2010-07-07 13:06:45 UTC (rev 21093)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	2010-07-08 10:25:51 UTC (rev 21094)
@@ -67,7 +67,9 @@
             		return false;
             	}
         	} else {
-        		return asyncCtorCache.get(new StrategoConstructor(name, arity)) != null;
+        		// UNDONE: requires zeroary constructors to be registered in the string pool 
+        		// return asyncCtorCache.get(new StrategoConstructor(name, arity)) != null;
+        		throw new UnsupportedOperationException();
         	}
         }
     }
@@ -125,8 +127,6 @@
 	        StrategoConstructor cached = asyncCtorCache.get(result);
 	        if (cached == null) {
 	            asyncCtorCache.put(result, result);
-	            if (arity == 0)
-	            	makeString(name); // put in string pool
 	        } else {
 	            result = cached;
 	        }
@@ -244,7 +244,7 @@
 		    	return new StrategoList(null, null, annotations, MY_STORAGE_TYPE);
 			} else if (term.getTermType() == STRING) {
 				String value = ((IStrategoString) term).stringValue();
-				if (annotations.isEmpty()) {
+				if (annotations == EMPTY_LIST || annotations.isEmpty()) {
 					return makeString(value);
 				} else {
 					return new StrategoString(value, annotations, MY_STORAGE_TYPE);


From L.C.L.Kats at tudelft.nl  Fri Jul  9 12:51:47 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 09 Jul 2010 10:51:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21095 - in
	strc-java/trunk/java/runtime/org/strategoxt: . lang
Message-ID: <201007091051.o69AplEW026789@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Jul  9 10:51:46 2010
New Revision: 21095
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21095&sc=1

Log:
Added some ZipFile-related close() calls after reading about Java bug #6735255

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Thu Jul  8 10:25:51 2010	(r21094)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Fri Jul  9 10:51:46 2010	(r21095)
@@ -243,36 +243,39 @@
 		URL protocolfulUrl = new URL("jar", "", jar + "!/");
 		JarURLConnection connection = (JarURLConnection) protocolfulUrl.openConnection();
 		connection.setUseCaches(false);
-		JarFile jarFile = connection.getJarFile();
-		Enumeration<JarEntry> jarEntries = jarFile.entries();		
 		boolean foundRegisterer = false;
-		
-		while (jarEntries.hasMoreElements()) {
-			String entry = jarEntries.nextElement().getName();
-			if (entry.endsWith("/InteropRegisterer.class") || entry.endsWith("$InteropRegisterer.class") || entry.equals("InteropRegisterer.class")) {
-				final int POSTFIX = ".class".length();
-				String className = entry.substring(0, entry.length() - POSTFIX);
-				className = className.replace('/', '.');
-				Class<?> registerClass;
-				try {
-					registerClass = classLoader.loadClass(className);
-					Object registerObject = registerClass.newInstance();
-					if (registerObject instanceof InteropRegisterer) {
-						((InteropRegisterer) registerObject).registerLazy(getContext(), getCompiledContext(), classLoader);
-						foundRegisterer = true;
-					} else {
-						throw new IncompatibleJarException(jar, new ClassCastException("Unknown type for InteropRegisterer"));
+		JarFile jarFile = connection.getJarFile();
+		try {
+			Enumeration<JarEntry> jarEntries = jarFile.entries();		
+			
+			while (jarEntries.hasMoreElements()) {
+				String entry = jarEntries.nextElement().getName();
+				if (entry.endsWith("/InteropRegisterer.class") || entry.endsWith("$InteropRegisterer.class") || entry.equals("InteropRegisterer.class")) {
+					final int POSTFIX = ".class".length();
+					String className = entry.substring(0, entry.length() - POSTFIX);
+					className = className.replace('/', '.');
+					Class<?> registerClass;
+					try {
+						registerClass = classLoader.loadClass(className);
+						Object registerObject = registerClass.newInstance();
+						if (registerObject instanceof InteropRegisterer) {
+							((InteropRegisterer) registerObject).registerLazy(getContext(), getCompiledContext(), classLoader);
+							foundRegisterer = true;
+						} else {
+							throw new IncompatibleJarException(jar, new ClassCastException("Unknown type for InteropRegisterer"));
+						}
+					} catch (InstantiationException e) {
+						throw new IncompatibleJarException(jar, e);
+					} catch (IllegalAccessException e) {
+						throw new IncompatibleJarException(jar, e);
+					} catch (ClassNotFoundException e) {
+						throw new RuntimeException("Could not load listed class", e);
 					}
-				} catch (InstantiationException e) {
-					throw new IncompatibleJarException(jar, e);
-				} catch (IllegalAccessException e) {
-					throw new IncompatibleJarException(jar, e);
-				} catch (ClassNotFoundException e) {
-					throw new RuntimeException("Could not load listed class", e);
 				}
 			}
+		} finally {
+			jarFile.close();
 		}
-		
 		if (!foundRegisterer)
 			throw new IncompatibleJarException(jar, "No STRJ InteropRegisterer classes found");
 	}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	Thu Jul  8 10:25:51 2010	(r21094)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	Fri Jul  9 10:51:46 2010	(r21095)
@@ -29,6 +29,8 @@
 	
 	private ATerm aterm;
 	
+	private ZipFile lastZipFile;
+	
 	public ImportTerm(ITermFactory factory, Class<?> container, String path, String name) {
 		assert path.endsWith("/");
 		this.factory = factory;
@@ -70,6 +72,9 @@
 			try {
 				if (stream != null)
 					stream.close();
+				if (lastZipFile != null)
+					lastZipFile.close();
+				lastZipFile = null;
 			} catch (IOException e) {
 				e.printStackTrace();
 			}
@@ -77,14 +82,22 @@
 	}
 	
 	private ATerm initATerm(ATermFactory factory) {
+		InputStream stream = null;
 		try {
-			return factory.readFromFile(openStream());
+			stream = openStream();
+			return factory.readFromFile(stream);
 		} catch (java.io.IOException e) {
 			throw new StrategoException(container.getSimpleName()
 					+ ": Could not read imported term file " + name, e);
 		} catch (RuntimeException e) {
 			throw new StrategoException(container.getSimpleName()
 					+ ": Could not read imported term file " + name, e);
+		} finally {
+			try {
+				if (stream != null) stream.close();
+			} catch (IOException e) {
+				e.printStackTrace(); // won't happen
+			}
 		}
 	}
 
@@ -102,14 +115,14 @@
 
 	/**
 	 * Attempt to open resources in JARs using the Java ZipFile API,
-	 * hopefully avoiding JVM classloader failures.
+	 * hopefully avoiding JVM classloader crashes.
 	 */
 	private InputStream tryOpenStreamFromJar() {
 		try {
 			URL location = container.getProtectionDomain().getCodeSource().getLocation();
 			if (location.getFile().endsWith(".jar")) {
 				File jarFile = new File(location.toURI());
-				ZipFile jar = new ZipFile(jarFile);
+				ZipFile jar = lastZipFile = new ZipFile(jarFile);
 				ZipEntry entry = jar.getEntry(removePrecedingSlash(path) + name);
 				if (entry == null) entry = jar.getEntry(name);
 				if (entry == null) return null;

From L.C.L.Kats at tudelft.nl  Fri Jul  9 15:15:47 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 09 Jul 2010 13:15:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21096 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	strc-java/trunk/java
Message-ID: <201007091315.o69DFleL028673@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Jul  9 13:15:47 2010
New Revision: 21096
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21096&sc=1

Log:
Added an additional, strongly referenced set of strings used by SSL_newname to ensure counters are not garbage collected while a particular Stratego program is still running. Doesn't seem to affect performance, but this should help manage the expectation that some (WebDSL) programmers have that the counters always just keep on counting. It might also prevent needless loops when the counter is garbage collected but many strings with the prefix still exist.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_newname.java
   strc-java/trunk/java/spoofax-libs.jar

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_newname.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_newname.java	Fri Jul  9 10:51:46 2010	(r21095)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_newname.java	Fri Jul  9 13:15:47 2010	(r21096)
@@ -2,6 +2,7 @@
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
 
+import java.util.HashSet;
 import java.util.WeakHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -16,10 +17,15 @@
 
 public class SSL_newname extends AbstractPrimitive {
 	
-    // static, like TermFactory.asyncStringPool
-    private static WeakHashMap<String, AtomicInteger> asyncCounters =
+    // static weak set, like TermFactory.asyncStringPool
+    // weak to avoid accumulating entries with long-lived/interactive sessions
+    private static final WeakHashMap<String, AtomicInteger> asyncCounters =
         new WeakHashMap<String, AtomicInteger>();
 	
+    // non-static strong-reference set
+    // to keep counters alive as long as this Stratego instance exists
+    private final HashSet<String> asyncMyCounters = new HashSet<String>();
+    
 	SSL_newname () {
 		super("SSL_newname", 0, 1);
 	}
@@ -46,6 +52,7 @@
 	    
 	    synchronized (asyncCounters) {
 	        counter = asyncCounters.get(prefix);
+	        asyncMyCounters.add(prefix);
 	        if (counter == null) {
 	            counter = new AtomicInteger();
 	            asyncCounters.put(prefix, counter);
@@ -54,8 +61,8 @@
 	    
         String result;
         do {
-            int counterValue = getNextValue(counter);
-        	result = prefix + counterValue;
+            int counterValue = getNextValue(prefix, counter);
+            result = prefix + counterValue;
         } while (factory.hasConstructor(result, 0));
 
         env.setCurrent(factory.makeString(result));
@@ -63,12 +70,15 @@
 		return true;
 	}
 
-    private int getNextValue(AtomicInteger counter) {
+    private int getNextValue(String prefix, AtomicInteger counter) {
         int result;
         for (;;) {
             result = counter.getAndIncrement();
-            if (result > 0) break;
-            else counter.compareAndSet(result, 0);
+            if (result >= 0) {
+                break;
+            } else if (counter.compareAndSet(result, 0)) {
+                return 0;
+            }
         }
         return result;
     }

Modified: strc-java/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From R.B.Vermaas at tudelft.nl  Tue Jul 13 08:25:25 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 13 Jul 2010 06:25:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21097 - hydra/webdsl
Message-ID: <201007130625.o6D6PPvc008283@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Jul 13 06:25:23 2010
New Revision: 21097
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21097&sc=1

Log:
add danny to maintainers for webdsl tests

Modified:
   hydra/webdsl/tests.nix

Modified: hydra/webdsl/tests.nix
==============================================================================
--- hydra/webdsl/tests.nix	Fri Jul  9 13:15:47 2010	(r21096)
+++ hydra/webdsl/tests.nix	Tue Jul 13 06:25:23 2010	(r21097)
@@ -20,7 +20,7 @@
     export SMTPTLS=false
   '';
  
-  defaultMaintainters = [ "rob.vermaas at gmail.com" ];
+  defaultMaintainters = [ "rob.vermaas at gmail.com" "dgroenewegen at gmail.com" ];
 
   build = appname : src : maintainers :
     pkgs.stdenv.mkDerivation rec {

From m.dejonge at tudelft.nl  Tue Jul 13 12:02:39 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 13 Jul 2010 10:02:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21098 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	services stratego
Message-ID: <201007131002.o6DA2dh5011006@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 13 10:02:37 2010
New Revision: 21098
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21098&sc=1

Log:
- more precise comment heuristics
- indentation and whitespace

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Tue Jul 13 06:25:23 2010	(r21097)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Tue Jul 13 10:02:37 2010	(r21098)
@@ -435,7 +435,7 @@
 		return result.toString();
 	}
 	
-	private static int getTabWidth() {
+	public static int getTabWidth() {
 		IPreferenceStore preferences;
 		if(lastEditor!=null){
 			preferences = lastEditor.getThePreferenceStore();

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java	Tue Jul 13 10:02:37 2010	(r21098)
@@ -0,0 +1,309 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import java.util.ArrayList;
+
+import lpg.runtime.ILexStream;
+import lpg.runtime.IPrsStream;
+import lpg.runtime.IToken;
+
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.parser.tokens.SGLRToken;
+import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
+import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
+import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
+
+public class DocumentaryStructure {
+	
+	private String seperatingWhitespace;
+	private ArrayList<IToken> commentsBefore;
+	private ArrayList<IToken> commentsAfter;
+	private String indentNode;
+	
+	public String getIndentNode() {
+		return indentNode;
+	}
+
+	private int indentValueNode;
+
+	
+	public String getSeperatingWhitespace() {
+		return seperatingWhitespace;
+	}
+	
+	public DocumentaryStructure(IWrappedAstNode node) {
+		initialize();
+		analysize(node.getNode());
+	}
+	
+	private void initialize() {
+		commentsAfter=new ArrayList<IToken>();
+		commentsBefore=new ArrayList<IToken>();
+		indentNode="";
+		indentValueNode=0;
+		seperatingWhitespace=" ";
+	}
+
+	private IToken getPrecedingNonLOToken(IToken startToken){
+		IPrsStream tokenStream=startToken.getIPrsStream();
+		int loopIndex=startToken.getTokenIndex()-1;
+		while (loopIndex>=0) {
+			IToken precedingToken = tokenStream.getTokenAt(loopIndex);
+			if (!isLayoutToken(precedingToken)) {
+				return precedingToken;
+			}
+			loopIndex--;
+		}
+		return null;
+	}
+	
+	private void analysize(IStrategoAstNode node){
+		setCommentsBefore(node);
+		IToken startToken = node.getLeftIToken();
+		IPrsStream tokenStream=startToken.getIPrsStream();
+		indentNode=getIndentation(getLineText(tokenStream, startToken.getLine()));
+		indentValueNode=getIndentValue(getLineText(tokenStream, startToken.getLine()));
+		setSeperatingWhitespace(startToken);
+		System.out.println("["+seperatingWhitespace+"]");
+		System.out.println("["+indentNode+"]");
+		System.out.println("["+indentValueNode+"]");
+		setCommentsAfter(node);
+	}
+
+	private void setCommentsAfter(IStrategoAstNode node) {
+		IToken startToken = node.getRightIToken();
+		IPrsStream tokenStream=startToken.getIPrsStream();
+		ArrayList<IToken> followingComments=new ArrayList<IToken>();
+		IToken nextToken=getNextToken(tokenStream, startToken);
+		while(!isEOFToken(nextToken) && isLayoutToken(nextToken) && nextToken.getLine()==startToken.getLine()){
+			if (!SGLRToken.isWhiteSpace(nextToken))
+				followingComments.add(nextToken); 
+			nextToken=getNextToken(tokenStream, nextToken);
+		}
+		if(isEOFToken(nextToken) || nextToken.getLine() > startToken.getLine() || isLiteralToken(nextToken))
+			commentsAfter=followingComments; //TODO: <node> <literal> <comment> <newline> (typical pattern for seperators)
+		System.out.println(commentsAfter);
+	}
+
+	private IToken getNextToken(IPrsStream tokenStream, IToken nextToken) {
+		if(nextToken.getTokenIndex() >= tokenStream.getSize())
+			return null;
+		return tokenStream.getTokenAt(nextToken.getTokenIndex()+1);
+	}
+
+	private void setCommentsBefore(IStrategoAstNode node) {
+		IToken startToken = node.getLeftIToken();
+		IPrsStream tokenStream=startToken.getIPrsStream();
+
+		//preceding non-layout token
+		IToken precedingNonLayoutToken=getPrecedingNonLOToken(startToken);
+		//System.out.println(precedingNonLayoutToken);
+		
+		//empty lines before
+		int emptyLineOffset = getEmptyLineOffset(startToken, tokenStream, precedingNonLayoutToken);
+		
+		
+		// block backwards pointing comments. Comment points backwards if: 
+		//1. comment starts on the same line as the preceding non layout token 
+		//and 2. not: literal(=preceding-non-lo) - comment - starttoken on the same line
+		int eolOffset=-1;
+		if(emptyLineOffset==-1  && precedingNonLayoutToken.getEndOffset()>0){//no empty lines
+			if(!(precedingNonLayoutToken.getEndLine()==startToken.getLine() && isLiteralToken(precedingNonLayoutToken))){
+				int lineIndex = precedingNonLayoutToken.getEndLine();
+				eolOffset=tokenStream.getLineOffset(lineIndex);
+				//System.out.println(new TextFragment(eolOffset, eolOffset+10).getText());
+			}
+		}
+		
+		//comments-before
+		ArrayList<IToken> precedingComments=new ArrayList<IToken>();
+		int endIndex;
+		if(precedingNonLayoutToken!=null)
+			endIndex=precedingNonLayoutToken.getTokenIndex()+1;
+		else
+			endIndex=0;
+		int loopIndex=startToken.getTokenIndex()-1;
+		IToken precedingToken=tokenStream.getTokenAt(loopIndex);
+		while (loopIndex>=endIndex && precedingToken.getStartOffset()>= Math.max(emptyLineOffset, eolOffset) && isLayoutToken(precedingToken)) {
+			if (!SGLRToken.isWhiteSpace(precedingToken))
+				precedingComments.add(0, precedingToken); 
+			loopIndex--;
+			precedingToken = tokenStream.getTokenAt(loopIndex);
+		}
+		//System.out.println("comm before: ");
+		for (IToken commentTok : precedingComments) {
+			//System.out.println(commentTok.toString());
+		}	
+		//System.out.println();
+		
+		//Comments may attach to sublists rather then single nodes
+		if(!precedingComments.isEmpty()){
+			if(precedingComments.get(0).getLine()!=startToken.getLine()){
+				int lindex=precedingComments.get(0).getLine();
+				String precedingLine = getLineText(tokenStream, lindex-1);
+				//System.out.println(precedingLine);
+				String commentLine=getLineText(tokenStream, lindex);
+				String nodeLine=getLineText(tokenStream, startToken.getLine());
+				//System.out.println(commentLine);
+				String followingLine = getLineText(tokenStream, node.getRightIToken().getEndLine()+1);
+				//System.out.println(followingLine);
+				if(getIndentValue(precedingLine)< getIndentValue(commentLine) && getIndentValue(nodeLine) > getIndentValue(followingLine)){
+					//System.out.println("Comment refers to node");
+					commentsBefore=precedingComments;
+				}
+			}
+			else{
+				//System.out.println("Comment refers to node");
+				commentsBefore=precedingComments;
+			}				
+		}
+	}
+
+	private void setSeperatingWhitespace(IToken startToken) {
+		int endOffsetSepWS;
+		if(commentsBefore.isEmpty())
+			endOffsetSepWS=startToken.getStartOffset();
+		else
+			endOffsetSepWS=commentsBefore.get(0).getStartOffset();
+		int startOffsetSepWS=endOffsetSepWS;
+		ILexStream lexStream=startToken.getILexStream();
+		while (startOffsetSepWS > 0 && (Character.isWhitespace(lexStream.getCharValue(startOffsetSepWS-1)))) {
+			startOffsetSepWS--;
+		}
+		if(endOffsetSepWS-1 > startOffsetSepWS){
+			seperatingWhitespace=lexStream.toString(startOffsetSepWS, endOffsetSepWS-1);
+			seperatingWhitespace=correctWSIndentation(seperatingWhitespace, ""); //removes indentation
+		}
+		else
+			seperatingWhitespace=" ";
+	}
+
+	private String correctWSIndentation(String line, String indent) {
+		int newLineIndex=line.lastIndexOf('\n');
+		if(newLineIndex>=0){
+			return line.substring(0, newLineIndex+1)+indent;
+		}
+		return line;
+	}
+
+	private int getEmptyLineOffset(IToken startToken, IPrsStream tokenStream,
+			IToken precedingNonLayoutToken) {
+		int emptyLineOffset=-1;
+		if(precedingNonLayoutToken!=null){
+			int endLineIndex;
+			endLineIndex=precedingNonLayoutToken.getLine();
+			int startLine=startToken.getLine();
+			for (int i = startLine-1; i > endLineIndex; i--) {
+				int start=tokenStream.getLineOffset(i-1);
+				if(i-1==0)//first line
+					start=0;
+				TextFragment line=new TextFragment(start, tokenStream.getLineOffset(i));
+				//System.out.println(line.getText());
+				boolean isEmptyLine=line.getText(startToken.getILexStream()).trim().equals("");
+				if(isEmptyLine){
+					emptyLineOffset=start;
+					break;
+				}
+			}
+		}
+		else
+			emptyLineOffset=0;
+		//if(emptyLineOffset>=0)
+			//System.out.println(new TextFragment(emptyLineOffset, emptyLineOffset+10).getText());
+		return emptyLineOffset;
+	}
+
+	private String getLineText(IPrsStream tokenStream, int lindex) {
+		if(lindex<=0)
+			return null;
+		int start=tokenStream.getLineOffset(lindex-1)+1;
+		if(lindex-1==0)//first line
+			start=0;
+		int end=tokenStream.getLineOffset(lindex);
+		if(lindex==tokenStream.getLineCount()+1){//lastline
+			end=tokenStream.getILexStream().getStreamLength()-1;
+		}
+		TextFragment line=new TextFragment(start, end);				
+		String lineText=line.getText(tokenStream.getILexStream());
+		return lineText;
+	}
+	
+	private static int getIndentValue(String line) {
+		if(line==null)
+			return -1;
+		int result=0;
+		for (int i = 0; i < line.length(); i++) {
+			char c = line.charAt(i);
+			if (c == ' ') {
+				result++;
+			}
+			else if (c == '\t') {
+				result+=4;//TODO: use editor settings 
+			}
+			else if (c=='\n')
+				return 0;//empty lines have 0 indent
+			if (!Character.isWhitespace(c))
+				return result;
+		}
+		return 0;
+	}
+	
+	private static String getIndentation(String line) {
+		for (int i = 0; i < line.length(); i++) {
+			char c = line.charAt(i);
+			if (c != ' ' && c != '\t') {
+				return line.substring(0, i);
+			}
+		}
+		return "";
+	}
+	
+	private static boolean isLiteralToken(IToken tok) {
+		return TokenKind.valueOf(tok.getKind())==TokenKind.TK_OPERATOR;
+	}
+	
+	private static boolean isEOFToken(IToken tok) {
+		return TokenKind.valueOf(tok.getKind())==TokenKind.TK_EOF;
+	}
+	
+	private static boolean isLayoutToken(IToken tok) {
+		return TokenKind.valueOf(tok.getKind())==TokenKind.TK_LAYOUT;
+	}
+	
+	public class TextFragment{
+		private int start;
+		private int end;
+		
+		public int getStart() {
+			return start;
+		}
+		public void setStart(int start) {
+			this.start = start;
+		}
+		
+		public int getEnd() {
+			return end;
+		}
+		
+		public void setEnd(int end) {
+			this.end = end;
+		}
+		
+		public TextFragment(){
+			//default constructor
+		}
+		
+		public TextFragment(int startOffset, int endOffset){
+			start=startOffset;
+			end=endOffset;
+		}
+		
+		public String getText(ILexStream lexStream) {
+			if(start==end)
+				return "";
+			if(TextPositions.isUnvalidInterval(start, end, lexStream))
+				return null;
+			String textfragment=lexStream.toString(start, end-1);
+			return textfragment;
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Tue Jul 13 06:25:23 2010	(r21097)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Tue Jul 13 10:02:37 2010	(r21098)
@@ -31,14 +31,14 @@
 		add(new SelectedFromToPrimitive());
 		add(new OriginRootPrimitive());
 		add(new OriginOffsetWithLayoutPrimitive());
-		
 		add(new QueueAnalysisPrimitive());
 		add(new QueueStrategyPrimitive());
 		add(new SetMarkersPrimitive());
 		
 		add(new SetTotalWorkUnitsPrimitive());
 		add(new CompleteWorkUnitPrimitive());
-		
+		add(new OriginIndentationPrimitive());
+		add(new OriginSeperatingWhitespacePrimitive());
 	}
 
 	public String getOperatorRegistryName() {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java	Tue Jul 13 10:02:37 2010	(r21098)
@@ -0,0 +1,24 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
+
+/**
+ * @author Maartje de Jonge
+ */
+public class OriginIndentationPrimitive extends AbstractOriginPrimitive {
+
+	public OriginIndentationPrimitive() {
+		super("SSL_EXT_origin_indentation");
+	}
+
+	@Override
+	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
+		DocumentaryStructure loStructure=new DocumentaryStructure(node);
+		ITermFactory factory = env.getFactory();
+		return factory.makeString(loStructure.getIndentNode());
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java	Tue Jul 13 06:25:23 2010	(r21097)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java	Tue Jul 13 10:02:37 2010	(r21098)
@@ -6,7 +6,7 @@
 import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 
 /**
- * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Maartje de Jonge
  */
 public class OriginOffsetWithLayoutPrimitive extends AbstractOriginPrimitive {
 

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java	Tue Jul 13 10:02:37 2010	(r21098)
@@ -0,0 +1,24 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
+
+/**
+ * @author Maartje de Jonge
+ */
+public class OriginSeperatingWhitespacePrimitive extends AbstractOriginPrimitive {
+
+	public OriginSeperatingWhitespacePrimitive() {
+		super("SSL_EXT_origin_seperating_whitespace");
+	}
+
+	@Override
+	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
+		DocumentaryStructure loStructure=new DocumentaryStructure(node);
+		ITermFactory factory = env.getFactory();
+		return factory.makeString(loStructure.getSeperatingWhitespace());
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Tue Jul 13 06:25:23 2010	(r21097)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Tue Jul 13 10:02:37 2010	(r21098)
@@ -24,7 +24,7 @@
 		super(NAME, 0, 2);
 	}
 	
-	@Override //TODO support (l,c,end-l,end-c)[see TextChangePrimitive]
+	@Override 
 	public final boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
 		if (!isTermString(tvars[0]) || !(tvars[1] instanceof StrategoTuple))
 			return false;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Tue Jul 13 06:25:23 2010	(r21097)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Tue Jul 13 10:02:37 2010	(r21098)
@@ -42,21 +42,21 @@
 			return false;
 		if(!(tvars[0] instanceof IWrappedAstNode || islocationTuple(tvars[0]) || isEmptyString(tvars[0])))
 			return false;
-		if (isTermString(tvars[0])){
+		if (isTermString(tvars[0])){//d: sourcetext
 			position_start = 0;
 			position_end= lexStream.getStreamLength()-1;
 		}
-		else if(tvars[0] instanceof IWrappedAstNode){
+		else if(tvars[0] instanceof IWrappedAstNode){ //a: node-fragment
 			position_start=TextPositions.getStartPosNode(((IWrappedAstNode)tvars[0]).getNode());
 			position_end=TextPositions.getEndPosNode(((IWrappedAstNode)tvars[0]).getNode());
 		}
 		else{
 			StrategoTuple tuple=(StrategoTuple)tvars[0];
-			if(tuple.size()==2){
+			if(tuple.size()==2){//b. (offset, end-offset)
 				position_start=((StrategoInt)tuple.get(0)).intValue();
 				position_end=((StrategoInt)tuple.get(1)).intValue()-1; //exclusive end pos
 			}
-			if(tuple.size()==4){
+			if(tuple.size()==4){//c. (l,c,end-l,end-c)
 				int line_start=((StrategoInt)tuple.get(0)).intValue()-1;
 				int col_start=((StrategoInt)tuple.get(1)).intValue();
 				int line_end=((StrategoInt)tuple.get(2)).intValue()-1;
@@ -68,24 +68,27 @@
 		if(TextPositions.isUnvalidInterval(position_start, position_end, lexStream))
 			return false;
 		String text = ((IStrategoString)tvars[1]).stringValue();
-		return applyTextChange(editor, position_start, position_end, text);
-	}
-
-	private boolean isEmptyString(IStrategoTerm tvar) {
-		return (isTermString(tvar) && ((IStrategoString)tvar).stringValue().equals(""));
-	}
-
-	private boolean applyTextChange(EditorState editor, int position_start, int position_end,
-			String text) {
 		try {
-			IDocument doc = editor.getDocument();
-			doc.replace(position_start, position_end-position_start, text);
+			applyTextChange(editor, position_start, position_end, text);
+			IStrategoString result = env.getFactory().makeString(editor.getDocument().get());
+			env.setCurrent(result);
+			return true;
 		} 
 		catch (BadLocationException e) {
+			// TODO Auto-generated catch block
 			e.printStackTrace();
 			return false;
 		}
-		return true;
+	}
+
+	private boolean isEmptyString(IStrategoTerm tvar) {
+		return (isTermString(tvar) && ((IStrategoString)tvar).stringValue().equals(""));
+	}
+
+	private void applyTextChange(EditorState editor, int position_start, int position_end,
+			String text) throws BadLocationException {
+		IDocument doc = editor.getDocument();
+		doc.replace(position_start, position_end+1-position_start, text);		
 	}
 
 	private boolean islocationTuple(IStrategoTerm term) {

From m.dejonge at tudelft.nl  Tue Jul 13 17:10:31 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 13 Jul 2010 15:10:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21099 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201007131510.o6DFAVVG014985@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 13 15:10:31 2010
New Revision: 21099
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21099&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Tue Jul 13 10:02:37 2010	(r21098)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Tue Jul 13 15:10:31 2010	(r21099)
@@ -8,7 +8,7 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 import org.strategoxt.lang.terms.StrategoInt;
 import org.strategoxt.lang.terms.StrategoTuple;
 
@@ -30,12 +30,9 @@
 			return false;
 		StrategoTuple position=(StrategoTuple)tvars[1];
 		String textfragment=null;
-		if (position.getSubtermCount()==2) {
+		if (position.getSubtermCount()==3) {
 			textfragment = textFromCharPosition(position);
 		}
-		else if (position.getSubtermCount()==4) {
-			textfragment = textFromLocation(position);
-		}	
 		if (textfragment == null) return false;
 		IStrategoString result = env.getFactory().makeString(textfragment);
 		env.setCurrent(result);
@@ -43,30 +40,22 @@
 	}
 
 	private String textFromCharPosition(StrategoTuple position) {
-		if(!(position.get(0) instanceof StrategoInt && position.get(1) instanceof StrategoInt))
+		if(checkTuple(position))
 			return null;
 		int pos_start=((StrategoInt)position.get(0)).intValue();
 		int pos_end=((StrategoInt)position.get(1)).intValue()-1;//exclusive
-		ILexStream lexStream= EditorState.getActiveEditor().getParseController().getCurrentAst().getLeftIToken().getILexStream();
+		ILexStream lexStream = ((IWrappedAstNode)position.get(2)).getNode().getLeftIToken().getILexStream();
+		//ILexStream lexStream= EditorState.getActiveEditor().getParseController().getCurrentAst().getLeftIToken().getILexStream();
 		if(TextPositions.isUnvalidInterval(pos_start, pos_end, lexStream))
 			return null;
 		String textfragment=lexStream.toString(pos_start, pos_end);
 		return textfragment;
 	}
-	
-	private String textFromLocation(StrategoTuple position) {
-		if(!(position.get(0) instanceof StrategoInt && position.get(1) instanceof StrategoInt && position.get(2) instanceof StrategoInt && position.get(3) instanceof StrategoInt))
-			return null;
-		int line_start=((StrategoInt)position.get(0)).intValue();
-		int col_start=((StrategoInt)position.get(1)).intValue();
-		int line_end=((StrategoInt)position.get(2)).intValue();
-		int col_end=((StrategoInt)position.get(3)).intValue();
-		ILexStream lexStream= EditorState.getActiveEditor().getParseController().getCurrentAst().getLeftIToken().getILexStream();
-		int pos_start=lexStream.getLineOffset(line_start-1)+col_start; //FIXME: bad location
-		int pos_end=lexStream.getLineOffset(line_end-1)+col_end;
-		if(TextPositions.isUnvalidInterval(pos_start, pos_end, lexStream))
-			return null;
-		String textfragment=lexStream.toString(pos_start, pos_end);
-		return textfragment;
+
+	private boolean checkTuple(StrategoTuple position) {
+		return !(
+				position.get(0) instanceof StrategoInt && 
+				position.get(1) instanceof StrategoInt &&
+				position.get(2) instanceof IWrappedAstNode);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Tue Jul 13 10:02:37 2010	(r21098)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Tue Jul 13 15:10:31 2010	(r21099)
@@ -1,27 +1,29 @@
 package org.strategoxt.imp.runtime.stratego;
 
-import static org.spoofax.interpreter.core.Tools.isTermString;
 import lpg.runtime.ILexStream;
 
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.IDocument;
+import org.eclipse.ui.progress.UIJob;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 import org.strategoxt.lang.terms.StrategoInt;
 import org.strategoxt.lang.terms.StrategoTuple;
 
 /**
  * Applies a text-change in the current document
- * Arguments:
- * a. (AstNode, "textfragment") of 
- * b. ((offset, end-offset), "textfragment") of
- * c. ((l, c, end-l, end-c), "textfragment")
- * d. ("textfragment")
+ * Arguments: (AstNode, (offset, end-offset), "textfragment") 
+ * (ASTnode, -1,-1, textfragment) => replace complete file
  * @author Maartje de Jonge
  */
 public class TextChangePrimitive extends AbstractPrimitive {
@@ -29,48 +31,32 @@
 	private static final String NAME = "SSL_EXT_text_change";
 
 	public TextChangePrimitive() {
-		super(NAME, 0, 2);
+		super(NAME, 0, 3);
 	}
 	
 	@Override
 	public final boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		EditorState editor = EditorState.getActiveEditor();
-		ILexStream lexStream= editor.getParseController().getCurrentAst().getLeftIToken().getILexStream();
 		int position_start = -1;
 		int position_end = -1;
-		if (tvars.length!=2 || !isTermString(tvars[1]))
+		if (tvars.length!=3)//!isTermString(tvars[1])
 			return false;
-		if(!(tvars[0] instanceof IWrappedAstNode || islocationTuple(tvars[0]) || isEmptyString(tvars[0])))
+		if(!(tvars[0] instanceof IWrappedAstNode && islocationTuple(tvars[1]) && tvars[2] instanceof IStrategoString))
 			return false;
-		if (isTermString(tvars[0])){//d: sourcetext
-			position_start = 0;
-			position_end= lexStream.getStreamLength()-1;
-		}
-		else if(tvars[0] instanceof IWrappedAstNode){ //a: node-fragment
-			position_start=TextPositions.getStartPosNode(((IWrappedAstNode)tvars[0]).getNode());
-			position_end=TextPositions.getEndPosNode(((IWrappedAstNode)tvars[0]).getNode());
-		}
-		else{
-			StrategoTuple tuple=(StrategoTuple)tvars[0];
-			if(tuple.size()==2){//b. (offset, end-offset)
-				position_start=((StrategoInt)tuple.get(0)).intValue();
-				position_end=((StrategoInt)tuple.get(1)).intValue()-1; //exclusive end pos
-			}
-			if(tuple.size()==4){//c. (l,c,end-l,end-c)
-				int line_start=((StrategoInt)tuple.get(0)).intValue()-1;
-				int col_start=((StrategoInt)tuple.get(1)).intValue();
-				int line_end=((StrategoInt)tuple.get(2)).intValue()-1;
-				int col_end=((StrategoInt)tuple.get(3)).intValue();
-				position_start=lexStream.getLineOffset(line_start)+col_start; //FIXME deal with bad location
-				position_end=lexStream.getLineOffset(line_end)+col_end+1;
-			}
+		EditorState editor = ((IWrappedAstNode)tvars[0]).getNode().getParseController().getEditor();
+		ILexStream lexStream = ((IWrappedAstNode)tvars[0]).getNode().getLeftIToken().getILexStream();
+		StrategoTuple tuple=(StrategoTuple)tvars[1];
+		position_start=((StrategoInt)tuple.get(0)).intValue();
+		position_end=((StrategoInt)tuple.get(1)).intValue()-1; //exclusive end pos
+		if(position_start==-1 && position_end==-1){
+			position_start=0;
+			position_end=lexStream.getStreamLength()-1;
 		}
 		if(TextPositions.isUnvalidInterval(position_start, position_end, lexStream))
 			return false;
-		String text = ((IStrategoString)tvars[1]).stringValue();
+		String text = ((IStrategoString)tvars[2]).stringValue();
 		try {
-			applyTextChange(editor, position_start, position_end, text);
-			IStrategoString result = env.getFactory().makeString(editor.getDocument().get());
+			String newContent = applyTextChange(editor, position_start, position_end, text);
+			IStrategoString result = env.getFactory().makeString(newContent);
 			env.setCurrent(result);
 			return true;
 		} 
@@ -80,22 +66,34 @@
 			return false;
 		}
 	}
-
-	private boolean isEmptyString(IStrategoTerm tvar) {
-		return (isTermString(tvar) && ((IStrategoString)tvar).stringValue().equals(""));
-	}
-
-	private void applyTextChange(EditorState editor, int position_start, int position_end,
-			String text) throws BadLocationException {
-		IDocument doc = editor.getDocument();
-		doc.replace(position_start, position_end+1-position_start, text);		
+	
+	private String applyTextChange(EditorState editor, final int position_start, final int position_end,
+			final String text) throws BadLocationException {
+		final IDocument doc = editor.getDocument();
+		Job job = new UIJob("name") {
+			
+			@Override
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				try {
+					doc.replace(position_start, position_end+1-position_start, text);
+				} catch (BadLocationException e) {
+					// TODO Auto-generated catch block
+					Environment.logException("Oei@!", e);
+				}
+				return Status.OK_STATUS;
+			}
+		};
+		job.setSystem(true);
+		job.schedule();
+		String newContent = doc.get();
+		return newContent;
 	}
 
 	private boolean islocationTuple(IStrategoTerm term) {
 		if (!(term instanceof StrategoTuple))
 			return false;
 		StrategoTuple tuple=(StrategoTuple)term;
-		if(tuple.size()!=2 && tuple.size()!=4)
+		if(tuple.size()!=2)
 			return false;
 		for (int i = 0; i < tuple.size(); i++) {
 			if(!(tuple.get(i) instanceof StrategoInt))

From L.C.L.Kats at tudelft.nl  Wed Jul 14 09:58:58 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 14 Jul 2010 07:58:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21100 -
	strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode
Message-ID: <201007140758.o6E7wwjD027772@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Jul 14 07:58:57 2010
New Revision: 21100
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21100&sc=1

Log:
StrategoXT/827, Spoofax/160: indent-padding in imploder is slow on Java

Modified:
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str

Modified: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str
==============================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str	Tue Jul 13 15:10:31 2010	(r21099)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str	Wed Jul 14 07:58:57 2010	(r21100)
@@ -37,11 +37,10 @@
           t' := <id> // keep constructor (add padding later)
         else
           where(
-              asfix'       := <strip-tree-before(?_{PaddingId(_)})> asfix
-            ; with(padding := <asfix-yield-appl-chars> asfix')
+            padding := <collect-tree-chars-before(?_{PaddingId(_)})> asfix
             //; <debug(!"  padding1: ")> <write-to-string> <implode-string> <asfix-yield-appl-chars> asfix
             //; <debug(!"  padding2: ")> <write-to-string> <implode-string> padding
-            )
+          )
         ; if not(<one('\n')> padding) then
             t' := <id> // keep constructor (add padding later)
           else
@@ -71,50 +70,49 @@
     AddPadding(s){a*} -> s'
     with
       if !a* => [PaddingContext(context)] then
-        asfix'   := <strip-tree-before(?context)> asfix
-      ; <with(padding := <asfix-yield-appl-chars; chars-after-newlines>)> asfix'
-      ; padding' := <chars-to-whitespace> padding
-      ; s'       := <conc; implode-string> (padding', <explode-string> s)
+        asfix'   := <collect-tree-chars-before(?context)> asfix
+      ; padding  := <chars-before-newlines; chars-to-whitespace> asfix'
+      ; s'       := <conc; implode-string> (padding, <explode-string> s)
       else
         s' := s
       end
   
   /**
-   * Strips the tail of a parse tree starting from the point where <s> succeeds.
+   * Collects a reverse list of all characters in a parse tree,
+   * before a certain subtree is encountered.
    */
-  strip-tree-before(s):
-    tree -> tree'
+  collect-tree-chars-before(stop):
+    t -> c*
     with
-      try(?parse-tree(<id>, _));
-      tree' := <strip-appl-before(s)>
+      try(?parse-tree(<id>, _))
+    ; c* := <collect-tree-chars-before-acc(stop | [])>
+      
+  collect-tree-chars-before-acc(stop|c*):
+    parse-tree(appl, _) -> <collect-tree-chars-before-acc(stop|c*)> appl
   
-  strip-appl-before(s) =
-    if ?appl @ appl(prod @ prod(_, rhs, _), list) then
-      if not(!rhs => lit(_) + !rhs => lex(_)) then
-	      list' := <strip-appl-list-before(s)> list;
-	      if !list' => list then
-	        !appl
-	      else
-	        !appl(prod, list')
-	      end
-	    <+
-	      !list => []; !appl
-	  end
-	else
-	  // Shouldn't happen, or maybe with kernel syntax
-	  all(strip-appl-before(s))
-	end
+  collect-tree-chars-before-acc(stop|c*):
+    appl(_, ts) -> <collect-tree-chars-before-acc(stop|c*)> ts
+
+  collect-tree-chars-before-acc(stop|c*):
+    [] -> c*
+
+  collect-tree-chars-before-acc(stop|c*):
+    [x | xs] -> result
+    with
+      if <is-int> x then
+        c'*    := [x | c*]
+      ; result := <collect-tree-chars-before-acc(stop|c'*)> xs
+      else
+        if <stop> x then
+          result := c*
+        else
+          x'     := <collect-tree-chars-before-acc(stop|c*)> x
+        ; result := <collect-tree-chars-before-acc(stop|x')> xs
+        end
+      end
   
-  strip-appl-list-before(s) :
-    [i | i*] -> stripped*
-    where
-      <s> i
-    ; stripped* := []
-    <+
-      <one(oncetd(s))> i
-    ; stripped* := [<strip-appl-before(s)> i]
-    <+
-      stripped* := [i | <strip-appl-list-before(s)> i*]
+  collect-tree-chars-before-acc(stop|c*):
+    amb([x | _]) -> <collect-tree-chars-before-acc(stop|c*)> x
   
   chars-to-whitespace :
     [c | c*] -> c'*
@@ -127,21 +125,15 @@
     
   chars-to-whitespace :
     [] -> []
+
+  chars-before-newlines :
+    [] -> []
   
-  chars-after-newlines :
-    input @ [c | c*] -> c''*
+  chars-before-newlines :
+    [c | cs] -> c*
     where
       if !c => '\n' + !c => '\r' then
-        c''* := <chars-after-newlines> c*
+        c* := []
       else
-        c'* := <chars-after-newlines> c*
-      ; if !c'* => c* then
-          c''* := input
-        else
-          c''* := c'*
-        end
+        c* := [c | <chars-before-newlines> cs]
       end
-  
-  chars-after-newlines :
-    [] -> []
-

From L.C.L.Kats at tudelft.nl  Wed Jul 14 13:38:46 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 14 Jul 2010 11:38:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21101 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.sdf/editor
	org.strategoxt.imp.editors.sdf/trans
	org.strategoxt.imp.editors.stratego/lib
	org.strategoxt.imp.generat...
Message-ID: <201007141138.o6EBck3U031337@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Jul 14 11:38:43 2010
New Revision: 21101
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21101&sc=1

Log:
- Fixed a 0.5.2 regression breaking compact error report for regions that failed to parse
- Minor improvements to SDF editor warnings and content completion
- Spoofax/105: Parsing using optional non-terminals yields lists in AST
  (we now support tuples)
- Fixed a case where stale parse errors would be shown when opening a file

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/TupleAstNode.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AmbAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/IntAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ListAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeTuple.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Completions.esv	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Completions.esv	Wed Jul 14 11:38:43 2010	(r21101)
@@ -2,6 +2,12 @@
 
 completions
 
+  completion trigger:
+    "->\s*[A-Za-z0-9]+\s*\{"
+
+  completion trigger:
+    "->[\ \t]"
+
   completion proposer:
     editor-complete
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Wed Jul 14 11:38:43 2010	(r21101)
@@ -19,7 +19,6 @@
         ProjectDir  := project-path
       )
     with
-      // TODO: sdf-desugar?
       ast' := <declare-globals-top> ast
   
 rules
@@ -32,7 +31,7 @@
     where
       <open-import(
         resolve-import
-      , parse-file // TODO: parse-sdf-file
+      , parse-sdf-file
       , declare-globals-top
       )> x
     <+

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Wed Jul 14 11:38:43 2010	(r21101)
@@ -61,7 +61,7 @@
   context-free-syntax-warning:
     prod(p, s, a*) -> (target, $[Missing {cons("Label")} attribute to label the abstract syntax])
     where
-      not(<occurrences(?sort(_))> p => 1);
+      not(<occurrences(?sort(_))> p => 1; occurrences(?lit(_)) => 0);
       if !a* => attrs(a'*) then
         not(<one(term(default(appl(unquoted("cons"), [id]))))> a'*);
         not(<one(bracket() + reject())> a'*);
@@ -133,6 +133,9 @@
   context-free-syntax-warning:
     prod(lhs @ [sort(x), opt(seq(opt(lit(sep)), [sort(xs)]))], sort(xs), _) ->
     (lhs, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])
+
+  context-free-syntax-warning:
+    [_ | t*] -> <context-free-syntax-warning> t*
   
   context-free-syntax-warning:
     iter-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)") 
@@ -145,7 +148,7 @@
   generate-pp-rules:
     (selected, position, ast, path, project-path) -> (filename, result)
     where
-      filename  := <guarantee-extension(|"pp")> path;
+      filename  := <guarantee-extension(|"selection.pp")> path;
       selected' := <add-context; sdf-desugar> selected;
       result    := <ppgenerate; pp-pp-table> selected'
     <+

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str	Wed Jul 14 11:38:43 2010	(r21101)
@@ -98,6 +98,8 @@
       cache-path   := $[[cache-dir]/[full-path'].sig]
 
   project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
 
   is-newer:
     (file1, file2) -> <id>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Wed Jul 14 11:38:43 2010	(r21101)
@@ -11,6 +11,8 @@
 
   lit  : Term -> Term
   prod : Term * Term * Term -> Term
+  deprecated : Term
+  deprecated : Term -> Term
 
 strategies
 
@@ -36,7 +38,7 @@
           ~~
           ~// Semantic (identifier) completion:
           completion proposer: editor-complete
-          completion trigger: ": "
+          completion trigger: ":"
       ]|
     );
     create-derived-completions-descriptor
@@ -106,6 +108,12 @@
     concat;
     make-set
 
+  prod-to-keywords:
+    prod(pattern, _, attrs) -> keywords
+    where
+      keywords := <pattern-to-keywords> pattern;
+      not(!attrs => attrs(<one(term(?deprecated() + ?deprecated(_)))>))
+
   pattern-to-keywords =
     pattern-to-keywords-1 <+ pattern-to-keywords-2 <+ []
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -1,7 +1,7 @@
 package org.strategoxt.imp.metatooling.building;
 
-import static org.eclipse.core.resources.IMarker.*;
-import static org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader.*;
+import static org.eclipse.core.resources.IMarker.SEVERITY_ERROR;
+import static org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader.getSourceDescriptor;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -31,9 +31,9 @@
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoExit;
-import org.strategoxt.permissivegrammars.make_permissive;
 import org.strategoxt.stratego_lib.dr_scope_all_end_0_0;
 import org.strategoxt.stratego_lib.dr_scope_all_start_0_0;
+import org.strategoxt.stratego_lib.stratego_lib;
 
 /**
  * Runs the project generator on modified editor descriptors.
@@ -57,8 +57,9 @@
 		try {
 			agent = new EditorIOAgent();
 			context = new Context(Environment.getTermFactory(), agent);
-			context.registerClassLoader(make_permissive.class.getClassLoader());
+			context.registerClassLoader(sdf2imp.class.getClassLoader());
 			sdf2imp.init(context);
+			assert sdf2imp._consSdfMainModuleFlag_0 != null && stratego_lib._consAlert_0 != null;
 			
 		} catch (Throwable e) { // (catch classes not loading, etc.)
 			Environment.logException("Unable to initialize dynamic builder", e);
@@ -243,6 +244,7 @@
 		}
 	}
 
+	@SuppressWarnings("deprecation") // use the Eclipse 3.5 and lower compatible API
 	private static void setDerivedResources(IProject project) throws CoreException,
 			IOException {
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -156,8 +156,8 @@
 		return (flags & CONTENT) == CONTENT
 			|| (flags & MOVED_TO) == MOVED_TO
 			|| (flags & MOVED_FROM) == MOVED_FROM
-			|| (flags & REPLACED) == REPLACED
-			|| (flags == 0);
+			|| (flags & REPLACED) == REPLACED;
+			// UNDONE: || (flags == 0) (one known instance: when markers were added/removed)
 	}
 	
 	public void updateResource(IResource resource, IProgressMonitor monitor, boolean startup) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -144,7 +144,7 @@
 	}
 	
 	public void scheduleParserUpdate(long delay) {
-		if (!getEditor().getTitleImage().isDisposed())
+		if (isEditorOpen(editor))
 			getEditor().fParserScheduler.schedule(delay);
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -72,17 +72,23 @@
 
 		if (lastEditor == null && EditorState.isUIThread()) {
 			lastEditor = EditorState.getEditorFor(this);
-			if (lastEditor != null) {
-				Descriptor descriptor = Environment.getDescriptor(getLanguage());
-				ContentProposerFactory.eagerInit(descriptor, result, lastEditor);
-				AutoEditStrategyFactory.eagerInit(descriptor, result, lastEditor);
-				OnSaveServiceFactory.eagerInit(descriptor, result, lastEditor);
-				TokenColorerHelper.register(lastEditor, (SGLRParseController) result);
-			}
+			if (lastEditor != null)
+				initializeEagerServices(result);
 		}
 		return result;
 	}
 
+	private void initializeEagerServices(IParseController parser) {
+		assert lastEditor != null;
+		if (parser instanceof SGLRParseController)
+			((SGLRParseController) parser).setEditor(lastEditor);
+		Descriptor descriptor = Environment.getDescriptor(getLanguage());
+		ContentProposerFactory.eagerInit(descriptor, parser, lastEditor);
+		AutoEditStrategyFactory.eagerInit(descriptor, parser, lastEditor);
+		OnSaveServiceFactory.eagerInit(descriptor, parser, lastEditor);
+		TokenColorerHelper.register(lastEditor, (SGLRParseController) parser);
+	}
+
 	public IAnnotationTypeInfo getAnnotationTypeInfo() {
 		return getWrapped().getAnnotationTypeInfo();
 	}
@@ -156,8 +162,6 @@
 
 	public Object parse(String input, IProgressMonitor monitor) {
 		IParseController parser = getWrapped();
-		if (parser instanceof SGLRParseController)
-			((SGLRParseController) parser).setEditor(lastEditor);
 		
 		Object result = parser.parse(input, monitor);
 		if (isReinitialized && lastEditor != null) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -129,6 +129,9 @@
 		
 		// Read stream using tokenizer/lexstream
 		
+		// FIXME: Some bug in JSGLR is causing its state to get corrupted; must reset it every parse
+		// (must do this beforehand to keep getCollectedErrors() intact afterwards)
+		resetState();
 		try {
 			return parser.parse(inputStream, getStartSymbol());
 		} catch (FilterException e) {
@@ -143,9 +146,6 @@
 			} else {
 				throw new FilterException(e.getParser(), e.getMessage(), e);
 			}
-		} finally {
-			// FIXME: Some bug in JSGLR is causing its state to get corrupted; must reset it every parse
-			resetState();
 		}
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -102,6 +102,8 @@
 	
 	private volatile boolean performInitialUpdate;
 
+	private volatile long initialReschedule;
+
 	// Simple accessors
 	
 	/**
@@ -163,6 +165,10 @@
     
     public void setEditor(EditorState editor) {
 		this.editor = editor;
+		if (initialReschedule != 0) {
+			scheduleParserUpdate(initialReschedule, false);
+			initialReschedule = 0;
+		}
 	}
     
     public EditorState getEditor() {
@@ -282,6 +288,7 @@
 			errorHandler.clearErrors();
 			errorHandler.setRecoveryFailed(false);
 			errorHandler.gatherNonFatalErrors(originalInputChars, parser.getTokenizer(), asfix);
+			parser.resetState(); // clean up memory
 			
 			currentAst = ast;
 			currentParseStream = parser.getParseStream();
@@ -328,8 +335,12 @@
 			if (!parseLock.isLocked())
 				isAborted = false;
 		}
-		if (getEditor() != null)
+		if (getEditor() != null) {
 			getEditor().scheduleParserUpdate(delay);
+		} else {
+			// Reschedule after fully initialized
+			initialReschedule = delay;
+		}
 	}
 
 	private ATerm parseNoImplode(char[] inputChars, String filename)
@@ -406,7 +417,8 @@
 				errorHandler.scheduleCommitAllChanges();
 		} else {
 			// Report errors again later when not in main thread
-			// (this state shouldn't be reachable from normal operation)
+			// (this state shouldn't be reachable from normal operation,
+			//  or maybe just for newly opened editors)
 			scheduleParserUpdate(DynamicParseController.REINIT_PARSE_DELAY, false);
 		}
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AmbAstNode.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AmbAstNode.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AmbAstNode.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -2,6 +2,8 @@
 
 import java.util.ArrayList;
 
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
@@ -23,4 +25,9 @@
 		return result;
 	}
 
+	@Override
+	public int getTermType() {
+		return IStrategoTerm.APPL;
+	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -242,32 +242,35 @@
 		
 		if(constructor == null) {
 			if (isList) {
-				return createNode(attrs, sort, null, prevToken, children, true);
+				return createNode(attrs, sort, null, prevToken, children, true, false);
 			}
 			
 			ATerm ast = reader.getAstAttribute(attrs);
 			if (ast != null) {
 				return createAstNonTerminal(rhs, prevToken, children, ast);
-			} else if (children.size() == 0) {
-				return createNode(attrs, sort, "None", prevToken, children, false);
 			} else if (OPT_FUN == applAt(rhs, 0).getAFun()) {
-				assert children.size() == 1;
-				AstNode child = children.get(0);
-				return new AstNode(sort, child.getLeftIToken(), child.getRightIToken(), "Some", children);
-			} else {
+				if (children.size() == 0) {
+					return createNode(attrs, sort, "None", prevToken, children, false, false);
+				} else {
+					assert children.size() == 1;
+					return createNode(attrs, sort, "Some", prevToken, children, false, false);
+				}
+			} else if (children.size() == 1) {
 				// Injection
-				assert children.size() == 1;
 				return children.get(0);
+			} else {
+				// Constructor-less application (tuple)
+				return createNode(attrs, sort, TupleAstNode.CONSTRUCTOR, prevToken, children, false, true);
 			}
 		} else {
 			tokenizer.makeToken(offset, tokenManager.getTokenKind(lhs, rhs));
-			return createNode(attrs, sort, constructor, prevToken, children, isList);
+			return createNode(attrs, sort, constructor, prevToken, children, isList, false);
 		}
 	}
 
 	/** Implode a context-free node. */
 	private AstNode createNode(ATermAppl attrs, String sort, String constructor, IToken prevToken,
-			ArrayList<AstNode> children, boolean isList) {
+			ArrayList<AstNode> children, boolean isList, boolean isTuple) {
 		
 		IToken left = getStartToken(prevToken);
 		IToken right = getEndToken(left, tokenizer.currentToken());

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -83,6 +83,10 @@
 		return children;
 	}
 
+	public int getTermType() {
+		return IStrategoTerm.APPL;
+	}
+
 	/** Get the leftmost token associated with this node. */
 	public IToken getLeftIToken() {
 		return leftToken;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -35,6 +35,10 @@
 		return new StringAstNode(value, sort, token, token);
 	}
 	
+	public TupleAstNode createTuple(String elementSort, IToken leftToken, IToken rightToken, ArrayList<AstNode> children) {
+		return new TupleAstNode(elementSort, leftToken, rightToken, children);
+	}
+	
 	/**
 	 * Create a new AST node list. 
 	 */

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/IntAstNode.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/IntAstNode.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/IntAstNode.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime.parser.ast;
 
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
 
 import lpg.runtime.IToken;
@@ -32,4 +33,9 @@
 	public void prettyPrint(ITermPrinter printer) {
 		printer.print(String.valueOf(getValue()));
 	}
+
+	@Override
+	public int getTermType() {
+		return IStrategoTerm.INT;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ListAstNode.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ListAstNode.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ListAstNode.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -2,10 +2,11 @@
 
 import java.util.ArrayList;
 
-import org.spoofax.interpreter.terms.ITermPrinter;
-
 import lpg.runtime.IToken;
 
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
 public class ListAstNode extends AstNode {
 	
 	private final String elementSort;
@@ -15,7 +16,7 @@
 	}
 	
 	/**
-	 * @deprecated Use #getElementSort() to get the element sort instead.
+	 * @deprecated Use {@link #getElementSort()} to get the element sort instead.
 	 */
 	@Override @Deprecated
 	public String getSort() {
@@ -55,4 +56,9 @@
 	public AstNode getLastChild() {
 		return getChildren().get(getChildren().size() - 1);
 	}
+
+	@Override
+	public int getTermType() {
+		return IStrategoTerm.LIST;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -1,10 +1,11 @@
 package org.strategoxt.imp.runtime.parser.ast;
 
+import lpg.runtime.IToken;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRToken;
 
-import lpg.runtime.IToken;
-
 /**
  * A String terminal AST node.
  * 
@@ -43,4 +44,9 @@
 		printer.print(getValue().replace("\"", "\\\""));
 		printer.print("\"");
 	}
+
+	@Override
+	public int getTermType() {
+		return IStrategoTerm.STRING;
+	}
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/TupleAstNode.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/TupleAstNode.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -0,0 +1,56 @@
+package org.strategoxt.imp.runtime.parser.ast;
+
+import java.util.ArrayList;
+
+import lpg.runtime.IToken;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class TupleAstNode extends AstNode {
+	
+	public static String CONSTRUCTOR = "";
+	
+	private final String elementSort;
+
+	public TupleAstNode(String elementSort, IToken leftToken, IToken rightToken,
+			ArrayList<AstNode> children) {
+		
+		super(elementSort + "*", leftToken, rightToken, CONSTRUCTOR, children);
+		this.elementSort = elementSort;
+	}
+	
+	/**
+	 * @deprecated Use {@link #getElementSort()} to get the element sort instead.
+	 */
+	@Override @Deprecated
+	public String getSort() {
+		return super.getSort();
+	}
+	
+	public String getElementSort() {
+		return elementSort;
+	}
+	
+	@Override
+	public void prettyPrint(ITermPrinter printer) {
+		printer.print("(");
+		if (getChildren().size() > 0) {
+			getChildren().get(0).prettyPrint(printer);
+			for (int i = 1; i < getChildren().size(); i++) {
+				printer.print(",");
+				getChildren().get(i).prettyPrint(printer);
+			}
+		}
+		printer.print(")");
+	}
+
+	@Override
+	public int getTermType() {
+		return IStrategoTerm.TUPLE;
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -38,6 +38,8 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class AutoEditStrategy implements IAutoEditStrategy, VerifyKeyListener {
+	
+	private static boolean justReceivedKeyEvent;
 		
 	private final ILanguageSyntaxProperties syntax;
 	
@@ -110,10 +112,12 @@
 				((StyledText) event.widget).invokeAction(ST.LINE_UP);
 				((StyledText) event.widget).invokeAction(ST.LINE_DOWN);
 				event.doit = false;
+				justReceivedKeyEvent = true;
 			} else if (insertClosingFence(viewer, viewer.getDocument(), selection.x, selection.y, input)
 					|| skipClosingFence(viewer, viewer.getDocument(), selection.x, selection.y, input)
 					|| undoClosingFence(viewer, viewer.getDocument(), selection.x, selection.y, input)) {
 				event.doit = false;
+				justReceivedKeyEvent = true;
 			}
 		} catch (BadLocationException e) {
 			Environment.logException("Could not determine auto edit strategy", e);
@@ -121,6 +125,12 @@
 			Environment.logException("Could not apply auto edit strategy", e);
 		}
 	}
+	
+	protected static boolean pollJustReceivedKeyEvent() {
+		boolean result = justReceivedKeyEvent;
+		justReceivedKeyEvent = false;
+		return result;
+	}
 
 	protected void indentPastedContent(IDocument document, DocumentCommand command) throws BadLocationException {
 		// UNDONE: Disabled smart pasting for now

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -52,7 +52,9 @@
 	public void textChanged(TextEvent event) {
 		try {
 			if (event.getDocumentEvent() != null // not just a visual change
-					&& event.getText() != null && event.getText().length() == 1 // single keypress
+					&& event.getText() != null
+					&& (event.getText().length() == 1 // single keypress
+							|| AutoEditStrategy.pollJustReceivedKeyEvent())
 					&& matchesPatterns(event.getDocumentEvent().getDocument(), event.getOffset())) {
 				viewer.setSelectedRange(event.getOffset() + 1, 0);
 				((ITextOperationTarget) viewer).doOperation(ISourceViewer.CONTENTASSIST_PROPOSALS);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -20,6 +20,8 @@
 	
 	IStrategoTerm getTerm();
 	
+	int getTermType();
+	
 	IStrategoList getAnnotations();
 	
 	String getConstructor();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -1,6 +1,11 @@
 package org.strategoxt.imp.runtime.stratego.adapter;
 
-import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+import static org.spoofax.interpreter.terms.IStrategoTerm.APPL;
+import static org.spoofax.interpreter.terms.IStrategoTerm.INT;
+import static org.spoofax.interpreter.terms.IStrategoTerm.LIST;
+import static org.spoofax.interpreter.terms.IStrategoTerm.MUTABLE;
+import static org.spoofax.interpreter.terms.IStrategoTerm.STRING;
+import static org.spoofax.interpreter.terms.IStrategoTerm.TUPLE;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -8,9 +13,6 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
-import org.strategoxt.imp.runtime.parser.ast.IntAstNode;
-import org.strategoxt.imp.runtime.parser.ast.ListAstNode;
-import org.strategoxt.imp.runtime.parser.ast.StringAstNode;
 import org.strategoxt.lang.terms.TermFactory;
 
 /**
@@ -23,18 +25,26 @@
 	
 	public IStrategoTerm wrap(IStrategoAstNode node) {
 		IStrategoTerm result;
-		if (node instanceof IntAstNode) {
-			result = new WrappedAstNodeInt(node);
-		} else if (node instanceof StringAstNode) {
-			result = new WrappedAstNodeString(node);
-		} else if (node instanceof ListAstNode) {
-			result = new WrappedAstNodeList(this, node, 0);
-		} else {
-			// TODO: ensure maximal sharing of node constructors
-			//       (term constructors are also maximally shared!)
-			result = "()".equals(node.getConstructor())
-				? new WrappedAstNodeTuple(node)
-				: new WrappedAstNodeAppl(this, node);
+		switch (node.getTermType()) {
+			case INT:
+				result = new WrappedAstNodeInt(node);
+				break;
+			case STRING:
+				result = new WrappedAstNodeString(node);
+				break;
+			case LIST:
+				result = new WrappedAstNodeList(this, node, 0);
+				break;
+			case APPL:
+				result = "".equals(node.getConstructor())
+					? new WrappedAstNodeTuple(node)
+					: new WrappedAstNodeAppl(this, node);
+				break;
+			case TUPLE:
+				result = new WrappedAstNodeTuple(node);
+				break;
+			default:
+				throw new IllegalStateException("Could not convert node of type " + node.getClass().getName() + " to a term");
 		}
 		IStrategoList annos = node.getAnnotations();
 		if (annos != null)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -215,7 +215,7 @@
 
 	public double realValue() {
 		if (getTermType() != REAL)
-			throw new AnnotationWrapperException("Called realValue() on a term that is not of type APPL");
+			throw new AnnotationWrapperException("Called realValue() on a term that is not of type REAL");
 		return ((IStrategoReal) wrapped).realValue();
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeTuple.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeTuple.java	Wed Jul 14 07:58:57 2010	(r21100)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeTuple.java	Wed Jul 14 11:38:43 2010	(r21101)
@@ -12,7 +12,7 @@
 
 	protected WrappedAstNodeTuple(IStrategoAstNode node) {
 		super(node);
-		node.setConstructor("()"); // ensure interned string is used
+		node.setConstructor(""); // ensure interned string is used
 	}
 
 	@Override

From L.C.L.Kats at tudelft.nl  Wed Jul 14 13:50:37 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 14 Jul 2010 11:50:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21102 -
	strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode
Message-ID: <201007141150.o6EBobXv031425@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Jul 14 11:50:37 2010
New Revision: 21102
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21102&sc=1

Log:
Fix for indent-padding regressions

Modified:
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str

Modified: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str
==============================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str	Wed Jul 14 11:38:43 2010	(r21101)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str	Wed Jul 14 11:50:37 2010	(r21102)
@@ -15,6 +15,7 @@
   PaddingStart   : PaddingStart
   indentpadding  : Attr
   parse-tree     : Term * Term -> parse-tree
+  Stop           : Term -> Term
 
 strategies
     
@@ -71,7 +72,7 @@
     with
       if !a* => [PaddingContext(context)] then
         asfix'   := <collect-tree-chars-before(?context)> asfix
-      ; padding  := <chars-before-newlines; chars-to-whitespace> asfix'
+      ; padding  := <chars-before-newlines; reverse; chars-to-whitespace> asfix'
       ; s'       := <conc; implode-string> (padding, <explode-string> s)
       else
         s' := s
@@ -85,10 +86,7 @@
     t -> c*
     with
       try(?parse-tree(<id>, _))
-    ; c* := <collect-tree-chars-before-acc(stop | [])>
-      
-  collect-tree-chars-before-acc(stop|c*):
-    parse-tree(appl, _) -> <collect-tree-chars-before-acc(stop|c*)> appl
+    ; c* := <try(?Stop(<id>))> <collect-tree-chars-before-acc(stop | [])>
   
   collect-tree-chars-before-acc(stop|c*):
     appl(_, ts) -> <collect-tree-chars-before-acc(stop|c*)> ts
@@ -99,12 +97,15 @@
   collect-tree-chars-before-acc(stop|c*):
     [x | xs] -> result
     with
+      !c* => Stop(_)
+    ; result := c*
+    <+
       if <is-int> x then
         c'*    := [x | c*]
       ; result := <collect-tree-chars-before-acc(stop|c'*)> xs
       else
         if <stop> x then
-          result := c*
+          result := Stop(c*)
         else
           x'     := <collect-tree-chars-before-acc(stop|c*)> x
         ; result := <collect-tree-chars-before-acc(stop|x')> xs

From L.C.L.Kats at tudelft.nl  Wed Jul 14 14:37:34 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 14 Jul 2010 12:37:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21103 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/in...
Message-ID: <201007141237.o6ECbYrI032173@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Jul 14 12:37:23 2010
New Revision: 21103
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21103&sc=1

Log:
- StrategoXT/830: Support appending files in SSL_fopen in Stratego/J
- Minor fixes and tweaks

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
   strc-java/trunk/META-INF/MANIFEST.MF
   strc-java/trunk/configure.ac
   strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAnnotation.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoWrapped.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/trans/split-large-strategies.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	Wed Jul 14 11:50:37 2010	(r21102)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	Wed Jul 14 12:37:23 2010	(r21103)
@@ -28,7 +28,7 @@
     
     private int failureDepth;
     
-    public void push(String name) {
+    public final void push(String name) {
         int depth = currentDepth++;
         if (frames.length == depth) {
             String[] oldframes = frames;
@@ -39,12 +39,12 @@
         failureDepth = currentDepth;
     }
     
-    public void popOnFailure() {
+    public final void popOnFailure() {
         currentDepth--;
         // failureDepth stays the same and keeps track of this failure
     }
     
-    public void popOnSuccess() {
+    public final void popOnSuccess() {
         failureDepth = --currentDepth;
     }
     
@@ -75,7 +75,7 @@
     *            true if only the current frames on the stack should be
     *            printed, and not any failed frames.
     */
-   public int getTraceDepth(boolean onlyCurrent) {
+    public int getTraceDepth(boolean onlyCurrent) {
         return onlyCurrent ? currentDepth : failureDepth;
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	Wed Jul 14 11:50:37 2010	(r21102)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	Wed Jul 14 12:37:23 2010	(r21103)
@@ -160,11 +160,6 @@
             FileHandle file = openFiles.get(fd);
             if (file.outputStream == null) {
                 assert file.writer == null;
-                try {
-                    file.file.setLength(0); // Clear written-to file contents
-                } catch (IOException e) {
-                    // Be forgiving: if this results in an exception, so will writing to it
-                }
                 file.outputStream = new RandomAccessOutputStream(file.file);
             }
             return file.outputStream;
@@ -220,13 +215,20 @@
     }
 
     public int openRandomAccessFile(String fn, String mode) throws FileNotFoundException, IOException {
-        boolean writeMode = mode.indexOf('w') >= 0;
-        
+        boolean appendMode = mode.indexOf('a') >= 0;
+        boolean writeMode = appendMode || mode.indexOf('w') >= 0;
+        boolean clearFile = false;
+
         if (writeMode) {
             File file = new File(getAbsolutePath(getWorkingDir(), fn));
-            if (!file.exists()) file.createNewFile();
+            if (!file.exists()) {
+                file.createNewFile();
+            } else if (!appendMode) {
+                clearFile = true;
+            }
         }
         RandomAccessFile file = new RandomAccessFile(getAbsolutePath(getWorkingDir(), fn), writeMode ? "rw" : "r");
+        if (clearFile) file.setLength(0);
         openFiles.put(fileCounter, new FileHandle(file));
         
         return fileCounter++;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	Wed Jul 14 11:50:37 2010	(r21102)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	Wed Jul 14 12:37:23 2010	(r21103)
@@ -105,10 +105,10 @@
     }
 
     private IStrategoTerm parseString(PushbackInputStream bis) throws IOException {
-        StringBuilder sb = new StringBuilder();
         int ch = bis.read();
         if(ch == '"')
             return makeString("");
+        StringBuilder sb = new StringBuilder();
         boolean escaped = false;
         do {
             escaped = false;

Modified: strc-java/trunk/META-INF/MANIFEST.MF
==============================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	Wed Jul 14 11:50:37 2010	(r21102)
+++ strc-java/trunk/META-INF/MANIFEST.MF	Wed Jul 14 12:37:23 2010	(r21103)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: Stratego/XT Java runtime
 Bundle-SymbolicName: org.strategoxt.strj;singleton:=true
-Bundle-Version: 0.17.91.qualifier
+Bundle-Version: 0.17.92.qualifier
 Export-Package: .,
  aterm,
  aterm.pure,

Modified: strc-java/trunk/configure.ac
==============================================================================
--- strc-java/trunk/configure.ac	Wed Jul 14 11:50:37 2010	(r21102)
+++ strc-java/trunk/configure.ac	Wed Jul 14 12:37:23 2010	(r21103)
@@ -1,5 +1,5 @@
 AC_PREREQ([2.58])
-AC_INIT([strc-java],[0.17.91],[bugs at strategoxt.org])
+AC_INIT([strc-java],[0.17.92],[bugs at strategoxt.org])
 AM_INIT_AUTOMAKE
 
 # set the prefix immediately to the default prefix 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	Wed Jul 14 11:50:37 2010	(r21102)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	Wed Jul 14 12:37:23 2010	(r21103)
@@ -21,10 +21,10 @@
 	
 	private final ITermFactory factory;
 	
-	private final Class<?> container;
-	
 	private final String path, name;
 	
+	private final Class<?> container;
+	
 	private ATermFactory atermFactory;
 	
 	private ATerm aterm;
@@ -40,18 +40,16 @@
 	}
 	
 	public ATerm getATerm(ATermFactory factory) {
-		if (aterm == null) {
-			return aterm = initATerm(factory);
-		} else if (factory != atermFactory) {
+		if (aterm == null || factory != atermFactory) {
 			try {
-				return initATerm(factory);
+				aterm = factory.importTerm(aterm);
 			} catch (RuntimeException e) {
 				 // factory.importTerm(aterm) may not be implemented, try again...
-				return initATerm(factory);
+				aterm = initATerm(factory);
 			}
-		} else {
-			return aterm;
+			atermFactory = factory;
 		}
+		return aterm;
 	}
 	
 	@Override
@@ -61,7 +59,8 @@
 		
 		InputStream stream = openStream();
 		try {
-			return factory.parseFromStream(stream);
+			IStrategoTerm result = factory.parseFromStream(stream);
+			return result;
 		} catch (java.io.IOException e) {
 			throw new StrategoException(container.getSimpleName()
 					+ ": Could not read imported term file " + name, e);
@@ -82,6 +81,8 @@
 	}
 	
 	private ATerm initATerm(ATermFactory factory) {
+		if (getWrapped(true) != null)
+			return new ATermConverter(factory, this.factory, false).convert(getWrapped());
 		InputStream stream = null;
 		try {
 			stream = openStream();
@@ -104,6 +105,8 @@
 	private InputStream openStream() {
 		InputStream result = tryOpenStreamFromJar();
 		if (result == null)
+			result = container.getResourceAsStream(removePrecedingSlash(path) + name);
+		if (result == null)
 			result = container.getResourceAsStream(path + name);
 		if (result == null)
 			result = container.getResourceAsStream("/" + name);
@@ -124,6 +127,7 @@
 				File jarFile = new File(location.toURI());
 				ZipFile jar = lastZipFile = new ZipFile(jarFile);
 				ZipEntry entry = jar.getEntry(removePrecedingSlash(path) + name);
+				if (entry == null) entry = jar.getEntry(path + name);
 				if (entry == null) entry = jar.getEntry(name);
 				if (entry == null) return null;
 				return jar.getInputStream(entry);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java	Wed Jul 14 11:50:37 2010	(r21102)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java	Wed Jul 14 12:37:23 2010	(r21103)
@@ -15,6 +15,8 @@
  */
 public abstract class LazyTerm implements IStrategoAppl, IStrategoInt, IStrategoList, IStrategoReal, IStrategoString, IStrategoTuple {
 
+	// TODO: base class should be StrategoWrapped :o
+	
 	private IStrategoTerm term;
 	
 	public final IStrategoTerm getWrapped() {
@@ -22,6 +24,10 @@
 		return term;
 	}
 	
+	public final IStrategoTerm getWrapped(boolean skipInit) {
+		return skipInit ? term : getWrapped();
+	}
+	
 	protected abstract IStrategoTerm init();
 	
 	// Common methods

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAnnotation.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAnnotation.java	Wed Jul 14 11:50:37 2010	(r21102)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAnnotation.java	Wed Jul 14 12:37:23 2010	(r21103)
@@ -51,7 +51,7 @@
 
 	@Override
 	protected int hashFunction() {
-		// FIXME: annotations should be part of the hash code	
+		assert getWrapped().getAnnotations().isEmpty() : "Constructor contract broken";
 		return getWrapped().hashCode();
 	}
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java	Wed Jul 14 11:50:37 2010	(r21102)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java	Wed Jul 14 12:37:23 2010	(r21103)
@@ -166,7 +166,7 @@
     	if (annotations == TermFactory.EMPTY_LIST)
     		annotations = null; // essential for hash code calculation
     	
-    	assert annotations != null || getTermType() != STRING || getStorageType() != MAXIMALLY_SHARED :
+    	assert getTermType() != STRING || getStorageType() != MAXIMALLY_SHARED :
     		"Maximally shared, unannotated string must be created using constructor";
     	
     	if (this.annotations != annotations) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoWrapped.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoWrapped.java	Wed Jul 14 11:50:37 2010	(r21102)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoWrapped.java	Wed Jul 14 12:37:23 2010	(r21103)
@@ -134,25 +134,25 @@
 
 	public IStrategoConstructor getConstructor() {
 		if (getTermType() != APPL)
-			throw new TermWrapperException("Called getConstructor() on a term that is not of type LIST");
+			throw new TermWrapperException("Called getConstructor() on a term that is not of type APPL");
 		return ((IStrategoAppl) wrapped).getConstructor();
 	}
 
 	public int intValue() {
-		if (getTermType() != APPL)
-			throw new TermWrapperException("Called intValue() on a term that is not of type LIST");
+		if (getTermType() != INT)
+			throw new TermWrapperException("Called intValue() on a term that is not of type INT");
 		return ((IStrategoInt) wrapped).intValue();
 	}
 
 	public double realValue() {
-		if (getTermType() != APPL)
-			throw new TermWrapperException("Called realValue() on a term that is not of type LIST");
+		if (getTermType() != REAL)
+			throw new TermWrapperException("Called realValue() on a term that is not of type REAL");
 		return ((IStrategoReal) wrapped).realValue();
 	}
 
 	public String stringValue() {
 		if (getTermType() != STRING)
-			throw new TermWrapperException("Called stringValue() on a term that is not of type LIST");
+			throw new TermWrapperException("Called stringValue() on a term that is not of type STRING");
 		return ((IStrategoString) wrapped).stringValue();
 	}
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	Wed Jul 14 11:50:37 2010	(r21102)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	Wed Jul 14 12:37:23 2010	(r21103)
@@ -241,7 +241,11 @@
             return term;
         } else if (term.getStorageType() == MAXIMALLY_SHARED) {
 			if (term == EMPTY_LIST) {
-		    	return new StrategoList(null, null, annotations, MY_STORAGE_TYPE);
+				if (annotations == EMPTY_LIST || annotations.isEmpty()) {
+					return EMPTY_LIST;
+				} else {
+					return new StrategoList(null, null, annotations, MY_STORAGE_TYPE);
+				}
 			} else if (term.getTermType() == STRING) {
 				String value = ((IStrategoString) term).stringValue();
 				if (annotations == EMPTY_LIST || annotations.isEmpty()) {
@@ -250,8 +254,7 @@
 					return new StrategoString(value, annotations, MY_STORAGE_TYPE);
 				}
 			} else if (term.getAnnotations() == EMPTY_LIST) {
-				int storageType = min(MY_STORAGE_TYPE, getStorageType(term));
-				return new StrategoAnnotation(this, term, annotations, storageType);
+				return new StrategoAnnotation(this, term, annotations, MY_STORAGE_TYPE);
 			} else if (term instanceof StrategoAnnotation) {
 				term = ((StrategoAnnotation) term).getWrapped();
 				int storageType = min(MY_STORAGE_TYPE, getStorageType(term));

Modified: strc-java/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: strc-java/trunk/trans/split-large-strategies.str
==============================================================================
--- strc-java/trunk/trans/split-large-strategies.str	Wed Jul 14 11:50:37 2010	(r21102)
+++ strc-java/trunk/trans/split-large-strategies.str	Wed Jul 14 12:37:23 2010	(r21103)
@@ -7,6 +7,9 @@
    * (see -XX:-DontCompileHugeMethod), and that Java defines a 64 KB instruction limit per method.
    *
    * Ideal would be 6000~7000 instructions (use -XX:+PrintCompilation for accurate figures).
+   *
+   * According to a benchmark with libstrc:
+   *   2000 = good, 2500 = good, 3000~5000 = still good, 10.000 = bad
    */
   LARGE_STRATEGY_SIZE = 2500
 

From m.dejonge at tudelft.nl  Wed Jul 14 15:14:25 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 14 Jul 2010 13:14:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21104 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201007141314.o6EDEPhB032700@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Jul 14 13:14:25 2010
New Revision: 21104
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21104&sc=1

Log:
use new layout heuristics

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextPositions.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentAfterPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentBeforePrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSourceTextPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java	Wed Jul 14 12:37:23 2010	(r21103)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java	Wed Jul 14 13:14:25 2010	(r21104)
@@ -18,13 +18,51 @@
 	private ArrayList<IToken> commentsBefore;
 	private ArrayList<IToken> commentsAfter;
 	private String indentNode;
+	private int indentValueNode;
+	private int startLayoutBefore;
+	private IStrategoAstNode node;
 	
-	public String getIndentNode() {
-		return indentNode;
+	public TextFragment textWithLayout(){
+		TextFragment originText=new TextFragment();
+		originText.setStart(startLayoutBefore);
+		TextFragment commentAfter = getCommentsAfter();
+		if(commentAfter==null){
+			originText.setEnd(node.getRightIToken().getEndOffset()+1);
+		}
+		else{
+			originText.setEnd(commentAfter.getEnd());
+			if(commentAfter.getText(getLexStream()).endsWith("\n") 
+					&& originText.getText(getLexStream()).startsWith("\n")){
+				originText.setStart(startLayoutBefore+1); //correction in case the line-comment ends with \n
+			}
+		}
+		return originText;
 	}
 
-	private int indentValueNode;
+	private ILexStream getLexStream() {
+		return node.getLeftIToken().getILexStream();
+	}
+	
+	public TextFragment getCommentsBefore() {
+		return createTextFragment(this.commentsBefore);
+	}
+
+	public TextFragment getCommentsAfter() {
+		return createTextFragment(this.commentsAfter);
+	}
 
+	private TextFragment createTextFragment(ArrayList<IToken> tokenList) {
+		if(tokenList.isEmpty())
+			return null;
+		TextFragment commentBlock=new TextFragment();
+		commentBlock.setStart(tokenList.get(0).getStartOffset());
+		commentBlock.setEnd(tokenList.get(tokenList.size()-1).getEndOffset());
+		return commentBlock;
+	}
+	
+	public String getIndentNode() {
+		return indentNode;
+	}
 	
 	public String getSeperatingWhitespace() {
 		return seperatingWhitespace;
@@ -32,7 +70,8 @@
 	
 	public DocumentaryStructure(IWrappedAstNode node) {
 		initialize();
-		analysize(node.getNode());
+		this.node=node.getNode();
+		analysize();
 	}
 	
 	private void initialize() {
@@ -41,6 +80,7 @@
 		indentNode="";
 		indentValueNode=0;
 		seperatingWhitespace=" ";
+		startLayoutBefore=-1;
 	}
 
 	private IToken getPrecedingNonLOToken(IToken startToken){
@@ -56,8 +96,8 @@
 		return null;
 	}
 	
-	private void analysize(IStrategoAstNode node){
-		setCommentsBefore(node);
+	private void analysize(){
+		setCommentsBefore();
 		IToken startToken = node.getLeftIToken();
 		IPrsStream tokenStream=startToken.getIPrsStream();
 		indentNode=getIndentation(getLineText(tokenStream, startToken.getLine()));
@@ -66,10 +106,10 @@
 		System.out.println("["+seperatingWhitespace+"]");
 		System.out.println("["+indentNode+"]");
 		System.out.println("["+indentValueNode+"]");
-		setCommentsAfter(node);
+		setCommentsAfter();
 	}
 
-	private void setCommentsAfter(IStrategoAstNode node) {
+	private void setCommentsAfter() {
 		IToken startToken = node.getRightIToken();
 		IPrsStream tokenStream=startToken.getIPrsStream();
 		ArrayList<IToken> followingComments=new ArrayList<IToken>();
@@ -90,7 +130,7 @@
 		return tokenStream.getTokenAt(nextToken.getTokenIndex()+1);
 	}
 
-	private void setCommentsBefore(IStrategoAstNode node) {
+	private void setCommentsBefore() {
 		IToken startToken = node.getLeftIToken();
 		IPrsStream tokenStream=startToken.getIPrsStream();
 
@@ -175,6 +215,7 @@
 		}
 		else
 			seperatingWhitespace=" ";
+		startLayoutBefore=startOffsetSepWS;
 	}
 
 	private String correctWSIndentation(String line, String indent) {
@@ -300,10 +341,15 @@
 		public String getText(ILexStream lexStream) {
 			if(start==end)
 				return "";
-			if(TextPositions.isUnvalidInterval(start, end, lexStream))
+			if(DocumentaryStructure.isUnvalidInterval(start, end, lexStream))
 				return null;
 			String textfragment=lexStream.toString(start, end-1);
 			return textfragment;
 		}
+
+	}
+	
+	public static boolean isUnvalidInterval(int pos_start, int pos_end, ILexStream lexStream) {
+		return pos_start < 0 || pos_start > pos_end || pos_end >= lexStream.getStreamLength();
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentAfterPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentAfterPrimitive.java	Wed Jul 14 12:37:23 2010	(r21103)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentAfterPrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
@@ -3,49 +3,31 @@
 import lpg.runtime.ILexStream;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.stratego.DocumentaryStructure.TextFragment;
 import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 
 /**
  * Extracts all comment lines directly after the current node on the same line
  * @author Maartje de Jonge
  */
-public class OriginCommentAfterPrimitive extends AbstractPrimitive {
+public class OriginCommentAfterPrimitive extends AbstractOriginPrimitive {
 	
-	private static final String NAME = "SSL_EXT_origin_comment_after";
-	
-
 	public OriginCommentAfterPrimitive() {
-		super(NAME, 0, 1);
+		super("SSL_EXT_origin_comment_after");
 	}
-	
+
 	@Override
-	public final boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		
-		if (tvars[0] instanceof IWrappedAstNode) {
-			IStrategoTerm result = call(env, (IWrappedAstNode) tvars[0]);
-			if (result != null) {
-				env.setCurrent(result);
-				return true;
-			}
-		}
-		return false;
-	}
-	
-	private IStrategoTerm call(IContext env, IWrappedAstNode node) {		
-		int commentStart=TextPositions.getStartPosCommentAfter(node.getNode());
-		int commentEnd=TextPositions.getEndPosCommentAfter(node.getNode());
-		if(commentStart>0){
-			ILexStream lexStream=node.getNode().getLeftIToken().getILexStream();
-			String commentText=lexStream.toString(commentStart, commentEnd-1);
-			return env.getFactory().makeTuple(
-					env.getFactory().makeInt(commentStart),
-					env.getFactory().makeInt(commentEnd),
-					env.getFactory().makeString(commentText)
-			);
-		}
-		return null;
+	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
+		DocumentaryStructure loStructure=new DocumentaryStructure(node);
+		TextFragment commentBlock=loStructure.getCommentsAfter();
+		if(commentBlock==null)
+			return null;
+		ILexStream lexStream=node.getNode().getLeftIToken().getILexStream();
+		return env.getFactory().makeTuple(
+				env.getFactory().makeInt(commentBlock.getStart()),
+				env.getFactory().makeInt(commentBlock.getEnd()),
+				env.getFactory().makeString(commentBlock.getText(lexStream))
+		);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentBeforePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentBeforePrimitive.java	Wed Jul 14 12:37:23 2010	(r21103)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentBeforePrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
@@ -3,49 +3,31 @@
 import lpg.runtime.ILexStream;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.stratego.DocumentaryStructure.TextFragment;
 import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 
 /**
  * Extracts all comment lines directly in front of the current node
  * @author Maartje de Jonge
  */
-public class OriginCommentBeforePrimitive extends AbstractPrimitive {
+public class OriginCommentBeforePrimitive extends AbstractOriginPrimitive {
 	
-	private static final String NAME = "SSL_EXT_origin_comment_before";
-	
-
 	public OriginCommentBeforePrimitive() {
-		super(NAME, 0, 1);
+		super("SSL_EXT_origin_comment_before");
 	}
-	
+
 	@Override
-	public final boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		
-		if (tvars[0] instanceof IWrappedAstNode) {
-			IStrategoTerm result = call(env, (IWrappedAstNode) tvars[0]);
-			if (result != null) {
-				env.setCurrent(result);
-				return true;
-			}
-		}
-		return false;
-	}
-	
-	private IStrategoTerm call(IContext env, IWrappedAstNode node) {		
-		int commentStart=TextPositions.getStartPosCommentBefore(node.getNode());
-		int commentEnd=TextPositions.getEndPosCommentBefore(node.getNode());
-		if(commentStart>0){
-			ILexStream lexStream=node.getNode().getLeftIToken().getILexStream();
-			String commentText=lexStream.toString(commentStart, commentEnd-1);
-			return env.getFactory().makeTuple(
-					env.getFactory().makeInt(commentStart),
-					env.getFactory().makeInt(commentEnd),
-					env.getFactory().makeString(commentText)
-			);
-		}
-		return null;
+	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
+		DocumentaryStructure loStructure=new DocumentaryStructure(node);
+		TextFragment commentBlock=loStructure.getCommentsBefore();
+		if(commentBlock==null)
+			return null;
+		ILexStream lexStream=node.getNode().getLeftIToken().getILexStream();
+		return env.getFactory().makeTuple(
+				env.getFactory().makeInt(commentBlock.getStart()),
+				env.getFactory().makeInt(commentBlock.getEnd()),
+				env.getFactory().makeString(commentBlock.getText(lexStream))
+		);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetPrimitive.java	Wed Jul 14 12:37:23 2010	(r21103)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetPrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
@@ -3,6 +3,7 @@
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 
 /**
@@ -18,12 +19,19 @@
 	@Override
 	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
 		ITermFactory factory = env.getFactory();
-		int start = TextPositions.getStartPosNode(node.getNode());
-		int end =  TextPositions.getEndPosNode(node.getNode());
+		int start = getStartPosNode(node.getNode());
+		int end =  getEndPosNode(node.getNode());
 		return factory.makeTuple(
 				factory.makeInt(start),
 				factory.makeInt(end)
 		);
 	}
+	
+	private static int getStartPosNode(IStrategoAstNode node){
+		return node.getLeftIToken().getStartOffset();//inclusive start
+	}
 
+	private static int getEndPosNode(IStrategoAstNode node){
+		return node.getRightIToken().getEndOffset()+1; //exclusive end
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java	Wed Jul 14 12:37:23 2010	(r21103)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
@@ -16,12 +16,11 @@
 
 	@Override
 	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
+		DocumentaryStructure loStructure=new DocumentaryStructure(node);
 		ITermFactory factory = env.getFactory();
-		int start = TextPositions.getStartPosNodeWithLayout(node.getNode());
-		int end =  TextPositions.getEndPosNodeWithLayout(node.getNode());
 		return factory.makeTuple(
-				factory.makeInt(start),
-				factory.makeInt(end)
+				factory.makeInt(loStructure.textWithLayout().getStart()),
+				factory.makeInt(loStructure.textWithLayout().getEnd())
 		);
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSourceTextPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSourceTextPrimitive.java	Wed Jul 14 12:37:23 2010	(r21103)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSourceTextPrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
@@ -3,31 +3,23 @@
 import lpg.runtime.ILexStream;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 
 /**
- * Returns the textfragment that corresponds to the current file
+ * Returns the file text
  * @author Maartje de Jonge
  */
-public class OriginSourceTextPrimitive extends AbstractPrimitive {
-
-private static final String NAME = "SSL_EXT_origin_source_text";
+public class OriginSourceTextPrimitive extends AbstractOriginPrimitive {
 
 	public OriginSourceTextPrimitive() {
-		super(NAME, 0, 2);
+		super("SSL_EXT_origin_sourcetext");
 	}
-	
+
 	@Override
-	public final boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		ILexStream lexStream = EditorState.getActiveEditor().getCurrentAst()
-			.getLeftIToken().getILexStream();
+	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
+		ILexStream lexStream = node.getNode().getLeftIToken().getILexStream();
 		String sourcetext=lexStream.toString(0, lexStream.getStreamLength()-1);
-		IStrategoString result = env.getFactory().makeString(sourcetext);
-		env.setCurrent(result);
-		return true;
+		return env.getFactory().makeString(sourcetext);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Wed Jul 14 12:37:23 2010	(r21103)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
@@ -46,7 +46,7 @@
 		int pos_end=((StrategoInt)position.get(1)).intValue()-1;//exclusive
 		ILexStream lexStream = ((IWrappedAstNode)position.get(2)).getNode().getLeftIToken().getILexStream();
 		//ILexStream lexStream= EditorState.getActiveEditor().getParseController().getCurrentAst().getLeftIToken().getILexStream();
-		if(TextPositions.isUnvalidInterval(pos_start, pos_end, lexStream))
+		if(DocumentaryStructure.isUnvalidInterval(pos_start, pos_end, lexStream))
 			return null;
 		String textfragment=lexStream.toString(pos_start, pos_end);
 		return textfragment;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Wed Jul 14 12:37:23 2010	(r21103)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
@@ -47,11 +47,11 @@
 		StrategoTuple tuple=(StrategoTuple)tvars[1];
 		position_start=((StrategoInt)tuple.get(0)).intValue();
 		position_end=((StrategoInt)tuple.get(1)).intValue()-1; //exclusive end pos
-		if(position_start==-1 && position_end==-1){
+		if(position_start< 0 && position_end < 0){
 			position_start=0;
 			position_end=lexStream.getStreamLength()-1;
 		}
-		if(TextPositions.isUnvalidInterval(position_start, position_end, lexStream))
+		if(DocumentaryStructure.isUnvalidInterval(position_start, position_end, lexStream))
 			return false;
 		String text = ((IStrategoString)tvars[2]).stringValue();
 		try {

From m.dejonge at tudelft.nl  Wed Jul 14 15:17:56 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 14 Jul 2010 13:17:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21105 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201007141317.o6EDHuTM032752@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Jul 14 13:17:56 2010
New Revision: 21105
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21105&sc=1

Log:


Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java   (contents, props changed)
      - copied, changed from r21104, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentAfterPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentBeforePrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java (from r21104, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentaryStructure.java	Wed Jul 14 13:14:25 2010	(r21104, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java	Wed Jul 14 13:17:56 2010	(r21105)
@@ -6,13 +6,12 @@
 import lpg.runtime.IPrsStream;
 import lpg.runtime.IToken;
 
-import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRToken;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 
-public class DocumentaryStructure {
+public class DocumentStructure {
 	
 	private String seperatingWhitespace;
 	private ArrayList<IToken> commentsBefore;
@@ -68,7 +67,7 @@
 		return seperatingWhitespace;
 	}
 	
-	public DocumentaryStructure(IWrappedAstNode node) {
+	public DocumentStructure(IWrappedAstNode node) {
 		initialize();
 		this.node=node.getNode();
 		analysize();
@@ -341,7 +340,7 @@
 		public String getText(ILexStream lexStream) {
 			if(start==end)
 				return "";
-			if(DocumentaryStructure.isUnvalidInterval(start, end, lexStream))
+			if(DocumentStructure.isUnvalidInterval(start, end, lexStream))
 				return null;
 			String textfragment=lexStream.toString(start, end-1);
 			return textfragment;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentAfterPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentAfterPrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentAfterPrimitive.java	Wed Jul 14 13:17:56 2010	(r21105)
@@ -4,7 +4,7 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.stratego.DocumentaryStructure.TextFragment;
+import org.strategoxt.imp.runtime.stratego.DocumentStructure.TextFragment;
 import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 
 /**
@@ -19,7 +19,7 @@
 
 	@Override
 	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
-		DocumentaryStructure loStructure=new DocumentaryStructure(node);
+		DocumentStructure loStructure=new DocumentStructure(node);
 		TextFragment commentBlock=loStructure.getCommentsAfter();
 		if(commentBlock==null)
 			return null;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentBeforePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentBeforePrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginCommentBeforePrimitive.java	Wed Jul 14 13:17:56 2010	(r21105)
@@ -4,7 +4,7 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.stratego.DocumentaryStructure.TextFragment;
+import org.strategoxt.imp.runtime.stratego.DocumentStructure.TextFragment;
 import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 
 /**
@@ -19,7 +19,7 @@
 
 	@Override
 	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
-		DocumentaryStructure loStructure=new DocumentaryStructure(node);
+		DocumentStructure loStructure=new DocumentStructure(node);
 		TextFragment commentBlock=loStructure.getCommentsBefore();
 		if(commentBlock==null)
 			return null;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginIndentationPrimitive.java	Wed Jul 14 13:17:56 2010	(r21105)
@@ -16,7 +16,7 @@
 
 	@Override
 	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
-		DocumentaryStructure loStructure=new DocumentaryStructure(node);
+		DocumentStructure loStructure=new DocumentStructure(node);
 		ITermFactory factory = env.getFactory();
 		return factory.makeString(loStructure.getIndentNode());
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetWithLayoutPrimitive.java	Wed Jul 14 13:17:56 2010	(r21105)
@@ -16,7 +16,7 @@
 
 	@Override
 	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
-		DocumentaryStructure loStructure=new DocumentaryStructure(node);
+		DocumentStructure loStructure=new DocumentStructure(node);
 		ITermFactory factory = env.getFactory();
 		return factory.makeTuple(
 				factory.makeInt(loStructure.textWithLayout().getStart()),

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java	Wed Jul 14 13:17:56 2010	(r21105)
@@ -16,7 +16,7 @@
 
 	@Override
 	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
-		DocumentaryStructure loStructure=new DocumentaryStructure(node);
+		DocumentStructure loStructure=new DocumentStructure(node);
 		ITermFactory factory = env.getFactory();
 		return factory.makeString(loStructure.getSeperatingWhitespace());
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Wed Jul 14 13:17:56 2010	(r21105)
@@ -46,7 +46,7 @@
 		int pos_end=((StrategoInt)position.get(1)).intValue()-1;//exclusive
 		ILexStream lexStream = ((IWrappedAstNode)position.get(2)).getNode().getLeftIToken().getILexStream();
 		//ILexStream lexStream= EditorState.getActiveEditor().getParseController().getCurrentAst().getLeftIToken().getILexStream();
-		if(DocumentaryStructure.isUnvalidInterval(pos_start, pos_end, lexStream))
+		if(DocumentStructure.isUnvalidInterval(pos_start, pos_end, lexStream))
 			return null;
 		String textfragment=lexStream.toString(pos_start, pos_end);
 		return textfragment;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Wed Jul 14 13:14:25 2010	(r21104)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Wed Jul 14 13:17:56 2010	(r21105)
@@ -51,7 +51,7 @@
 			position_start=0;
 			position_end=lexStream.getStreamLength()-1;
 		}
-		if(DocumentaryStructure.isUnvalidInterval(position_start, position_end, lexStream))
+		if(DocumentStructure.isUnvalidInterval(position_start, position_end, lexStream))
 			return false;
 		String text = ((IStrategoString)tvars[2]).stringValue();
 		try {

From L.C.L.Kats at tudelft.nl  Wed Jul 14 15:22:09 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 14 Jul 2010 13:22:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21106 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201007141322.o6EDM9w4000350@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Jul 14 13:22:09 2010
New Revision: 21106
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21106&sc=1

Log:
Release 0.5.2.5

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Jul 14 13:17:56 2010	(r21105)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Jul 14 13:22:09 2010	(r21106)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2.4"
+      version="0.5.2.5"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -212,7 +212,7 @@
          id="org.strategoxt.strj"
          download-size="0"
          install-size="0"
-         version="0.17.91.qualifier"/>
+         version="0.17.92.qualifier"/>
 
    <plugin
          id="org.strategoxt.imp.generator"

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Jul 14 13:17:56 2010	(r21105)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Jul 14 13:22:09 2010	(r21106)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.4.jar" id="org.strategoxt.imp" version="0.5.2.4">
+   <feature url="features/org.strategoxt.imp_0.5.2.5.jar" id="org.strategoxt.imp" version="0.5.2.5">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From L.C.L.Kats at tudelft.nl  Wed Jul 14 16:12:27 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 14 Jul 2010 14:12:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21107 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strat...
Message-ID: <201007141412.o6EECRIm001119@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Jul 14 14:12:24 2010
New Revision: 21107
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21107&sc=1

Log:
Report syntax errors even when there is a parse time out (included in 0.5.2.5 release after merging Maartje's fixes)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	Wed Jul 14 13:22:09 2010	(r21106)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	Wed Jul 14 14:12:24 2010	(r21107)
@@ -420,6 +420,8 @@
 		int reportedLine = -1;
 		for (BadTokenException e : source.getParser().getParser().getCollectedErrors()) {
 			if (e.getLineNumber() >= line && e.getLineNumber() <= endLine) {
+				// tokenizer.getLexStream().getInputChars() may contain SKIPPED_CHAR characters,
+				// so we switch it with inputChars
 				char[] processedChars = tokenizer.getLexStream().getInputChars();
 				tokenizer.getLexStream().setInputChars(inputChars);
 				reportError(tokenizer, (Exception) e); // use double dispatch
@@ -464,8 +466,19 @@
 		String message = "Internal parsing error: " + exception.getMessage();
 		reportErrorAtFirstLine(message);
 		reportError(tokenizer, (MultiBadTokenException) exception);
+		reportCollectedErrorsDirectly(tokenizer);
 		setRushNextUpdate(true);
 	}
+	
+	private void reportCollectedErrorsDirectly(SGLRTokenizer tokenizer) {
+		for (BadTokenException e : source.getParser().getParser().getCollectedErrors()) {
+			// tokenizer.getLexStream().getInputChars() may contain SKIPPED_CHAR characters,
+			// so we have to use the message provided by the exceptions directly
+			IToken token = tokenizer.makeErrorToken(e.getOffset());
+			String message = e.getMessage();
+			reportErrorAtTokens(token, token, message);
+		}
+	}
 	 
 	public void reportError(SGLRTokenizer tokenizer, Exception exception) {
 		try {
@@ -482,6 +495,7 @@
 			String message = "Internal parsing error: " + exception;
 			Environment.logException("Internal parsing error: " + exception.getMessage(), exception);
 			reportErrorAtFirstLine(message);
+			reportCollectedErrorsDirectly(tokenizer);
 		}
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Jul 14 13:22:09 2010	(r21106)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Jul 14 14:12:24 2010	(r21107)
@@ -543,7 +543,7 @@
 	
 	private String getPrefix(int offset, String document) {
 		int prefixStart = offset;
-		int lastGoodPrefixStart = offset + 1;
+		int lastGoodPrefixStart = offset;
 		while (--prefixStart >= 0) {
 			String prefix = document.substring(prefixStart, offset);
 			if (identifierLexical.matcher(prefix).matches()) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Jul 14 13:22:09 2010	(r21106)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Jul 14 14:12:24 2010	(r21107)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.5.jar" id="org.strategoxt.imp" version="0.5.2.5">
+   <feature url="features/org.strategoxt.imp_0.5.2.5.jar" id="org.strategoxt.imp" version="0.5.2.5"> 
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From L.C.L.Kats at tudelft.nl  Wed Jul 14 16:59:00 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 14 Jul 2010 14:59:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21108 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans
Message-ID: <201007141459.o6EEx0qu001633@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Jul 14 14:59:00 2010
New Revision: 21108
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21108&sc=1

Log:
Fixed bogus kernel syntax error messages

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Wed Jul 14 14:12:24 2010	(r21107)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Wed Jul 14 14:59:00 2010	(r21108)
@@ -54,7 +54,9 @@
   declare-globals:
     prod @ prod(lhs, sort, _) -> <id>
     where
-      !sort => sort(x) <+ !sort => parametrized-sort(x, _)
+      !sort;
+      try(?cf(<id>) + ?lex(<id>));
+      (?sort(x) + ?parameterized-sort(x, _))
     with
       <Declaration> x
     <+

From L.C.L.Kats at tudelft.nl  Thu Jul 15 10:24:05 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 15 Jul 2010 08:24:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21109 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.sdf/trans
	org.strategoxt.imp.feature org.strategoxt.imp.updatesite
Message-ID: <201007150824.o6F8O5Ka015641@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Jul 15 08:24:02 2010
New Revision: 21109
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21109&sc=1

Log:
Release 0.5.2.6

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Wed Jul 14 14:59:00 2010	(r21108)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Thu Jul 15 08:24:02 2010	(r21109)
@@ -56,6 +56,7 @@
     where
       !sort;
       try(?cf(<id>) + ?lex(<id>));
+      repeat(?label(_, <id>));
       (?sort(x) + ?parameterized-sort(x, _))
     with
       <Declaration> x
@@ -73,6 +74,21 @@
     with
       alltd(declare-use)
   
+  declare-globals:
+    context-free-start-symbols(_) -> <id>
+    with
+      alltd(declare-use)
+  
+  declare-globals:
+    lexical-start-symbols(_) -> <id>
+    with
+      alltd(declare-use)
+  
+  declare-globals:
+    kernel-start-symbols(_) -> <id>
+    with
+      alltd(declare-use)
+  
   declare-simple-global:
     sort(x) -> <id>
     with

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Jul 14 14:59:00 2010	(r21108)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Thu Jul 15 08:24:02 2010	(r21109)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2.5"
+      version="0.5.2.6"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Jul 14 14:59:00 2010	(r21108)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Thu Jul 15 08:24:02 2010	(r21109)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.5.jar" id="org.strategoxt.imp" version="0.5.2.5"> 
+   <feature url="features/org.strategoxt.imp_0.5.2.6.jar" id="org.strategoxt.imp" version="0.5.2.6">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From L.C.L.Kats at tudelft.nl  Thu Jul 15 12:53:03 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 15 Jul 2010 10:53:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21110 -
	strc-java/trunk/java/runtime/org/strategoxt/lang/terms
Message-ID: <201007151053.o6FAr336017429@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Jul 15 10:53:03 2010
New Revision: 21110
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21110&sc=1

Log:
Spoofax/207: build fails with an error No pp entry found for: (1,["unparameterized"])

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	Thu Jul 15 08:24:02 2010	(r21109)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	Thu Jul 15 10:53:03 2010	(r21110)
@@ -263,9 +263,13 @@
 				throw new UnsupportedOperationException("Unable to annotate term of type " + term.getClass().getName());
 			}
         } else if (term instanceof StrategoTerm) {
-        	StrategoTerm result = ((StrategoTerm) term).clone();
-    	    result.internalSetAnnotations(annotations);
-    	    return result;
+        	if ((annotations == EMPTY_LIST || annotations.isEmpty()) && term.getTermType() == STRING) {
+        		return makeString(((IStrategoString) term).stringValue());
+        	} else {
+	        	StrategoTerm result = ((StrategoTerm) term).clone();
+	    	    result.internalSetAnnotations(annotations);
+	    	    return result;        		
+        	}
     	} else {
             throw new UnsupportedOperationException("Unable to annotate term of type " + term.getClass().getName() + " in " + getClass().getName());
         }

From L.C.L.Kats at tudelft.nl  Thu Jul 15 12:54:42 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 15 Jul 2010 10:54:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21111 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.updatesite
Message-ID: <201007151054.o6FAsgm6017434@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Jul 15 10:54:42 2010
New Revision: 21111
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21111&sc=1

Log:
Release 0.5.2.7

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Thu Jul 15 10:53:03 2010	(r21110)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Thu Jul 15 10:54:42 2010	(r21111)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2.6"
+      version="0.5.2.7"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java	Thu Jul 15 10:53:03 2010	(r21110)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java	Thu Jul 15 10:54:42 2010	(r21111)
@@ -48,7 +48,7 @@
 		StringBuffer result = new StringBuffer();
 		addPageProlog(result);
 		result.append("<p>");
-		result.append(/*convertToHTMLContent*/(annotations.get(0).getText())); // UNDONE: Moved to StrategoObserver
+		result.append(convertToHTMLContent(annotations.get(0).getText()));
 		result.append("</p>");
 		addPageEpilog(result);
     	return result.toString();

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Thu Jul 15 10:53:03 2010	(r21110)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Thu Jul 15 10:54:42 2010	(r21111)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.6.jar" id="org.strategoxt.imp" version="0.5.2.6">
+   <feature url="features/org.strategoxt.imp_0.5.2.7.jar" id="org.strategoxt.imp" version="0.5.2.7">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From L.C.L.Kats at tudelft.nl  Fri Jul 16 16:05:38 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 16 Jul 2010 14:05:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21112 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans
	spoofax-imp/trunk/org.strategoxt.imp.editors.strateg...
Message-ID: <201007161405.o6GE5cDR005246@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Jul 16 14:05:35 2010
New Revision: 21112
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21112&sc=1

Log:
- hackfix to make sure we always use the same ATermFactory to hopefully fix an imploder problem Rob encountered
- added tentative new syntax for context-sensitive syntax completions
- added reference resolving for import declarations for SDF and Stratego based on Zef's example :)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/FoldingUpdaterFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposalTemplate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Completions.esv	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Completions.esv	Fri Jul 16 14:05:35 2010	(r21112)
@@ -6,7 +6,7 @@
     "->\s*[A-Za-z0-9]+\s*\{"
 
   completion trigger:
-    "->[\ \t]"
+    "->[\ \t]+"
 
   completion proposer:
     editor-complete
@@ -123,4 +123,4 @@
     ", bracket"
 
   completion keyword:
-    ", recover"
\ No newline at end of file
+    ", recover"

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Fri Jul 16 14:05:35 2010	(r21112)
@@ -40,6 +40,11 @@
     (sort(x), position, ast, path, project-path) -> target
     where
       target := <Declaration> x
+ 
+  editor-resolve:
+    (unparameterized(x), position, ast, path, project-path) -> target
+    where
+      target := <parse-sdf-file> <resolve-import> x
 
   override pp-sdf-string = fail // ensure compiler doesn't blow up
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Fri Jul 16 14:05:35 2010	(r21112)
@@ -57,6 +57,11 @@
       target := <declaration-of> <term-at-position(|position')> <DecoratedAst>
     <+
       target := <declaration-of> <parent-at-position(|position')> <DecoratedAst>
+  
+  editor-resolve:
+    (Import(x), position, ast, path, project-path) -> target
+    where
+      target := <parse-stratego-file> <resolve-import-decl> x
 
   editor-hover:
     (node, position, ast, path, project-path) -> text

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf	Fri Jul 16 14:05:35 2010	(r21112)
@@ -25,6 +25,8 @@
     "completion" "keyword" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionKeyword")}
     
     "completion" "template" ":" PropertyValue CompletionPart+ CompletionAnno -> SemanticRule {cons("CompletionTemplate")}
+    
+    "completion" "template" ":" Sort "=" PropertyValue CompletionPart+ CompletionAnno -> SemanticRule {cons("CompletionTemplateWithSort")}
 
     "completion" "trigger" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionTrigger")}
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Fri Jul 16 14:05:35 2010	(r21112)
@@ -8,6 +8,8 @@
    CompletionKeyword    -- R [ H [ KW["completion"] KW["keyword"] ] KW[":"] H [ _1 _2 ] ],
    CompletionTemplate   -- R [ H [ KW["completion"] KW["template"] ] KW[":"] H [ _1 _2 _3 ] ],
    CompletionTemplate.2:iter-star -- _1,
+   CompletionTemplateWithSort   -- R [ H [ KW["completion"] KW["template"] ] KW[":"] H [ _1 KW["="] _1 _2 _3 ] ],
+   CompletionTemplateWithSort.3:iter-star -- _1,
    CompletionTrigger    -- R [ H [ KW["completion"] KW["trigger"] ] KW[":"] H [ _1 _2 ] ],
    HoverRule            -- R [ H [ KW["hover"]     _1 ] KW[":"] _2 ],
    OccurrenceRule       -- R [ H [ KW["occurrence"] _1 ] H [ KW[":"] _2 ] ],

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf	Fri Jul 16 14:05:35 2010	(r21112)
@@ -17,5 +17,5 @@
 
   context-free syntax
 
-    Node               -> OutlineRule {cons("OutlineRule"), prefer}
-    Term[StrategoExpr] -> OutlineRule {cons("OutlineRule")}
+    Node                 -> OutlineRule {cons("OutlineRule"), prefer}
+    Term[[StrategoExpr]] -> OutlineRule {cons("OutlineRule")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -57,6 +57,7 @@
 		try {
 			agent = new EditorIOAgent();
 			context = new Context(Environment.getTermFactory(), agent);
+			context.getCompatManager().setATermFactory(Environment.getATermFactory());
 			context.registerClassLoader(sdf2imp.class.getClassLoader());
 			sdf2imp.init(context);
 			assert sdf2imp._consSdfMainModuleFlag_0 != null && stratego_lib._consAlert_0 != null;

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -119,6 +119,7 @@
 		EditorIOAgent agent = new EditorIOAgent();
 		agent.setAlwaysActivateConsole(true);
 		Context context = new Context(Environment.getTermFactory(), agent);
+		context.getCompatManager().setATermFactory(Environment.getATermFactory());
 		context.registerClassLoader(make_permissive.class.getClassLoader());
 		sdf2imp.init(context);
 		monitor.worked(1);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -156,7 +156,7 @@
 	 */
 	public IDocument getDocument() {
 		IDocumentProvider provider = getEditor().getDocumentProvider();
-		return provider.getDocument(getEditor().getEditorInput());
+		return provider == null ? null : provider.getDocument(getEditor().getEditorInput());
 	}
 	
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -202,6 +202,7 @@
 				}
 			};
 		
+		result.getCompiledContext().getCompatManager().setATermFactory(getATermFactory());
 		result.getCompiledContext().getExceptionHandler().setEnabled(false);
 		result.getCompiledContext().registerComponent("stratego_lib"); // ensure op. registry available
 		result.getCompiledContext().registerComponent("stratego_sglr"); // ensure op. registry available
@@ -225,6 +226,7 @@
 				IMPJSGLRLibrary.REGISTRY_NAME, // is spoofax-specific
 				JSGLRLibrary.REGISTRY_NAME,    // connected to the library above
 				IMPLibrary.REGISTRY_NAME);     // also used
+		result.getCompiledContext().getCompatManager().setATermFactory(getATermFactory());
 		result.getCompiledContext().getExceptionHandler().setEnabled(false);
 		IMPJSGLRLibrary parseLibrary = ((IMPJSGLRLibrary) result.getContext().getOperatorRegistry(IMPJSGLRLibrary.REGISTRY_NAME));
 		parseLibrary.addOverrides(result.getCompiledContext());

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -99,7 +99,17 @@
 			IStrategoList completionParts = termAt(template, 1);
 			IStrategoTerm anno = termAt(template, 2);
 			completionParts = Environment.getTermFactory().makeListCons(prefixTerm, completionParts);
-			results.add(new ContentProposalTemplate(prefix, completionParts, "Blank".equals(cons(anno))));
+			results.add(new ContentProposalTemplate(prefix, null, completionParts, "Blank".equals(cons(anno))));
+		}
+
+		for (IStrategoAppl template : collectTerms(descriptor.getDocument(), "CompletionTemplateWithSort")) {
+			IStrategoTerm prefixTerm = termAt(template, 0);
+			String prefix = termContents(prefixTerm);
+			String sort = termContents(termAt(template, 1));
+			IStrategoList completionParts = termAt(template, 2);
+			IStrategoTerm anno = termAt(template, 3);
+			completionParts = Environment.getTermFactory().makeListCons(prefixTerm, completionParts);
+			results.add(new ContentProposalTemplate(prefix, sort, completionParts, "Blank".equals(cons(anno))));
 		}
 		
 		return results.toArray(new ContentProposalTemplate[0]);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/FoldingUpdaterFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/FoldingUpdaterFactory.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/FoldingUpdaterFactory.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -5,6 +5,7 @@
 
 import org.eclipse.imp.services.IFoldingUpdater;
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.services.FoldingUpdater;
 import org.strategoxt.imp.runtime.services.NodeMapping;
@@ -39,6 +40,7 @@
 				folded.remove(mapping);
 				defaultFolded.remove(mapping);
 			} else {
+				Environment.logWarning("Unknown folding rule type:" + type);
 				defaultFolded.add(mapping);
 			}
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -25,6 +25,7 @@
 import org.eclipse.imp.parser.SimpleAnnotationTypeInfo;
 import org.eclipse.imp.services.IAnnotationTypeInfo;
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
+import org.eclipse.jface.text.IDocument;
 import org.eclipse.jface.text.IRegion;
 import org.eclipse.jface.text.Region;
 import org.spoofax.jsglr.BadTokenException;
@@ -64,7 +65,7 @@
  */
 public class SGLRParseController implements IParseController {
 	
-	private static final int PARSE_TIMEOUT = 4 * 1000;
+	private static final int PARSE_TIMEOUT = 6 * 1000;
 	
 	private final TokenKindManager tokenManager = new TokenKindManager();
 	
@@ -488,9 +489,11 @@
 		//   - a parser thread with a parse lock may forceRecolor(), acquiring the colorer queue lock 
 		//   - a parser thread with a parse lock may need main thread acess to report errors
 		
-		IPrsStream stream = currentParseStream;
+		IPrsStream stream = currentParseStream;		
+		IDocument document = editor == null ? null : editor.getDocument();
 		
-		if (!force && (stream == null || disallowColorer || (editor != null && stream.getILexStream().getStreamLength() != editor.getDocument().getLength()))) {
+		if (!force && (stream == null || disallowColorer
+				|| (document != null && stream.getILexStream().getStreamLength() != document.getLength()))) {
 			return SGLRTokenIterator.EMPTY;
 		} else if (stream.getTokens().size() == 0 || getCurrentAst() == null) {
 			// Parse hasn't succeeded yet, consider the entire stream as one big token

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -81,6 +81,10 @@
 	public AstNode implode(ATerm asfix, SGLRTokenizer tokenizer) {
 		this.tokenizer = tokenizer;
 		
+		// FIXME: static fields are used in helper classes that refer to Environment.getATermFactory()
+		if (asfix.getFactory() != Environment.getATermFactory())
+			throw new IllegalArgumentException("Argument ATerm does not use the Environment.getATermFactory() factory");
+		
 		// TODO: Return null if imploded tree has null constructor??
 		
 		if (tokenizer.getCachedAst() != null)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposalTemplate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposalTemplate.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposalTemplate.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -18,15 +18,22 @@
 	
 	private final String prefix;
 	
+	private final String sort;
+	
 	private final IStrategoList completionParts;
 	
 	private final boolean blankLineRequired;
 
-	public ContentProposalTemplate(String prefix, IStrategoList completionParts, boolean blankLineRequired) {
+	public ContentProposalTemplate(String prefix, String sort, IStrategoList completionParts, boolean blankLineRequired) {
 		this.prefix = prefix;
+		this.sort = sort;
 		this.completionParts = completionParts;
 		this.blankLineRequired = blankLineRequired;
 	}
+	
+	public String getSort() {
+		return sort;
+	}
 
 	public String getPrefix() {
 		return prefix;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -169,9 +169,9 @@
 			precedingToken = tokenStream.getTokenAt(loopIndex);
 		}
 		//System.out.println("comm before: ");
-		for (IToken commentTok : precedingComments) {
+		//for (IToken commentTok : precedingComments) {
 			//System.out.println(commentTok.toString());
-		}	
+		//}	
 		//System.out.println();
 		
 		//Comments may attach to sublists rather then single nodes

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -154,6 +154,10 @@
     	compat.registerComponent(componentName);
     }
     
+    public CompatManager getCompatManager() {
+    	return compat;
+    }
+    
     public void setStandAlone(boolean isStandAlone) {
     	exceptionHandler.setEnabled(isStandAlone);
     }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -1,5 +1,6 @@
 package org.strategoxt.lang.compat;
 
+import java.lang.ref.WeakReference;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -21,6 +22,16 @@
 	
 	private static final Set<String> asyncComponents = new HashSet<String>();
 	
+	/**
+	 * The last ATermFactory used by the CompatManager. ATermFactories are
+	 * guaranteed thread-safe, and by sharing them we make sure only one
+	 * instance is used by CompatManager ensuring low memory consumption and
+	 * high compatibility.
+	 */
+	private static WeakReference<ATermFactory> lastATermFactory;
+	
+	private ATermFactory atermFactory;
+	
 	public CompatManager(Context context) {
 		this.context = context;
 	}
@@ -42,6 +53,20 @@
 		}
 	}
 	
+	public void setATermFactory(ATermFactory atermFactory) {
+		this.atermFactory = atermFactory;
+		lastATermFactory = new WeakReference<ATermFactory>(atermFactory);
+	}
+	
+	private ATermFactory getATermFactory() {
+		if (atermFactory == null) {
+			atermFactory = lastATermFactory == null ? null : lastATermFactory.get();
+			if (atermFactory == null) 
+				setATermFactory(new PureFactory());
+		}
+		return atermFactory;
+	}
+	
 	/**
 	 * Dynamically loads any compatibility library or operator registry
 	 * associated with a Stratego library.
@@ -52,9 +77,9 @@
 			report_failure_compat_1_0.init();
 			ReadFromFile_cached_0_0.init();
 		} else if ("stratego_sglr".equals(component)) {
-			ATermFactory atermFactory = new PureFactory();
-			context.addOperatorRegistry(new JSGLRLibrary(atermFactory));
-			context.addOperatorRegistry(new SGLRCompatLibrary(atermFactory));
+			ATermFactory factory = getATermFactory();
+			context.addOperatorRegistry(new JSGLRLibrary(factory));
+			context.addOperatorRegistry(new SGLRCompatLibrary(factory));
 		}
 	}
 }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	Thu Jul 15 10:54:42 2010	(r21111)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	Fri Jul 16 14:05:35 2010	(r21112)
@@ -23,6 +23,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.StrategoException;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -60,7 +61,7 @@
             	if (asyncStringPool.containsKey(name)) {
             		return true;
             	} else if (name.length() > MAX_POOLED_STRING_LENGTH) {
-            		throw new UnsupportedOperationException("String too long to be pooled (newname not allowed): " + name);
+            		throw new StrategoException("String too long to be pooled (newname not allowed): " + name);
             	} else {
                 	// HACK: pre-allocating strings to avoid race condition 
             		asyncStringPool.put(name, new WeakReference<StrategoString>(new StrategoString(name, null, MAXIMALLY_SHARED)));

From L.C.L.Kats at tudelft.nl  Mon Jul 19 12:06:46 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 19 Jul 2010 10:06:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21113 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201007191006.o6JA6kmV031672@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Jul 19 10:06:35 2010
New Revision: 21113
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21113&sc=1

Log:
Release 0.5.2.8

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Jul 16 14:05:35 2010	(r21112)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Jul 19 10:06:35 2010	(r21113)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2.7"
+      version="0.5.2.8"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Fri Jul 16 14:05:35 2010	(r21112)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Mon Jul 19 10:06:35 2010	(r21113)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.7.jar" id="org.strategoxt.imp" version="0.5.2.7">
+   <feature url="features/org.strategoxt.imp_0.5.2.8.jar" id="org.strategoxt.imp" version="0.5.2.8">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From m.dejonge at tudelft.nl  Tue Jul 20 16:45:32 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 20 Jul 2010 14:45:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21114 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201007201445.o6KEjXLP022103@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 20 14:45:26 2010
New Revision: 21114
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21114&sc=1

Log:
- separator
- text-with-layout

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java	Mon Jul 19 10:06:35 2010	(r21113)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java	Tue Jul 20 14:45:26 2010	(r21114)
@@ -17,27 +17,46 @@
 	private ArrayList<IToken> commentsBefore;
 	private ArrayList<IToken> commentsAfter;
 	private String indentNode;
-	private int indentValueNode;
-	private int startLayoutBefore;
 	private IStrategoAstNode node;
 	
 	public TextFragment textWithLayout(){
 		TextFragment originText=new TextFragment();
-		originText.setStart(startLayoutBefore);
-		TextFragment commentAfter = getCommentsAfter();
-		if(commentAfter==null){
-			originText.setEnd(node.getRightIToken().getEndOffset()+1);
-		}
-		else{
-			originText.setEnd(commentAfter.getEnd());
-			if(commentAfter.getText(getLexStream()).endsWith("\n") 
-					&& originText.getText(getLexStream()).startsWith("\n")){
-				originText.setStart(startLayoutBefore+1); //correction in case the line-comment ends with \n
-			}
-		}
+		originText.setStart(getLayoutStart());
+		originText.setEnd(getLayoutEnd());
 		return originText;
 	}
 
+	private int getLayoutEnd() {
+		int endOffset;
+		if(!commentsAfter.isEmpty())
+			endOffset=commentsAfter.get(commentsAfter.size()-1).getEndOffset()+1;
+		else
+			endOffset=node.getRightIToken().getEndOffset()+1;
+		int lookForward=endOffset-1;
+		do{
+			if(getLexStream().getCharValue(endOffset)=='\n')
+				endOffset=lookForward+1;
+			lookForward++;
+		} while(lookForward < getLexStream().getStreamLength() && isSpaceChar(getLexStream().getCharValue(lookForward)));
+		return endOffset;
+	}
+
+	private int getLayoutStart() {
+		int startOffset;
+		if(!commentsBefore.isEmpty())
+			startOffset=commentsBefore.get(0).getStartOffset();
+		else
+			startOffset=node.getLeftIToken().getStartOffset();
+		while (startOffset>0 && isSpaceChar(getLexStream().getCharValue(startOffset-1))) {
+			startOffset--;
+		}
+		return startOffset;
+	}
+	
+	private boolean isSpaceChar(int c){
+		return (c=='\t' || c==' ');
+	}
+
 	private ILexStream getLexStream() {
 		return node.getLeftIToken().getILexStream();
 	}
@@ -55,7 +74,7 @@
 			return null;
 		TextFragment commentBlock=new TextFragment();
 		commentBlock.setStart(tokenList.get(0).getStartOffset());
-		commentBlock.setEnd(tokenList.get(tokenList.size()-1).getEndOffset());
+		commentBlock.setEnd(tokenList.get(tokenList.size()-1).getEndOffset()+1);
 		return commentBlock;
 	}
 	
@@ -77,9 +96,7 @@
 		commentsAfter=new ArrayList<IToken>();
 		commentsBefore=new ArrayList<IToken>();
 		indentNode="";
-		indentValueNode=0;
 		seperatingWhitespace=" ";
-		startLayoutBefore=-1;
 	}
 
 	private IToken getPrecedingNonLOToken(IToken startToken){
@@ -99,12 +116,10 @@
 		setCommentsBefore();
 		IToken startToken = node.getLeftIToken();
 		IPrsStream tokenStream=startToken.getIPrsStream();
-		indentNode=getIndentation(getLineText(tokenStream, startToken.getLine()));
-		indentValueNode=getIndentValue(getLineText(tokenStream, startToken.getLine()));
+		if (atLineStart(startToken)) {
+			indentNode = getIndentation(getLineText(tokenStream, startToken.getLine()));
+		}
 		setSeperatingWhitespace(startToken);
-		System.out.println("["+seperatingWhitespace+"]");
-		System.out.println("["+indentNode+"]");
-		System.out.println("["+indentValueNode+"]");
 		setCommentsAfter();
 	}
 
@@ -120,7 +135,7 @@
 		}
 		if(isEOFToken(nextToken) || nextToken.getLine() > startToken.getLine() || isLiteralToken(nextToken))
 			commentsAfter=followingComments; //TODO: <node> <literal> <comment> <newline> (typical pattern for seperators)
-		System.out.println(commentsAfter);
+		//System.out.println(commentsAfter);
 	}
 
 	private IToken getNextToken(IPrsStream tokenStream, IToken nextToken) {
@@ -168,11 +183,6 @@
 			loopIndex--;
 			precedingToken = tokenStream.getTokenAt(loopIndex);
 		}
-		//System.out.println("comm before: ");
-		//for (IToken commentTok : precedingComments) {
-			//System.out.println(commentTok.toString());
-		//}	
-		//System.out.println();
 		
 		//Comments may attach to sublists rather then single nodes
 		if(!precedingComments.isEmpty()){
@@ -214,7 +224,6 @@
 		}
 		else
 			seperatingWhitespace=" ";
-		startLayoutBefore=startOffsetSepWS;
 	}
 
 	private String correctWSIndentation(String line, String indent) {
@@ -251,6 +260,13 @@
 			//System.out.println(new TextFragment(emptyLineOffset, emptyLineOffset+10).getText());
 		return emptyLineOffset;
 	}
+	
+	private boolean atLineStart(IToken startToken) {
+		IPrsStream tokenStream = startToken.getIPrsStream();
+		int start=tokenStream.getLineOffset(startToken.getLine()-1)+1;
+		TextFragment prefix=new TextFragment(start, startToken.getStartOffset());
+		return prefix.getText(getLexStream()).trim().length()==0;
+	}
 
 	private String getLineText(IPrsStream tokenStream, int lindex) {
 		if(lindex<=0)
@@ -305,7 +321,7 @@
 		return TokenKind.valueOf(tok.getKind())==TokenKind.TK_EOF;
 	}
 	
-	private static boolean isLayoutToken(IToken tok) {
+	public static boolean isLayoutToken(IToken tok) {
 		return TokenKind.valueOf(tok.getKind())==TokenKind.TK_LAYOUT;
 	}
 	

From m.dejonge at tudelft.nl  Tue Jul 20 16:46:16 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 20 Jul 2010 14:46:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21115 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201007201446.o6KEkGHX022105@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 20 14:46:15 2010
New Revision: 21115
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21115&sc=1

Log:
- separator
- text-with-layout

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparatorPrimitive.java   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Tue Jul 20 14:45:26 2010	(r21114)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Tue Jul 20 14:46:15 2010	(r21115)
@@ -39,6 +39,7 @@
 		add(new CompleteWorkUnitPrimitive());
 		add(new OriginIndentationPrimitive());
 		add(new OriginSeperatingWhitespacePrimitive());
+		add(new OriginSeparatorPrimitive());
 	}
 
 	public String getOperatorRegistryName() {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparatorPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparatorPrimitive.java	Tue Jul 20 14:46:15 2010	(r21115)
@@ -0,0 +1,85 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import lpg.runtime.ILexStream;
+import lpg.runtime.IPrsStream;
+import lpg.runtime.IToken;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.parser.ast.AstNode;
+import org.strategoxt.imp.runtime.parser.ast.AstNodeFactory;
+import org.strategoxt.imp.runtime.parser.ast.ListAstNode;
+import org.strategoxt.imp.runtime.parser.ast.SubListAstNode;
+import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
+import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
+
+/**
+ * @author Maartje de Jonge
+ */
+public class OriginSeparatorPrimitive extends AbstractOriginPrimitive {
+
+	public OriginSeparatorPrimitive() {
+		super("SSL_EXT_origin_separator");
+	}
+
+	/**
+	 * Returns the separator and its location 
+	 * after a list element or sublist (before in case of last element(s)).
+	 * Returns null if the separator can not be found.
+	 */
+	@Override
+	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
+		IStrategoAstNode originNode=node.getNode();
+		SubListAstNode sublist;
+		AstNode left;
+		AstNode right;
+		if(originNode instanceof SubListAstNode){
+			sublist = (SubListAstNode) originNode;							
+		}
+		else{
+			IStrategoAstNode parent = node.getNode().getParent();
+			if(!(parent instanceof ListAstNode))
+				return null;
+			sublist = (SubListAstNode) new AstNodeFactory().createSublist((ListAstNode) parent, originNode, originNode, true);
+		}
+		ListAstNode list = sublist.getCompleteList();
+		int lastIndexList = list.getChildren().size()-1;
+		if(sublist.getIndexEnd() < lastIndexList){
+			left = sublist.getLastChild();
+			right = list.getChildren().get(sublist.getIndexEnd()+1);
+		}
+		else if(sublist.getIndexStart() > 0){
+			right = sublist.getFirstChild();
+			left = list.getChildren().get(sublist.getIndexStart()-1);				
+		}
+		else
+			return null; //complete list has no separator
+		
+		IPrsStream tokens=left.getRightIToken().getIPrsStream();
+		int startTokenSearch = left.getRightIToken().getTokenIndex()+1;
+		int endTokenSearch = right.getLeftIToken().getTokenIndex()-1;
+		int startSeparation=-1;
+		int endSeparation=-1;
+		int loopIndex=startTokenSearch;
+		while (loopIndex <= endTokenSearch) {
+			IToken tok = tokens.getTokenAt(loopIndex);
+			if(!DocumentStructure.isLayoutToken(tok)){
+				if(startSeparation==-1)
+					startSeparation=tok.getStartOffset();
+				endSeparation=tok.getEndOffset()+1;
+			}
+			loopIndex++;
+		}
+		ILexStream lex = originNode.getLeftIToken().getILexStream();
+		if(startSeparation!=-1){
+			ITermFactory factory = env.getFactory();
+			return factory.makeTuple(
+					factory.makeInt(startSeparation),
+					factory.makeInt(endSeparation),
+					factory.makeString(lex.toString(startSeparation, endSeparation-1))
+			);
+		}
+		return null;
+	}
+}

From m.dejonge at tudelft.nl  Tue Jul 20 16:46:57 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 20 Jul 2010 14:46:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21116 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201007201446.o6KEkvsk022109@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 20 14:46:56 2010
New Revision: 21116
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21116&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DialogPrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DialogPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DialogPrimitive.java	Tue Jul 20 14:46:15 2010	(r21115)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DialogPrimitive.java	Tue Jul 20 14:46:56 2010	(r21116)
@@ -42,8 +42,7 @@
 		
 		synchronized (Environment.getSyncRoot()) {
 			InputDialog dialog = new InputDialog(null, title.stringValue(), message.stringValue(), input.stringValue(), null);
-			if (dialog.open() == InputDialog.OK) {				
-				System.out.println("GELUKT");
+			if (dialog.open() == InputDialog.OK) {
 				String userInput=dialog.getValue();		
 				env.setCurrent(env.getFactory().makeString(userInput));
 				return true;

From L.C.L.Kats at tudelft.nl  Tue Jul 20 17:15:39 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 20 Jul 2010 15:15:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21117 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime...
Message-ID: <201007201515.o6KFFd5D022668@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Tue Jul 20 15:15:30 2010
New Revision: 21117
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21117&sc=1

Log:
- Fixed an issue in path-to-resource conversion that hopefully fixes Spoofax/211 and helps work around Spoofax/208
- Minor refactorings

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/OnSaveService.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/RefreshResourcePrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Tue Jul 20 14:46:56 2010	(r21116)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Tue Jul 20 15:15:30 2010	(r21117)
@@ -29,8 +29,8 @@
           ~~
           observer: editor-analyze
           ~~
-          builder: "Generate Java code"   = generate-java  (openeditor) (realtime)
-          builder: "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)
+          builder: "Generate Java code (for selection)"   = generate-java  (openeditor) (realtime)
+          builder: "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)
           ~~
           ~// on save: generate-java
       ]|

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	Tue Jul 20 14:46:56 2010	(r21116)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	Tue Jul 20 15:15:30 2010	(r21117)
@@ -345,7 +345,9 @@
 
 	private String ambToString(ATermAppl amb) {
 		if (asyncAmbReportingContext == null) {
-			asyncAmbReportingContext = stratego_sglr.init();
+			Context context = new Context();
+			context.getCompatManager().setATermFactory(Environment.getATermFactory());
+			asyncAmbReportingContext = stratego_sglr.init(context);
 			stratego_aterm.init(asyncAmbReportingContext);
 			sdf2imp.init(asyncAmbReportingContext);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/OnSaveService.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/OnSaveService.java	Tue Jul 20 14:46:56 2010	(r21116)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/OnSaveService.java	Tue Jul 20 15:15:30 2010	(r21117)
@@ -10,9 +10,9 @@
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.cons;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 
 import org.eclipse.core.resources.IFile;
-import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.imp.language.ILanguageService;
 import org.eclipse.jface.text.DocumentEvent;
@@ -70,9 +70,11 @@
 					// let's be friendly and try to refresh the file
 					String file = asJavaString(termAt(result, 0));
 					String contents = asJavaString(termAt(result, 1));
-					IResource resource = RefreshResourcePrimitive.getResource(runtime.getRuntime().getContext(), file);
 					try {
-						StrategoBuilder.setFileContentsDirect((IFile) resource, contents);
+						IFile resource = RefreshResourcePrimitive.getResource(runtime.getRuntime().getContext(), file);
+						StrategoBuilder.setFileContentsDirect(resource, contents);
+					} catch (FileNotFoundException e) {
+						Environment.logException("Problem when handling on save event", e);
 					} catch (CoreException e) {
 						Environment.logException("Problem when handling on save event", e);
 					}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Tue Jul 20 14:46:56 2010	(r21116)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Tue Jul 20 15:15:30 2010	(r21117)
@@ -7,7 +7,7 @@
 import static org.spoofax.interpreter.core.Tools.termAt;
 
 import java.io.ByteArrayInputStream;
-import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.InputStream;
 import java.util.Map;
 import java.util.WeakHashMap;
@@ -37,6 +37,7 @@
 import org.strategoxt.imp.runtime.MonitorStateWatchDog;
 import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.dynamicloading.TermReader;
+import org.strategoxt.imp.runtime.stratego.RefreshResourcePrimitive;
 import org.strategoxt.imp.runtime.stratego.StrategoConsole;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 import org.strategoxt.lang.Context;
@@ -152,7 +153,7 @@
 	private void execute(EditorState editor, IStrategoAstNode node, IFile errorReportFile, boolean isRebuild) {
 		// TODO: refactor
 		assert derivedFromEditor == null || editor.getDescriptor().isATermEditor();
-		String filename = null;
+		IFile file = null;
 		String result = null;
 		String errorReport = null;
 		
@@ -176,34 +177,15 @@
 				if (isTermAppl(resultTerm) && "None".equals(TermReader.cons(resultTerm))) {
 					return;
 				} else if (!isTermTuple(resultTerm) || !isTermString(termAt(resultTerm, 0))) {
-					Environment.logException("Illegal builder result (must be a filename/string tuple)");
-					openError(editor, "Illegal builder result (must be a filename/string tuple): " + resultTerm);
+					Environment.logException("Illegal builder result (must be a filename/string tuple or None())");
+					openError(editor, "Illegal builder result (must be a filename/string tuple or None()): " + resultTerm);
 				}
 	
-				IStrategoTerm filenameTerm = termAt(resultTerm, 0);
-				filename = asJavaString(filenameTerm);
+				file = getFile(resultTerm);
+				result = getResultString(resultTerm);
 				
-				resultTerm = termAt(resultTerm, 1);
-				resultTerm = try_1_0.instance.invoke(observer.getRuntime().getCompiledContext(),
-						resultTerm, concat_strings_0_0.instance);
-				
-				if (resultTerm != null && filename != null) {
-					result = isTermString(resultTerm) 
-						? asJavaString(resultTerm)
-						: ppATerm(resultTerm).stringValue();
-				}
 			} catch (InterpreterErrorExit e) {
-				Environment.logException("Builder failed:\n" + observer.getLog(), e);
-				if (editor.getDescriptor().isDynamicallyLoaded()) StrategoConsole.activateConsole();
-				if (errorReportFile == null || !openEditor) {
-					openError(editor, e.getMessage());
-				} else {
-					// UNDONE: Printing stack trace in editor
-					// ByteArrayOutputStream trace = new ByteArrayOutputStream();
-					// observer.getRuntime().getCompiledContext().printStackTrace(new PrintStream(trace), false);
-					errorReport = e.getMessage();
-					if (e.getTerm() != null) errorReport += "\n\t" + toEscapedString(ppATerm(e.getTerm()));
-				}
+				errorReport = reportErrorExit(e, editor, errorReportFile);
 			} catch (UndefinedStrategyException e) {
 				reportGenericException(editor, e);
 			} catch (InterpreterExit e) {
@@ -212,6 +194,8 @@
 				reportGenericException(editor, e);
 			} catch (CancellationException e) {
 				return;
+			} catch (FileNotFoundException e) {
+				reportGenericException(editor, e);
 			} catch (RuntimeException e) {
 				reportGenericException(editor, e);
 			} catch (Error e) {
@@ -225,11 +209,6 @@
 			}
 		
 			if (result != null) {
-				if (new File(filename).isAbsolute()) {
-					openError(editor, "Builder failed: result filename must have a project-relative path: " + filename);
-					return;
-				}
-				IFile file = editor.getProject().getRawProject().getFile(filename);
 				setFileContents(editor, file, result);
 				// TODO: if not persistent, create IEditorInput from result String
 				if (openEditor && !isRebuild) {
@@ -242,6 +221,37 @@
 		}
 	}
 
+	private String reportErrorExit(InterpreterErrorExit e, EditorState editor, IFile errorReportFile) {
+		Environment.logException("Builder failed:\n" + observer.getLog(), e);
+		if (editor.getDescriptor().isDynamicallyLoaded()) StrategoConsole.activateConsole();
+		if (errorReportFile == null || !openEditor) {
+			openError(editor, e.getMessage());
+			return null;
+		} else {
+			// UNDONE: Printing stack trace in editor
+			// ByteArrayOutputStream trace = new ByteArrayOutputStream();
+			// observer.getRuntime().getCompiledContext().printStackTrace(new PrintStream(trace), false);
+			String errorReport = e.getMessage();
+			if (e.getTerm() != null) errorReport += "\n\t" + toEscapedString(ppATerm(e.getTerm()));
+			return errorReport;
+		}
+	}
+
+	private IFile getFile(IStrategoTerm resultTerm) throws FileNotFoundException {
+		String filename = asJavaString(termAt(resultTerm, 0));
+		IFile result = RefreshResourcePrimitive.getResource(
+				observer.getRuntime().getContext(), filename);
+		return result;
+	}
+
+	private String getResultString(IStrategoTerm resultTerm) {
+		resultTerm = termAt(resultTerm, 1);
+		resultTerm = try_1_0.instance.invoke(observer.getRuntime().getCompiledContext(),
+				resultTerm, concat_strings_0_0.instance);
+		
+		return isTermString(resultTerm) ? asJavaString(resultTerm) : ppATerm(resultTerm).stringValue();
+	}
+
 	private void scheduleOpenEditorAndListener(final EditorState editor, final IStrategoAstNode node, final IFile file)
 			throws PartInitException {
 		
@@ -317,7 +327,7 @@
 	}
 
 	private void setFileContents(final EditorState editor, IFile file, final String contents) throws CoreException {
-		assert !Thread.holdsLock(observer.getSyncRoot()) || Thread.holdsLock(Environment.getSyncRoot())
+		assert !Thread.holdsLock(observer.getSyncRoot()) && !Thread.holdsLock(Environment.getSyncRoot())
 			: "Acquiring a resource lock can cause a deadlock";
 
 		/* TODO: update editor contents instead of file?
@@ -351,8 +361,6 @@
 		InputStream resultStream = new ByteArrayInputStream(contents.getBytes());
 		if (file.exists()) {
 			file.setContents(resultStream, true, true, null);
-			
-
 		} else {
 			file.create(resultStream, true, null);
 			// UNDONE: file.setDerived(!persistent); // marks it as "derived" for life, even after editing...

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java	Tue Jul 20 14:46:56 2010	(r21116)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java	Tue Jul 20 15:15:30 2010	(r21117)
@@ -1,7 +1,9 @@
 package org.strategoxt.imp.runtime.stratego;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 
+import org.eclipse.core.resources.IFile;
 import org.spoofax.interpreter.library.IOperatorRegistry;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -49,7 +51,13 @@
 		}
 		
 		AstNode result = imploder.implode(asfixATerm, tokenizer);
-		result = RootAstNode.makeRoot(result, null, RefreshResourcePrimitive.getResource(inputFile));
+		IFile resource;
+		try {
+			resource = RefreshResourcePrimitive.getResource(inputFile);
+		} catch (FileNotFoundException e) {
+			resource = null;
+		}
+		result = RootAstNode.makeRoot(result, null, resource);
 		return result.getTerm();
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/RefreshResourcePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/RefreshResourcePrimitive.java	Tue Jul 20 14:46:56 2010	(r21116)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/RefreshResourcePrimitive.java	Tue Jul 20 15:15:30 2010	(r21117)
@@ -5,8 +5,10 @@
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.net.URI;
 
+import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IWorkspace;
 import org.eclipse.core.resources.ResourcesPlugin;
@@ -23,7 +25,6 @@
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.Environment;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -45,9 +46,12 @@
 	}
 
 	public static boolean call(IContext env, String file) {
-		final IResource resource = getResource(env, file);
-		if (resource == null)
+		final IResource resource;
+		try {
+			resource = getResource(env, file);
+		} catch (FileNotFoundException e) {
 			return false;
+		}
 		
 		// Cannot acquire a workspace lock here:
 		// the Ant thread acquires 1) a workspace lock and 2) the environment lock
@@ -71,27 +75,24 @@
 		return true;
 	}
 
-	public static IResource getResource(IContext env, String file) {
+	public static IFile getResource(IContext env, String file) throws FileNotFoundException {
 		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
 		File file2 = new File(file);
-		if (!file2.exists() && agent instanceof EditorIOAgent)
-			file2 = new File(((EditorIOAgent) agent).getProjectPath() + "/" + file);
+		if (!file2.isAbsolute())
+			file2 = new File(agent.getWorkingDir() + "/" + file);
 		return getResource(file2);
 	}
 
-	public static IResource getResource(File file) {
+	public static IFile getResource(File file) throws FileNotFoundException {
 		if (file == null) {
 			assert false : "file should not be null";
 			return null;
 		}
 		URI uri = file.toURI();
 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
-		IResource[] resources = workspace.getRoot().findFilesForLocationURI(uri);
-		if (resources.length == 0) {
-			Environment.logWarning("File not in workspace: " + file);
-			return null;
-		}
-	
+		IFile[] resources = workspace.getRoot().findFilesForLocationURI(uri);
+		if (resources.length == 0)
+			throw new FileNotFoundException("File not in workspace: " + file);
 		return resources[0];
 	}
 

From L.C.L.Kats at tudelft.nl  Tue Jul 20 17:20:18 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 20 Jul 2010 15:20:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21118 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	strc-java/t...
Message-ID: <201007201520.o6KFKIur022807@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Tue Jul 20 15:20:14 2010
New Revision: 21118
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21118&sc=1

Log:
StrategoXT/834: Maximal sharing of strings may be broken; disabled it for now.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
   strc-java/trunk/java/spoofax-libs.jar

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	Tue Jul 20 15:15:30 2010	(r21117)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	Tue Jul 20 15:20:14 2010	(r21118)
@@ -429,6 +429,7 @@
             } else {
                 BasicStrategoTerm result = ((BasicStrategoTerm) term).clone();
                 result.internalSetAnnotations(annotations);
+                assert result.getStorageType() != IStrategoTerm.MAXIMALLY_SHARED;
                 return result;
             }
         } else if (term == null) {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	Tue Jul 20 15:15:30 2010	(r21117)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	Tue Jul 20 15:20:14 2010	(r21118)
@@ -97,7 +97,7 @@
         else
             fis = new BufferedInputStream(new FileInputStream(input));
         OutputStream ous = null;
-        if(output != null)
+        if(output != null && !"-".equals(output))
             ous = new FileOutputStream(output);
         else 
             ous = System.out;
@@ -114,7 +114,7 @@
             // Detailed message for other exceptions
             System.err.println("Parsing failed : " + e);
         }
-        if(t != null){            
+        if(t != null && !"-".equals(ous)){            
             String outputString=t.toString();
             ous.write(outputString.getBytes());
         }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	Tue Jul 20 15:15:30 2010	(r21117)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	Tue Jul 20 15:20:14 2010	(r21118)
@@ -40,7 +40,10 @@
 	}
 	
 	public ATerm getATerm(ATermFactory factory) {
-		if (aterm == null || factory != atermFactory) {
+		if (aterm == null) {
+			aterm = initATerm(factory);
+			atermFactory = factory;
+		} else if (factory != atermFactory) {
 			try {
 				aterm = factory.importTerm(aterm);
 			} catch (RuntimeException e) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java	Tue Jul 20 15:15:30 2010	(r21117)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java	Tue Jul 20 15:20:14 2010	(r21118)
@@ -23,6 +23,7 @@
         super(annotations);
         this.value = value;
         this.storageType = storageType;
+        assert storageType == MAXIMALLY_SHARED ? annotations == null : true;
         initImmutableHashCode();
     }
     
@@ -68,6 +69,7 @@
         IStrategoList annotations = getAnnotations();
         IStrategoList secondAnnotations = second.getAnnotations();
         if (annotations == secondAnnotations) {
+            assert annotations.isEmpty() ? this == second : true : "Maximal sharing contract broken";
         	return true;
         } else if (annotations.match(secondAnnotations)) {
         	if (commonStorageType == SHARABLE) internalSetAnnotations(secondAnnotations);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java	Tue Jul 20 15:15:30 2010	(r21117)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java	Tue Jul 20 15:20:14 2010	(r21118)
@@ -149,7 +149,7 @@
     @Override
     protected StrategoTerm clone() {
         try {
-        	if (getStorageType() == MAXIMALLY_SHARED) return this;
+        	assert getStorageType() != MAXIMALLY_SHARED;
             return (StrategoTerm) super.clone();
         } catch (CloneNotSupportedException e) {
             throw new RuntimeException(e); // silly checked exceptions...

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
==============================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	Tue Jul 20 15:15:30 2010	(r21117)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	Tue Jul 20 15:20:14 2010	(r21118)
@@ -34,6 +34,10 @@
     
     private static final int MY_STORAGE_TYPE = SHARABLE;
     
+    // Strings should be MAXIMALLY_SHARED, but we use
+    // a weaker assumption instead to be safe (StrategoXT/834)
+    private static final int STRING_STORAGE_TYPE = SHARABLE;
+    
     public static final int MAX_POOLED_STRING_LENGTH = 100;
     
     private static final IStrategoInt[] intCache = initIntCache();
@@ -64,7 +68,7 @@
             		throw new StrategoException("String too long to be pooled (newname not allowed): " + name);
             	} else {
                 	// HACK: pre-allocating strings to avoid race condition 
-            		asyncStringPool.put(name, new WeakReference<StrategoString>(new StrategoString(name, null, MAXIMALLY_SHARED)));
+            		asyncStringPool.put(name, new WeakReference<StrategoString>(new StrategoString(name, null, STRING_STORAGE_TYPE)));
             		return false;
             	}
         	} else {
@@ -201,7 +205,7 @@
 	    	WeakReference<StrategoString> resultRef = asyncStringPool.get(s);
 	    	StrategoString result = resultRef == null ? null : resultRef.get();
 	    	if (result == null) {
-	        	result = new StrategoString(s, null, MAXIMALLY_SHARED);
+	        	result = new StrategoString(s, null, STRING_STORAGE_TYPE);
 	        	asyncStringPool.put(s, new WeakReference<StrategoString>(result));
 	    	}
 	    	return result;
@@ -263,14 +267,13 @@
 			} else {
 				throw new UnsupportedOperationException("Unable to annotate term of type " + term.getClass().getName());
 			}
+        } else if ((annotations == EMPTY_LIST || annotations.isEmpty()) && term.getTermType() == STRING) {
+    		return makeString(((IStrategoString) term).stringValue());
         } else if (term instanceof StrategoTerm) {
-        	if ((annotations == EMPTY_LIST || annotations.isEmpty()) && term.getTermType() == STRING) {
-        		return makeString(((IStrategoString) term).stringValue());
-        	} else {
-	        	StrategoTerm result = ((StrategoTerm) term).clone();
-	    	    result.internalSetAnnotations(annotations);
-	    	    return result;        		
-        	}
+        	StrategoTerm result = ((StrategoTerm) term).clone();
+    	    result.internalSetAnnotations(annotations);
+    	    assert result.getStorageType() != MAXIMALLY_SHARED;
+    	    return result;
     	} else {
             throw new UnsupportedOperationException("Unable to annotate term of type " + term.getClass().getName() + " in " + getClass().getName());
         }

Modified: strc-java/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From L.C.L.Kats at tudelft.nl  Wed Jul 21 09:34:01 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 21 Jul 2010 07:34:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21119 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201007210734.o6L7Y1Sx002219@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Jul 21 07:33:59 2010
New Revision: 21119
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21119&sc=1

Log:
Release 0.5.2.9

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Jul 20 15:20:14 2010	(r21118)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Jul 21 07:33:59 2010	(r21119)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2.8"
+      version="0.5.2.9"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Tue Jul 20 15:20:14 2010	(r21118)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Jul 21 07:33:59 2010	(r21119)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.8.jar" id="org.strategoxt.imp" version="0.5.2.8">
+   <feature url="features/org.strategoxt.imp_0.5.2.9.jar" id="org.strategoxt.imp" version="0.5.2.9">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From m.dejonge at tudelft.nl  Wed Jul 21 11:41:53 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 21 Jul 2010 09:41:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21120 -
	refactoring/lib-reconstruction
Message-ID: <201007210941.o6L9frYE004438@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Jul 21 09:41:51 2010
New Revision: 21120
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21120&sc=1

Log:
separators supported

Added:
   refactoring/lib-reconstruction/origin-tracking.str
   refactoring/lib-reconstruction/text-to-text.str
Deleted:
   refactoring/lib-reconstruction/primitives.str
Modified:
   refactoring/lib-reconstruction/custom-pp-rules.str
   refactoring/lib-reconstruction/diff-ast.str
   refactoring/lib-reconstruction/text-construct.str

Modified: refactoring/lib-reconstruction/custom-pp-rules.str
==============================================================================
--- refactoring/lib-reconstruction/custom-pp-rules.str	Wed Jul 21 07:33:59 2010	(r21119)
+++ refactoring/lib-reconstruction/custom-pp-rules.str	Wed Jul 21 09:41:51 2010	(r21120)
@@ -1,42 +1,17 @@
 module lib-reconstruction/custom-pp-rules
 
 imports
-	libstratego-lib
-	libstratego-gpp
-	lib-reconstruction/text-construct
-	include/LayoutAlgorithm
-
+	include/JavaRefactoring
   
-rules
-	
-pretty-print=
-	custom-pp <+
-	default-pp
-
-default-pp:
-	t -> <
-			(
-				ast2abox(|[<import-term(include/LayoutAlgorithm.pp.af)>]); 
-				(box2text-string(|80))
-			)<+ 
-			write-to-string
-		 > t
 
-custom-pp=fail
+rules //generated pretty-print rules
+
+default-pp-table = 
+	import-term(include/JavaRefactoring.generated.pp.af)
+
+custom-pp-table = fail
+
 custom-interpolation=fail
 
-custom-pp:
-	t -> <
-			(
-				ast2abox(|[<import-term(include/RefactoringLibs.custom.pp.af)>]); 
-				(box2text-string(|80))
-			)<+ 
-			write-to-string
-		 > t
-
-custom-interpolation:
-	Entity(x, props) ->
-    $[ entity [x] {
-           [props]
-       }
-     ]
\ No newline at end of file
+
+rules // custom pretty print rules

Modified: refactoring/lib-reconstruction/diff-ast.str
==============================================================================
--- refactoring/lib-reconstruction/diff-ast.str	Wed Jul 21 07:33:59 2010	(r21119)
+++ refactoring/lib-reconstruction/diff-ast.str	Wed Jul 21 09:41:51 2010	(r21120)
@@ -2,24 +2,36 @@
 
 imports
   libstratego-lib
-  lib-reconstruction/primitives
-  lib/editor-common.generated  
+  lib-reconstruction/origin-tracking
+  lib/editor-common.generated
 
-//signatures for AST changes
-signature constructors
+
+signature constructors //signatures for AST changes
 	INSERT_AT_END : OldList * NewSubList -> AST_CHANGE
 	INSERT_BEFORE : OldNode * NewSubList -> AST_CHANGE
 	DETETION : OldNode -> AST_CHANGE
 	REPLACEMENT : OldNode * NewNode -> AST_CHANGE
+	LIST_REPLACEMENT : OldList * NewList * parent * index -> AST_CHANGE
 
 rules //collecting changes in textfragments
 
+/**
+ * Collect changes
+ * @Type (old, new) -> List(ASTChange)
+ */
 collect-changes=
 	collect-no-changes  <+
 	collect-changes-in-children <+
 	collect-changes-in-list <+
 	collect-replaced-node
-		
+
+/**
+ * Collect changes that require context information
+ * @Type (old, new, paren, index) -> List(ASTChange)
+ */
+collect-changes=
+	collect-list-replace
+
 collect-no-changes:
 	(old-node, new-node) -> []
 	where
@@ -31,22 +43,47 @@
 		(<eq>(old-node, <origin-term> new-node) <+ <not(origin-term)> new-node);
 		<same-signature <+ unmodified-list> (old-node, new-node);
 		zip-list:=<zip> (<get-arguments> old-node, <get-arguments> new-node);
-		change-list:=<map(collect-changes); flatten-list> zip-list
+		zip-list-with-context:=<map-with-index(add-context(|new-node))>; 
+		change-list:=<map(collect-changes); flatten-list> zip-list-with-context
+
+add-context(|parent): 
+	(i, (old-child, new-child)) -> result
+	where 
+		if 
+			<gt>(<length> new-child,1); //seperator info required for list with >=2 elements
+			not(<gt>(<length> old-child,1)) //seperator can not be gathered from the old list 
+		then
+			result:=(old-child, new-child, parent, <dec> i) 
+		else
+			result:=(old-child,new-child)//no context info required
+		end
 
 collect-changes-in-list:
 	(old-list, new-list) -> change-list
 	where
 		<is-list> old-list;
 		<is-list> new-list;
-		(matched-childs, insertions, deletions):=<diff-on-origin>(old-list, new-list);
+		(matched-childs, insertions, deletions):=<diff-on-origin>(old-list, new-list); 
 		changes-matched-childs:=<map(collect-changes); flatten-list> matched-childs;
 		change-list:=<conc>(insertions, deletions, changes-matched-childs)
-
+		
 collect-replaced-node:
 	(old-node, new-node) -> [REPLACEMENT(old-node, new-node)]
 
+collect-list-replace:
+	(old-node, new-list, parent, index) -> changes
+	where
+		if 
+			<gt>(<length> new-list,1); //seperator info required for list with >=2 elements
+			not(<gt>(<length> old-node,1)) //seperator can not be gathered from the old list 
+		then
+			changes:=[LIST_REPLACEMENT(old-node, new-list, parent, index)]
+		else
+			changes:=<collect-changes> (old-node, new-list)
+		end
+		
+
 rules //helper rules for list decomposition
-//TODO: cleaner implementation
 
 diff-on-origin: 
 	(old-list,new-list) -> (matched-childs, insertions, deletions)
@@ -66,9 +103,9 @@
 	where
 		if <?[h|tail]> old-list then
 			loc-h:=<origin-offset> h; 
-			if <fetch(origin-offset; ?loc-h)> new-list then
-				matching-h:=<fetch-elem(where(origin-offset; ?loc-h))> new-list;
-				(insertions-before, remaining):=<split-fetch(origin-offset; ?loc-h)> new-list;
+			if <fetch(?h <+ (origin-offset; ?loc-h))> new-list then
+				matching-h:=<fetch-elem(where(?h <+ (origin-offset; ?loc-h)))> new-list;
+				(insertions-before, remaining):=<split-fetch(?h <+ (origin-offset; ?loc-h))> new-list;
 				if <not(?[])> insertions-before then
 					insertions:=<conc>(arg-insertions, [INSERT_BEFORE(h, insertions-before)])
 				else

Added: refactoring/lib-reconstruction/origin-tracking.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ refactoring/lib-reconstruction/origin-tracking.str	Wed Jul 21 09:41:51 2010	(r21120)
@@ -0,0 +1,171 @@
+module lib-reconstruction/origin-tracking
+
+imports
+	lib/editor-common.generated
+
+strategies //origin tracking strategies
+
+/**
+ * Extends the origin-term strategy with support for sublists
+ * @type List(Aterm) -> List(Aterm)
+ */
+origin-term = 
+	origin-sublist-term
+
+/**
+ * Returns the origin-term of a sublist
+ * @type List(Aterm) -> List(Aterm)
+ */
+origin-sublist-term = 
+	prim("SSL_EXT_origin_sublist_term","", <id>)
+
+/**
+ * Returns the start- and end- offset of the AST node
+ * @type ATerm -> (Int, Int)
+ */
+origin-offset = 
+	support-sublist(prim-origin-offset)
+
+/**
+ * Returns the start- and end- offset of the AST node, 
+ * including comments, indentation and separating whitespace
+ * @type ATerm -> (Int, Int)
+ */
+origin-offset-with-layout = 
+	support-sublist(prim-origin-offset-with-layout)
+
+/**
+ * Returns the start- and end- offset of the AST node,
+ * including comments
+ * @type ATerm -> (Int, Int)
+ */
+origin-offset_with_comments:
+	node -> (start-offset, end-offset)
+	where
+		start-offset:=<(origin-offset-comment-before <+ origin-offset); Fst> node;
+		end-offset:=<(origin-offset-comment-after <+ origin-offset); Snd> node
+
+/**
+ * Returns the start- and end- offset of the preceding comments
+ * that refer to the AST node (or sublist)
+ * Fails if comment does not exist
+ * @type ATerm -> (Int, Int)
+ */
+origin-offset-comment-before = 
+	support-sublist(prim-origin-offset-comment-before)
+
+/**
+ * Returns the start- and end- offset of the succeeding comments
+ * that refer to the AST node (or sublist)
+ * Fails if comment does not exist
+ * @type ATerm -> (Int, Int)
+ */
+origin-offset-comment-after = 
+	support-sublist(prim-origin-offset-comment-after)
+
+/**
+ * Returns the indentation (string) of the start-line of the node. 
+ * For empty lists, the parent indentation + an additional tab is returned
+ * @type ATerm -> String
+ */
+origin-indent-node = 
+	try(Hd); //first element of (sub)list
+	prim-origin-indent-node
+
+/**
+ * Returns the value of the indentation of the startline 
+ * @type ATerm -> Int
+ */
+origin-indent-value-node=
+	origin-indent-node;
+	explode-string;
+	take-while(?' '<+?'\t');
+	foldr(!0, add, (?' ';!1) <+ (?'\t';tabsize))
+
+/**
+ * Returns the whitespace preceding the node (without the indentation). 
+ * @type ATerm -> String
+ */
+origin-separating-ws = 
+	support-sublist(prim-origin-separating-ws)
+
+/**
+ * Returns the separator location connected to list element or sublist
+ * @type ATerm -> (Int, Int)
+ */
+origin-separator-offset =  
+	origin-separator;
+	!(<Fst>, <Snd>)
+	
+/**
+ * Returns the separator connected to list element or sublist
+ * @type ATerm -> String
+ */
+origin-separator-text = 
+	origin-separator; 
+	Third
+
+origin-separator=
+	support-sublist(prim-origin-separator)
+
+/**
+ * Returns the textfragment of the AST node,
+ * including comments
+ * @type ATerm -> (Int, Int)
+ */
+origin-text_with_comments=
+	?node;
+	offset := <origin-offset_with_comments> node;
+	<origin-textfragment> (<Fst> offset, <Snd> offset, node)
+
+/**
+ * Returns the textfragment from (inclusive) start- to (exclusive) end- offset. 
+ * Fails if the offsets do not correspond to a valid location in the source text
+ * @type (Int, Int) -> String
+ */
+origin-textfragment= prim("SSL_EXT_origin_textfragment","", <id>)
+
+/**
+ * Returns the text of the source file 
+ * @type Term -> String
+ */
+origin-sourcetext= prim("SSL_EXT_origin_sourcetext", <id>)
+
+strategies //primitives
+
+prim-origin-offset= prim("SSL_EXT_origin_offset", <id>)
+
+prim-origin-offset-with-layout= prim("SSL_EXT_origin_offset_with_layout", <id>) 
+
+prim-origin-offset-comment-before  = prim("SSL_EXT_origin_comment_before", <id>) 
+
+prim-origin-offset-comment-after= prim("SSL_EXT_origin_comment_after", <id>) 
+
+prim-origin-indent-node= prim("SSL_EXT_origin_indentation", <id>)
+	//todo? implement (indent empty list: parent + tab)
+
+prim-origin-separating-ws= prim("SSL_EXT_origin_separating_whitespace", <id>)
+	
+prim-origin-separator=
+	prim("SSL_EXT_origin_separator", <id>)
+
+
+strategies //editor settings
+
+/**
+ * Returns the tabsize used in the editor. 
+ * @type  -> Int
+ */
+tabsize=!4 //TODO: use spoofax editor settings
+
+
+strategies //helpers
+
+/**
+ * Treats sublists as origin terms
+ * @param strategy to apply on an origin term 
+ * @type ATerm -> ATerm
+ */
+support-sublist(s)=
+	s <+ 
+	(origin-sublist-term; s)
\ No newline at end of file

Modified: refactoring/lib-reconstruction/text-construct.str
==============================================================================
--- refactoring/lib-reconstruction/text-construct.str	Wed Jul 21 07:33:59 2010	(r21119)
+++ refactoring/lib-reconstruction/text-construct.str	Wed Jul 21 09:41:51 2010	(r21120)
@@ -1,69 +1,71 @@
 module lib-reconstruction/text-construct
 
-imports
-  libstratego-lib
+imports 
+  libstratego-lib 
+  libstratego-gpp
   lib/editor-common.generated
-  lib-reconstruction/primitives
+  lib-reconstruction/origin-tracking
   lib-reconstruction/diff-ast
   lib-reconstruction/custom-pp-rules
+  
 
-rules //text construction
+rules //source text reconstruction 
 
-construct-dedented-text:
-	node -> dedented-text
+reconstruct-source-text:
+	(old-node, new-node) -> text
 	where
-		text := <construct-text> node;
-		dedented-text := <remove-indentation(|<origin-indent-value-node <+ !0> node)> text
+		ast-changes := <collect-changes> (old-node, new-node); 
+		text-changes := <map(ast-change-to-text-change); flatten-list> ast-changes; 
+		text := <apply-text-changes>(text-changes, <origin-sourcetext> old-node, 0)
+
+
+rules //text construction
 
-construct-text=
+/**
+ * Constructs the text for a node using fragments from the original text, when possible
+ * @type node -> text
+ */
+construct-text= 
 	construct-text-from-origin <+
-	construct-text-from-listfragments <+
-	construct-text-by-string-interpolation <+
-	construct-text-by-pp
+	construct-text-by-interpolation
 
 construct-text-from-origin: 
-	new-node -> text
-	where //debug(!"enter construct-from-origin: ");
-		(<same-signature>(<origin-term> new-node, new-node) <+ <origin-sublist-term> new-node); //<debug> "-- past-same-signature criteria --";
-		ast-changes := <collect-changes> (<origin-term <+ origin-sublist-term> new-node, new-node); //debug(!"ast-changes: ");
-		text-changes := <map(ast-change-to-text-change)> ast-changes; //debug(!"text-changes: ");
-		text := <apply-text-changes>(text-changes, <origin-text_with_comments> new-node, <origin-offset_with_comments; Fst> new-node)
-		//; <debug(!"construct-from-origin (node): ")> new-node
-		//; <debug(!"construct-from-origin (text): ")> text
-		  
-construct-text-from-listfragments:
-	new-list -> text
-	where //debug(!"enter construct-from-listfragments: ");
-		listfragments := <construct-sublist-texts> new-list;
-		seperation := <seperation-composed-list> new-list;
-		text := <concat-fragments(|seperation)> listfragments
-		//; <debug(!"construct-from-listfragments (node): ")> new-list
-		//; <debug(!"construct-from-listfragments (text): ")> text
-
-construct-text-by-string-interpolation:
-	new-node -> text
-	where //debug(!"enter construct-by-interpolation: ");
-		children := <get-arguments> new-node;
-		text-in-childs := <map(construct-dedented-text)> children;
-		text := <mkterm; custom-interpolation>(<get-constructor> new-node, text-in-childs)
-		//; <debug(!"construct-by-pp (node): ")> new-node
-		//; <debug(!"construct-by-pp (text): ")> text
+	new-node -> dedented-text
+	where
+		(<origin-sublist-term> new-node <+ <same-signature>(<origin-term> new-node, new-node)); 
+		old-node:=<origin-term> new-node; 
+		ast-changes := <collect-changes> (<origin-term> new-node, new-node);
+		text-changes := <map(ast-change-to-text-change); flatten-list> ast-changes;
+		text := <apply-text-changes>(text-changes, <origin-text_with_comments> old-node, <origin-offset_with_comments; Fst> old-node);
+		dedented-text := <remove-indentation(|<origin-indent-value-node <+ !0> new-node)> text
 
-		
-construct-text-by-pp: //TODO: add default indent for newlines 
+construct-text-by-interpolation:
 	new-node -> text
-	where //debug(!"enter construct-by-pp: ");
-		children := <get-arguments> new-node;
-		text-in-childs := <map(construct-sublist-texts <+ construct-dedented-text)> children;
-		text := <mkterm; pretty-print>(<get-constructor> new-node, text-in-childs)
-		//; <debug(!"construct-by-pp (node): ")> new-node
-		//; <debug(!"construct-by-pp (text): ")> text
+	where
+		origin-interpolated-node:=<topdown(try(construct-text-from-origin <+ construct-sublist-texts(try(construct-text-from-origin))))> new-node;
+		text:=<bottomup(custom-interpolation <+ pp-ignore <+ pretty-printing)> origin-interpolated-node
 
-rules //sublist helper functions
-	
-construct-sublist-texts=
+//pretty-prints list elements in the context of the parent node	
+construct-text-pp-in-context:  
+	(list-node, parent, index) -> text
+	where 
+		indent:=<find-pp-indent> parent;
+		list-texts := <construct-sublist-texts(construct-text); map(add-indentation(|indent); trim-whitespace); filter(not(?""))> list-node;
+		first-char := <Hd; explode-string; Hd> list-texts;
+		last-char := <last; explode-string; last> list-texts;  
+		dummy-char:= <filter(not(?first-char <+ ?last-char)); last> ['@', '#', '$']; 
+		list-dummy := <map(string-as-chars(map(!dummy-char)))> list-texts; 
+		dummy-texts:=<get-arguments; map(!"___"); at-index(!list-dummy|index)> parent;	
+		arg-texts:=<at-index(!list-texts|index)> dummy-texts;
+		text-in-context := <mkterm; pretty-print>(<get-constructor> parent, arg-texts);
+		context := <mkterm; pretty-print>(<get-constructor> parent, dummy-texts);
+		text:= <string-as-chars(strip-context(|<explode-string> context))> text-in-context
+
+//splits a list in sublists that relates to the original texts, and singleton new elements
+// s is applied to all partial lists	
+construct-sublist-texts(s)=
     (?[];![]) <+ 
-    (?[h|[]];![<construct-dedented-text> h]) <+
+    (?[h|[]];![<s> h]) <+
     (
  		at-suffix(
  			where(origin-sublist-term <+ ?[h|[]]); 
@@ -71,32 +73,71 @@
  		); 
  		split-init-last; 
  		TupleToList; 
- 		at-init(construct-sublist-texts, construct-dedented-text);
+ 		at-init(construct-sublist-texts(s), s);
  		flatten-list
  	)
 
-concat-fragments(|seperation)=
-	separate-by(|seperation); 
-	concat-strings
+
+rules //helpers pretty printing
 	
-seperation-composed-list=
-	<conc-strings>(<seperator-composed-list>, <seperating-ws-composed-list>) 
+pp-ignore: 
+	node -> node
+	where
+		is-list <+
+		?None()
 
-seperating-ws-composed-list:
-	composed-list -> seperating-ws
+pretty-printing:
+	new-node -> text
+	where
+		indent:=<find-pp-indent> new-node;
+		node-after-indent-correction := <all(try(map(add-indentation(|indent))))> new-node;
+		text := <pretty-print> node-after-indent-correction
+
+pretty-print =
+	(pretty-print(default-pp-table) <+
+	pretty-print(custom-pp-table))
+
+pretty-print(pp-table):
+	t -> <
+			(
+				ast2abox(|[<pp-table>]); 
+				(box2text-string(|80))
+			)<+ 
+			write-to-string
+		 > t
+	
+strip-context(|context): 
+	text-in-context -> text
 	where
-		seperating-ws := "\n" //todo: A.find sublist (length > 1), get-seperation B. custom C. default
+		left-corrected-text:=<remove-common-prefix> (text-in-context, context);
+		text:=<remove-common-prefix; reverse> (<reverse>left-corrected-text, <reverse>context)
 
-seperator-composed-list:
-	composed-list -> seperator
+remove-common-prefix = rec r(
+	\([x|xs],[x|ys]) -> <r>(xs,ys)\
+	<+ Fst
+)
+
+
+rules //indentation
+	
+find-pp-indent:
+	node -> pp-indent
 	where
-		seperator := "" //todo: A.find sublist (length > 1), get-seperation B. custom C. default
+		dummy-children := <get-arguments; map(!"xyz")> node;
+		text := <mkterm; pretty-print; trim-whitespace>(<get-constructor> node, dummy-children);
+		line-indents:= <get-lines; map(string-as-chars(take-while(?' ' <+ ?'\t')))> text;
+		pp-indent:=<filter(not(?"")); (Hd <+ default-multiline-indent)> line-indents
 
-rules //dedentation
+default-multiline-indent=
+	!"  "
+
+add-indentation(|ws-indent)=
+	prefix-lines(|ws-indent);
+	trim-leading-whitespace
 
 remove-indentation(|n)=
 	all-lines(string-as-chars(dedent-line-chars(|n)));
-	trim-chars(?' ' <+ ?'\t' <+ ?'\n')
+	trim-chars(?' ' <+ ?'\t')//<+ ?'\n'
 		
 dedent-line-chars(|n):
 	chars -> dedented-chars
@@ -113,80 +154,95 @@
 		)<+
 		(
 			<gt> (n,0);
-			<?['\t'|tail]> chars;
+			<?['\t'|tail]> chars; 
 			dedented-chars:=<dedent-line-chars(|<subt> (n, <tabsize>))> tail				
 		)<+
 		dedented-chars:=chars
 
+
 rules //translates ast-changes to textual changes
-	
+
+/**
+ * Translates a node change into a textual change
+ * @ Type ASTChange -> ((Int, Int), String)
+ */
 ast-change-to-text-change=
 	to-text-deletion <+
 	to-text-replacement <+
+	to-list-replacement <+
 	to-text-insertion-at-end <+
 	to-text-insertion-before
 	
 
 to-text-deletion:
-	DETETION(old-node) -> (<origin-offset-with-layout> old-node, "")
-	//where
-		//debug(!"DELETION: ")
+	DETETION(old-node) -> deletions
+	where
+		if 
+			separator-offset:=<origin-separator-offset> old-node
+		then
+			deletions:=[(<origin-offset-with-layout> old-node, ""), (separator-offset,"")]
+		else
+			deletions:=(<origin-offset-with-layout> old-node, "")
+		end
 
 to-text-replacement:
 	REPLACEMENT(old-node, new-node) -> (offset, new-text)
-	where //debug(!"REPLACEMENT: ");
-		offset := <origin-offset> old-node; //TODO: "with-comments" if new-node is constructed from origin
+	where 
+		offset := <origin-offset> old-node;
 		indent := <origin-indent-node> old-node;
-		new-text := <construct-dedented-text; add-indentation(|indent)> new-node
-		//; debug(!"TC-REPLACEMENT: ")
-		
+		new-text := <construct-text; add-indentation(|indent)> new-node
+
+//TODO: layout emtylist/singleton-list
+to-list-replacement:
+	LIST_REPLACEMENT(old-list, new-sublist, parent, index) -> (insert-offset, new-text)
+	where
+		indent := <origin-indent-node> parent;
+		text:=<construct-text-pp-in-context> (new-sublist, parent, index); //keep surrounding layout!
+		new-text := <add-indentation(|indent)> text; 
+		insert-offset := <origin-offset_with_comments> old-list //with-layout? 
+
+
 to-text-insertion-at-end:
 	INSERT_AT_END(old-list, new-sublist) -> (insert-offset, new-text)
-	where //debug(!"INSERT-AT-END: ");
-		if <?[_|_]> old-list then //not empty list
-			indent := <last; origin-indent-node> old-list;
-			seperation := <last; <conc-strings>(<seperator-node>, <origin-seperating-ws-node>)> old-list;
-			constructed-text := <construct-sublist-texts; concat-fragments(|seperation)> new-sublist; //TODO: seperator
-			indented-text := <add-indentation(|indent)> constructed-text;
-			new-text := <conc-strings> (seperation, indented-text)
-		else //empty list
-			constructed-text := <construct-dedented-text> new-sublist;
-			indent := <origin-indent-node> old-list;
-			seperating-ws:=<seperating-ws-composed-list> new-sublist;
-			new-text := <concat-strings; add-indentation(|indent)> [seperating-ws, constructed-text, seperating-ws]
-		end;
-		offset-end-list := <origin-offset_with_comments; Snd> old-list;
+	where 
+		indent := <last; origin-indent-node> old-list; 
+		seperating_ws :=  <conc-strings>(<last; origin-separating-ws> old-list, indent); 
+		seperation := <conc-strings>(<last; (origin-separator-text <+ !"")> old-list, seperating_ws); 
+		constructed-text := <construct-sublist-texts(construct-text); map(add-indentation(|indent)); concat-fragments(|seperation)> new-sublist; 
+		new-text := <conc-strings> (seperation, constructed-text); 
+		offset-end-list := <last; origin-offset_with_comments; Snd> old-list; 
 		insert-offset := (offset-end-list, offset-end-list)
-		//; debug(!"TC-INSERT AT END: ")
 		
 to-text-insertion-before:
-	INSERT_BEFORE(old-node, new-sublist) -> (insert-loc, new-text)
-	where debug(!"INSERT BEFORE: ");
-		indent:=<origin-indent-node> old-node; debug(!"1: ");
-		seperation := <conc-strings>(<seperator-node> old-node, <origin-seperating-ws-node> old-node); debug(!"2: ");
-		constructed-text:=<construct-sublist-texts; concat-fragments(|seperation)> new-sublist; debug(!"3: ");
-		indented-text:= <add-indentation(|indent)> constructed-text; debug(!"4: ");
-		new-text:=<concat-strings> [indented-text, seperation, indent]; debug(!"5: ");
-		loc:=<origin-offset_with_comments; Fst> old-node; debug(!"6: ");
-		insert-loc:=(loc,loc)
-		; debug(!"TC-INSERT BEFORE: ")
+	INSERT_BEFORE(old-node, new-sublist) -> (insert-offset, new-text)
+	where
+		indent:=<origin-indent-node> old-node; 
+		seperation := <conc-strings>(<origin-separator-text <+ !""> old-node, <origin-separating-ws> old-node, indent); 
+		constructed-text := <construct-sublist-texts(construct-text); map(add-indentation(|indent)); concat-fragments(|seperation)> new-sublist; 
+		new-text:=<conc-strings> (constructed-text, seperation); 
+		start-offset-oldnode:=<origin-offset_with_comments; Fst> old-node; 
+		insert-offset:=(start-offset-oldnode, start-offset-oldnode)
 
-rules //helpers
 		
-seperator-node=!""//TODO: A. from list B. custom C. default("")
+rules //helpers text construction
 
-add-indentation(|ws-indent)=
-	prefix-lines(|ws-indent);
-	trim-leading-whitespace
+concat-fragments(|seperation)= 
+	separate-by(|seperation); 
+	concat-strings
+	
 
 rules //applying text changes
 
+/*
+ * Constructs a new textfragment by applying textual changes to an existing text fragment
+ * @Type (List(((Int,Int), String)), String, Int)
+ */
 apply-text-changes:
 	(text-changes, origin-text, start-offset) -> changed-text
-	where
-		ordered-text-changes := <sort-list(LSort(compare-text-change))> text-changes;
-		changed-text:= <foldr(!(start-offset, origin-text), apply-textual-change); Snd> ordered-text-changes
-		  
+	where 
+		ordered-text-changes := <filter(is-modification); sort-list(LSort(compare-text-change))> text-changes; 
+		changed-text:= <foldr(!(start-offset, origin-text), apply-textual-change); Snd> ordered-text-changes 
+	
 apply-textual-change:
 	(change, text-info) -> (char-pos, result-text)
 	where 
@@ -196,8 +252,6 @@
 		pos-end:=<subt>(change-end, char-pos); 
 		result-text:=<replace-in-text>
 			(text-fragment, change-text, pos-start, pos-end) 
-		//;<debug(!"text-in: ")> text-fragment
-		//;<debug(!"text-uit: ")> result-text
 
 replace-in-text:
 	(old-text, text-change, pos-start, pos-end) -> result-text
@@ -208,10 +262,16 @@
 		result-text:=<conc-strings> (<implode-string> prefix, text-change, <implode-string> suffix) 
 
 
-compare-text-change=
+compare-text-change= 
 		?(((start-x, end-x),x), ((start-y, end-y),y));
 		not(
 			<lt> (start-x, start-y) <+ 
 			<eq> (start-x, start-y); <lt> (end-x, end-y)
 		)
-		
\ No newline at end of file
+
+is-modification=
+		?((start-x, end-x),x); 
+		not(
+			<eq> (start-x, end-x); 
+			<eq> (x, "") 
+		)

Added: refactoring/lib-reconstruction/text-to-text.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ refactoring/lib-reconstruction/text-to-text.str	Wed Jul 21 09:41:51 2010	(r21120)
@@ -0,0 +1,89 @@
+module lib-reconstruction/text-to-text
+
+imports 
+	lib-reconstruction/text-construct
+	lib-reconstruction/origin-tracking
+	
+rules //layout preserving transformations
+
+/**
+ * Applies 's' as a textual transformation on the source code.
+ * @param Transformation strategy
+ * @type: AstNode -> String 
+ */
+insource(s):
+	old-node -> source-text
+	where 
+		source-text := <transform-to-text(s)> old-node;
+		<change-source-text>(old-node, source-text)
+
+/**
+ * Applies 's' and reconstruct the modified source text
+ * which is returned
+ * @param Transformation strategy
+ * @type: AstNode -> String 
+ */
+transform-to-text(s):
+	old-node -> text
+	where 
+		new-node := <s> old-node; 
+		text := <reconstruct-source-text> (<origin-term> old-node, new-node)
+
+/**
+ * Reconstructs the sourcecode, 
+ * replacing the old term with the reconstructed text of the new term
+ * @type: (Term, Term) -> String 
+ */ 
+reconstruct-source-code=
+	reconstruct-source-text
+	
+		
+rules //Modify source file
+
+/**
+ * Replaces the source text (side-effect) and 
+ * returns the new content
+ * @type:
+ * (AstNode, String)  -> String
+ */
+change-source-text=
+	?(node, text);
+    <apply-text-change>(node, (-1,-1), text)
+
+/**
+ * Replaces the textfragment corresponding to the node inclusive comments (side-effect) and 
+ * returns the new content
+ * @type:
+ * (AstNode, String)  -> String
+ */
+change-node-text-with-comments=
+	?(node, text);
+	<apply-text-change>(node, <origin-offset_with_comments> node, text)	
+
+/**
+ * Replaces the textfragment corresponding to the node (side-effect) and 
+ * returns the new content
+ * @type:
+ * (AstNode, String)  -> String
+ */
+change-node-text=
+	?(node, text);
+	<apply-text-change>(node, <origin-offset> node, text)
+	
+/**
+ * Replaces a textfragment in the source text  (side-effect) and 
+ * returns the new content
+ * @type:
+ * (AstNode, Int, Int, String)  -> String
+ */
+change-text-fragment=
+	?(node, start-offset, end-offset, text);
+	<apply-text-change>(node, (start-offset, end-offset), text)
+
+/**
+ * Replaces a textfragment in the file being edited (side-effect) and 
+ * returns the new content
+ * @type:
+ * (AstNode, (start-offset, end-offset), String)  -> String
+ */
+apply-text-change= prim("SSL_EXT_text_change",<Fst>, <Snd>, <Third>) //TODO: sublist support

From m.dejonge at tudelft.nl  Wed Jul 21 11:50:05 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 21 Jul 2010 09:50:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21121 -
	refactoring/lib-refactoring
Message-ID: <201007210950.o6L9o5gm004525@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Jul 21 09:49:54 2010
New Revision: 21121
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21121&sc=1

Log:
generic refactorings

Added:
   refactoring/lib-refactoring/generic-refactorings.str
   refactoring/lib-refactoring/position-helpers.str
   refactoring/lib-refactoring/transformation-helpers.str
   refactoring/lib-refactoring/user-interaction.str
Deleted:
   refactoring/lib-refactoring/primitives.str
   refactoring/lib-refactoring/refactoring-position-helpers.str
   refactoring/lib-refactoring/refactoring-transformation-helpers.str

Added: refactoring/lib-refactoring/generic-refactorings.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ refactoring/lib-refactoring/generic-refactorings.str	Wed Jul 21 09:49:54 2010	(r21121)
@@ -0,0 +1,77 @@
+module lib-refactoring/generic-refactorings
+
+imports
+  lib-refactoring/transformation-helpers
+  lib-refactoring/position-helpers
+
+
+rules //Rename
+
+/**
+ * Renames all nodes that match the old-name  
+ * @param old name
+ * @param new name  
+ * @type ATerm -> ATerm
+*/
+rename-all(|old-name, new-name)=
+	topdown(try(?old-name;!new-name)) //TODO: keep-annos?
+
+
+rules //Extract
+
+/**
+ * Extracts a new node based on a selected fragment inside an AST node,
+ * the new node is inserted after this AST node,
+ * the selected fragment is replaced by a call to the new node.
+ *
+ * @param Strategy that matches the type of the node where the extraction takes place
+ * @param Call to the extracted node (call)
+ * @param Extracted node (node)  
+ * @type ATerm -> ATerm
+*/
+extract(s|extr-call, extr-node):
+	ast -> ast-after-extraction
+	where
+		from:=<selected-start-position>;
+		to:=<selected-end-position>;
+		pos-node:=<fetch-position-up(s|from); next-position> ast;
+		ast-after-extraction:=<
+			replace-sublist-with-element(|from, to, extr-call);
+			insert-list-element(|pos-node, extr-node)
+		> ast
+
+/**
+ * Extracts a new node based on a sublist inside an AST node,
+ * the new node is inserted after this AST node,
+ * the sublist is replaced by a call to the new node.
+ *
+ * @param Strategy that matches the type of the node where the extraction takes place  
+ * @param Position of the first element of the sublist (from)  
+ * @param Position of the last element of the sublist (to)
+ * @param Call to the extracted node (call)
+ * @param Extracted node (node)  
+ * @type ATerm -> ATerm
+*/
+extract(s|from, to, extr-call, extr-node):
+	ast -> ast-after-extraction
+	where
+		pos-node:=<fetch-position-up(s|from); next-position> ast;
+		ast-after-extraction:=<
+			replace-sublist-with-element(|from, to, extr-call);
+			insert-list-element(|pos-node, extr-node)
+		> ast
+		
+		
+rules //Inline
+	
+/**
+ * Removes the node that is inlined
+ * and replaces its call-nodes with the (modified) body
+ * @param matching strategie for call nodes
+ * @param node that will be inlined
+ * @param sublist that will replace the call-nodes
+ * @type ATerm -> ATerm
+*/
+inline-all-instances(call|node, body)=
+	remove-all-elements(?node); 
+	replace-all-element-with-sublist(call|body) 
\ No newline at end of file

Added: refactoring/lib-refactoring/position-helpers.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ refactoring/lib-refactoring/position-helpers.str	Wed Jul 21 09:49:54 2010	(r21121)
@@ -0,0 +1,94 @@
+module lib-refactoring/position-helpers
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+
+rules //fetch positions
+
+/**
+ * Finds the first position for which s succeeds,
+ * performing a bottom-up traversal following a given path
+ *
+ * @param The strategy that should succeed  
+ * @param The position from which the traversal starts
+ * @type ATerm -> List(Int)
+*/
+fetch-position-up(s|path)=
+	fetch-position-up(s|path, <length> path)
+
+/**
+ * Finds the first position for which s succeeds,
+ * performing a topdown traversal following a given path
+ *
+ * @param The strategy that should succeed  
+ * @param The position to which the traversal leads
+ * @type ATerm -> List(Int)
+*/
+fetch-position-down(s|path)=
+	fetch-position-down(s|path, 0)
+	
+
+fetch-position-down(s|path, level): 
+	ast -> fetched-pos
+	where
+		position:=<take(|level)> path; 
+		(
+			(<at-position(s|position)> ast; fetched-pos:=position) <+
+			fetched-pos:=<fetch-position-down(s|path, <inc>level)> ast
+		)
+
+fetch-position-up(s|path, level): 
+	ast -> fetched-pos
+	where
+		position:=<take(|level)> path; 
+		(
+			(<at-position(s|position)> ast; fetched-pos:=position) <+
+			fetched-pos:=<fetch-position-up(s|path, <dec>level)> ast
+		)
+
+
+rules //tree navigation
+
+/**
+ * Returns the position of the next sibling
+ *
+ * @type List(Int) -> List(Int)
+*/
+next-position=
+	at-last-elem(inc)
+
+at-last-elem(s):
+	[h|[]] -> [<s> h]
+
+at-last-elem(s):
+	[h|tail] -> [h|<at-last-elem(s)> tail]
+
+
+rules //user selected
+
+/**
+ * Returns the start position of the selected fragment 
+ *
+ * @type _ -> List(Int)
+*/	
+selected-start-position=
+	selected-from-to-position; 
+	Fst
+
+/**
+ * Returns the end position of the selected fragment 
+ *
+ * @type _ -> List(Int)
+*/
+selected-end-position=
+	selected-from-to-position; 
+	Snd
+
+/**
+ * Returns the start- and end position of the selected fragment 
+ *
+ * @type _ -> (List(Int), List(Int))
+*/
+selected-from-to-position= 
+	prim("SSL_EXT_selected_from_to_position","", "")
\ No newline at end of file

Added: refactoring/lib-refactoring/transformation-helpers.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ refactoring/lib-refactoring/transformation-helpers.str	Wed Jul 21 09:49:54 2010	(r21121)
@@ -0,0 +1,210 @@
+module lib-refactoring/transformation-helpers
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  lib-refactoring/position-helpers
+
+
+rules //select list-elements
+	
+/**
+ * Returns the (sub)list that corresponds to the given AST positions 
+ * @param The position of the first element  
+ * @param The position of the last element  
+ * @type ATerm -> List(a)
+*/
+select-sublist(|from,to):
+	ast -> sublist
+	where
+		list-pos:=<take(|<length; dec> from)> from;
+		list:=<term-at-position(|list-pos)> ast;
+		sublist:=<select-partial-list(|<last> from, <last> to)> list
+		
+select-partial-list(|from, to): 
+	list -> partial-list
+	where 
+		(prefix, suffix):=<split-at(|<inc> to)> list;
+		(pre, mid-part):=<split-at(|from)> prefix; 
+		partial-list:=mid-part//TODO: origin tracking
+
+
+rules //remove list-elements
+		
+/**
+ * Removes elements at a given position in the AST
+ *
+ * @param The position of the first element to be removed (from)  
+ * @param The position of the last element to be removed (to)
+ * @type ATerm -> ATerm
+*/
+remove-sublist(|from, to):
+	ast -> ast-with-deletion
+	where
+		list-pos:=<take(|<length; dec> from)> from;
+		ast-with-deletion:=<at-position-keep-annos(remove-partial-list(|<last> from, <last> to)|list-pos)> ast
+
+remove-partial-list(|from, to): 
+	list -> list-after-deletion
+	where 
+		(part1, tail):=<split-at(|from)> list; 
+		(prefix, part2):=<split-at(|<inc> to)> list;
+		list-after-deletion:=<conc> (part1, part2)//TODO: origin tracking
+
+/**
+ * Removes an element at a given position in the AST
+ *
+ * @param The position of the element to be removed  
+ * @type ATerm -> ATerm
+*/
+remove-list-element(|position)=
+	remove-sublist(|position, position)
+
+/**
+ * Removes all elements matching s  
+ * @param Strategy that determines the elements that will be removed  
+ * @type ATerm -> ATerm
+*/
+remove-all-elements(s)=
+	topdown(try(remove-element-from-list(s)))
+
+/**
+ * Removes all list elements matching s  
+ * @param Strategy that determines the elements that will be removed  
+ * @type List -> List
+*/
+remove-element-from-list(s)=
+	replace-element-with-sublist(s|[])
+
+
+rules //insert list elements
+
+/**
+ * Inserts list elements at a given position 
+ *
+ * @param The position for inserting the sublist  
+ * @param The sublist that will be inserted
+ * @type ATerm -> ATerm
+*/
+insert-sublist(|position, sublist):
+	ast -> ast-with-insertion
+	where
+		list-pos:=<take(|<length; dec> position)> position;
+		ast-with-insertion:=<at-position-keep-annos(origin-track-forced(insert-partial-list(|<last> position, sublist))|list-pos)> ast
+
+insert-partial-list(|index, sublist): 
+	list -> list-with-insertion
+	where
+		(prefix, suffix):=<split-at(|index)>;
+		list-with-insertion:=<conc> (prefix, sublist, suffix)
+
+/**
+ * Inserts an element at a given position 
+ *
+ * @param The position for inserting the sublist  
+ * @param The element that will be inserted
+ * @type ATerm -> ATerm
+*/
+insert-list-element(|position, element)=
+	insert-sublist(|position, [element])
+
+
+rules //replace list elements
+
+/**
+ * Replaces a sublist in the AST with another sublist
+ *
+ * @param The position of the first element of the sublist to be replaced (from)  
+ * @param The position of the last element of the sublist to be replaced (to)
+ * @param The new sublist
+ * @type ATerm -> ATerm
+*/
+replace-sublist(|from, to, sublist)=
+	remove-sublist(|from, to); 
+	insert-sublist(|from, sublist)
+
+/**
+ * Replaces a sublist in the AST with a single list element
+ *
+ * @param The position of the first element of the sublist to be replaced (from)  
+ * @param The position of the last element of the sublist to be replaced (to)
+ * @param The new list element
+ * @type ATerm -> ATerm
+*/
+replace-sublist-with-element(|from, to, element)=
+	replace-sublist(|from, to, [element])
+
+/**
+ * Replaces a list-element in the AST with a sublist
+ *
+ * @param The position of the list element that ill be removed   
+ * @param The sublist that will be inserted
+ * @param The new list element
+ * @type ATerm -> ATerm
+*/
+replace-element-with-sublist(|position, sublist)=
+	replace-sublist(|position, position, sublist)
+
+/**
+ * Replaces all elements in the AST that match a given strategy with a sublist 
+ * @param Strategy that determines the elements that will be replaced
+ * @param Sublist that replaces the elements
+ * @type ATerm -> ATerm
+*/
+replace-all-element-with-sublist(s|sublist)=
+	topdown(try(replace-element-with-sublist(s|sublist)))
+
+/**
+ * Replaces list elements matching a certain strategy with a sublist 
+ * @param Strategy that determines the elements that will be replaced
+ * @param Sublist that replaces the elements
+ * @type List -> List
+*/	
+replace-element-with-sublist(s|sublist):
+	list -> result-list
+	where 
+		result-list:=<
+			try(
+				split-fetch(s); 
+				<conc>(
+					<Fst>, 
+					sublist, 
+					<Snd; replace-element-with-sublist(s|sublist)>
+				)
+			)
+		> list
+
+
+rules //rename nodes
+
+//TODO: renaming/replacing nodes, preserving annos and origin
+
+
+rules //helpers
+
+//TODO: better way to keep the origin and annotation information
+at-position-keep-annos(s|position):
+	term -> term'
+	where
+		!position => [i | position']
+	where
+		(	//origin known, should be kept
+			args:=<get-arguments> term ; 
+    		arg:=<term-at-position(|[i])> args; 
+    		loc:=<origin-location> arg; //Todo: better way to unique identify right subnode
+        	trm-or := <one(identified-by-origin(at-position-keep-annos(s|position')<+at-position(s|position')| loc))> term;
+        	term' := <set-annos>(trm-or, <get-annos> term)
+        )<+
+		(	//origin unknown
+			<?c#(t*)> term;
+			t-rec := c#(<at-index(at-position-keep-annos(s|position')<+at-position(s|position'))> (i, t*));
+			term' := <set-annos>(t-rec, <get-annos> term)
+		)
+
+
+identified-by-origin(s|loc):
+	t -> tr
+	where
+		<eq>(loc, <origin-location> t);
+		tr:=<s> t
+       	

Added: refactoring/lib-refactoring/user-interaction.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ refactoring/lib-refactoring/user-interaction.str	Wed Jul 21 09:49:54 2010	(r21121)
@@ -0,0 +1,7 @@
+module lib-refactoring/user-interaction
+
+
+strategies
+
+rename-dialog:
+	(title, oldname, newname) -> <prim("SSL_EXT_opendialog", title, oldname, newname)>
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Wed Jul 21 13:38:09 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 21 Jul 2010 11:38:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21122 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/i...
Message-ID: <201007211138.o6LBc9gF005869@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Jul 21 11:38:08 2010
New Revision: 21122
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21122&sc=1

Log:
Release 0.5.2.91: Spoofax/208 - Builder should create directories for generated files automatically

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/RefreshResourcePrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Jul 21 09:49:54 2010	(r21121)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Jul 21 11:38:08 2010	(r21122)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.2.9"
+      version="0.5.2.91"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Wed Jul 21 09:49:54 2010	(r21121)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Wed Jul 21 11:38:08 2010	(r21122)
@@ -13,10 +13,12 @@
 import java.util.WeakHashMap;
 import java.util.concurrent.CancellationException;
 
+import org.eclipse.core.resources.IContainer;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.jface.dialogs.ErrorDialog;
@@ -358,14 +360,30 @@
 	}
 
 	public static void setFileContentsDirect(IFile file, final String contents) throws CoreException {
+		assert !Thread.holdsLock(Environment.getSyncRoot());
 		InputStream resultStream = new ByteArrayInputStream(contents.getBytes());
 		if (file.exists()) {
 			file.setContents(resultStream, true, true, null);
 		} else {
+			createDirs(file.getParent());
 			file.create(resultStream, true, null);
 			// UNDONE: file.setDerived(!persistent); // marks it as "derived" for life, even after editing...
 		}
 	}
+	
+	private static void createDirs(IContainer dir) throws CoreException {
+		assert !Thread.holdsLock(Environment.getSyncRoot());
+		if (dir == null) {
+			return;
+		} else if (!dir.exists()) {
+			createDirs(dir.getParent());
+			dir.refreshLocal(0, new NullProgressMonitor());
+			if (!dir.exists()) {
+				dir.getLocation().toFile().mkdir();
+				dir.refreshLocal(0, new NullProgressMonitor());
+			}
+		}
+	}
 
 	/**
 	 * Opens or activates an editor.

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/RefreshResourcePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/RefreshResourcePrimitive.java	Wed Jul 21 09:49:54 2010	(r21121)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/RefreshResourcePrimitive.java	Wed Jul 21 11:38:08 2010	(r21122)
@@ -78,7 +78,7 @@
 	public static IFile getResource(IContext env, String file) throws FileNotFoundException {
 		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
 		File file2 = new File(file);
-		if (!file2.isAbsolute())
+		if (!file2.exists() && !file2.isAbsolute())
 			file2 = new File(agent.getWorkingDir() + "/" + file);
 		return getResource(file2);
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Jul 21 09:49:54 2010	(r21121)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Jul 21 11:38:08 2010	(r21122)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.2.9.jar" id="org.strategoxt.imp" version="0.5.2.9">
+   <feature url="features/org.strategoxt.imp_0.5.2.91.jar" id="org.strategoxt.imp" version="0.5.2.91">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From m.dejonge at tudelft.nl  Wed Jul 21 17:51:02 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 21 Jul 2010 15:51:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21123 -
	refactoring/lib-refactoring
Message-ID: <201007211551.o6LFp3TD008559@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Jul 21 15:50:47 2010
New Revision: 21123
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21123&sc=1

Log:
ast-position

Modified:
   refactoring/lib-refactoring/generic-refactorings.str
   refactoring/lib-refactoring/position-helpers.str

Modified: refactoring/lib-refactoring/generic-refactorings.str
==============================================================================
--- refactoring/lib-refactoring/generic-refactorings.str	Wed Jul 21 11:38:08 2010	(r21122)
+++ refactoring/lib-refactoring/generic-refactorings.str	Wed Jul 21 15:50:47 2010	(r21123)
@@ -20,27 +20,6 @@
 rules //Extract
 
 /**
- * Extracts a new node based on a selected fragment inside an AST node,
- * the new node is inserted after this AST node,
- * the selected fragment is replaced by a call to the new node.
- *
- * @param Strategy that matches the type of the node where the extraction takes place
- * @param Call to the extracted node (call)
- * @param Extracted node (node)  
- * @type ATerm -> ATerm
-*/
-extract(s|extr-call, extr-node):
-	ast -> ast-after-extraction
-	where
-		from:=<selected-start-position>;
-		to:=<selected-end-position>;
-		pos-node:=<fetch-position-up(s|from); next-position> ast;
-		ast-after-extraction:=<
-			replace-sublist-with-element(|from, to, extr-call);
-			insert-list-element(|pos-node, extr-node)
-		> ast
-
-/**
  * Extracts a new node based on a sublist inside an AST node,
  * the new node is inserted after this AST node,
  * the sublist is replaced by a call to the new node.

Modified: refactoring/lib-refactoring/position-helpers.str
==============================================================================
--- refactoring/lib-refactoring/position-helpers.str	Wed Jul 21 11:38:08 2010	(r21122)
+++ refactoring/lib-refactoring/position-helpers.str	Wed Jul 21 15:50:47 2010	(r21123)
@@ -68,27 +68,30 @@
 rules //user selected
 
 /**
- * Returns the start position of the selected fragment 
+ * Returns the AST position of the first node of a (sub)list,
+ * or the position of the node
  *
- * @type _ -> List(Int)
+ * @type ATerm -> List(Int)
 */	
-selected-start-position=
-	selected-from-to-position; 
-	Fst
+origin-position-from =
+	(Hd; origin-position) <+
+	origin-position 
+	
 
 /**
- * Returns the end position of the selected fragment 
+ * Returns the AST position of the last node of a (sub)list,
+ * or the position of the node
  *
- * @type _ -> List(Int)
-*/
-selected-end-position=
-	selected-from-to-position; 
-	Snd
+ * @type ATerm -> List(Int)
+*/	
+origin-position-to =
+	(last; origin-position) <+
+	origin-position 
 
 /**
- * Returns the start- and end position of the selected fragment 
+ * Returns the AST position of the original node  
  *
- * @type _ -> (List(Int), List(Int))
+ * @type ATerm -> List(Int)
 */
-selected-from-to-position= 
-	prim("SSL_EXT_selected_from_to_position","", "")
\ No newline at end of file
+origin-position = 
+	prim("SSL_EXT_origin_position",<id>)
\ No newline at end of file

From m.dejonge at tudelft.nl  Thu Jul 22 13:38:16 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 22 Jul 2010 11:38:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21124 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201007221138.o6MBcGfq022434@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Jul 22 11:38:13 2010
New Revision: 21124
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21124&sc=1

Log:


Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginPositionPrimitive.java   (contents, props changed)
      - copied, changed from r21097, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SelectedFromToPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparatingWhitespacePrimitive.java   (contents, props changed)
      - copied, changed from r21105, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SelectedFromToPrimitive.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Wed Jul 21 15:50:47 2010	(r21123)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Thu Jul 22 11:38:13 2010	(r21124)
@@ -28,7 +28,7 @@
 		add(new OriginCommentAfterPrimitive());
 		add(new TextChangePrimitive());
 		add(new OriginSourceTextPrimitive());
-		add(new SelectedFromToPrimitive());
+		add(new OriginPositionPrimitive());
 		add(new OriginRootPrimitive());
 		add(new OriginOffsetWithLayoutPrimitive());
 		add(new QueueAnalysisPrimitive());
@@ -38,7 +38,7 @@
 		add(new SetTotalWorkUnitsPrimitive());
 		add(new CompleteWorkUnitPrimitive());
 		add(new OriginIndentationPrimitive());
-		add(new OriginSeperatingWhitespacePrimitive());
+		add(new OriginSeparatingWhitespacePrimitive());
 		add(new OriginSeparatorPrimitive());
 	}
 

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginPositionPrimitive.java (from r21097, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SelectedFromToPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SelectedFromToPrimitive.java	Tue Jul 13 06:25:23 2010	(r21097, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginPositionPrimitive.java	Thu Jul 22 11:38:13 2010	(r21124)
@@ -3,54 +3,38 @@
 import java.util.List;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.parser.ast.SubListAstNode;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
+import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
 
 /**
- * Returns the start and end position of the selection
- * The start and end position are relevant for selected sublists
+ * Returns the AST position of the node
  * @author Maartje de Jonge
  */
-public class SelectedFromToPrimitive extends AbstractPrimitive {
+public class OriginPositionPrimitive extends AbstractOriginPrimitive {
 	
-	private static final String NAME = "SSL_EXT_selected_from_to_position";
-
-	public SelectedFromToPrimitive() {
-		super(NAME, 0, 2);
+	public OriginPositionPrimitive() {
+		super("SSL_EXT_origin_position");
 	}
-	
-	@Override
-	public final boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		EditorState editor =EditorState.getActiveEditor();
-		IStrategoAstNode node = editor.getSelectionAst(true);
-		if (node == null) 
-			node = editor.getCurrentAst();
-		IStrategoList posStart;
-		IStrategoList posEnd;
-		if (node instanceof SubListAstNode){
-			int start = ((SubListAstNode)node).getIndexStart();
-			posStart = createPathToSublistChild((SubListAstNode)node, start);
-			int end = ((SubListAstNode)node).getIndexEnd();
-			posEnd = createPathToSublistChild((SubListAstNode)node, end);
 
-		} else{
-			posStart=StrategoTermPath.createPath(node);
-			posEnd=StrategoTermPath.createPath(node);
+	@Override
+	protected IStrategoTerm call(IContext env, IWrappedAstNode node) {
+		IStrategoList pos;
+		IStrategoAstNode parent = node.getNode().getParent();
+		if(parent instanceof SubListAstNode){
+			List<Integer> posSublistElement = StrategoTermPath.createPathList(node.getNode());
+			int posInCompleteList = ((SubListAstNode)parent).getIndexStart() + posSublistElement.get(posSublistElement.size()-1);
+			pos=createPathToSublistChild((SubListAstNode)parent, posInCompleteList);
+		}
+		else{
+			pos=StrategoTermPath.createPath(node.getNode());
 		}
-		env.setCurrent(
-			env.getFactory().makeTuple(
-					posStart,
-					posEnd
-			)
-		);
-		return true;
+		return pos;
 	}
 
+		
 	private IStrategoList createPathToSublistChild(SubListAstNode node, int posInCompleteList) {
 		IStrategoList posStart;
 		List<Integer> pathToStart = StrategoTermPath.createPathList(node);
@@ -58,5 +42,6 @@
 		posStart =StrategoTermPath.toStrategoPath(pathToStart);
 		return posStart;
 	}
+
 	
 }

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparatingWhitespacePrimitive.java (from r21105, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeperatingWhitespacePrimitive.java	Wed Jul 14 13:17:56 2010	(r21105, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSeparatingWhitespacePrimitive.java	Thu Jul 22 11:38:13 2010	(r21124)
@@ -8,10 +8,10 @@
 /**
  * @author Maartje de Jonge
  */
-public class OriginSeperatingWhitespacePrimitive extends AbstractOriginPrimitive {
+public class OriginSeparatingWhitespacePrimitive extends AbstractOriginPrimitive {
 
-	public OriginSeperatingWhitespacePrimitive() {
-		super("SSL_EXT_origin_seperating_whitespace");
+	public OriginSeparatingWhitespacePrimitive() {
+		super("SSL_EXT_origin_separating_whitespace");
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Wed Jul 21 15:50:47 2010	(r21123)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TextChangePrimitive.java	Thu Jul 22 11:38:13 2010	(r21124)
@@ -70,7 +70,7 @@
 	private String applyTextChange(EditorState editor, final int position_start, final int position_end,
 			final String text) throws BadLocationException {
 		final IDocument doc = editor.getDocument();
-		Job job = new UIJob("name") {
+		Job job = new UIJob("apply textchange") {
 			
 			@Override
 			public IStatus runInUIThread(IProgressMonitor monitor) {
@@ -78,7 +78,7 @@
 					doc.replace(position_start, position_end+1-position_start, text);
 				} catch (BadLocationException e) {
 					// TODO Auto-generated catch block
-					Environment.logException("Oei@!", e);
+					Environment.logException("Bad location of the replaced fragment", e);
 				}
 				return Status.OK_STATUS;
 			}

From m.dejonge at tudelft.nl  Mon Jul 26 15:58:11 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 26 Jul 2010 13:58:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21129 -
	refactoring/lib-reconstruction
Message-ID: <201007261358.o6QDwBLi002068@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 26 13:58:10 2010
New Revision: 21129
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21129&sc=1

Log:


Modified:
   refactoring/lib-reconstruction/custom-pp-rules.str
   refactoring/lib-reconstruction/text-construct.str
   refactoring/lib-reconstruction/text-to-text.str

Modified: refactoring/lib-reconstruction/custom-pp-rules.str
==============================================================================
--- refactoring/lib-reconstruction/custom-pp-rules.str	Mon Jul 26 13:22:54 2010	(r21128)
+++ refactoring/lib-reconstruction/custom-pp-rules.str	Mon Jul 26 13:58:10 2010	(r21129)
@@ -8,10 +8,11 @@
 
 default-pp-table = 
 	import-term(include/JavaRefactoring.generated.pp.af)
+	
+
+rules // custom pretty print rules
 
 custom-pp-table = fail
 
 custom-interpolation=fail
 
-
-rules // custom pretty print rules

Modified: refactoring/lib-reconstruction/text-construct.str
==============================================================================
--- refactoring/lib-reconstruction/text-construct.str	Mon Jul 26 13:22:54 2010	(r21128)
+++ refactoring/lib-reconstruction/text-construct.str	Mon Jul 26 13:58:10 2010	(r21129)
@@ -117,6 +117,13 @@
 	<+ Fst
 )
 
+default-pp-table = fail
+
+custom-pp-table = fail
+
+custom-interpolation=fail
+
+
 
 rules //indentation
 	

Modified: refactoring/lib-reconstruction/text-to-text.str
==============================================================================
--- refactoring/lib-reconstruction/text-to-text.str	Mon Jul 26 13:22:54 2010	(r21128)
+++ refactoring/lib-reconstruction/text-to-text.str	Mon Jul 26 13:58:10 2010	(r21129)
@@ -27,7 +27,7 @@
 	old-node -> text
 	where 
 		new-node := <s> old-node; 
-		text := <reconstruct-source-text> (<origin-term> old-node, new-node)
+		text := <reconstruct-source-text> (old-node, new-node)
 
 /**
  * Reconstructs the sourcecode, 

From m.dejonge at tudelft.nl  Mon Jul 26 16:03:06 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 26 Jul 2010 14:03:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21131 -
	refactoring/lib-refactoring
Message-ID: <201007261403.o6QE36cL002335@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 26 14:03:06 2010
New Revision: 21131
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21131&sc=1

Log:


Added:
   refactoring/lib-refactoring/librefactoring.str

Added: refactoring/lib-refactoring/librefactoring.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ refactoring/lib-refactoring/librefactoring.str	Mon Jul 26 14:03:06 2010	(r21131)
@@ -0,0 +1,7 @@
+module lib-refactoring/librefactoring
+
+imports
+  lib-refactoring/transformation-helpers
+  lib-refactoring/position-helpers
+  lib-refactoring/user-interaction
+  lib-refactoring/generic-refactorings

From m.dejonge at tudelft.nl  Mon Jul 26 18:45:08 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 26 Jul 2010 16:45:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21132 -
	refactoring/lib-refactoring
Message-ID: <201007261645.o6QGj8Td003976@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 26 16:44:59 2010
New Revision: 21132
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21132&sc=1

Log:


Modified:
   refactoring/lib-refactoring/librefactoring.str

Modified: refactoring/lib-refactoring/librefactoring.str
==============================================================================
--- refactoring/lib-refactoring/librefactoring.str	Mon Jul 26 14:03:06 2010	(r21131)
+++ refactoring/lib-refactoring/librefactoring.str	Mon Jul 26 16:44:59 2010	(r21132)
@@ -5,3 +5,4 @@
   lib-refactoring/position-helpers
   lib-refactoring/user-interaction
   lib-refactoring/generic-refactorings
+  lib-reconstruction/text-to-text

From R.B.Vermaas at tudelft.nl  Fri Jul 23 16:12:47 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 23 Jul 2010 14:12:47 -0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21125 - hydra/webdsl
Message-ID: <201007231412.o6NECjBS009917@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Fri Jul 23 14:12:44 2010
New Revision: 21125
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21125&sc=1

Log:
re-enable webdsl webcheck

Modified:
   hydra/webdsl/machine.nix
   hydra/webdsl/tests.nix

Modified: hydra/webdsl/machine.nix
==============================================================================
--- hydra/webdsl/machine.nix	Thu Jul 22 11:38:13 2010	(r21124)
+++ hydra/webdsl/machine.nix	Fri Jul 23 14:12:44 2010	(r21125)
@@ -1,7 +1,7 @@
 { config, pkgs, ... }:
 {
   virtualisation.diskSize = 1024;
-  environment.systemPackages = [ pkgs.firefox ];
+  environment.systemPackages = [ pkgs.firefox pkgs.ant pkgs.jdk ];
   system.copySystemConfiguration = false;
 }
 

Modified: hydra/webdsl/tests.nix
==============================================================================
--- hydra/webdsl/tests.nix	Thu Jul 22 11:38:13 2010	(r21124)
+++ hydra/webdsl/tests.nix	Fri Jul 23 14:12:44 2010	(r21125)
@@ -1,5 +1,7 @@
 { nixpkgs ? ../../nixpkgs
-, webdsl ? {outPath =/nix/store/9yfczn7wfj587dyczsdpxb76g9dzr7qd-webdsl-9.7pre3888;}
+, webdsl ? {outPath = builtins.storePath /nix/store/fy8d3qkfhk3k1y10jpdx09q4w43bnh0a-webdsl-9.7pre4063;}
+, services ? ../../services
+, nixos ? ../../nixos
 }:
 let 
   pkgs = import nixpkgs { system = "i686-linux"; };
@@ -55,36 +57,23 @@
   researchr   = { researchrSrc ? { outPath = ../../researchr; rev = 1234; } }     : build "researchr" researchrSrc [];
   webdslorg   = { webdslorgSrc ? { outPath = ../../webdslorg; rev = 1234; } }     : build "webdslorg" webdslorgSrc [];
   yellowgrass = { yellowgrassSrc ? { outPath = ../../yellowgrass; rev = 1234; } } : build "yellowgrass" yellowgrassSrc ["s.d.vermolen at tudelft.nl"] ;
-/*
+
   webcheck =
     { webdslSrc ? {outPath = ../../webdsl; rev = 1234;}
     }:
-    let
-      services = pkgs.fetchsvn {
-        url = https://svn.nixos.org/repos/nix/services/trunk;
-        rev = 18826;
-        sha256 = "08dblnszh22l31cx88z7767wz0y18qnb93zl3g5naiv9ahahniz1";
-      };
-      nixos = pkgs.fetchsvn {
-        url = https://svn.nixos.org/repos/nix/nixos/trunk;
-        rev = 21423;
-        sha256 = "1lrsqkwrikm7fpccwscpfpcfbkq51xs8vv1gw0dvck56zpalh7d2";
-      };
-      
-    in
       with import "${nixos}/lib/testing.nix" {inherit nixpkgs services; system = "i686-linux";} ;
       runInMachineWithX {
         require = [ ./machine.nix ];
         drv = pkgs.stdenv.mkDerivation {
-          name = "webcheck-r${toString webdslSrc.rev}";
-          buildInputs = with pkgs; [ant firefox];
+          name = "webdsl-webcheck-r${toString webdslSrc.rev}";
+          buildInputs = [pkgs.ant pkgs.jdk pkgs.firefox webdsl];
           buildCommand = '' 
-            cp -Rv ${webdslSrc}/test/succeed-web succeed-web
-            ulimit -s unlimited
-
+            cp -R ${webdslSrc}/test/succeed-web succeed-web
+            
             cd succeed-web
             TOPDIR=`pwd`
             FAILED=""
+            export DISPLAY=:0.0
             for test in `find . -name '*.app'`; do 
               header "Running $test"
               result=""
@@ -92,16 +81,10 @@
               FILE=`basename $test .app`
               export failed=""
 
-              echo "Executing 'webdsl test-web $FILE 2>&1 > $FILE.out"
-              ${webdsl}/bin/webdsl test-web $FILE 2>&1 > $FILE.out || export failed=1
               echo "------"
-              cat $FILE.out
+              echo "Executing 'webdsl test-web $FILE"
+              webdsl test-web $FILE 1>&2 || export FAILED=1
               echo "------"
-              if test -z "$failed"; then
-                echo "FAILED: $test"
-                FAILED="$FAILED $test"
-                cat $FILE.out
-              fi
             done
             if test -z "$FAILED"; then
               exit 0
@@ -111,6 +94,5 @@
           '';
         };
       };
-*/
 
 }

From R.B.Vermaas at tudelft.nl  Mon Jul 26 11:26:45 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 26 Jul 2010 09:26:45 -0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21126 - hydra/webdsl
Message-ID: <201007260926.o6Q9QhM8031914@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Mon Jul 26 09:26:27 2010
New Revision: 21126
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21126&sc=1

Log:


Modified:
   hydra/webdsl/machine.nix

Modified: hydra/webdsl/machine.nix
==============================================================================
--- hydra/webdsl/machine.nix	Fri Jul 23 14:12:44 2010	(r21125)
+++ hydra/webdsl/machine.nix	Mon Jul 26 09:26:27 2010	(r21126)
@@ -1,6 +1,6 @@
 { config, pkgs, ... }:
 {
-  virtualisation.diskSize = 1024;
+  virtualisation.diskSize = 2048;
   environment.systemPackages = [ pkgs.firefox pkgs.ant pkgs.jdk ];
   system.copySystemConfiguration = false;
 }

From R.B.Vermaas at tudelft.nl  Mon Jul 26 12:39:21 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 26 Jul 2010 10:39:21 -0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21127 - hydra/webdsl
Message-ID: <201007261039.o6QAdJx2000348@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Mon Jul 26 10:39:16 2010
New Revision: 21127
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21127&sc=1

Log:
debug

Modified:
   hydra/webdsl/tests.nix

Modified: hydra/webdsl/tests.nix
==============================================================================
--- hydra/webdsl/tests.nix	Mon Jul 26 09:26:27 2010	(r21126)
+++ hydra/webdsl/tests.nix	Mon Jul 26 10:39:16 2010	(r21127)
@@ -79,13 +79,12 @@
               result=""
               cd $TOPDIR/`dirname $test`
               FILE=`basename $test .app`
-              export failed=""
 
-              echo "------"
               echo "Executing 'webdsl test-web $FILE"
-              webdsl test-web $FILE 1>&2 || export FAILED=1
-              echo "------"
+              webdsl test-web $FILE || export FAILED="1"
+              stopNest
             done
+            echo "Test FAILED: $FAILED"
             if test -z "$FAILED"; then
               exit 0
             else

From R.B.Vermaas at tudelft.nl  Mon Jul 26 15:22:56 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 26 Jul 2010 13:22:56 -0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21128 - hydra/webdsl
Message-ID: <201007261322.o6QDMtZj001857@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Mon Jul 26 13:22:54 2010
New Revision: 21128
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21128&sc=1

Log:


Modified:
   hydra/webdsl/tests.nix

Modified: hydra/webdsl/tests.nix
==============================================================================
--- hydra/webdsl/tests.nix	Mon Jul 26 10:39:16 2010	(r21127)
+++ hydra/webdsl/tests.nix	Mon Jul 26 13:22:54 2010	(r21128)
@@ -74,7 +74,7 @@
             TOPDIR=`pwd`
             FAILED=""
             export DISPLAY=:0.0
-            for test in `find . -name '*.app'`; do 
+            for test in *.app */*.app */*/*.app; do 
               header "Running $test"
               result=""
               cd $TOPDIR/`dirname $test`

From R.B.Vermaas at tudelft.nl  Mon Jul 26 16:03:00 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 26 Jul 2010 14:03:00 -0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21130 - hydra/webdsl
Message-ID: <201007261402.o6QE2xjb002333@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Mon Jul 26 14:02:59 2010
New Revision: 21130
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21130&sc=1

Log:
redirect stderr to stdout so build failure goes to right log node

Modified:
   hydra/webdsl/tests.nix

Modified: hydra/webdsl/tests.nix
==============================================================================
--- hydra/webdsl/tests.nix	Mon Jul 26 13:58:10 2010	(r21129)
+++ hydra/webdsl/tests.nix	Mon Jul 26 14:02:59 2010	(r21130)
@@ -81,7 +81,7 @@
               FILE=`basename $test .app`
 
               echo "Executing 'webdsl test-web $FILE"
-              webdsl test-web $FILE || export FAILED="1"
+              webdsl test-web $FILE 2>&1 || export FAILED="1"
               stopNest
             done
             echo "Test FAILED: $FAILED"

