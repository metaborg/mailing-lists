From dgroenewegen at gmail.com  Mon Nov  2 13:18:04 2009
From: dgroenewegen at gmail.com (Danny Groenewegen)
Date: Mon, 2 Nov 2009 13:18:04 +0100
Subject: [Stratego Users] Help with Stratego/XT and Java-front
In-Reply-To: <72990e9aa77e6b10fbbfd95c4805115e.squirrel@webmail.ucpel.tche.br>
References: <7C1D1C7736DF8642A9F8D52C83867F6D596AA4@SRV502.tudelft.net>
	<72990e9aa77e6b10fbbfd95c4805115e.squirrel@webmail.ucpel.tche.br>
Message-ID: <ba99f2d70911020418k493af1c3nd6d7639ba8ef6b48@mail.gmail.com>

Hi Marcos,

Your AddMethod rule should look something like this (haven't tested this
code):

AddMethod:
ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,Some(ImplementsDec(interfaces)),ClassBody(bodyelems)
->
ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,Some(ImplementsDec(interfaces)),ClassBody(newbodyelems)

where  <fetch(?InterfaceType(TypeName(Id("TObject")), None()))> interfaces
with     newbodyelems := <concat> [ bodyelems, java:class-body-dec* |[
public Boolean getFork () {} public void setFork () {} ]|  ]

some pointers:

Java SDF syntax:
https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax/src/
Java Class syntax:
https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax/src/languages/java-15/classes/ClassDeclarations.sdf
Java embedding in Stratego:
https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax-embedding/languages/java/EmbeddedJava.sdf


-Danny

On Thu, Oct 29, 2009 at 9:39 PM, <marcosge at ucpel.tche.br> wrote:

> I did this:
>
> I used the tool pp-aterm to generated the abstract syntax tree of class:
>
> class Fork implements TObject {
>    private volatile Boolean fork = true;
> }
>
> and the pp-aterm generated:
>
> CompilationUnit(
>  None()
> , []
> , [ ClassDec(
>      ClassDecHead(
>        []
>      , Id("Fork")
>      , None()
>      , None()
>      , Some(ImplementsDec([InterfaceType(TypeName(Id("TObject")),
> None())]))
>      )
>    , ClassBody(
>        [ FieldDec(
>            [Private(), Volatile()]
>          , Boolean()
>          , [VarDec(Id("fork"), Lit(Bool(True())))]
>          )
>        ]
>      )
>    )
>  ]
> )
>
> Then in my .str, I wrote this rule:
>
> module add-method
> imports libstratego-lib libjava-front
> strategies
>
>  main =
>    io-wrap(add-method)
>
>  add-method =
>    topdown(try(AddMethod))
>
> rules
>
>  AddMethod:
>   ImplementsDec(e) ->
> ImplementsDec([InterfaceType(TypeName(Id("TObject")), None())])
>     where <equal>(e,[InterfaceType(TypeName(Id("TObject")), None())])
>
>
> Ok. This is simple, but I need verify that the class implements the
> interface TObject. My transformation will be:
>
> Translate this code:
>
> class Fork implements TObject {
>    private volatile Boolean fork = true;
> }
>
> To this code:
>
> class Fork implements TObject {
>    private volatile Boolean fork = true;
>    public getFork () {}
>    public setFork () {}
> }
>
> Do you understand?
>
>
>
> >
> > Hi Marcos,
> >
> > I am not sure what you mean with '.. And I create a rule using the
> > function <equal>  but I could not made the transformation...'. Could you
> > be a bit more specific on your problems?
> >
> > I don't think there a real tutorial for Java transformations, but maybe
> > this presentation gives an idea. http://smart-generators.org/M3Visser*
> > And of course there is the StrategoXT manual which gives explanation of
> > all aspects of StrategoXT architecture and language:
> >
> http://hydra.nixos.org/job/strategoxt-docs/strategoxt-manual/html/latest/download/1/manual
> >
> > greetings,
> > Rob
> >
> >
> > 2009/10/29 <marcosge at ucpel.tche.br>
> >
> >     Hi users, I am using the Stratego/XT tool with Java-Front for
> > translate
> >     some codes. But I could not made a transformation. It is not
> > difficult,
> >     but I need help.
> >
> >     I have a simple class:
> >
> >     class Fork implements TObject {
> >            private volatile Boolean fork = true;
> >     }
> >
> >     And I need verify that this class implements the interface 'TObjetc'.
> > If
> >     yes, I include some code after the attribute 'fork':
> >
> >     class Fork implements TObject {
> >           private volatile Boolean fork = true;
> >           public getFork () {}
> >           public setFork () {}
> >     }
> >
> >     I tried made this analyzing the abstract syntax tree generated by the
> >     output of parse-java to the pp-aterm tool. And I create a rule using
> > the
> >     function <equal>  but I could not made the transformation. I think
> > this is
> >     simple, but I do not understand how to make this.
> >
> >     Can you help me?
> >
> >     Do you have any paper that learns how do this?
> >
> >     --
> >     Marcos Echevarria
> >     UCPEL - Brazil
> > _______________________________________________
> > Users mailing list
> > Users at strategoxt.org
> > https://mailman.st.ewi.tudelft.nl/listinfo/users
> >
>
>
>
> _______________________________________________
> Users mailing list
> Users at strategoxt.org
> https://mailman.st.ewi.tudelft.nl/listinfo/users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://mailman.st.ewi.tudelft.nl/pipermail/users/attachments/20091102/f27034f3/attachment.html 

From naveneetha at yahoo.com  Mon Nov  2 20:29:36 2009
From: naveneetha at yahoo.com (Naveneetha Vasudevan)
Date: Mon, 2 Nov 2009 11:29:36 -0800 (PST)
Subject: [Stratego Users] Type checking in Stratego
In-Reply-To: <20090926202340.GD19035@maverick>
Message-ID: <928448.49615.qm@web51009.mail.re2.yahoo.com>

Hi Dan,

Thanks for pointing me in the right direction. I think the use of dynamic rules makes lot of sense. 

thanks
Krishnan

--- On Sat, 9/26/09, thequux at gmail.com <thequux at gmail.com> wrote:

> From: thequux at gmail.com <thequux at gmail.com>
> Subject: Re: [Stratego Users] Type checking in Stratego
> To: "Stratego/XT Users" <users at strategoxt.org>
> Date: Saturday, September 26, 2009, 9:23 PM
> Yes. That is very much how I'd go
> about doing it. Except that in general I'd go with a set of
> dynamic rules of the form
> 
> ColType:? table(table_name,column_name) ->
> column_type
> 
> Because it can be used to give better diagnostics. (if the
> rule fails to match, no such column; if the return value is
> wrong, wrong type).
> 
> Keep in mind that you can create terms of types other than
> things in the source and destination language.
> 
> Another way to do it that could be clearer is to use a
> two-pass method, where the first pass gathers type
> information, and the second pass sticks the type information
> back into the select statements and propogates it upwards,
> through various functions.
> 
> Does this clarify things?
> 
> --Dan Hirsch
> 
> On Sat, Sep 26, 2009 at 04:16:46AM -0700, Naveneetha
> Vasudevan wrote:
> > Hi All,
> > 
> > I have a question on how type checking can be achieved
> in Stratego. Let me explain with an example using embedded
> SQLs in Java.
> > 
> > If a Java program, has an embedded 'create' statement
> - create table employee { id int(10), name varchar(20)} -
> and one or more of the select/update/delete statement (e.g:
> "select * from employee where id=10"), then based on the
> create statement, how can we enforce type checking on the
> 'select' statement. 
> > 
> > So, if I have a 'select * from employee where id="10"'
> (it should be id=10, as 'id' is an integer), then the
> transformation should fail.
> > 
> > The only way I can think of is to check the 'create'
> statement definition for every 'select' statement. Something
> along these lines:
> > 
> > create-rule:
> > [| create table x_table_name { id int .. }? |]
> -> [|? .. java code .. |]
> > 
> > 
> > select-rule:
> > [| select * from x_table_name where
> x_col=x_value? |] ->
> >? ???[| .. java code ..|] where
> <concat-strings>["create table",x_table_name, " {",
> ....]
> > 
> > So, we create the "create" statement definition at
> run-time based on the information in the 'select' statement;
> and then invoke the <create-rule> as part of the where
> clause of the <select-rule>. If there is a match on
> any transformation rule, then we are good (we don't really
> care about the results of the transformation, just a match
> is sufficient). What do you think?
> > 
> > Is there a better way to performing this checking?
> > 
> > thanks in advance
> > 
> > -krish
> > 
> > 
> >? ? ???
> > _______________________________________________
> > Users mailing list
> > Users at strategoxt.org
> > https://mailman.st.ewi.tudelft.nl/listinfo/users
> _______________________________________________
> Users mailing list
> Users at strategoxt.org
> https://mailman.st.ewi.tudelft.nl/listinfo/users
> 


      


From E.Visser at tudelft.nl  Thu Nov  5 11:44:25 2009
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Thu, 5 Nov 2009 11:44:25 +0100
Subject: [Stratego Users] Vote NOW for WebDSL
Message-ID: <ed55b7d90911050244i2482b525t865da2a72a0417a0@mail.gmail.com>

Today the WebDSL team is competing in the Delft Design and Engineering
Award. You can support us by voting NOW at

  http://bit.ly/1WeAiX

Voting takes only 10 seconds.

thanks,

-- Eelco, Zef & Danny
http://eelcovisser.org

From nvintila at yahoo.com  Thu Nov  5 17:08:01 2009
From: nvintila at yahoo.com (Nicolae Vintila)
Date: Thu, 5 Nov 2009 08:08:01 -0800 (PST)
Subject: [Stratego Users] Vote NOW for WebDSL
In-Reply-To: <ed55b7d90911050244i2482b525t865da2a72a0417a0@mail.gmail.com>
References: <ed55b7d90911050244i2482b525t865da2a72a0417a0@mail.gmail.com>
Message-ID: <435686.77004.qm@web112109.mail.gq1.yahoo.com>

Sorry, Eelco, where is the vote button on the site? Sorry if silly question?




________________________________
From: Eelco Visser <E.Visser at tudelft.nl>
To: users at strategoxt.org; webdsl <webdsl at st.ewi.tudelft.nl>; MoDSE Colloquium <modse-colloquium at st.ewi.tudelft.nl>
Sent: Thu, November 5, 2009 5:44:25 AM
Subject: [Stratego Users] Vote NOW for WebDSL

Today the WebDSL team is competing in the Delft Design and Engineering
Award. You can support us by voting NOW at

  http://bit.ly/1WeAiX

Voting takes only 10 seconds.

thanks,

-- Eelco, Zef & Danny
http://eelcovisser.org
_______________________________________________
Users mailing list
Users at strategoxt.org
https://mailman.st.ewi.tudelft.nl/listinfo/users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://mailman.st.ewi.tudelft.nl/pipermail/users/attachments/20091105/52760ca3/attachment.html 

From marcosge at ucpel.tche.br  Thu Nov  5 21:14:33 2009
From: marcosge at ucpel.tche.br (marcosge at ucpel.tche.br)
Date: Thu, 5 Nov 2009 18:14:33 -0200
Subject: [Stratego Users] Help with Stratego/XT and Java-front
In-Reply-To: <ba99f2d70911020418k493af1c3nd6d7639ba8ef6b48@mail.gmail.com>
References: <7C1D1C7736DF8642A9F8D52C83867F6D596AA4@SRV502.tudelft.net>
	<72990e9aa77e6b10fbbfd95c4805115e.squirrel@webmail.ucpel.tche.br>
	<ba99f2d70911020418k493af1c3nd6d7639ba8ef6b48@mail.gmail.com>
Message-ID: <4f621d3a23672a2b5fae7efe9d72f734.squirrel@webmail.ucpel.tche.br>

Hi Danny, thank you for your answer.

When I tried to compiled this code I had an error:

quinho at linux-xlt5:~/Desktop/implements> strc -i add-method.str $(strcflags
stratego-lib java-front)
[ strc | info ] Compiling 'add-method.str'
[ strc | error ] ./add-method.str: character ':' unexpected at line 29,
column 50
[ strc | error ] where  <fetch(?InterfaceType(TypeName(Id("TObject")),
None()))> interfaces
[ strc | error ] with   newbodyelems := <concat> [ bodyelems,
java:class-body-dec*|[ public boolean getFork () {} public void setFork ()
{} ]|  ]
[ strc | error ]                                                  ^
parse error in ./add-method.str


Then I removed the "java:" before "class-body-dec*" and the error was:

quinho at linux-xlt5:~/Desktop/implements> strc -i add-method.str $(strcflags
stratego-lib java-front)
[ strc | info ] Compiling 'add-method.str'
[ strc | error ] ./add-method.str: character 'b' unexpected at line 29,
column 71
[ strc | error ] where  <fetch(?InterfaceType(TypeName(Id("TObject")),
None()))> interfaces
[ strc | error ] with   newbodyelems := <concat> [ bodyelems,
class-body-dec*|[ public boolean getFork () {} public void setFork () {}
]|   ]
[ strc | error ]                                                          
            ^
parse error in ./add-method.str


--Marcos


> Hi Marcos,
>
> Your AddMethod rule should look something like this (haven't tested this
> code):
>
> AddMethod:
> ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,Some(ImplementsDec(interfaces)),ClassBody(bodyelems)
> ->
> ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,Some(ImplementsDec(interfaces)),ClassBody(newbodyelems)
>
> where  <fetch(?InterfaceType(TypeName(Id("TObject")), None()))> interfaces
> with     newbodyelems := <concat> [ bodyelems, java:class-body-dec* |[
> public Boolean getFork () {} public void setFork () {} ]|  ]
>
> some pointers:
>
> Java SDF syntax:
> https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax/src/
> Java Class syntax:
> https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax/src/languages/java-15/classes/ClassDeclarations.sdf
> Java embedding in Stratego:
> https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax-embedding/languages/java/EmbeddedJava.sdf
>
>
> -Danny
>
> On Thu, Oct 29, 2009 at 9:39 PM, <marcosge at ucpel.tche.br> wrote:
>
>> I did this:
>>
>> I used the tool pp-aterm to generated the abstract syntax tree of class:
>>
>> class Fork implements TObject {
>>    private volatile Boolean fork = true;
>> }
>>
>> and the pp-aterm generated:
>>
>> CompilationUnit(
>>  None()
>> , []
>> , [ ClassDec(
>>      ClassDecHead(
>>        []
>>      , Id("Fork")
>>      , None()
>>      , None()
>>      , Some(ImplementsDec([InterfaceType(TypeName(Id("TObject")),
>> None())]))
>>      )
>>    , ClassBody(
>>        [ FieldDec(
>>            [Private(), Volatile()]
>>          , Boolean()
>>          , [VarDec(Id("fork"), Lit(Bool(True())))]
>>          )
>>        ]
>>      )
>>    )
>>  ]
>> )
>>
>> Then in my .str, I wrote this rule:
>>
>> module add-method
>> imports libstratego-lib libjava-front
>> strategies
>>
>>  main =
>>    io-wrap(add-method)
>>
>>  add-method =
>>    topdown(try(AddMethod))
>>
>> rules
>>
>>  AddMethod:
>>   ImplementsDec(e) ->
>> ImplementsDec([InterfaceType(TypeName(Id("TObject")), None())])
>>     where <equal>(e,[InterfaceType(TypeName(Id("TObject")), None())])
>>
>>
>> Ok. This is simple, but I need verify that the class implements the
>> interface TObject. My transformation will be:
>>
>> Translate this code:
>>
>> class Fork implements TObject {
>>    private volatile Boolean fork = true;
>> }
>>
>> To this code:
>>
>> class Fork implements TObject {
>>    private volatile Boolean fork = true;
>>    public getFork () {}
>>    public setFork () {}
>> }
>>
>> Do you understand?
>>
>>
>>
>> >
>> > Hi Marcos,
>> >
>> > I am not sure what you mean with '.. And I create a rule using the
>> > function <equal>  but I could not made the transformation...'. Could
>> you
>> > be a bit more specific on your problems?
>> >
>> > I don't think there a real tutorial for Java transformations, but
>> maybe
>> > this presentation gives an idea. http://smart-generators.org/M3Visser*
>> > And of course there is the StrategoXT manual which gives explanation
>> of
>> > all aspects of StrategoXT architecture and language:
>> >
>> http://hydra.nixos.org/job/strategoxt-docs/strategoxt-manual/html/latest/download/1/manual
>> >
>> > greetings,
>> > Rob
>> >
>> >
>> > 2009/10/29 <marcosge at ucpel.tche.br>
>> >
>> >     Hi users, I am using the Stratego/XT tool with Java-Front for
>> > translate
>> >     some codes. But I could not made a transformation. It is not
>> > difficult,
>> >     but I need help.
>> >
>> >     I have a simple class:
>> >
>> >     class Fork implements TObject {
>> >            private volatile Boolean fork = true;
>> >     }
>> >
>> >     And I need verify that this class implements the interface
>> 'TObjetc'.
>> > If
>> >     yes, I include some code after the attribute 'fork':
>> >
>> >     class Fork implements TObject {
>> >           private volatile Boolean fork = true;
>> >           public getFork () {}
>> >           public setFork () {}
>> >     }
>> >
>> >     I tried made this analyzing the abstract syntax tree generated by
>> the
>> >     output of parse-java to the pp-aterm tool. And I create a rule
>> using
>> > the
>> >     function <equal>  but I could not made the transformation. I think
>> > this is
>> >     simple, but I do not understand how to make this.
>> >
>> >     Can you help me?
>> >
>> >     Do you have any paper that learns how do this?
>> >
>> >     --
>> >     Marcos Echevarria
>> >     UCPEL - Brazil
>> > _______________________________________________
>> > Users mailing list
>> > Users at strategoxt.org
>> > https://mailman.st.ewi.tudelft.nl/listinfo/users
>> >
>>
>>
>>
>> _______________________________________________
>> Users mailing list
>> Users at strategoxt.org
>> https://mailman.st.ewi.tudelft.nl/listinfo/users
>>
> _______________________________________________
> Users mailing list
> Users at strategoxt.org
> https://mailman.st.ewi.tudelft.nl/listinfo/users
>




From dgroenewegen at gmail.com  Thu Nov  5 21:55:03 2009
From: dgroenewegen at gmail.com (Danny Groenewegen)
Date: Thu, 5 Nov 2009 21:55:03 +0100
Subject: [Stratego Users] Help with Stratego/XT and Java-front
In-Reply-To: <4f621d3a23672a2b5fae7efe9d72f734.squirrel@webmail.ucpel.tche.br>
References: <7C1D1C7736DF8642A9F8D52C83867F6D596AA4@SRV502.tudelft.net>
	<72990e9aa77e6b10fbbfd95c4805115e.squirrel@webmail.ucpel.tche.br>
	<ba99f2d70911020418k493af1c3nd6d7639ba8ef6b48@mail.gmail.com>
	<4f621d3a23672a2b5fae7efe9d72f734.squirrel@webmail.ucpel.tche.br>
Message-ID: <ba99f2d70911051255r2ed6c3cq2e4d0aac8db914fb@mail.gmail.com>

Hi Marcos,

Did you add an add-method.meta file containing:

Meta([
  Syntax("Stratego-Java-15")
])


-Danny

On Thu, Nov 5, 2009 at 9:14 PM, <marcosge at ucpel.tche.br> wrote:

> Hi Danny, thank you for your answer.
>
> When I tried to compiled this code I had an error:
>
> quinho at linux-xlt5:~/Desktop/implements> strc -i add-method.str $(strcflags
> stratego-lib java-front)
> [ strc | info ] Compiling 'add-method.str'
> [ strc | error ] ./add-method.str: character ':' unexpected at line 29,
> column 50
> [ strc | error ] where  <fetch(?InterfaceType(TypeName(Id("TObject")),
> None()))> interfaces
> [ strc | error ] with   newbodyelems := <concat> [ bodyelems,
> java:class-body-dec*|[ public boolean getFork () {} public void setFork ()
> {} ]|  ]
> [ strc | error ]                                                  ^
> parse error in ./add-method.str
>
>
> Then I removed the "java:" before "class-body-dec*" and the error was:
>
> quinho at linux-xlt5:~/Desktop/implements> strc -i add-method.str $(strcflags
> stratego-lib java-front)
> [ strc | info ] Compiling 'add-method.str'
> [ strc | error ] ./add-method.str: character 'b' unexpected at line 29,
> column 71
> [ strc | error ] where  <fetch(?InterfaceType(TypeName(Id("TObject")),
> None()))> interfaces
> [ strc | error ] with   newbodyelems := <concat> [ bodyelems,
> class-body-dec*|[ public boolean getFork () {} public void setFork () {}
> ]|   ]
> [ strc | error ]
>            ^
> parse error in ./add-method.str
>
>
> --Marcos
>
>
> > Hi Marcos,
> >
> > Your AddMethod rule should look something like this (haven't tested this
> > code):
> >
> > AddMethod:
> >
> ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,Some(ImplementsDec(interfaces)),ClassBody(bodyelems)
> > ->
> >
> ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,Some(ImplementsDec(interfaces)),ClassBody(newbodyelems)
> >
> > where  <fetch(?InterfaceType(TypeName(Id("TObject")), None()))>
> interfaces
> > with     newbodyelems := <concat> [ bodyelems, java:class-body-dec* |[
> > public Boolean getFork () {} public void setFork () {} ]|  ]
> >
> > some pointers:
> >
> > Java SDF syntax:
> > https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax/src/
> > Java Class syntax:
> >
> https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax/src/languages/java-15/classes/ClassDeclarations.sdf
> > Java embedding in Stratego:
> >
> https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax-embedding/languages/java/EmbeddedJava.sdf
> >
> >
> > -Danny
> >
> > On Thu, Oct 29, 2009 at 9:39 PM, <marcosge at ucpel.tche.br> wrote:
> >
> >> I did this:
> >>
> >> I used the tool pp-aterm to generated the abstract syntax tree of class:
> >>
> >> class Fork implements TObject {
> >>    private volatile Boolean fork = true;
> >> }
> >>
> >> and the pp-aterm generated:
> >>
> >> CompilationUnit(
> >>  None()
> >> , []
> >> , [ ClassDec(
> >>      ClassDecHead(
> >>        []
> >>      , Id("Fork")
> >>      , None()
> >>      , None()
> >>      , Some(ImplementsDec([InterfaceType(TypeName(Id("TObject")),
> >> None())]))
> >>      )
> >>    , ClassBody(
> >>        [ FieldDec(
> >>            [Private(), Volatile()]
> >>          , Boolean()
> >>          , [VarDec(Id("fork"), Lit(Bool(True())))]
> >>          )
> >>        ]
> >>      )
> >>    )
> >>  ]
> >> )
> >>
> >> Then in my .str, I wrote this rule:
> >>
> >> module add-method
> >> imports libstratego-lib libjava-front
> >> strategies
> >>
> >>  main =
> >>    io-wrap(add-method)
> >>
> >>  add-method =
> >>    topdown(try(AddMethod))
> >>
> >> rules
> >>
> >>  AddMethod:
> >>   ImplementsDec(e) ->
> >> ImplementsDec([InterfaceType(TypeName(Id("TObject")), None())])
> >>     where <equal>(e,[InterfaceType(TypeName(Id("TObject")), None())])
> >>
> >>
> >> Ok. This is simple, but I need verify that the class implements the
> >> interface TObject. My transformation will be:
> >>
> >> Translate this code:
> >>
> >> class Fork implements TObject {
> >>    private volatile Boolean fork = true;
> >> }
> >>
> >> To this code:
> >>
> >> class Fork implements TObject {
> >>    private volatile Boolean fork = true;
> >>    public getFork () {}
> >>    public setFork () {}
> >> }
> >>
> >> Do you understand?
> >>
> >>
> >>
> >> >
> >> > Hi Marcos,
> >> >
> >> > I am not sure what you mean with '.. And I create a rule using the
> >> > function <equal>  but I could not made the transformation...'. Could
> >> you
> >> > be a bit more specific on your problems?
> >> >
> >> > I don't think there a real tutorial for Java transformations, but
> >> maybe
> >> > this presentation gives an idea.
> http://smart-generators.org/M3Visser*
> >> > And of course there is the StrategoXT manual which gives explanation
> >> of
> >> > all aspects of StrategoXT architecture and language:
> >> >
> >>
> http://hydra.nixos.org/job/strategoxt-docs/strategoxt-manual/html/latest/download/1/manual
> >> >
> >> > greetings,
> >> > Rob
> >> >
> >> >
> >> > 2009/10/29 <marcosge at ucpel.tche.br>
> >> >
> >> >     Hi users, I am using the Stratego/XT tool with Java-Front for
> >> > translate
> >> >     some codes. But I could not made a transformation. It is not
> >> > difficult,
> >> >     but I need help.
> >> >
> >> >     I have a simple class:
> >> >
> >> >     class Fork implements TObject {
> >> >            private volatile Boolean fork = true;
> >> >     }
> >> >
> >> >     And I need verify that this class implements the interface
> >> 'TObjetc'.
> >> > If
> >> >     yes, I include some code after the attribute 'fork':
> >> >
> >> >     class Fork implements TObject {
> >> >           private volatile Boolean fork = true;
> >> >           public getFork () {}
> >> >           public setFork () {}
> >> >     }
> >> >
> >> >     I tried made this analyzing the abstract syntax tree generated by
> >> the
> >> >     output of parse-java to the pp-aterm tool. And I create a rule
> >> using
> >> > the
> >> >     function <equal>  but I could not made the transformation. I think
> >> > this is
> >> >     simple, but I do not understand how to make this.
> >> >
> >> >     Can you help me?
> >> >
> >> >     Do you have any paper that learns how do this?
> >> >
> >> >     --
> >> >     Marcos Echevarria
> >> >     UCPEL - Brazil
> >> > _______________________________________________
> >> > Users mailing list
> >> > Users at strategoxt.org
> >> > https://mailman.st.ewi.tudelft.nl/listinfo/users
> >> >
> >>
> >>
> >>
> >> _______________________________________________
> >> Users mailing list
> >> Users at strategoxt.org
> >> https://mailman.st.ewi.tudelft.nl/listinfo/users
> >>
> > _______________________________________________
> > Users mailing list
> > Users at strategoxt.org
> > https://mailman.st.ewi.tudelft.nl/listinfo/users
> >
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://mailman.st.ewi.tudelft.nl/pipermail/users/attachments/20091105/71e1e03d/attachment-0001.html 

From marcosge at ucpel.tche.br  Thu Nov 12 20:03:49 2009
From: marcosge at ucpel.tche.br (marcosge at ucpel.tche.br)
Date: Thu, 12 Nov 2009 17:03:49 -0200
Subject: [Stratego Users] Inserting a new block in java grammar
Message-ID: <62219e6c3036fa07ce9aa6e3aedc9da3.squirrel@webmail.ucpel.tche.br>

Hi people, I was trying to insert a new block in java grammar but the
java-front was not recognize the new block.

What did I do?

I downloaded the source code of java-front and I changed the files in the
local:
java-front-0.9/syntax/src/languages
Then I installed the java-front with:
./configure
make
make install

Later I tried to use the java-front with my new block, but the java-front
didn't recognized.

My new block is similar to the "if" block.

I tried to modify the files Java-15.def and JavaCompilationUnit.def to
include my new block, but when I tried to install the java-front I had an
error and I couldn't install.


--
Marcos Echevarria
UCPEL - Brazil





From marcosge at ucpel.tche.br  Tue Nov 17 02:26:03 2009
From: marcosge at ucpel.tche.br (marcosge at ucpel.tche.br)
Date: Mon, 16 Nov 2009 23:26:03 -0200
Subject: [Stratego Users] Help with Stratego/XT and Java-front
Message-ID: <fb5dcad3ee349c4401c521e145357c5c.squirrel@webmail.ucpel.tche.br>

Hi users, I have another question about translate codes with Java-Front.

I have a simple class:

class Cutlery implements TObject {
        private volatile Boolean fork;
        private volatile Boolean spoon;
}

And now I can verify if this class implements the interface TObject and I
introduce some code in this class. My rule is:

  module add-method
  imports
    libstratego-lib
    libjava-front
  strategies
    main =
      io-wrap(add-method)
    add-method =
      topdown(try(AddMethod))
  rules
    AddMethod:
      ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,
               Some(ImplementsDec(interfaces))),ClassBody(bodyelems)) ->
      ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,
               Some(ImplementsDec(interfaces))),ClassBody(newbodyelems))
where  <fetch(?InterfaceType(TypeName(Id("TObject")), None()))> interfaces
with   newbodyelems := <concat> [ bodyelems, java:class-body-dec* |[
public boolean getName1 () {} public void setName1 () {} public
void getName2 () {}  public void setName2() {} ]|   ]


OK, it works. But I need get the name of the attributes and put these
names in the name of the methods. Now the result of my transformation is:

class Cutlery implements TObject {
  private volatile Boolean fork;
  private volatile Boolean spoon;

  public boolean getName1() { }
  public void setName1() { }
  public void getName2() { }
  public void setName2() { }
}

But I need put the name of the attributes in the name of the methods like
this:

class Cutlery implements TObject {
  private volatile Boolean fork;
  private volatile Boolean spoon;

  public boolean getFork() { }
  public void setFork() { }
  public boolean getSpoon() { }
  public void setSpoon() { }
}

Can you help me?


--
Marcos Echevarria
UCPEL - BRAZIL







From margus at cyber.ee  Wed Nov 18 15:22:49 2009
From: margus at cyber.ee (Margus Freudenthal)
Date: Wed, 18 Nov 2009 16:22:49 +0200
Subject: [Stratego Users] Using embedded syntax with significant whitespace
Message-ID: <4B040339.8010707@cyber.ee>

Hello.

I am trying to create a simple templating engine using Stratego. The 
syntax files are attached. In general, this approach works, but because 
Stratego uses context-free syntax, some whitespace is occasionally lost. 
For example,
	|[foo bar #{<add> (1, 2)} baz]|
expands to
	Template(["foo bar ",3,"baz"])

Note that the leading white space in "baz" is lost.

Is there a way to make whitespace in the embedded syntax significant? Am 
I even trying to do a sensible thing?

-- 
Margus
-------------- next part --------------
A non-text attachment was scrubbed...
Name: TemplaterSyntax.sdf
Type: application/vnd.stardivision.math
Size: 246 bytes
Desc: not available
Url : https://mailman.st.ewi.tudelft.nl/pipermail/users/attachments/20091118/a9e0e66b/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: StrategoTemplater.sdf
Type: application/vnd.stardivision.math
Size: 288 bytes
Desc: not available
Url : https://mailman.st.ewi.tudelft.nl/pipermail/users/attachments/20091118/a9e0e66b/attachment-0001.bin 

From L.C.L.Kats at tudelft.nl  Wed Nov 18 17:16:01 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 18 Nov 2009 17:16:01 +0100
Subject: [Stratego Users] [String quotations in Stratego]
In-Reply-To: <4B040339.8010707@cyber.ee>
References: <4B040339.8010707@cyber.ee>
Message-ID: <200911181616.nAIGG2Z5015785@smtp1.infopact.nl>

@ 15:22 18-11-2009, Margus Freudenthal wrote:
>Hello.
>
>I am trying to create a simple templating engine using Stratego. The syntax files are attached. In general, this approach works, but because Stratego uses context-free syntax, some whitespace is occasionally lost. For example,
>        |[foo bar #{<add> (1, 2)} baz]|
>expands to
>        Template(["foo bar ",3,"baz"])
>
>Note that the leading white space in "baz" is lost.
>
>[...]

Hi Margus,

It so happens that just last week I added a new string quotation syntax to the pre-release version of Stratego 0.18 (http://hydra.nixos.org/jobset/strategoxt/strategoxt-release/channel/latest). Here's the log:

@ 20:01 12-11-2009, Lennart Kats wrote:
>New Revision: 20226
>
>You can view the changes in this commit at:
>   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20226&view=rev
>
>[...]
>
>Log:
>Added a new indentation-safe string quotation syntax, which
>can be (ab)used to quickly construct strings. Strings
>can be quoted using $[ ... ], and anti-quoted using [ ... ].
>Alternatively, ${, $(, or $< and corresponding anti-quotations
>may also be used.
>
>Example:
>
>  x      := $[ A extends B ];
>  method := $[ void foo() {
>                 ...
>               }
>            ];
>  !$[
>      class Foo [x] {
>        [method]
>      }
>  ]
>
>is equivalent to (note the indentation):
>
>!$[
>class Foo A extends B {
>  void foo() {
>    ...
>  }
>}
>]
>
>and is evaluated by a concat-strings application, resulting in
>a nicely indented string.
>
>Internally, asfix-imploder takes care of the indentation using a
>new {indentpadding} SDF annotation, which adds indentation padding
>to any lexical. (Using backtracking, this asfix-imploder modification
>should have very little performance effect on existing applications.)
>
>Use it responsibly!

@ 15:22 18-11-2009, Margus Freudenthal wrote:
>[...]
>
>Is there a way to make whitespace in the embedded syntax significant? Am I even trying to do a sensible thing?
>
>-- 
>Margus

Now that's a good question :) Do note the word of caution at the end of the commit message. We have been advocating (most recently in [1]) the use of concrete object syntax as opposed to string templates with good reason: object syntax can be syntax-checked, allows for stepwise transformations, and it can be better supported in IDEs. Still, we're always open for new things, and we're going to experiment more with this new quotation construct ourselves. If anything, it should motivate us to continue making it easier to use proper concrete object syntax ;)

If you give it a try, please let us know what you think of the design, which is not cast in stone (yet).

Cheers,

Lennart

[1] Hemel, Kats, Groenewegen Visser. Code Generation by Model Transformation. http://dx.doi.org/10.1007/s10270-009-0136-1. 


From L.C.L.Kats at tudelft.nl  Wed Nov 18 17:36:24 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 18 Nov 2009 17:36:24 +0100
Subject: [Stratego Users] Help with Stratego/XT and Java-front
In-Reply-To: <fb5dcad3ee349c4401c521e145357c5c.squirrel@webmail.ucpel.tc he.br>
References: <fb5dcad3ee349c4401c521e145357c5c.squirrel@webmail.ucpel.tche.br>
Message-ID: <200911181636.nAIGaPVO018622@smtp1.infopact.nl>

Hi Marcos,

For that you'd have to write a rule that rewrites every property to a set of accessors:

  to-accessors:
     FieldDec(_, _, [VarDec(Id(x))]) -> class-body-dec* |[
       public boolean get#x() { }
       public void set#x() { }
     ]|

and then map that rule over all fields:

  accessor* := <map(to-accessors)> field*

then you get a list of lists, so do a concat and you get a list of all accessors.

Finally, notice that I used the special # thingy, which is our identifier concatenation operator. Use java-concat-ids to desugar it into normal Java identifiers, concatenating the "get" with the field name. (Which, as a follow-up to my last email on this list, is an excellent example of why concrete syntax is a good idea: the reusable java-concat-ids transformation step knows the Java coding conventions and adds proper capitalization, simplifying other transformation steps that use it.)

hth,

Lennart

@ 02:26 17-11-2009, U wrote:
>Hi users, I have another question about translate codes with Java-Front.
>
>I have a simple class:
>
>class Cutlery implements TObject {
>        private volatile Boolean fork;
>        private volatile Boolean spoon;
>}
>
>And now I can verify if this class implements the interface TObject and I
>introduce some code in this class. My rule is:
>
>  module add-method
>  imports
>    libstratego-lib
>    libjava-front
>  strategies
>    main =
>      io-wrap(add-method)
>    add-method =
>      topdown(try(AddMethod))
>  rules
>    AddMethod:
>      ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,
>               Some(ImplementsDec(interfaces))),ClassBody(bodyelems)) ->
>      ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,
>               Some(ImplementsDec(interfaces))),ClassBody(newbodyelems))
>where  <fetch(?InterfaceType(TypeName(Id("TObject")), None()))> interfaces
>with   newbodyelems := <concat> [ bodyelems, java:class-body-dec* |[
>public boolean getName1 () {} public void setName1 () {} public
>void getName2 () {}  public void setName2() {} ]|   ]
>
>
>OK, it works. But I need get the name of the attributes and put these
>names in the name of the methods. Now the result of my transformation is:
>
>class Cutlery implements TObject {
>  private volatile Boolean fork;
>  private volatile Boolean spoon;
>
>  public boolean getName1() { }
>  public void setName1() { }
>  public void getName2() { }
>  public void setName2() { }
>}
>
>But I need put the name of the attributes in the name of the methods like
>this:
>
>class Cutlery implements TObject {
>  private volatile Boolean fork;
>  private volatile Boolean spoon;
>
>  public boolean getFork() { }
>  public void setFork() { }
>  public boolean getSpoon() { }
>  public void setSpoon() { }
>}
>
>Can you help me?
>
>
>--
>Marcos Echevarria
>UCPEL - BRAZIL
>
>
>
>
>
>
>_______________________________________________
>Users mailing list
>Users at strategoxt.org
>https://mailman.st.ewi.tudelft.nl/listinfo/users


From margus at cyber.ee  Thu Nov 19 09:44:16 2009
From: margus at cyber.ee (Margus Freudenthal)
Date: Thu, 19 Nov 2009 10:44:16 +0200
Subject: [Stratego Users] [String quotations in Stratego]
In-Reply-To: <200911181616.nAIGG2Z5015785@smtp1.infopact.nl>
References: <4B040339.8010707@cyber.ee>
	<200911181616.nAIGG2Z5015785@smtp1.infopact.nl>
Message-ID: <4B050560.2070705@cyber.ee>

Hi

Lennart Kats wrote:
> 
> 
> It so happens that just last week I added a new string quotation syntax to the pre-release version of Stratego 0.18 (http://hydra.nixos.org/jobset/strategoxt/strategoxt-release/channel/latest). Here's the log:
> 
Thanks, I'll check it out.

> 
> [...] We have been advocating (most recently in [1]) the use of concrete object syntax as opposed to string templates with good reason: object syntax can be syntax-checked, allows for stepwise transformations, and it can be better supported in IDEs. Still, we're always open for new things, and we're going to experiment more with this new quotation construct ourselves. If anything, it should motivate us to continue making it easier to use proper concrete object syntax ;)
> 
I agree that this is in principle the right approach. I did some 
prototypes with java-front and felt that the anti-quotation was a bit 
pain. When using anti-quotation, one has to be very aware of the AST 
that results from parsing the embedded Java code and arrange things so 
that the escaped part fits nicely into the bigger AST. If there is 
mismatch, user gets runtime error (during pretty-printing). With enough 
experience, it probably becomes easier to see the AST behind Java code, 
but for non-experts (me, at least) this results in trying out the 
possible escape codes (~expr, ~x, ...).

It seems to me that at least currently it is easier to construct the 
target program as string with all the resulting consequences. It is 
possible that this problem is mainly related to Java with very complex 
grammar and AST and e.g. generating assembly code with embedded syntax 
is easier.

The idea of embedded syntax and java-front is very cool and it would be 
great, if this would be the default choice in many code generation 
engines. :)

-- 
Margus

From dgroenewegen at gmail.com  Thu Nov 19 19:31:15 2009
From: dgroenewegen at gmail.com (Danny Groenewegen)
Date: Thu, 19 Nov 2009 19:31:15 +0100
Subject: [Stratego Users]  Help with Stratego/XT and Java-front
In-Reply-To: <ba99f2d70911191029k3c066270o81bcdf4fd1abf3b4@mail.gmail.com>
References: <7C1D1C7736DF8642A9F8D52C83867F6D596AA4@SRV502.tudelft.net>
	<72990e9aa77e6b10fbbfd95c4805115e.squirrel@webmail.ucpel.tche.br>
	<ba99f2d70911020418k493af1c3nd6d7639ba8ef6b48@mail.gmail.com>
	<4f621d3a23672a2b5fae7efe9d72f734.squirrel@webmail.ucpel.tche.br>
	<ba99f2d70911051255r2ed6c3cq2e4d0aac8db914fb@mail.gmail.com>
	<f846b6fc4949ba5ed5d31601dd2ae41f.squirrel@webmail.ucpel.tche.br>
	<ba99f2d70911191029k3c066270o81bcdf4fd1abf3b4@mail.gmail.com>
Message-ID: <ba99f2d70911191031vf587a72q2114dfe5a287b23c@mail.gmail.com>

---------- Forwarded message ----------
From: Danny Groenewegen <dgroenewegen at gmail.com>
Date: Thu, Nov 19, 2009 at 7:29 PM
Subject: Re: [Stratego Users] Help with Stratego/XT and Java-front
To: marcosge at ucpel.tche.br


Hi Marcos,

The structure is part of the abstract syntax tree derived from the java SDF
grammar in java-front. One of the links in the previous email points to the
part of that syntax that handles classes:
https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax/src/languages/java-15/classes/ClassDeclarations.sdf

The structure can be found in these context-free syntax rules:

    ClassDecHead ClassBody -> ClassDec {cons("ClassDec")}
    "{" ClassBodyDec* "}" -> ClassBody {cons("ClassBody")}

The '{cons("ClassDec")}' determines that there will be ClassDec constructor
in the resulting AST, and because there are 2 non-terminals ClassDecHead
ClassBody, it will have 2 subterms (for example, it matches ClassDec(_,_)
).

ClassBody will consist of a ClassBody constructor ('{cons("ClassBody")}')
with 1 subterm, which is a list because of the '*' in ClassBodyDec*.

In your example,

ClassBody(FieldDec(_, _, [VarDec(Id(x))]))

you didn't insert a list in the classbody, so it won't be a valid AST for
the Java SDF syntax.
It should work if you make it a list (I didn't check the fielddec
constructor):

ClassBody([FieldDec(_, _, [VarDec(Id(x))])])

Note that this only matches if you have exactly one fielddec in the
classbody, otherwise you need to do something similar to the interface check
in the 'AddMethod' rule I showed.

-Danny


On Thu, Nov 19, 2009 at 6:20 PM, <marcosge at ucpel.tche.br> wrote:

> Hi Danny, I have another question. How do you find this structure?
>
>
> ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,Some(ImplementsDec(interfaces)),ClassBody(bodyelems)
>
> I searched this structure but I couldn't find. What the structure of the
> ClassBody?
>
>
> ClassBody( ?? )
>
> I tried this:
>
> ClassBody(FieldDec(_, _, [VarDec(Id(x))]))
>
> But it is wrong.
>
>
> -- Marcos
>
>
> > Hi Marcos,
> >
> > Did you add an add-method.meta file containing:
> >
> > Meta([
> >   Syntax("Stratego-Java-15")
> > ])
> >
> >
> > -Danny
> >
> > On Thu, Nov 5, 2009 at 9:14 PM, <marcosge at ucpel.tche.br> wrote:
> >
> >> Hi Danny, thank you for your answer.
> >>
> >> When I tried to compiled this code I had an error:
> >>
> >> quinho at linux-xlt5:~/Desktop/implements> strc -i add-method.str
> >> $(strcflags
> >> stratego-lib java-front)
> >> [ strc | info ] Compiling 'add-method.str'
> >> [ strc | error ] ./add-method.str: character ':' unexpected at line 29,
> >> column 50
> >> [ strc | error ] where  <fetch(?InterfaceType(TypeName(Id("TObject")),
> >> None()))> interfaces
> >> [ strc | error ] with   newbodyelems := <concat> [ bodyelems,
> >> java:class-body-dec*|[ public boolean getFork () {} public void setFork
> >> ()
> >> {} ]|  ]
> >> [ strc | error ]                                                  ^
> >> parse error in ./add-method.str
> >>
> >>
> >> Then I removed the "java:" before "class-body-dec*" and the error was:
> >>
> >> quinho at linux-xlt5:~/Desktop/implements> strc -i add-method.str
> >> $(strcflags
> >> stratego-lib java-front)
> >> [ strc | info ] Compiling 'add-method.str'
> >> [ strc | error ] ./add-method.str: character 'b' unexpected at line 29,
> >> column 71
> >> [ strc | error ] where  <fetch(?InterfaceType(TypeName(Id("TObject")),
> >> None()))> interfaces
> >> [ strc | error ] with   newbodyelems := <concat> [ bodyelems,
> >> class-body-dec*|[ public boolean getFork () {} public void setFork () {}
> >> ]|   ]
> >> [ strc | error ]
> >>            ^
> >> parse error in ./add-method.str
> >>
> >>
> >> --Marcos
> >>
> >>
> >> > Hi Marcos,
> >> >
> >> > Your AddMethod rule should look something like this (haven't tested
> >> this
> >> > code):
> >> >
> >> > AddMethod:
> >> >
> >>
> ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,Some(ImplementsDec(interfaces)),ClassBody(bodyelems)
> >> > ->
> >> >
> >>
> ClassDec(ClassDecHead(annoclassmod,ident,opttypeparams,optsuper,Some(ImplementsDec(interfaces)),ClassBody(newbodyelems)
> >> >
> >> > where  <fetch(?InterfaceType(TypeName(Id("TObject")), None()))>
> >> interfaces
> >> > with     newbodyelems := <concat> [ bodyelems, java:class-body-dec* |[
> >> > public Boolean getFork () {} public void setFork () {} ]|  ]
> >> >
> >> > some pointers:
> >> >
> >> > Java SDF syntax:
> >> >
> https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax/src/
> >> > Java Class syntax:
> >> >
> >>
> https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax/src/languages/java-15/classes/ClassDeclarations.sdf
> >> > Java embedding in Stratego:
> >> >
> >>
> https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax-embedding/languages/java/EmbeddedJava.sdf
> >> >
> >> >
> >> > -Danny
> >> >
> >> > On Thu, Oct 29, 2009 at 9:39 PM, <marcosge at ucpel.tche.br> wrote:
> >> >
> >> >> I did this:
> >> >>
> >> >> I used the tool pp-aterm to generated the abstract syntax tree of
> >> class:
> >> >>
> >> >> class Fork implements TObject {
> >> >>    private volatile Boolean fork = true;
> >> >> }
> >> >>
> >> >> and the pp-aterm generated:
> >> >>
> >> >> CompilationUnit(
> >> >>  None()
> >> >> , []
> >> >> , [ ClassDec(
> >> >>      ClassDecHead(
> >> >>        []
> >> >>      , Id("Fork")
> >> >>      , None()
> >> >>      , None()
> >> >>      , Some(ImplementsDec([InterfaceType(TypeName(Id("TObject")),
> >> >> None())]))
> >> >>      )
> >> >>    , ClassBody(
> >> >>        [ FieldDec(
> >> >>            [Private(), Volatile()]
> >> >>          , Boolean()
> >> >>          , [VarDec(Id("fork"), Lit(Bool(True())))]
> >> >>          )
> >> >>        ]
> >> >>      )
> >> >>    )
> >> >>  ]
> >> >> )
> >> >>
> >> >> Then in my .str, I wrote this rule:
> >> >>
> >> >> module add-method
> >> >> imports libstratego-lib libjava-front
> >> >> strategies
> >> >>
> >> >>  main =
> >> >>    io-wrap(add-method)
> >> >>
> >> >>  add-method =
> >> >>    topdown(try(AddMethod))
> >> >>
> >> >> rules
> >> >>
> >> >>  AddMethod:
> >> >>   ImplementsDec(e) ->
> >> >> ImplementsDec([InterfaceType(TypeName(Id("TObject")), None())])
> >> >>     where <equal>(e,[InterfaceType(TypeName(Id("TObject")), None())])
> >> >>
> >> >>
> >> >> Ok. This is simple, but I need verify that the class implements the
> >> >> interface TObject. My transformation will be:
> >> >>
> >> >> Translate this code:
> >> >>
> >> >> class Fork implements TObject {
> >> >>    private volatile Boolean fork = true;
> >> >> }
> >> >>
> >> >> To this code:
> >> >>
> >> >> class Fork implements TObject {
> >> >>    private volatile Boolean fork = true;
> >> >>    public getFork () {}
> >> >>    public setFork () {}
> >> >> }
> >> >>
> >> >> Do you understand?
> >> >>
> >> >>
> >> >>
> >> >> >
> >> >> > Hi Marcos,
> >> >> >
> >> >> > I am not sure what you mean with '.. And I create a rule using the
> >> >> > function <equal>  but I could not made the transformation...'.
> >> Could
> >> >> you
> >> >> > be a bit more specific on your problems?
> >> >> >
> >> >> > I don't think there a real tutorial for Java transformations, but
> >> >> maybe
> >> >> > this presentation gives an idea.
> >> http://smart-generators.org/M3Visser*
> >> >> > And of course there is the StrategoXT manual which gives
> >> explanation
> >> >> of
> >> >> > all aspects of StrategoXT architecture and language:
> >> >> >
> >> >>
> >>
> http://hydra.nixos.org/job/strategoxt-docs/strategoxt-manual/html/latest/download/1/manual
> >> >> >
> >> >> > greetings,
> >> >> > Rob
> >> >> >
> >> >> >
> >> >> > 2009/10/29 <marcosge at ucpel.tche.br>
> >> >> >
> >> >> >     Hi users, I am using the Stratego/XT tool with Java-Front for
> >> >> > translate
> >> >> >     some codes. But I could not made a transformation. It is not
> >> >> > difficult,
> >> >> >     but I need help.
> >> >> >
> >> >> >     I have a simple class:
> >> >> >
> >> >> >     class Fork implements TObject {
> >> >> >            private volatile Boolean fork = true;
> >> >> >     }
> >> >> >
> >> >> >     And I need verify that this class implements the interface
> >> >> 'TObjetc'.
> >> >> > If
> >> >> >     yes, I include some code after the attribute 'fork':
> >> >> >
> >> >> >     class Fork implements TObject {
> >> >> >           private volatile Boolean fork = true;
> >> >> >           public getFork () {}
> >> >> >           public setFork () {}
> >> >> >     }
> >> >> >
> >> >> >     I tried made this analyzing the abstract syntax tree generated
> >> by
> >> >> the
> >> >> >     output of parse-java to the pp-aterm tool. And I create a rule
> >> >> using
> >> >> > the
> >> >> >     function <equal>  but I could not made the transformation. I
> >> think
> >> >> > this is
> >> >> >     simple, but I do not understand how to make this.
> >> >> >
> >> >> >     Can you help me?
> >> >> >
> >> >> >     Do you have any paper that learns how do this?
> >> >> >
> >> >> >     --
> >> >> >     Marcos Echevarria
> >> >> >     UCPEL - Brazil
> >> >> > _______________________________________________
> >> >> > Users mailing list
> >> >> > Users at strategoxt.org
> >> >> > https://mailman.st.ewi.tudelft.nl/listinfo/users
> >> >> >
> >> >>
> >> >>
> >> >>
> >> >> _______________________________________________
> >> >> Users mailing list
> >> >> Users at strategoxt.org
> >> >> https://mailman.st.ewi.tudelft.nl/listinfo/users
> >> >>
> >> > _______________________________________________
> >> > Users mailing list
> >> > Users at strategoxt.org
> >> > https://mailman.st.ewi.tudelft.nl/listinfo/users
> >> >
> >>
> >>
> >>
> >
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: https://mailman.st.ewi.tudelft.nl/pipermail/users/attachments/20091119/570d97aa/attachment.html 

From marcosge at ucpel.tche.br  Fri Nov 20 01:13:12 2009
From: marcosge at ucpel.tche.br (marcosge at ucpel.tche.br)
Date: Thu, 19 Nov 2009 22:13:12 -0200
Subject: [Stratego Users] Help with java-front
Message-ID: <862f75e18d522660378a34a7d8dd4f2d.squirrel@webmail.ucpel.tche.br>

Hi users!
Why this rule does not work?

  AddMethod:
    ClassBody([ FieldDec(annofieldmod, type, [VarDec(Id(x))]) ]) ->
ClassBody([ FieldDec(annofieldmod, type, [VarDec(Id(newx))]) ])
    with newx := "gr"

I tried just modify the name of some attributes that have in my code.


-- Marcos



From gre at ecs.soton.ac.uk  Wed Nov 25 12:58:22 2009
From: gre at ecs.soton.ac.uk (Rob Economopoulos)
Date: Wed, 25 Nov 2009 11:58:22 +0000
Subject: [Stratego Users] GPCE'10 First Call for Papers
Message-ID: <20091125115822.GA14345@psyche>

------------------------------------------------------------------------
                        CALL FOR PAPERS

                Ninth International Conference on
         Generative Programming and Component Engineering 
                       (GPCE 2010)

                    October 10-13, 2010
                  Eindhoven, The Netherlands
                  (co-located with SLE 2010)

                     http://www.gpce.org
------------------------------------------------------------------------

IMPORTANT DATES

* Submission of abstracts: May 17, 2010 
* Submission of papers: May 24, 2010
* Author notification: Jul 5, 2010

SCOPE

Generative and component approaches are revolutionizing software
development similar to how automation and components revolutionized
manufacturing. Generative Programming (concerning programs that
synthesize other programs), Component Engineering (concerning
modularity in application design), and Domain-Specific Languages
(DSLs) (concerning compact domain-specific notations for expressing
programs) are key technologies for automating program development.

The International Conference on Generative Programming and Component
Engineering is a venue for researchers and practitioners interested in
techniques that, through deploying components and program generation,
increase programmer productivity, improve software quality, and
shorten the time-to-market of software products.  In addition to
exploring cutting-edge techniques of generative and component-based
software, our goal is to foster further cross-fertilization between
the software engineering and the programming languages research
communities.

SUBMISSIONS

Research papers:

10 pages in SIGPLAN proceedings style (sigplanconf.cls) reporting
original research results that contribute to scientific knowledge in
the areas listed below (the PC chair can advise on appropriateness).

Tool demonstrations:

Tool demonstrations should present tools that implement novel
generative and component-based software engineering techniques, and
are available for use. Any of the GPCE'10 topics of interest are
appropriate areas for research demonstrations.  Purely commercial tool
demonstrations will not be accepted. Submissions should contain a tool
description of 4 pages in SIGPLAN proceedings style (sigplanconf.cls)
and a demonstration outline of up to 2 pages text plus 2 pages screen
shots. The four page description will, if the demonstration is accepted,
be published in the proceedings. The 2+2 page demonstration outline
will only be used by the PC for evaluating the submission.

TOPICS

GPCE seeks contributions in software engineering and in programming
languages related (but not limited) to:

* Generative programming
    o Reuse, meta-programming, partial evaluation, multi-stage and
      multi-level languages, step-wise refinement, generic programming
    o Semantics, type systems, symbolic computation, linking and
      explicit substitution, in-lining and macros, templates,
      program transformation
    o Runtime code generation, compilation, active libraries,
      synthesis from specifications, development methods,
      generation of non-code artifacts, formal methods, reflection
* Generative techniques for
    o Product-line architectures
    o Distributed, real-time and embedded systems
    o Model-driven development and architecture
    o Resource bounded/safety critical systems.
* Component-based software engineering
    o Reuse, distributed platforms and middleware, distributed
      systems, evolution, patterns, development methods,
      deployment and configuration techniques, formal methods
* Integration of generative and component-based approaches
* Domain engineering and domain analysis
    o Domain-specific languages including visual and UML-based DSLs
* Separation of concerns
    o Aspect-oriented and feature-oriented programming,
    o Intentional programming and multi-dimensional separation of
      concerns
* Industrial applications of the above

Submissions must adhere to SIGPLAN's republication policy. Please
contact the program chair if you have any questions about how this
policy applies to your paper (chairs at gpce.org).

ORGANIZATION

General Chair:    Eelco Visser (Delft University of Technology, The Netherlands)
Program Chair:    Jaakko J?rvi (Texas A&M University, USA)
Publicity Chair:  Giorgios Economopoulos (University of Southampton, UK)

Program Committee

* Sven Apel (University of Passau, Germany)                         
* Don Batory (University of Texas, USA)                             
* Martin Bravenboer (LogicBlox, USA)                                
* Krzysztof Czarnecki (University of Waterloo, Canada)              
* Charles Consel (INRIA / LaBRI, France)                            
* Gabriel Dos Reis (Texas A&M University, USA)                      
* Ewen Denney (RIACS/NASA Ames, USA)                              
* Ronald Garcia (Carnegie Mellon University, USA)                   
* Magne Haveraaen (University of Bergen, Norway)                    
* Johan Lilius (?bo Akademi University, Finland)                    
* Andres L?h (Utrecht University, The Netherlands)                  
* Mat Marcus (Canyonlands Software Design, USA)
* Marjan Mernik (University of Maribor, Slovenia)                   
* Klaus Ostermann (University of Marburg, Germany)                  
* Bruno C. d. S. Oliveira (Seoul National University, Korea)        
* Hridesh Rajan (Iowa State University, USA)                        
* Sukyoung Ryu (Korea Advanced Institute of Science and Technology) 
* Jo?o Saraiva (Minho University, Portugal)                        
* Sibylle Schupp (Hamburg University of Technology, Germany)        
* Kwang Yi (Seoul National University, Korea)                       
* Mirko Viroli (University of Bologna, Italy)                       
* Alessandro Warth (Viewpoints Research Institute, USA)             
* Edwin Westbrook (Rice University, USA)                           
* Jeremiah Willcock (Indiana University, USA)                       


From gre at ecs.soton.ac.uk  Thu Nov 26 19:07:32 2009
From: gre at ecs.soton.ac.uk (Rob Economopoulos)
Date: Thu, 26 Nov 2009 18:07:32 +0000
Subject: [Stratego Users] LDTA
Message-ID: <20091126180732.GA15395@psyche>


*** abstracts: (Nov. 27, 2009, 23:59 Apia time) ***

====================================================================
                      CALL FOR PAPERS
  10th Workshop on Language Descriptions, Tools, and Applications
                        (LDTA 2010)
                    [ http://ldta.info ]
                       Paphos, Cyprus
              During ETAPS (March 27 & 28, 2010)
====================================================================

===Call For Papers 2010===

This is the Call For Papers for the Tenth Workshop on
Language Descriptions, Tools, and Applications (LDTA 2010):
- [ http://ldta.info ]

LDTA is a two-day satellite event of ETAPS which will take place
during ETAPS (March 20 & 28, 2010) in Paphos, Cyprus.
- [ http://www.etaps10.cs.ucy.ac.cy ] 

==Scope==

LDTA is an application and tool oriented forum on meta programming in
a broad sense. A meta program is a program that takes other programs
as input or output. The focus of LDTA is on generated or otherwise
efficiently implemented meta programs, possibly using high level
descriptions of programming languages. Tools and techniques presented
at LDTA are usually applicable in the context of "Language
Workbenches" or "Meta Programming Systems" or simply as parts of
advanced programming environments or IDEs. The applications areas
include, but are not limited to:

* Program analysis, transformation, generation, and verification
* Implementation of Domain Specific Languages (both graphical and textual)
* Reverse engineering and reengineering
* Refactoring and other source-to-source transformations
* Application modelling (MDE, MDA, Software Factories,
 Software product lines)
* Grammar engineering / Grammarware
* Language definition and language prototyping
* Debugging, profiling, and testing

LDTA is a well-established workshop next to other conferences and
workshops on (programming) language engineering topics such as SLE and
GPCE. LDTA is traditionally a forum where computer science theories are
put to the test of real-world software engineering issues, for example
by applying:

* context-free grammars to parser generation for real programming languages
* attribute grammars to static analyzer and compiler generation
* term rewriting to source-to-source transformation
* action semantics to programming language implementation
* model checking to software verification

Note that LDTA solicits submissions from any technological or
theoretical domain, as long as the paper is within the application
scope.

==Submission Procedure and Publication==

Submissions in the following categories are admissible:
* research papers
* tool papers
* experience papers

The final version of the accepted papers will, pending approval, be
published in the ACM Digital Library and will also be made available 
during the workshop.


Each submission must:
* clearly and unambiguously state in which of the three categories it falls;
* be original, i.e. not published or submitted elsewhere;
* contain a clear motivation;
* contain a thorough analysis of the claimed contributions (for example by
 comparing to related work);
* be written in less than 15 pages (research papers and experience reports),
 or less than 10 pages (tool papers); and
* use the standard LaTeX article style 
  (\documentclass[10pt]{article}, \usepackage{authblk} for affiliations)

Please submit your abstract and paper using EasyChair:
- [ http://www.easychair.org/conferences/?conf=ldta2010 ].

The authors of each submission are required to give a presentation at
LDTA 2010. The authors of the tool papers are required to include an
interactive demonstration in their presentations.

The authors of the best papers will be invited to write a journal
version of their paper which will be separately reviewed and, assuming
acceptance, be published in journal form. As in past years, this will
be done in a special issue devoted to LDTA 2010 of the journal Science
of Computer Programming (Elsevier Science). 

==Program Committee==

Claus Brabrand, IT University of Copenhagen, Denmark (co-chair)
Pierre-Etienne Moreau, Nancy-University & LORIA, France (co-chair)

Uwe Assmann, Dresden University of Technology, Germany
Emilie Balland, INRIA, France
John Boyland, University of Wisconsin, USA
Giorgios Robert Economopoulos, University of Southampton, UK
Magne Haveraaen, University of Bergen, Norway
Nigel Horspool, University of Victoria, Canada
Shan Shan Huang, Logic Blox, USA
Johan Jeuring, Utrecht University, The Netherlands
Ondrej Lhotak, University of Waterloo, Canada
Shane Markstrum, University of California, USA
Peter D. Mosses, Swansea University, UK
Klaus Ostermann, Philipps-Universitaet Marburg, Germany
Marc Pantel, University of Toulouse, France
Elizabeth Scott, Royal Holloway, University of London, UK
Eli Tilevich, Virginia Tech, USA
Eelco Visser, Delft University of Technology, The Netherlands
Joost Visser, Software Improvement Group, The Netherlands
Tobias Wrigstad, Purdue, USA

==Important Dates==

Abstract submission deadline: (Friday) November 27, 2009
Paper submission deadline: (Friday) December 04, 2009
Notification of acceptance: (Friday) February 05, 2010
Workshop dates: (weekend) during ETAPS, March 20-28, 2010


